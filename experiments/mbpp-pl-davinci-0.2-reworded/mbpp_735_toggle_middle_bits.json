{
  "name": "mbpp_735_toggle_middle_bits",
  "language": "pl",
  "prompt": "# Write a plthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nsub toggle_middle_bits {\n    my($n) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_735_toggle_middle_bits.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&toggle_middle_bits;\n        if(eq_deeply($candidate->(9),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),13)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(65),127)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(77),115)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $num = $n;\n    my $left_most_bit = 1;\n    my $right_most_bit = 1;\n    my $left_most_bit_pos = 0;\n    my $right_most_bit_pos = 0;\n    my $i = 0;\n    while($num != 0) {\n        if($num & 1) {\n            $left_most_bit = $i;\n            last;\n        }\n        $num = $num >> 1;\n        $i++;\n    }\n    $i = 0;\n    $num = $n;\n    while($num != 0) {\n        if($num & 1) {\n            $right_most_bit = $i;\n        }\n        $num = $num >> 1;\n        $i++;\n    }\n    $num = $n;\n    for($i = $left_most_bit + 1; $i < $right_most_bit; $i++) {\n        $num = $num ^ (1 << $i);\n    }\n    return $num;\n}",
    "    my $left_shift = 1;\n    my $right_shift = 1;\n    while($left_shift < $n) {\n        $left_shift = $left_shift << 1;\n    }\n    $left_shift = $left_shift >> 1;\n    while($right_shift < $left_shift) {\n        $right_shift = $right_shift << 1;\n    }\n    $right_shift = $right_shift >> 1;\n    my $mask = $left_shift | $right_shift;\n    return $n ^ $mask;\n}",
    "    my $mask = (1 << $n) - 1;\n    $mask ^= $mask >> 1;\n    return $mask;\n}",
    "    my $mask = (1 << ($n - 2)) - 1;\n    return $n ^ $mask;\n}",
    "    my $mask = 0xFFFFFFFF;\n    $mask = $mask >> 2;\n    $mask = ~$mask;\n    return $n ^ $mask;\n}",
    "    my $mask = (1 << ($n - 2)) - 1;\n    return $n ^ $mask;\n}",
    "    my $x = 0xAAAAAAAA;\n    return ($n ^ $x);\n}",
    "    my $mask = 0xFFFFFFFF;\n    $mask = $mask >> 2;\n    $mask = ~$mask;\n    return ($n ^ $mask);\n}",
    "    my $mask = 0xFFFFFFFF;\n    $mask = $mask >> 2;\n    $mask = ~$mask;\n    return $n ^ $mask;\n}",
    "    my $mask = (1 << ($n - 1)) - 1;\n    return $n ^ $mask;\n}",
    "    my $mask = (1 << ($n - 1)) | 1;\n    return $n ^ ((1 << ($n - 1)) - 1);\n}",
    "    my $mask = 0xFFFFFFFF;\n    $mask = $mask >> 2;\n    $mask = ~$mask;\n    return $n ^ $mask;\n}",
    "    my $mask = (1 << ($n - 1)) - 1;\n    return $n ^ $mask;\n}",
    "    my $mask = (1 << ($n - 1)) | 1;\n    return $n ^ ($mask << 1) - 1;\n}",
    "    my $x = 1;\n    my $y = $n;\n    while($x < $y) {\n        $n = $n ^ ($x | $y);\n        $x = $x << 1;\n        $y = $y >> 1;\n    }\n    return $n;\n}",
    "    my $mask = (1 << ($n - 1)) | 1;\n    return $n ^ ($mask << 1) - 1;\n}",
    "    my $mask = 0xFFFFFFFF;\n    my $left_mask = $mask << 2;\n    my $right_mask = $mask >> 2;\n    my $mask = $left_mask | $right_mask;\n    return $n ^ $mask;\n}",
    "    my $mask = (1 << ($n - 1)) | 1;\n    return $n ^ ~$mask;\n}",
    "    my $num = $n;\n    my $count = 0;\n    while($num) {\n        $count++;\n        $num = $num >> 1;\n    }\n    $count = $count - 2;\n    my $mask = (1 << $count) - 1;\n    my $result = $n ^ $mask;\n    return $result;\n}",
    "    my $mask = (1 << ($n - 1)) | 1;\n    return $n ^ ($mask << 1) - 1;\n}"
  ]
}