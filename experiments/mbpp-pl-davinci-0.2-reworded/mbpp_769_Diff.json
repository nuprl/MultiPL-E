{
  "name": "mbpp_769_Diff",
  "language": "pl",
  "prompt": "# Write a plthon function to get the difference between two arrays.\nsub Diff {\n    my($li1, $li2) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_769_Diff.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Diff;\n        if(eq_deeply($candidate->([10, 15, 20, 25, 30, 35, 40], [25, 40, 35]),[10, 20, 30, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5], [6, 7, 1]),[2, 3, 4, 5, 6, 7])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3], [6, 7, 1]),[2, 3, 6, 7])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%union, %isect, %diff);\n    my($e);\n    foreach $e (@$li1, @$li2) { $union{$e}++ && $isect{$e}++ }\n    foreach $e (keys %union) {\n        $diff{$e} = ($union{$e} == $isect{$e}) ? 0 : 1;\n    }\n    return [keys %diff];\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%union, %isect, %diff);\n    my(@diff);\n    foreach $e (@$li1, @$li2) { $union{$e}++ && $isect{$e}++ }\n    foreach $e (keys %union) {\n        push(@diff, $e) if ($isect{$e} != 2);\n    }\n    return @diff;\n}",
    "    my(%li1, %li2, @diff);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ && $li2{$e}++ }\n    foreach my $e (keys %li1, keys %li2) { push @diff, $e if $li1{$e} != $li2{$e} }\n    return @diff;\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%union, %isect, %diff);\n    my(@diffs);\n    foreach $e (@$li1, @$li2) { $union{$e}++ && $isect{$e}++ }\n    foreach $e (keys %union) {\n        push(@diffs, $e) if ($isect{$e} != 2);\n    }\n    return @diffs;\n}",
    "    my(%union, %isect, %diff);\n    my($e);\n    foreach $e (@$li1, @$li2) { $union{$e}++ && $isect{$e}++ }\n    foreach $e (keys %union) {\n        $diff{$e} = ($union{$e} == $isect{$e}) ? 0 : 1;\n    }\n    return keys %diff;\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%li1, %li2, @diff);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ && $li2{$e}++ }\n    foreach my $e (keys %li1, keys %li2) { push @diff, $e if $li1{$e} != $li2{$e} }\n    return @diff;\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my %h = map { $_ => 1 } @$li2;\n    return [ grep { !$h{$_} } @$li1 ];\n}",
    "    my(@li3) = ();\n    my(%count) = ();\n    foreach my $element (@$li1, @$li2) { $count{$element}++ }\n    foreach my $element (keys %count) {\n        push @li3, $element if $count{$element} == 1;\n    }\n    return @li3;\n}",
    "    my %count = ();\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    my @dif = ();\n    foreach my $e (keys %count) { push @dif, $e if $count{$e} == 1 }\n    return @dif;\n}",
    "    my %h = map { $_ => 1 } @$li2;\n    return [ grep { !$h{$_} } @$li1 ];\n}",
    "    my(%li1, %li2);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ && $li2{$e}++ }\n    return [grep { $li1{$_} } keys %li1], [grep { $li2{$_} } keys %li2];\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%h) = map { $_, 1 } @$li2;\n    return [ grep { !$h{$_} } @$li1 ];\n}",
    "    my(%union, %isect, @diff);\n    my($elem);\n    foreach $elem (@$li1, @$li2) { $union{$elem}++ && $isect{$elem}++ }\n    foreach $elem (keys %union) {\n        push(@diff, $elem) unless $isect{$elem};\n    }\n    return @diff;\n}",
    "    my(%li1, %li2);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ && $li2{$e}++ }\n    return [grep { $li1{$_} } keys %li1], [grep { $li2{$_} } keys %li2];\n}",
    "    my %li1 = map {$_ => 1} @$li1;\n    my %li2 = map {$_ => 1} @$li2;\n    my @diff = ();\n    foreach my $elem (keys %li1, keys %li2) {\n        push(@diff, $elem) if exists $li1{$elem} != exists $li2{$elem};\n    }\n    return @diff;\n}",
    "    my(%li1, %li2);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ && $li2{$e}++ }\n    my @dif;\n    push @dif, grep $li1{$_} != $li2{$_}, keys %li1;\n    push @dif, grep $li1{$_} != $li2{$_}, keys %li2;\n    return @dif;\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%union, %isect, %diff);\n    my(@diffs);\n    foreach $e (@$li1, @$li2) { $union{$e}++ && $isect{$e}++ }\n    foreach $e (keys %union) {\n\tpush(@diffs, $e) if ($isect{$e} != 2);\n    }\n    return @diffs;\n}",
    "    my %h1 = map { $_ => 1 } @$li1;\n    my %h2 = map { $_ => 1 } @$li2;\n    my @diff;\n    foreach my $e (keys %h1, keys %h2) {\n        push @diff, $e if exists $h1{$e} != exists $h2{$e};\n    }\n    return @diff;\n}",
    "    my(%li1, %li2);\n    foreach my $e (@{$li1}) { $li1{$e} = 1; }\n    foreach my $e (@{$li2}) { $li2{$e} = 1; }\n    my @diff;\n    foreach my $e (keys %li1, keys %li2) {\n        push(@diff, $e) if exists $li1{$e} != exists $li2{$e};\n    }\n    return @diff;\n}",
    "    my(%li1, %li2);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ }\n    foreach my $e (@$li2) { $li2{$e}++ }\n    my @dif;\n    foreach my $e (keys %li1, keys %li2) {\n        push(@dif, $e) if $li1{$e} != $li2{$e};\n    }\n    return @dif;\n}",
    "    my(%h, @d);\n    foreach my $e (@$li1, @$li2) { $h{$e} = 1 }\n    foreach my $e (keys %h) {\n        push(@d, $e) if $h{$e} == 1;\n    }\n    return @d;\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%h1, %h2, @diff);\n    foreach my $e (@$li1, @$li2) { $h1{$e}++ }\n    foreach my $e (@$li2) { $h2{$e}++ }\n    foreach my $e (keys %h1) {\n        push(@diff, $e) if $h1{$e} != $h2{$e};\n    }\n    return @diff;\n}",
    "    my(%li1, %li2);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ && $li2{$e}++ }\n    return [grep { $li1{$_} } keys %li1], [grep { $li2{$_} } keys %li2];\n}",
    "    my(%union, %isect, %diff);\n    my(@diff);\n    %union = map { $_, 1 } @$li1, @$li2;\n    %isect = map { $_, 1 } @$li1, @$li2;\n    delete @isect{@$li1};\n    delete @isect{@$li2};\n    @diff = keys %isect;\n    return @diff;\n}",
    "    my(%li1, %li2);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ && $li2{$e}++ }\n    return [grep { $li1{$_} } keys %li1], [grep { $li2{$_} } keys %li2];\n}",
    "    my(%union, %isect, %diff);\n    my(@diff);\n    %union = map { $_, 1 } @$li1, @$li2;\n    %isect = map { $_, 1 } @$li1, @$li2;\n    delete @isect{@$li1};\n    delete @isect{@$li2};\n    @diff = keys %isect;\n    return @diff;\n}",
    "    my(%li1, %li2, @diff);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ && $li2{$e}++ }\n    foreach my $e (keys %li1, keys %li2) { push @diff, $e if $li1{$e} != $li2{$e} }\n    return @diff;\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%h, @d);\n    foreach $e (@$li1, @$li2) { $h{$e} = 1 }\n    foreach $e (keys %h) {\n        push(@d, $e), next if $h{$e} == 1;\n        push @d, [$e, $h{$e}] if $h{$e} == 2;\n    }\n    @d;\n}",
    "    my(%li1, %li2, @diff);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ && $li2{$e}++ }\n    foreach my $e (keys %li1, keys %li2) { push @diff, $e if $li1{$e} != $li2{$e} }\n    return @diff;\n}",
    "    my(%li1, %li2);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ && $li2{$e}++ }\n    return [grep { $li1{$_} } keys %li1], [grep { $li2{$_} } keys %li2];\n}",
    "    my(%union, %isect, %diff);\n    my($e);\n    foreach $e (@$li1, @$li2) { $union{$e}++ && $isect{$e}++ }\n    foreach $e (keys %union) {\n        $diff{$e} = ($union{$e} == $isect{$e}) ? 0 : 1;\n    }\n    return [keys %diff];\n}",
    "    my(%li1, %li2);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ && $li2{$e}++ }\n    my @dif;\n    push @dif, $_ foreach grep $li1{$_} != $li2{$_}, keys %li1;\n    return @dif;\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%li1, %li2);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ }\n    foreach my $e (@$li2) { $li2{$e}++ }\n    my @diffs;\n    foreach my $e (keys %li1, keys %li2) {\n        push(@diffs, $e) if $li1{$e} != $li2{$e};\n    }\n    return @diffs;\n}",
    "    my %h1 = map { $_ => 1 } @$li1;\n    my %h2 = map { $_ => 1 } @$li2;\n    my @diff;\n    foreach my $e (keys %h1, keys %h2) {\n        push @diff, $e if exists $h1{$e} != exists $h2{$e};\n    }\n    return @diff;\n}",
    "    my(%union, %isect, %diff);\n    my(@diffs);\n    foreach $e (@$li1, @$li2) { $union{$e}++ && $isect{$e}++ }\n    foreach $e (keys %union) {\n\tpush(@diffs, $e) if ($isect{$e} != 2);\n    }\n    return @diffs;\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%union, %isect, %diff);\n    my($e);\n    foreach $e (@$li1, @$li2) { $union{$e}++ && $isect{$e}++ }\n    foreach $e (keys %union) {\n        $diff{$e} = ($union{$e} == $isect{$e}) ? 0 : 1;\n    }\n    return keys %diff;\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%li1, %li2);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ && $li2{$e}++ }\n    return [grep { $li1{$_} } keys %li1], [grep { $li2{$_} } keys %li2];\n}",
    "    my(%li1, %li2);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ && $li2{$e}++ }\n    my @li;\n    push @li, grep $li1{$_} != $li2{$_}, keys %li1;\n    push @li, grep $li1{$_} != $li2{$_}, keys %li2;\n    return @li;\n}",
    "    my(%li1, %li2);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ && $li2{$e}++ }\n    my @dif;\n    push @dif, $_ foreach grep $li1{$_} != $li2{$_}, keys %li1;\n    return @dif;\n}",
    "    my(%li1, %li2, @diff);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ && $li2{$e}++ }\n    foreach my $e (keys %li1, keys %li2) { push @diff, $e if $li1{$e} != $li2{$e} }\n    return @diff;\n}",
    "    my %count = ();\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    my @dif = ();\n    foreach my $e (keys %count) { push @dif, $e if $count{$e} == 1 }\n    return @dif;\n}",
    "    my(%hash) = map { $_, 1 } @$li2;\n    my(@diff) = grep(!exists($hash{$_}), @$li1);\n    return @diff;\n}",
    "    my(%h1, %h2, @d);\n    foreach $e (@{$li1}) { $h1{$e} = 1; }\n    foreach $e (@{$li2}) { $h2{$e} = 1; }\n    foreach $e (keys %h1, keys %h2) {\n        push(@d, $e) if exists $h1{$e} && !exists $h2{$e};\n    }\n    return @d;\n}",
    "    my(%li1, %li2);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ && $li2{$e}++ }\n    return [grep { $li1{$_} } keys %li1], [grep { $li2{$_} } keys %li2];\n}",
    "    my(%hash) = map { $_, 1 } @$li2;\n    return [ grep { ! $hash{$_} } @$li1 ];\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(@li3) = ();\n    my(%count) = ();\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    foreach my $e (keys %count) {\n        push(@li3, $e) if $count{$e} == 1;\n    }\n    return @li3;\n}",
    "    my(%union, %isect, %diff);\n    my(@diffs);\n    foreach $e (@$li1, @$li2) { $union{$e}++ && $isect{$e}++ }\n    foreach $e (keys %union) {\n\tpush(@diffs, $e) if ($isect{$e} != 2);\n    }\n    return @diffs;\n}",
    "    my(%li1, %li2);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ }\n    foreach my $e (@$li2) { $li2{$e}++ }\n    my @diffs;\n    foreach my $e (keys %li1, keys %li2) {\n        push(@diffs, $e) if $li1{$e} != $li2{$e};\n    }\n    return @diffs;\n}",
    "    my(%h, @d);\n    foreach $e (@$li1, @$li2) { $h{$e} = 1 }\n    foreach $e (keys %h) {\n        push(@d, $e), next if $h{$e} == 1;\n        push @d, [ $e, $h{$e} ] if $h{$e} == 2;\n    }\n    @d;\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my %h1 = map { $_ => 1 } @$li1;\n    my %h2 = map { $_ => 1 } @$li2;\n    my @diff = grep { !$h2{$_} } keys %h1;\n    return @diff;\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my @li1 = @$li1;\n    my @li2 = @$li2;\n    my @li3;\n    my %hash;\n    foreach my $e (@li2) { $hash{$e} = 1; }\n    foreach my $e (@li1) {\n        push(@li3, $e) unless exists $hash{$e};\n    }\n    return @li3;\n}",
    "    my(%li1, %li2);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ && $li2{$e}++ }\n    return [grep { $li1{$_} } keys %li1], [grep { $li2{$_} } keys %li2];\n}",
    "    my(%li1, %li2);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ && $li2{$e}++ }\n    return [grep { $li1{$_} } keys %li1], [grep { $li2{$_} } keys %li2];\n}",
    "    my(%li1, %li2);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ && $li2{$e}++ }\n    my @dif;\n    push @dif, $e foreach (keys %li1, keys %li2);\n    my %union = map {$_,1} @dif;\n    @dif = keys %union;\n    my @intersection;\n    my @difference;\n    foreach my $e (@dif) {\n        push @{ $li1{$e} && $li2{$e} ? \\@intersection : \\@difference }, $e;\n    }\n    return \\@difference;\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%union, %isect, %diff);\n    my(@diffs);\n    foreach $e (@$li1, @$li2) { $union{$e}++ && $isect{$e}++ }\n    foreach $e (keys %union) {\n        push(@diffs, $e) if ($isect{$e} != 2);\n    }\n    return @diffs;\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%li1, %li2);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ && $li2{$e}++ }\n    return [grep { $li1{$_} } keys %li1], [grep { !$li2{$_} } keys %li1];\n}",
    "    my(%li1, %li2, @diff);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ && $li2{$e}++ }\n    foreach my $e (keys %li1, keys %li2) { push @diff, $e if $li1{$e} != $li2{$e} }\n    return @diff;\n}",
    "    my(%union, %isect, %diff);\n    my(@li1) = @$li1;\n    my(@li2) = @$li2;\n    foreach my $e (@li1, @li2) { $union{$e}++ && $isect{$e}++ }\n    foreach my $e (keys %union) {\n        $diff{$e} = ($union{$e} == $isect{$e}) ? 0 : 1\n    }\n    return keys %diff;\n}",
    "    my(%h1, %h2, @diff);\n    foreach my $e (@$li1, @$li2) { $h1{$e}++ && $h2{$e}++ }\n    foreach my $e (keys %h1) { push @diff, $e unless $h2{$e} }\n    return @diff;\n}",
    "    my(%union, %isect, %diff);\n    my(@diffs);\n    foreach $e (@$li1, @$li2) { $union{$e}++ && $isect{$e}++ }\n    foreach $e (keys %union) {\n\tpush(@diffs, $e) if ($isect{$e} != 2);\n    }\n    return @diffs;\n}",
    "    my(%li1, %li2);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ && $li2{$e}++ }\n    my @dif;\n    push @dif, grep $li1{$_} != $li2{$_}, keys %li1;\n    push @dif, grep $li1{$_} != $li2{$_}, keys %li2;\n    return @dif;\n}",
    "    my(%li1, %li2);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ && $li2{$e}++ }\n    return [grep { $li1{$_} } keys %li1], [grep { $li2{$_} } keys %li2];\n}",
    "    my(@li1, @li2, @li3);\n    my(%count);\n    foreach $e (@$li1, @$li2) { $count{$e}++ }\n    foreach $e (keys %count) {\n        push(@li1, $e) if $count{$e} == 1;\n    }\n    return @li1;\n}",
    "    my(%li1, %li2);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ && $li2{$e}++ }\n    my @dif;\n    push @dif, grep $li1{$_} != $li2{$_}, keys %li1;\n    push @dif, grep $li1{$_} != $li2{$_}, keys %li2;\n    return @dif;\n}",
    "    my(%li1, %li2);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ }\n    foreach my $e (@$li2) { $li2{$e}++ }\n    my @diffs;\n    foreach my $e (keys %li1, keys %li2) {\n        push(@diffs, $e) if $li1{$e} != $li2{$e};\n    }\n    return @diffs;\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%li1, %li2);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ && $li2{$e}++ }\n    my @dif;\n    push @dif, $_ foreach grep $li1{$_} != $li2{$_}, keys %li1;\n    return @dif;\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my %union = ();\n    my %isect = ();\n    my @diff = ();\n    foreach my $e (@{$li1}, @{$li2}) { $union{$e}++ && $isect{$e}++ }\n    foreach my $e (keys %union) {\n        push(@diff, $e) if ($isect{$e} != 2);\n    }\n    return @diff;\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%li1, %li2);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ && $li2{$e}++ }\n    my @dif;\n    push @dif, grep $li1{$_} != $li2{$_}, keys %li1;\n    push @dif, grep $li1{$_} != $li2{$_}, keys %li2;\n    return @dif;\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%hash) = map { $_, 1 } @$li2;\n    return [grep { !$hash{$_} } @$li1];\n}",
    "    my(%h1, %h2, @diff);\n    foreach my $e (@$li1, @$li2) { $h1{$e}++ }\n    foreach my $e (@$li2) { $h2{$e}++ }\n    foreach my $e (keys %h1) {\n        push(@diff, $e) if $h1{$e} != $h2{$e};\n    }\n    return @diff;\n}",
    "    my(%union, %isect, @diff);\n    my($elem);\n    foreach $elem (@$li1, @$li2) { $union{$elem}++ && $isect{$elem}++ }\n    foreach $elem (keys %union) {\n        push(@diff, $elem) unless $isect{$elem};\n    }\n    return @diff;\n}",
    "    my(%li1, %li2);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ && $li2{$e}++ }\n    my @dif;\n    push @dif, $_ foreach (grep { $li1{$_} != $li2{$_} } keys %li1, keys %li2);\n    return @dif;\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%hash) = map { $_, 1 } @$li2;\n    return [grep { !$hash{$_} } @$li1];\n}",
    "    my(%li1, %li2, @diff);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ && $li2{$e}++ }\n    foreach my $e (keys %li1, keys %li2) { push @diff, $e if $li1{$e} != $li2{$e} }\n    return @diff;\n}",
    "    my(%li1, %li2, @diff);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ && $li2{$e}++ }\n    foreach my $e (keys %li1, keys %li2) { push @diff, $e if $li1{$e} != $li2{$e} }\n    return @diff;\n}",
    "    my(%li1, %li2);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ }\n    foreach my $e (@$li2) { $li2{$e}++ }\n    my @diffs;\n    foreach my $e (keys %li1, keys %li2) {\n        push(@diffs, $e) if $li1{$e} != $li2{$e};\n    }\n    return @diffs;\n}",
    "    my(@list1, @list2, @diff);\n    @list1 = @$li1;\n    @list2 = @$li2;\n    my(%count);\n    foreach my $element (@list1, @list2) { $count{$element}++ }\n    foreach my $element (keys %count) {\n        push @diff, $element if $count{$element} == 1;\n    }\n    return @diff;\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%li1, %li2);\n    my(@dif);",
    "    my(%li1, %li2);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ }\n    foreach my $e (@$li2) { $li2{$e}++ }\n    my @diffs;\n    foreach my $e (keys %li1, keys %li2) {\n        push(@diffs, $e) if $li1{$e} != $li2{$e};\n    }\n    return @diffs;\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%li1, %li2);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ }\n    foreach my $e (@$li2) { $li2{$e}++ }\n    my @diffs;\n    foreach my $e (keys %li1, keys %li2) {\n        push(@diffs, $e) if $li1{$e} != $li2{$e};\n    }\n    return @diffs;\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%union, %isect, @diff);\n    my($elem);\n    foreach $elem (@$li1, @$li2) { $union{$elem}++ && $isect{$elem}++ }\n    foreach $elem (keys %union) {\n        push(@diff, $elem) unless $isect{$elem};\n    }\n    return @diff;\n}",
    "    my(%li1, %li2);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ }\n    foreach my $e (@$li2) { $li2{$e}++ }\n    my @diffs;\n    foreach my $e (keys %li1, keys %li2) {\n        push(@diffs, $e) if $li1{$e} != $li2{$e};\n    }\n    return @diffs;\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%h, @d);\n    foreach $e (@$li1, @$li2) { $h{$e} = 1 }\n    foreach $e (keys %h) {\n        push(@d, $e), next if $h{$e} == 1;\n        push @d, [$e, $h{$e}] if $h{$e} == 2;\n    }\n    @d;\n}",
    "    my(%li1, %li2);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ && $li2{$e}++ }\n    return [grep { $li1{$_} } keys %li1], [grep { $li2{$_} } keys %li2];\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%li1, %li2);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ && $li2{$e}++ }\n    my @dif;\n    push @dif, grep $li1{$_} != $li2{$_}, keys %li1;\n    push @dif, grep $li1{$_} != $li2{$_}, keys %li2;\n    return @dif;\n}",
    "    my(%li1, %li2, @diff);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ && $li2{$e}++ }\n    foreach my $e (keys %li1, keys %li2) { push @diff, $e if $li1{$e} != $li2{$e} }\n    return @diff;\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%li1, %li2);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ && $li2{$e}++ }\n    my @dif;\n    push @dif, $_ foreach (grep { $li1{$_} != $li2{$_} } keys %li1, keys %li2);\n    return @dif;\n}",
    "    my(%union, %isect, %diff);\n    my($e);\n    foreach $e (@$li1, @$li2) { $union{$e}++ && $isect{$e}++ }\n    foreach $e (keys %union) {\n        $diff{$e} = ($union{$e} == $isect{$e}) ? 0 : 1;\n    }\n    return keys %diff;\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%union, %isect, %diff);\n    my(@dif);\n    %union = map { $_, 1 } @$li1, @$li2;\n    %isect = map { $_, 1 } @$li1, @$li2;\n    delete @isect{@$li1};\n    delete @isect{@$li2};\n    @dif = keys %isect;\n    return @dif;\n}",
    "    my(%li1, %li2, @diff);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ && $li2{$e}++ }\n    foreach my $e (keys %li1, keys %li2) { push @diff, $e if $li1{$e} != $li2{$e} }\n    return @diff;\n}",
    "    my(%li1, %li2);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ && $li2{$e}++ }\n    return [grep { $li1{$_} } keys %li1], [grep { $li2{$_} } keys %li2];\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%h, @d);\n    foreach $e (@$li1, @$li2) { $h{$e} = 1 }\n    foreach $e (keys %h) {\n        push(@d, $e) if $h{$e} == 1;\n    }\n    return @d;\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%li1, %li2);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ && $li2{$e}++ }\n    return [grep { $li1{$_} } keys %li1], [grep { $li2{$_} } keys %li2];\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%hash) = map { $_, 1 } @$li2;\n    return [ grep { !$hash{$_} } @$li1 ];\n}",
    "    my(%li1, %li2, @diff);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ && $li2{$e}++ }\n    foreach my $e (keys %li1, keys %li2) { push @diff, $e if $li1{$e} != $li2{$e} }\n    return @diff;\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%li1, %li2, @diff);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ && $li2{$e}++ }\n    foreach my $e (keys %li1, keys %li2) { push @diff, $e if $li1{$e} != $li2{$e} }\n    return @diff;\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [ grep { $count{$_} == 1 } keys %count ];\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%union, %isect, %diff);\n    my(@diffs);\n    foreach $elem (@$li1, @$li2) { $union{$elem}++ && $isect{$elem}++ }\n    foreach $elem (keys %union) {\n        push(@diffs, $elem) if ($isect{$elem} != 2);\n    }\n    @diffs;\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%h, @d);\n    foreach $e (@$li1, @$li2) { $h{$e} = 1; }\n    foreach $e (keys %h) {\n        push(@d, $e) if $h{$e} == 1;\n    }\n    return @d;\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%li1, %li2);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ && $li2{$e}++ }\n    return [grep { $li1{$_} } keys %li1], [grep { !$li2{$_} } keys %li1];\n}",
    "    my(%li1, %li2);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ && $li2{$e}++ }\n    return [grep { $li1{$_} } keys %li1], [grep { $li2{$_} } keys %li2];\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%li1, %li2, @diff);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ && $li2{$e}++ }\n    foreach my $e (keys %li1, keys %li2) { push @diff, $e if $li1{$e} != $li2{$e} }\n    return @diff;\n}",
    "    my %li1 = map {$_ => 1} @$li1;\n    my %li2 = map {$_ => 1} @$li2;\n    my @diff = ();\n    foreach my $elem (keys %li1, keys %li2) {\n        push(@diff, $elem) if exists $li1{$elem} != exists $li2{$elem};\n    }\n    return @diff;\n}",
    "    my %h = map {$_ => 1} @$li2;\n    return [grep {!$h{$_}} @$li1];\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my %h1 = map { $_ => 1 } @$li1;\n    my %h2 = map { $_ => 1 } @$li2;\n    my @diff = grep { !$h2{$_} } keys %h1;\n    return @diff;\n}",
    "    my(%h, @d);\n    foreach $e (@$li1, @$li2) { $h{$e}++ }\n    foreach $e (keys %h) { push(@d, $e) if $h{$e} == 1 }\n    @d;\n}",
    "    my(%li1, %li2);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ }\n    foreach my $e (@$li2) { $li2{$e}++ }\n    my @diffs;\n    foreach my $e (keys %li1, keys %li2) {\n        push(@diffs, $e) if $li1{$e} != $li2{$e};\n    }\n    return @diffs;\n}",
    "    my(%li1, %li2);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ && $li2{$e}++ }\n    my @dif;\n    push @dif, $_ foreach (grep { $li1{$_} != $li2{$_} } keys %li1, keys %li2);\n    return @dif;\n}",
    "    my(%hash) = map { $_, 1 } @$li2;\n    my(@diff) = grep(!exists($hash{$_}), @$li1);\n    return @diff;\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%li1, %li2);",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(@li3) = ();\n    my(%count) = ();\n    foreach my $element (@$li1, @$li2) { $count{$element}++ }\n    foreach my $element (keys %count) {\n        push(@li3, $element) if $count{$element} == 1;\n    }\n    return @li3;\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%h, @d);\n    foreach $e (@$li1, @$li2) { $h{$e}++ }\n    foreach $e (keys %h) {\n        push(@d, $e) if $h{$e} == 1;\n    }\n    @d;\n}",
    "    my %h = map { $_ => 1 } @$li2;\n    return [ grep { !$h{$_} } @$li1 ];\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%li1, %li2, @diff);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ && $li2{$e}++ }\n    foreach my $e (keys %li1, keys %li2) { push @diff, $e if $li1{$e} != $li2{$e} }\n    return @diff;\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%union, %isect, %diff);\n    my($e);\n    foreach $e (@$li1, @$li2) { $union{$e}++ && $isect{$e}++ }\n    foreach $e (keys %union) { $diff{$e} = 1 unless $isect{$e} }\n    return [keys %diff];\n}",
    "    my(%hash) = map { $_, 1 } @$li2;\n    return [ grep { !$hash{$_} } @$li1 ];\n}",
    "    my(%union, %isect, @diff);\n    my($e);\n    foreach $e (@$li1, @$li2) { $union{$e}++ && $isect{$e}++ }\n    foreach $e (keys %union) {\n        push(@diff, $e) unless $isect{$e};\n    }\n    return @diff;\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [ grep { $count{$_} == 1 } keys %count ];\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%li1, %li2);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ && $li2{$e}++ }\n    return [grep { $li1{$_} } keys %li1], [grep { $li2{$_} } keys %li2];\n}",
    "    my(@li3) = ();\n    my(%count) = ();\n    foreach my $element (@$li1, @$li2) { $count{$element}++ }\n    foreach my $element (keys %count) {\n        push(@li3, $element) if $count{$element} == 1;\n    }\n    return @li3;\n}",
    "    my(%union, %isect, %diff);\n    my(@diff);\n    %union = map { $_, 1 } @$li1, @$li2;\n    %isect = map { $_, 1 } @$li1, @$li2;\n    delete @isect{@$li2};\n    @diff = keys %isect;\n    return @diff;\n}",
    "    my(%li1, %li2);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ && $li2{$e}++ }\n    my @dif;\n    push @dif, grep $li1{$_} != $li2{$_}, keys %li1;\n    push @dif, grep $li1{$_} != $li2{$_}, keys %li2;\n    return @dif;\n}",
    "    my(@li3) = ();\n    my(%li2) = ();\n    foreach my $i (@$li2) { $li2{$i} = 1; }\n    foreach my $i (@$li1) {\n        if(!exists($li2{$i})) { push(@li3, $i); }\n    }\n    return @li3;\n}",
    "    my(%li1, %li2);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ && $li2{$e}++ }\n    return [grep { $li1{$_} } keys %li1], [grep { $li2{$_} } keys %li2];\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%union, %isect, %diff);\n    my(@diffs);\n    %union = map { $_, 1 } @$li1, @$li2;\n    %isect = map { $_, 1 } @$li1, @$li2;\n    delete @isect{@$li1};\n    delete @isect{@$li2};\n    @diffs = keys %isect;\n    return @diffs;\n}",
    "    my(%li1, %li2);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ && $li2{$e}++ }\n    my @dif;\n    push @dif, $_ foreach grep $li1{$_} != $li2{$_}, keys %li1;\n    return @dif;\n}",
    "    my(%li1, %li2);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ && $li2{$e}++ }\n    my @dif;\n    push @dif, $_ foreach grep $li1{$_} != $li2{$_}, keys %li1;\n    return @dif;\n}",
    "    my(%li1, %li2);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ && $li2{$e}++ }\n    return [grep { $li1{$_} } keys %li1], [grep { $li2{$_} } keys %li2];\n}",
    "    my(%li1, %li2);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ && $li2{$e}++ }\n    return [grep { $li1{$_} } keys %li1];\n}",
    "    my(%li1, %li2);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ && $li2{$e}++ }\n    my @diff;\n    foreach my $e (keys %li1, keys %li2) {\n        push @diff, $e if $li1{$e} != $li2{$e}\n    }\n    return @diff;\n}",
    "    my(%hash) = map { $_, 1 } @$li2;\n    return [grep { !$hash{$_} } @$li1];\n}",
    "    my(@li1, @li2, %count, @dif);\n    @li1 = @$li1;\n    @li2 = @$li2;\n    foreach $e (@li1, @li2) {$count{$e}++}\n    foreach $e (keys %count) {\n        push(@dif, $e) if $count{$e} == 1;\n    }\n    return @dif;\n}",
    "    my(%li1, %li2);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ && $li2{$e}++ }\n    my @dif;\n    push @dif, $_ foreach grep $li1{$_} != $li2{$_}, keys %li1;\n    return @dif;\n}",
    "    my(%count);\n    foreach my $e (@$li1, @$li2) { $count{$e}++ }\n    return [grep { $count{$_} == 1 } keys %count];\n}",
    "    my(%li1, %li2);\n    foreach my $e (@$li1, @$li2) { $li1{$e}++ }\n    foreach my $e (@$li2) { $li2{$e}++ }\n    my @diffs;\n    foreach my $e (keys %li1, keys %li2) {\n        push(@diffs, $e) if $li1{$e} != $li2{$e};\n    }\n    return @diffs;\n}"
  ]
}