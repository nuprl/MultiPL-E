{
  "name": "mbpp_450_extract_string",
  "language": "pl",
  "prompt": "# Write a function to extract specified size of strings from a given array of string values.\nsub extract_string {\n    my($str, $l) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_450_extract_string.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&extract_string;\n        if(eq_deeply($candidate->([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @str = @$str;\n    my @extract_str;\n    foreach my $s (@str) {\n        if (length($s) == $l) {\n            push @extract_str, $s;\n        }\n    }\n    return @extract_str;\n}",
    "    my @arr = split(\" \", $str);\n    my @res;\n    foreach my $s (@arr) {\n        push @res, $s if (length($s) == $l);\n    }\n    return @res;\n}",
    "    my @str = @$str;\n    my @extract_str;\n    foreach my $s (@str) {\n        if (length($s) == $l) {\n            push @extract_str, $s;\n        }\n    }\n    return @extract_str;\n}",
    "    my @str = @$str;\n    my @new_str;\n    foreach my $i (@str) {\n        if (length($i) == $l) {\n            push @new_str, $i;\n        }\n    }\n    return @new_str;\n}",
    "    my @str = @$str;\n    my @new_str;\n    foreach my $s (@str) {\n        if (length($s) == $l) {\n            push @new_str, $s;\n        }\n    }\n    return @new_str;\n}",
    "    my @str = @$str;\n    my @new_str;\n    foreach my $s (@str) {\n        if (length($s) == $l) {\n            push @new_str, $s;\n        }\n    }\n    return @new_str;\n}",
    "    my @str_arr = @$str;\n    my @new_arr;\n    foreach my $str (@str_arr) {\n        if (length($str) == $l) {\n            push @new_arr, $str;\n        }\n    }\n    return @new_arr;\n}",
    "    my @str = @$str;\n    my @new_str;\n    foreach my $s (@str) {\n        if (length($s) == $l) {\n            push @new_str, $s;\n        }\n    }\n    return @new_str;\n}",
    "    my @str = @$str;\n    my @new_str;\n    foreach my $s (@str) {\n        if (length($s) == $l) {\n            push @new_str, $s;\n        }\n    }\n    return @new_str;\n}",
    "    my @str = @$str;\n    my @extracted_str;\n    foreach my $s (@str) {\n        if (length($s) == $l) {\n            push @extracted_str, $s;\n        }\n    }\n    return @extracted_str;\n}",
    "    my @str = @$str;\n    my @new_str;\n    foreach my $s (@str) {\n        if (length($s) == $l) {\n            push @new_str, $s;\n        }\n    }\n    return @new_str;\n}",
    "    my @str = @$str;\n    my @new_str;\n    foreach my $s (@str) {\n        if (length($s) == $l) {\n            push @new_str, $s;\n        }\n    }\n    return @new_str;\n}",
    "    my @str = @$str;\n    my @new_str;\n    foreach my $s (@str) {\n        if (length($s) == $l) {\n            push @new_str, $s;\n        }\n    }\n    return @new_str;\n}",
    "    my @str = @$str;\n    my @new_str;\n    foreach my $s (@str) {\n        if (length($s) == $l) {\n            push @new_str, $s;\n        }\n    }\n    return @new_str;\n}",
    "    my @str = @$str;\n    my @new_str;\n    foreach my $s (@str) {\n        if (length($s) == $l) {\n            push @new_str, $s;\n        }\n    }\n    return @new_str;\n}",
    "    my @str = @$str;\n    my @new_str;\n    foreach my $s (@str) {\n        if (length($s) == $l) {\n            push @new_str, $s;\n        }\n    }\n    return @new_str;\n}",
    "    my $len = length($str);\n    if($len > $l) {\n        return substr($str, 0, $l);\n    } else {\n        return $str;\n    }\n}",
    "    my @str = @$str;\n    my @new_str = ();\n    foreach my $s (@str) {\n        if (length($s) == $l) {\n            push @new_str, $s;\n        }\n    }\n    return @new_str;\n}",
    "    my @str = @$str;\n    my @new_str;\n    foreach my $s (@str) {\n        if (length($s) == $l) {\n            push @new_str, $s;\n        }\n    }\n    return @new_str;\n}",
    "    my @str = @$str;\n    my @new_str;\n    foreach my $s (@str) {\n        if (length($s) == $l) {\n            push @new_str, $s;\n        }\n    }\n    return @new_str;\n}"
  ]
}