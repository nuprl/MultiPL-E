{
  "name": "mbpp_4_heap_queue_largest",
  "language": "pl",
  "prompt": "# Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nsub heap_queue_largest {\n    my($nums, $n) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_4_heap_queue_largest.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&heap_queue_largest;\n        if(eq_deeply($candidate->([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $h = new Heap::Simple;\n    $h->add($nums);\n    my @largest;\n    for (1..$n) {\n        push @largest, $h->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n        data => [@$nums],\n    );\n    $heap->extract_first($n);\n}",
    "    my $pq = Heap::Simple->new(\n        order => '<',\n        type => 'num',\n    );\n    for my $num (@$nums) {\n        $pq->insert($num);\n        if ($pq->size > $n) {\n            $pq->extract_top;\n        }\n    }\n    return [reverse $pq->extract_all];\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    for my $num (@$nums) {\n        $heap->insert($num);\n        if ($heap->size > $n) {\n            $heap->extract_top;\n        }\n    }\n    return [reverse map { $heap->extract_top } 1..$heap->size];\n}",
    "    my $heap = Heap::Simple->new(\n        type => 'max',\n        elements => 'Num',\n    );\n    $heap->insert($_) for @$nums;\n    my @largest;\n    while ($n--) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    for my $num (@$nums) {\n        $heap->insert($num);\n        if ($heap->size > $n) {\n            $heap->extract_top;\n        }\n    }\n    return [reverse $heap->extract_all];\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    for my $num (@$nums) {\n        $heap->insert($num);\n        if ($heap->size > $n) {\n            $heap->extract_top;\n        }\n    }\n    return [reverse $heap->extract_all];\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    for my $num (@$nums) {\n        $heap->insert($num);\n        if ($heap->count > $n) {\n            $heap->extract_top;\n        }\n    }\n    return [reverse $heap->extract_all];\n}",
    "    my $heap = Heap::Simple->new(order => '<', elements => 'Any');\n    $heap->add($_) for @$nums;\n    my @result;\n    while ($n--) {\n        push @result, $heap->extract_first;\n    }\n    return @result;\n}",
    "    my $heap = Heap::Simple->new(order => '<', elements => 'Any');\n    $heap->add($_) for @$nums;\n    my @largest;\n    while ($n-- > 0) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $h = Heap::Simple->new(order => '>', type => 'array');\n    $h->insert($_) for @$nums;\n    my @largest;\n    while ($n-- > 0) {\n        push @largest, $h->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    $heap->insert(@$nums);\n    my @largest;\n    for (1..$n) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        type => 'num',\n        elements => $nums,\n    );\n    my @largest;\n    for (1..$n) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    $heap->insert($_) for @$nums;\n    my @result;\n    while ($n-- > 0) {\n        push @result, $heap->extract_top;\n    }\n    return @result;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    for my $num (@$nums) {\n        $heap->insert($num);\n        if ($heap->size > $n) {\n            $heap->extract_top;\n        }\n    }\n    return [reverse $heap->extract_all];\n}",
    "    my $heap = Heap::Simple->new(order => '>', type => 'num');\n    $heap->add($_) for @$nums;\n    my @result;\n    while ($n-- > 0) {\n        push @result, $heap->extract_first;\n    }\n    return @result;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n        data => [@$nums],\n    );\n    my @largest;\n    for (1..$n) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        type  => 'num',\n    );\n    for my $num (@$nums) {\n        $heap->insert($num);\n        if ($heap->size > $n) {\n            $heap->extract_top;\n        }\n    }\n    return [reverse $heap->extract_all];\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    $heap->add($_) for @$nums;\n    my @largest;\n    for (1..$n) {\n        push @largest, $heap->extract_top;\n    }\n    return @largest;\n}",
    "    my $heap = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n    );\n    for my $num (@$nums) {\n        $heap->insert($num);\n        if ($heap->size > $n) {\n            $heap->extract_top;\n        }\n    }\n    return [reverse $heap->extract_all];\n}"
  ]
}