{
  "name": "mbpp_160_find_solution",
  "language": "pl",
  "prompt": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return undef if no solution exists.\nsub find_solution {\n    my($a, $b, $n) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_160_find_solution.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_solution;\n        if(eq_deeply($candidate->(2, 3, 7),[2, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 2, 7),undef)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 13, 17),[4, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    if ($a == 0) {\n        return undef if $n % $b != 0;\n        return [0, $n / $b];\n    }\n    my $x = find_solution($b % $a, $a, $n % $a);\n    return undef unless defined $x;\n    [$x->[1] - $b / $a * $x->[0], $x->[0]];\n}",
    "    my $x = 0;\n    my $y = 0;\n    while (1) {\n        if ($a * $x + $b * $y == $n) {\n            return [$x, $y];\n        }\n        if ($x == 0) {\n            $y++;\n        } else {\n            $x--;\n            $y++;\n        }\n        if ($x < 0) {\n            return undef;\n        }\n    }\n}",
    "    for my $x (0 .. $n) {\n        return [$x, ($n - $a * $x) / $b] if ($n - $a * $x) % $b == 0;\n    }\n    return undef;\n}",
    "    my $x = 0;\n    my $y = 0;\n    my $found = 0;\n    my $x_max = $n / $a;\n    my $y_max = $n / $b;\n    for my $x (0 .. $x_max) {\n        for my $y (0 .. $y_max) {\n            if ($a * $x + $b * $y == $n) {\n                $found = 1;\n                last;\n            }\n        }\n        if ($found) {\n            last;\n        }\n    }\n    if ($found) {\n        return [$x, $y];\n    } else {\n        return undef;\n    }\n}",
    "    my $x = 0;\n    my $y = 0;\n    while ($x * $a <= $n) {\n        my $y = ($n - $x * $a) / $b;\n        return [$x, $y] if $y == int($y);\n        $x++;\n    }\n    return undef;\n}",
    "    my $x = 0;\n    my $y = 0;\n    while (1) {\n        my $x_candidate = $x + $b;\n        my $y_candidate = $y - $a;\n        if ($x_candidate % $a == 0 && $y_candidate % $b == 0) {\n            $x = $x_candidate;\n            $y = $y_candidate;\n        } else {\n            $x_candidate = $x - $b;\n            $y_candidate = $y + $a;\n            if ($x_candidate % $a == 0 && $y_candidate % $b == 0) {\n                $x = $x_candidate;\n                $y = $y_candidate;\n            } else {\n                last;\n            }\n        }\n    }\n    if ($a * $x + $b * $y == $n) {\n        return [$x, $y];\n    } else {\n        return undef;\n    }\n}",
    "    for my $x (0 .. $n) {\n        for my $y (0 .. $n) {\n            return [$x, $y] if $a * $x + $b * $y == $n;\n        }\n    }\n    return undef;\n}",
    "    my $x = 0;\n    my $y = 0;\n    while ($a * $x <= $n) {\n        my $r = $n - $a * $x;\n        if ($r % $b == 0) {\n            $y = $r / $b;\n            return [$x, $y];\n        }\n        $x++;\n    }\n    return undef;\n}",
    "    for my $x (0 .. $n) {\n        return [$x, ($n - $a * $x) / $b] if ($n - $a * $x) % $b == 0;\n    }\n    return undef;\n}",
    "    return undef if $n % gcd($a, $b) != 0;\n    my($x, $y) = extended_gcd($a, $b);\n    return [$x * $n / gcd($a, $b), $y * $n / gcd($a, $b)];\n}",
    "    my $x = 0;\n    my $y = 0;\n    my $found = 0;\n    while ($x <= $n) {\n        $y = ($n - $a * $x) / $b;\n        if ($a * $x + $b * $y == $n) {\n            $found = 1;\n            last;\n        }\n        $x++;\n    }\n    if ($found) {\n        return [$x, $y];\n    } else {\n        return undef;\n    }\n}",
    "    my $x = 0;\n    my $y = 0;\n    while ($x * $a <= $n) {\n        $y = ($n - $x * $a) / $b;\n        return [$x, $y] if $y == int($y);\n        $x++;\n    }\n    return undef;\n}",
    "    my $x = 0;\n    my $y = 0;\n    my $d = gcd($a, $b);\n    if ($n % $d != 0) {\n        return undef;\n    }\n    my $x1 = 0;\n    my $y1 = 1;\n    my $a1 = $a / $d;\n    my $b1 = $b / $d;\n    while ($a1 * $x1 + $b1 * $y1 != 1) {\n        my $q = int($a1 / $b1);\n        my $r = $a1 % $b1;\n        my $x2 = $x1;\n        my $y2 = $y1;\n        $x1 = $y2;\n        $y1 = $x2 - $q * $y2;\n        $a1 = $b1;\n        $b1 = $r;\n    }\n    $x = $n * $x1 / $d;\n    $y = ($n - $a * $x) / $b;\n    return [$x, $y];\n}",
    "    my $x = 0;\n    my $y = 0;\n    my $d = gcd($a, $b);\n    if ($n % $d != 0) {\n        return undef;\n    }\n    my $x1 = 0;\n    my $y1 = 1;\n    my $a1 = $a / $d;\n    my $b1 = $b / $d;\n    while ($a1 * $x1 + $b1 * $y1 != 1) {\n        my $q = int($a1 / $b1);\n        my $r = $a1 % $b1;\n        $x = $x1;\n        $y = $y1;\n        $x1 = $y;\n        $y1 = $x - $q * $y;\n        $a1 = $b1;\n        $b1 = $r;\n    }\n    return [$x * ($n / $d), $y * ($n / $d)];\n}",
    "    my $x = 0;\n    my $y = 0;\n    my $d = gcd($a, $b);\n    if ($n % $d != 0) {\n        return undef;\n    }\n    ($x, $y) = find_solution($b % $a, $a, $n);\n    $x -= int($b / $a) * $y;\n    return ($x, $y);\n}",
    "    if ($n % gcd($a, $b) != 0) {\n        return undef;\n    }\n    my $x = 0;\n    my $y = $n / $b;\n    while ($a * $x <= $n) {\n        my $t = ($n - $a * $x) / $b;\n        if ($t == int($t)) {\n            return [$x, $t];\n        }\n        $x++;\n    }\n    return undef;\n}",
    "    my $x = 0;\n    my $y = 0;\n    while ($a * $x <= $n) {\n        my $remainder = $n - $a * $x;\n        if ($remainder % $b == 0) {\n            $y = $remainder / $b;\n            return [$x, $y];\n        }\n        $x++;\n    }\n    return undef;\n}",
    "    my $x = 0;\n    my $y = 0;\n    my $d = gcd($a, $b);\n    if ($n % $d != 0) {\n        return undef;\n    }\n    my $x1 = 0;\n    my $y1 = 1;\n    my $x2 = 1;\n    my $y2 = 0;\n    while ($a % $b != 0) {\n        my $q = int($a / $b);\n        my $r = $a % $b;\n        $x = $x2 - $q * $x1;\n        $y = $y2 - $q * $y1;\n        $a = $b;\n        $b = $r;\n        $x2 = $x1;\n        $y2 = $y1;\n        $x1 = $x;\n        $y1 = $y;\n    }\n    $x = $x2;\n    $y = $y2;\n    return [$x, $y];\n}",
    "    my $x = 0;\n    my $y = 0;\n    my $d = gcd($a, $b);\n    if ($n % $d) {\n        return undef;\n    }\n    ($x, $y) = ext_gcd($a, $b);\n    $x *= $n / $d;\n    $y *= $n / $d;\n    return ($x, $y);\n}",
    "    my $d = gcd($a, $b);\n    return undef if $n % $d != 0;\n    my $x = mult_inv($a / $d, $b / $d) * $n / $d;\n    my $y = ($n - $a * $x) / $b;\n    return [$x, $y];\n}"
  ]
}