{
  "name": "mbpp_401_add_nested_tuples",
  "language": "pl",
  "prompt": "# Write a function to perform index wise addition of array elements in the given two nested arrays.\nsub add_nested_tuples {\n    my($test_tup1, $test_tup2) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_401_add_nested_tuples.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add_nested_tuples;\n        if(eq_deeply($candidate->([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result_tup;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        push @result, [$test_tup1->[$i] + $test_tup2->[$i]];\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        my @temp;\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my @result_tup;\n    for my $i (0..$#{$test_tup1}) {\n        my @result_tup_inner;\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            push @result_tup_inner, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result_tup, \\@result_tup_inner;\n    }\n    return \\@result_tup;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result_tup;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @result_tup_inner;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @result_tup_inner, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result_tup, \\@result_tup_inner;\n    }\n    return @result_tup;\n}",
    "    my @result_tup;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result_tup;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @result_tup_inner;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @result_tup_inner, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result_tup, \\@result_tup_inner;\n    }\n    return \\@result_tup;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @result_tup_inner;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @result_tup_inner, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result_tup, \\@result_tup_inner;\n    }\n    return \\@result_tup;\n}",
    "    my @result_tup;\n    for my $i (0..$#{$test_tup1}) {\n        my @temp_tup;\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            push @temp_tup, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result_tup, [@temp_tup];\n    }\n    return @result_tup;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @temp;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, [@temp];\n    }\n    return @result;\n}",
    "    my @result = ();\n    for(my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        my @temp = ();\n        for(my $j = 0; $j < scalar(@{$test_tup1->[$i]}); $j++) {\n            push(@temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j]);\n        }\n        push(@result, \\@temp);\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @sub_result;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @sub_result, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@sub_result;\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        my @temp;\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @temp;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return @result;\n}",
    "    my @result_tup;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result_tup;\n}",
    "    my @result_tup;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result_tup;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @inner_result;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @inner_result, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, [@inner_result];\n    }\n    return @result;\n}"
  ]
}