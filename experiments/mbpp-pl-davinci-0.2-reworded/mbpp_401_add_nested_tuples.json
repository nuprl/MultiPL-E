{
  "name": "mbpp_401_add_nested_tuples",
  "language": "pl",
  "prompt": "# Write a function to perform index wise addition of array elements in the given two nested arrays.\nsub add_nested_tuples {\n    my($test_tup1, $test_tup2) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_401_add_nested_tuples.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add_nested_tuples;\n        if(eq_deeply($candidate->([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result_tup;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        push @result, [$test_tup1->[$i] + $test_tup2->[$i]];\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        my @temp;\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my @result_tup;\n    for my $i (0..$#{$test_tup1}) {\n        my @result_tup_inner;\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            push @result_tup_inner, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result_tup, \\@result_tup_inner;\n    }\n    return \\@result_tup;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result_tup;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @result_tup_inner;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @result_tup_inner, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result_tup, \\@result_tup_inner;\n    }\n    return @result_tup;\n}",
    "    my @result_tup;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result_tup;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @result_tup_inner;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @result_tup_inner, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result_tup, \\@result_tup_inner;\n    }\n    return \\@result_tup;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @result_tup_inner;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @result_tup_inner, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result_tup, \\@result_tup_inner;\n    }\n    return \\@result_tup;\n}",
    "    my @result_tup;\n    for my $i (0..$#{$test_tup1}) {\n        my @temp_tup;\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            push @temp_tup, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result_tup, [@temp_tup];\n    }\n    return @result_tup;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @temp;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, [@temp];\n    }\n    return @result;\n}",
    "    my @result = ();\n    for(my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        my @temp = ();\n        for(my $j = 0; $j < scalar(@{$test_tup1->[$i]}); $j++) {\n            push(@temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j]);\n        }\n        push(@result, \\@temp);\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @sub_result;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @sub_result, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@sub_result;\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        my @temp;\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @temp;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return @result;\n}",
    "    my @result_tup;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result_tup;\n}",
    "    my @result_tup;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result_tup;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @inner_result;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @inner_result, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, [@inner_result];\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @result_tup_inner;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @result_tup_inner, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result_tup, \\@result_tup_inner;\n    }\n    return @result_tup;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @result_tup_inner;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @result_tup_inner, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result_tup, \\@result_tup_inner;\n    }\n    return \\@result_tup;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @temp;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return @result;\n}",
    "    my @result_tup;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result_tup;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @result_tup_inner;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @result_tup_inner, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result_tup, \\@result_tup_inner;\n    }\n    return @result_tup;\n}",
    "    my @result_tup;\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@result_tup, ($test_tup1->[$i] + $test_tup2->[$i]));\n    }\n    return @result_tup;\n}",
    "    my @result_tup;\n    for my $i (0..$#{$test_tup1}) {\n        my @result_tup_inner;\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            push @result_tup_inner, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result_tup, \\@result_tup_inner;\n    }\n    return \\@result_tup;\n}",
    "    my @result_tup;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result_tup;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        my @temp;\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my @result_tup;\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        my @temp_tup;\n        for (my $j = 0; $j < scalar(@{$test_tup1->[$i]}); $j++) {\n            push(@temp_tup, $test_tup1->[$i][$j] + $test_tup2->[$i][$j]);\n        }\n        push(@result_tup, \\@temp_tup);\n    }\n    return @result_tup;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result;\n}",
    "    my @result_tup = ();\n    my $i = 0;\n    foreach my $tup1 (@$test_tup1) {\n        my $j = 0;\n        foreach my $tup2 (@$test_tup2) {\n            $result_tup[$i][$j] = $tup1 + $tup2;\n            $j++;\n        }\n        $i++;\n    }\n    return @result_tup;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @temp;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my @result_tup = ();\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result_tup;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        my @temp;\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return @result;\n}",
    "    my @result_tup;\n    for(my $i = 0; $i < scalar(@{$test_tup1}); $i++) {\n        my @temp_tup;\n        for(my $j = 0; $j < scalar(@{$test_tup1->[$i]}); $j++) {\n            push(@temp_tup, $test_tup1->[$i]->[$j] + $test_tup2->[$i]->[$j]);\n        }\n        push(@result_tup, \\@temp_tup);\n    }\n    return \\@result_tup;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        my @temp;\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return @result;\n}",
    "    my $test_tup3 = ();\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $test_tup3->[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return $test_tup3;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @temp;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my @result_tup;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result_tup;\n}",
    "    my $result_tup = ();\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result_tup->[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return $result_tup;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        push @result, [$test_tup1->[$i][0] + $test_tup2->[$i][0], $test_tup1->[$i][1] + $test_tup2->[$i][1]];\n    }\n    return @result;\n}",
    "    my @result_tup;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result_tup;\n}",
    "    my $len = scalar(@$test_tup1);\n    my @result = ();\n    for my $i (0..$len-1) {\n        push @result, [$test_tup1->[$i][0] + $test_tup2->[$i][0], $test_tup1->[$i][1] + $test_tup2->[$i][1]];\n    }\n    return \\@result;\n}",
    "    my @result = ();\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        my $tup1 = $test_tup1->[$i];\n        my $tup2 = $test_tup2->[$i];\n        my @result_tup;\n        for (my $j = 0; $j < scalar(@$tup1); $j++) {\n            push @result_tup, $tup1->[$j] + $tup2->[$j];\n        }\n        push @result, \\@result_tup;\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @temp;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my @result_tup;\n    for my $i (0..$#{$test_tup1}) {\n        my @result_tup_sub;\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            push @result_tup_sub, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result_tup, \\@result_tup_sub;\n    }\n    return \\@result_tup;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my @result_tup;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result_tup;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result_tup;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result_tup;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result_tup;\n}",
    "    my @result_tup;\n    for(my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push @result_tup, [$test_tup1->[$i][0] + $test_tup2->[$i][0], $test_tup1->[$i][1] + $test_tup2->[$i][1]];\n    }\n    return @result_tup;\n}",
    "    my @result = ();\n    for my $i (0..$#{$test_tup1}) {\n        my @temp = ();\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @temp;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return @result;\n}",
    "    my @result_tup;\n    for my $i (0..$#{$test_tup1}) {\n        my @temp_tup;\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            push @temp_tup, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result_tup, [@temp_tup];\n    }\n    return @result_tup;\n}",
    "    my @result_tup;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result_tup;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result;\n}",
    "    my @result = ();\n    for my $i (0 .. $#{$test_tup1}) {\n        my @temp = ();\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, [@temp];\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        my @temp;\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        my @temp;\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return @result;\n}",
    "    my @result_tup;\n    my $i = 0;\n    while($i < scalar(@$test_tup1)) {\n        my $j = 0;\n        while($j < scalar(@{$test_tup1->[$i]})) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n            $j++;\n        }\n        $i++;\n    }\n    return @result_tup;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        my @temp;\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        push @result, $test_tup1->[$i] + $test_tup2->[$i];\n    }\n    return @result;\n}",
    "    my @result_tup;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result_tup;\n}",
    "    my @result_tup;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result_tup;\n}",
    "    my @result_tup;\n    for my $i (0..$#{$test_tup1}) {\n        my @result_tup_inner;\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            push @result_tup_inner, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result_tup, \\@result_tup_inner;\n    }\n    return \\@result_tup;\n}",
    "    my @result;\n    foreach my $i (0..$#{$test_tup1}) {\n        my @temp;\n        foreach my $j (0..$#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        my @temp;\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, [@temp];\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        my @temp;\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @temp;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my @result;\n    for (my $i = 0; $i < scalar @$test_tup1; $i++) {\n        my @temp;\n        for (my $j = 0; $j < scalar @{$test_tup1->[$i]}; $j++) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my $result_tup = ();\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result_tup->[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return $result_tup;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        my @temp;\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return @result;\n}",
    "    my @result_tup = ();\n    foreach my $i (0 .. $#{$test_tup1}) {\n        foreach my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result_tup;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        my @temp;\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my @result_tup;\n    for (my $i = 0; $i < scalar @$test_tup1; $i++) {\n        my @temp_tup;\n        for (my $j = 0; $j < scalar @{$test_tup1->[$i]}; $j++) {\n            push @temp_tup, ($test_tup1->[$i][$j] + $test_tup2->[$i][$j]);\n        }\n        push @result_tup, [@temp_tup];\n    }\n    return @result_tup;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result_tup;\n}",
    "    my @result_tup;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result_tup;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result_tup;\n}",
    "    my @tup1 = @$test_tup1;\n    my @tup2 = @$test_tup2;\n    my @result;\n    for my $i (0..$#tup1) {\n        my @tup1_inner = @{$tup1[$i]};\n        my @tup2_inner = @{$tup2[$i]};\n        my @result_inner;\n        for my $j (0..$#tup1_inner) {\n            push @result_inner, $tup1_inner[$j] + $tup2_inner[$j];\n        }\n        push @result, [@result_inner];\n    }\n    return @result;\n}",
    "    my @result;\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        my @temp;\n        for (my $j = 0; $j < scalar(@{$test_tup1->[$i]}); $j++) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @temp;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @temp;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my $result_tup = ();\n    foreach my $i (0 .. $#{$test_tup1}) {\n        foreach my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result_tup->[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return $result_tup;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @temp;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @temp;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return @result;\n}",
    "    my @result_tup;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result_tup;\n}",
    "    my @result_tup;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result_tup;\n}",
    "    my @result_tup;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result_tup;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result_tup;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result_tup;\n}",
    "    my @result_tup;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result_tup;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result_tup;\n}",
    "    my @result_tup;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result_tup;\n}",
    "    my @result_tup;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result_tup;\n}",
    "    my @result_tup = ();\n    for my $i (0..$#{$test_tup1}) {\n        my @result_tup_inner = ();\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            push @result_tup_inner, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result_tup, \\@result_tup_inner;\n    }\n    return \\@result_tup;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result_tup;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result_tup;\n}",
    "    my @result = ();\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result_tup;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        my @temp;\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my @result_tup;\n    for my $i (0..$#{$test_tup1}) {\n        my @result_sub_tup;\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            push @result_sub_tup, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result_tup, \\@result_sub_tup;\n    }\n    return \\@result_tup;\n}",
    "    my @result = ();\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        my $tup1 = $test_tup1->[$i];\n        my $tup2 = $test_tup2->[$i];\n        my @tup_result = ();\n        for (my $j = 0; $j < scalar(@$tup1); $j++) {\n            push(@tup_result, $tup1->[$j] + $tup2->[$j]);\n        }\n        push(@result, \\@tup_result);\n    }\n    return \\@result;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result_tup;\n}",
    "    my @result_tup;\n    my $i = 0;\n    while($i < scalar(@$test_tup1)) {\n        my $j = 0;\n        my @result_tup2;\n        while($j < scalar(@{$test_tup1->[$i]})) {\n            push(@result_tup2, $test_tup1->[$i][$j] + $test_tup2->[$i][$j]);\n            $j++;\n        }\n        push(@result_tup, [@result_tup2]);\n        $i++;\n    }\n    return @result_tup;\n}",
    "    my @result_tup;\n    for (my $i = 0; $i < scalar @$test_tup1; $i++) {\n        my @temp_tup;\n        for (my $j = 0; $j < scalar @{$test_tup1->[$i]}; $j++) {\n            push @temp_tup, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result_tup, [@temp_tup];\n    }\n    return @result_tup;\n}",
    "    my @result_tup;\n    for my $i (0..$#{$test_tup1}) {\n        my @result_sub_tup;\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            push @result_sub_tup, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result_tup, \\@result_sub_tup;\n    }\n    return \\@result_tup;\n}",
    "    my @result_tuple;\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push @result_tuple, ($test_tup1->[$i] + $test_tup2->[$i]);\n    }\n    return @result_tuple;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result_tup;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @temp;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @result_tup_inner;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @result_tup_inner, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result_tup, \\@result_tup_inner;\n    }\n    return \\@result_tup;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @temp;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, [@temp];\n    }\n    return @result;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result_tup;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @temp;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        my @temp;\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @temp;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return @result;\n}",
    "    my @result_tup;\n    for my $i (0..$#{$test_tup1}) {\n        my @temp_tup;\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            push @temp_tup, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result_tup, \\@temp_tup;\n    }\n    return \\@result_tup;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @temp;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, [@temp];\n    }\n    return @result;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result_tup;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        my @temp;\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return @result;\n}",
    "    my @sum_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $sum_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@sum_tup;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @result_inner;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @result_inner, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@result_inner;\n    }\n    return @result;\n}",
    "    my @result;\n    for (my $i = 0; $i < scalar @$test_tup1; $i++) {\n        my @inner_result;\n        for (my $j = 0; $j < scalar @{$test_tup1->[$i]}; $j++) {\n            push @inner_result, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@inner_result;\n    }\n    return \\@result;\n}",
    "    my @result;\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        push(@result, $test_tup1->[$i] + $test_tup2->[$i]);\n    }\n    return @result;\n}",
    "    my @result;\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        my @temp;\n        for (my $j = 0; $j < scalar(@{$test_tup1->[$i]}); $j++) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, [@temp];\n    }\n    return @result;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result_tup;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result;\n}",
    "    my @result_tuple;\n    for my $i (0..$#{$test_tup1}) {\n        my @result_tuple_inner;\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            push @result_tuple_inner, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result_tuple, \\@result_tuple_inner;\n    }\n    return @result_tuple;\n}",
    "    my @result_tup;\n    for my $i (0..$#{$test_tup1}) {\n        push @result_tup, [$test_tup1->[$i] + $test_tup2->[$i]];\n    }\n    return @result_tup;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result_tup;\n}",
    "    my @result_tup;\n    for my $i (0..$#{$test_tup1}) {\n        my @inner_tup;\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            push @inner_tup, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result_tup, \\@inner_tup;\n    }\n    return \\@result_tup;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        my @temp;\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return @result;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @result_tup_inner;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @result_tup_inner, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result_tup, [@result_tup_inner];\n    }\n    return @result_tup;\n}",
    "    my @result_tup;\n    for (my $i = 0; $i < scalar @$test_tup1; $i++) {\n        my @result_tup_inner;\n        for (my $j = 0; $j < scalar @{$test_tup1->[$i]}; $j++) {\n            push @result_tup_inner, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result_tup, \\@result_tup_inner;\n    }\n    return \\@result_tup;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @result_tup_inner;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @result_tup_inner, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result_tup, \\@result_tup_inner;\n    }\n    return \\@result_tup;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @result_subtup;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @result_subtup, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result_tup, \\@result_subtup;\n    }\n    return \\@result_tup;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result_tup;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @temp;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        my @temp;\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, [@temp];\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result_tup;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @temp;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @inner_result;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @inner_result, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@inner_result;\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @temp;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return @result;\n}",
    "    my @result_tup;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result_tup;\n}",
    "    my @result_tup;\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        my @temp_tup;\n        for (my $j = 0; $j < scalar(@{$test_tup1->[$i]}); $j++) {\n            push @temp_tup, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result_tup, [@temp_tup];\n    }\n    return @result_tup;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result_tup;\n}",
    "    my @result_tup = ();\n    for my $i (0 .. $#{$test_tup1}) {\n        my @result_tup_inner = ();\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @result_tup_inner, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result_tup, [@result_tup_inner];\n    }\n    return @result_tup;\n}",
    "    my @result;\n    for(my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        my @temp;\n        for(my $j = 0; $j < scalar(@{$test_tup1->[$i]}); $j++) {\n            push(@temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j]);\n        }\n        push(@result, \\@temp);\n    }\n    return \\@result;\n}",
    "    my @result_tup;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result_tup;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result_tup;\n}",
    "    my $test_tup3 = ();\n    for (my $i = 0; $i < scalar(@{$test_tup1}); $i++) {\n        for (my $j = 0; $j < scalar(@{$test_tup1->[$i]}); $j++) {\n            $test_tup3->[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return $test_tup3;\n}",
    "    my @result;\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        my $tup1 = $test_tup1->[$i];\n        my $tup2 = $test_tup2->[$i];\n        my @result_tup;\n        for (my $j = 0; $j < scalar(@$tup1); $j++) {\n            push @result_tup, $tup1->[$j] + $tup2->[$j];\n        }\n        push @result, \\@result_tup;\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @temp;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result_tup;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result_tup;\n}",
    "    my @result_tup;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result_tup;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @inner_result;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @inner_result, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@inner_result;\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @tup1 = @{$test_tup1->[$i]};\n        my @tup2 = @{$test_tup2->[$i]};\n        my @tup3;\n        for my $j (0 .. $#tup1) {\n            push @tup3, $tup1[$j] + $tup2[$j];\n        }\n        push @result, \\@tup3;\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @temp;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return @result;\n}",
    "    my @result_tup = ();\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result_tup;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result_tup;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @result_tup_inner;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @result_tup_inner, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result_tup, \\@result_tup_inner;\n    }\n    return \\@result_tup;\n}",
    "    my @result_tup;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result_tup;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @temp;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my @result_tup;\n    for(my $i=0; $i<=$#{$test_tup1}; $i++) {\n        my @temp_tup;\n        for(my $j=0; $j<=$#{$test_tup1->[$i]}; $j++) {\n            push @temp_tup, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result_tup, [@temp_tup];\n    }\n    return @result_tup;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @result_tup_inner;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @result_tup_inner, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result_tup, \\@result_tup_inner;\n    }\n    return @result_tup;\n}",
    "    my @result_tup;\n    for (my $i = 0; $i < scalar @$test_tup1; $i++) {\n        my @temp_tup;\n        for (my $j = 0; $j < scalar @{$test_tup1->[$i]}; $j++) {\n            push @temp_tup, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result_tup, [@temp_tup];\n    }\n    return [@result_tup];\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return \\@result;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @result_tup_inner;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @result_tup_inner, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result_tup, \\@result_tup_inner;\n    }\n    return \\@result_tup;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result_tup;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @result_inner;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @result_inner, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@result_inner;\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @temp;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @temp, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my @result_tup;\n    for my $i (0..$#{$test_tup1}) {\n        my @result_tup_inner;\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            push @result_tup_inner, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result_tup, [@result_tup_inner];\n    }\n    return @result_tup;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        my @result_tup_inner;\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            push @result_tup_inner, $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n        push @result_tup, \\@result_tup_inner;\n    }\n    return \\@result_tup;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result;\n}",
    "    my @tup1 = @$test_tup1;\n    my @tup2 = @$test_tup2;\n    my @result;\n    for my $i (0..$#tup1) {\n        my @temp;\n        for my $j (0..$#{$tup1[$i]}) {\n            push @temp, $tup1[$i][$j] + $tup2[$i][$j];\n        }\n        push @result, \\@temp;\n    }\n    return @result;\n}",
    "    my @result_tup;\n    for my $i (0 .. $#{$test_tup1}) {\n        for my $j (0 .. $#{$test_tup1->[$i]}) {\n            $result_tup[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result_tup;\n}",
    "    my @result = ();\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        my $tup1 = $test_tup1->[$i];\n        my $tup2 = $test_tup2->[$i];\n        my @tup_result = ();\n        for (my $j = 0; $j < scalar(@$tup1); $j++) {\n            push @tup_result, $tup1->[$j] + $tup2->[$j];\n        }\n        push @result, \\@tup_result;\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0..$#{$test_tup1}) {\n        for my $j (0..$#{$test_tup1->[$i]}) {\n            $result[$i][$j] = $test_tup1->[$i][$j] + $test_tup2->[$i][$j];\n        }\n    }\n    return @result;\n}"
  ]
}