{
  "name": "mbpp_632_move_zero",
  "language": "pl",
  "prompt": "# Write a plthon function to move all zeroes to the end of the given array.\nsub move_zero {\n    my($num_list) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_632_move_zero.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&move_zero;\n        if(eq_deeply($candidate->([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @num_list = @$num_list;\n    my @zero_list;\n    my @non_zero_list;\n    foreach my $num (@num_list) {\n        if ($num == 0) {\n            push @zero_list, $num;\n        }\n        else {\n            push @non_zero_list, $num;\n        }\n    }\n    return [@non_zero_list, @zero_list];\n}",
    "    my @num_list = @$num_list;\n    my @new_list;\n    my $zero_count = 0;\n    foreach my $num (@num_list) {\n        if ($num == 0) {\n            $zero_count++;\n        } else {\n            push @new_list, $num;\n        }\n    }\n    for (my $i = 0; $i < $zero_count; $i++) {\n        push @new_list, 0;\n    }\n    return \\@new_list;\n}",
    "    my @list = @$num_list;\n    my @zero_list;\n    my @non_zero_list;\n    for my $num (@list) {\n        if ($num == 0) {\n            push @zero_list, $num;\n        } else {\n            push @non_zero_list, $num;\n        }\n    }\n    return [@non_zero_list, @zero_list];\n}",
    "    my @list = @$num_list;\n    my @result = ();\n    my $count = 0;\n    foreach my $num (@list) {\n        if ($num != 0) {\n            push @result, $num;\n        } else {\n            $count++;\n        }\n    }\n    for (my $i = 0; $i < $count; $i++) {\n        push @result, 0;\n    }\n    return @result;\n}",
    "    my @num_list = @$num_list;\n    my @zero_list;\n    my @non_zero_list;\n    foreach my $num (@num_list) {\n        if ($num == 0) {\n            push @zero_list, $num;\n        } else {\n            push @non_zero_list, $num;\n        }\n    }\n    return [@non_zero_list, @zero_list];\n}",
    "    my @num_list = @$num_list;\n    my @zero_list;\n    my @non_zero_list;\n    for my $num (@num_list) {\n        if ($num == 0) {\n            push @zero_list, $num;\n        } else {\n            push @non_zero_list, $num;\n        }\n    }\n    return [@non_zero_list, @zero_list];\n}",
    "    my @list = @$num_list;\n    my @zero_list;\n    my @non_zero_list;\n    foreach my $num (@list) {\n        if ($num == 0) {\n            push @zero_list, $num;\n        } else {\n            push @non_zero_list, $num;\n        }\n    }\n    return [@non_zero_list, @zero_list];\n}",
    "    my @list = @$num_list;\n    my @zero_list = ();\n    my @non_zero_list = ();\n    foreach my $num (@list) {\n        if ($num == 0) {\n            push @zero_list, $num;\n        } else {\n            push @non_zero_list, $num;\n        }\n    }\n    return [@non_zero_list, @zero_list];\n}",
    "    my @list = @$num_list;\n    my @zero_list;\n    my @non_zero_list;\n    foreach my $num (@list) {\n        if ($num == 0) {\n            push @zero_list, $num;\n        } else {\n            push @non_zero_list, $num;\n        }\n    }\n    my @result = (@non_zero_list, @zero_list);\n    return @result;\n}",
    "    my @list = @$num_list;\n    my @zero_list;\n    my @non_zero_list;\n    foreach my $num (@list) {\n        if ($num == 0) {\n            push @zero_list, $num;\n        } else {\n            push @non_zero_list, $num;\n        }\n    }\n    return [@non_zero_list, @zero_list];\n}",
    "    my @num_list = @$num_list;\n    my @zero_list = ();\n    my @non_zero_list = ();\n    foreach my $num (@num_list) {\n        if ($num == 0) {\n            push @zero_list, $num;\n        } else {\n            push @non_zero_list, $num;\n        }\n    }\n    return [@non_zero_list, @zero_list];\n}",
    "    my @num_list = @$num_list;\n    my @zero_list;\n    my @non_zero_list;\n    foreach my $num (@num_list) {\n        if ($num == 0) {\n            push @zero_list, $num;\n        } else {\n            push @non_zero_list, $num;\n        }\n    }\n    my @result = (@non_zero_list, @zero_list);\n    return @result;\n}",
    "    my @new_list = ();\n    my $count = 0;\n    foreach my $num (@$num_list) {\n        if ($num != 0) {\n            $new_list[$count] = $num;\n            $count++;\n        }\n    }\n    return @new_list;\n}",
    "    my @num_list = @$num_list;\n    my @zero_list;\n    my @non_zero_list;\n    for my $num (@num_list) {\n        if ($num == 0) {\n            push @zero_list, $num;\n        } else {\n            push @non_zero_list, $num;\n        }\n    }\n    push @non_zero_list, @zero_list;\n    return @non_zero_list;\n}",
    "    my @list = @$num_list;\n    my $count = 0;\n    for(my $i=0; $i<scalar(@list); $i++) {\n        if($list[$i] != 0) {\n            $list[$count++] = $list[$i];\n        }\n    }\n    while($count < scalar(@list)) {\n        $list[$count++] = 0;\n    }\n    return @list;\n}",
    "    my @list = @$num_list;\n    my $count = 0;\n    for(my $i = 0; $i < scalar(@list); $i++) {\n        if($list[$i] != 0) {\n            $list[$count++] = $list[$i];\n        }\n    }\n    while($count < scalar(@list)) {\n        $list[$count++] = 0;\n    }\n    return @list;\n}",
    "    my $count = 0;\n    my @new_list;\n    foreach my $num (@$num_list) {\n        if ($num != 0) {\n            $new_list[$count++] = $num;\n        }\n    }\n    return \\@new_list;\n}",
    "    my @list = @$num_list;\n    my @zero_list = ();\n    my @non_zero_list = ();\n    foreach my $num (@list) {\n        if ($num == 0) {\n            push @zero_list, $num;\n        } else {\n            push @non_zero_list, $num;\n        }\n    }\n    return [@non_zero_list, @zero_list];\n}",
    "    my @list = @$num_list;\n    my @result = ();\n    my $count = 0;\n    foreach my $num (@list) {\n        if($num != 0) {\n            push @result, $num;\n        } else {\n            $count++;\n        }\n    }\n    for(my $i = 0; $i < $count; $i++) {\n        push @result, 0;\n    }\n    return @result;\n}",
    "    my @num_list = @$num_list;\n    my @non_zero_list;\n    my @zero_list;\n    foreach my $num (@num_list) {\n        if ($num == 0) {\n            push @zero_list, $num;\n        }\n        else {\n            push @non_zero_list, $num;\n        }\n    }\n    return [@non_zero_list, @zero_list];\n}"
  ]
}