{
  "name": "mbpp_292_find",
  "language": "pl",
  "prompt": "# Write a plthon function to find quotient of two numbers (rounded down to the nearest integer).\nsub find {\n    my($n, $m) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_292_find.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find;\n        if(eq_deeply($candidate->(10, 3),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 2),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(20, 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    return int($n/$m);\n}",
    "    return $n/$m;\n}",
    "    return $n/$m;\n}",
    "    my $q = int($n / $m);\n    return $q;\n}",
    "    my $q = int($n / $m);\n    return $q;\n}",
    "    my $q = int($n / $m);\n    return $q;\n}",
    "    return int($n / $m);\n}",
    "    return int($n / $m);\n}",
    "    return int($n/$m);\n}",
    "    return int($n / $m);\n}",
    "    return int($n / $m);\n}",
    "    return int($n/$m);\n}",
    "    return int($n/$m);\n}",
    "    return int($n/$m);\n}",
    "    return int($n/$m);\n}",
    "    return int($n/$m);\n}",
    "    my $q = int($n / $m);\n    return $q;\n}",
    "    return int($n/$m);\n}",
    "    return int($n/$m);\n}",
    "    return int($n / $m);\n}"
  ]
}