{
  "name": "mbpp_753_min_k",
  "language": "pl",
  "prompt": "# Write a function to find minimum k records from array array. https://www.geeksforgeeks.org/plthon-find-minimum-k-records-from-array-array/ - in this case a verbatim copl of test cases\nsub min_k {\n    my($test_list, $K) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_753_min_k.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&min_k;\n        if(eq_deeply($candidate->([[\"Manjeet\", 10], [\"Akshat\", 4], [\"Akash\", 2], [\"Nikhil\", 8]], 2),[[\"Akash\", 2], [\"Akshat\", 4]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[\"Sanjeev\", 11], [\"Angat\", 5], [\"Akash\", 3], [\"Nepin\", 9]], 3),[[\"Akash\", 3], [\"Angat\", 5], [\"Nepin\", 9]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[\"tanmay\", 14], [\"Amer\", 11], [\"Ayesha\", 9], [\"SKD\", 16]], 1),[[\"Ayesha\", 9]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @sorted = sort {$a <=> $b} @$test_list;\n    my @min_k = @sorted[0..$K-1];\n    return \\@min_k;\n}",
    "    my @sorted_list = sort { $a <=> $b } @$test_list;\n    return @sorted_list[0..$K-1];\n}",
    "    my @test_list = @$test_list;\n    my @min_k = ();\n    my $min_k_index = 0;\n    my $min_k_value = $test_list[0];\n    for (my $i = 0; $i < $K; $i++) {\n        $min_k[$i] = $test_list[$i];\n        if ($min_k[$i] < $min_k_value) {\n            $min_k_value = $min_k[$i];\n            $min_k_index = $i;\n        }\n    }\n    for (my $i = $K; $i < scalar @test_list; $i++) {\n        if ($test_list[$i] < $min_k_value) {\n            $min_k[$min_k_index] = $test_list[$i];\n            $min_k_value = $min_k[$min_k_index];\n            for (my $j = 0; $j < $K; $j++) {\n                if ($min_k[$j] < $min_k_value) {\n                    $min_k_value = $min_k[$j];\n                    $min_k_index = $j;\n                }\n            }\n        }\n    }\n    return @min_k;\n}",
    "    my @sorted_list = sort {$a <=> $b} @$test_list;\n    return @sorted_list[0..$K-1];\n}",
    "    my @sorted = sort {$a <=> $b} @$test_list;\n    my @min_k = @sorted[0..$K-1];\n    return \\@min_k;\n}",
    "    my @test_list = @$test_list;\n    my @min_k;\n    my $min_k_size = 0;\n    my $min_k_index = 0;\n    for (my $i = 0; $i < scalar(@test_list); $i++) {\n        if ($min_k_size < $K) {\n            $min_k[$min_k_size] = $test_list[$i];\n            $min_k_size++;\n        } else {\n            $min_k_index = 0;\n            for (my $j = 1; $j < $K; $j++) {\n                if ($min_k[$j] < $min_k[$min_k_index]) {\n                    $min_k_index = $j;\n                }\n            }\n            if ($test_list[$i] < $min_k[$min_k_index]) {\n                $min_k[$min_k_index] = $test_list[$i];\n            }\n        }\n    }\n    return @min_k;\n}",
    "    my @sorted = sort { $a <=> $b } @$test_list;\n    return @sorted[0..$K-1];\n}",
    "    my @sorted = sort {$a <=> $b} @$test_list;\n    return @sorted[0..$K-1];\n}",
    "    my @sorted = sort { $a <=> $b } @$test_list;\n    my @min_k = @sorted[0..$K-1];\n    return \\@min_k;\n}",
    "    my @sorted_list = sort {$a <=> $b} @$test_list;\n    return @sorted_list[0..$K-1];\n}",
    "    my @sorted_list = sort {$a <=> $b} @$test_list;\n    my @min_k = @sorted_list[0..$K-1];\n    return @min_k;\n}",
    "    my @sorted_list = sort {$a <=> $b} @$test_list;\n    return @sorted_list[0..$K-1];\n}",
    "    my @sorted_list = sort {$a <=> $b} @$test_list;\n    my @min_k = @sorted_list[0..$K-1];\n    return \\@min_k;\n}",
    "    my @test_list = @$test_list;\n    my @sorted_list = sort { $a <=> $b } @test_list;\n    my @min_k = @sorted_list[0..$K-1];\n    return @min_k;\n}",
    "    my @sorted_list = sort {$a <=> $b} @$test_list;\n    my @min_k = @sorted_list[0 .. $K - 1];\n    return @min_k;\n}",
    "    my @sorted_list = sort {$a <=> $b} @$test_list;\n    return @sorted_list[0..$K-1];\n}",
    "    my @sorted_list = sort {$a <=> $b} @$test_list;\n    my @min_k = @sorted_list[0..$K-1];\n    return @min_k;\n}",
    "    my @sorted_list = sort { $a <=> $b } @$test_list;\n    return @sorted_list[0..$K-1];\n}",
    "    my @test_list = @$test_list;\n    my $size = scalar @test_list;\n    my @min_k = ();\n    my $i = 0;\n    while ($i < $K) {\n        $min_k[$i] = $test_list[$i];\n        $i++;\n    }\n    $min_k[$K] = -1;\n    $i = $K;\n    while ($i < $size) {\n        my $j = 0;\n        while ($j < $K) {\n            if ($test_list[$i] < $min_k[$j]) {\n                $min_k[$j] = $test_list[$i];\n                last;\n            }\n            $j++;\n        }\n        $i++;\n    }\n    return @min_k;\n}",
    "    my @sorted = sort {$a <=> $b} @$test_list;\n    my @min_k = @sorted[0..$K-1];\n    return @min_k;\n}"
  ]
}