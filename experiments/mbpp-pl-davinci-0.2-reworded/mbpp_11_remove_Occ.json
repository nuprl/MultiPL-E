{
  "name": "mbpp_11_remove_Occ",
  "language": "pl",
  "prompt": "# Write a plthon function to remove first and last occurrence of a given character from the string.\nsub remove_Occ {\n    my($s, $ch) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_11_remove_Occ.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&remove_Occ;\n        if(eq_deeply($candidate->(\"hello\", \"l\"),\"heo\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcda\", \"a\"),\"bcd\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"PHP\", \"P\"),\"H\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $pos = index($s, $ch);\n    my $pos1 = rindex($s, $ch);\n    my $new_s = substr($s, 0, $pos) . substr($s, $pos + 1, $pos1 - $pos - 1) . substr($s, $pos1 + 1);\n    return $new_s;\n}",
    "    $s =~ s/$ch//;\n    $s =~ s/$ch//;\n    return $s;\n}",
    "    $s =~ s/$ch//g;\n    return $s;\n}",
    "    my $i = index($s, $ch);\n    my $j = rindex($s, $ch);\n    return substr($s, 0, $i) . substr($s, $i + 1, $j - $i - 1) . substr($s, $j + 1);\n}",
    "    my $pos = index($s, $ch);\n    substr($s, $pos, 1) = \"\";\n    $pos = rindex($s, $ch);\n    substr($s, $pos, 1) = \"\";\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    substr($s, $pos, 1, '');\n    $pos = rindex($s, $ch);\n    substr($s, $pos, 1, '');\n    return $s;\n}",
    "    my $i = index($s, $ch);\n    my $j = rindex($s, $ch);\n    if ($i == -1) {\n        return $s;\n    }\n    elsif ($i == $j) {\n        return substr($s, 0, $i) . substr($s, $i + 1);\n    }\n    else {\n        return substr($s, 0, $i) . substr($s, $i + 1, $j - $i - 1) . substr($s, $j + 1);\n    }\n}",
    "    my $pos = index($s, $ch);\n    my $pos1 = rindex($s, $ch);\n    if($pos == -1) {\n        return $s;\n    }\n    else {\n        my $s1 = substr($s, 0, $pos);\n        my $s2 = substr($s, $pos + 1, $pos1 - $pos - 1);\n        my $s3 = substr($s, $pos1 + 1);\n        return $s1.$s2.$s3;\n    }\n}",
    "    my $pos = index($s, $ch);\n    substr($s, $pos, 1) = \"\";\n    my $pos1 = rindex($s, $ch);\n    substr($s, $pos1, 1) = \"\";\n    return $s;\n}",
    "    my $i = index($s, $ch);\n    my $j = rindex($s, $ch);\n    if ($i == -1) {\n        return $s;\n    }\n    elsif ($i == $j) {\n        return substr($s, 0, $i) . substr($s, $i + 1);\n    }\n    else {\n        return substr($s, 0, $i) . substr($s, $i + 1, $j - $i - 1) . substr($s, $j + 1);\n    }\n}",
    "    my $pos = index($s, $ch);\n    my $pos1 = rindex($s, $ch);\n    substr($s, $pos, 1) = \"\";\n    substr($s, $pos1, 1) = \"\";\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    substr($s, $pos, 1) = \"\";\n    $pos = rindex($s, $ch);\n    substr($s, $pos, 1) = \"\";\n    return $s;\n}",
    "    my $i = index($s, $ch);\n    my $j = rindex($s, $ch);\n    my $l = length($s);\n    if ($i == -1) {\n        return $s;\n    }\n    elsif ($i == 0 && $j == $l-1) {\n        return \"\";\n    }\n    elsif ($i == 0) {\n        return substr($s, $j+1);\n    }\n    elsif ($j == $l-1) {\n        return substr($s, 0, $i);\n    }\n    else {\n        return substr($s, 0, $i).substr($s, $j+1);\n    }\n}",
    "    my $pos = index($s, $ch);\n    substr($s, $pos, 1, \"\");\n    $pos = rindex($s, $ch);\n    substr($s, $pos, 1, \"\");\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    my $pos1 = rindex($s, $ch);\n    if($pos == -1) {\n        return $s;\n    }\n    if($pos == 0) {\n        $s = substr($s, 1);\n    }\n    if($pos1 == length($s) - 1) {\n        $s = substr($s, 0, $pos1);\n    }\n    if($pos != 0 && $pos1 != length($s) - 1) {\n        $s = substr($s, 0, $pos) . substr($s, $pos + 1, $pos1 - $pos - 1) . substr($s, $pos1 + 1);\n    }\n    return $s;\n}",
    "    $s =~ s/$ch//;\n    $s =~ s/$ch//;\n    return $s;\n}\nprint remove_Occ(\"abcabc\", \"a\");\nprint \"\\n\";\nprint remove_Occ(\"abcabc\", \"c\");\nprint \"\\n\";",
    "    my $pos = index($s, $ch);\n    my $pos1 = rindex($s, $ch);\n    if($pos == -1) {\n        return $s;\n    }\n    elsif($pos == 0) {\n        return substr($s, $pos+1, length($s)-1);\n    }\n    elsif($pos1 == length($s)-1) {\n        return substr($s, 0, $pos1);\n    }\n    else {\n        return substr($s, 0, $pos).substr($s, $pos+1, length($s)-1);\n    }\n}",
    "    my $i = index($s, $ch);\n    my $j = rindex($s, $ch);\n    return substr($s, 0, $i) . substr($s, $i+1, $j-$i-1) . substr($s, $j+1);\n}",
    "    $s =~ s/$ch//g;\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    substr($s, $pos, 1) = \"\";\n    $pos = rindex($s, $ch);\n    substr($s, $pos, 1) = \"\";\n    return $s;\n}",
    "    my $first = index($s, $ch);\n    my $last = rindex($s, $ch);\n    if ($first == -1) {\n        return $s;\n    }\n    if ($first == $last) {\n        substr($s, $first, 1, '');\n    }\n    else {\n        substr($s, $first, 1, '');\n        substr($s, $last - 1, 1, '');\n    }\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    if ($pos == -1) {\n        return $s;\n    }\n    my $pos2 = rindex($s, $ch);\n    if ($pos == $pos2) {\n        return substr($s, 0, $pos) . substr($s, $pos + 1);\n    }\n    return substr($s, 0, $pos) . substr($s, $pos + 1, $pos2 - $pos - 1) . substr($s, $pos2 + 1);\n}",
    "    my $i = index($s, $ch);\n    my $j = rindex($s, $ch);\n    if ($i == -1) {\n        return $s;\n    }\n    elsif ($i == $j) {\n        return substr($s, 0, $i) . substr($s, $i + 1);\n    }\n    else {\n        return substr($s, 0, $i) . substr($s, $i + 1, $j - $i - 1) . substr($s, $j + 1);\n    }\n}",
    "    $s =~ s/$ch//;\n    $s =~ s/$ch//;\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    my $pos1 = rindex($s, $ch);\n    my $len = length($s);\n    my $str = substr($s, 0, $pos) . substr($s, $pos+1, $len-$pos);\n    my $str1 = substr($str, 0, $pos1) . substr($str, $pos1+1, $len-$pos1);\n    return $str1;\n}",
    "    $s =~ s/$ch//;\n    $s =~ s/$ch//;\n    return $s;\n}",
    "    $s =~ s/$ch//;\n    $s =~ s/$ch$//;\n    return $s;\n}",
    "    my $index = index($s, $ch);\n    my $rindex = rindex($s, $ch);\n    if ($index == -1) {\n        return $s;\n    }\n    if ($index == 0) {\n        $s = substr($s, 1);\n    }\n    if ($rindex == length($s) - 1) {\n        $s = substr($s, 0, length($s) - 1);\n    }\n    return $s;\n}",
    "    $s =~ s/$ch//;\n    $s =~ s/$ch//;\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    my $pos1 = rindex($s, $ch);\n    substr($s, $pos, 1, \"\");\n    substr($s, $pos1, 1, \"\");\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    my $pos1 = rindex($s, $ch);\n    if ($pos == -1) {\n        return $s;\n    }\n    else {\n        my $s1 = substr($s, 0, $pos);\n        my $s2 = substr($s, $pos+1, $pos1-$pos-1);\n        my $s3 = substr($s, $pos1+1);\n        return $s1.$s2.$s3;\n    }\n}",
    "    my $pos = index($s, $ch);\n    my $pos1 = rindex($s, $ch);\n    substr($s, $pos, 1, '');\n    substr($s, $pos1, 1, '');\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    my $pos2 = rindex($s, $ch);\n    if ($pos == -1) {\n        return $s;\n    }\n    if ($pos == 0) {\n        $s = substr($s, 1);\n    }\n    else {\n        $s = substr($s, 0, $pos) . substr($s, $pos + 1);\n    }\n    if ($pos2 == length($s)) {\n        $s = substr($s, 0, $pos2 - 1);\n    }\n    else {\n        $s = substr($s, 0, $pos2) . substr($s, $pos2 + 1);\n    }\n    return $s;\n}",
    "    my $len = length($s);\n    my $pos = index($s, $ch);\n    my $pos1 = rindex($s, $ch);\n    if($pos == -1) {\n        print \"Character not found in the string\\n\";\n    }\n    else {\n        my $s1 = substr($s, 0, $pos);\n        my $s2 = substr($s, $pos+1, $len-$pos-1);\n        $s = $s1.$s2;\n        $len = length($s);\n        $s1 = substr($s, 0, $pos1-1);\n        $s2 = substr($s, $pos1+1, $len-$pos1-1);\n        $s = $s1.$s2;\n    }\n    return $s;\n}",
    "    my $i = index($s, $ch);\n    my $j = rindex($s, $ch);\n    my $len = length($s);\n    my $new_str = substr($s, 0, $i) . substr($s, $i+1, $j-$i-1) . substr($s, $j+1, $len-$j-1);\n    return $new_str;\n}",
    "    my $pos = index($s, $ch);\n    substr($s, $pos, 1, \"\");\n    $pos = rindex($s, $ch);\n    substr($s, $pos, 1, \"\");\n    return $s;\n}",
    "    $s =~ s/$ch//;\n    $s =~ s/$ch$//;\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    my $pos1 = rindex($s, $ch);\n    substr($s, $pos, 1) = \"\";\n    substr($s, $pos1, 1) = \"\";\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    my $pos1 = rindex($s, $ch);\n    my $len = length($s);\n    my $sub1 = substr($s, 0, $pos);\n    my $sub2 = substr($s, $pos + 1, $pos1 - $pos - 1);\n    my $sub3 = substr($s, $pos1 + 1, $len - $pos1 - 1);\n    my $sub = $sub1 . $sub2 . $sub3;\n    return $sub;\n}",
    "    my $i = index($s, $ch);\n    my $j = rindex($s, $ch);\n    substr($s, $i, 1, '');\n    substr($s, $j, 1, '');\n    return $s;\n}",
    "    $s =~ s/$ch//;\n    $s =~ s/$ch//;\n    return $s;\n}",
    "    $s =~ s/^$ch//;\n    $s =~ s/$ch$//;\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    if ($pos == -1) {\n        return $s;\n    }\n    my $pos1 = rindex($s, $ch);\n    my $s1 = substr($s, 0, $pos);\n    my $s2 = substr($s, $pos + 1, $pos1 - $pos - 1);\n    my $s3 = substr($s, $pos1 + 1);\n    return $s1 . $s2 . $s3;\n}",
    "    my $pos = index($s, $ch);\n    my $pos1 = rindex($s, $ch);\n    my $len = length($s);\n    my $str = substr($s, 0, $pos);\n    my $str1 = substr($s, $pos1+1, $len);\n    my $str2 = $str.$str1;\n    return $str2;\n}",
    "    $s =~ s/$ch//g;\n    return $s;\n}",
    "    my $i = index($s, $ch);\n    my $j = rindex($s, $ch);\n    if ($i == -1) {\n        return $s;\n    }\n    elsif ($i == $j) {\n        return substr($s, 0, $i) . substr($s, $i + 1);\n    }\n    else {\n        return substr($s, 0, $i) . substr($s, $i + 1, $j - $i - 1) . substr($s, $j + 1);\n    }\n}",
    "    my $i = index($s, $ch);\n    my $j = rindex($s, $ch);\n    return substr($s, 0, $i) . substr($s, $i + 1, $j - $i - 1) . substr($s, $j + 1);\n}\nprint remove_Occ(\"Python\", \"y\");",
    "    $s =~ s/$ch//;\n    $s =~ s/$ch//;\n    return $s;\n}",
    "    $s =~ s/$ch//;\n    $s =~ s/$ch$//;\n    return $s;\n}",
    "    $s =~ s/$ch//;\n    $s =~ s/$ch//;\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    if ($pos == -1) {\n        return $s;\n    }\n    my $pos2 = rindex($s, $ch);\n    if ($pos == $pos2) {\n        return substr($s, 0, $pos) . substr($s, $pos + 1);\n    }\n    return substr($s, 0, $pos) . substr($s, $pos + 1, $pos2 - $pos - 1) . substr($s, $pos2 + 1);\n}",
    "    $s =~ s/^$ch//;\n    $s =~ s/$ch$//;\n    return $s;\n}\nprint remove_Occ(\"Python\", \"P\");\nprint \"\\n\";\nprint remove_Occ(\"Python\", \"n\");\nprint \"\\n\";\nprint remove_Occ(\"Python\", \"o\");\nprint \"\\n\";",
    "    $s =~ s/$ch//g;\n    return $s;\n}\nprint remove_Occ(\"abcabcabc\", \"b\");",
    "    $s =~ s/$ch//;\n    $s =~ s/$ch$//;\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    my $pos1 = rindex($s, $ch);\n    my $s1 = substr($s, 0, $pos);\n    my $s2 = substr($s, $pos1+1);\n    return $s1.$s2;\n}",
    "    $s =~ s/$ch//g;\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    my $pos1 = rindex($s, $ch);\n    my $s1 = substr($s, 0, $pos);\n    my $s2 = substr($s, $pos1+1);\n    return $s1.$s2;\n}",
    "    my $pos = index($s, $ch);\n    substr($s, $pos, 1, '');\n    $pos = rindex($s, $ch);\n    substr($s, $pos, 1, '');\n    return $s;\n}",
    "    my $i = index($s, $ch);\n    my $j = rindex($s, $ch);\n    substr($s, $i, 1, '');\n    substr($s, $j-1, 1, '');\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    my $pos1 = rindex($s, $ch);\n    substr($s, $pos, 1, '');\n    substr($s, $pos1, 1, '');\n    return $s;\n}",
    "    $s =~ s/$ch//;\n    $s =~ s/$ch$//;\n    return $s;\n}",
    "    my $i = index($s, $ch);\n    my $j = rindex($s, $ch);\n    my $len = length($s);\n    my $sub = substr($s, $i+1, $j-$i-1);\n    return $sub;\n}\nprint remove_Occ(\"abcdefghijklmn\", \"m\");",
    "    $s =~ s/$ch//;\n    $s =~ s/$ch//;\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    my $pos1 = rindex($s, $ch);\n    if($pos == -1) {\n        return $s;\n    }\n    elsif($pos == 0) {\n        return substr($s, 1);\n    }\n    elsif($pos1 == length($s) - 1) {\n        return substr($s, 0, $pos1);\n    }\n    else {\n        return substr($s, 0, $pos) . substr($s, $pos + 1);\n    }\n}",
    "    my $pos = index($s, $ch);\n    my $pos1 = rindex($s, $ch);\n    my $len = length($s);\n    my $str = substr($s, 0, $pos) . substr($s, $pos+1, $len-$pos-1);\n    my $str1 = substr($str, 0, $pos1) . substr($str, $pos1+1, $len-$pos1-1);\n    return $str1;\n}",
    "    $s =~ s/$ch//;\n    $s =~ s/$ch//;\n    return $s;\n}",
    "    $s =~ s/$ch//;\n    $s =~ s/$ch//;\n    return $s;\n}",
    "    $s =~ s/$ch//;\n    $s =~ s/$ch//;\n    return $s;\n}",
    "    $s =~ s/$ch//;\n    $s =~ s/$ch//;\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    my $pos1 = rindex($s, $ch);\n    if($pos == -1) {\n        return $s;\n    }\n    else {\n        substr($s, $pos, 1, \"\");\n        substr($s, $pos1-1, 1, \"\");\n        return $s;\n    }\n}",
    "    $s =~ s/$ch//;\n    $s =~ s/$ch//;\n    return $s;\n}",
    "    my $i = index($s, $ch);\n    my $j = rindex($s, $ch);\n    if ($i == -1) {\n        return $s;\n    }\n    elsif ($i == $j) {\n        return substr($s, 0, $i) . substr($s, $i + 1);\n    }\n    else {\n        return substr($s, 0, $i) . substr($s, $i + 1, $j - $i - 1) . substr($s, $j + 1);\n    }\n}",
    "    $s =~ s/$ch//;\n    $s =~ s/$ch//;\n    return $s;\n}",
    "    $s =~ s/$ch//;\n    $s =~ s/$ch$//;\n    return $s;\n}",
    "    $s =~ s/$ch//g;\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    substr($s, $pos, 1) = \"\";\n    $pos = rindex($s, $ch);\n    substr($s, $pos, 1) = \"\";\n    return $s;\n}\nprint remove_Occ(\"Python\", \"y\").\"\\n\";",
    "    my $pos = index($s, $ch);\n    my $pos2 = rindex($s, $ch);\n    if ($pos == -1) {\n        return $s;\n    }\n    else {\n        my $s1 = substr($s, 0, $pos);\n        my $s2 = substr($s, $pos+1, $pos2-$pos-1);\n        my $s3 = substr($s, $pos2+1);\n        return $s1.$s2.$s3;\n    }\n}",
    "    my $i = index($s, $ch);\n    my $j = rindex($s, $ch);\n    if ($i == -1) {\n        return $s;\n    }\n    elsif ($i == $j) {\n        return substr($s, 0, $i) . substr($s, $i + 1);\n    }\n    else {\n        return substr($s, 0, $i) . substr($s, $i + 1, $j - $i - 1) . substr($s, $j + 1);\n    }\n}\nprint(remove_Occ(\"Python\", \"n\"));\nprint(\"\\n\");\nprint(remove_Occ(\"Python\", \"y\"));\nprint(\"\\n\");\nprint(remove_Occ(\"Python\", \"a\"));\nprint(\"\\n\");",
    "    my $pos = index($s, $ch);\n    my $pos1 = rindex($s, $ch);\n    if ($pos == -1) {\n        return $s;\n    }\n    else {\n        substr($s, $pos, 1, \"\");\n        substr($s, $pos1, 1, \"\");\n        return $s;\n    }\n}",
    "    my $first = index($s, $ch);\n    my $last = rindex($s, $ch);\n    my $len = length($s);",
    "    my $i = index($s, $ch);\n    my $j = rindex($s, $ch);\n    if ($i == -1) {\n        return $s;\n    }\n    elsif ($i == $j) {\n        return substr($s, 0, $i) . substr($s, $i + 1);\n    }\n    else {\n        return substr($s, 0, $i) . substr($s, $i + 1, $j - $i - 1) . substr($s, $j + 1);\n    }\n}",
    "    $s =~ s/$ch//;\n    $s =~ s/$ch//;\n    return $s;\n}",
    "    $s =~ s/$ch//g;\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    substr($s, $pos, 1, '');\n    $pos = rindex($s, $ch);\n    substr($s, $pos, 1, '');\n    return $s;\n}",
    "    my $index = index($s, $ch);\n    my $lastIndex = rindex($s, $ch);\n    if ($index == -1) {\n        return $s;\n    }\n    if ($index == 0) {\n        $s = substr($s, 1);\n    }\n    if ($lastIndex == length($s) - 1) {\n        $s = substr($s, 0, $lastIndex);\n    }\n    if ($index != 0 && $lastIndex != length($s) - 1) {\n        $s = substr($s, 0, $index) . substr($s, $index + 1, $lastIndex - $index - 1) . substr($s, $lastIndex + 1);\n    }\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    my $pos1 = rindex($s, $ch);\n    substr($s, $pos, 1, \"\");\n    substr($s, $pos1, 1, \"\");\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    my $pos1 = rindex($s, $ch);\n    if ($pos == -1) {\n        return $s;\n    }\n    else {\n        my $s1 = substr($s, 0, $pos);\n        my $s2 = substr($s, $pos+1, $pos1-$pos-1);\n        my $s3 = substr($s, $pos1+1);\n        return $s1.$s2.$s3;\n    }\n}",
    "    $s =~ s/$ch//;\n    $s =~ s/$ch//;\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    my $pos1 = rindex($s, $ch);\n    if($pos == -1) {\n        return $s;\n    }\n    elsif($pos == 0) {\n        return substr($s, 1, length($s) - 1);\n    }\n    elsif($pos1 == length($s) - 1) {\n        return substr($s, 0, length($s) - 1);\n    }\n    else {\n        return substr($s, 0, $pos) . substr($s, $pos + 1, length($s) - $pos - 1);\n    }\n}",
    "    my $pos = index($s, $ch);\n    my $pos1 = rindex($s, $ch);\n    if($pos == -1) {\n        return $s;\n    }\n    if($pos == 0) {\n        $s = substr($s, 1);\n    }\n    if($pos1 == (length($s) - 1)) {\n        $s = substr($s, 0, $pos1);\n    }\n    if($pos != 0 && $pos1 != (length($s) - 1)) {\n        $s = substr($s, 0, $pos) . substr($s, $pos + 1, $pos1 - $pos - 1) . substr($s, $pos1 + 1);\n    }\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    my $pos1 = rindex($s, $ch);\n    if ($pos == -1) {\n        return $s;\n    }\n    elsif ($pos == 0) {\n        return substr($s, 1);\n    }\n    elsif ($pos1 == length($s) - 1) {\n        return substr($s, 0, length($s) - 1);\n    }\n    else {\n        return substr($s, 0, $pos) . substr($s, $pos + 1, length($s) - $pos - 1);\n    }\n}",
    "    my $i = index($s, $ch);\n    my $j = rindex($s, $ch);\n    return substr($s, 0, $i) . substr($s, $i+1, $j-$i-1) . substr($s, $j+1);\n}",
    "    my $i = index($s, $ch);\n    my $j = rindex($s, $ch);\n    substr($s, $i, 1) = \"\";\n    substr($s, $j, 1) = \"\";\n    return $s;\n}",
    "    my $i = index($s, $ch);\n    my $j = rindex($s, $ch);\n    if ($i == -1) {\n        return $s;\n    }\n    elsif ($i == $j) {\n        return substr($s, 0, $i) . substr($s, $i + 1);\n    }\n    else {\n        return substr($s, 0, $i) . substr($s, $i + 1, $j - $i - 1) . substr($s, $j + 1);\n    }\n}",
    "    $s =~ s/$ch//;\n    $s =~ s/$ch//;\n    return $s;\n}",
    "    $s =~ s/$ch//;\n    $s =~ s/$ch//;\n    return $s;\n}",
    "    my $i = index($s, $ch);\n    my $j = rindex($s, $ch);\n    if ($i == -1) {\n        return $s;\n    }\n    elsif ($i == $j) {\n        return substr($s, 0, $i) . substr($s, $i + 1);\n    }\n    else {\n        return substr($s, 0, $i) . substr($s, $i + 1, $j - $i - 1) . substr($s, $j + 1);\n    }\n}",
    "    $s =~ s/$ch//;\n    $s =~ s/$ch$//;\n    return $s;\n}",
    "    $s =~ s/^$ch//;\n    $s =~ s/$ch$//;\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    substr($s, $pos, 1, \"\");\n    $pos = rindex($s, $ch);\n    substr($s, $pos, 1, \"\");\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    substr($s, $pos, 1, \"\");\n    my $pos1 = rindex($s, $ch);\n    substr($s, $pos1, 1, \"\");\n    return $s;\n}",
    "    $s =~ s/$ch//;\n    $s =~ s/$ch//;\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    substr($s, $pos, 1) = \"\";\n    $pos = rindex($s, $ch);\n    substr($s, $pos, 1) = \"\";\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    substr($s, $pos, 1) = \"\";\n    $pos = rindex($s, $ch);\n    substr($s, $pos, 1) = \"\";\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    substr($s, $pos, 1, \"\");\n    $pos = rindex($s, $ch);\n    substr($s, $pos, 1, \"\");\n    return $s;\n}",
    "    $s =~ s/\\Q$ch\\E//;\n    $s =~ s/\\Q$ch\\E$//;\n    return $s;\n}",
    "    $s =~ s/$ch//;\n    $s =~ s/$ch//;\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    substr($s, $pos, 1) = '' if $pos >= 0;\n    $pos = rindex($s, $ch);\n    substr($s, $pos, 1) = '' if $pos >= 0;\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    substr($s, $pos, 1, '');\n    $pos = rindex($s, $ch);\n    substr($s, $pos, 1, '');\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    substr($s, $pos, 1) = \"\";\n    my $pos1 = rindex($s, $ch);\n    substr($s, $pos1, 1) = \"\";\n    return $s;\n}",
    "    my $i = index($s, $ch);\n    my $j = rindex($s, $ch);\n    if ($i == -1) {\n        return $s;\n    }\n    elsif ($i == $j) {\n        return substr($s, 0, $i) . substr($s, $i+1);\n    }\n    else {\n        return substr($s, 0, $i) . substr($s, $i+1, $j-$i-1) . substr($s, $j+1);\n    }\n}",
    "    $s =~ s/$ch//;\n    $s =~ s/$ch//;\n    return $s;\n}",
    "    $s =~ s/$ch//g;\n    return $s;\n}",
    "    my $i = index($s, $ch);\n    my $j = rindex($s, $ch);\n    if ($i == -1) {\n        return $s;\n    }\n    elsif ($i == $j) {\n        return substr($s, 0, $i) . substr($s, $i + 1);\n    }\n    else {\n        return substr($s, 0, $i) . substr($s, $i + 1, $j - $i - 1) . substr($s, $j + 1);\n    }\n}",
    "    my $pos = index($s, $ch);\n    substr($s, $pos, 1, '');\n    $pos = rindex($s, $ch);\n    substr($s, $pos, 1, '');\n    return $s;\n}",
    "    my $i = index($s, $ch);\n    my $j = rindex($s, $ch);\n    return substr($s, 0, $i).substr($s, $i+1, $j-$i-1).substr($s, $j+1);\n}",
    "    $s =~ s/^$ch//;\n    $s =~ s/$ch$//;\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    my $pos1 = rindex($s, $ch);\n    if($pos == -1) {\n        return $s;\n    }\n    elsif($pos == 0) {\n        $s = substr($s, 1);\n    }\n    elsif($pos1 == length($s) - 1) {\n        $s = substr($s, 0, length($s) - 1);\n    }\n    else {\n        $s = substr($s, 0, $pos) . substr($s, $pos + 1, length($s) - $pos - 1);\n    }\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    my $pos1 = rindex($s, $ch);\n    my $len = length($s);\n    my $substr = substr($s, $pos+1, $pos1-$pos-1);\n    return $substr;\n}",
    "    my $pos = index($s, $ch);\n    substr($s, $pos, 1) = \"\";\n    my $pos1 = rindex($s, $ch);\n    substr($s, $pos1, 1) = \"\";\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    my $pos1 = rindex($s, $ch);\n    substr($s, $pos, 1, \"\");\n    substr($s, $pos1, 1, \"\");\n    return $s;\n}",
    "    $s =~ s/$ch//;\n    $s =~ s/$ch//;\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    substr($s, $pos, 1) = \"\";\n    $pos = rindex($s, $ch);\n    substr($s, $pos, 1) = \"\";\n    return $s;\n}",
    "    $s =~ s/$ch//g;\n    return $s;\n}\nprint(remove_Occ(\"abcabc\", \"a\"));",
    "    my $pos = index($s, $ch);\n    my $pos1 = rindex($s, $ch);\n    substr($s, $pos, 1, \"\");\n    substr($s, $pos1, 1, \"\");\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    substr($s, $pos, 1, '');\n    $pos = rindex($s, $ch);\n    substr($s, $pos, 1, '');\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    substr($s, $pos, 1) = \"\";\n    my $pos1 = rindex($s, $ch);\n    substr($s, $pos1, 1) = \"\";\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    substr($s, $pos, 1) = \"\";\n    $pos = rindex($s, $ch);\n    substr($s, $pos, 1) = \"\";\n    return $s;\n}",
    "    $s =~ s/$ch//;\n    $s =~ s/$ch//;\n    return $s;\n}\nprint remove_Occ(\"abcabc\", \"a\");",
    "    my $pos = index($s, $ch);\n    my $pos1 = rindex($s, $ch);\n    if ($pos == -1) {\n        return $s;\n    }\n    else {\n        my $s1 = substr($s, 0, $pos);\n        my $s2 = substr($s, $pos+1, $pos1-$pos-1);\n        my $s3 = substr($s, $pos1+1);\n        return $s1.$s2.$s3;\n    }\n}",
    "    my $pos = index($s, $ch);\n    substr($s, $pos, 1) = \"\";\n    my $pos1 = rindex($s, $ch);\n    substr($s, $pos1, 1) = \"\";\n    return $s;\n}",
    "    my $i = index($s, $ch);\n    my $j = rindex($s, $ch);\n    return substr($s, 0, $i) . substr($s, $i+1, $j-$i-1) . substr($s, $j+1);\n}",
    "    $s =~ s/^$ch//;\n    $s =~ s/$ch$//;\n    return $s;\n}",
    "    $s =~ s/$ch//;\n    $s =~ s/$ch$//;\n    return $s;\n}",
    "    my $i = index($s, $ch);\n    my $j = rindex($s, $ch);\n    if ($i == -1) {\n        return $s;\n    }\n    elsif ($i == $j) {\n        return substr($s, 0, $i) . substr($s, $i + 1);\n    }\n    else {\n        return substr($s, 0, $i) . substr($s, $i + 1, $j - $i - 1) . substr($s, $j + 1);\n    }\n}",
    "    $s =~ s/$ch//;\n    $s =~ s/$ch//;\n    return $s;\n}",
    "    my $i = index($s, $ch);\n    my $j = rindex($s, $ch);\n    return substr($s, 0, $i) . substr($s, $i+1, $j-$i-1) . substr($s, $j+1);\n}",
    "    my $i = index($s, $ch);\n    my $j = rindex($s, $ch);\n    return substr($s, 0, $i) . substr($s, $i+1, $j-$i-1) . substr($s, $j+1);\n}",
    "    $s =~ s/$ch//;\n    $s =~ s/$ch//;\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    my $len = length($s);\n    my $pos1 = rindex($s, $ch);\n    my $substr = substr($s, $pos+1, $pos1-$pos-1);\n    return $substr;\n}",
    "    $s =~ s/$ch//g;\n    return $s;\n}",
    "    my $i = index($s, $ch);\n    my $j = rindex($s, $ch);\n    my $substr = substr($s, $i+1, $j-$i-1);\n    return $substr;\n}",
    "    $s =~ s/$ch//;\n    $s =~ s/$ch$//;\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    my $pos1 = rindex($s, $ch);\n    if($pos == -1) {\n        return $s;\n    }\n    elsif($pos == 0) {\n        return substr($s, 1);\n    }\n    elsif($pos1 == length($s) - 1) {\n        return substr($s, 0, length($s) - 1);\n    }\n    else {\n        return substr($s, 0, $pos) . substr($s, $pos + 1, length($s) - $pos - 1);\n    }\n}",
    "    $s =~ s/$ch//g;\n    return $s;\n}",
    "    $s =~ s/$ch//;\n    $s =~ s/$ch//;\n    return $s;\n}",
    "    $s =~ s/$ch//;\n    $s =~ s/$ch//;\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    my $pos1 = rindex($s, $ch);\n    substr($s, $pos, 1, '');\n    substr($s, $pos1, 1, '');\n    return $s;\n}",
    "    $s =~ s/$ch//;\n    $s =~ s/$ch//;\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    my $pos1 = rindex($s, $ch);\n    if($pos == -1) {\n        print \"Character not found\\n\";\n    }\n    else {\n        my $s1 = substr($s, 0, $pos);\n        my $s2 = substr($s, $pos+1, $pos1-1);\n        my $s3 = substr($s, $pos1+1);\n        my $s4 = $s1.$s2.$s3;\n        print \"$s4\\n\";\n    }\n}",
    "    $s =~ s/$ch//;\n    $s =~ s/$ch//;\n    return $s;\n}",
    "    my $i = index($s, $ch);\n    my $j = rindex($s, $ch);\n    if ($i == -1) {\n        return $s;\n    }\n    if ($i == $j) {\n        return substr($s, 0, $i) . substr($s, $i + 1);\n    }\n    return substr($s, 0, $i) . substr($s, $i + 1, $j - $i - 1) . substr($s, $j + 1);\n}",
    "    my $pos = index($s, $ch);\n    my $rpos = rindex($s, $ch);\n    if($pos == -1) {\n        return $s;\n    }\n    if($pos == 0) {\n        $s = substr($s, 1);\n    }\n    else {\n        $s = substr($s, 0, $pos) . substr($s, $pos + 1);\n    }\n    if($rpos == length($s)) {\n        $s = substr($s, 0, $rpos - 1);\n    }\n    else {\n        $s = substr($s, 0, $rpos) . substr($s, $rpos + 1);\n    }\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    my $pos1 = rindex($s, $ch);\n    if ($pos == -1) {\n        return $s;\n    }\n    elsif ($pos == 0) {\n        return substr($s, $pos+1, length($s)-1);\n    }\n    elsif ($pos1 == length($s)-1) {\n        return substr($s, 0, $pos1);\n    }\n    else {\n        return substr($s, 0, $pos).substr($s, $pos+1, length($s)-1);\n    }\n}",
    "    my $pos = index($s, $ch);\n    substr($s, $pos, 1) = \"\";\n    $pos = rindex($s, $ch);\n    substr($s, $pos, 1) = \"\";\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    substr($s, $pos, 1) = \"\";\n    $pos = rindex($s, $ch);\n    substr($s, $pos, 1) = \"\";\n    return $s;\n}",
    "    my $i = index($s, $ch);\n    my $j = rindex($s, $ch);\n    return substr($s, 0, $i) . substr($s, $i + 1, $j - $i - 1) . substr($s, $j + 1);\n}",
    "    $s =~ s/$ch//;\n    $s =~ s/$ch//;\n    return $s;\n}",
    "    $s =~ s/$ch//;\n    $s =~ s/$ch$//;\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    substr($s, $pos, 1, '') if $pos >= 0;\n    $pos = rindex($s, $ch);\n    substr($s, $pos, 1, '') if $pos >= 0;\n    return $s;\n}\nprint remove_Occ(\"Python\", \"y\");",
    "    my $pos = index($s, $ch);\n    my $pos1 = rindex($s, $ch);\n    if ($pos == -1) {\n        return $s;\n    }\n    else {\n        return substr($s, 0, $pos) . substr($s, $pos + 1, $pos1 - $pos - 1) . substr($s, $pos1 + 1);\n    }\n}",
    "    $s =~ s/$ch//;\n    $s =~ s/$ch//;\n    return $s;\n}",
    "    $s =~ s/$ch//;\n    $s =~ s/$ch$//;\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    my $pos1 = rindex($s, $ch);\n    my $len = length($s);\n    my $substr = substr($s, $pos+1, $pos1-$pos-1);\n    return $substr;\n}",
    "    $s =~ s/$ch//;\n    $s =~ s/$ch//;\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    my $pos1 = rindex($s, $ch);\n    substr($s, $pos, 1, '');\n    substr($s, $pos1, 1, '');\n    return $s;\n}",
    "    $s =~ s/$ch//;\n    $s =~ s/$ch//;\n    return $s;\n}\nprint remove_Occ(\"abcabcabc\", \"a\");",
    "    my $pos = index($s, $ch);\n    substr($s, $pos, 1, \"\");\n    $pos = rindex($s, $ch);\n    substr($s, $pos, 1, \"\");\n    return $s;\n}",
    "    $s =~ s/$ch//g;\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    substr($s, $pos, 1) = \"\";\n    my $pos1 = rindex($s, $ch);\n    substr($s, $pos1, 1) = \"\";\n    return $s;\n}\nprint remove_Occ(\"Python\", \"y\");",
    "    my $pos = index($s, $ch);\n    substr($s, $pos, 1) = \"\";\n    $pos = rindex($s, $ch);\n    substr($s, $pos, 1) = \"\";\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    my $pos1 = rindex($s, $ch);\n    substr($s, $pos, 1, '');\n    substr($s, $pos1, 1, '');\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    my $pos1 = rindex($s, $ch);\n    substr($s, $pos, 1, '');\n    substr($s, $pos1, 1, '');\n    return $s;\n}",
    "    $s =~ s/$ch//;\n    $s =~ s/$ch//;\n    return $s;\n}",
    "    $s =~ s/$ch//;\n    $s =~ s/$ch//;\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    substr($s, $pos, 1, \"\");\n    $pos = rindex($s, $ch);\n    substr($s, $pos, 1, \"\");\n    return $s;\n}",
    "    $s =~ s/$ch//g;\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    my $rpos = rindex($s, $ch);\n    if ($pos == -1) {\n        return $s;\n    }\n    if ($pos == 0) {\n        $s = substr($s, 1);\n    } else {\n        $s = substr($s, 0, $pos) . substr($s, $pos + 1);\n    }\n    if ($rpos == length($s) - 1) {\n        $s = substr($s, 0, $rpos);\n    } else {\n        $s = substr($s, 0, $rpos) . substr($s, $rpos + 1);\n    }\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    my $len = length($s);\n    my $pos1 = rindex($s, $ch);\n    substr($s, $pos, 1, \"\");\n    substr($s, $pos1-1, 1, \"\");\n    return $s;\n}",
    "    $s =~ s/$ch//;\n    $s =~ s/$ch//;\n    return $s;\n}",
    "    $s =~ s/\\Q$ch\\E//g;\n    return $s;\n}",
    "    $s =~ s/$ch//;\n    $s =~ s/$ch//;\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    my $len = length($s);\n    my $pos1 = rindex($s, $ch);\n    my $str1 = substr($s, 0, $pos);\n    my $str2 = substr($s, $pos1+1, $len);\n    my $str3 = $str1.$str2;\n    return $str3;\n}",
    "    $s =~ s/$ch//;\n    $s =~ s/$ch$//;\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    my $pos1 = rindex($s, $ch);\n    my $len = length($s);\n    my $str1 = substr($s, 0, $pos);\n    my $str2 = substr($s, $pos+1, $len-$pos1-1);\n    my $str3 = substr($s, $pos1+1, $len-$pos1-1);\n    my $str = $str1.$str2.$str3;\n    return $str;\n}",
    "    my $pos = index($s, $ch);\n    my $pos2 = rindex($s, $ch);\n    if ($pos == -1) {\n        return $s;\n    }\n    elsif ($pos == 0) {\n        return substr($s, $pos+1, length($s)-1);\n    }\n    elsif ($pos2 == length($s)-1) {\n        return substr($s, 0, $pos2);\n    }\n    else {\n        return substr($s, 0, $pos).substr($s, $pos+1, length($s)-1);\n    }\n}",
    "    my $pos = index($s, $ch);\n    substr($s, $pos, 1, \"\");\n    my $pos1 = rindex($s, $ch);\n    substr($s, $pos1, 1, \"\");\n    return $s;\n}",
    "    my $i = index($s, $ch);\n    my $j = rindex($s, $ch);\n    substr($s, $i, 1) = \"\";\n    substr($s, $j, 1) = \"\";\n    return $s;\n}",
    "    $s =~ s/$ch//;\n    $s =~ s/$ch//;\n    return $s;\n}",
    "    my $i = index($s, $ch);\n    my $j = rindex($s, $ch);\n    return substr($s, 0, $i) . substr($s, $i+1, $j-$i-1) . substr($s, $j+1);\n}",
    "    my $pos = index($s, $ch);\n    substr($s, $pos, 1, \"\");\n    $pos = rindex($s, $ch);\n    substr($s, $pos, 1, \"\");\n    return $s;\n}",
    "    $s =~ s/$ch//;\n    $s =~ s/$ch$//;\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    substr($s, $pos, 1) = \"\";\n    $pos = rindex($s, $ch);\n    substr($s, $pos, 1) = \"\";\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    substr($s, $pos, 1, '');\n    $pos = rindex($s, $ch);\n    substr($s, $pos, 1, '');\n    return $s;\n}",
    "    $s =~ s/$ch//;\n    $s =~ s/$ch//;\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    if ($pos == -1) {\n        return $s;\n    }\n    my $pos1 = rindex($s, $ch);\n    return substr($s, 0, $pos).substr($s, $pos+1, $pos1-$pos-1).substr($s, $pos1+1);\n}",
    "    my $pos = index($s, $ch);\n    my $pos1 = rindex($s, $ch);\n    if ($pos == -1) {\n        return $s;\n    }\n    else {\n        return substr($s, 0, $pos) . substr($s, $pos + 1, $pos1 - $pos - 1) . substr($s, $pos1 + 1);\n    }\n}",
    "    my $i = index($s, $ch);\n    my $j = rindex($s, $ch);\n    if ($i == -1) {\n        return $s;\n    }\n    if ($i == 0) {\n        $s = substr($s, 1);\n    }\n    if ($j == length($s) - 1) {\n        $s = substr($s, 0, $j);\n    }\n    if ($i != 0 && $j != length($s) - 1) {\n        $s = substr($s, 0, $i) . substr($s, $i + 1, $j - $i - 1) . substr($s, $j + 1);\n    }\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    my $rpos = rindex($s, $ch);\n    substr($s, $pos, 1, \"\");\n    substr($s, $rpos-1, 1, \"\");\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    my $pos2 = rindex($s, $ch);\n    if ($pos == -1) {\n        return $s;\n    }\n    if ($pos == 0) {\n        $s = substr($s, 1);\n    }\n    elsif ($pos2 == length($s) - 1) {\n        $s = substr($s, 0, $pos);\n    }\n    else {\n        $s = substr($s, 0, $pos) . substr($s, $pos + 1);\n    }\n    return $s;\n}"
  ]
}