{
  "name": "mbpp_11_remove_Occ",
  "language": "pl",
  "prompt": "# Write a plthon function to remove first and last occurrence of a given character from the string.\nsub remove_Occ {\n    my($s, $ch) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_11_remove_Occ.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&remove_Occ;\n        if(eq_deeply($candidate->(\"hello\", \"l\"),\"heo\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcda\", \"a\"),\"bcd\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"PHP\", \"P\"),\"H\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $pos = index($s, $ch);\n    my $pos1 = rindex($s, $ch);\n    my $new_s = substr($s, 0, $pos) . substr($s, $pos + 1, $pos1 - $pos - 1) . substr($s, $pos1 + 1);\n    return $new_s;\n}",
    "    $s =~ s/$ch//;\n    $s =~ s/$ch//;\n    return $s;\n}",
    "    $s =~ s/$ch//g;\n    return $s;\n}",
    "    my $i = index($s, $ch);\n    my $j = rindex($s, $ch);\n    return substr($s, 0, $i) . substr($s, $i + 1, $j - $i - 1) . substr($s, $j + 1);\n}",
    "    my $pos = index($s, $ch);\n    substr($s, $pos, 1) = \"\";\n    $pos = rindex($s, $ch);\n    substr($s, $pos, 1) = \"\";\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    substr($s, $pos, 1, '');\n    $pos = rindex($s, $ch);\n    substr($s, $pos, 1, '');\n    return $s;\n}",
    "    my $i = index($s, $ch);\n    my $j = rindex($s, $ch);\n    if ($i == -1) {\n        return $s;\n    }\n    elsif ($i == $j) {\n        return substr($s, 0, $i) . substr($s, $i + 1);\n    }\n    else {\n        return substr($s, 0, $i) . substr($s, $i + 1, $j - $i - 1) . substr($s, $j + 1);\n    }\n}",
    "    my $pos = index($s, $ch);\n    my $pos1 = rindex($s, $ch);\n    if($pos == -1) {\n        return $s;\n    }\n    else {\n        my $s1 = substr($s, 0, $pos);\n        my $s2 = substr($s, $pos + 1, $pos1 - $pos - 1);\n        my $s3 = substr($s, $pos1 + 1);\n        return $s1.$s2.$s3;\n    }\n}",
    "    my $pos = index($s, $ch);\n    substr($s, $pos, 1) = \"\";\n    my $pos1 = rindex($s, $ch);\n    substr($s, $pos1, 1) = \"\";\n    return $s;\n}",
    "    my $i = index($s, $ch);\n    my $j = rindex($s, $ch);\n    if ($i == -1) {\n        return $s;\n    }\n    elsif ($i == $j) {\n        return substr($s, 0, $i) . substr($s, $i + 1);\n    }\n    else {\n        return substr($s, 0, $i) . substr($s, $i + 1, $j - $i - 1) . substr($s, $j + 1);\n    }\n}",
    "    my $pos = index($s, $ch);\n    my $pos1 = rindex($s, $ch);\n    substr($s, $pos, 1) = \"\";\n    substr($s, $pos1, 1) = \"\";\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    substr($s, $pos, 1) = \"\";\n    $pos = rindex($s, $ch);\n    substr($s, $pos, 1) = \"\";\n    return $s;\n}",
    "    my $i = index($s, $ch);\n    my $j = rindex($s, $ch);\n    my $l = length($s);\n    if ($i == -1) {\n        return $s;\n    }\n    elsif ($i == 0 && $j == $l-1) {\n        return \"\";\n    }\n    elsif ($i == 0) {\n        return substr($s, $j+1);\n    }\n    elsif ($j == $l-1) {\n        return substr($s, 0, $i);\n    }\n    else {\n        return substr($s, 0, $i).substr($s, $j+1);\n    }\n}",
    "    my $pos = index($s, $ch);\n    substr($s, $pos, 1, \"\");\n    $pos = rindex($s, $ch);\n    substr($s, $pos, 1, \"\");\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    my $pos1 = rindex($s, $ch);\n    if($pos == -1) {\n        return $s;\n    }\n    if($pos == 0) {\n        $s = substr($s, 1);\n    }\n    if($pos1 == length($s) - 1) {\n        $s = substr($s, 0, $pos1);\n    }\n    if($pos != 0 && $pos1 != length($s) - 1) {\n        $s = substr($s, 0, $pos) . substr($s, $pos + 1, $pos1 - $pos - 1) . substr($s, $pos1 + 1);\n    }\n    return $s;\n}",
    "    $s =~ s/$ch//;\n    $s =~ s/$ch//;\n    return $s;\n}\nprint remove_Occ(\"abcabc\", \"a\");\nprint \"\\n\";\nprint remove_Occ(\"abcabc\", \"c\");\nprint \"\\n\";",
    "    my $pos = index($s, $ch);\n    my $pos1 = rindex($s, $ch);\n    if($pos == -1) {\n        return $s;\n    }\n    elsif($pos == 0) {\n        return substr($s, $pos+1, length($s)-1);\n    }\n    elsif($pos1 == length($s)-1) {\n        return substr($s, 0, $pos1);\n    }\n    else {\n        return substr($s, 0, $pos).substr($s, $pos+1, length($s)-1);\n    }\n}",
    "    my $i = index($s, $ch);\n    my $j = rindex($s, $ch);\n    return substr($s, 0, $i) . substr($s, $i+1, $j-$i-1) . substr($s, $j+1);\n}",
    "    $s =~ s/$ch//g;\n    return $s;\n}",
    "    my $pos = index($s, $ch);\n    substr($s, $pos, 1) = \"\";\n    $pos = rindex($s, $ch);\n    substr($s, $pos, 1) = \"\";\n    return $s;\n}"
  ]
}