{
  "name": "mbpp_617_min_Jumps",
  "language": "pl",
  "prompt": "# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\nsub min_Jumps {\n    my($steps, $d) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_617_min_Jumps.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&min_Jumps;\n        if(eq_deeply($candidate->([3, 4], 11),3.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 4], 0),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([11, 14], 11),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $jumps = 0;\n    my $curr_pos = 0;\n    my $curr_step = 0;\n    my $i = 0;\n    while($curr_pos < $d) {\n        $curr_step = $steps->[$i];\n        $curr_pos += $curr_step;\n        $i++;\n        $jumps++;\n    }\n    return $jumps;\n}",
    "    my $jumps = 0;\n    my $i = 0;\n    while($i < $d) {\n        $i += $steps;\n        $jumps++;\n    }\n    return $jumps;\n}",
    "    my $jumps = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0",
    "    my $jumps = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0",
    "    my $jumps = 0;\n    my $x = 0;\n    my $y = 0;\n    while ($x < $d) {\n        $x += $steps;\n        $jumps++;\n    }\n    while ($y < $d) {\n        $y += $steps;\n        $jumps++;\n    }\n    return $jumps;\n}",
    "    my $jumps = 0;\n    my $i = 0;\n    while($i < $d) {\n        $i += $steps[$i];\n        $jumps++;\n    }\n    return $jumps;\n}",
    "    my $jumps = 0;\n    my $i = 0;\n    while ($i < $d) {\n        $i += $steps[$jumps];\n        $jumps++;\n    }\n    return $jumps;\n}",
    "    my $jumps = 0;\n    my $i = 0;\n    while($i < $d) {\n        $i += $steps;\n        $jumps++;\n    }\n    return $jumps;\n}",
    "    my $jumps = 0;\n    my $i = 0;\n    while($i < $d) {\n        $i += $steps[$jumps];\n        $jumps++;\n    }\n    return $jumps;\n}",
    "    my $jumps = 0;\n    my $i = 0;\n    while($i < $d) {\n        $jumps++;\n        $i += $steps;\n    }\n    return $jumps;\n}",
    "    my $jumps = 0;\n    my $pos = 0;\n    my $i = 0;\n    while ($pos < $d) {\n        $pos += $steps->[$i];\n        $jumps++;\n        $i++;\n    }\n    return $jumps;\n}",
    "    my $jumps = 0;\n    my $i = 0;\n    while($i < $d) {\n        $i += $steps[$jumps];\n        $jumps++;\n    }\n    return $jumps;\n}",
    "    my $jumps = 0;\n    my $i = 0;\n    while($i < $d) {\n        $i += $steps;\n        $jumps++;\n    }\n    return $jumps;\n}",
    "    my $jumps = 0;\n    my $i = 0;\n    while($i < $d) {\n        $i += $steps[$jumps];\n        $jumps++;\n    }\n    return $jumps;\n}",
    "    my $jumps = 0;\n    my $count = 0;\n    my $i = 0;\n    while ($count < $d) {\n        $count += $steps->[$i];\n        $jumps++;\n        $i++;\n    }\n    return $jumps;\n}",
    "    my $jumps = 0;\n    my $i = 0;\n    while ($i < $d) {\n        $i += $steps[$jumps];\n        $jumps++;\n    }\n    return $jumps;\n}",
    "    my $jumps = 0;\n    my $i = 0;\n    while($i < $d) {\n        $i += $steps[$jumps];\n        $jumps++;\n    }\n    return $jumps;\n}",
    "    my $jumps = 0;\n    my $i = 0;\n    while ($i < $d) {\n        $i += $steps[$jumps];\n        $jumps++;\n    }\n    return $jumps;\n}",
    "    my $jumps = 0;\n    my $i = 0;\n    while($i < $d) {\n        $i += $steps[$i];\n        $jumps++;\n    }\n    return $jumps;\n}",
    "    my $jumps = 0;\n    my $pos = 0;\n    my $i = 0;\n    while($pos < $d) {\n        if($steps->[$i] + $pos >= $d) {\n            $jumps++;\n            last;\n        }\n        $pos += $steps->[$i];\n        $i++;\n        $jumps++;\n    }\n    return $jumps;\n}"
  ]
}