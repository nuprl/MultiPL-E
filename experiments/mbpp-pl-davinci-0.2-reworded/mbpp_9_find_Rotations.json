{
  "name": "mbpp_9_find_Rotations",
  "language": "pl",
  "prompt": "# Write a plthon function to find the minimum number of rotations (greater than 0) required to get the same string.\nsub find_Rotations {\n    my($str) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_9_find_Rotations.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_Rotations;\n        if(eq_deeply($candidate->(\"aaaa\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ab\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abc\"),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $len = length($str);\n    my $concat = $str . $str;\n    my $min_rotation = $len;\n    for(my $i = 1; $i < $len; $i++) {\n        if(substr($concat, $i, $len) eq $str) {\n            $min_rotation = $i;\n            last;\n        }\n    }\n    return $min_rotation;\n}",
    "    my $len = length($str);\n    my $count = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $temp = 0;\n    my $min = 0;\n    for($i = 0; $i < $len; $i++) {\n        $j = 0;\n        $k = $i;\n        $temp = substr($str, 0, 1);\n        while($j < $len - 1) {\n            if(substr($str, $k + 1, 1) lt $temp) {\n                $count++;\n            }\n            $temp = substr($str, $k + 1, 1);\n            $k++;\n            $j++;\n            if($k == $len - 1) {\n                $k = -1;\n            }\n        }\n        if($i == 0) {\n            $min = $count;\n        }\n        if($count < $min) {\n            $min = $count;\n        }\n        $count = 0;\n    }\n    return $min;\n}",
    "    my $len = length($str);\n    my $str1 = $str . $str;\n    my $min_rotations = $len;\n    for(my $i = 0; $i < $len; $i++) {\n        my $substr = substr($str1, $i, $len);\n        if($substr eq $str) {\n            $min_rotations = $i;\n            last;\n        }\n    }\n    return $min_rotations;\n}",
    "    my $len = length($str);\n    my $i = 0;\n    my $j = 1;\n    my $k = 0;\n    while ($i < $len and $j < $len and $k < $len) {\n        my $x = substr($str, $i, 1);\n        my $y = substr($str, $j, 1);\n        if ($x eq $y) {\n            $i++;\n            $j++;\n        } else {\n            $i = 0;\n            $j = $k + 1;\n            $k++;\n        }\n    }\n    return $i;\n}",
    "    my $len = length($str);\n    my $concat = $str . $str;\n    my $i = 0;\n    while ($i < $len) {\n        if (substr($concat, $i, $len) eq $str) {\n            return $i;\n        }\n        $i++;\n    }\n    return -1;\n}",
    "    my $len = length($str);\n    my $temp = $str . $str;\n    my $i = 0;\n    my $j = 1;\n    while ($i < $len && $j < $len) {\n        my $k = 0;\n        while ($k < $len) {\n            if (substr($temp, $i + $k, 1) ne substr($temp, $j + $k, 1)) {\n                last;\n            }\n            $k++;\n        }\n        if ($k == $len) {\n            return $i;\n        }\n        if (substr($temp, $i + $k, 1) lt substr($temp, $j + $k, 1)) {\n            $i = $i + $k + 1;\n            if ($i <= $j) {\n                $i = $j + 1;\n            }\n        }\n        else {\n            $j = $j + $k + 1;\n            if ($j <= $i) {\n                $j = $i + 1;\n            }\n        }\n    }\n    return $i;\n}",
    "    my $len = length($str);\n    my $concat = $str . $str;\n    my $min = $len;\n    for(my $i = 0; $i < $len; $i++) {\n        my $substr = substr($concat, $i, $len);\n        if($substr eq $str) {\n            $min = $i;\n            last;\n        }\n    }\n    return $min;\n}",
    "    my $len = length($str);\n    my $concat = $str . $str;\n    my $min_rotations = $len;\n    for(my $i = 1; $i < $len; $i++) {\n        my $substr = substr($concat, $i, $len);\n        if($substr eq $str) {\n            $min_rotations = $i;\n            last;\n        }\n    }\n    return $min_rotations;\n}",
    "    my $len = length($str);\n    my $i = 0;\n    my $j = 1;\n    my $k = 0;\n    while ($i < $len && $j < $len && $k < $len) {\n        if (substr($str, $i + $k, 1) eq substr($str, $j + $k, 1)) {\n            $k++;\n        } else {\n            if (substr($str, $i + $k, 1) gt substr($str, $j + $k, 1)) {\n                $i = $i + $k + 1;\n            } else {\n                $j = $j + $k + 1;\n            }\n            if ($i == $j) {\n                $j++;\n            }\n            $k = 0;\n        }\n    }\n    return $i < $j ? $i : $j;\n}",
    "    my $len = length($str);\n    my $str_temp = $str . $str;\n    my $i = 0;\n    my $j = 1;\n    while ($i < $len && $j < $len) {\n        my $k = 0;\n        while ($k < $len) {\n            if (substr($str_temp, $i + $k, 1) ne substr($str_temp, $j + $k, 1)) {\n                last;\n            }\n            $k++;\n        }\n        if ($k == $len) {\n            return $j;\n        }\n        if (substr($str_temp, $i + $k, 1) gt substr($str_temp, $j + $k, 1)) {\n            $i = $i + $k + 1;\n            if ($i <= $j) {\n                $i = $j + 1;\n            }\n        }\n        else {\n            $j = $j + $k + 1;\n            if ($j <= $i) {\n                $j = $i + 1;\n            }\n        }\n    }\n    return $i < $len ? $i : $j;\n}",
    "    my $len = length($str);\n    my $i = 0;\n    my $j = 1;\n    my $k = 0;\n    while ($i < $len && $j < $len && $k < $len) {\n        my $a = substr($str, $i, 1);\n        my $b = substr($str, $j, 1);\n        if ($a eq $b) {\n            $i++;\n            $j++;\n        } else {\n            if ($k == 0) {\n                $j++;\n            } else {\n                $i = $k;\n                $j = $k + 1;\n                $k = 0;\n            }\n        }\n    }\n    return $i;\n}",
    "    my $len = length($str);\n    my $count = 0;\n    for (my $i = 0; $i < $len; $i++) {\n        if (substr($str, $i, 1) eq substr($str, 0, 1)) {\n            my $j = 0;\n            for (; $j < $len; $j++) {\n                if (substr($str, ($i + $j) % $len, 1) ne substr($str, $j, 1)) {\n                    last;\n                }\n            }\n            if ($j == $len) {\n                return $i;\n            }\n        }\n    }\n    return -1;\n}",
    "    my $len = length($str);\n    my $temp = $str.$str;\n    my $min_rotations = $len;\n    for(my $i=0; $i<$len; $i++) {\n        my $substr = substr($temp, $i, $len);\n        if($substr eq $str) {\n            $min_rotations = $i;\n            last;\n        }\n    }\n    return $min_rotations;\n}",
    "    my $len = length($str);\n    my $str_temp = $str . $str;\n    for(my $i = 1; $i < $len; $i++) {\n        if(substr($str_temp, $i, $len) eq $str) {\n            return $i;\n        }\n    }\n    return 0;\n}",
    "    my $len = length($str);\n    my $i = 0;\n    my $j = 1;\n    my $k = 0;\n    while ($i < $len and $j < $len and $k < $len) {\n        if (substr($str, $i + $k, 1) eq substr($str, $j + $k, 1)) {\n            $k++;\n        } else {\n            if (substr($str, $i + $k, 1) gt substr($str, $j + $k, 1)) {\n                $i = $i + $k + 1;\n            } else {\n                $j = $j + $k + 1;\n            }\n            if ($i == $j) {\n                $j++;\n            }\n            $k = 0;\n        }\n    }\n    return min($i, $j);\n}",
    "    my $len = length($str);\n    my $count = 0;\n    for (my $i = 0; $i < $len; $i++) {\n        if (substr($str, $i, 1) eq substr($str, 0, 1)) {\n            my $j = 0;\n            while ($j < $len) {\n                if (substr($str, $i, 1) ne substr($str, $j, 1)) {\n                    last;\n                }\n                $i = ($i + 1) % $len;\n                $j++;\n            }\n            if ($j == $len) {\n                return $count;\n            }\n        }\n        $count++;\n    }\n    return $count;\n}",
    "    my $len = length($str);\n    my $str_temp = $str . $str;\n    my $i = 0;\n    my $j = 1;\n    while ($i < $len && $j < $len) {\n        my $k = 0;\n        while ($k < $len) {\n            if (substr($str_temp, $i + $k, 1) ne substr($str_temp, $j + $k, 1)) {\n                last;\n            }\n            $k++;\n        }\n        if ($k == $len) {\n            return $i;\n        }\n        if (substr($str_temp, $i + $k, 1) gt substr($str_temp, $j + $k, 1)) {\n            $i = $i + $k + 1;\n            if ($i <= $j) {\n                $i = $j + 1;\n            }\n        } else {\n            $j = $j + $k + 1;\n            if ($j <= $i) {\n                $j = $i + 1;\n            }\n        }\n    }\n    return $i;\n}",
    "    my $len = length($str);\n    my $temp = $str . $str;\n    my $i = 0;\n    my $j = 1;\n    while ($i < $len && $j < $len) {\n        my $k = 0;\n        while ($k < $len) {\n            if (substr($temp, $i + $k, 1) ne substr($temp, $j + $k, 1)) {\n                last;\n            }\n            $k++;\n        }\n        if ($k == $len) {\n            return $i;\n        }\n        if (substr($temp, $i + $k, 1) lt substr($temp, $j + $k, 1)) {\n            $i = $i + $k + 1;\n            if ($i <= $j) {\n                $i = $j + 1;\n            }\n        } else {\n            $j = $j + $k + 1;\n            if ($j <= $i) {\n                $j = $i + 1;\n            }\n        }\n    }\n    return $i < $len ? $i : $j;\n}",
    "    my $len = length($str);\n    my $str1 = $str . $str;\n    my $min = $len;\n    for(my $i = 0; $i < $len; $i++) {\n        my $temp = substr($str1, $i, $len);\n        if($temp eq $str) {\n            $min = $i;\n            last;\n        }\n    }\n    return $min;\n}",
    "    my $len = length($str);\n    my $temp = $str . $str;\n    for (my $i = 1; $i < $len; $i++) {\n        if ($str eq substr($temp, $i, $len)) {\n            return $i;\n        }\n    }\n    return 0;\n}"
  ]
}