{
  "name": "mbpp_58_opposite_Signs",
  "language": "pl",
  "prompt": "# Write a plthon function to check whether the given two integers have opposite sign or not.\nsub opposite_Signs {\n    my($x, $y) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_58_opposite_Signs.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&opposite_Signs;\n        if(eq_deeply($candidate->(1, -2),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-10, -10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-2, 2),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    return (($x ^ $y) < 0);\n}",
    "    return (($x ^ $y) < 0);\n}",
    "    if (($x ^ $y) < 0) {\n        return 1;\n    }\n    else {\n        return 0;\n    }\n}",
    "    if (($x ^ $y) < 0) {\n        return 1;\n    }\n    else {\n        return 0;\n    }\n}",
    "    return (($x ^ $y) < 0);\n}",
    "    return (($x ^ $y) < 0);\n}",
    "    return (($x ^ $y) < 0);\n}",
    "    if (($x ^ $y) < 0) {\n        return 1;\n    }\n    else {\n        return 0;\n    }\n}",
    "    if (($x ^ $y) < 0) {\n        return 1;\n    }\n    else {\n        return 0;\n    }\n}",
    "    if (($x ^ $y) < 0) {\n        return 1;\n    } else {\n        return 0;\n    }\n}",
    "    if (($x ^ $y) < 0) {\n        return 1;\n    }\n    else {\n        return 0;\n    }\n}",
    "    return (($x ^ $y) < 0);\n}",
    "    return (($x ^ $y) < 0);\n}",
    "    if (($x ^ $y) < 0) {\n        print \"Signs are opposite\\n\";\n    }\n    else {\n        print \"Signs are not opposite\\n\";\n    }\n}",
    "    if (($x < 0 && $y > 0) || ($x > 0 && $y < 0)) {\n        return 1;\n    } else {\n        return 0;\n    }\n}",
    "    return (($x ^ $y) < 0);\n}",
    "    return (($x ^ $y) < 0);\n}",
    "    if (($x ^ $y) < 0) {\n        return 1;\n    } else {\n        return 0;\n    }\n}",
    "    if ($x * $y < 0) {\n        return 1;\n    } else {\n        return 0;\n    }\n}",
    "    if (($x ^ $y) < 0) {\n        return 1;\n    }\n    else {\n        return 0;\n    }\n}"
  ]
}