{
  "name": "mbpp_730_consecutive_duplicates",
  "language": "pl",
  "prompt": "# Write a function to remove consecutive duplicates of a given array.\nsub consecutive_duplicates {\n    my($nums) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_730_consecutive_duplicates.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&consecutive_duplicates;\n        if(eq_deeply($candidate->([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[10, 15, 19, 18, 17, 26, 17, 18, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[\"a\", \"b\", \"c\", \"d\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]),[\"a\", \"b\", \"c\", \"d\", \"a\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        if (!defined($prev) || $num != $prev) {\n            push @result, $num;\n        }\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        if ($num != $prev) {\n            push @result, $num;\n        }\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        if (!defined($prev) || $num != $prev) {\n            push @result, $num;\n        }\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        if ($num != $prev) {\n            push @result, $num;\n        }\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        if ($num != $prev) {\n            push @result, $num;\n            $prev = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my $i = 0;\n    my $j = 1;\n    while ($j < scalar @$nums) {\n        if ($nums->[$i] == $nums->[$j]) {\n            $j++;\n        }\n        else {\n            $i++;\n            $nums->[$i] = $nums->[$j];\n            $j++;\n        }\n    }\n    splice @$nums, $i + 1;\n    return $nums;\n}",
    "    my $i = 0;\n    my $j = 0;\n    while ($i < scalar(@$nums)) {\n        if ($i == 0) {\n            $nums->[$j] = $nums->[$i];\n            $i++;\n            $j++;\n        }\n        elsif ($nums->[$i] != $nums->[$i-1]) {\n            $nums->[$j] = $nums->[$i];\n            $i++;\n            $j++;\n        }\n        else {\n            $i++;\n        }\n    }\n    return $j;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        push @result, $num if $num ne $prev;\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my $i = 0;\n    my $j = 0;\n    while ($i < scalar(@$nums)) {\n        if ($i == 0 || $nums->[$i] != $nums->[$i-1]) {\n            $nums->[$j] = $nums->[$i];\n            $j++;\n        }\n        $i++;\n    }\n    splice(@$nums, $j);\n}",
    "    my @result;\n    my $prev = undef;\n    foreach my $num (@$nums) {\n        if ($num != $prev) {\n            push @result, $num;\n            $prev = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        if ($num != $prev) {\n            push @result, $num;\n        }\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $last = undef;\n    for my $num (@$nums) {\n        if ($num != $last) {\n            push @result, $num;\n            $last = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my @result = ();\n    my $prev = undef;\n    foreach my $num (@$nums) {\n        if (!defined($prev) || $num != $prev) {\n            push @result, $num;\n        }\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my $i = 0;\n    my $j = 1;\n    while ($j < @$nums) {\n        if ($nums->[$i] == $nums->[$j]) {\n            $j++;\n        } else {\n            $i++;\n            $nums->[$i] = $nums->[$j];\n            $j++;\n        }\n    }\n    return $i + 1;\n}",
    "    my @result = ();\n    my $prev = undef;\n    for my $num (@$nums) {\n        if (!defined($prev) || $num != $prev) {\n            push @result, $num;\n        }\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my @result = ();\n    my $prev = undef;\n    for my $num (@$nums) {\n        if (!defined($prev) || $num != $prev) {\n            push @result, $num;\n            $prev = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $last = undef;\n    for my $n (@$nums) {\n        if (!defined($last) || $last != $n) {\n            push @result, $n;\n            $last = $n;\n        }\n    }\n    return \\@result;\n}",
    "    my @result = ();\n    my $prev = undef;\n    for my $num (@$nums) {\n        if ($num != $prev) {\n            push @result, $num;\n            $prev = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my $i = 0;\n    my $j = 1;\n    while ($j < @$nums) {\n        if ($nums->[$i] == $nums->[$j]) {\n            $j++;\n        } else {\n            $i++;\n            $nums->[$i] = $nums->[$j];\n            $j++;\n        }\n    }\n    splice @$nums, $i + 1;\n    return $nums;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        if ($num != $prev) {\n            push @result, $num;\n            $prev = $num;\n        }\n    }\n    return \\@result;\n}"
  ]
}