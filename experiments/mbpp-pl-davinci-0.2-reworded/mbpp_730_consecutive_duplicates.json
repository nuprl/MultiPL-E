{
  "name": "mbpp_730_consecutive_duplicates",
  "language": "pl",
  "prompt": "# Write a function to remove consecutive duplicates of a given array.\nsub consecutive_duplicates {\n    my($nums) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_730_consecutive_duplicates.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&consecutive_duplicates;\n        if(eq_deeply($candidate->([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[10, 15, 19, 18, 17, 26, 17, 18, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[\"a\", \"b\", \"c\", \"d\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]),[\"a\", \"b\", \"c\", \"d\", \"a\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        if (!defined($prev) || $num != $prev) {\n            push @result, $num;\n        }\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        if ($num != $prev) {\n            push @result, $num;\n        }\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        if (!defined($prev) || $num != $prev) {\n            push @result, $num;\n        }\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        if ($num != $prev) {\n            push @result, $num;\n        }\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        if ($num != $prev) {\n            push @result, $num;\n            $prev = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my $i = 0;\n    my $j = 1;\n    while ($j < scalar @$nums) {\n        if ($nums->[$i] == $nums->[$j]) {\n            $j++;\n        }\n        else {\n            $i++;\n            $nums->[$i] = $nums->[$j];\n            $j++;\n        }\n    }\n    splice @$nums, $i + 1;\n    return $nums;\n}",
    "    my $i = 0;\n    my $j = 0;\n    while ($i < scalar(@$nums)) {\n        if ($i == 0) {\n            $nums->[$j] = $nums->[$i];\n            $i++;\n            $j++;\n        }\n        elsif ($nums->[$i] != $nums->[$i-1]) {\n            $nums->[$j] = $nums->[$i];\n            $i++;\n            $j++;\n        }\n        else {\n            $i++;\n        }\n    }\n    return $j;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        push @result, $num if $num ne $prev;\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my $i = 0;\n    my $j = 0;\n    while ($i < scalar(@$nums)) {\n        if ($i == 0 || $nums->[$i] != $nums->[$i-1]) {\n            $nums->[$j] = $nums->[$i];\n            $j++;\n        }\n        $i++;\n    }\n    splice(@$nums, $j);\n}",
    "    my @result;\n    my $prev = undef;\n    foreach my $num (@$nums) {\n        if ($num != $prev) {\n            push @result, $num;\n            $prev = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        if ($num != $prev) {\n            push @result, $num;\n        }\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $last = undef;\n    for my $num (@$nums) {\n        if ($num != $last) {\n            push @result, $num;\n            $last = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my @result = ();\n    my $prev = undef;\n    foreach my $num (@$nums) {\n        if (!defined($prev) || $num != $prev) {\n            push @result, $num;\n        }\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my $i = 0;\n    my $j = 1;\n    while ($j < @$nums) {\n        if ($nums->[$i] == $nums->[$j]) {\n            $j++;\n        } else {\n            $i++;\n            $nums->[$i] = $nums->[$j];\n            $j++;\n        }\n    }\n    return $i + 1;\n}",
    "    my @result = ();\n    my $prev = undef;\n    for my $num (@$nums) {\n        if (!defined($prev) || $num != $prev) {\n            push @result, $num;\n        }\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my @result = ();\n    my $prev = undef;\n    for my $num (@$nums) {\n        if (!defined($prev) || $num != $prev) {\n            push @result, $num;\n            $prev = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $last = undef;\n    for my $n (@$nums) {\n        if (!defined($last) || $last != $n) {\n            push @result, $n;\n            $last = $n;\n        }\n    }\n    return \\@result;\n}",
    "    my @result = ();\n    my $prev = undef;\n    for my $num (@$nums) {\n        if ($num != $prev) {\n            push @result, $num;\n            $prev = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my $i = 0;\n    my $j = 1;\n    while ($j < @$nums) {\n        if ($nums->[$i] == $nums->[$j]) {\n            $j++;\n        } else {\n            $i++;\n            $nums->[$i] = $nums->[$j];\n            $j++;\n        }\n    }\n    splice @$nums, $i + 1;\n    return $nums;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        if ($num != $prev) {\n            push @result, $num;\n            $prev = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0 .. $#$nums) {\n        push @result, $nums->[$i] if $i == 0 || $nums->[$i] != $nums->[$i-1];\n    }\n    return \\@result;\n}",
    "    my @result = ();\n    my $prev = undef;\n    for my $num (@$nums) {\n        if (!defined($prev) || $num != $prev) {\n            push @result, $num;\n        }\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        if ($num != $prev) {\n            push @result, $num;\n            $prev = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my @result = ();\n    my $prev = undef;\n    for my $num (@$nums) {\n        if (!defined($prev) || $prev != $num) {\n            push @result, $num;\n            $prev = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        if ($num != $prev) {\n            push @result, $num;\n            $prev = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        if ($num != $prev) {\n            push @result, $num;\n        }\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my $i = 0;\n    my $j = 1;\n    while ($j < @$nums) {\n        if ($nums->[$i] != $nums->[$j]) {\n            $i++;\n            $nums->[$i] = $nums->[$j];\n        }\n        $j++;\n    }\n    splice @$nums, $i + 1;\n}",
    "    my @result;\n    my $last;\n    for my $num (@$nums) {\n        push @result, $num unless defined $last && $last == $num;\n        $last = $num;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $last = undef;\n    for my $num (@$nums) {\n        if (defined $last && $num == $last) {\n            next;\n        }\n        push @result, $num;\n        $last = $num;\n    }\n    return \\@result;\n}",
    "    my $i = 0;\n    my $j = 1;\n    while ($j < @$nums) {\n        if ($nums->[$i] == $nums->[$j]) {\n            $j++;\n        } else {\n            $i++;\n            $nums->[$i] = $nums->[$j];\n            $j++;\n        }\n    }\n    splice @$nums, $i + 1;\n    return $nums;\n}",
    "    my $prev = undef;\n    my @result;\n    for my $num (@$nums) {\n        if ($num != $prev) {\n            push @result, $num;\n            $prev = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my $i = 0;\n    while ($i < scalar(@$nums) - 1) {\n        if ($nums->[$i] == $nums->[$i + 1]) {\n            splice(@$nums, $i, 1);\n        } else {\n            $i++;\n        }\n    }\n    return $nums;\n}",
    "    my $i = 0;\n    my $j = 1;\n    while ($j < @$nums) {\n        if ($nums->[$i] != $nums->[$j]) {\n            $i++;\n            $nums->[$i] = $nums->[$j];\n        }\n        $j++;\n    }\n    splice(@$nums, $i + 1);\n    return $nums;\n}",
    "    my @result;\n    my $last = undef;\n    for my $num (@$nums) {\n        push @result, $num if $num != $last;\n        $last = $num;\n    }\n    return \\@result;\n}",
    "    my $i = 0;\n    while ($i < @$nums) {\n        if ($i > 0 && $nums->[$i] == $nums->[$i-1]) {\n            splice(@$nums, $i, 1);\n        } else {\n            $i++;\n        }\n    }\n}",
    "    my @result = ();\n    my $prev = undef;\n    for my $num (@$nums) {\n        if ($num != $prev) {\n            push @result, $num;\n        }\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my @result = ();\n    my $prev = undef;\n    for my $num (@$nums) {\n        if ($num != $prev) {\n            push @result, $num;\n        }\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        push @result, $num if $num != $prev;\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my $i = 0;\n    my $j = 1;\n    while ($j < @$nums) {\n        if ($nums->[$i] == $nums->[$j]) {\n            $j++;\n        } else {\n            $i++;\n            $nums->[$i] = $nums->[$j];\n            $j++;\n        }\n    }\n    splice(@$nums, $i + 1);\n    return $nums;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        if ($num != $prev) {\n            push @result, $num;\n        }\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $prev = -1;\n    for my $num (@$nums) {\n        if ($num != $prev) {\n            push @result, $num;\n            $prev = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my @result = ();\n    my $prev = undef;\n    for my $num (@$nums) {\n        if (!defined $prev || $prev != $num) {\n            push @result, $num;\n        }\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $last = undef;\n    for my $num (@$nums) {\n        if ($num != $last) {\n            push @result, $num;\n            $last = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $n (@$nums) {\n        if ($n != $prev) {\n            push @result, $n;\n        }\n        $prev = $n;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $last = undef;\n    for my $num (@$nums) {\n        if (!defined($last) || $last != $num) {\n            push @result, $num;\n            $last = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $last = \"\";\n    for my $num (@$nums) {\n        if ($num ne $last) {\n            push @result, $num;\n            $last = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my $i = 0;\n    my $j = 0;\n    while ($i < scalar(@$nums)) {\n        $nums->[$j] = $nums->[$i];\n        $i++;\n        while ($i < scalar(@$nums) && $nums->[$i] == $nums->[$j]) {\n            $i++;\n        }\n        $j++;\n    }\n    splice(@$nums, $j);\n    return $nums;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        push @result, $num if $num != $prev;\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        push @result, $num unless defined $prev and $prev == $num;\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $last = undef;\n    for my $num (@$nums) {\n        if (!defined($last) || $num != $last) {\n            push @result, $num;\n            $last = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my @ret = ();\n    my $prev = undef;\n    for my $num (@$nums) {\n        push @ret, $num unless $num == $prev;\n        $prev = $num;\n    }\n    return \\@ret;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        if ($num != $prev) {\n            push @result, $num;\n            $prev = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $last = undef;\n    for my $num (@$nums) {\n        push @result, $num if $num != $last;\n        $last = $num;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        if ($num != $prev) {\n            push @result, $num;\n        }\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $last = undef;\n    for my $num (@$nums) {\n        push @result, $num if $num != $last;\n        $last = $num;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        if ($num != $prev) {\n            push @result, $num;\n            $prev = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my @result = ();\n    for my $num (@$nums) {\n        push @result, $num if !@result || $result[-1] != $num;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        push @result, $num if $num != $prev;\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $last = undef;\n    for my $num (@$nums) {\n        push @result, $num unless $num eq $last;\n        $last = $num;\n    }\n    return \\@result;\n}",
    "    my $prev = undef;\n    my @result;\n    for my $n (@$nums) {\n        push @result, $n if !defined($prev) || $n != $prev;\n        $prev = $n;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        if (!defined($prev) || $num != $prev) {\n            push @result, $num;\n        }\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my @result = ();\n    my $prev = undef;\n    for my $num (@$nums) {\n        if ($num != $prev) {\n            push @result, $num;\n            $prev = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my $prev = undef;\n    my @result;\n    for my $num (@$nums) {\n        if (!defined($prev) || $num != $prev) {\n            push @result, $num;\n        }\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my @result = ();\n    my $last = undef;\n    for my $num (@$nums) {\n        if (!defined($last) || $num != $last) {\n            push @result, $num;\n            $last = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my $i = 0;\n    my $j = 1;\n    my $len = scalar @$nums;\n    while ($j < $len) {\n        if ($nums->[$i] == $nums->[$j]) {\n            $j++;\n        } else {\n            $i++;\n            $nums->[$i] = $nums->[$j];\n            $j++;\n        }\n    }\n    splice @$nums, $i + 1;\n}",
    "    my @result;\n    my $last = -1;\n    for my $num (@$nums) {\n        push @result, $num if $num != $last;\n        $last = $num;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $last = undef;\n    for my $num (@$nums) {\n        push @result, $num unless $num eq $last;\n        $last = $num;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $last = undef;\n    for my $num (@$nums) {\n        push @result, $num if $num != $last;\n        $last = $num;\n    }\n    return \\@result;\n}",
    "    my @result = ();\n    my $last = undef;\n    for my $num (@$nums) {\n        if (!defined($last) || $num != $last) {\n            push @result, $num;\n            $last = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $last = undef;\n    for my $num (@$nums) {\n        if (!defined($last) || $last != $num) {\n            push @result, $num;\n        }\n        $last = $num;\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $i (0 .. $#$nums) {\n        push @result, $nums->[$i] unless $i > 0 && $nums->[$i] == $nums->[$i-1];\n    }\n    return \\@result;\n}",
    "    my $i = 0;\n    my $j = 1;\n    while ($j < @$nums) {\n        if ($nums->[$i] == $nums->[$j]) {\n            $j++;\n        } else {\n            $i++;\n            $nums->[$i] = $nums->[$j];\n            $j++;\n        }\n    }\n    splice @$nums, $i + 1;\n    return $nums;\n}",
    "    my $i = 0;\n    my $j = 1;\n    while ($j < @$nums) {\n        if ($nums->[$i] == $nums->[$j]) {\n            $j++;\n        } else {\n            $i++;\n            $nums->[$i] = $nums->[$j];\n            $j++;\n        }\n    }\n    splice @$nums, $i + 1;\n    return $nums;\n}",
    "    my @result;\n    my $last = undef;\n    for my $num (@$nums) {\n        push @result, $num if $num != $last;\n        $last = $num;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        push @result, $num if $num != $prev;\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $last = undef;\n    for my $num (@$nums) {\n        if ($last ne $num) {\n            push @result, $num;\n            $last = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my $i = 0;\n    my $j = 1;\n    while ($j < scalar(@$nums)) {\n        if ($nums->[$i] == $nums->[$j]) {\n            $j++;\n        } else {\n            $i++;\n            $nums->[$i] = $nums->[$j];\n            $j++;\n        }\n    }\n    splice(@$nums, $i + 1);\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        if ($num != $prev) {\n            push @result, $num;\n            $prev = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my $prev = undef;\n    my @result;\n    for my $num (@$nums) {\n        if(!defined($prev) || $num != $prev) {\n            push @result, $num;\n            $prev = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my @result = ();\n    my $prev = undef;\n    for my $num (@$nums) {\n        if (!defined($prev) || $num != $prev) {\n            push @result, $num;\n        }\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        if ($num != $prev) {\n            push @result, $num;\n            $prev = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $last = undef;\n    for my $num (@$nums) {\n        if (!defined $last || $num != $last) {\n            push @result, $num;\n            $last = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        if ($num != $prev) {\n            push @result, $num;\n        }\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $last_num = undef;\n    for my $num (@$nums) {\n        if (!defined($last_num) || $last_num != $num) {\n            push @result, $num;\n            $last_num = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my $i = 0;\n    my $j = 1;\n    while ($j < @$nums) {\n        if ($nums->[$i] != $nums->[$j]) {\n            $i++;\n            $nums->[$i] = $nums->[$j];\n        }\n        $j++;\n    }\n    splice @$nums, $i + 1;\n}",
    "    my @result;\n    my $last = undef;\n    foreach my $num (@$nums) {\n        push @result, $num if $num != $last;\n        $last = $num;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $last = undef;\n    for my $num (@$nums) {\n        if ($num != $last) {\n            push @result, $num;\n            $last = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my @result = ();\n    my $prev = undef;\n    foreach my $num (@$nums) {\n        if (!defined($prev) || $num != $prev) {\n            push(@result, $num);\n        }\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my $prev = undef;\n    my @result;\n    for my $num (@$nums) {\n        if ($num != $prev) {\n            push @result, $num;\n            $prev = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my $i = 0;\n    my $j = 1;\n    my $len = scalar @$nums;\n    while ($j < $len) {\n        if ($nums->[$i] == $nums->[$j]) {\n            $j++;\n        } else {\n            $i++;\n            $nums->[$i] = $nums->[$j];\n            $j++;\n        }\n    }\n    return $i + 1;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        if (!defined($prev) || $prev != $num) {\n            push @result, $num;\n        }\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my $i = 0;\n    my $j = 1;\n    while ($j < scalar(@$nums)) {\n        if ($nums->[$i] != $nums->[$j]) {\n            $i++;\n            $nums->[$i] = $nums->[$j];\n        }\n        $j++;\n    }\n    splice(@$nums, $i + 1);\n}",
    "    my $i = 0;\n    my $j = 1;\n    while ($j < @$nums) {\n        if ($nums->[$i] == $nums->[$j]) {\n            $j++;\n        } else {\n            $i++;\n            $nums->[$i] = $nums->[$j];\n            $j++;\n        }\n    }\n    splice(@$nums, $i + 1);\n    return $nums;\n}",
    "    my @result = ();\n    my $prev = undef;\n    for my $num (@$nums) {\n        if ($num != $prev) {\n            push @result, $num;\n        }\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my @result = ();\n    my $last = undef;\n    for my $num (@$nums) {\n        if (!defined($last) || $num != $last) {\n            push @result, $num;\n            $last = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $num (@$nums) {\n        push @result, $num if !@result || $result[-1] != $num;\n    }\n    return \\@result;\n}",
    "    my @result = ();\n    my $prev = undef;\n    for my $num (@$nums) {\n        if (!defined($prev) || $prev != $num) {\n            push @result, $num;\n            $prev = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $last = undef;\n    for my $num (@$nums) {\n        push @result, $num if $num ne $last;\n        $last = $num;\n    }\n    return \\@result;\n}",
    "    my $prev = undef;\n    my @result = ();\n    for my $num (@$nums) {\n        if ($num != $prev) {\n            push @result, $num;\n            $prev = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        if ($num != $prev) {\n            push @result, $num;\n        }\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my $i = 0;\n    my $j = 1;\n    while ($j < scalar(@$nums)) {\n        if ($nums->[$i] == $nums->[$j]) {\n            $j++;\n        } else {\n            $i++;\n            $nums->[$i] = $nums->[$j];\n            $j++;\n        }\n    }\n    splice(@$nums, $i+1);\n    return $nums;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        if ($num != $prev) {\n            push @result, $num;\n        }\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $last = undef;\n    for my $num (@$nums) {\n        push @result, $num if $num ne $last;\n        $last = $num;\n    }\n    return \\@result;\n}",
    "    my $i = 0;\n    my $j = 1;\n    while ($j < @$nums) {\n        if ($nums->[$i] != $nums->[$j]) {\n            $i++;\n            $nums->[$i] = $nums->[$j];\n        }\n        $j++;\n    }\n    splice @$nums, $i + 1;\n}",
    "    my @result = ();\n    my $prev = undef;\n    for my $num (@$nums) {\n        if (!defined($prev) || $prev != $num) {\n            push @result, $num;\n        }\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my $i = 0;\n    my $j = 1;\n    while ($j < @$nums) {\n        if ($nums->[$i] == $nums->[$j]) {\n            $j++;\n        } else {\n            $i++;\n            $nums->[$i] = $nums->[$j];\n            $j++;\n        }\n    }\n    splice @$nums, $i + 1;\n    return $nums;\n}",
    "    my @result;\n    my $last = undef;\n    for my $num (@$nums) {\n        if (!defined($last) || $last != $num) {\n            push @result, $num;\n        }\n        $last = $num;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $last = undef;\n    for my $num (@$nums) {\n        if ($num != $last) {\n            push @result, $num;\n        }\n        $last = $num;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        if ($num != $prev) {\n            push @result, $num;\n            $prev = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        if ($num != $prev) {\n            push @result, $num;\n            $prev = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        push @result, $num unless defined $prev and $prev == $num;\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my @result = ();\n    my $last = undef;\n    foreach my $num (@$nums) {\n        if (!defined($last) || $num != $last) {\n            push(@result, $num);\n            $last = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my $i = 0;\n    my $j = 1;\n    while ($j < @$nums) {\n        if ($nums->[$i] == $nums->[$j]) {\n            $j++;\n        } else {\n            $i++;\n            $nums->[$i] = $nums->[$j];\n            $j++;\n        }\n    }\n    splice(@$nums, $i+1);\n    return $nums;\n}",
    "    my @result = ();\n    my $last = undef;\n    for my $num (@$nums) {\n        if (!defined($last) || $last != $num) {\n            push @result, $num;\n            $last = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        if (!defined($prev) || $prev != $num) {\n            push @result, $num;\n        }\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my @result = ();\n    my $prev = undef;\n    for my $num (@$nums) {\n        if (!defined($prev) || $num != $prev) {\n            push @result, $num;\n            $prev = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my $i = 0;\n    my $j = 1;\n    while ($j < @$nums) {\n        if ($nums->[$i] == $nums->[$j]) {\n            $j++;\n        } else {\n            $i++;\n            $nums->[$i] = $nums->[$j];\n            $j++;\n        }\n    }\n    splice @$nums, $i + 1;\n}",
    "    my @result;\n    my $last = -1;\n    for my $num (@$nums) {\n        if ($num != $last) {\n            push @result, $num;\n            $last = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        if ($num != $prev) {\n            push @result, $num;\n            $prev = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my $i = 0;\n    my $j = 1;\n    while ($j < scalar(@$nums)) {\n        if ($nums->[$i] == $nums->[$j]) {\n            $j++;\n        } else {\n            $i++;\n            $nums->[$i] = $nums->[$j];\n            $j++;\n        }\n    }\n    splice(@$nums, $i + 1);\n    return $nums;\n}",
    "    my $i = 0;\n    my $j = 1;\n    while ($j < @$nums) {\n        if ($nums->[$i] == $nums->[$j]) {\n            $j++;\n        } else {\n            $i++;\n            $nums->[$i] = $nums->[$j];\n            $j++;\n        }\n    }\n    return $i + 1;\n}",
    "    my $i = 0;\n    my $j = 1;\n    while ($j < scalar @$nums) {\n        if ($nums->[$i] == $nums->[$j]) {\n            $j++;\n        } else {\n            $i++;\n            $nums->[$i] = $nums->[$j];\n            $j++;\n        }\n    }\n    splice @$nums, $i + 1;\n}",
    "    my $i = 0;\n    my $j = 0;\n    while ($i < scalar @$nums) {\n        if ($nums->[$i] != $nums->[$j]) {\n            $j++;\n            $nums->[$j] = $nums->[$i];\n        }\n        $i++;\n    }\n    splice @$nums, $j + 1;\n    return $nums;\n}",
    "    my @result;\n    my $last = undef;\n    for my $num (@$nums) {\n        if (!defined($last) || $last != $num) {\n            push @result, $num;\n        }\n        $last = $num;\n    }\n    return \\@result;\n}",
    "    my $i = 0;\n    my $j = 0;\n    while ($i < @$nums) {\n        if ($i == 0 || $nums->[$i] != $nums->[$i-1]) {\n            $nums->[$j] = $nums->[$i];\n            $j++;\n        }\n        $i++;\n    }\n    splice @$nums, $j;\n}",
    "    my $i = 0;\n    my $j = 1;\n    while ($j < @$nums) {\n        if ($nums->[$i] == $nums->[$j]) {\n            $j++;\n        } else {\n            $i++;\n            $nums->[$i] = $nums->[$j];\n            $j++;\n        }\n    }\n    return $i + 1;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        if ($num != $prev) {\n            push @result, $num;\n            $prev = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my $i = 0;\n    my $j = 1;\n    while ($j < @$nums) {\n        if ($nums->[$i] == $nums->[$j]) {\n            $j++;\n        } else {\n            $i++;\n            $nums->[$i] = $nums->[$j];\n            $j++;\n        }\n    }\n    return $i + 1;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        if ($num != $prev) {\n            push @result, $num;\n            $prev = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $last = undef;\n    for my $num (@$nums) {\n        push @result, $num if $num ne $last;\n        $last = $num;\n    }\n    return \\@result;\n}",
    "    my @result = ();\n    my $prev = undef;\n    for my $num (@$nums) {\n        if (!defined($prev) || $num != $prev) {\n            push @result, $num;\n        }\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my @result = ();\n    for my $i (0 .. $#$nums) {\n        push @result, $nums->[$i] if $i == 0 || $nums->[$i] != $nums->[$i - 1];\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        push @result, $num if !defined($prev) || $prev != $num;\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $last;\n    for my $num (@$nums) {\n        if (!defined($last) || $num != $last) {\n            push @result, $num;\n            $last = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my $prev = undef;\n    my @result;\n    for my $num (@$nums) {\n        push @result, $num if !defined $prev || $num != $prev;\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        if ($num != $prev) {\n            push @result, $num;\n        }\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my $result = [];\n    my $last = undef;\n    for my $num (@$nums) {\n        if (!defined($last) || $last != $num) {\n            push @$result, $num;\n        }\n        $last = $num;\n    }\n    return $result;\n}",
    "    my $i = 0;\n    my $j = 1;\n    while ($j < scalar(@$nums)) {\n        if ($nums->[$i] == $nums->[$j]) {\n            $j++;\n        } else {\n            $i++;\n            $nums->[$i] = $nums->[$j];\n            $j++;\n        }\n    }\n    splice(@$nums, $i+1);\n    return $nums;\n}",
    "    my @result = ();\n    my $prev = undef;\n    for my $num (@$nums) {\n        if (!defined($prev) || $num != $prev) {\n            push @result, $num;\n        }\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        push @result, $num unless $num eq $prev;\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $last = undef;\n    for my $num (@$nums) {\n        if ($num != $last) {\n            push @result, $num;\n            $last = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        push @result, $num if $num != $prev;\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        push @result, $num if $num != $prev;\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my @result = ();\n    my $prev = undef;\n    for my $n (@$nums) {\n        if ($n != $prev) {\n            push @result, $n;\n        }\n        $prev = $n;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        if($num != $prev) {\n            push @result, $num;\n            $prev = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        if ($num != $prev) {\n            push @result, $num;\n        }\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $last = undef;\n    for my $num (@$nums) {\n        if ($num != $last) {\n            push @result, $num;\n            $last = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my $i = 0;\n    while ($i < @$nums) {\n        if ($i > 0 && $nums->[$i] == $nums->[$i-1]) {\n            splice @$nums, $i, 1;\n        } else {\n            $i++;\n        }\n    }\n    return $nums;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        if (!defined($prev) || $num != $prev) {\n            push @result, $num;\n        }\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        if ($num != $prev) {\n            push @result, $num;\n            $prev = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $last;\n    for my $num (@$nums) {\n        push @result, $num unless $num eq $last;\n        $last = $num;\n    }\n    return \\@result;\n}",
    "    my @result = ();\n    my $prev = undef;\n    for my $num (@$nums) {\n        if ($num != $prev) {\n            push @result, $num;\n            $prev = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $prev = undef;\n    foreach my $num (@$nums) {\n        push @result, $num if $num ne $prev;\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        push @result, $num if $num != $prev;\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $last = undef;\n    for my $num (@$nums) {\n        push @result, $num if $num != $last;\n        $last = $num;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $last = undef;\n    for my $n (@$nums) {\n        if ($n != $last) {\n            push @result, $n;\n            $last = $n;\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $last = undef;\n    for my $n (@$nums) {\n        push @result, $n if !defined($last) || $last != $n;\n        $last = $n;\n    }\n    return \\@result;\n}",
    "    my @result = ();\n    for my $i (0 .. $#{$nums}) {\n        push @result, $nums->[$i] if $i == 0 || $nums->[$i] != $nums->[$i-1];\n    }\n    return \\@result;\n}",
    "    my $i = 0;\n    my $j = 0;\n    while ($i < scalar @$nums) {\n        $nums->[$j] = $nums->[$i];\n        $i++;\n        $j++;\n        while ($i < scalar @$nums && $nums->[$i] == $nums->[$i-1]) {\n            $i++;\n        }\n    }\n    splice @$nums, $j;\n    return $nums;\n}",
    "    my @result = ();\n    my $last = undef;\n    for my $num (@$nums) {\n        if ($last ne $num) {\n            push @result, $num;\n            $last = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my @result = ();\n    my $prev = undef;\n    for my $num (@$nums) {\n        if (!defined($prev) || $num != $prev) {\n            push @result, $num;\n        }\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "\n    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        if ($num != $prev) {\n            push @result, $num;\n            $prev = $num;\n        }\n    }",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        if ($num != $prev) {\n            push @result, $num;\n            $prev = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my @result = ();\n    my $prev = undef;\n    for my $num (@$nums) {\n        if (!defined($prev) || $num != $prev) {\n            push @result, $num;\n        }\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        if ($num != $prev) {\n            push @result, $num;\n        }\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $last = undef;\n    for my $num (@$nums) {\n        push @result, $num unless defined $last and $last eq $num;\n        $last = $num;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $last = undef;\n    for my $num (@$nums) {\n        if (!defined($last) || $last != $num) {\n            push @result, $num;\n            $last = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        push @result, $num if $num != $prev;\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $last = undef;\n    for my $num (@$nums) {\n        if ($num != $last) {\n            push @result, $num;\n            $last = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my @result = ();\n    my $last = undef;\n    for my $num (@$nums) {\n        if (!defined($last) || $num != $last) {\n            push @result, $num;\n        }\n        $last = $num;\n    }\n    return \\@result;\n}",
    "    my $i = 0;\n    my $j = 1;\n    while ($j < @$nums) {\n        if ($nums->[$i] == $nums->[$j]) {\n            $j++;\n        } else {\n            $i++;\n            $nums->[$i] = $nums->[$j];\n            $j++;\n        }\n    }\n    splice @$nums, $i + 1;\n}",
    "    my @result;\n    my $last = undef;\n    for my $num (@$nums) {\n        if (!defined($last) || $num != $last) {\n            push @result, $num;\n            $last = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my $i = 0;\n    while ($i < @$nums) {\n        if ($i > 0 && $nums->[$i] == $nums->[$i-1]) {\n            splice(@$nums, $i, 1);\n        } else {\n            $i++;\n        }\n    }\n    return $nums;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        if ($num != $prev) {\n            push @result, $num;\n            $prev = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my $i = 0;\n    my $j = 1;\n    while ($j < scalar @$nums) {\n        if ($nums->[$i] == $nums->[$j]) {\n            $j++;\n        } else {\n            $i++;\n            $nums->[$i] = $nums->[$j];\n            $j++;\n        }\n    }\n    splice(@$nums, $i + 1);\n    return $nums;\n}",
    "    my @result;\n    my $prev = -1;\n    for my $num (@$nums) {\n        if ($num != $prev) {\n            push @result, $num;\n        }\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my $i = 0;\n    my $j = 1;\n    my $len = scalar @$nums;\n    while ($j < $len) {\n        if ($nums->[$i] == $nums->[$j]) {\n            $j++;\n        } else {\n            $i++;\n            $nums->[$i] = $nums->[$j];\n            $j++;\n        }\n    }\n    return $i + 1;\n}",
    "    my $i = 0;\n    while ($i < @$nums) {\n        if ($i > 0 && $nums->[$i] == $nums->[$i-1]) {\n            splice @$nums, $i, 1;\n        } else {\n            $i++;\n        }\n    }\n}",
    "    my @result = ();\n    my $last = undef;\n    for my $num (@$nums) {\n        if (!defined($last) || $last ne $num) {\n            push @result, $num;\n            $last = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my $i = 0;\n    my $j = 1;\n    my $len = scalar(@$nums);\n    while ($j < $len) {\n        if ($nums->[$i] == $nums->[$j]) {\n            $j++;\n        } else {\n            $i++;\n            $nums->[$i] = $nums->[$j];\n            $j++;\n        }\n    }\n    return $i + 1;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        if ($num != $prev) {\n            push @result, $num;\n        }\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        if ($num != $prev) {\n            push @result, $num;\n        }\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        push @result, $num unless $num eq $prev;\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my $i = 0;\n    while ($i < @$nums) {\n        if ($i > 0 && $nums->[$i] == $nums->[$i-1]) {\n            splice(@$nums, $i, 1);\n        } else {\n            $i++;\n        }\n    }\n    return $nums;\n}",
    "    my @result;\n    my $last = undef;\n    foreach my $num (@$nums) {\n        if (!defined($last) || $num != $last) {\n            push @result, $num;\n            $last = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $last;\n    for my $num (@$nums) {\n        if (!defined($last) || $num != $last) {\n            push @result, $num;\n            $last = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        if ($num != $prev) {\n            push @result, $num;\n        }\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        if ($num != $prev) {\n            push @result, $num;\n            $prev = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my $prev = undef;\n    my @result = ();\n    for my $num (@$nums) {\n        if ($num != $prev) {\n            push @result, $num;\n        }\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my $i = 0;\n    my $j = 0;\n    my $len = scalar(@$nums);\n    while ($i < $len) {\n        $nums->[$j] = $nums->[$i];\n        $i++;\n        $j++;\n        while ($i < $len && $nums->[$i] == $nums->[$i - 1]) {\n            $i++;\n        }\n    }\n    splice(@$nums, $j);\n}",
    "    my $i = 0;\n    my $j = 1;\n    while ($j < @$nums) {\n        if ($nums->[$i] != $nums->[$j]) {\n            $i++;\n            $nums->[$i] = $nums->[$j];\n        }\n        $j++;\n    }\n    splice @$nums, $i + 1;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        if ($num != $prev) {\n            push @result, $num;\n            $prev = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my $i = 0;\n    my $j = 1;\n    while ($j < scalar @$nums) {\n        if ($nums->[$i] == $nums->[$j]) {\n            $j++;\n        } else {\n            $i++;\n            $nums->[$i] = $nums->[$j];\n            $j++;\n        }\n    }\n    splice(@$nums, $i + 1);\n    return $nums;\n}",
    "    my @new_nums = ();\n    my $prev = undef;\n    for my $num (@$nums) {\n        if ($num != $prev) {\n            push @new_nums, $num;\n        }\n        $prev = $num;\n    }\n    return \\@new_nums;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        push @result, $num unless defined $prev and $prev == $num;\n        $prev = $num;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $last = undef;\n    for my $num (@$nums) {\n        if ($num != $last) {\n            push @result, $num;\n            $last = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my $i = 0;\n    my $j = 1;\n    while ($j < scalar(@$nums)) {\n        if ($nums->[$i] == $nums->[$j]) {\n            $j++;\n        } else {\n            $i++;\n            $nums->[$i] = $nums->[$j];\n            $j++;\n        }\n    }\n    splice(@$nums, $i + 1);\n}",
    "    my $i = 0;\n    my $j = 1;\n    while ($j < @$nums) {\n        if ($nums->[$i] != $nums->[$j]) {\n            $i++;\n            $nums->[$i] = $nums->[$j];\n        }\n        $j++;\n    }\n    splice @$nums, $i + 1;\n    return $nums;\n}",
    "    my @result = ();\n    my $last = undef;\n    for my $num (@$nums) {\n        if (!defined($last) || $num != $last) {\n            push @result, $num;\n            $last = $num;\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $prev = undef;\n    for my $num (@$nums) {\n        push @result, $num unless $num eq $prev;\n        $prev = $num;\n    }\n    return \\@result;\n}"
  ]
}