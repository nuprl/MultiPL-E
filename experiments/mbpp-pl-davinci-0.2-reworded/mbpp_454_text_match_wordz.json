{
  "name": "mbpp_454_text_match_wordz",
  "language": "pl",
  "prompt": "# Write a function that matches a word containing 'z'.\nsub text_match_wordz {\n    my($text) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_454_text_match_wordz.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&text_match_wordz;\n        if(eq_deeply($candidate->(\"pythonz.\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xyz.\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"  lang  .\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    if ($text =~ /\\bz\\w+\\b/) {\n        return 1;\n    } else {\n        return 0;\n    }\n}",
    "    return $text =~ /\\bz\\w+\\b/;\n}",
    "    if ($text =~ /\\bz\\w+\\b/) {\n        return $&;\n    }\n    else {\n        return undef;\n    }\n}",
    "    return $text =~ /\\bz\\w+\\b/;\n}",
    "    return $text =~ /\\w*z\\w*/;\n}",
    "    return $text =~ /\\bz\\w*\\b/;\n}",
    "    if ($text =~ /\\bz\\w+\\b/) {\n        return 1;\n    }\n    else {\n        return 0;\n    }\n}",
    "    return $text =~ /\\b\\w*z\\w*\\b/;\n}",
    "    if ($text =~ /\\bz\\w+\\b/) {\n        return 1;\n    } else {\n        return 0;\n    }\n}",
    "    return $text =~ /\\bz\\w+\\b/;\n}",
    "    return $text =~ /\\bz\\w+\\b/;\n}",
    "    return $text =~ /\\bz\\w+\\b/;\n}",
    "    return $text =~ /\\b\\w*z\\w*\\b/;\n}",
    "    return $text =~ /\\bz\\w+\\b/;\n}",
    "    return $text =~ /\\bz\\w+\\b/;\n}",
    "    return $text =~ /\\bz\\w+\\b/;\n}",
    "    return $text =~ /\\bz\\w+\\b/;\n}",
    "    if ($text =~ /\\bz\\w+\\b/) {\n        return 1;\n    }\n    else {\n        return 0;\n    }\n}",
    "    if ($text =~ /\\w*z\\w*/) {\n        return $&;\n    } else {\n        return;\n    }\n}",
    "    if ($text =~ /\\bz\\w+\\b/) {\n        return $&;\n    } else {\n        return undef;\n    }\n}"
  ]
}