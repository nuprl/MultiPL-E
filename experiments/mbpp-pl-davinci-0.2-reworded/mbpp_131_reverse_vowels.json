{
  "name": "mbpp_131_reverse_vowels",
  "language": "pl",
  "prompt": "# Write a plthon function to reverse only the vowels of a given string (where y is not a vowel).\nsub reverse_vowels {\n    my($str1) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_131_reverse_vowels.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&reverse_vowels;\n        if(eq_deeply($candidate->(\"Python\"),\"Python\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"USA\"),\"ASU\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ab\"),\"ab\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @vowels = $str1 =~ /[aeiou]/g;\n    my $str2 = $str1;\n    $str2 =~ s/[aeiou]/@vowels.pop()/ge;\n    return $str2;\n}",
    "    my @vowels = ($str1 =~ /[aeiou]/gi);\n    my $vowels = join('', @vowels);\n    my $rev_vowels = reverse($vowels);\n    $str1 =~ s/[aeiou]/$rev_vowels/gi;\n    return $str1;\n}",
    "    my @vowels = $str1 =~ /[aeiou]/gi;\n    my $vowels = join('', @vowels);\n    my $reverse = reverse $vowels;\n    $str1 =~ s/[aeiou]/$reverse/gi;\n    return $str1;\n}",
    "    my @str = split //, $str1;\n    my @vowels = grep { /[aeiou]/i } @str;\n    my $vowels = join '', reverse @vowels;\n    my $i = 0;\n    for my $c (@str) {\n        if ($c =~ /[aeiou]/i) {\n            $str[$i] = substr $vowels, 0, 1, '';\n        }\n        $i++;\n    }\n    return join '', @str;\n}",
    "    my @vowels = ($str1 =~ /[aeiou]/g);\n    my $rev_vowels = join('', reverse(@vowels));\n    $str1 =~ s/[aeiou]/$rev_vowels/g;\n    return $str1;\n}",
    "    my @vowels = ($str1 =~ /[aeiou]/gi);\n    my $vowels = join(\"\", @vowels);\n    $str1 =~ s/[aeiou]/$vowels/gi;\n    return $str1;\n}",
    "    my @vowels = ($str1 =~ /[aeiou]/gi);\n    my $vowels = join('', @vowels);\n    $str1 =~ s/[aeiou]/$vowels/gi;\n    return $str1;\n}",
    "    my @str = split //, $str1;\n    my @vowels = grep {/[aeiou]/} @str;\n    my $vowels = join '', reverse @vowels;\n    $str1 =~ s/[aeiou]/$vowels/ge;\n    return $str1;\n}",
    "    my @vowels = $str1 =~ /[aeiou]/gi;\n    my $str2 = $str1;\n    $str2 =~ s/[aeiou]/@vowels/gei;\n    return $str2;\n}",
    "    my @str = split //, $str1;\n    my @vowels = grep { /[aeiou]/i } @str;\n    my $i = 0;\n    for (@str) {\n        $_ = pop @vowels if /[aeiou]/i;\n    }\n    return join '', @str;\n}",
    "    my @str1 = split //, $str1;\n    my @vowels = ();\n    my @vowels_index = ();\n    my $i = 0;\n    foreach my $char (@str1) {\n        if ($char =~ /[aeiou]/i) {\n            push @vowels, $char;\n            push @vowels_index, $i;\n        }\n        $i++;\n    }\n    my $j = 0;\n    foreach my $index (@vowels_index) {\n        $str1[$index] = $vowels[$#vowels - $j];\n        $j++;\n    }\n    return join '', @str1;\n}",
    "    my @str1 = split(//,$str1);\n    my @vowels = ('a','e','i','o','u');\n    my @vowels_pos = ();\n    my @vowels_rev = ();\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $temp = 0;\n    my $str2 = '';\n    for ($i = 0; $i < scalar(@str1); $i++) {\n        for ($j = 0; $j < scalar(@vowels); $j++) {\n            if ($str1[$i] eq $vowels[$j]) {\n                $vowels_pos[$k] = $i;\n                $vowels_rev[$k] = $str1[$i];\n                $k++;\n            }\n        }\n    }\n    for ($i = 0; $i < scalar(@vowels_rev); $i++) {\n        for ($j = $i+1; $j < scalar(@vowels_rev); $j++) {\n            if ($vowels_rev[$i] gt $vowels_rev[$j]) {\n                $temp = $vowels_rev[$i];\n                $vowels_rev[$i] = $vowels_rev[$j];\n                $vowels_rev[$j] = $temp;\n            }\n        }\n    }\n    for ($i = 0; $i < scalar(@str1); $i++) {\n        if ($i == $vowels_pos[$l]) {\n            $str2 = $str2.$vowels_rev[$l];\n            $l++;\n        }\n        else {\n            $str2 = $str2.$str1[$i];\n        }\n    }\n    return $str2;\n}",
    "    my @str1 = split('', $str1);\n    my @vowels = ();\n    my @vowels_index = ();\n    my $i = 0;\n    foreach my $char (@str1) {\n        if ($char =~ /[aeiou]/i) {\n            push @vowels, $char;\n            push @vowels_index, $i;\n        }\n        $i++;\n    }\n    my $j = 0;\n    foreach my $index (@vowels_index) {\n        $str1[$index] = $vowels[$#vowels - $j];\n        $j++;\n    }\n    return join('', @str1);\n}",
    "    my @str = split(//,$str1);\n    my @vowels = ();\n    my @index = ();\n    for(my $i=0;$i<scalar(@str);$i++) {\n        if($str[$i] =~ /[aeiou]/i) {\n            push(@vowels,$str[$i]);\n            push(@index,$i);\n        }\n    }\n    my $j = scalar(@vowels)-1;\n    for(my $i=0;$i<scalar(@vowels);$i++) {\n        $str[$index[$i]] = $vowels[$j];\n        $j--;\n    }\n    return join(\"\",@str);\n}",
    "    my @str1 = split(//, $str1);\n    my @vowels = ();\n    my @index = ();\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $temp = \"\";\n    foreach $i (@str1) {\n        if ($i =~ /[aeiou]/i) {\n            $vowels[$j] = $i;\n            $index[$k] = $j;\n            $j++;\n            $k++;\n        }\n    }\n    $l = $k - 1;\n    foreach $i (@index) {\n        $str1[$i] = $vowels[$l];\n        $l--;\n    }\n    $temp = join(\"\", @str1);\n    return $temp;\n}",
    "    my $str2 = \"\";\n    my @vowels = ();\n    my @chars = split(//, $str1);\n    foreach my $char (@chars) {\n        if ($char =~ /[aeiou]/i) {\n            push(@vowels, $char);\n        }\n    }\n    foreach my $char (@chars) {\n        if ($char =~ /[aeiou]/i) {\n            $str2 .= pop(@vowels);\n        } else {\n            $str2 .= $char;\n        }\n    }\n    return $str2;\n}",
    "    my @str1 = split //, $str1;\n    my @vowels = grep { $_ =~ /[aeiou]/i } @str1;\n    my @new_str1 = map { $_ =~ /[aeiou]/i ? pop @vowels : $_ } @str1;\n    return join '', @new_str1;\n}",
    "    my @str = split //, $str1;\n    my @vowels = ();\n    my $i = 0;\n    foreach my $char (@str) {\n        if ($char =~ /[aeiou]/i) {\n            push @vowels, $char;\n        }\n    }\n    foreach my $char (@str) {\n        if ($char =~ /[aeiou]/i) {\n            $str[$i] = pop @vowels;\n        }\n        $i++;\n    }\n    return join '', @str;\n}",
    "    my @vowels = ($str1 =~ /[aeiou]/gi);\n    my $vowels = join('', @vowels);\n    $str1 =~ s/[aeiou]/$vowels/gi;\n    return $str1;\n}",
    "    my @vowels = ($str1 =~ /[aeiou]/gi);\n    my @chars = split(//, $str1);\n    for (my $i = 0; $i < scalar(@chars); $i++) {\n        if ($chars[$i] =~ /[aeiou]/i) {\n            $chars[$i] = pop(@vowels);\n        }\n    }\n    return join('', @chars);\n}"
  ]
}