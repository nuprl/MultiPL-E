{
  "name": "mbpp_809_check_smaller",
  "language": "pl",
  "prompt": "# Write a function to check if each element of second array is smaller than its corresponding element in the first array.\nsub check_smaller {\n    my($test_tup1, $test_tup2) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_809_check_smaller.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_smaller;\n        if(eq_deeply($candidate->([1, 2, 3], [2, 3, 4]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6], [3, 4, 5]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([11, 12, 13], [10, 11, 12]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @tup1 = @{$test_tup1};\n    my @tup2 = @{$test_tup2};\n    my $len = scalar(@tup1);\n    for (my $i = 0; $i < $len; $i++) {\n        if ($tup1[$i] < $tup2[$i]) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my $len = scalar(@$test_tup1);\n    for (my $i = 0; $i < $len; $i++) {\n        if ($test_tup1->[$i] < $test_tup2->[$i]) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my $result = 1;\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        if ($test_tup1->[$i] < $test_tup2->[$i]) {\n            $result = 0;\n            last;\n        }\n    }\n    return $result;\n}",
    "    my $result = 1;\n    for(my $i = 0; $i < @$test_tup1; $i++) {\n        if($test_tup1->[$i] <= $test_tup2->[$i]) {\n            $result = 0;\n            last;\n        }\n    }\n    return $result;\n}",
    "    my $len = scalar @$test_tup1;\n    for(my $i = 0; $i < $len; $i++) {\n        if($test_tup1->[$i] <= $test_tup2->[$i]) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my $test_tup1_size = scalar @$test_tup1;\n    my $test_tup2_size = scalar @$test_tup2;\n    if ($test_tup1_size != $test_tup2_size) {\n        return 0;\n    }\n    for (my $i = 0; $i < $test_tup1_size; $i++) {\n        if ($test_tup1->[$i] < $test_tup2->[$i]) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my $result = 1;\n    for (my $i = 0; $i < scalar(@$test_tup1); $i++) {\n        if ($test_tup1->[$i] < $test_tup2->[$i]) {\n            $result = 0;\n            last;\n        }\n    }\n    return $result;\n}",
    "    my @tup1 = @{$test_tup1};\n    my @tup2 = @{$test_tup2};\n    my $len = scalar(@tup1);\n    for (my $i = 0; $i < $len; $i++) {\n        if ($tup1[$i] <= $tup2[$i]) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my @tup1 = @{$test_tup1};\n    my @tup2 = @{$test_tup2};\n    my $len = @tup1;\n    for (my $i = 0; $i < $len; $i++) {\n        if ($tup1[$i] < $tup2[$i]) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my $i = 0;\n    foreach my $elem (@$test_tup2) {\n        if ($elem >= $test_tup1->[$i]) {\n            return 0;\n        }\n        $i++;\n    }\n    return 1;\n}",
    "    my $i = 0;\n    my $len = scalar(@$test_tup1);\n    for ($i = 0; $i < $len; $i++) {\n        if ($test_tup1->[$i] < $test_tup2->[$i]) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my @tup1 = @$test_tup1;\n    my @tup2 = @$test_tup2;\n    my $len = @tup1;\n    for (my $i = 0; $i < $len; $i++) {\n        if ($tup1[$i] < $tup2[$i]) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my @test_tup1 = @$test_tup1;\n    my @test_tup2 = @$test_tup2;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $aa = 0;\n    my $bb = 0;\n    my $cc = 0;\n    my $dd = 0;\n    my $ee = 0;\n    my $ff = 0;\n    my $gg = 0;\n    my $hh = 0;\n    my $ii = 0;\n    my $jj = 0;\n    my $kk = 0;\n    my $ll = 0;\n    my $mm = 0;\n    my $nn = 0;\n    my $oo = 0;\n    my $pp = 0;\n    my $qq = 0;\n    my $rr = 0;\n    my $ss = 0;\n    my $tt = 0;\n    my $uu = 0;\n    my $vv = 0;\n    my $ww = 0;\n    my $xx = 0;\n    my $yy = 0;\n    my $zz = 0;\n    my $aaa = 0;\n    my $bbb = 0;\n    my $ccc = 0;\n    my $ddd = 0;\n    my $eee = 0;\n    my $fff = 0;\n    my $ggg = 0;\n    my $hhh = 0;\n    my $iii = 0;\n    my $jjj = 0;\n    my $kkk = 0;\n    my $lll = 0;\n    my $mmm = 0;\n    my $nnn = 0;\n    my",
    "    my($i, $j);\n    for($i = 0; $i <= $#{$test_tup1}; $i++) {\n        for($j = 0; $j <= $#{$test_tup2}; $j++) {\n            if($test_tup1->[$i] < $test_tup2->[$j]) {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my @tup1 = @$test_tup1;\n    my @tup2 = @$test_tup2;\n    for (my $i = 0; $i < scalar(@tup1); $i++) {\n        if ($tup1[$i] < $tup2[$i]) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my @tup1 = @{$test_tup1};\n    my @tup2 = @{$test_tup2};\n    my $i = 0;\n    my $result = 1;\n    while ($i < scalar(@tup1)) {\n        if ($tup1[$i] < $tup2[$i]) {\n            $result = 0;\n            last;\n        }\n        $i++;\n    }\n    return $result;\n}",
    "    my($i, $j);\n    my($ret_val) = 1;\n    for($i = 0; $i < $test_tup1->[0]; $i++) {\n\tfor($j = 0; $j < $test_tup1->[1]; $j++) {\n\t    if($test_tup1->[2][$i][$j] < $test_tup2->[2][$i][$j]) {\n\t\t$ret_val = 0;\n\t\tlast;\n\t    }\n\t}\n    }\n    return $ret_val;\n}",
    "    my($i);\n    for ($i = 0; $i < @$test_tup1; $i++) {\n        if ($test_tup1->[$i] < $test_tup2->[$i]) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my @tup1 = @{$test_tup1};\n    my @tup2 = @{$test_tup2};\n    my $len = scalar(@tup1);\n    for (my $i = 0; $i < $len; $i++) {\n        if ($tup1[$i] < $tup2[$i]) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my @tup1 = @$test_tup1;\n    my @tup2 = @$test_tup2;\n    my $len = @tup1;\n    for (my $i = 0; $i < $len; $i++) {\n        if ($tup1[$i] < $tup2[$i]) {\n            return 0;\n        }\n    }\n    return 1;\n}"
  ]
}