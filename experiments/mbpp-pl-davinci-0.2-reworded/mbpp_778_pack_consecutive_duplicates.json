{
  "name": "mbpp_778_pack_consecutive_duplicates",
  "language": "pl",
  "prompt": "# Write a function to pack consecutive duplicates of a given array elements into subarrays.\nsub pack_consecutive_duplicates {\n    my($list1) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_778_pack_consecutive_duplicates.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&pack_consecutive_duplicates;\n        if(eq_deeply($candidate->([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @list2;\n    my $i = 0;\n    while ($i < scalar(@$list1)) {\n        my $j = $i + 1;\n        while ($j < scalar(@$list1) && $list1->[$i] == $list1->[$j]) {\n            $j++;\n        }\n        push @list2, [@$list1[$i..($j-1)]];\n        $i = $j;\n    }\n    return \\@list2;\n}",
    "    my @list2;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $count = 0;\n    my $flag = 0;\n    my $size = scalar @{$list1};\n    for($i = 0; $i < $size; $i++) {\n        $count = 0;\n        $flag = 0;\n        for($j = $i + 1; $j < $size; $j++) {\n            if($list1->[$i] == $list1->[$j]) {\n                $count++;\n                $flag = 1;\n            }\n            else {\n                last;\n            }\n        }\n        if($flag == 1) {\n            $list2[$k][0] = $list1->[$i];\n            $list2[$k][1] = $count;\n            $k++;\n            $i = $j - 1;\n        }\n        else {\n            $list2[$k][0] = $list1->[$i];\n            $list2[$k][1] = 0;\n            $k++;\n        }\n    }\n    return @list2;\n}",
    "    my @list2;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $flag = 0;\n    for($i = 0; $i < scalar @$list1; $i++) {\n        if($i == 0) {\n            $list2[$j][$k] = $list1->[$i];\n            $k++;\n        }\n        else {\n            if($list1->[$i] == $list1->[$i - 1]) {\n                $list2[$j][$k] = $list1->[$i];\n                $k++;\n            }\n            else {\n                $j++;\n                $k = 0;\n                $list2[$j][$k] = $list1->[$i];\n                $k++;\n            }\n        }\n    }\n    return @list2;\n}",
    "    my @list = @$list1;\n    my @result;\n    my $i = 0;\n    my $j = 0;\n    for ($i = 0; $i < scalar(@list); $i++) {\n        $result[$j] = [];\n        push @{$result[$j]}, $list[$i];\n        while ($i < scalar(@list) - 1 && $list[$i] == $list[$i + 1]) {\n            push @{$result[$j]}, $list[$i + 1];\n            $i++;\n        }\n        $j++;\n    }\n    return @result;\n}",
    "    my @list2 = ();\n    my $i = 0;\n    my $j = 0;\n    while ($i <= $#{$list1}) {\n        $j = $i + 1;\n        while ($j <= $#{$list1} && $list1->[$i] == $list1->[$j]) {\n            $j++;\n        }\n        push @list2, [@{$list1}[$i..($j-1)]];\n        $i = $j;\n    }\n    return @list2;\n}",
    "    my @list2 = ();\n    my $i = 0;\n    my $j = 0;\n    while ($i < scalar(@$list1)) {\n        my @list3 = ();\n        while ($i < scalar(@$list1) && $list1->[$i] == $list1->[$j]) {\n            push @list3, $list1->[$i];\n            $i++;\n        }\n        push @list2, \\@list3;\n        $j = $i;\n    }\n    return \\@list2;\n}",
    "    my @list2;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n    my $i1 = 0;\n    my $j1 = 0;\n    my $k1 = 0;\n    my $l1 = 0;\n    my $m1 = 0;\n    my $n1 = 0;\n    my $o1 = 0;\n    my $p1 = 0;\n    my $q1 = 0;\n    my $r1 = 0;\n    my $s1 = 0;\n    my $t1 = 0;\n    my $u1 = 0;\n    my $v1 = 0;\n    my $w1 = 0;\n    my $x1 = 0;\n    my $y1 = 0;\n    my $z1 = 0;\n    my $a1 = 0;\n    my $b1 = 0;\n    my $c1 = 0;\n    my $d1 = 0;\n    my $e1 = 0;\n    my $f1 = 0;\n    my $g1 = 0;\n    my $h1 = 0;\n    my $i2 = 0;\n    my $j2 = 0;\n    my $k2 = 0;\n    my $l2 = 0;\n    my $m2 = 0;\n    my $n2 = 0;\n    my $o2 = 0;",
    "    my @list2;\n    my @list3;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n    my $i1 = 0;\n    my $j1 = 0;\n    my $k1 = 0;\n    my $l1 = 0;\n    my $m1 = 0;\n    my $n1 = 0;\n    my $o1 = 0;\n    my $p1 = 0;\n    my $q1 = 0;\n    my $r1 = 0;\n    my $s1 = 0;\n    my $t1 = 0;\n    my $u1 = 0;\n    my $v1 = 0;\n    my $w1 = 0;\n    my $x1 = 0;\n    my $y1 = 0;\n    my $z1 = 0;\n    my $a1 = 0;\n    my $b1 = 0;\n    my $c1 = 0;\n    my $d1 = 0;\n    my $e1 = 0;\n    my $f1 = 0;\n    my $g1 = 0;\n    my $h1 = 0;\n    my $i2 = 0;\n    my $j2 = 0;\n    my $k2 = 0;\n    my $l2 = 0;\n    my $m2 = 0;\n    my $n2 = 0;\n   ",
    "    my @list2;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $flag = 0;\n    my $count = 0;\n    my $list1_size = scalar @$list1;\n    while($i < $list1_size) {\n        $j = $i + 1;\n        $count = 1;\n        while($j < $list1_size) {\n            if($list1->[$i] eq $list1->[$j]) {\n                $count++;\n            }\n            else {\n                last;\n            }\n            $j++;\n        }\n        $list2[$k] = [($list1->[$i]) x $count];\n        $k++;\n        $i = $j;\n    }\n    return @list2;\n}",
    "    my @list2;\n    my $i = 0;\n    my $j = 0;\n    while ($i < scalar @$list1) {\n        if ($i == 0) {\n            $list2[$j][0] = $list1->[$i];\n        }\n        elsif ($list1->[$i] == $list1->[$i - 1]) {\n            push @{$list2[$j]}, $list1->[$i];\n        }\n        else {\n            $j++;\n            $list2[$j][0] = $list1->[$i];\n        }\n        $i++;\n    }\n    return \\@list2;\n}",
    "    my @list2 = ();\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $n = scalar @$list1;\n    while($i < $n) {\n        $j = $i + 1;\n        while($j < $n && $list1->[$i] == $list1->[$j]) {\n            $j++;\n        }\n        $list2[$k] = [@$list1[$i..$j-1]];\n        $k++;\n        $i = $j;\n    }\n    return @list2;\n}",
    "    my @list1 = @$list1;\n    my @list2;\n    my $i = 0;\n    my $j = 0;\n    while ($i < scalar @list1) {\n        my $count = 0;\n        my $temp = $list1[$i];\n        while ($i < scalar @list1 && $list1[$i] == $temp) {\n            $count++;\n            $i++;\n        }\n        $list2[$j] = [$temp, $count];\n        $j++;\n    }\n    return \\@list2;\n}",
    "    my @list = @$list1;\n    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $count = 0;\n    my $flag = 0;\n    my $len = scalar @list;\n    for($i = 0; $i < $len; $i++) {\n        if($i == 0) {\n            $result[$j][$k] = $list[$i];\n            $k++;\n        }\n        else {\n            if($list[$i] == $list[$i-1]) {\n                $result[$j][$k] = $list[$i];\n                $k++;\n            }\n            else {\n                $j++;\n                $k = 0;\n                $result[$j][$k] = $list[$i];\n                $k++;\n            }\n        }\n    }\n    return @result;\n}",
    "    my @list = @$list1;\n    my @result;\n    my @sub_list;\n    my $prev = $list[0];\n    for my $i (0 .. $#list) {\n        if ($list[$i] == $prev) {\n            push @sub_list, $list[$i];\n        } else {\n            push @result, [@sub_list];\n            @sub_list = ();\n            push @sub_list, $list[$i];\n        }\n        $prev = $list[$i];\n    }\n    push @result, [@sub_list];\n    return \\@result;\n}",
    "    my @list2;\n    my $i = 0;\n    my $j = 0;\n    while ($i < scalar(@$list1)) {\n        if ($i == 0) {\n            $list2[$j][0] = $list1->[$i];\n            $i++;\n        }\n        elsif ($list1->[$i] == $list1->[$i-1]) {\n            $list2[$j][$i-$j] = $list1->[$i];\n            $i++;\n        }\n        else {\n            $j = $i;\n            $list2[$j][0] = $list1->[$i];\n            $i++;\n        }\n    }\n    return @list2;\n}",
    "    my @list2;\n    my $i = 0;\n    my $j = 0;\n    while ($i < scalar @$list1) {\n        my $count = 1;\n        while ($i < scalar @$list1 - 1 && $list1->[$i] == $list1->[$i + 1]) {\n            $i++;\n            $count++;\n        }\n        $list2[$j] = [($list1->[$i]) x $count];\n        $i++;\n        $j++;\n    }\n    return \\@list2;\n}",
    "    my @list2 = ();\n    my $i = 0;\n    my $j = 0;\n    while($i < scalar(@$list1)) {\n        my $count = 1;\n        while($i < scalar(@$list1)-1 && $list1->[$i] eq $list1->[$i+1]) {\n            $count++;\n            $i++;\n        }\n        $list2[$j] = [$list1->[$i], $count];\n        $i++;\n        $j++;\n    }\n    return @list2;\n}",
    "    my @list2;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n    my $i1 = 0;\n    my $j1 = 0;\n    my $k1 = 0;\n    my $l1 = 0;\n    my $m1 = 0;\n    my $n1 = 0;\n    my $o1 = 0;\n    my $p1 = 0;\n    my $q1 = 0;\n    my $r1 = 0;\n    my $s1 = 0;\n    my $t1 = 0;\n    my $u1 = 0;\n    my $v1 = 0;\n    my $w1 = 0;\n    my $x1 = 0;\n    my $y1 = 0;\n    my $z1 = 0;\n    my $a1 = 0;\n    my $b1 = 0;\n    my $c1 = 0;\n    my $d1 = 0;\n    my $e1 = 0;\n    my $f1 = 0;\n    my $g1 = 0;\n    my $h1 = 0;\n    my $i2 = 0;\n    my $j2 = 0;\n    my $k2 = 0;\n    my $l2 = 0;\n    my $m2 = 0;\n    my $n2 = 0;\n    my $o2 = 0;",
    "    my @list2;\n    my $i = 0;\n    my $j = 0;\n    while ($i < scalar(@$list1)) {\n        my $count = 0;\n        while ($i + $count < scalar(@$list1) && $list1->[$i] == $list1->[$i + $count]) {\n            $count++;\n        }\n        $list2[$j++] = [@$list1[$i..$i + $count - 1]];\n        $i += $count;\n    }\n    return \\@list2;\n}",
    "    my @list2 = ();\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $count = 0;\n    my $len = scalar(@$list1);\n    while($i < $len) {\n        $count = 0;\n        $j = $i;\n        while($j < $len && $list1->[$i] == $list1->[$j]) {\n            $count++;\n            $j++;\n        }\n        $list2[$k] = [$list1->[$i], $count];\n        $k++;\n        $i = $j;\n    }\n    return @list2;\n}"
  ]
}