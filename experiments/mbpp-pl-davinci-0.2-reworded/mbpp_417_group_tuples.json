{
  "name": "mbpp_417_group_tuples",
  "language": "pl",
  "prompt": "# Write a function to find common first element in given array of array.\nsub group_tuples {\n    my($Input) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_417_group_tuples.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&group_tuples;\n        if(eq_deeply($candidate->([[\"x\", \"y\"], [\"x\", \"z\"], [\"w\", \"t\"]]),[[\"x\", \"y\", \"z\"], [\"w\", \"t\"]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[\"a\", \"b\"], [\"a\", \"c\"], [\"d\", \"e\"]]),[[\"a\", \"b\", \"c\"], [\"d\", \"e\"]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[\"f\", \"g\"], [\"f\", \"g\"], [\"h\", \"i\"]]),[[\"f\", \"g\", \"g\"], [\"h\", \"i\"]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my %hash;\n    for my $i (@$Input) {\n        $hash{$i->[0]} = [@$i];\n    }\n    return [values %hash];\n}",
    "    my %hash;\n    my @result;\n    foreach my $i (@$Input) {\n        my $key = $i->[0];\n        push @{$hash{$key}}, $i;\n    }\n    foreach my $key (keys %hash) {\n        push @result, [$key, @{$hash{$key}}];\n    }\n    return \\@result;\n}",
    "    my %hash;\n    foreach my $tuple (@$Input) {\n        my $key = $tuple->[0];\n        push @{$hash{$key}}, $tuple;\n    }\n    return \\%hash;\n}",
    "    my %hash;\n    foreach my $tuple (@$Input) {\n        my $key = $tuple->[0];\n        $hash{$key} = [] unless exists $hash{$key};\n        push @{$hash{$key}}, $tuple;\n    }\n    return \\%hash;\n}",
    "    my @result;\n    my %hash;\n    foreach my $tuple (@$Input) {\n        my $first = $tuple->[0];\n        push @{$hash{$first}}, $tuple;\n    }\n    foreach my $first (keys %hash) {\n        push @result, [$first, $hash{$first}];\n    }\n    return \\@result;\n}",
    "    my @Output;\n    my $i = 0;\n    foreach my $tuple (@$Input) {\n        my $j = 0;\n        foreach my $element (@$tuple) {\n            $Output[$i][$j] = $element;\n            $j++;\n        }\n        $i++;\n    }\n    return \\@Output;\n}",
    "    my %hash;\n    foreach my $element (@$Input) {\n        my $key = $element->[0];\n        $hash{$key} = [] unless exists $hash{$key};\n        push @{$hash{$key}}, $element;\n    }\n    return \\%hash;\n}",
    "    my %hash;\n    foreach my $i (@$Input) {\n        $hash{$i->[0]} = [] unless exists $hash{$i->[0]};\n        push @{$hash{$i->[0]}}, $i;\n    }\n    return \\%hash;\n}",
    "    my @Output;\n    my %Hash;\n    foreach my $Tuple (@{$Input}) {\n        my $Key = join(\"\\t\", @{$Tuple});\n        if(exists $Hash{$Key}) {\n            push @{$Hash{$Key}}, $Tuple;\n        }\n        else {\n            $Hash{$Key} = [$Tuple];\n        }\n    }\n    foreach my $Key (keys %Hash) {\n        push @Output, $Hash{$Key};\n    }\n    return \\@Output;\n}",
    "    my %hash;\n    foreach my $tuple (@$Input) {\n        my $key = $tuple->[0];\n        if (exists $hash{$key}) {\n            push @{$hash{$key}}, $tuple;\n        } else {\n            $hash{$key} = [$tuple];\n        }\n    }\n    return \\%hash;\n}",
    "    my %hash;\n    foreach my $i (@$Input) {\n        my $key = $i->[0];\n        push @{$hash{$key}}, $i;\n    }\n    return \\%hash;\n}",
    "    my $Output = [];\n    my $First = [];\n    my $Second = [];\n    my $Third = [];\n    my $Fourth = [];\n    my $Fifth = [];\n    my $Sixth = [];\n    my $Seventh = [];\n    my $Eighth = [];\n    my $Ninth = [];\n    my $Tenth = [];\n    my $Eleventh = [];\n    my $Twelfth = [];\n    my $Thirteenth = [];\n    my $Fourteenth = [];\n    my $Fifteenth = [];\n    my $Sixteenth = [];\n    my $Seventeenth = [];\n    my $Eighteenth = [];\n    my $Nineteenth = [];\n    my $Twentieth = [];\n    my $Twentyfirst = [];\n    my $Twentysecond = [];\n    my $Twentythird = [];\n    my $Twentyfourth = [];\n    my $Twentyfifth = [];\n    my $Twentysixth = [];\n    my $Twentyseventh = [];\n    my $Twentyeighth = [];\n    my $Twentyninth = [];\n    my $Thirtieth = [];\n    my $Thirtyfirst = [];\n    my $Thirtysecond = [];\n    my $Thirtythird = [];\n    my $Thirtyfourth = [];\n    my $Thirtyfifth = [];\n    my $Thirtysixth = [];\n    my $Thirtyseventh = [];\n    my $Thirtyeighth = [];\n    my $Thirtyninth = [];\n    my $Fortieth = [];\n    my $Fortyfirst = [];\n    my $Fortysecond = [];\n    my $Fortythird = [];\n    my $Fortyfourth = [];\n    my $Fortyfifth = [];\n    my $Fortysixth = [];\n    my $Fortyseventh = [];\n    my $Fortyeighth = [];\n    my $Fortyninth = [];\n    my $Fiftieth = [];\n    my $Fiftyfirst = [];\n    my $Fiftysecond = [];\n    my $Fiftythird = [];\n    my $Fiftyfourth = [];\n    my $Fiftyfifth = [];\n    my $Fiftysixth = [];\n    my $Fiftyseventh = [];\n    my $Fiftyeighth = [];\n    my $Fiftyn",
    "    my %hash;\n    foreach my $tuple (@$Input) {\n        my $first_element = $tuple->[0];\n        push @{$hash{$first_element}}, $tuple;\n    }\n    return \\%hash;\n}",
    "    my @Output;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $aa = 0;\n    my $ab = 0;\n    my $ac = 0;\n    my $ad = 0;\n    my $ae = 0;\n    my $af = 0;\n    my $ag = 0;\n    my $ah = 0;\n    my $ai = 0;\n    my $aj = 0;\n    my $ak = 0;\n    my $al = 0;\n    my $am = 0;\n    my $an = 0;\n    my $ao = 0;\n    my $ap = 0;\n    my $aq = 0;\n    my $ar = 0;\n    my $as = 0;\n    my $at = 0;\n    my $au = 0;\n    my $av = 0;\n    my $aw = 0;\n    my $ax = 0;\n    my $ay = 0;\n    my $az = 0;\n    my $ba = 0;\n    my $bb = 0;\n    my $bc = 0;\n    my $bd = 0;\n    my $be = 0;\n    my $bf = 0;\n    my $bg = 0;\n    my $bh = 0;\n    my $bi = 0;\n    my $bj = 0;\n    my $bk = 0;\n    my $bl = 0;\n    my $bm = 0;\n    my $bn = 0;\n    my $bo = 0;\n    my $bp = 0;\n    my $bq = 0;\n    my $br = 0;\n    my $bs = 0;",
    "    my @Output;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $aa = 0;\n    my $ab = 0;\n    my $ac = 0;\n    my $ad = 0;\n    my $ae = 0;\n    my $af = 0;\n    my $ag = 0;\n    my $ah = 0;\n    my $ai = 0;\n    my $aj = 0;\n    my $ak = 0;\n    my $al = 0;\n    my $am = 0;\n    my $an = 0;\n    my $ao = 0;\n    my $ap = 0;\n    my $aq = 0;\n    my $ar = 0;\n    my $as = 0;\n    my $at = 0;\n    my $au = 0;\n    my $av = 0;\n    my $aw = 0;\n    my $ax = 0;\n    my $ay = 0;\n    my $az = 0;\n    my $ba = 0;\n    my $bb = 0;\n    my $bc = 0;\n    my $bd = 0;\n    my $be = 0;\n    my $bf = 0;\n    my $bg = 0;\n    my $bh = 0;\n    my $bi = 0;\n    my $bj = 0;\n    my $bk = 0;\n    my $bl = 0;\n    my $bm = 0;\n    my $bn = 0;\n    my $bo = 0;\n    my $bp = 0;\n    my $bq = 0;\n    my $br = 0;\n    my $bs = 0;",
    "    my %hash;\n    foreach my $i (@$Input) {\n        $hash{$i->[0]} = [] unless exists $hash{$i->[0]};\n        push @{$hash{$i->[0]}}, $i;\n    }\n    return \\%hash;\n}",
    "    my %hash;\n    foreach my $tuple (@$Input) {\n        my $first = $tuple->[0];\n        $hash{$first} = [] unless exists $hash{$first};\n        push @{$hash{$first}}, $tuple;\n    }\n    return \\%hash;\n}",
    "    my %hash;\n    foreach my $element (@{$Input}) {\n        $hash{$element->[0]} = [] unless exists $hash{$element->[0]};\n        push @{$hash{$element->[0]}}, $element->[1];\n    }\n    return \\%hash;\n}",
    "    my $Output = [];\n    my $first_elem = $Input->[0][0];\n    my $i = 0;\n    while ($i < scalar(@{$Input})) {\n        if ($Input->[$i][0] eq $first_elem) {\n            push @{$Output}, $Input->[$i];\n            $i++;\n        } else {\n            last;\n        }\n    }\n    return $Output;\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $flag = 0;\n    my $flag1 = 0;\n    my $flag2 = 0;\n    my $flag3 = 0;\n    my $flag4 = 0;\n    my $flag5 = 0;\n    my $flag6 = 0;\n    my $flag7 = 0;\n    my $flag8 = 0;\n    my $flag9 = 0;\n    my $flag10 = 0;\n    my $flag11 = 0;\n    my $flag12 = 0;\n    my $flag13 = 0;\n    my $flag14 = 0;\n    my $flag15 = 0;\n    my $flag16 = 0;\n    my $flag17 = 0;\n    my $flag18 = 0;\n    my $flag19 = 0;\n    my $flag20 = 0;\n    my $flag21 = 0;\n    my $flag22 = 0;\n    my $flag23 = 0;\n    my $flag24 = 0;\n    my $flag25 = 0;\n    my $flag26 = 0;\n    my $flag27 = 0;\n    my $flag28 = 0;\n    my $flag29 = 0;\n    my $flag30 = 0;\n    my $flag31 = 0;\n    my $flag32 = 0;\n    my $flag33 = 0;\n    my $flag34 = 0;\n    my $flag35 = 0;\n    my $flag36 = 0;\n    my $flag37 = 0;\n    my $flag38 = 0;\n    my $flag39 = 0;\n    my $flag40 = 0;\n    my $flag41 = 0;\n    my $flag42 = 0;\n    my $flag43 = 0;\n    my $flag44 = 0;\n    my $flag45 = 0;\n    my $flag46 = 0;\n    my $flag47 = 0;\n    my $flag48 = 0;\n    my $flag49 = 0;\n    my $flag50 = 0;\n    my $flag51 = 0;\n    my $flag52 = 0;\n    my $flag53"
  ]
}