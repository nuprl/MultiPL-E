{
  "name": "mbpp_284_check_element",
  "language": "pl",
  "prompt": "# Write a function that takes in an array and element and checks whether all items in the array are equal to the given element.\nsub check_element {\n    my($list, $element) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_284_check_element.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_element;\n        if(eq_deeply($candidate->([\"green\", \"orange\", \"black\", \"white\"], \"blue\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4], 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"green\", \"green\", \"green\", \"green\"], \"green\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $result = 1;\n    foreach my $item (@$list) {\n        if ($item != $element) {\n            $result = 0;\n            last;\n        }\n    }\n    return $result;\n}",
    "    my $all_equal = 1;\n    foreach my $item (@$list) {\n        if ($item != $element) {\n            $all_equal = 0;\n            last;\n        }\n    }\n    return $all_equal;\n}",
    "    my $result = 1;\n    foreach my $item (@$list) {\n        if ($item != $element) {\n            $result = 0;\n            last;\n        }\n    }\n    return $result;\n}",
    "    foreach my $item (@$list) {\n        return 0 unless $item eq $element;\n    }\n    return 1;\n}",
    "    foreach my $item (@$list) {\n        return 0 if $item != $element;\n    }\n    return 1;\n}",
    "    my $result = 1;\n    foreach my $item (@$list) {\n        if ($item != $element) {\n            $result = 0;\n            last;\n        }\n    }\n    return $result;\n}",
    "    my $result = 1;\n    foreach my $item (@$list) {\n        if ($item != $element) {\n            $result = 0;\n            last;\n        }\n    }\n    return $result;\n}",
    "    my $result = 1;\n    foreach my $item (@$list) {\n        if ($item != $element) {\n            $result = 0;\n            last;\n        }\n    }\n    return $result;\n}",
    "    foreach my $item (@$list) {\n        return 0 if $item != $element;\n    }\n    return 1;\n}",
    "    my $result = 1;\n    foreach my $item (@{$list}) {\n        if ($item != $element) {\n            $result = 0;\n            last;\n        }\n    }\n    return $result;\n}",
    "    my $result = 1;\n    foreach my $item (@$list) {\n        if ($item != $element) {\n            $result = 0;\n            last;\n        }\n    }\n    return $result;\n}",
    "    my $result = 1;\n    foreach my $item (@$list) {\n        if ($item != $element) {\n            $result = 0;\n            last;\n        }\n    }\n    return $result;\n}",
    "    my $result = 1;\n    foreach my $item (@$list) {\n        if ($item != $element) {\n            $result = 0;\n            last;\n        }\n    }\n    return $result;\n}",
    "    for my $item (@$list) {\n        return 0 if $item != $element;\n    }\n    return 1;\n}",
    "    my $result = 1;\n    foreach my $item (@$list) {\n        if ($item != $element) {\n            $result = 0;\n            last;\n        }\n    }\n    return $result;\n}",
    "    my $result = 1;\n    foreach my $item (@$list) {\n        if ($item != $element) {\n            $result = 0;\n            last;\n        }\n    }\n    return $result;\n}",
    "    my $result = 1;\n    foreach my $item (@$list) {\n        if ($item != $element) {\n            $result = 0;\n            last;\n        }\n    }\n    return $result;\n}",
    "    my $result = 1;\n    foreach my $item (@$list) {\n        if ($item != $element) {\n            $result = 0;\n            last;\n        }\n    }\n    return $result;\n}",
    "    my $result = 1;\n    foreach my $item (@$list) {\n        if ($item != $element) {\n            $result = 0;\n            last;\n        }\n    }\n    return $result;\n}",
    "    my $result = 1;\n    foreach my $item (@$list) {\n        if ($item != $element) {\n            $result = 0;\n            last;\n        }\n    }\n    return $result;\n}"
  ]
}