{
  "name": "mbpp_301_dict_depth",
  "language": "pl",
  "prompt": "# Write a function to find the depth of a hash.\nsub dict_depth {\n    my($d) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_301_dict_depth.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&dict_depth;\n        if(eq_deeply($candidate->({\"a\" => 1, \"b\" => {\"c\" => {\"d\" => {}}}}),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"a\" => 1, \"b\" => {\"c\" => \"python\"}}),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({1 => \"Sun\", 2 => {3 => {4 => \"Mon\"}}}),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $max = 0;\n    foreach my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            my $depth = dict_depth($v);\n            $max = $depth if $depth > $max;\n        }\n    }\n    return $max + 1;\n}",
    "    my($depth) = 0;\n    my($k, $v);\n    while (($k, $v) = each %$d) {\n\t$depth = dict_depth($v) if ref($v) eq 'HASH';\n    }\n    return $depth + 1;\n}",
    "    my $depth = 0;\n    my $max_depth = 0;\n    for my $k (keys %$d) {\n        if (ref $d->{$k} eq 'HASH') {\n            $depth = dict_depth($d->{$k});\n            $max_depth = $depth if $depth > $max_depth;\n        }\n    }\n    return $max_depth + 1;\n}",
    "    my $depth = 0;\n    my $max = 0;\n    foreach my $k (keys %$d) {\n        if (ref($d->{$k}) eq 'HASH') {\n            $depth = dict_depth($d->{$k});\n            $max = $depth if $depth > $max;\n        }\n    }\n    return $max + 1;\n}",
    "    my $depth = 0;\n    my @stack = ($d);\n    while (@stack) {\n        my $d = shift @stack;\n        if (ref $d eq 'HASH') {\n            $depth++;\n            push @stack, values %$d;\n        }\n    }\n    return $depth;\n}",
    "    my $depth = 0;\n    my @keys = keys %$d;\n    for my $k (@keys) {\n        my $v = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            my $d2 = dict_depth($v);\n            $depth = $d2 if $d2 > $depth;\n        }\n    }\n    return $depth + 1;\n}",
    "    my $depth = 1;\n    my $max = 0;\n    foreach my $key (keys %$d) {\n        if (ref($d->{$key}) eq 'HASH') {\n            $max = dict_depth($d->{$key});\n            $depth = $max + 1 if $max > $depth;\n        }\n    }\n    return $depth;\n}",
    "    my $depth = 1;\n    my @stack = ($d);\n    while (@stack) {\n        my $k = shift @stack;\n        if (ref($k) eq 'HASH') {\n            $depth++;\n            push @stack, values %$k;\n        }\n    }\n    return $depth;\n}",
    "    my $depth = 0;\n    my @keys = keys %$d;\n    for my $k (@keys) {\n        if (ref $d->{$k} eq 'HASH') {\n            my $d2 = dict_depth($d->{$k});\n            $depth = $d2 if $d2 > $depth;\n        }\n    }\n    return $depth + 1;\n}",
    "    my $depth = 1;\n    my $max_depth = 1;\n    while (my($k, $v) = each %$d) {\n        if (ref $v eq 'HASH') {\n            $depth += dict_depth($v);\n            $max_depth = $depth if $depth > $max_depth;\n        }\n    }\n    return $max_depth;\n}",
    "    my $depth = 0;\n    my $max_depth = 0;\n    my @keys = keys %$d;\n    foreach my $k (@keys) {\n        if (ref($d->{$k}) eq 'HASH') {\n            $depth = dict_depth($d->{$k}) + 1;\n            if ($depth > $max_depth) {\n                $max_depth = $depth;\n            }\n        }\n    }\n    return $max_depth;\n}",
    "    my $depth = 0;\n    my $key;\n    foreach $key (keys %$d) {\n        my $v = $d->{$key};\n        if (ref($v) eq 'HASH') {\n            my $d2 = dict_depth($v);\n            if ($d2 > $depth) {\n                $depth = $d2;\n            }\n        }\n    }\n    return $depth + 1;\n}",
    "    my $depth = 0;\n    my @keys = keys %$d;\n    for my $k (@keys) {\n        my $v = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            my $d2 = dict_depth($v);\n            $depth = $d2 if $d2 > $depth;\n        }\n    }\n    return $depth + 1;\n}",
    "    my $depth = 1;\n    my $max = 0;\n    foreach my $key (keys %$d) {\n        if (ref($d->{$key}) eq 'HASH') {\n            $max = dict_depth($d->{$key});\n            $depth = $max + 1 if $max >= $depth;\n        }\n    }\n    return $depth;\n}",
    "    my $depth = 0;\n    my $k;\n    foreach $k (keys %$d) {\n\tmy $d2 = $d->{$k};\n\tif (ref($d2) eq 'HASH') {\n\t    my $d3 = dict_depth($d2);\n\t    if ($d3 > $depth) {\n\t\t$depth = $d3;\n\t    }\n\t}\n    }\n    return $depth + 1;\n}",
    "    my $depth = 0;\n    my @stack = ($d);\n    while (@stack) {\n        my $d = shift @stack;\n        for my $k (keys %$d) {\n            if (ref $d->{$k} eq 'HASH') {\n                push @stack, $d->{$k};\n                $depth++;\n            }\n        }\n    }\n    return $depth;\n}",
    "    my($depth) = 0;\n    my($k, $v);\n    while (($k, $v) = each %$d) {\n        if (ref($v) eq 'HASH') {\n            $depth = max($depth, 1 + dict_depth($v));\n        }\n    }\n    return $depth;\n}",
    "    my $max = 0;\n    for my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref $v eq 'HASH') {\n            my $depth = dict_depth($v) + 1;\n            $max = $depth if $depth > $max;\n        }\n    }\n    return $max;\n}",
    "    my $depth = 0;\n    for my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            my $d = dict_depth($v);\n            $depth = $d if $d > $depth;\n        }\n    }\n    return $depth + 1;\n}",
    "    my $depth = 0;\n    my @keys = keys %$d;\n    for my $k (@keys) {\n        my $v = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            my $d2 = dict_depth($v);\n            $depth = $d2 if $d2 > $depth;\n        }\n    }\n    return $depth + 1;\n}",
    "    my($depth) = 0;\n    my($key, $value);\n    while (($key, $value) = each %$d) {\n\tif (ref($value) eq 'HASH') {\n\t    my($d) = dict_depth($value);\n\t    $depth = $d if $d > $depth;\n\t}\n    }\n    return $depth + 1;\n}",
    "    my $depth = 1;\n    for my $v (values %$d) {\n        if (ref $v eq 'HASH') {\n            my $d = dict_depth($v) + 1;\n            $depth = $d if $d > $depth;\n        }\n    }\n    return $depth;\n}",
    "    my($depth) = 0;\n    my($key);\n    foreach $key (keys %$d) {\n\tmy($d2) = $d->{$key};\n\tif (ref($d2) eq 'HASH') {\n\t    my($d3) = dict_depth($d2);\n\t    if ($d3 > $depth) {\n\t\t$depth = $d3;\n\t    }\n\t}\n    }\n    return $depth + 1;\n}",
    "    my $depth = 0;\n    for my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            my $d2 = dict_depth($v);\n            $depth = $d2 if $d2 > $depth;\n        }\n    }\n    return $depth + 1;\n}",
    "    my $depth = 1;\n    my $max = 0;\n    foreach my $key (keys %$d) {\n        if (ref($d->{$key}) eq 'HASH') {\n            $max = dict_depth($d->{$key});\n            $depth = $max + 1 if $max > $depth;\n        }\n    }\n    return $depth;\n}",
    "    my $depth = 0;\n    my $max_depth = 0;\n    my @keys = keys %$d;\n    foreach my $k (@keys) {\n        if (ref($d->{$k}) eq 'HASH') {\n            $depth = dict_depth($d->{$k});\n            if ($depth > $max_depth) {\n                $max_depth = $depth;\n            }\n        }\n    }\n    return $max_depth + 1;\n}",
    "    my $max = 0;\n    my $depth = 0;\n    my @stack = ($d);\n    while (@stack) {\n        my $e = pop @stack;\n        if (ref($e) eq 'HASH') {\n            $depth++;\n            push @stack, values %$e;\n        }\n        elsif (ref($e) eq 'ARRAY') {\n            push @stack, @$e;\n        }\n        else {\n            $max = $depth if $depth > $max;\n            $depth--;\n        }\n    }\n    return $max;\n}",
    "    my $depth = 0;\n    my @keys = keys %$d;\n    for my $key (@keys) {\n        my $val = $d->{$key};\n        if (ref($val) eq 'HASH') {\n            my $subdepth = dict_depth($val);\n            if ($subdepth > $depth) {\n                $depth = $subdepth;\n            }\n        }\n    }\n    return $depth + 1;\n}",
    "    my $depth = 0;\n    my @stack = ($d);\n    while (@stack) {\n        my $v = pop @stack;\n        if (ref $v eq 'HASH') {\n            push @stack, values %$v;\n        }\n        elsif (ref $v eq 'ARRAY') {\n            push @stack, @$v;\n        }\n        else {\n            $depth = $depth > $v ? $depth : $v;\n        }\n    }\n    return $depth;\n}",
    "    my $depth = 0;\n    my @queue = ($d);\n    while (@queue) {\n        my $h = shift @queue;\n        if (ref($h) eq 'HASH') {\n            $depth++;\n            push @queue, values %$h;\n        }\n    }\n    return $depth;\n}",
    "    my $depth = 0;\n    my $max = 0;\n    foreach my $k (keys %$d) {\n        if (ref($d->{$k}) eq 'HASH') {\n            $depth = dict_depth($d->{$k});\n            $max = $depth if $depth > $max;\n        }\n    }\n    return $max + 1;\n}",
    "    my $depth = 0;\n    my $key;\n    foreach $key (keys %$d) {\n        my $value = $d->{$key};\n        if (ref($value) eq 'HASH') {\n            my $d = dict_depth($value);\n            if ($d > $depth) {\n                $depth = $d;\n            }\n        }\n    }\n    return $depth + 1;\n}",
    "    my $depth = 0;\n    while (ref($d) eq 'HASH') {\n        $depth++;\n        $d = (values %$d)[0];\n    }\n    return $depth;\n}",
    "    my $depth = 1;\n    my $max_depth = 1;\n    while (my($k, $v) = each %$d) {\n        if (ref $v eq 'HASH') {\n            $depth = 1 + dict_depth($v);\n            $max_depth = $depth if $depth > $max_depth;\n        }\n    }\n    return $max_depth;\n}",
    "    my $depth = 0;\n    my @stack = ($d);\n    while (@stack) {\n        my $h = pop @stack;\n        if (ref $h eq 'HASH') {\n            $depth++;\n            push @stack, values %$h;\n        }\n    }\n    return $depth;\n}",
    "    my $max = 0;\n    for my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            my $depth = dict_depth($v) + 1;\n            $max = $depth if $depth > $max;\n        }\n    }\n    return $max;\n}",
    "    my($depth) = 0;\n    my($key, $value);\n    while (($key, $value) = each %$d) {\n\tif (ref($value) eq 'HASH') {\n\t    $depth = dict_depth($value) + 1;\n\t}\n    }\n    return $depth;\n}",
    "    my $depth = 0;\n    my $max_depth = 0;\n    my $key;\n    my $val;\n    while (($key, $val) = each %$d) {\n        if (ref($val) eq 'HASH') {\n            $depth = dict_depth($val) + 1;\n            $max_depth = $depth if $depth > $max_depth;\n        }\n    }\n    return $max_depth;\n}",
    "    my $depth = 0;\n    my $k;\n    foreach $k (keys %$d) {\n        my $t = ref($d->{$k});\n        if ($t eq 'HASH') {\n            my $d2 = dict_depth($d->{$k});\n            if ($d2 > $depth) {\n                $depth = $d2;\n            }\n        }\n    }\n    return $depth + 1;\n}",
    "    my $depth = 0;\n    my @queue = ($d);\n    while (@queue) {\n        my $d = shift @queue;\n        if (ref($d) eq 'HASH') {\n            $depth++;\n            push @queue, values %$d;\n        }\n    }\n    return $depth;\n}",
    "    my $max = 0;\n    for my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref $v eq 'HASH') {\n            my $depth = dict_depth($v);\n            $max = $depth if $depth > $max;\n        }\n    }\n    return $max + 1;\n}",
    "    my $depth = 0;\n    for my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref $v eq 'HASH') {\n            my $d = dict_depth($v);\n            $depth = $d if $d > $depth;\n        }\n    }\n    return $depth + 1;\n}",
    "    my $depth = 0;\n    my @stack = ($d);\n    while(@stack) {\n        my $e = pop @stack;\n        if(ref($e) eq 'HASH') {\n            push @stack, values %$e;\n            $depth++;\n        }\n    }\n    return $depth;\n}",
    "    my $max = 0;\n    foreach my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            my $d = dict_depth($v);\n            $max = $d if $d > $max;\n        }\n    }\n    return $max + 1;\n}",
    "    my $depth = 0;\n    my @stack = ($d);\n    while (@stack) {\n        my $d = shift @stack;\n        if (ref $d eq 'HASH') {\n            $depth++;\n            push @stack, values %$d;\n        }\n    }\n    return $depth;\n}",
    "    my $depth = 1;\n    my $max_depth = 1;\n    my @stack = ($d);\n    while (@stack) {\n        my $k = pop @stack;\n        if (ref($k) eq 'HASH') {\n            $depth++;\n            $max_depth = $depth if $depth > $max_depth;\n            push @stack, values %$k;\n        }\n        elsif (ref($k) eq 'ARRAY') {\n            push @stack, @$k;\n        }\n        else {\n            $depth--;\n        }\n    }\n    return $max_depth;\n}",
    "    my $depth = 1;\n    my $max_depth = 1;\n    foreach my $k (keys %$d) {\n        if (ref($d->{$k}) eq 'HASH') {\n            $depth = dict_depth($d->{$k}) + 1;\n            $max_depth = $depth if $depth > $max_depth;\n        }\n    }\n    return $max_depth;\n}",
    "    my $depth = 0;\n    for my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref $v eq 'HASH') {\n            my $d = dict_depth($v);\n            $depth = $d if $d > $depth;\n        }\n    }\n    return $depth + 1;\n}",
    "    my $depth = 0;\n    my @keys = keys %$d;\n    for my $k (@keys) {\n        my $v = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            my $d2 = dict_depth($v);\n            $depth = $d2 if $d2 > $depth;\n        }\n    }\n    return $depth + 1;\n}",
    "    my $depth = 0;\n    while (my($k, $v) = each %$d) {\n        my $d = ref($v) eq 'HASH' ? dict_depth($v) : 0;\n        $depth = $d if $d > $depth;\n    }\n    return $depth + 1;\n}",
    "    my $depth = 0;\n    my $max_depth = 0;\n    my $key;\n    my $val;\n    my $ref;\n    my $sub_depth;",
    "    my $depth = 0;\n    foreach my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            my $d2 = dict_depth($v);\n            if ($d2 > $depth) {\n                $depth = $d2;\n            }\n        }\n    }\n    return $depth + 1;\n}",
    "    my $max = 0;\n    for my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            my $depth = dict_depth($v);\n            $max = $depth if $depth > $max;\n        }\n    }\n    return $max + 1;\n}",
    "    my $max = 0;\n    for my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref $v eq 'HASH') {\n            my $depth = dict_depth($v);\n            $max = $depth if $depth > $max;\n        }\n    }\n    return $max + 1;\n}",
    "    my $max = 0;\n    my $depth = 0;\n    my @stack = ($d);\n    while (@stack) {\n        my $e = pop @stack;\n        if (ref($e) eq 'HASH') {\n            $depth++;\n            push @stack, values %$e;\n        }\n        elsif (ref($e) eq 'ARRAY') {\n            $depth++;\n            push @stack, @$e;\n        }\n        else {\n            $max = $depth if $depth > $max;\n            $depth--;\n        }\n    }\n    return $max;\n}",
    "    my $depth = 0;\n    my $max_depth = 0;\n    foreach my $k (keys %$d) {\n        if (ref($d->{$k}) eq 'HASH') {\n            $depth = dict_depth($d->{$k});\n            $max_depth = $depth if $depth > $max_depth;\n        }\n    }\n    return $max_depth + 1;\n}",
    "    my $depth = 0;\n    for my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            my $d = dict_depth($v);\n            $depth = $d if $d > $depth;\n        }\n    }\n    return $depth + 1;\n}",
    "    my $depth = 0;\n    foreach my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            $depth = max($depth, 1 + dict_depth($v));\n        }\n    }\n    return $depth;\n}",
    "    my $depth = 0;\n    my $max_depth = 0;\n    my $key;\n    my $value;\n    while (($key, $value) = each %$d) {\n        if (ref($value) eq 'HASH') {\n            $depth = dict_depth($value);\n            $max_depth = $depth if $depth > $max_depth;\n        }\n    }\n    return $max_depth + 1;\n}",
    "    my $max = 0;\n    foreach my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref $v eq 'HASH') {\n            my $depth = dict_depth($v);\n            $max = $depth if $depth > $max;\n        }\n    }\n    return $max + 1;\n}",
    "    my $depth = 0;\n    foreach my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            $depth = max($depth, 1 + dict_depth($v));\n        }\n    }\n    return $depth;\n}",
    "    my $depth = 1;\n    my $max_depth = 1;\n    my @keys = keys %$d;\n    for my $k (@keys) {\n        if (ref($d->{$k}) eq 'HASH') {\n            $depth = dict_depth($d->{$k}) + 1;\n            $max_depth = $depth if $depth > $max_depth;\n        }\n    }\n    return $max_depth;\n}",
    "    my $depth = 0;\n    my @keys = keys %$d;\n    for my $k (@keys) {\n        my $v = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            my $d2 = dict_depth($v);\n            $depth = $d2 if $d2 > $depth;\n        }\n    }\n    return $depth + 1;\n}",
    "    my $depth = 0;\n    my $key;\n    foreach $key (keys %$d) {\n        my $v = $d->{$key};\n        if (ref($v) eq 'HASH') {\n            my $d2 = dict_depth($v);\n            if ($d2 > $depth) {\n                $depth = $d2;\n            }\n        }\n    }\n    return $depth + 1;\n}",
    "    my $depth = 0;\n    for my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            my $d = dict_depth($v);\n            $depth = $d if $d > $depth;\n        }\n    }\n    return $depth + 1;\n}",
    "    my $depth = 0;\n    foreach my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            $depth = max($depth, 1 + dict_depth($v));\n        }\n    }\n    return $depth;\n}",
    "    my $depth = 0;\n    foreach my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            $depth = max($depth, dict_depth($v) + 1);\n        }\n    }\n    return $depth;\n}",
    "    my $depth = 0;\n    my $max = 0;\n    foreach my $k (keys %{$d}) {\n        if (ref($d->{$k}) eq 'HASH') {\n            $depth = dict_depth($d->{$k});\n            $max = $depth if $depth > $max;\n        }\n    }\n    return $max + 1;\n}",
    "    my $max = 0;\n    for my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            my $d = dict_depth($v);\n            $max = $d if $d > $max;\n        }\n    }\n    return $max + 1;\n}",
    "    my $depth = 1;\n    foreach my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            my $d2 = dict_depth($v);\n            $depth = $d2 + 1 if $d2 + 1 > $depth;\n        }\n    }\n    return $depth;\n}",
    "    my $depth = 0;\n    my $key;\n    my $val;\n    while (($key, $val) = each %$d) {\n        my $d2 = dict_depth($val);\n        $depth = $d2 if $d2 > $depth;\n    }\n    return $depth + 1;\n}",
    "    my $depth = 0;\n    my @stack = ($d);\n    while (@stack) {\n        my $e = pop @stack;\n        if (ref($e) eq 'HASH') {\n            $depth = @stack + 1 if @stack + 1 > $depth;\n            push @stack, values %$e;\n        }\n    }\n    return $depth;\n}",
    "    my $depth = 0;\n    for my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref $v eq 'HASH') {\n            my $d2 = dict_depth($v);\n            $depth = $d2 if $d2 > $depth;\n        }\n    }\n    return $depth + 1;\n}",
    "    my $depth = 1;\n    while (my($k, $v) = each %$d) {\n        if (ref $v eq 'HASH') {\n            $depth = 1 + dict_depth($v);\n        }\n    }\n    return $depth;\n}",
    "    my $depth = 0;\n    my $max_depth = 0;\n    foreach my $k (keys %$d) {\n        if (ref($d->{$k}) eq 'HASH') {\n            $depth = 1 + dict_depth($d->{$k});\n            $max_depth = $depth if $depth > $max_depth;\n        }\n    }\n    return $max_depth;\n}",
    "    my $depth = 0;\n    my $key;\n    foreach $key (keys %$d) {\n        my $type = ref $d->{$key};\n        if ($type eq 'HASH') {\n            my $subdepth = dict_depth($d->{$key});\n            if ($subdepth > $depth) {\n                $depth = $subdepth;\n            }\n        }\n    }\n    return $depth + 1;\n}",
    "    my $depth = 0;\n    my $max = 0;\n    foreach my $k (keys %$d) {\n        if (ref($d->{$k}) eq 'HASH') {\n            $depth = dict_depth($d->{$k});\n            $max = $depth if $depth > $max;\n        }\n    }\n    return $max + 1;\n}",
    "    my $depth = 0;\n    my @stack = ($d);\n    while (@stack) {\n        my $d = pop @stack;\n        my @keys = keys %$d;\n        if (@keys) {\n            $depth++;\n            push @stack, map { $d->{$_} } @keys;\n        }\n    }\n    return $depth;\n}",
    "    my $depth = 0;\n    for my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref $v eq 'HASH') {\n            my $d = dict_depth($v);\n            $depth = $d if $d > $depth;\n        }\n    }\n    return $depth + 1;\n}",
    "    my $depth = 0;\n    my $max = 0;\n    foreach my $k (keys %$d) {\n        if (ref($d->{$k}) eq 'HASH') {\n            $depth = dict_depth($d->{$k});\n            $max = $depth if $depth > $max;\n        }\n    }\n    return $max + 1;\n}",
    "    my $depth = 0;\n    my @keys = keys %$d;\n    for my $k (@keys) {\n        my $v = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            my $d2 = dict_depth($v);\n            if ($d2 > $depth) {\n                $depth = $d2;\n            }\n        }\n    }\n    return $depth + 1;\n}",
    "    my $depth = 0;\n    while (my($k,$v) = each %$d) {\n        my $d = ref $v eq 'HASH' ? dict_depth($v) : 0;\n        $depth = $d if $d > $depth;\n    }\n    return $depth + 1;\n}",
    "    my $depth = 0;\n    my $max_depth = 0;\n    while (my($k,$v) = each %$d) {\n        if (ref($v) eq 'HASH') {\n            $depth = dict_depth($v) + 1;\n            $max_depth = $depth if $depth > $max_depth;\n        }\n    }\n    return $max_depth;\n}",
    "    my $depth = 0;\n    for my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref $v eq 'HASH') {\n            my $d = dict_depth($v);\n            $depth = $d if $d > $depth;\n        }\n    }\n    return $depth + 1;\n}",
    "    my $depth = 1;\n    my $max = 0;\n    foreach my $k (keys %$d) {\n        if (ref $d->{$k} eq 'HASH') {\n            $max = dict_depth($d->{$k});\n            $depth = $max + 1 if $max > $depth;\n        }\n    }\n    return $depth;\n}",
    "    my $depth = 0;\n    my @stack = ($d);\n    while (@stack) {\n        my $d = shift @stack;\n        if (ref $d eq 'HASH') {\n            $depth++;\n            push @stack, values %$d;\n        }\n    }\n    return $depth;\n}",
    "    my($depth) = 0;\n    my($k);\n    foreach $k (keys %$d) {\n        my($v) = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            my($d2) = dict_depth($v);\n            if ($d2 > $depth) {\n                $depth = $d2;\n            }\n        }\n    }\n    return $depth + 1;\n}",
    "    my $depth = 0;\n    my $key;\n    foreach $key (keys %$d) {\n        if (ref($d->{$key}) eq 'HASH') {\n            my $d2 = dict_depth($d->{$key});\n            if ($d2 > $depth) {\n                $depth = $d2;\n            }\n        }\n    }\n    return $depth + 1;\n}",
    "    my $max = 0;\n    foreach my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            my $depth = dict_depth($v);\n            $max = $depth if $depth > $max;\n        }\n    }\n    return $max + 1;\n}",
    "    my $depth = 1;\n    foreach my $v (values %$d) {\n        if (ref($v) eq 'HASH') {\n            my $d = dict_depth($v);\n            $depth = $d + 1 if $d + 1 > $depth;\n        }\n    }\n    return $depth;\n}",
    "    my $max = 0;\n    for my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref $v eq 'HASH') {\n            my $depth = dict_depth($v);\n            $max = $depth if $depth > $max;\n        }\n    }\n    return $max + 1;\n}",
    "    my $depth = 1;\n    my $max_depth = 1;\n    my $key;\n    my $value;\n    while (($key, $value) = each %$d) {\n        if (ref $value eq 'HASH') {\n            $depth = dict_depth($value) + 1;\n            $max_depth = $depth if $depth > $max_depth;\n        }\n    }\n    return $max_depth;\n}",
    "    my $max = 0;\n    for my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref $v eq 'HASH') {\n            my $depth = dict_depth($v) + 1;\n            $max = $depth if $depth > $max;\n        }\n    }\n    return $max;\n}",
    "    my $depth = 0;\n    my @keys = keys %$d;\n    for my $k (@keys) {\n        my $v = $d->{$k};\n        if (ref $v eq 'HASH') {\n            my $d = dict_depth($v);\n            $depth = $d if $d > $depth;\n        }\n    }\n    return $depth + 1;\n}",
    "    my($depth) = 0;\n    my($key);\n    foreach $key (keys %$d) {\n        my($d2) = $d->{$key};\n        if (ref($d2) eq 'HASH') {\n            my($depth2) = dict_depth($d2);\n            if ($depth2 > $depth) {\n                $depth = $depth2;\n            }\n        }\n    }\n    return $depth + 1;\n}",
    "    my $max = 0;\n    foreach my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            my $depth = dict_depth($v);\n            $max = $depth if $depth > $max;\n        }\n    }\n    return $max + 1;\n}",
    "    my $depth = 0;\n    while (my($k, $v) = each %$d) {\n        if (ref $v eq 'HASH') {\n            my $d = dict_depth($v);\n            $depth = $d if $d > $depth;\n        }\n    }\n    return $depth + 1;\n}",
    "    my $depth = 1;\n    foreach my $k (keys %$d) {\n        my $d2 = dict_depth($d->{$k});\n        $depth = $d2 + 1 if $d2 >= $depth;\n    }\n    return $depth;\n}",
    "    my $depth = 0;\n    foreach my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            my $d = dict_depth($v);\n            $depth = $d if $d > $depth;\n        }\n    }\n    return $depth + 1;\n}",
    "    my $depth = 1;\n    my $max_depth = 1;\n    my @keys = keys %$d;\n    foreach my $k (@keys) {\n        if (ref $d->{$k} eq 'HASH') {\n            $depth = dict_depth($d->{$k}) + 1;\n            $max_depth = $depth if $depth > $max_depth;\n        }\n    }\n    return $max_depth;\n}",
    "    my $depth = 0;\n    my @keys = keys %$d;\n    for my $k (@keys) {\n        if (ref($d->{$k}) eq 'HASH') {\n            my $d2 = dict_depth($d->{$k});\n            $depth = $d2 if $d2 > $depth;\n        }\n    }\n    return $depth + 1;\n}",
    "    my $depth = 0;\n    my @keys = keys %$d;\n    for my $k (@keys) {\n        my $v = $d->{$k};\n        if (ref $v eq 'HASH') {\n            my $d2 = dict_depth($v);\n            $depth = $d2 if $d2 > $depth;\n        }\n    }\n    return $depth + 1;\n}",
    "    my $max = 0;\n    foreach my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            my $d = dict_depth($v);\n            $max = $d if $d > $max;\n        }\n    }\n    return $max + 1;\n}",
    "    my $depth = 0;\n    for my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            my $d2 = dict_depth($v);\n            $depth = $d2 if $d2 > $depth;\n        }\n    }\n    return $depth + 1;\n}",
    "    my $depth = 0;\n    my @stack = ($d);\n    while (@stack) {\n        my $k = pop @stack;\n        if (ref($k) eq 'HASH') {\n            $depth = @stack if @stack > $depth;\n            push @stack, values %$k;\n        }\n    }\n    return $depth;\n}",
    "    my $depth = 0;\n    my $max_depth = 0;\n    my $key;\n    my $val;\n    my $ref;",
    "    my $depth = 0;\n    my $sub_depth = 0;\n    foreach my $k (keys %$d) {\n        if (ref($d->{$k}) eq 'HASH') {\n            $sub_depth = dict_depth($d->{$k});\n            if ($sub_depth > $depth) {\n                $depth = $sub_depth;\n            }\n        }\n    }\n    return $depth + 1;\n}",
    "    my $depth = 0;\n    while (my($k, $v) = each %$d) {\n        if (ref($v) eq 'HASH') {\n            $depth = max($depth, 1 + dict_depth($v));\n        }\n    }\n    return $depth;\n}",
    "    my $depth = 0;\n    for my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            my $d = dict_depth($v);\n            $depth = $d if $d > $depth;\n        }\n    }\n    return $depth + 1;\n}",
    "    my $depth = 0;\n    foreach my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            my $d2 = dict_depth($v);\n            $depth = $d2 if $d2 > $depth;\n        }\n    }\n    return $depth + 1;\n}",
    "    my $max = 0;\n    for my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref $v eq 'HASH') {\n            my $depth = dict_depth($v);\n            $max = $depth if $depth > $max;\n        }\n    }\n    return $max + 1;\n}",
    "    my $depth = 1;\n    my $max_depth = 1;\n    foreach my $k (keys %$d) {\n        if (ref $d->{$k} eq 'HASH') {\n            $depth = dict_depth($d->{$k}) + 1;\n            $max_depth = $depth if $depth > $max_depth;\n        }\n    }\n    return $max_depth;\n}",
    "    my $depth = 1;\n    my $max_depth = 1;\n    my @keys = keys %$d;\n    for my $k (@keys) {\n        if (ref($d->{$k}) eq 'HASH') {\n            $depth = dict_depth($d->{$k}) + 1;\n            $max_depth = $depth if $depth > $max_depth;\n        }\n    }\n    return $max_depth;\n}",
    "    my $depth = 1;\n    my $max = 0;\n    foreach my $k (keys %$d) {\n        if (ref($d->{$k}) eq 'HASH') {\n            $max = dict_depth($d->{$k});\n            $depth = $max + 1 if $max > $depth;\n        }\n    }\n    return $depth;\n}",
    "    my $depth = 0;\n    foreach my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            my $d = dict_depth($v);\n            $depth = $d if $d > $depth;\n        }\n    }\n    return $depth + 1;\n}",
    "    my $depth = 1;\n    for my $v (values %$d) {\n        if (ref $v eq 'HASH') {\n            my $d = dict_depth($v) + 1;\n            $depth = $d if $d > $depth;\n        }\n    }\n    return $depth;\n}",
    "    my $depth = 0;\n    my @keys = keys %$d;\n    for my $k (@keys) {\n        my $v = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            my $d2 = dict_depth($v);\n            $depth = $d2 if $d2 > $depth;\n        }\n    }\n    return $depth + 1;\n}",
    "    my $depth = 0;\n    my @stack = ($d);\n    while (@stack) {\n        my $d = shift @stack;\n        if (ref($d) eq 'HASH') {\n            $depth++;\n            push @stack, values %$d;\n        }\n    }\n    return $depth;\n}",
    "    my $depth = 0;\n    for my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref $v eq 'HASH') {\n            my $d2 = dict_depth($v);\n            $depth = $d2 if $d2 > $depth;\n        }\n    }\n    return $depth + 1;\n}",
    "    my $max = 0;\n    for my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            my $d = dict_depth($v);\n            $max = $d if $d > $max;\n        }\n    }\n    return $max + 1;\n}",
    "    my $depth = 1;\n    foreach my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            my $d2 = dict_depth($v);\n            $depth = $d2 + 1 if $d2 + 1 > $depth;\n        }\n    }\n    return $depth;\n}",
    "    my $depth = 0;\n    my $max = 0;\n    for my $k (keys %$d) {\n        if (ref $d->{$k} eq 'HASH') {\n            $depth = dict_depth($d->{$k});\n            $max = $depth if $depth > $max;\n        }\n    }\n    return $max + 1;\n}",
    "    my $depth = 0;\n    my $max_depth = 0;\n    my $key;\n    my $value;\n    while (($key, $value) = each %$d) {\n        if (ref($value) eq 'HASH') {\n            $depth = dict_depth($value) + 1;\n            if ($depth > $max_depth) {\n                $max_depth = $depth;\n            }\n        }\n    }\n    return $max_depth;\n}",
    "    my $depth = 1;\n    my $max_depth = 1;\n    foreach my $k (keys %$d) {\n        if (ref($d->{$k}) eq 'HASH') {\n            $depth = dict_depth($d->{$k}) + 1;\n            $max_depth = $depth if $depth > $max_depth;\n        }\n    }\n    return $max_depth;\n}",
    "    my $depth = 0;\n    my @keys = keys %$d;\n    for my $k (@keys) {\n        my $v = $d->{$k};\n        if (ref $v eq 'HASH') {\n            my $d2 = dict_depth($v);\n            if ($d2 > $depth) {\n                $depth = $d2;\n            }\n        }\n    }\n    return $depth + 1;\n}",
    "    my $depth = 0;\n    for my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref $v eq 'HASH') {\n            my $d = dict_depth($v);\n            $depth = $d if $d > $depth;\n        }\n    }\n    return $depth + 1;\n}",
    "    my $max = 0;\n    for my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref $v eq 'HASH') {\n            my $depth = dict_depth($v);\n            $max = $depth if $depth > $max;\n        }\n    }\n    return $max + 1;\n}",
    "    my $depth = 0;\n    my $max_depth = 0;\n    my $key;\n    my $val;\n    my $ref;",
    "    my $depth = 0;\n    my $max_depth = 0;\n    for my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            $depth = dict_depth($v) + 1;\n            $max_depth = $depth if $depth > $max_depth;\n        }\n    }\n    return $max_depth;\n}",
    "    my $depth = 0;\n    foreach my $k (keys %$d) {\n        my $v = $d->{$k};\n        if(ref($v) eq 'HASH') {\n            my $d = dict_depth($v);\n            $depth = $d if $d > $depth;\n        }\n    }\n    return $depth + 1;\n}",
    "    my $depth = 0;\n    my $max_depth = 0;\n    my @keys = keys %$d;\n    for my $k (@keys) {\n        if (ref $d->{$k} eq 'HASH') {\n            $depth = dict_depth($d->{$k}) + 1;\n            $max_depth = $depth if $depth > $max_depth;\n        }\n    }\n    return $max_depth;\n}",
    "    my $depth = 0;\n    for my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            $depth = max($depth, 1 + dict_depth($v));\n        }\n    }\n    return $depth;\n}",
    "    my($depth) = 0;\n    my($key);\n    foreach $key (keys %$d) {\n\tmy($d2) = $d->{$key};\n\tif (ref($d2) eq 'HASH') {\n\t    my($depth2) = dict_depth($d2);\n\t    if ($depth2 > $depth) {\n\t\t$depth = $depth2;\n\t    }\n\t}\n    }\n    return $depth + 1;\n}",
    "    my $depth = 0;\n    my $max_depth = 0;\n    foreach my $k (keys %$d) {\n        if (ref $d->{$k} eq 'HASH') {\n            $depth = dict_depth($d->{$k}) + 1;\n            $max_depth = $depth if $depth > $max_depth;\n        }\n    }\n    return $max_depth;\n}",
    "    my $depth = 0;\n    my $max_depth = 0;\n    foreach my $k (keys %$d) {\n        if (ref($d->{$k}) eq 'HASH') {\n            $depth = dict_depth($d->{$k});\n            if ($depth > $max_depth) {\n                $max_depth = $depth;\n            }\n        }\n    }\n    return $max_depth + 1;\n}",
    "    my $depth = 0;\n    my $max_depth = 0;\n    my $key;\n    my $value;\n    my $ref;",
    "    my $depth = 0;\n    for my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            my $d = dict_depth($v);\n            $depth = $d if $d > $depth;\n        }\n    }\n    return $depth + 1;\n}",
    "    my $depth = 0;\n    my @stack = ($d);\n    while (@stack) {\n        my $d = shift @stack;\n        if (ref($d) eq 'HASH') {\n            $depth++;\n            push @stack, values %$d;\n        }\n    }\n    return $depth;\n}",
    "    my $depth = 0;\n    my $max_depth = 0;\n    my $key;\n    my $val;",
    "    my $depth = 0;\n    while (my($k, $v) = each %$d) {\n        if (ref $v eq 'HASH') {\n            $depth = 1 + dict_depth($v);\n        }\n    }\n    return $depth;\n}",
    "    my $depth = 0;\n    foreach my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            my $d2 = dict_depth($v);\n            $depth = $d2 if $d2 > $depth;\n        }\n    }\n    return $depth + 1;\n}",
    "    my($depth) = 0;\n    my($key);\n    foreach $key (keys(%$d)) {\n        my($d2) = $d->{$key};\n        if (ref($d2) eq 'HASH') {\n            my($depth2) = dict_depth($d2) + 1;\n            if ($depth2 > $depth) {\n                $depth = $depth2;\n            }\n        }\n    }\n    return $depth;\n}",
    "    my $depth = 1;\n    my $max_depth = 0;\n    my @keys = keys %$d;\n    for my $k (@keys) {\n        if (ref($d->{$k}) eq 'HASH') {\n            $depth = 1 + dict_depth($d->{$k});\n            if ($depth > $max_depth) {\n                $max_depth = $depth;\n            }\n        }\n    }\n    return $max_depth;\n}",
    "    my $depth = 0;\n    while (my($k, $v) = each %$d) {\n        my $d = ref $v eq 'HASH' ? dict_depth($v) : 0;\n        $depth = $d if $d > $depth;\n    }\n    return $depth + 1;\n}",
    "    my $depth = 0;\n    for my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref $v eq 'HASH') {\n            my $d2 = dict_depth($v);\n            $depth = $d2 if $d2 > $depth;\n        }\n    }\n    return $depth + 1;\n}",
    "    my $depth = 0;\n    foreach my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            my $d2 = dict_depth($v);\n            $depth = $d2 if $d2 > $depth;\n        }\n    }\n    return $depth + 1;\n}",
    "    my $max = 0;\n    for my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            my $depth = dict_depth($v) + 1;\n            $max = $depth if $depth > $max;\n        }\n    }\n    return $max;\n}",
    "    my $depth = 1;\n    foreach my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            my $d2 = dict_depth($v);\n            $depth = $d2 + 1 if $d2 + 1 > $depth;\n        }\n    }\n    return $depth;\n}",
    "    my $depth = 0;\n    for my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            $depth = max($depth, 1 + dict_depth($v));\n        }\n    }\n    return $depth;\n}",
    "    my $depth = 0;\n    foreach my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            my $d = dict_depth($v);\n            $depth = $d if $d > $depth;\n        }\n    }\n    return $depth + 1;\n}",
    "    my $depth = 0;\n    foreach my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            my $d2 = dict_depth($v);\n            if ($d2 > $depth) {\n                $depth = $d2;\n            }\n        }\n    }\n    return $depth + 1;\n}",
    "    my $depth = 0;\n    for my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref $v eq 'HASH') {\n            my $d = dict_depth($v);\n            $depth = $d if $d > $depth;\n        }\n    }\n    return $depth + 1;\n}",
    "    my $max = 0;\n    for my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            my $depth = dict_depth($v);\n            $max = $depth if $depth > $max;\n        }\n    }\n    return $max + 1;\n}",
    "    my $depth = 0;\n    my $max_depth = 0;\n    foreach my $k (keys %$d) {\n        if (ref($d->{$k}) eq 'HASH') {\n            $depth = dict_depth($d->{$k});\n            $max_depth = $depth if $depth > $max_depth;\n        }\n    }\n    return $max_depth + 1;\n}",
    "    my $max = 0;\n    foreach my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            my $depth = dict_depth($v);\n            $max = $depth if $depth > $max;\n        }\n    }\n    return $max + 1;\n}",
    "    my $depth = 0;\n    for my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            my $d = dict_depth($v);\n            $depth = $d if $d > $depth;\n        }\n    }\n    return $depth + 1;\n}",
    "    my $depth = 0;\n    my @stack = ($d);\n    while (@stack) {\n        my $d = shift @stack;\n        if (ref($d) eq 'HASH') {\n            $depth++;\n            push @stack, values %$d;\n        }\n    }\n    return $depth;\n}",
    "    my $max = 0;\n    for my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            my $depth = dict_depth($v);\n            if ($depth > $max) {\n                $max = $depth;\n            }\n        }\n    }\n    return $max + 1;\n}",
    "    my $max = 0;\n    for my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref $v eq 'HASH') {\n            my $depth = dict_depth($v);\n            $max = $depth if $depth > $max;\n        }\n    }\n    return $max + 1;\n}",
    "    my $depth = 0;\n    my $k;\n    foreach $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            my $d = dict_depth($v);\n            $depth = $d if $d > $depth;\n        }\n    }\n    return $depth + 1;\n}",
    "    my $depth = 1;\n    my $max_depth = 1;\n    my @keys = keys %$d;\n    foreach my $k (@keys) {\n        if (ref $d->{$k} eq 'HASH') {\n            $depth = dict_depth($d->{$k}) + 1;\n            if ($depth > $max_depth) {\n                $max_depth = $depth;\n            }\n        }\n    }\n    return $max_depth;\n}",
    "    my $depth = 0;\n    my $max = 0;\n    foreach my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            $depth = dict_depth($v);\n        }\n        else {\n            $depth = 1;\n        }\n        $max = $depth if $depth > $max;\n    }\n    return $max + 1;\n}",
    "    my($depth) = 0;\n    my($key);\n    foreach $key (keys(%$d)) {\n        if (ref($d->{$key}) eq 'HASH') {\n            my($d2) = dict_depth($d->{$key});\n            if ($d2 > $depth) {\n                $depth = $d2;\n            }\n        }\n    }\n    return $depth + 1;\n}",
    "    my $max = 0;\n    for my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref $v eq 'HASH') {\n            my $d = dict_depth($v);\n            $max = $d if $d > $max;\n        }\n    }\n    return $max + 1;\n}",
    "    my $depth = 1;\n    my $max = 0;\n    foreach my $k (keys %$d) {\n        if (ref $d->{$k} eq 'HASH') {\n            $max = dict_depth($d->{$k});\n            $depth = $max + 1 if $max >= $depth;\n        }\n    }\n    return $depth;\n}",
    "    my $depth = 0;\n    for my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            $depth = 1 + dict_depth($v);\n        }\n    }\n    return $depth;\n}",
    "    my $depth = 0;\n    my @stack = ($d);\n    while (@stack) {\n        my $d = shift @stack;\n        if (ref $d eq 'HASH') {\n            $depth++;\n            push @stack, values %$d;\n        }\n    }\n    return $depth;\n}",
    "    my $max = 0;\n    foreach my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            my $depth = dict_depth($v);\n            $max = $depth if $depth > $max;\n        }\n    }\n    return $max + 1;\n}",
    "    my $depth = 0;\n    my $max_depth = 0;\n    my $key;\n    my $value;\n    while (($key, $value) = each %$d) {\n        if (ref($value) eq 'HASH') {\n            $depth = 1 + dict_depth($value);\n            $max_depth = $depth if $depth > $max_depth;\n        }\n    }\n    return $max_depth;\n}",
    "    my $depth = 0;\n    my $keys = keys %$d;\n    if ($keys) {\n        my $first_key = (keys %$d)[0];\n        my $first_value = $d->{$first_key};\n        if (ref $first_value eq 'HASH') {\n            $depth = 1 + dict_depth($first_value);\n        }\n    }\n    return $depth;\n}",
    "    my $depth = 0;\n    foreach my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            my $d2 = dict_depth($v);\n            if ($d2 > $depth) {\n                $depth = $d2;\n            }\n        }\n    }\n    return $depth + 1;\n}",
    "    my $depth = 0;\n    my $max = 0;\n    foreach my $k (keys %$d) {\n        if (ref $d->{$k} eq 'HASH') {\n            $depth = dict_depth($d->{$k});\n            $max = $depth if $depth > $max;\n        }\n    }\n    return $max + 1;\n}",
    "    my $depth = 1;\n    my $max_depth = 1;\n    my @keys = keys %$d;\n    for my $k (@keys) {\n        if (ref($d->{$k}) eq 'HASH') {\n            $depth = dict_depth($d->{$k}) + 1;\n            if ($depth > $max_depth) {\n                $max_depth = $depth;\n            }\n        }\n    }\n    return $max_depth;\n}",
    "    my($depth) = 0;\n    foreach my $k (keys %$d) {\n        my($v) = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            my($d) = dict_depth($v);\n            $depth = $d if $d > $depth;\n        }\n    }\n    return $depth + 1;\n}",
    "    return 0 unless defined $d;\n    return 1 if ref($d) ne 'HASH';\n    my $max = 0;\n    for my $k (keys %$d) {\n        my $depth = dict_depth($d->{$k});\n        $max = $depth if $depth > $max;\n    }\n    return $max + 1;\n}",
    "    my $depth = 0;\n    my $curr_depth = 0;\n    my $key;\n    my $value;\n    my $ref;\n    while (($key, $value) = each %$d) {\n        $ref = ref $value;\n        if ($ref eq 'HASH') {\n            $curr_depth = dict_depth($value);\n        }\n        elsif ($ref eq 'ARRAY') {\n            $curr_depth = list_depth($value);\n        }\n        else {\n            $curr_depth = 0;\n        }\n        if ($curr_depth > $depth) {\n            $depth = $curr_depth;\n        }\n    }\n    return $depth + 1;\n}",
    "    my $depth = 0;\n    for my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref $v eq 'HASH') {\n            my $d = dict_depth($v);\n            $depth = $d if $d > $depth;\n        }\n    }\n    return $depth + 1;\n}",
    "    my $depth = 0;\n    foreach my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            my $d2 = dict_depth($v);\n            $depth = $d2 if $d2 > $depth;\n        }\n    }\n    return $depth + 1;\n}",
    "    my $depth = 0;\n    if (ref($d) eq 'HASH') {\n        my @depths = map { dict_depth($_) } values %$d;\n        $depth = 1 + max(@depths);\n    }\n    return $depth;\n}",
    "    my $depth = 0;\n    my $max_depth = 0;\n    my $key;\n    my $value;\n    while (($key, $value) = each %$d) {\n        if (ref($value) eq 'HASH') {\n            $depth = dict_depth($value) + 1;\n            $max_depth = $depth if $depth > $max_depth;\n        }\n    }\n    return $max_depth;\n}",
    "    my $depth = 0;\n    my $max_depth = 0;\n    my $key;\n    my $value;",
    "    my $depth = 0;\n    my $max_depth = 0;\n    foreach my $k (keys %$d) {\n        if (ref($d->{$k}) eq 'HASH') {\n            $depth = dict_depth($d->{$k});\n            $max_depth = $depth if $depth > $max_depth;\n        }\n    }\n    return $max_depth + 1;\n}",
    "    my $depth = 0;\n    my $max_depth = 0;\n    my $key;\n    my $value;\n    while (($key, $value) = each %$d) {\n        if (ref $value eq 'HASH') {\n            $depth = dict_depth($value);\n            $max_depth = $depth if $depth > $max_depth;\n        }\n    }\n    return $max_depth + 1;\n}",
    "    my $depth = 0;\n    for my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref $v eq 'HASH') {\n            my $d = dict_depth($v);\n            $depth = $d if $d > $depth;\n        }\n    }\n    return $depth + 1;\n}",
    "    my $max = 0;\n    for my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref $v eq 'HASH') {\n            my $depth = dict_depth($v) + 1;\n            $max = $depth if $depth > $max;\n        }\n    }\n    return $max;\n}",
    "    my $depth = 1;\n    my @stack = ($d);\n    while (@stack) {\n        my $k = shift @stack;\n        if (ref $k eq 'HASH') {\n            $depth++;\n            push @stack, values %$k;\n        }\n    }\n    return $depth;\n}",
    "    my $depth = 0;\n    my $key;\n    foreach $key (keys %$d) {\n        if (ref($d->{$key}) eq 'HASH') {\n            my $d2 = dict_depth($d->{$key});\n            if ($d2 > $depth) {\n                $depth = $d2;\n            }\n        }\n    }\n    return $depth + 1;\n}",
    "    my $depth = 0;\n    for my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            $depth = dict_depth($v) + 1;\n        }\n    }\n    return $depth;\n}",
    "    return 1 + max(map { dict_depth($_) } values %$d);\n}",
    "    my $max = 0;\n    for my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref $v eq 'HASH') {\n            my $depth = dict_depth($v);\n            $max = $depth if $depth > $max;\n        }\n    }\n    return $max + 1;\n}",
    "    my $max = 0;\n    foreach my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            my $depth = dict_depth($v);\n            $max = $depth if $depth > $max;\n        }\n    }\n    return $max + 1;\n}",
    "    my $depth = 0;\n    my @keys = keys %$d;\n    foreach my $k (@keys) {\n        my $v = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            my $d2 = dict_depth($v);\n            if ($d2 > $depth) {\n                $depth = $d2;\n            }\n        }\n    }\n    return $depth + 1;\n}",
    "    my $depth = 0;\n    my $key;\n    foreach $key (keys %$d) {\n        my $val = $d->{$key};\n        if (ref($val) eq 'HASH') {\n            my $d = dict_depth($val);\n            if ($d > $depth) {\n                $depth = $d;\n            }\n        }\n    }\n    return $depth + 1;\n}",
    "    my $depth = 1;\n    for my $v (values %$d) {\n        if (ref $v eq 'HASH') {\n            my $d = dict_depth($v) + 1;\n            $depth = $d if $d > $depth;\n        }\n    }\n    return $depth;\n}",
    "    my $depth = 0;\n    foreach my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            my $d2 = dict_depth($v);\n            $depth = $d2 if $d2 > $depth;\n        }\n    }\n    return $depth + 1;\n}",
    "    my $depth = 0;\n    foreach my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref $v eq 'HASH') {\n            my $d = dict_depth($v);\n            $depth = $d if $d > $depth;\n        }\n    }\n    return $depth + 1;\n}",
    "    my $max = 0;\n    for my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref $v eq 'HASH') {\n            my $d = dict_depth($v);\n            $max = $d if $d > $max;\n        }\n    }\n    return $max + 1;\n}",
    "    my $max = 0;\n    foreach my $k (keys %$d) {\n        my $v = $d->{$k};\n        if (ref($v) eq 'HASH') {\n            my $depth = dict_depth($v);\n            $max = $depth if $depth > $max;\n        }\n    }\n    return $max + 1;\n}",
    "    my $depth = 0;\n    my @stack = ($d);\n    while (@stack) {\n        my $d = pop @stack;\n        if (ref($d) eq 'HASH') {\n            $depth = 1 + max(map { dict_depth($_) } values %$d);\n        }\n    }\n    return $depth;\n}",
    "    my $depth = 0;\n    while (my($k, $v) = each %$d) {\n        if (ref $v eq 'HASH') {\n            $depth = max($depth, 1 + dict_depth($v));\n        }\n    }\n    return $depth;\n}"
  ]
}