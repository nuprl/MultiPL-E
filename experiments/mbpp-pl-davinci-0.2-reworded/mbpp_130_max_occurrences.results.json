{
  "name": "mbpp_130_max_occurrences",
  "language": "pl",
  "prompt": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_130_max_occurrences.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = max(values %counts);\n    my @max_items = grep { $counts{$_} == $max_count } keys %counts;\n    return @max_items;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "",
      "stderr": "Undefined subroutine &main::max called at /tmp/tmp7tm9fbss.pl line 8.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    $count{$_}++ for @$nums;\n    my $max = max values %count;\n    my @max_keys = grep { $count{$_} == $max } keys %count;\n    return @max_keys;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmpkedujye3.pl line 6, near \"max values\"\nBEGIN not safe after errors--compilation aborted at /tmp/tmpkedujye3.pl line 10.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    foreach my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num = undef;\n    foreach my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    $counts{$_}++ for @$nums;\n    my $max = 0;\n    my $max_key = '';\n    while (my($key, $value) = each %counts) {\n        if ($value > $max) {\n            $max = $value;\n            $max_key = $key;\n        }\n    }\n    return $max_key;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    $count{$_}++ for @$nums;\n    my $max = 0;\n    my $max_key;\n    while (my($key, $value) = each %count) {\n        if ($value > $max) {\n            $max = $value;\n            $max_key = $key;\n        }\n    }\n    return $max_key;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    for my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_num = 0;\n    my $max_count = 0;\n    while (my($num, $count) = each %counts) {\n        if ($count > $max_count) {\n            $max_num = $num;\n            $max_count = $count;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_key;\n    my $max_value = 0;\n    for my $key (keys %counts) {\n        if ($counts{$key} > $max_value) {\n            $max_key = $key;\n            $max_value = $counts{$key};\n        }\n    }\n    return $max_key;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    for my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my $max = 0;\n    my $max_item = undef;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n        if ($counts{$num} > $max) {\n            $max = $counts{$num};\n            $max_item = $num;\n        }\n    }\n    return $max_item;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max) {\n            $max = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts = ();\n    foreach my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num = undef;\n    foreach my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    my $max = 0;\n    my $max_item;\n    for my $num (@$nums) {\n        $count{$num}++;\n        if ($count{$num} > $max) {\n            $max = $count{$num};\n            $max_item = $num;\n        }\n    }\n    return $max_item;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    $count{$_}++ for @$nums;\n    my $max = max values %count;\n    my @max_keys = grep { $count{$_} == $max } keys %count;\n    return @max_keys;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmpkedujye3.pl line 6, near \"max values\"\nBEGIN not safe after errors--compilation aborted at /tmp/tmpkedujye3.pl line 10.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    my $max_count = 0;\n    my $max_num;\n    for my $num (@$nums) {\n        $count{$num}++;\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    $count{$_}++ for @$nums;\n    my $max_key = (sort { $count{$b} <=> $count{$a} } keys %count)[0];\n    return $max_key, $count{$max_key};\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpiyq3qaeq.pl line 9.\nBEGIN failed--compilation aborted at /tmp/tmpiyq3qaeq.pl line 9.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    while (my($num, $count) = each %counts) {\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpb30i_7zj.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpb30i_7zj.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp7e8tt1vg.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmp7e8tt1vg.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my $max = 0;\n    my $max_num = undef;\n    my %counts;\n    foreach my $num (@$nums) {\n        $counts{$num}++;\n        if ($counts{$num} > $max) {\n            $max = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpoemhsu1o.pl line 16.\nBEGIN failed--compilation aborted at /tmp/tmpoemhsu1o.pl line 16.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    for my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    foreach my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpczfhfxan.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpczfhfxan.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    while (my($num, $count) = each %count) {\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpv1q6wjwe.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpv1q6wjwe.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my $max_occurrences = 0;\n    my $max_occurrences_item;\n    my %counts;\n    foreach my $num (@$nums) {\n        $counts{$num}++;\n        if ($counts{$num} > $max_occurrences) {\n            $max_occurrences = $counts{$num};\n            $max_occurrences_item = $num;\n        }\n    }\n    return $max_occurrences_item;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp6roiyez6.pl line 16.\nBEGIN failed--compilation aborted at /tmp/tmp6roiyez6.pl line 16.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    $counts{$_}++ for @$nums;\n    my $max_count = max(values %counts);\n    my @max_items = grep { $counts{$_} == $max_count } keys %counts;\n    return @max_items;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp6c7jytn5.pl line 10.\nBEGIN failed--compilation aborted at /tmp/tmp6c7jytn5.pl line 10.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max = 0;\n    my $max_key;\n    for my $key (keys %counts) {\n        if ($counts{$key} > $max) {\n            $max = $counts{$key};\n            $max_key = $key;\n        }\n    }\n    return $max_key;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpulmpg_e0.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpulmpg_e0.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp7e8tt1vg.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmp7e8tt1vg.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my @sorted = sort { $count{$b} <=> $count{$a} } keys %count;\n    return $sorted[0];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpqbasqs19.pl line 11.\nBEGIN failed--compilation aborted at /tmp/tmpqbasqs19.pl line 11.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp7e8tt1vg.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmp7e8tt1vg.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num = undef;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp4a1qb2bf.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmp4a1qb2bf.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_num = 0;\n    my $max_count = 0;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_num = $num;\n            $max_count = $count{$num};\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpolinrost.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpolinrost.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my $max = 0;\n    my $max_item = undef;\n    my %counts = ();\n    for my $num (@$nums) {\n        $counts{$num}++;\n        if ($counts{$num} > $max) {\n            $max = $counts{$num};\n            $max_item = $num;\n        }\n    }\n    return $max_item;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    $count{$_}++ for @$nums;\n    my $max_count = max(values %count);\n    my @max_items = grep { $count{$_} == $max_count } keys %count;\n    return @max_items;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp9clmkdde.pl line 10.\nBEGIN failed--compilation aborted at /tmp/tmp9clmkdde.pl line 10.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max) {\n            $max = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpaukqo621.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpaukqo621.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num = undef;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpbzeas14w.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpbzeas14w.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    for my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max = 0;\n    my $max_num;\n    for my $num (keys %count) {\n        if ($count{$num} > $max) {\n            $max = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmplhmwu0wx.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmplhmwu0wx.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp7e8tt1vg.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmp7e8tt1vg.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = max(values %counts);\n    my @max_nums = grep { $counts{$_} == $max_count } keys %counts;\n    return @max_nums;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp5grq2wne.pl line 12.\nBEGIN failed--compilation aborted at /tmp/tmp5grq2wne.pl line 12.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    $count{$_}++ for @$nums;\n    my $max = 0;\n    my $max_key;\n    for my $key (keys %count) {\n        if ($count{$key} > $max) {\n            $max = $count{$key};\n            $max_key = $key;\n        }\n    }\n    return $max_key;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpr3w4lq4_.pl line 16.\nBEGIN failed--compilation aborted at /tmp/tmpr3w4lq4_.pl line 16.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    $count{$_}++ for @$nums;\n    my $max_count = 0;\n    my $max_item;\n    while (my($item, $count) = each %count) {\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_item = $item;\n        }\n    }\n    return $max_item;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpfpr9nc74.pl line 16.\nBEGIN failed--compilation aborted at /tmp/tmpfpr9nc74.pl line 16.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num = undef;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpbzeas14w.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpbzeas14w.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_item;\n    for my $item (keys %counts) {\n        if ($counts{$item} > $max_count) {\n            $max_count = $counts{$item};\n            $max_item = $item;\n        }\n    }\n    return $max_item;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp2_ad_xy8.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmp2_ad_xy8.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    while (my($num, $count) = each %counts) {\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpb30i_7zj.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpb30i_7zj.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    $count{$_}++ for @$nums;\n    my $max = max values %count;\n    my @max_keys = grep { $count{$_} == $max } keys %count;\n    return @max_keys;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmpkedujye3.pl line 6, near \"max values\"\nBEGIN not safe after errors--compilation aborted at /tmp/tmpkedujye3.pl line 10.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    foreach my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpczfhfxan.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpczfhfxan.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max = 0;\n    my $max_key;\n    while (my($key, $value) = each %counts) {\n        if ($value > $max) {\n            $max = $value;\n            $max_key = $key;\n        }\n    }\n    return $max_key;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp2jrlfype.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmp2jrlfype.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp7e8tt1vg.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmp7e8tt1vg.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    $counts{$_}++ for @$nums;\n    my $max = 0;\n    my $max_key;\n    while (my($key, $value) = each %counts) {\n        if ($value > $max) {\n            $max = $value;\n            $max_key = $key;\n        }\n    }\n    return $max_key;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpv5bjuh59.pl line 16.\nBEGIN failed--compilation aborted at /tmp/tmpv5bjuh59.pl line 16.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $n (@$nums) {\n        $counts{$n}++;\n    }\n    my $max = 0;\n    my $max_n = 0;\n    for my $n (keys %counts) {\n        if ($counts{$n} > $max) {\n            $max = $counts{$n};\n            $max_n = $n;\n        }\n    }\n    return $max_n;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp_sle6fhf.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmp_sle6fhf.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    while (my($num, $count) = each %counts) {\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpb30i_7zj.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpb30i_7zj.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    foreach my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    while (my($num, $count) = each %counts) {\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpt5bn2cx1.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpt5bn2cx1.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp7e8tt1vg.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmp7e8tt1vg.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    $count{$_}++ for @$nums;\n    my $max = 0;\n    my $max_item;\n    while (my($item, $count) = each %count) {\n        if ($count > $max) {\n            $max = $count;\n            $max_item = $item;\n        }\n    }\n    return $max_item;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp3pcgznfk.pl line 16.\nBEGIN failed--compilation aborted at /tmp/tmp3pcgznfk.pl line 16.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max) {\n            $max = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    $count{$_}++ for @$nums;\n    my $max = max values %count;\n    return grep { $count{$_} == $max } keys %count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmpddhhi8tf.pl line 6, near \"max values\"\nBEGIN not safe after errors--compilation aborted at /tmp/tmpddhhi8tf.pl line 9.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp7e8tt1vg.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmp7e8tt1vg.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = max(values %counts);\n    my @max_nums = grep { $counts{$_} == $max_count } keys %counts;\n    return \\@max_nums;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp7k_7mp1w.pl line 12.\nBEGIN failed--compilation aborted at /tmp/tmp7k_7mp1w.pl line 12.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    for my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max = 0;\n    my $max_num;\n    for my $num (keys %count) {\n        if ($count{$num} > $max) {\n            $max = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmplhmwu0wx.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmplhmwu0wx.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num = undef;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpbzeas14w.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpbzeas14w.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    for my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max = 0;\n    my $max_num;\n    while (my($num, $count) = each %count) {\n        if ($count > $max) {\n            $max = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpqnlb1vc0.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpqnlb1vc0.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    $counts{$_}++ for @$nums;\n    my $max = max values %counts;\n    my @max_keys = grep { $counts{$_} == $max } keys %counts;\n    return \\@max_keys;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmpx7nna24s.pl line 6, near \"max values\"\nBEGIN not safe after errors--compilation aborted at /tmp/tmpx7nna24s.pl line 10.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    for my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max = 0;\n    my $max_num;\n    for my $num (keys %count) {\n        if ($count{$num} > $max) {\n            $max = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmplhmwu0wx.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmplhmwu0wx.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    $count{$_}++ for @$nums;\n    my $max_count = max values %count;\n    my @max_items = grep { $count{$_} == $max_count } keys %count;\n    return @max_items;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmpj_k4sf3r.pl line 6, near \"max values\"\nBEGIN not safe after errors--compilation aborted at /tmp/tmpj_k4sf3r.pl line 10.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp7e8tt1vg.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmp7e8tt1vg.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    for my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max = 0;\n    my $max_num;\n    for my $num (keys %count) {\n        if ($count{$num} > $max) {\n            $max = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmplhmwu0wx.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmplhmwu0wx.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    $count{$_}++ for @$nums;\n    my $max_count = max values %count;\n    my @max_items = grep { $count{$_} == $max_count } keys %count;\n    return @max_items;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmpj_k4sf3r.pl line 6, near \"max values\"\nBEGIN not safe after errors--compilation aborted at /tmp/tmpj_k4sf3r.pl line 10.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    while (my($num, $count) = each %count) {\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpv1q6wjwe.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpv1q6wjwe.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_num;\n    my $max_count = 0;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_num = $num;\n            $max_count = $counts{$num};\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpn9bz8wx5.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpn9bz8wx5.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    $counts{$_}++ for @$nums;\n    my $max = max values %counts;\n    my @max_keys = grep { $counts{$_} == $max } keys %counts;\n    return @max_keys;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmpv46_u5mj.pl line 6, near \"max values\"\nBEGIN not safe after errors--compilation aborted at /tmp/tmpv46_u5mj.pl line 10.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    for my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    while (my($num, $count) = each %count) {\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpshpza6vc.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpshpza6vc.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    $count{$_}++ for @$nums;\n    my $max = max values %count;\n    my @max_keys = grep { $count{$_} == $max } keys %count;\n    return @max_keys;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmpkedujye3.pl line 6, near \"max values\"\nBEGIN not safe after errors--compilation aborted at /tmp/tmpkedujye3.pl line 10.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    for my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max = max values %count;\n    my @max_keys = grep { $count{$_} == $max } keys %count;\n    return \\@max_keys;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmpvj_u_2h9.pl line 8, near \"max values\"\nBEGIN not safe after errors--compilation aborted at /tmp/tmpvj_u_2h9.pl line 12.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp7e8tt1vg.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmp7e8tt1vg.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    while (my($num, $count) = each %count) {\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpv1q6wjwe.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpv1q6wjwe.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    $count{$_}++ for @$nums;\n    my $max = 0;\n    my $max_item;\n    while (my($item, $count) = each %count) {\n        if ($count > $max) {\n            $max = $count;\n            $max_item = $item;\n        }\n    }\n    return $max_item;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp3pcgznfk.pl line 16.\nBEGIN failed--compilation aborted at /tmp/tmp3pcgznfk.pl line 16.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp7e8tt1vg.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmp7e8tt1vg.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my $max = 0;\n    my $max_num = 0;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n        if ($counts{$num} > $max) {\n            $max = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpjru7qr9c.pl line 16.\nBEGIN failed--compilation aborted at /tmp/tmpjru7qr9c.pl line 16.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my $max_count = 0;\n    my $max_item;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_item = $num;\n        }\n    }\n    return $max_item;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp009h9uxb.pl line 16.\nBEGIN failed--compilation aborted at /tmp/tmp009h9uxb.pl line 16.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max) {\n            $max = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = max(values %counts);\n    my @max_nums = grep { $counts{$_} == $max_count } keys %counts;\n    return @max_nums;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp5grq2wne.pl line 12.\nBEGIN failed--compilation aborted at /tmp/tmp5grq2wne.pl line 12.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    for my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_num = undef;\n    my $max_count = 0;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_num = $num;\n            $max_count = $count{$num};\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmptcqglrtz.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmptcqglrtz.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    for my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max = max(values %count);\n    my @max_keys = grep { $count{$_} == $max } keys %count;\n    return @max_keys;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp6rwiwtng.pl line 12.\nBEGIN failed--compilation aborted at /tmp/tmp6rwiwtng.pl line 12.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp9tcmqvo3.pl line 9.\nBEGIN failed--compilation aborted at /tmp/tmp9tcmqvo3.pl line 9.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max) {\n            $max = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $n (@$nums) {\n        $counts{$n}++;\n    }\n    my $max_count = 0;\n    my $max_item;\n    for my $item (keys %counts) {\n        if ($counts{$item} > $max_count) {\n            $max_count = $counts{$item};\n            $max_item = $item;\n        }\n    }\n    return $max_item;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmprs4kqmpx.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmprs4kqmpx.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max = 0;\n    my $max_num;\n    while (my($num, $count) = each %counts) {\n        if ($count > $max) {\n            $max = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp35fzeu74.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmp35fzeu74.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    $count{$_}++ for @$nums;\n    my $max = 0;\n    my $max_key;\n    while (my($key, $value) = each %count) {\n        if ($value > $max) {\n            $max = $value;\n            $max_key = $key;\n        }\n    }\n    return $max_key;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    foreach my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num = undef;\n    foreach my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    for my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    $count{$_}++ for @$nums;\n    my $max = 0;\n    my $max_item;\n    while (my($item, $count) = each %count) {\n        if ($count > $max) {\n            $max = $count;\n            $max_item = $item;\n        }\n    }\n    return $max_item;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp3pcgznfk.pl line 16.\nBEGIN failed--compilation aborted at /tmp/tmp3pcgznfk.pl line 16.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp7e8tt1vg.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmp7e8tt1vg.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    foreach my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max = 0;\n    my $max_num;\n    while (my($num, $count) = each %counts) {\n        if ($count > $max) {\n            $max = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpzj5qvkjt.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpzj5qvkjt.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    foreach my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpczfhfxan.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpczfhfxan.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max) {\n            $max = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpaukqo621.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpaukqo621.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    while (my($num, $count) = each %count) {\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpv1q6wjwe.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpv1q6wjwe.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my $max_count = 0;\n    my $max_num;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpc37c6gm0.pl line 16.\nBEGIN failed--compilation aborted at /tmp/tmpc37c6gm0.pl line 16.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    foreach my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpczfhfxan.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpczfhfxan.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max) {\n            $max = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_key = 0;\n    my $max_value = 0;\n    while (my($key, $value) = each %count) {\n        if ($value > $max_value) {\n            $max_key = $key;\n            $max_value = $value;\n        }\n    }\n    return $max_key;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpf6vrj4mk.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpf6vrj4mk.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    for my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max = 0;\n    my $max_key;\n    for my $key (keys %count) {\n        if ($count{$key} > $max) {\n            $max = $count{$key};\n            $max_key = $key;\n        }\n    }\n    return $max_key;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpfgmgetv4.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpfgmgetv4.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    while (my($num, $count) = each %counts) {\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpb30i_7zj.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpb30i_7zj.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    while (my($num, $count) = each %counts) {\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpb30i_7zj.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpb30i_7zj.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_num = 0;\n    my $max_count = 0;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_num = $num;\n            $max_count = $count{$num};\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpolinrost.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpolinrost.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    $count{$_}++ for @$nums;\n    my $max = 0;\n    my $max_item;\n    for my $item (keys %count) {\n        if ($count{$item} > $max) {\n            $max = $count{$item};\n            $max_item = $item;\n        }\n    }\n    return $max_item;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp0vywnzyi.pl line 16.\nBEGIN failed--compilation aborted at /tmp/tmp0vywnzyi.pl line 16.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    for my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max = 0;\n    my $max_num = 0;\n    for my $num (keys %count) {\n        if ($count{$num} > $max) {\n            $max = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp7t8iaa32.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmp7t8iaa32.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num = 0;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpms5ow05a.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpms5ow05a.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $n (@$nums) {\n        $counts{$n}++;\n    }\n    my $max_n = 0;\n    my $max_count = 0;\n    for my $n (keys %counts) {\n        if ($counts{$n} > $max_count) {\n            $max_n = $n;\n            $max_count = $counts{$n};\n        }\n    }\n    return $max_n;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpivjise8f.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpivjise8f.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_num;\n    my $max_count = 0;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_num = $num;\n            $max_count = $count{$num};\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp6snpnrm2.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmp6snpnrm2.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp7e8tt1vg.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmp7e8tt1vg.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my $max_occurrences = 0;\n    my $max_num = undef;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n        if ($counts{$num} > $max_occurrences) {\n            $max_occurrences = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpaesa9zjt.pl line 16.\nBEGIN failed--compilation aborted at /tmp/tmpaesa9zjt.pl line 16.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max = 0;\n    my $max_num = 0;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max) {\n            $max = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpng_8q3sb.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpng_8q3sb.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp7e8tt1vg.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmp7e8tt1vg.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max = 0;\n    my $max_num;\n    while (my($num, $count) = each %count) {\n        if ($count > $max) {\n            $max = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpdf8vnbzq.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpdf8vnbzq.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    for my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    foreach my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpczfhfxan.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpczfhfxan.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    foreach my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num = 0;\n    foreach my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpa96mhkjf.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpa96mhkjf.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    $count{$_}++ for @$nums;\n    my $max = 0;\n    my $max_item;\n    while (my($item, $count) = each %count) {\n        if ($count > $max) {\n            $max = $count;\n            $max_item = $item;\n        }\n    }\n    return $max_item;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp3pcgznfk.pl line 16.\nBEGIN failed--compilation aborted at /tmp/tmp3pcgznfk.pl line 16.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp7e8tt1vg.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmp7e8tt1vg.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    while (my($num, $count) = each %counts) {\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpb30i_7zj.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpb30i_7zj.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    for my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts = ();\n    foreach my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num = 0;\n    while (my($num, $count) = each %counts) {\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpb8wv4j2l.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpb8wv4j2l.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    while (my($num, $count) = each %count) {\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpv1q6wjwe.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpv1q6wjwe.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp7e8tt1vg.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmp7e8tt1vg.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    while (my($num, $count) = each %counts) {\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpb30i_7zj.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpb30i_7zj.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp7e8tt1vg.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmp7e8tt1vg.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my $max = 0;\n    my $max_num = 0;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n        if ($count{$num} > $max) {\n            $max = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpqymg6zzg.pl line 16.\nBEGIN failed--compilation aborted at /tmp/tmpqymg6zzg.pl line 16.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    while (my($num, $count) = each %counts) {\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpb30i_7zj.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpb30i_7zj.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    while (my($num, $count) = each %count) {\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpv1q6wjwe.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpv1q6wjwe.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp7e8tt1vg.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmp7e8tt1vg.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    for my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max = 0;\n    my $max_num = undef;\n    for my $num (keys %count) {\n        if ($count{$num} > $max) {\n            $max = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpvfjvzm8b.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpvfjvzm8b.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    for my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    foreach my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpczfhfxan.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpczfhfxan.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    for my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my $max = 0;\n    my $max_num = 0;\n    my %counts;\n    foreach my $num (@$nums) {\n        $counts{$num}++;\n        if ($counts{$num} > $max) {\n            $max = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpmfw1h9ho.pl line 16.\nBEGIN failed--compilation aborted at /tmp/tmpmfw1h9ho.pl line 16.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    for my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp7e8tt1vg.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmp7e8tt1vg.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    for my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    $count{$_}++ for @$nums;\n    my $max_count = 0;\n    my $max_item;\n    while (my($item, $count) = each %count) {\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_item = $item;\n        }\n    }\n    return $max_item;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpfpr9nc74.pl line 16.\nBEGIN failed--compilation aborted at /tmp/tmpfpr9nc74.pl line 16.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    $count{$_}++ for @$nums;\n    my $max = max values %count;\n    my @max_keys = grep { $count{$_} == $max } keys %count;\n    return @max_keys;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmpkedujye3.pl line 6, near \"max values\"\nBEGIN not safe after errors--compilation aborted at /tmp/tmpkedujye3.pl line 10.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    $count{$_}++ for @$nums;\n    my $max = 0;\n    my $max_key;\n    while (my($key, $value) = each %count) {\n        if ($value > $max) {\n            $max = $value;\n            $max_key = $key;\n        }\n    }\n    return $max_key;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    for my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max = 0;\n    my $max_num;\n    for my $num (keys %count) {\n        if ($count{$num} > $max) {\n            $max = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmplhmwu0wx.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmplhmwu0wx.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    foreach my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpczfhfxan.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpczfhfxan.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = max(values %counts);\n    my @max_nums = grep { $counts{$_} == $max_count } keys %counts;\n    return @max_nums;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp5grq2wne.pl line 12.\nBEGIN failed--compilation aborted at /tmp/tmp5grq2wne.pl line 12.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    for my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max = 0;\n    my $max_num;\n    for my $num (keys %count) {\n        if ($count{$num} > $max) {\n            $max = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmplhmwu0wx.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmplhmwu0wx.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max) {\n            $max = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max) {\n            $max = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpaukqo621.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpaukqo621.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max) {\n            $max = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max) {\n            $max = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %count;\n    foreach my $num (@$nums) {\n        $count{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %count) {\n        if ($count{$num} > $max_count) {\n            $max_count = $count{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmp7e8tt1vg.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmp7e8tt1vg.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    foreach my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpczfhfxan.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpczfhfxan.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts = ();\n    foreach my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num = undef;\n    foreach my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!ok!ok!",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    foreach my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max_count = 0;\n    my $max_num;\n    foreach my $num (keys %counts) {\n        if ($counts{$num} > $max_count) {\n            $max_count = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpczfhfxan.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpczfhfxan.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $num (@$nums) {\n        $counts{$num}++;\n    }\n    my $max = 0;\n    my $max_num;\n    for my $num (keys %counts) {\n        if ($counts{$num} > $max) {\n            $max = $counts{$num};\n            $max_num = $num;\n        }\n    }\n    return $max_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1665509928,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n    my %counts;\n    for my $n (@$nums) {\n        $counts{$n}++;\n    }\n    my $max_count = 0;\n    my $max_item;\n    while (my($item, $count) = each %counts) {\n        if ($count > $max_count) {\n            $max_count = $count;\n            $max_item = $item;\n        }\n    }\n    return $max_item;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1666122593,
      "stdout": "",
      "stderr": "Can't locate Test/Deep.pm in @INC (you may need to install the Test::Deep module) (@INC contains: /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/perl5 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/site_perl/5.34.1 /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1/x86_64-linux-thread-multi /home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/perl-5.34.1-2zl6xulqjttcl6s22da2nkbwez43nwnr/lib/5.34.1) at /tmp/tmpfys0_mwv.pl line 18.\nBEGIN failed--compilation aborted at /tmp/tmpfys0_mwv.pl line 18.\n",
      "exit_code": 2,
      "status": "Exception"
    }
  ]
}