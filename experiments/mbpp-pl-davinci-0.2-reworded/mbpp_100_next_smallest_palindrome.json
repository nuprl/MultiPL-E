{
  "name": "mbpp_100_next_smallest_palindrome",
  "language": "pl",
  "prompt": "# Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nsub next_smallest_palindrome {\n    my($num) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_100_next_smallest_palindrome.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&next_smallest_palindrome;\n        if(eq_deeply($candidate->(99),101)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1221),1331)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(120),121)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $num_str = \"$num\";\n    my $len = length($num_str);\n    my $mid = int($len / 2);\n    my $left = substr($num_str, 0, $mid);\n    my $right = substr($num_str, $mid + ($len % 2));\n    my $left_rev = reverse($left);\n    my $left_rev_num = int($left_rev);\n    my $right_num = int($right);\n    if ($left_rev_num > $right_num) {\n        return int($left . $left_rev);\n    }\n    my $left_num = int($left);\n    if ($len % 2 == 0) {\n        $left_num += 1;\n    } else {\n        my $mid_digit = substr($num_str, $mid, 1);\n        if ($mid_digit < 9) {\n            $mid_digit += 1;\n            $left_num = int($left . $mid_digit);\n        } else {\n            $left_num += 1;\n        }\n    }\n    $left = \"$left_num\";\n    $left_rev = reverse($left);\n    return int($left . $left_rev);\n}",
    "    my $digits = length($num);\n    my $half = int($digits/2);\n    my $left = substr($num, 0, $half);\n    my $right = substr($num, $digits-$half, $half);\n    my $left_rev = reverse($left);\n    my $right_rev = reverse($right);\n    if ($left_rev eq $right) {\n        return $num;\n    }\n    if ($left_rev lt $right) {\n        $left = $left + 1;\n        $left_rev = reverse($left);\n    }\n    my $palindrome = $left . $left_rev;\n    if ($digits % 2) {\n        $palindrome = substr($palindrome, 0, $half) . substr($num, $half, 1) . substr($palindrome, $half);\n    }\n    return $palindrome;\n}",
    "    my $str = sprintf(\"%d\", $num);\n    my $len = length($str);\n    my $left = substr($str, 0, int($len/2));\n    my $right = substr($str, int($len/2) + $len%2);\n    my $left_rev = reverse($left);\n    if ($left_rev lt $right) {\n        $left = sprintf(\"%0\".int($len/2).\"d\", $left + 1);\n        $left_rev = reverse($left);\n    }\n    my $palindrome = $left.$left_rev;\n    return $palindrome;\n}",
    "    my $palindrome = $num;\n    my $digits = length($num);\n    my $half_digits = $digits / 2;\n    my $left_half = substr($num, 0, $half_digits);\n    my $right_half = substr($num, $half_digits);\n    my $left_half_rev = reverse($left_half);\n    if ($left_half_rev < $right_half) {\n        $left_half++;\n        $left_half_rev = reverse($left_half);\n    }\n    $palindrome = $left_half . $left_half_rev;\n    return $palindrome;\n}",
    "    my $palindrome = $num;\n    while(!is_palindrome($palindrome)) {\n        $palindrome--;\n    }\n    return $palindrome;\n}",
    "    my $len = length($num);\n    my $half = int($len / 2);\n    my $left = substr($num, 0, $half);\n    my $right = substr($num, $len - $half);\n    my $left_dec = $left - 1;\n    my $left_inc = $left + 1;\n    my $left_dec_pal = $left_dec . reverse($left_dec);\n    my $left_inc_pal = $left_inc . reverse($left_inc);\n    my $left_pal = $left . reverse($left);\n    if ($len % 2 == 0) {\n        if ($left_dec_pal > $num) {\n            return $left_dec_pal;\n        } elsif ($left_pal > $num) {\n            return $left_pal;\n        } else {\n            return $left_inc_pal;\n        }\n    } else {\n        my $mid = substr($num, $half, 1);\n        my $left_dec_pal = $left_dec . $mid . reverse($left_dec);\n        my $left_pal = $left . $mid . reverse($left);\n        my $left_inc_pal = $left_inc . $mid . reverse($left_inc);\n        if ($left_dec_pal > $num) {\n            return $left_dec_pal;\n        } elsif ($left_pal > $num) {\n            return $left_pal;\n        } else {\n            return $left_inc_pal;\n        }\n    }\n}",
    "    my $len = length($num);\n    my $half = int($len / 2);\n    my $left = substr($num, 0, $half);\n    my $right = substr($num, $len - $half);\n    my $next = $left + 1;\n    if ($len % 2 == 1) {\n        $next = substr($next, 0, $half - 1) . substr($num, $half, 1) . substr($next, $half - 1);\n    }\n    if ($next > $right) {\n        return $next . reverse($next);\n    }\n    else {\n        return $left . reverse($left);\n    }\n}",
    "    my $str = $num;\n    my $len = length($str);\n    my $half = int($len / 2);\n    my $left = substr($str, 0, $half);\n    my $right = substr($str, $len - $half);\n    my $left_rev = reverse $left;\n    if ($left_rev eq $right) {\n        return $num;\n    }\n    my $left_int = int($left);\n    my $left_int_rev = int(reverse $left);\n    if ($left_int_rev > $left_int) {\n        $left = $left_int_rev;\n    } else {\n        $left = $left_int + 1;\n    }\n    $left_rev = reverse $left;\n    return int($left . $left_rev);\n}",
    "    my $str = $num;\n    my $len = length($str);\n    my $half = int($len / 2);\n    my $left = substr($str, 0, $half);\n    my $right = substr($str, $half + $len % 2);\n    my $left_rev = reverse($left);\n    my $right_rev = reverse($right);\n    if ($left_rev lt $right) {\n        $left = $left_rev;\n    } else {\n        $left = $left_rev;\n        $left++;\n    }\n    return $left . reverse($left);\n}",
    "    my $palindrome = $num;\n    while (!is_palindrome($palindrome)) {\n        $palindrome++;\n    }\n    return $palindrome;\n}",
    "    my $palindrome = $num;\n    my $len = length($num);\n    my $half = int($len / 2);\n    my $left = substr($num, 0, $half);\n    my $right = substr($num, $len - $half);\n    my $left_rev = reverse($left);\n    if ($left_rev > $right) {\n        $palindrome = $left . $left_rev;\n    } else {\n        $left++;\n        $left_rev = reverse($left);\n        $palindrome = $left . $left_rev;\n    }\n    return $palindrome;\n}",
    "    my $n = $num;\n    my $len = length($num);\n    my $half = int($len / 2);\n    my $left = substr($num, 0, $half);\n    my $right = substr($num, $len - $half);\n    my $left_rev = reverse($left);\n    if ($left_rev gt $right) {\n        $n = $left . $left_rev;\n    } else {\n        $left++;\n        $left_rev = reverse($left);\n        $n = $left . $left_rev;\n    }\n    return $n;\n}",
    "    my $len = length($num);\n    my $left = int($len / 2);\n    my $right = $len - $left;\n    my $left_num = substr($num, 0, $left);\n    my $right_num = substr($num, $right);\n    my $left_num_rev = reverse($left_num);\n    my $right_num_rev = reverse($right_num);\n    my $left_num_rev_int = int($left_num_rev);\n    my $right_num_rev_int = int($right_num_rev);\n    my $left_num_int = int($left_num);\n    my $right_num_int = int($right_num);\n    if ($left_num_rev_int < $right_num_int) {\n        $left_num_int++;\n        $left_num = sprintf(\"%0${left}d\", $left_num_int);\n        $left_num_rev = reverse($left_num);\n    }\n    return $left_num . $left_num_rev;\n}",
    "    my $num_str = $num;\n    my $num_len = length($num_str);\n    my $num_half = int($num_len / 2);\n    my $num_left = substr($num_str, 0, $num_half);\n    my $num_right = substr($num_str, $num_len - $num_half);\n    my $num_left_rev = reverse($num_left);\n    my $num_right_rev = reverse($num_right);\n    my $num_left_rev_int = int($num_left_rev);\n    my $num_right_rev_int = int($num_right_rev);\n    my $num_left_int = int($num_left);\n    my $num_right_int = int($num_right);\n    my $num_left_rev_str = $num_left_rev_int;\n    my $num_right_rev_str = $num_right_rev_int;\n    my $num_left_rev_len = length($num_left_rev_str);\n    my $num_right_rev_len = length($num_right_rev_str);\n    my $num_left_rev_pad = '0' x ($num_half - $num_left_rev_len);\n    my $num_right_rev_pad = '0' x ($num_half - $num_right_rev_len);\n    my $num_left_rev_str_pad = $num_left_rev_pad . $num_left_rev_str;\n    my $num_right_rev_str_pad = $num_right_rev_pad . $num_right_rev_str;\n    my $num_left_rev_str_pad_int = int($num_left_rev_str_pad);\n    my $num_right_rev_str_pad_int = int($num_right_rev_str_pad);\n    my $num_left_rev_str_pad_len = length($num_left_rev_str_pad);\n    my $num_right_rev_str_pad_len = length($num_right_rev_str_pad);",
    "    my $palindrome = $num;\n    while (!is_palindrome($palindrome)) {\n        $palindrome++;\n    }\n    return $palindrome;\n}",
    "    my $palindrome = $num;\n    while (!is_palindrome($palindrome)) {\n        $palindrome++;\n    }\n    return $palindrome;\n}",
    "    my $str = $num;\n    my $len = length($str);\n    my $i = 0;\n    my $j = $len - 1;\n    my $mid = int($len / 2);\n    my $left = substr($str, 0, $mid);\n    my $right = substr($str, $mid + ($len % 2), $mid);\n    my $left_rev = reverse($left);\n    my $right_rev = reverse($right);\n    my $left_len = length($left);\n    my $right_len = length($right);\n    my $left_num = int($left);\n    my $right_num = int($right);\n    my $left_rev_num = int($left_rev);\n    my $right_rev_num = int($right_rev);\n    my $left_rev_str = $left_rev;\n    my $right_rev_str = $right_rev;\n    my $left_rev_len = length($left_rev);\n    my $right_rev_len = length($right_rev);\n    my $left_rev_mid = int($left_rev_len / 2);\n    my $right_rev_mid = int($right_rev_len / 2);\n    my $left_rev_left = substr($left_rev, 0, $left_rev_mid);\n    my $left_rev_right = substr($left_rev, $left_rev_mid + ($left_rev_len % 2), $left_rev_mid);\n    my $right_rev_left = substr($right_rev, 0, $right_rev_mid);\n    my $right_rev_right = substr($right_rev, $right_rev_mid + ($right_rev_len % 2), $right_rev_mid);\n    my $left_rev_left_num = int($left_rev_left);\n    my $left_rev_right_num = int($left_rev_right);\n    my $right_rev_left_num = int($right_rev_left);\n    my $right_rev_right_num = int($right_rev_right);\n    my $left_rev_left_len =",
    "    my $len = length($num);\n    my $half = int($len/2);\n    my $left = substr($num, 0, $half);\n    my $right = substr($num, $half+$len%2);\n    my $next_left = $left;\n    if ($len % 2 == 0) {\n        $next_left = $left + 1;\n    }\n    my $next_right = reverse($next_left);\n    my $next_num = $next_left . $next_right;\n    return $next_num;\n}",
    "    my $str = $num;\n    my $len = length($str);\n    my $mid = int($len/2);\n    my $left = substr($str, 0, $mid);\n    my $right = substr($str, $mid + $len % 2);\n    my $next_left = $left;\n    my $next_right = $right;\n    if ($left eq reverse($right)) {\n        $next_left++;\n    }\n    $next_right = reverse($next_left);\n    return $next_left . substr($next_right, $len % 2);\n}",
    "    my $num_str = $num;\n    my $len = length($num_str);\n    my $is_odd = $len % 2;\n    my $half_len = int($len/2);\n    my $left = substr($num_str, 0, $half_len);\n    my $right = substr($num_str, $half_len + $is_odd);\n    my $left_rev = reverse($left);\n    if ($left_rev lt $right) {\n        $left = $left + 1;\n        $left_rev = reverse($left);\n    }\n    my $palindrome = $left . substr($left_rev, $is_odd);\n    return $palindrome;\n}"
  ]
}