{
  "name": "mbpp_776_count_vowels",
  "language": "pl",
  "prompt": "# Write a function to count those characters which have vowels as their neighbors in the given string.\nsub count_vowels {\n    my($test_str) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_776_count_vowels.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_vowels;\n        if(eq_deeply($candidate->(\"bestinstareels\"),7)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"partofthejourneyistheend\"),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"amazonprime\"),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @vowels = ('a','e','i','o','u');\n    my $count = 0;\n    my @chars = split(//,$test_str);\n    for(my $i=0;$i<scalar(@chars);$i++) {\n        if(grep(/^$chars[$i]$/,@vowels)) {\n            if($i>0 && grep(/^$chars[$i-1]$/,@vowels)) {\n                $count++;\n            }\n            if($i<scalar(@chars)-1 && grep(/^$chars[$i+1]$/,@vowels)) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    my @vowels = ('a','e','i','o','u');\n    my @str_arr = split(//,$test_str);\n    for(my $i=0;$i<=$#str_arr;$i++){\n        if(grep(/^$str_arr[$i]$/,@vowels)){\n            if($i>0 && grep(/^$str_arr[$i-1]$/,@vowels)){\n                $count++;\n            }\n            if($i<$#str_arr && grep(/^$str_arr[$i+1]$/,@vowels)){\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n    my @chars = split(//, $test_str);\n    for (my $i = 0; $i < scalar(@chars); $i++) {\n        if (grep {$_ eq $chars[$i]} @vowels) {\n            if ($i > 0 && grep {$_ eq $chars[$i - 1]} @vowels) {\n                $count++;\n            }\n            if ($i < scalar(@chars) - 1 && grep {$_ eq $chars[$i + 1]} @vowels) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    my @vowels = ('a','e','i','o','u');\n    my @str_arr = split(//,$test_str);\n    for (my $i=0;$i<=$#str_arr;$i++) {\n        if (grep(/^$str_arr[$i]$/,@vowels)) {\n            if ($i==0) {\n                if (grep(/^$str_arr[$i+1]$/,@vowels)) {\n                    $count++;\n                }\n            }\n            elsif ($i==$#str_arr) {\n                if (grep(/^$str_arr[$i-1]$/,@vowels)) {\n                    $count++;\n                }\n            }\n            else {\n                if (grep(/^$str_arr[$i-1]$/,@vowels) || grep(/^$str_arr[$i+1]$/,@vowels)) {\n                    $count++;\n                }\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    my $vowels = \"aeiou\";\n    for (my $i = 0; $i < length($test_str); $i++) {\n        if (index($vowels, substr($test_str, $i, 1)) != -1) {\n            if ($i > 0 && index($vowels, substr($test_str, $i - 1, 1)) != -1) {\n                $count++;\n            }\n            if ($i < length($test_str) - 1 && index($vowels, substr($test_str, $i + 1, 1)) != -1) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $vowels = 0;\n    for(my $i = 0; $i < length($test_str); $i++) {\n        my $char = substr($test_str, $i, 1);\n        if($char =~ /[aeiou]/i) {\n            if($i > 0) {\n                my $prev_char = substr($test_str, $i - 1, 1);\n                if($prev_char =~ /[aeiou]/i) {\n                    $vowels++;\n                }\n            }\n            if($i < length($test_str) - 1) {\n                my $next_char = substr($test_str, $i + 1, 1);\n                if($next_char =~ /[aeiou]/i) {\n                    $vowels++;\n                }\n            }\n        }\n    }\n    return $vowels;\n}",
    "    my $count = 0;\n    my @vowels = qw(a e i o u);\n    my @chars = split //, $test_str;\n    for(my $i = 0; $i < scalar @chars; $i++) {\n        if(grep {$_ eq $chars[$i]} @vowels) {\n            if($i > 0 && grep {$_ eq $chars[$i-1]} @vowels) {\n                $count++;\n            }\n            if($i < scalar @chars - 1 && grep {$_ eq $chars[$i+1]} @vowels) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n    for (my $i = 0; $i < length($test_str); $i++) {\n        if (grep {$_ eq substr($test_str, $i, 1)} @vowels) {\n            if ($i > 0) {\n                if (grep {$_ eq substr($test_str, $i - 1, 1)} @vowels) {\n                    $count++;\n                }\n            }\n            if ($i < length($test_str) - 1) {\n                if (grep {$_ eq substr($test_str, $i + 1, 1)} @vowels) {\n                    $count++;\n                }\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    my $i;\n    for($i = 0; $i < length($test_str); $i++) {\n        if(($i == 0) && (is_vowel(substr($test_str, $i + 1, 1)))) {\n            $count++;\n        } elsif(($i == length($test_str) - 1) && (is_vowel(substr($test_str, $i - 1, 1)))) {\n            $count++;\n        } elsif((is_vowel(substr($test_str, $i - 1, 1))) && (is_vowel(substr($test_str, $i + 1, 1)))) {\n            $count++;\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    for(my $i = 0; $i < length($test_str); $i++) {\n        if(($i == 0 || $i == length($test_str) - 1) && $test_str =~ /[aeiou]/i) {\n            $count++;\n        }\n        elsif($test_str =~ /[aeiou]/i && $test_str =~ /[aeiou]/i) {\n            $count++;\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    my @vowels = qw(a e i o u);\n    my @chars = split(//, $test_str);\n    for (my $i = 0; $i < @chars; $i++) {\n        if (grep {$chars[$i] eq $_} @vowels) {\n            if ($i > 0 && grep {$chars[$i - 1] eq $_} @vowels) {\n                $count++;\n            }\n            if ($i < @chars - 1 && grep {$chars[$i + 1] eq $_} @vowels) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    my $vowels = \"aeiou\";\n    for (my $i = 0; $i < length($test_str); $i++) {\n        if (index($vowels, substr($test_str, $i, 1)) != -1) {\n            if ($i > 0 && index($vowels, substr($test_str, $i - 1, 1)) != -1) {\n                $count++;\n            }\n            if ($i < length($test_str) - 1 && index($vowels, substr($test_str, $i + 1, 1)) != -1) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    for (my $i = 0; $i < length($test_str); $i++) {\n        my $char = substr($test_str, $i, 1);\n        if ($char =~ /[aeiou]/i) {\n            if ($i == 0) {\n                $count++ if (substr($test_str, $i+1, 1) =~ /[aeiou]/i);\n            }\n            elsif ($i == length($test_str) - 1) {\n                $count++ if (substr($test_str, $i-1, 1) =~ /[aeiou]/i);\n            }\n            else {\n                $count++ if (substr($test_str, $i-1, 1) =~ /[aeiou]/i || substr($test_str, $i+1, 1) =~ /[aeiou]/i);\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    for (my $i = 0; $i < length($test_str); $i++) {\n        if (is_vowel(substr($test_str, $i, 1)) && is_vowel(substr($test_str, $i + 1, 1))) {\n            $count++;\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n    my @test_arr = split(//, $test_str);\n    for (my $i = 0; $i < @test_arr; $i++) {\n        if (grep {$_ eq $test_arr[$i]} @vowels) {\n            if ($i > 0 && $i < @test_arr - 1) {\n                if (grep {$_ eq $test_arr[$i - 1]} @vowels || grep {$_ eq $test_arr[$i + 1]} @vowels) {\n                    $count++;\n                }\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n    my @str_arr = split(//, $test_str);\n    for (my $i = 0; $i < scalar(@str_arr); $i++) {\n        if (grep {$_ eq $str_arr[$i]} @vowels) {\n            if ($i > 0 && grep {$_ eq $str_arr[$i - 1]} @vowels) {\n                $count++;\n            }\n            if ($i < scalar(@str_arr) - 1 && grep {$_ eq $str_arr[$i + 1]} @vowels) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    for(my $i = 0; $i < length($test_str); $i++) {\n        if(($i == 0 || $i == length($test_str)-1) && ($test_str =~ /[aeiou]/i)) {\n            $count++;\n        }\n        elsif($test_str =~ /[aeiou]/i) {\n            $count++;\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n    my @chars = split(//, $test_str);\n    for (my $i = 0; $i < scalar(@chars); $i++) {\n        if (grep {$_ eq $chars[$i]} @vowels) {\n            if ($i > 0 && grep {$_ eq $chars[$i-1]} @vowels) {\n                $count++;\n            }\n            if ($i < scalar(@chars) - 1 && grep {$_ eq $chars[$i+1]} @vowels) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    my @vowels = ('a','e','i','o','u');\n    my @test_str = split(\"\",$test_str);\n    for(my $i=0; $i<=$#test_str; $i++) {\n        if(grep(/^$test_str[$i]$/,@vowels)) {\n            if($i != 0) {\n                if(grep(/^$test_str[$i-1]$/,@vowels)) {\n                    $count++;\n                }\n            }\n            if($i != $#test_str) {\n                if(grep(/^$test_str[$i+1]$/,@vowels)) {\n                    $count++;\n                }\n            }\n        }\n    }\n    return $count;\n}",
    "    my $count = 0;\n    for(my $i = 0; $i < length($test_str); $i++) {\n        my $char = substr($test_str, $i, 1);\n        if($char =~ /[aeiou]/i) {\n            if($i > 0) {\n                my $prev_char = substr($test_str, $i - 1, 1);\n                if($prev_char =~ /[aeiou]/i) {\n                    $count++;\n                }\n            }\n            if($i < length($test_str) - 1) {\n                my $next_char = substr($test_str, $i + 1, 1);\n                if($next_char =~ /[aeiou]/i) {\n                    $count++;\n                }\n            }\n        }\n    }\n    return $count;\n}"
  ]
}