{
  "name": "mbpp_740_tuple_to_dict",
  "language": "pl",
  "prompt": "# Write a function to convert the given array to a key-value hash using adjacent elements. https://www.geeksforgeeks.org/plthon-convert-array-to-adjacent-pair-hash/\nsub tuple_to_dict {\n    my($test_tup) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_740_tuple_to_dict.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&tuple_to_dict;\n        if(eq_deeply($candidate->([1, 5, 7, 10, 13, 5]),{1 => 5, 7 => 10, 13 => 5})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6]),{1 => 2, 3 => 4, 5 => 6})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7, 8, 9, 10, 11, 12]),{7 => 8, 9 => 10, 11 => 12})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my %test_dict;\n    for (my $i = 0; $i < $#{$test_tup}; $i += 2) {\n        $test_dict{$test_tup->[$i]} = $test_tup->[$i+1];\n    }\n    return %test_dict;\n}",
    "    my %test_dict = @$test_tup;\n    return %test_dict;\n}",
    "    my %dict;\n    for(my $i = 0; $i < scalar(@$test_tup); $i += 2) {\n        $dict{$test_tup->[$i]} = $test_tup->[$i + 1];\n    }\n    return \\%dict;\n}",
    "    my %test_dict;\n    for (my $i = 0; $i < scalar(@$test_tup); $i += 2) {\n        $test_dict{$test_tup->[$i]} = $test_tup->[$i+1];\n    }\n    return %test_dict;\n}",
    "    my %test_dict = @$test_tup;\n    return %test_dict;\n}",
    "    my %test_dict;\n    for(my $i=0; $i<scalar(@$test_tup); $i+=2) {\n        $test_dict{$test_tup->[$i]} = $test_tup->[$i+1];\n    }\n    return %test_dict;\n}",
    "    my %test_dict;\n    for (my $i = 0; $i < scalar @$test_tup; $i += 2) {\n        $test_dict{$test_tup->[$i]} = $test_tup->[$i + 1];\n    }\n    return %test_dict;\n}",
    "    my %test_dict;\n    for (my $i = 0; $i < scalar @$test_tup; $i += 2) {\n        $test_dict{$test_tup->[$i]} = $test_tup->[$i+1];\n    }\n    return %test_dict;\n}",
    "    my %test_dict;\n    for (my $i = 0; $i < scalar(@$test_tup); $i += 2) {\n        $test_dict{$test_tup->[$i]} = $test_tup->[$i + 1];\n    }\n    return %test_dict;\n}",
    "    my %test_dict;\n    while (my($key, $value) = splice(@$test_tup, 0, 2)) {\n        $test_dict{$key} = $value;\n    }\n    return %test_dict;\n}",
    "    my %test_dict;\n    for (my $i = 0; $i < scalar(@$test_tup); $i += 2) {\n        $test_dict{$test_tup->[$i]} = $test_tup->[$i + 1];\n    }\n    return %test_dict;\n}",
    "    my %test_dict = @$test_tup;\n    return %test_dict;\n}",
    "    my %test_dict;\n    for(my $i = 0; $i < scalar(@$test_tup); $i += 2) {\n        $test_dict{$test_tup->[$i]} = $test_tup->[$i + 1];\n    }\n    return %test_dict;\n}",
    "    my %test_dict = @$test_tup;\n    return %test_dict;\n}",
    "    my %test_dict;\n    for (my $i = 0; $i < scalar(@$test_tup); $i += 2) {\n        $test_dict{$test_tup->[$i]} = $test_tup->[$i+1];\n    }\n    return %test_dict;\n}",
    "    my %test_dict;\n    for(my $i = 0; $i < @$test_tup; $i += 2) {\n        $test_dict{$test_tup->[$i]} = $test_tup->[$i + 1];\n    }\n    return %test_dict;\n}",
    "    my %test_dict;\n    for(my $i = 0; $i < scalar(@$test_tup); $i += 2) {\n        $test_dict{$test_tup->[$i]} = $test_tup->[$i + 1];\n    }\n    return %test_dict;\n}",
    "    my %test_dict = @$test_tup;\n    return %test_dict;\n}",
    "    my %test_dict = @$test_tup;\n    return %test_dict;\n}",
    "    my %test_dict = @$test_tup;\n    return %test_dict;\n}"
  ]
}