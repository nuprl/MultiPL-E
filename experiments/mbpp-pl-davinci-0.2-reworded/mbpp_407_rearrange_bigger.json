{
  "name": "mbpp_407_rearrange_bigger",
  "language": "pl",
  "prompt": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_407_rearrange_bigger.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}",
    "    my @digits = split(//, $n);\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join('', @digits);\n}",
    "    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    return -1 if $i < 0;\n    my $j = $#digits;\n    while ($j > $i && $digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}",
    "    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}",
    "    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}",
    "    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}",
    "    my @digits = split //, $n;\n    my $i = $#digits;\n    while ($i > 0 && $digits[$i-1] >= $digits[$i]) {\n        $i--;\n    }\n    if ($i == 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$i-1] >= $digits[$j]) {\n        $j--;\n    }\n    @digits[$i-1, $j] = @digits[$j, $i-1];\n    @digits[$i..$#digits] = reverse @digits[$i..$#digits];\n    return join '', @digits;\n}",
    "    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    return -1 if $i < 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}",
    "    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    return -1 if $i < 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}",
    "    my @digits = split //, $n;\n    my $i = $#digits;\n    while ($i > 0 && $digits[$i-1] >= $digits[$i]) {\n        $i--;\n    }\n    if ($i == 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i-1]) {\n        $j--;\n    }\n    @digits[$i-1, $j] = @digits[$j, $i-1];\n    @digits[$i..$#digits] = reverse @digits[$i..$#digits];\n    return join '', @digits;\n}",
    "    my @digits = split //, $n;\n    my $i = $#digits;\n    while ($i > 0 && $digits[$i-1] >= $digits[$i]) {\n        $i--;\n    }\n    if ($i == 0) {\n        return undef;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i-1]) {\n        $j--;\n    }\n    @digits[$i-1, $j] = @digits[$j, $i-1];\n    @digits[$i..$#digits] = reverse @digits[$i..$#digits];\n    return join '', @digits;\n}",
    "    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}",
    "    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}",
    "    my @digits = split //, $n;\n    my $i = $#digits;\n    while ($i > 0 && $digits[$i-1] >= $digits[$i]) {\n        $i--;\n    }\n    return -1 if $i == 0;\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i-1]) {\n        $j--;\n    }\n    @digits[$i-1, $j] = @digits[$j, $i-1];\n    @digits[$i..$#digits] = reverse @digits[$i..$#digits];\n    return join '', @digits;\n}",
    "    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}",
    "    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($j > $i && $digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}",
    "    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    return -1 if $i < 0;\n    my $j = $#digits;\n    while ($j > $i && $digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join '', @digits;\n}",
    "    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}",
    "    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i + 1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i + 1 .. $#digits] = reverse @digits[$i + 1 .. $#digits];\n    return join \"\", @digits;\n}",
    "    my @digits = split //, $n;\n    my $i = $#digits - 1;\n    while ($i >= 0 && $digits[$i] >= $digits[$i+1]) {\n        $i--;\n    }\n    if ($i < 0) {\n        return -1;\n    }\n    my $j = $#digits;\n    while ($digits[$j] <= $digits[$i]) {\n        $j--;\n    }\n    @digits[$i, $j] = @digits[$j, $i];\n    @digits[$i+1..$#digits] = reverse @digits[$i+1..$#digits];\n    return join '', @digits;\n}"
  ]
}