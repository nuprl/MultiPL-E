{
  "name": "mbpp_475_sort_counter",
  "language": "pl",
  "prompt": "# Write a function to sort a hash by value.\nsub sort_counter {\n    my($dict1) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_475_sort_counter.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_counter;\n        if(eq_deeply($candidate->({\"Math\" => 81, \"Physics\" => 83, \"Chemistry\" => 87}),[[\"Chemistry\", 87], [\"Physics\", 83], [\"Math\", 81]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Math\" => 400, \"Physics\" => 300, \"Chemistry\" => 250}),[[\"Math\", 400], [\"Physics\", 300], [\"Chemistry\", 250]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Math\" => 900, \"Physics\" => 1000, \"Chemistry\" => 1250}),[[\"Chemistry\", 1250], [\"Physics\", 1000], [\"Math\", 900]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @sorted_keys = sort { $dict1->{$b} <=> $dict1->{$a} } keys %$dict1;\n    return @sorted_keys;\n}",
    "    my @sorted = sort { $dict1->{$b} <=> $dict1->{$a} } keys %$dict1;\n    return @sorted;\n}",
    "    my @sorted_keys = sort { $dict1->{$b} <=> $dict1->{$a} } keys %$dict1;\n    return @sorted_keys;\n}",
    "    my @sorted_keys = sort {$dict1->{$b} <=> $dict1->{$a}} keys %$dict1;\n    my @sorted_values = @$dict1{@sorted_keys};\n    return (\\@sorted_keys, \\@sorted_values);\n}",
    "    my @sorted_keys = sort {$dict1->{$b} <=> $dict1->{$a}} keys %$dict1;\n    return @sorted_keys;\n}",
    "    my @sorted_keys = sort { $dict1->{$b} <=> $dict1->{$a} } keys %$dict1;\n    return @sorted_keys;\n}",
    "    my @sorted_keys = sort { $dict1->{$b} <=> $dict1->{$a} } keys %$dict1;\n    return @sorted_keys;\n}",
    "    my @sorted_keys = sort { $dict1->{$b} <=> $dict1->{$a} } keys %$dict1;\n    return @sorted_keys;\n}",
    "    my @sorted_keys = sort {$dict1->{$b} <=> $dict1->{$a}} keys %$dict1;\n    return @sorted_keys;\n}",
    "    my @sorted_keys = sort { $dict1->{$b} <=> $dict1->{$a} } keys %$dict1;\n    return @sorted_keys;\n}",
    "    my @dict1 = sort {$dict1->{$b} <=> $dict1->{$a}} keys %$dict1;\n    return @dict1;\n}",
    "    my @sorted = sort { $dict1->{$b} <=> $dict1->{$a} } keys %$dict1;\n    return @sorted;\n}",
    "    my @sorted_keys = sort { $dict1->{$b} <=> $dict1->{$a} } keys %$dict1;\n    return @sorted_keys;\n}",
    "    my @sorted_keys = sort { $dict1->{$b} <=> $dict1->{$a} } keys %$dict1;\n    return @sorted_keys;\n}",
    "    my @sorted_keys = sort { $dict1->{$b} <=> $dict1->{$a} } keys %$dict1;\n    return @sorted_keys;\n}",
    "    my @sorted_keys = sort { $dict1->{$b} <=> $dict1->{$a} } keys %$dict1;\n    return @sorted_keys;\n}",
    "    my @sorted_keys = sort { $dict1->{$b} <=> $dict1->{$a} } keys %$dict1;\n    return @sorted_keys;\n}",
    "    my @sorted_keys = sort { $dict1->{$b} <=> $dict1->{$a} } keys %$dict1;\n    return @sorted_keys;\n}",
    "    my @sorted_keys = sort { $dict1->{$b} <=> $dict1->{$a} } keys %$dict1;\n    return @sorted_keys;\n}",
    "    my(%dict2) = ();\n    foreach my $key (sort {$dict1->{$b} <=> $dict1->{$a}} keys %$dict1) {\n        $dict2{$key} = $dict1->{$key};\n    }\n    return %dict2;\n}"
  ]
}