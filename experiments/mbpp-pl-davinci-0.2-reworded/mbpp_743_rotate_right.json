{
  "name": "mbpp_743_rotate_right",
  "language": "pl",
  "prompt": "# Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/plthon-program-right-rotate-array-n/\nsub rotate_right {\n    my($list, $m) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_743_rotate_right.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rotate_right;\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @rotated = ();\n    for my $i (0..$#$list) {\n        push @rotated, $list->[($i + $m) % @$list];\n    }\n    return \\@rotated;\n}",
    "    my @rotated_list = ();\n    for (my $i = 0; $i < scalar(@$list); $i++) {\n        my $new_index = ($i + $m) % scalar(@$list);\n        $rotated_list[$new_index] = $list->[$i];\n    }\n    return @rotated_list;\n}",
    "    my @rotated_list = ();\n    for (my $i = 0; $i < scalar @$list; $i++) {\n        $rotated_list[($i + $m) % scalar @$list] = $list->[$i];\n    }\n    return @rotated_list;\n}",
    "    my @result = ();\n    for (my $i = 0; $i < scalar @$list; $i++) {\n        push @result, $list->[($i + $m) % scalar @$list];\n    }\n    return @result;\n}",
    "    my @rotated = @$list;\n    for (my $i = 0; $i < $m; $i++) {\n        my $last = pop @rotated;\n        unshift @rotated, $last;\n    }\n    return @rotated;\n}",
    "    my @rotated = ();\n    for my $i (0..$#{$list}) {\n        push @rotated, $list->[($i + $m) % scalar(@{$list})];\n    }\n    return \\@rotated;\n}",
    "    my @result = ();\n    my $n = scalar @$list;\n    for (my $i = 0; $i < $n; $i++) {\n        push @result, $list->[($i + $m) % $n];\n    }\n    return @result;\n}",
    "    my @result = ();\n    for (my $i = 0; $i < scalar @$list; $i++) {\n        my $new_index = ($i + $m) % scalar @$list;\n        $result[$new_index] = $list->[$i];\n    }\n    return @result;\n}",
    "    my @result = ();\n    for (my $i = 0; $i < @$list; $i++) {\n        push @result, $list->[($i + $m) % @$list];\n    }\n    return @result;\n}",
    "    my @rotated_list = ();\n    for my $i (0 .. $#{$list}) {\n        push @rotated_list, $list->[($i + $m) % scalar @{$list}];\n    }\n    return @rotated_list;\n}",
    "    my @result;\n    for (my $i = 0; $i < scalar(@$list); $i++) {\n        $result[($i + $m) % scalar(@$list)] = $list->[$i];\n    }\n    return @result;\n}",
    "    my @result;\n    my $n = scalar @$list;\n    for my $i (0..$n-1) {\n        my $j = ($i + $m) % $n;\n        $result[$j] = $list->[$i];\n    }\n    return @result;\n}",
    "    my @result = ();\n    for (my $i = 0; $i < scalar(@$list); $i++) {\n        push(@result, $list->[($i + $m) % scalar(@$list)]);\n    }\n    return @result;\n}",
    "    my $n = scalar @$list;\n    my @result = @$list;\n    for (my $i = 0; $i < $n; $i++) {\n        $result[($i + $m) % $n] = $list->[$i];\n    }\n    return @result;\n}",
    "    my @result = ();\n    for (my $i = 0; $i < scalar(@$list); $i++) {\n        $result[($i + $m) % scalar(@$list)] = $list->[$i];\n    }\n    return @result;\n}",
    "    my @rotated = @{$list};\n    for(my $i = 0; $i < $m; $i++) {\n        my $last = pop(@rotated);\n        unshift(@rotated, $last);\n    }\n    return @rotated;\n}",
    "    my @rotated = ();\n    my $n = scalar(@$list);\n    for (my $i = 0; $i < $n; $i++) {\n        $rotated[($i + $m) % $n] = $list->[$i];\n    }\n    return @rotated;\n}",
    "    my @rotated = @$list;\n    for (my $i = 0; $i < $m; $i++) {\n        my $last = pop @rotated;\n        unshift @rotated, $last;\n    }\n    return @rotated;\n}",
    "    my @result = ();\n    for (my $i = 0; $i < scalar @$list; $i++) {\n        $result[($i + $m) % scalar @$list] = $list->[$i];\n    }\n    return @result;\n}",
    "    my @result = ();\n    my $n = scalar(@$list);\n    for (my $i = 0; $i < $n; $i++) {\n        push @result, $list->[($i + $m) % $n];\n    }\n    return @result;\n}"
  ]
}