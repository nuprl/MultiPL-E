{
  "name": "mbpp_308_large_product",
  "language": "pl",
  "prompt": "# Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nsub large_product {\n    my($nums1, $nums2, $N) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_308_large_product.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&large_product;\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $max_product = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    for my $i (0..$#$nums1) {\n        for my $j (0..$#$nums2) {\n            my $product = $nums1->[$i] * $nums2->[$j];\n            if ($product > $max_product) {\n                $max_product = $product;\n                $max_i = $i;\n                $max_j = $j;\n            }\n        }\n    }\n    my @result = ($max_product, $max_i, $max_j);\n    for my $i (0..$#$nums1) {\n        for my $j (0..$#$nums2) {\n            my $product = $nums1->[$i] * $nums2->[$j];\n            if ($product < $max_product) {\n                next;\n            }\n            if ($product == $max_product) {\n                if ($i == $max_i && $j == $max_j) {\n                    next;\n                }\n            }\n            if (@result < $N) {\n                push @result, $product;\n                push @result, $i;\n                push @result, $j;\n            }\n            else {\n                for my $k (0..$#result) {\n                    if ($k % 3 == 0) {\n                        if ($product > $result[$k]) {\n                            $result[$k] = $product;\n                            $result[$k+1] = $i;\n                            $result[$k+2] = $j;\n                            last;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    while ($i < @$nums1 && $j < @$nums2) {\n        if ($nums1->[$i] > $nums2->[$j]) {\n            push @result, [$nums1->[$i], $nums2->[$j]];\n            $i++;\n        } else {\n            push @result, [$nums1->[$i], $nums2->[$j]];\n            $j++;\n        }\n    }\n    while ($i < @$nums1) {\n        push @result, [$nums1->[$i], $nums2->[-1]];\n        $i++;\n    }\n    while ($j < @$nums2) {\n        push @result, [$nums1->[-1], $nums2->[$j]];\n        $j++;\n    }\n    return @result[0..$N-1];\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = scalar(@$nums1);\n    my $n = scalar(@$nums2);\n    while ($i < $m && $j < $n) {\n        if ($nums1->[$i] > $nums2->[$j]) {\n            $result[$k++] = $nums1->[$i++];\n        } else {\n            $result[$k++] = $nums2->[$j++];\n        }\n    }\n    while ($i < $m) {\n        $result[$k++] = $nums1->[$i++];\n    }\n    while ($j < $n) {\n        $result[$k++] = $nums2->[$j++];\n    }\n    return $result[$N - 1];\n}",
    "    my @results;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = scalar @$nums1;\n    my $n = scalar @$nums2;\n    while ($i < $m && $j < $n) {\n        if ($nums1->[$i] < $nums2->[$j]) {\n            $results[$k++] = $nums1->[$i++];\n        } else {\n            $results[$k++] = $nums2->[$j++];\n        }\n    }\n    while ($i < $m) {\n        $results[$k++] = $nums1->[$i++];\n    }\n    while ($j < $n) {\n        $results[$k++] = $nums2->[$j++];\n    }\n    my @res;\n    for (my $i = $N - 1; $i >= 0; $i--) {\n        push @res, $results[$i];\n    }\n    return \\@res;\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $n = scalar(@$nums1);\n    my $m = scalar(@$nums2);\n    my $max = 0;\n    my $min = 0;\n    my $max_i = 0;\n    my $min_i = 0;\n    my $max_j = 0;\n    my $min_j = 0;\n    while ($i < $n && $j < $m) {\n        if ($nums1->[$i] < $nums2->[$j]) {\n            $min = $nums1->[$i];\n            $min_i = $i;\n            $min_j = $j;\n            $i++;\n        } else {\n            $min = $nums2->[$j];\n            $min_i = $i;\n            $min_j = $j;\n            $j++;\n        }\n        if ($k < $N) {\n            push @result, [$min_i, $min_j];\n            $k++;\n        } else {\n            if ($min > $max) {\n                $max = $min;\n                $max_i = $min_i;\n                $max_j = $min_j;\n            }\n            if ($max_i == $n - 1 && $max_j == $m - 1) {\n                last;\n            }\n            if ($max_i == $n - 1) {\n                $max_j++;\n                $max = $nums2->[$max_j];\n            } elsif ($max_j == $m - 1) {\n                $max_i++;\n                $max = $nums1->[$max_i];\n            } else {\n                if ($nums1->[$max_i + 1] > $nums2->[$max_j + 1]) {\n                    $max_i++;\n                    $max = $nums1->[$max_i];\n                } else {\n                    $max_j++;\n                    $max = $nums2->",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = @$nums1;\n    my $n = @$nums2;\n    while ($i < $m && $j < $n && $k < $N) {\n        if ($nums1->[$i] < $nums2->[$j]) {\n            $result[$k++] = $nums1->[$i++];\n        } else {\n            $result[$k++] = $nums2->[$j++];\n        }\n    }\n    while ($i < $m && $k < $N) {\n        $result[$k++] = $nums1->[$i++];\n    }\n    while ($j < $n && $k < $N) {\n        $result[$k++] = $nums2->[$j++];\n    }\n    return @result;\n}",
    "    my @products = ();\n    for my $i (0..$#{$nums1}) {\n        for my $j (0..$#{$nums2}) {\n            push @products, $nums1->[$i] * $nums2->[$j];\n        }\n    }\n    @products = sort {$b <=> $a} @products;\n    return @products[0..$N-1];\n}",
    "    my @ret;\n    my $i = 0;\n    my $j = 0;\n    while ($i < @$nums1 && $j < @$nums2) {\n        if ($nums1->[$i] > $nums2->[$j]) {\n            push @ret, [$nums1->[$i], $nums2->[$j]];\n            $j++;\n        } else {\n            push @ret, [$nums1->[$i], $nums2->[$j]];\n            $i++;\n        }\n    }\n    while ($i < @$nums1) {\n        push @ret, [$nums1->[$i], $nums2->[-1]];\n        $i++;\n    }\n    while ($j < @$nums2) {\n        push @ret, [$nums1->[-1], $nums2->[$j]];\n        $j++;\n    }\n    return @ret[0..$N-1];\n}",
    "    my @products;\n    for my $i (0 .. $#$nums1) {\n        for my $j (0 .. $#$nums2) {\n            push @products, $nums1->[$i] * $nums2->[$j];\n        }\n    }\n    return [sort {$b <=> $a} @products[0 .. $N - 1]];\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $n = scalar(@$nums1);\n    my $m = scalar(@$nums2);\n    my $count = 0;\n    while ($count < $N) {\n        my $product = $nums1->[$i] * $nums2->[$j];\n        if ($i == $n - 1 && $j == $m - 1) {\n            push @result, $product;\n            $count++;\n            last;\n        }\n        if ($i == $n - 1) {\n            push @result, $product;\n            $j++;\n            $count++;\n            next;\n        }\n        if ($j == $m - 1) {\n            push @result, $product;\n            $i++;\n            $count++;\n            next;\n        }\n        my $product1 = $nums1->[$i] * $nums2->[$j + 1];\n        my $product2 = $nums1->[$i + 1] * $nums2->[$j];\n        if ($product1 > $product2) {\n            push @result, $product1;\n            $j++;\n            $count++;\n        } else {\n            push @result, $product2;\n            $i++;\n            $count++;\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $m = scalar @$nums1;\n    my $n = scalar @$nums2;\n    while ($i < $m && $j < $n) {\n        if ($nums1->[$i] < $nums2->[$j]) {\n            push @result, [$nums1->[$i], $nums2->[$j]];\n            $i++;\n        } else {\n            push @result, [$nums1->[$i], $nums2->[$j]];\n            $j++;\n        }\n    }\n    while ($i < $m) {\n        push @result, [$nums1->[$i], $nums2->[$n-1]];\n        $i++;\n    }\n    while ($j < $n) {\n        push @result, [$nums1->[$m-1], $nums2->[$j]];\n        $j++;\n    }\n    return @result[0..$N-1];\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    while($i < @$nums1 && $j < @$nums2 && @result < $N) {\n        my $product = $nums1->[$i] * $nums2->[$j];\n        if($product > $nums1->[$i] * $nums2->[$j+1]) {\n            $i++;\n        } else {\n            $j++;\n        }\n        push @result, $product;\n    }\n    return \\@result;\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = scalar @$nums1;\n    my $n = scalar @$nums2;\n    my $max = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_k = 0;\n    my $max_m = 0;\n    my $max_n = 0;\n    my $max_product = 0;\n    my $product = 0;\n    my $i_flag = 0;\n    my $j_flag = 0;\n    my $k_flag = 0;\n    my $m_flag = 0;\n    my $n_flag = 0;\n    my $product_flag = 0;\n    my $max_product_flag = 0;\n    my $max_flag = 0;\n    my $max_i_flag = 0;\n    my $max_j_flag = 0;\n    my $max_k_flag = 0;\n    my $max_m_flag = 0;\n    my $max_n_flag = 0;\n    my $max_product_flag = 0;\n    my $max_flag = 0;\n    my $max_i_flag = 0;\n    my $max_j_flag = 0;\n    my $max_k_flag = 0;\n    my $max_m_flag = 0;\n    my $max_n_flag = 0;\n    my $max_product_flag = 0;\n    my $max_flag = 0;\n    my $max_i_flag = 0;\n    my $max_j_flag = 0;\n    my $max_k_flag = 0;\n    my $max_m_flag = 0;\n    my $max_n_flag = 0;\n    my $max_product_flag = 0;\n    my $max_flag = 0;\n    my $max_i_flag = 0;\n    my $max_j_flag = 0;\n    my $max_k_flag = 0;\n    my $max_m_flag = 0;\n   ",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    while ($i < @$nums1 && $j < @$nums2) {\n        if ($nums1->[$i] > $nums2->[$j]) {\n            push @result, $nums1->[$i] * $nums2->[$j];\n            $j++;\n        } else {\n            push @result, $nums1->[$i] * $nums2->[$j];\n            $i++;\n        }\n    }\n    while ($i < @$nums1) {\n        push @result, $nums1->[$i] * $nums2->[-1];\n        $i++;\n    }\n    while ($j < @$nums2) {\n        push @result, $nums1->[-1] * $nums2->[$j];\n        $j++;\n    }\n    return [sort {$b <=> $a} @result[0..$N-1]];\n}",
    "    my @result = ();\n    my $i = 0;\n    my $j = 0;\n    my $n1 = scalar(@$nums1);\n    my $n2 = scalar(@$nums2);\n    while ($i < $n1 && $j < $n2) {\n        if ($nums1->[$i] < $nums2->[$j]) {\n            push @result, [$nums1->[$i], $nums2->[$j]];\n            $i++;\n        } else {\n            push @result, [$nums1->[$i], $nums2->[$j]];\n            $j++;\n        }\n    }\n    while ($i < $n1) {\n        push @result, [$nums1->[$i], $nums2->[$n2 - 1]];\n        $i++;\n    }\n    while ($j < $n2) {\n        push @result, [$nums1->[$n1 - 1], $nums2->[$j]];\n        $j++;\n    }\n    return @result[0..$N - 1];\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = scalar(@$nums1);\n    my $n = scalar(@$nums2);\n    while ($i < $m && $j < $n && $k < $N) {\n        if ($nums1->[$i] < $nums2->[$j]) {\n            $result[$k++] = $nums1->[$i++];\n        } else {\n            $result[$k++] = $nums2->[$j++];\n        }\n    }\n    while ($i < $m && $k < $N) {\n        $result[$k++] = $nums1->[$i++];\n    }\n    while ($j < $n && $k < $N) {\n        $result[$k++] = $nums2->[$j++];\n    }\n    return \\@result;\n}",
    "    my $max = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    for my $i (0..$#$nums1) {\n        for my $j (0..$#$nums2) {\n            my $p = $nums1->[$i] * $nums2->[$j];\n            if ($p > $max) {\n                $max = $p;\n                $max_i = $i;\n                $max_j = $j;\n            }\n        }\n    }\n    my @res = ($max);\n    my $count = 1;\n    while ($count < $N) {\n        $max = 0;\n        my $max_i_new = 0;\n        my $max_j_new = 0;\n        for my $i (0..$#$nums1) {\n            for my $j (0..$#$nums2) {\n                next if $i == $max_i && $j == $max_j;\n                my $p = $nums1->[$i] * $nums2->[$j];\n                if ($p > $max) {\n                    $max = $p;\n                    $max_i_new = $i;\n                    $max_j_new = $j;\n                }\n            }\n        }\n        $max_i = $max_i_new;\n        $max_j = $max_j_new;\n        push @res, $max;\n        $count++;\n    }\n    return @res;\n}",
    "    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $m = scalar @$nums1;\n    my $n = scalar @$nums2;\n    while ($i < $m && $j < $n) {\n        if ($nums1->[$i] < $nums2->[$j]) {\n            $i++;\n        } elsif ($nums1->[$i] > $nums2->[$j]) {\n            $j++;\n        } else {\n            push @result, [$nums1->[$i], $nums2->[$j]];\n            $i++;\n            $j++;\n        }\n    }\n    return @result;\n}",
    "    my @products = ();\n    for my $i (0..$#{$nums1}) {\n        for my $j (0..$#{$nums2}) {\n            push @products, $nums1->[$i] * $nums2->[$j];\n        }\n    }\n    @products = sort {$b <=> $a} @products;\n    return @products[0..$N-1];\n}",
    "    my @res;\n    my $i = 0;\n    my $j = 0;\n    while ($i < @$nums1 && $j < @$nums2) {\n        if ($nums1->[$i] > $nums2->[$j]) {\n            push @res, [$nums1->[$i], $nums2->[$j]];\n            $j++;\n        } else {\n            push @res, [$nums1->[$i], $nums2->[$j]];\n            $i++;\n        }\n    }\n    while ($i < @$nums1) {\n        push @res, [$nums1->[$i], $nums2->[-1]];\n        $i++;\n    }\n    while ($j < @$nums2) {\n        push @res, [$nums1->[-1], $nums2->[$j]];\n        $j++;\n    }\n    return @res[0..$N-1];\n}"
  ]
}