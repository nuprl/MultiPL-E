{
  "name": "mbpp_444_trim_tuple",
  "language": "pl",
  "prompt": "# Write a function to trim each array by k in the given array array.\nsub trim_tuple {\n    my($test_list, $K) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_444_trim_tuple.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&trim_tuple;\n        if(eq_deeply($candidate->([[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], 2),\"[(2,), (9,), (2,), (2,)]\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], 1),\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[7, 8, 4, 9], [11, 8, 12, 4], [4, 1, 7, 8], [3, 6, 9, 7]], 1),\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @trimmed_list;\n    for my $test (@$test_list) {\n        my @trimmed_test;\n        for my $tuple (@$test) {\n            my @trimmed_tuple;\n            for my $element (@$tuple) {\n                push @trimmed_tuple, $element if $element <= $K;\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    foreach my $test_array (@$test_list) {\n        my @trimmed_array;\n        my $size = scalar @$test_array;\n        if ($size <= $K) {\n            push @trimmed_array, @$test_array;\n        } else {\n            for (my $i = 0; $i < $K; $i++) {\n                push @trimmed_array, $test_array->[$i];\n            }\n            for (my $i = $size - $K; $i < $size; $i++) {\n                push @trimmed_array, $test_array->[$i];\n            }\n        }\n        push @result, \\@trimmed_array;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list;\n    foreach my $test_array (@$test_list) {\n        my @trimmed_array;\n        my $array_size = scalar(@$test_array);\n        if ($array_size > $K) {\n            @trimmed_array = @$test_array[$K..($array_size - $K - 1)];\n        } else {\n            @trimmed_array = @$test_array;\n        }\n        push @trimmed_list, \\@trimmed_array;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test_array (@$test_list) {\n        my @trimmed_array;\n        foreach my $element (@$test_array) {\n            push @trimmed_array, $element if $element <= $K;\n        }\n        push @trimmed_list, \\@trimmed_array;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    for my $tuple (@$test_list) {\n        my @tuple = @$tuple;\n        my $sum = 0;\n        for my $i (0..$#$tuple) {\n            $sum += $tuple[$i];\n            if ($sum > $K) {\n                splice @tuple, $i;\n                last;\n            }\n        }\n        push @result, \\@tuple;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test_case (@$test_list) {\n        my @test_case = @$test_case;\n        my $n = scalar(@test_case);\n        my $start = $K;\n        my $end = $n - $K - 1;\n        if ($start > $end) {\n            $start = $end = int(($start + $end) / 2);\n        }\n        my @trimmed = @test_case[$start..$end];\n        push @result, \\@trimmed;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @trimmed = sort {$b <=> $a} @$test;\n        splice @trimmed, $K;\n        push @result, \\@trimmed;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my $trimmed_test = trim_array($test, $K);\n        push @result, $trimmed_test;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list;\n    foreach my $test_array (@$test_list) {\n        my @trimmed_array;\n        foreach my $test_element (@$test_array) {\n            if ($test_element > $K) {\n                push @trimmed_array, $test_element;\n            }\n        }\n        push @trimmed_list, \\@trimmed_array;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            foreach my $element (@$tuple) {\n                push @trimmed_tuple, $element if $element <= $K;\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            foreach my $array (@$tuple) {\n                push @trimmed_tuple, [@$array[0..$K-1]];\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @trimmed_test = @$test;\n        my $size = scalar @trimmed_test;\n        if ($size > $K) {\n            splice @trimmed_test, $K;\n        }\n        push @result, \\@trimmed_test;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list;\n    for my $test_tuple (@$test_list) {\n        my @trimmed_tuple;\n        for my $test_element (@$test_tuple) {\n            my $trimmed_element = trim_array($test_element, $K);\n            push @trimmed_tuple, $trimmed_element;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @trimmed = sort {$b <=> $a} @$test;\n        splice @trimmed, $K;\n        push @result, \\@trimmed;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @test = @$test;\n        my $len = scalar @test;\n        my $start = $K;\n        my $end = $len - $K - 1;\n        my @trimmed_test = @test[$start..$end];\n        push @result, \\@trimmed_test;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @test_array = @$test;\n        my $count = 0;\n        my @trimmed_array;\n        foreach my $element (@test_array) {\n            if ($count < $K) {\n                push @trimmed_array, $element;\n            }\n            $count++;\n        }\n        push @result, \\@trimmed_array;\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $test (@$test_list) {\n        my @trimmed = sort {$b <=> $a} @$test;\n        splice @trimmed, $K;\n        push @result, \\@trimmed;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @test = @$test;\n        my $len = scalar(@test);\n        my $start = $K;\n        my $end = $len - $K - 1;\n        if ($start < 0) {\n            $start = 0;\n        }\n        if ($end < 0) {\n            $end = 0;\n        }\n        my @trimmed = @test[$start..$end];\n        push @result, \\@trimmed;\n    }\n    return \\@result;\n}",
    "    my @trimmed_array;\n    foreach my $test_array (@$test_list) {\n        my @trimmed_array_inner;\n        my $size = scalar @$test_array;\n        my $start = $K;\n        my $end = $size - $K - 1;\n        for (my $i = $start; $i <= $end; $i++) {\n            push @trimmed_array_inner, $test_array->[$i];\n        }\n        push @trimmed_array, \\@trimmed_array_inner;\n    }\n    return \\@trimmed_array;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @trimmed = sort {$b <=> $a} @$test;\n        splice @trimmed, $K;\n        push @result, \\@trimmed;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list = ();\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple = ();\n        foreach my $item (@$tuple) {\n            push @trimmed_tuple, $item if $item >= $K;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @test = @$test;\n        my $len = scalar @test;\n        my $start = $K;\n        my $end = $len - $K;\n        my @trimmed = @test[$start..$end];\n        push @result, \\@trimmed;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list;\n    for my $test_tuple (@$test_list) {\n        my @trimmed_tuple;\n        for my $test_value (@$test_tuple) {\n            my $trimmed_value = $test_value;\n            if ($test_value > $K) {\n                $trimmed_value = $K;\n            }\n            push @trimmed_tuple, $trimmed_value;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test_array (@$test_list) {\n        my @trimmed_array;\n        my $i = 0;\n        foreach my $test_element (@$test_array) {\n            if ($i < $K) {\n                push @trimmed_array, $test_element;\n            }\n            $i++;\n        }\n        push @trimmed_list, \\@trimmed_array;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @trimmed = sort {$b <=> $a} @$test;\n        splice(@trimmed, $K);\n        push @result, \\@trimmed;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            foreach my $element (@$tuple) {\n                push @trimmed_tuple, $element if $element <= $K;\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @trimmed = @$test;\n        splice(@trimmed, $K);\n        push @result, \\@trimmed;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            foreach my $elem (@$tuple) {\n                my $trimmed_elem = $elem;\n                $trimmed_elem =~ s/^(.{$K}).*$/$1/;\n                push @trimmed_tuple, $trimmed_elem;\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $test (@$test_list) {\n        my @trimmed_test = ();\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple = ();\n            foreach my $element (@$tuple) {\n                push(@trimmed_tuple, $element) if $element <= $K;\n            }\n            push(@trimmed_test, \\@trimmed_tuple);\n        }\n        push(@trimmed_list, \\@trimmed_test);\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $item (@$tuple) {\n            push @trimmed_tuple, $item if $item <= $K;\n        }\n        push @result, \\@trimmed_tuple;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list = ();\n    foreach my $test (@$test_list) {\n        my @trimmed_test = ();\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple = ();\n            foreach my $val (@$tuple) {\n                push @trimmed_tuple, $val if $val <= $K;\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @trimmed = @$test;\n        splice @trimmed, 0, $K;\n        splice @trimmed, -$K;\n        push @result, \\@trimmed;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list;\n    foreach my $test_array (@$test_list) {\n        my @trimmed_array;\n        my $array_size = scalar @$test_array;\n        my $start_index = $K;\n        my $end_index = $array_size - $K - 1;\n        for (my $i = $start_index; $i <= $end_index; $i++) {\n            push @trimmed_array, $test_array->[$i];\n        }\n        push @trimmed_list, \\@trimmed_array;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @test_array = @$test;\n        my $test_size = scalar @test_array;\n        if ($test_size > $K) {\n            my $start = int(($test_size - $K) / 2);\n            my $end = $start + $K;\n            @test_array = @test_array[$start .. $end - 1];\n        }\n        push @result, \\@test_array;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @trimmed = sort { $b <=> $a } @$test;\n        splice @trimmed, $K;\n        push @result, \\@trimmed;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list = ();\n    foreach my $test (@$test_list) {\n        my @trimmed_test = ();\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple = ();\n            foreach my $val (@$tuple) {\n                push @trimmed_tuple, $val if ($val >= $K);\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $test_array (@$test_list) {\n        my @trimmed_array = ();\n        my $i = 0;\n        for (; $i < $K; $i++) {\n            push @trimmed_array, $test_array->[$i];\n        }\n        for (; $i < scalar(@$test_array) - $K; $i++) {\n            push @trimmed_array, $test_array->[$i];\n        }\n        for (; $i < scalar(@$test_array); $i++) {\n            push @trimmed_array, $test_array->[$i];\n        }\n        push @trimmed_list, \\@trimmed_array;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test = @$test;\n        splice @trimmed_test, $K;\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test_array (@$test_list) {\n        my @trimmed_array;\n        foreach my $num (@$test_array) {\n            if ($num >= $K) {\n                push @trimmed_array, $num;\n            }\n        }\n        push @trimmed_list, \\@trimmed_array;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    for my $test (@$test_list) {\n        my @trimmed_test;\n        for my $tuple (@$test) {\n            my @trimmed_tuple;\n            for my $num (@$tuple) {\n                push @trimmed_tuple, $num if $num > $K;\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @trimmed = sort {$b <=> $a} @$test;\n        splice(@trimmed, $K);\n        push @result, \\@trimmed;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @trimmed = sort {$b <=> $a} @$test;\n        splice(@trimmed, $K);\n        push @result, \\@trimmed;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list = ();",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @trimmed_test = @$test;\n        splice(@trimmed_test, $K);\n        push @result, \\@trimmed_test;\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $test_case (@$test_list) {\n        my $result = trim_array($test_case, $K);\n        push @result, $result;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test = @$test;\n        my $i = 0;\n        while ($i < $K) {\n            my $min = $trimmed_test[0];\n            my $max = $trimmed_test[-1];\n            my $min_index = 0;\n            my $max_index = $#trimmed_test;\n            for (my $j = 1; $j < @trimmed_test; $j++) {\n                if ($trimmed_test[$j] < $min) {\n                    $min = $trimmed_test[$j];\n                    $min_index = $j;\n                }\n                if ($trimmed_test[$j] > $max) {\n                    $max = $trimmed_test[$j];\n                    $max_index = $j;\n                }\n            }\n            if ($min_index < $max_index) {\n                splice(@trimmed_test, $min_index, 1);\n            } else {\n                splice(@trimmed_test, $max_index, 1);\n            }\n            $i++;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $test_array (@$test_list) {\n        my @trimmed_array = ();\n        for(my $i = 0; $i < scalar(@$test_array); $i++) {\n            if($i < $K) {\n                push @trimmed_array, $test_array->[$i];\n            }\n        }\n        push @trimmed_list, \\@trimmed_array;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    for my $test (@$test_list) {\n        my @trimmed_test;\n        for my $tuple (@$test) {\n            my @trimmed_tuple;\n            for my $array (@$tuple) {\n                my @trimmed_array;\n                for my $i (0..$#$array) {\n                    push @trimmed_array, $array->[$i] if $i < $K;\n                }\n                push @trimmed_tuple, \\@trimmed_array;\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @trimmed = @$test;\n        my $size = scalar @trimmed;\n        if ($size > $K) {\n            splice @trimmed, $K;\n        }\n        push @result, \\@trimmed;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @trimmed = sort {$b <=> $a} @$test;\n        splice(@trimmed, $K);\n        push @result, \\@trimmed;\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $test (@$test_list) {\n        my $result = trim_array($test, $K);\n        push @result, $result;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            foreach my $value (@$tuple) {\n                push @trimmed_tuple, $value if $value <= $K;\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test_array (@$test_list) {\n        my @trimmed_array;\n        my $array_size = scalar @$test_array;\n        for (my $i = 0; $i < $array_size; $i++) {\n            if ($i < $K) {\n                push(@trimmed_array, $test_array->[$i]);\n            }\n            elsif ($i >= $array_size - $K) {\n                push(@trimmed_array, $test_array->[$i]);\n            }\n        }\n        push(@trimmed_list, \\@trimmed_array);\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @sorted = sort { $a <=> $b } @$test;\n        my $min = $sorted[0];\n        my $max = $sorted[-1];\n        my @trimmed = grep { $_ >= $min + $K && $_ <= $max - $K } @$test;\n        push @result, \\@trimmed;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            foreach my $val (@$tuple) {\n                push @trimmed_tuple, $val if $val <= $K;\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test_array (@$test_list) {\n        my @trimmed_array;\n        my $i = 0;\n        foreach my $element (@$test_array) {\n            if ($i < $K) {\n                push @trimmed_array, $element;\n            }\n            $i++;\n        }\n        push @trimmed_list, \\@trimmed_array;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test_array (@$test_list) {\n        my @trimmed_array;\n        foreach my $element (@$test_array) {\n            push @trimmed_array, $element if $element >= $K;\n        }\n        push @trimmed_list, \\@trimmed_array;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            foreach my $val (@$tuple) {\n                if ($val > $K) {\n                    push @trimmed_tuple, $K;\n                } else {\n                    push @trimmed_tuple, $val;\n                }\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @test_array = @$test;\n        my @trimmed_array;\n        my $array_size = scalar @test_array;\n        if ($array_size <= $K) {\n            @trimmed_array = ();\n        } else {\n            my $start_index = int(($array_size - $K) / 2);\n            my $end_index = $start_index + $K;\n            @trimmed_array = @test_array[$start_index..$end_index-1];\n        }\n        push @result, \\@trimmed_array;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @test = @$test;\n        my $len = scalar @test;\n        my $k = $K;\n        if ($k > $len) {\n            $k = $len;\n        }\n        my $start = int(($len - $k) / 2);\n        my $end = $start + $k;\n        @test = @test[$start..$end];\n        push @result, \\@test;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @trimmed_test = @$test;\n        splice(@trimmed_test, $K);\n        push @result, \\@trimmed_test;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list;\n    foreach my $item (@$test_list) {\n        my @sorted_item = sort {$b <=> $a} @$item;\n        my $trimmed_item = [];\n        for(my $i = 0; $i < $K; $i++) {\n            push @$trimmed_item, $sorted_item[$i];\n        }\n        push @trimmed_list, $trimmed_item;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @trimmed_test = @$test;\n        splice @trimmed_test, $K;\n        push @result, \\@trimmed_test;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list = ();\n    foreach my $test (@$test_list) {\n        my @trimmed_test = ();\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple = ();\n            foreach my $value (@$tuple) {\n                push @trimmed_tuple, $value if $value <= $K;\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test_tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $test_value (@$test_tuple) {\n            my $trimmed_value = $test_value;\n            if ($test_value > $K) {\n                $trimmed_value = $K;\n            }\n            push @trimmed_tuple, $trimmed_value;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @trimmed = sort {$b <=> $a} @$test;\n        splice(@trimmed, $K);\n        push @result, \\@trimmed;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @trimmed_test = sort {$b <=> $a} @$test;\n        splice(@trimmed_test, $K);\n        push @result, \\@trimmed_test;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test_array (@$test_list) {\n        my @trimmed_array;\n        my $size = scalar @$test_array;\n        for (my $i = 0; $i < $size; $i++) {\n            if ($i < $K) {\n                push @trimmed_array, $test_array->[$i];\n            } elsif ($i >= $size - $K) {\n                push @trimmed_array, $test_array->[$i];\n            }\n        }\n        push @result, \\@trimmed_array;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list;\n    for my $test (@$test_list) {\n        my $trimmed_test = trim_array($test, $K);\n        push @trimmed_list, $trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    foreach my $test_list_ref (@$test_list) {\n        my @test_list = @$test_list_ref;\n        my $len = scalar(@test_list);\n        if ($len <= $K) {\n            push @result, [@test_list];\n        } else {\n            my $start = $K;\n            my $end = $len - $K - 1;\n            push @result, [@test_list[$start..$end]];\n        }\n    }\n    return \\@result;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            foreach my $elem (@$tuple) {\n                push @trimmed_tuple, $elem if $elem <= $K;\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test_array (@$test_list) {\n        my @trimmed_array = sort {$b <=> $a} @$test_array;\n        splice(@trimmed_array, $K);\n        push @trimmed_list, \\@trimmed_array;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple = @$tuple;\n        splice @trimmed_tuple, $K;\n        push @result, \\@trimmed_tuple;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            foreach my $val (@$tuple) {\n                push @trimmed_tuple, $val if $val <= $K;\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    foreach my $tuple (@$test_list) {\n        my @trimmed = @$tuple;\n        splice(@trimmed, $K);\n        push @result, \\@trimmed;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @array = @$test;\n        my @trimmed_array;\n        my $size = scalar @array;\n        if ($size <= $K) {\n            push @result, \\@array;\n            next;\n        }\n        for (my $i = 0; $i < $K; $i++) {\n            push @trimmed_array, $array[$i];\n        }\n        for (my $i = $size - $K; $i < $size; $i++) {\n            push @trimmed_array, $array[$i];\n        }\n        push @result, \\@trimmed_array;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @trimmed = sort {$b <=> $a} @$test;\n        splice @trimmed, $K;\n        push @result, \\@trimmed;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            foreach my $item (@$tuple) {\n                my $trimmed_item = trim($item, $K);\n                push @trimmed_tuple, $trimmed_item;\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test = @$test;\n        splice(@trimmed_test, $K);\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @trimmed = sort {$b <=> $a} @$test;\n        splice @trimmed, $K;\n        push @result, \\@trimmed;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @trimmed = sort {$b <=> $a} @$test;\n        splice(@trimmed, $K);\n        push @result, \\@trimmed;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @trimmed = sort {$b <=> $a} @$test;\n        splice @trimmed, $K;\n        push @result, \\@trimmed;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list;\n    foreach my $test_array (@$test_list) {\n        my $trimmed_array = trim_array($test_array, $K);\n        push @trimmed_list, $trimmed_array;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test_array (@$test_list) {\n        my $trimmed_array = trim_array($test_array, $K);\n        push @trimmed_list, $trimmed_array;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $item (@$tuple) {\n            push @trimmed_tuple, $item if $item >= $K;\n        }\n        push @result, \\@trimmed_tuple;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list;\n    foreach my $test_array (@$test_list) {\n        my @trimmed_array;\n        my $array_length = scalar(@$test_array);\n        for (my $i = 0; $i < $array_length; $i++) {\n            if ($i < $K) {\n                push @trimmed_array, $test_array->[$i];\n            }\n            elsif ($i >= $array_length - $K) {\n                push @trimmed_array, $test_array->[$i];\n            }\n        }\n        push @trimmed_list, \\@trimmed_array;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @trimmed = sort {$b <=> $a} @$test;\n        splice @trimmed, $K;\n        push @result, \\@trimmed;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @trimmed_test = @$test;\n        splice(@trimmed_test, $K);\n        push @result, \\@trimmed_test;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @trimmed = @$test;\n        splice(@trimmed, 0, $K);\n        splice(@trimmed, -$K);\n        push @result, \\@trimmed;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list = ();\n    foreach my $test_array (@$test_list) {\n        my @trimmed_array = ();\n        my $i = 0;\n        foreach my $element (@$test_array) {\n            if ($i < $K) {\n                push @trimmed_array, $element;\n            }\n            $i++;\n        }\n        push @trimmed_list, \\@trimmed_array;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @test_array = @$test;\n        my $len = scalar @test_array;\n        my $start = $K;\n        my $end = $len - $K - 1;\n        if ($start >= $end) {\n            push @result, [];\n        } else {\n            my @trimmed_array = @test_array[$start..$end];\n            push @result, \\@trimmed_array;\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @trimmed = sort {$b <=> $a} @$test;\n        splice(@trimmed, $K);\n        push @result, \\@trimmed;\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $test (@$test_list) {\n        my @test = @$test;\n        my $sum = 0;\n        my $i = 0;\n        while ($i < @test) {\n            $sum += $test[$i];\n            last if $sum >= $K;\n            $i++;\n        }\n        my $j = @test - 1;\n        $sum = 0;\n        while ($j >= 0) {\n            $sum += $test[$j];\n            last if $sum >= $K;\n            $j--;\n        }\n        push @result, [@test[$i..$j]];\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $element (@$tuple) {\n            my $trimmed_element = trim_array($element, $K);\n            push @trimmed_tuple, $trimmed_element;\n        }\n        push @result, \\@trimmed_tuple;\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $tuple (@$test_list) {\n        my @trimmed = @$tuple;\n        splice @trimmed, $K;\n        push @result, \\@trimmed;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list;\n    foreach my $test_array (@$test_list) {\n        my @trimmed_array;\n        foreach my $test_element (@$test_array) {\n            if ($test_element > $K) {\n                push @trimmed_array, $test_element;\n            }\n        }\n        push @trimmed_list, \\@trimmed_array;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test_array (@$test_list) {\n        my @trimmed_array;\n        foreach my $element (@$test_array) {\n            push @trimmed_array, $element if $element >= $K;\n        }\n        push @trimmed_list, \\@trimmed_array;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $element (@$tuple) {\n            my $trimmed_element = trim_array($element, $K);\n            push @trimmed_tuple, $trimmed_element;\n        }\n        push @result, \\@trimmed_tuple;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list;\n    foreach my $test_array (@$test_list) {\n        my @trimmed_array;\n        foreach my $element (@$test_array) {\n            if ($element > $K) {\n                push @trimmed_array, $element;\n            }\n        }\n        push @trimmed_list, \\@trimmed_array;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    for my $test (@$test_list) {\n        my @trimmed = sort {$b <=> $a} @$test;\n        splice @trimmed, $K;\n        push @result, \\@trimmed;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list;\n    foreach my $test_array (@$test_list) {\n        my @trimmed_array;\n        my $i = 0;\n        foreach my $element (@$test_array) {\n            if ($i < $K) {\n                push @trimmed_array, $element;\n            }\n            $i++;\n        }\n        push @trimmed_list, \\@trimmed_array;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test_array (@$test_list) {\n        my @trimmed_array;\n        my @sorted_array = sort {$a <=> $b} @$test_array;\n        for (my $i = $K; $i < @sorted_array - $K; $i++) {\n            push @trimmed_array, $sorted_array[$i];\n        }\n        push @trimmed_list, \\@trimmed_array;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @test_array = @$test;\n        my @trimmed_array = @test_array[$K..$#test_array-$K];\n        push @result, \\@trimmed_array;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @trimmed = @$test;\n        splice(@trimmed, $K, @trimmed - $K);\n        push @result, \\@trimmed;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @trimmed = sort {$b <=> $a} @$test;\n        splice(@trimmed, $K);\n        push @result, \\@trimmed;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list;\n    foreach my $test_array (@$test_list) {\n        my @trimmed_array;\n        foreach my $test_value (@$test_array) {\n            if ($test_value > $K) {\n                push @trimmed_array, $test_value;\n            }\n        }\n        push @trimmed_list, \\@trimmed_array;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple = ();\n        foreach my $item (@$tuple) {\n            push @trimmed_tuple, $item if $item <= $K;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $test (@$test_list) {\n        my @trimmed_test = ();\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple = ();\n            foreach my $val (@$tuple) {\n                if ($val >= $K) {\n                    push @trimmed_tuple, $val;\n                }\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $item (@$tuple) {\n            push @trimmed_tuple, $item if $item >= $K;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @sorted_test = sort {$b <=> $a} @$test;\n        my $sum = 0;\n        my $i = 0;\n        while ($sum < $K) {\n            $sum += $sorted_test[$i];\n            $i++;\n        }\n        my @trimmed_test = @sorted_test[$i..$#sorted_test];\n        push @result, \\@trimmed_test;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @test_list = @$test;\n        my @trimmed_test_list;\n        foreach my $test_item (@test_list) {\n            my @test_item_list = @$test_item;\n            my @trimmed_test_item_list;\n            foreach my $test_item_item (@test_item_list) {\n                my @test_item_item_list = @$test_item_item;\n                my @trimmed_test_item_item_list;\n                foreach my $test_item_item_item (@test_item_item_list) {\n                    my @test_item_item_item_list = @$test_item_item_item;\n                    my @trimmed_test_item_item_item_list;\n                    foreach my $test_item_item_item_item (@test_item_item_item_list) {\n                        my @test_item_item_item_item_list = @$test_item_item_item_item;\n                        my @trimmed_test_item_item_item_item_list;\n                        foreach my $test_item_item_item_item_item (@test_item_item_item_item_list) {\n                            my @test_item_item_item_item_item_list = @$test_item_item_item_item_item;\n                            my @trimmed_test_item_item_item_item_item_list;\n                            foreach my $test_item_item_item_item_item_item (@test_item_item_item_item_item_list) {\n                                my @test_item_item_item_item_item_item_list = @$test_item_item_item_item_item_item;\n                                my @trimmed_test_item_item_item_item_item_item_list;\n                                foreach my $test_item_item_item_item_item_item_item (@test_item_item_item_item_item_item_list) {\n                                   ",
    "    my @result;\n    foreach my $test_case (@$test_list) {\n        my @test_case = @$test_case;\n        my @trimmed_test_case;\n        foreach my $array (@test_case) {\n            my @array = @$array;\n            my @trimmed_array;\n            my $i = 0;\n            while ($i < scalar(@array) && $i < $K) {\n                push @trimmed_array, $array[$i];\n                $i++;\n            }\n            push @trimmed_test_case, \\@trimmed_array;\n        }\n        push @result, \\@trimmed_test_case;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list;\n    foreach my $test (@{$test_list}) {\n        my @trimmed_test = @{$test};\n        my $length = scalar(@trimmed_test);\n        if ($length > $K) {\n            splice(@trimmed_test, $K);\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    for my $test (@$test_list) {\n        my @trimmed = @$test;\n        splice(@trimmed, $K);\n        splice(@trimmed, 0, $K);\n        push @result, \\@trimmed;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @trimmed = sort {$b <=> $a} @$test;\n        splice(@trimmed, $K);\n        push @result, \\@trimmed;\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $test (@$test_list) {\n        my @trimmed = sort { $b <=> $a } @$test;\n        splice @trimmed, $K;\n        push @result, \\@trimmed;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list;\n    for my $test_array (@$test_list) {\n        my @trimmed_array;\n        for my $element (@$test_array) {\n            if ($element > $K) {\n                push @trimmed_array, $element;\n            }\n        }\n        push @trimmed_list, \\@trimmed_array;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    foreach my $test_array (@$test_list) {\n        my @trimmed_array = @$test_array;\n        splice(@trimmed_array, 0, $K);\n        splice(@trimmed_array, -$K);\n        push @result, \\@trimmed_array;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            foreach my $element (@$tuple) {\n                push @trimmed_tuple, $element if ($element >= $K);\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test_array (@$test_list) {\n        my @trimmed_array;\n        foreach my $element (@$test_array) {\n            push @trimmed_array, $element if $element <= $K;\n        }\n        push @trimmed_list, \\@trimmed_array;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            foreach my $element (@$tuple) {\n                push @trimmed_tuple, $element if $element >= $K;\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    foreach my $tuple (@$test_list) {\n        my @tuple_list;\n        foreach my $tuple_item (@$tuple) {\n            my $tuple_item_length = length($tuple_item);\n            if ($tuple_item_length > $K) {\n                push @tuple_list, substr($tuple_item, 0, $K);\n            } else {\n                push @tuple_list, $tuple_item;\n            }\n        }\n        push @result, \\@tuple_list;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @trimmed = sort {$b <=> $a} @$test;\n        splice(@trimmed, $K);\n        push @result, \\@trimmed;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list;\n    foreach my $test_array (@$test_list) {\n        my @trimmed_array;\n        my $i = 0;\n        foreach my $element (@$test_array) {\n            if ($i < $K) {\n                push @trimmed_array, $element;\n            }\n            $i++;\n        }\n        push @trimmed_list, \\@trimmed_array;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            foreach my $value (@$tuple) {\n                push @trimmed_tuple, $value if $value <= $K;\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            foreach my $value (@$tuple) {\n                my $trimmed_value = $value - $K;\n                $trimmed_value = 0 if $trimmed_value < 0;\n                push @trimmed_tuple, $trimmed_value;\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test_array (@$test_list) {\n        my @trimmed_array;\n        foreach my $test_element (@$test_array) {\n            if ($test_element > $K) {\n                push @trimmed_array, $test_element;\n            }\n        }\n        push @trimmed_list, \\@trimmed_array;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @temp = @$test;\n        my $len = scalar(@temp);\n        my $start = $K;\n        my $end = $len - $K - 1;\n        if ($start > $end) {\n            $start = 0;\n            $end = $len - 1;\n        }\n        my @trimmed = @temp[$start..$end];\n        push @result, \\@trimmed;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            foreach my $element (@$tuple) {\n                push @trimmed_tuple, $element if $element > $K;\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @test = @$test;\n        my $len = scalar @test;\n        my $start = $K;\n        my $end = $len - $K - 1;\n        my @trimmed = @test[$start..$end];\n        push @result, \\@trimmed;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @trimmed_test = @$test;\n        splice(@trimmed_test, 0, $K);\n        splice(@trimmed_test, -$K, $K);\n        push @result, \\@trimmed_test;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list;\n    foreach my $test_tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $test_item (@$test_tuple) {\n            push @trimmed_tuple, trim_array($test_item, $K);\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            foreach my $val (@$tuple) {\n                push @trimmed_tuple, $val - $K;\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @test = @$test;\n        my $len = scalar(@test);\n        my $start = $K;\n        my $end = $len - $K - 1;\n        if ($start > $end) {\n            $start = $end = int(($start + $end) / 2);\n        }\n        @test = @test[$start..$end];\n        push @result, \\@test;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list;\n    foreach my $test_array (@$test_list) {\n        my @trimmed_array;\n        foreach my $element (@$test_array) {\n            if ($element < $K) {\n                push @trimmed_array, $element;\n            }\n        }\n        push @trimmed_list, \\@trimmed_array;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            foreach my $val (@$tuple) {\n                push @trimmed_tuple, $val if ($val >= $K);\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    foreach my $test_case (@$test_list) {\n        my @test_case = @$test_case;\n        my $i = 0;\n        my $j = scalar(@test_case) - 1;\n        while ($i <= $j && $test_case[$i] <= $K) {\n            $i++;\n        }\n        while ($j >= $i && $test_case[$j] <= $K) {\n            $j--;\n        }\n        push @result, [@test_case[$i..$j]];\n    }\n    return \\@result;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            foreach my $array (@$tuple) {\n                my @trimmed_array;\n                foreach my $element (@$array) {\n                    push @trimmed_array, $element if ($element >= $K);\n                }\n                push @trimmed_tuple, \\@trimmed_array;\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result = ();\n    foreach my $test (@$test_list) {\n        my @trimmed = ();\n        foreach my $item (@$test) {\n            push @trimmed, $item if $item <= $K;\n        }\n        push @result, \\@trimmed;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @new_test;\n        foreach my $t (@$test) {\n            push @new_test, [@$t[0..$K-1]];\n        }\n        push @result, \\@new_test;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list;\n    foreach my $test_array (@$test_list) {\n        my @trimmed_array;\n        foreach my $element (@$test_array) {\n            push @trimmed_array, $element if $element <= $K;\n        }\n        push @trimmed_list, \\@trimmed_array;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    for my $test (@$test_list) {\n        my @trimmed = sort {$b <=> $a} @$test;\n        splice @trimmed, $K;\n        push @result, \\@trimmed;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list;\n    foreach my $test_array (@$test_list) {\n        my @trimmed_array;\n        my $i = 0;\n        foreach my $value (@$test_array) {\n            if ($i < $K) {\n                push @trimmed_array, $value;\n            }\n            $i++;\n        }\n        push @trimmed_list, \\@trimmed_array;\n    }\n    return \\@trimmed_list;\n}",
    "    my $result = [];\n    for my $test (@$test_list) {\n        my $trimmed = [];\n        for my $t (@$test) {\n            push @$trimmed, $t if $t >= $K;\n        }\n        push @$result, $trimmed;\n    }\n    return $result;\n}",
    "    my @trimmed_list;\n    for my $test_array (@$test_list) {\n        my @trimmed_array;\n        for my $i (0 .. $#$test_array) {\n            if ($i < $K) {\n                push @trimmed_array, $test_array->[$i];\n            }\n            elsif ($i > $#$test_array - $K) {\n                push @trimmed_array, $test_array->[$i];\n            }\n        }\n        push @trimmed_list, \\@trimmed_array;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @temp = @$test;\n        my $len = scalar @temp;\n        my $start = $K;\n        my $end = $len - $K - 1;\n        my @trimmed_array = @temp[$start..$end];\n        push @result, \\@trimmed_array;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @trimmed = sort {$b <=> $a} @$test;\n        splice(@trimmed, $K);\n        push @result, \\@trimmed;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @trimmed_test = @$test;\n        splice @trimmed_test, $K;\n        push @result, \\@trimmed_test;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @trimmed = sort {$b <=> $a} @$test;\n        splice(@trimmed, $K);\n        push @result, \\@trimmed;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $item (@$test_list) {\n        my @temp = @$item;\n        my $len = scalar @temp;\n        if ($len > $K) {\n            my $diff = $len - $K;\n            splice @temp, 0, $diff;\n        }\n        push @result, \\@temp;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $element (@$tuple) {\n            push @trimmed_tuple, $element if $element > $K;\n        }\n        push @result, \\@trimmed_tuple;\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $test (@$test_list) {\n        my @sorted = sort { $b <=> $a } @$test;\n        my $sum = 0;\n        for my $i (0 .. $K - 1) {\n            $sum += $sorted[$i];\n        }\n        push @result, $sum;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @trimmed = sort {$b <=> $a} @$test;\n        splice(@trimmed, $K);\n        push @result, \\@trimmed;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test_arr (@$test_list) {\n        my @arr = @$test_arr;\n        my $len = scalar @arr;\n        my $start = $K;\n        my $end = $len - $K - 1;\n        my @trimmed_arr = @arr[$start..$end];\n        push @result, \\@trimmed_arr;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @sorted = sort {$b <=> $a} @$test;\n        my $sum = 0;\n        my $i = 0;\n        while ($i < @sorted && $sum < $K) {\n            $sum += $sorted[$i];\n            $i++;\n        }\n        push @result, [@sorted[$i..$#sorted]];\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @trimmed = sort {$b <=> $a} @$test;\n        splice(@trimmed, $K);\n        push @result, \\@trimmed;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list;\n    foreach my $test_array (@$test_list) {\n        my @trimmed_array;\n        for (my $i = 0; $i < scalar @$test_array; $i++) {\n            if ($i >= $K && $i < (scalar @$test_array - $K)) {\n                push @trimmed_array, $test_array->[$i];\n            }\n        }\n        push @trimmed_list, \\@trimmed_array;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result = ();\n    foreach my $test_array (@$test_list) {\n        my @trimmed_array = @$test_array;\n        my $length = scalar @trimmed_array;\n        if ($length > $K) {\n            splice @trimmed_array, $K, $length - $K;\n        }\n        push @result, \\@trimmed_array;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $item (@$test_list) {\n        my @sorted_item = sort {$b <=> $a} @$item;\n        my $size = scalar @sorted_item;\n        my $i = 0;\n        my @trimmed_item;\n        while ($i < $size && $i < $K) {\n            push @trimmed_item, $sorted_item[$i];\n            $i++;\n        }\n        push @result, \\@trimmed_item;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            for (my $i = 0; $i < $K; $i++) {\n                push @trimmed_tuple, $tuple->[$i];\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test_array (@$test_list) {\n        my @trimmed_array;\n        my $size = scalar(@$test_array);\n        for (my $i = $K; $i < $size - $K; $i++) {\n            push @trimmed_array, $test_array->[$i];\n        }\n        push @trimmed_list, \\@trimmed_array;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test_array (@$test_list) {\n        my @trimmed_array;\n        foreach my $test_element (@$test_array) {\n            if ($test_element > $K) {\n                push @trimmed_array, $test_element;\n            }\n        }\n        push @trimmed_list, \\@trimmed_array;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            foreach my $elem (@$tuple) {\n                if ($elem >= $K) {\n                    push @trimmed_tuple, $elem;\n                }\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $element (@$tuple) {\n            push @trimmed_tuple, $element - $K;\n        }\n        push @result, \\@trimmed_tuple;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @trimmed = @$test;\n        splice @trimmed, $K, 1;\n        push @result, \\@trimmed;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @temp = @$test;\n        my $i = 0;\n        while($i < @temp && $temp[$i] <= $K) {\n            $i++;\n        }\n        if($i < @temp) {\n            push @result, [@temp[$i..$#temp]];\n        }\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @trimmed = sort {$b <=> $a} @$test;\n        splice(@trimmed, $K);\n        push @result, \\@trimmed;\n    }\n    return \\@result;\n}",
    "    my @result;",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my $trimmed = [@$test];\n        splice(@$trimmed, $K);\n        push @result, $trimmed;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @test = @$test;\n        my $len = scalar @test;\n        my $start = $K;\n        my $end = $len - $K - 1;\n        my @trimmed_test = @test[$start..$end];\n        push @result, \\@trimmed_test;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $element (@$tuple) {\n            push @trimmed_tuple, $element if $element <= $K;\n        }\n        push @result, \\@trimmed_tuple;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my $trimmed_test = trim_array($test, $K);\n        push @result, $trimmed_test;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list;\n    foreach my $test_array (@$test_list) {\n        my @trimmed_array;\n        my $len = scalar(@$test_array);\n        for (my $i = 0; $i < $len; $i++) {\n            my $min = $i - $K;\n            my $max = $i + $K;\n            $min = 0 if $min < 0;\n            $max = $len - 1 if $max >= $len;\n            my $sum = 0;\n            for (my $j = $min; $j <= $max; $j++) {\n                $sum += $test_array->[$j];\n            }\n            push @trimmed_array, $sum / ($max - $min + 1);\n        }\n        push @trimmed_list, \\@trimmed_array;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    for my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        for my $item (@$tuple) {\n            my $trimmed_item = $item;\n            $trimmed_item =~ s/^(.{$K}).*$/$1/;\n            push @trimmed_tuple, $trimmed_item;\n        }\n        push @result, \\@trimmed_tuple;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list = ();\n    foreach my $test_array (@$test_list) {\n        my @trimmed_array = ();\n        foreach my $element (@$test_array) {\n            push(@trimmed_array, $element) if ($element >= $K);\n        }\n        push(@trimmed_list, \\@trimmed_array);\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @trimmed = @$test;\n        if ($K > 0) {\n            splice @trimmed, 0, $K;\n            splice @trimmed, -$K, $K;\n        }\n        push @result, \\@trimmed;\n    }\n    return @result;\n}",
    "    my @trimmed_list;\n    foreach my $tuple (@$test_list) {\n        my @trimmed_tuple;\n        foreach my $elem (@$tuple) {\n            push @trimmed_tuple, $elem if $elem >= $K;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test_array (@$test_list) {\n        my @trimmed_array = @$test_array;\n        my $len = scalar @trimmed_array;\n        if ($len > $K) {\n            splice @trimmed_array, $K;\n        }\n        push @trimmed_list, \\@trimmed_array;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @test = @$test;\n        my @trimmed = sort {$b <=> $a} @test;\n        splice(@trimmed, $K);\n        push @result, \\@trimmed;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list;\n    foreach my $test_array (@$test_list) {\n        my @trimmed_array;\n        foreach my $element (@$test_array) {\n            if ($element > $K) {\n                push @trimmed_array, $element;\n            }\n        }\n        push @trimmed_list, \\@trimmed_array;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    for my $test (@$test_list) {\n        my @test_trimmed = @$test;\n        splice @test_trimmed, $K;\n        splice @test_trimmed, 0, $K;\n        push @result, \\@test_trimmed;\n    }\n    return \\@result;\n}",
    "    my @result = ();\n    foreach my $item (@$test_list) {\n        my $trimmed_item = trim_array($item, $K);\n        push @result, $trimmed_item;\n    }\n    return @result;\n}",
    "    my @result;\n    for my $test (@$test_list) {\n        my @trimmed = sort {$b <=> $a} @$test;\n        splice(@trimmed, $K);\n        push @result, \\@trimmed;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list;\n    foreach my $test_array (@$test_list) {\n        my @trimmed_array;\n        foreach my $element (@$test_array) {\n            if ($element > $K) {\n                push @trimmed_array, $element;\n            }\n        }\n        push @trimmed_list, \\@trimmed_array;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $test (@$test_list) {\n        my @trimmed_test = ();\n        foreach my $tuple (@$test) {\n            my $trimmed_tuple = trim_array($tuple, $K);\n            push @trimmed_test, $trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test_array (@$test_list) {\n        my @trimmed_array;\n        my $size = scalar @$test_array;\n        for (my $i = $K; $i < $size - $K; $i++) {\n            push @trimmed_array, $test_array->[$i];\n        }\n        push @trimmed_list, \\@trimmed_array;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list = ();\n    foreach my $test_array (@$test_list) {\n        my @trimmed_array = ();\n        my $len = scalar @$test_array;\n        for (my $i = 0; $i < $len; $i++) {\n            if ($i < $K) {\n                push @trimmed_array, $test_array->[$i];\n            }\n            elsif ($i >= $len - $K) {\n                push @trimmed_array, $test_array->[$i];\n            }\n        }\n        push @trimmed_list, \\@trimmed_array;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @test = @$test;\n        my $len = scalar @test;\n        my $start = $K;\n        my $end = $len - $K - 1;\n        if ($start >= $end) {\n            push @result, [$test[$start]];\n        } else {\n            push @result, [@test[$start..$end]];\n        }\n    }\n    return \\@result;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            foreach my $val (@$tuple) {\n                if ($val > $K) {\n                    push @trimmed_tuple, $K;\n                } else {\n                    push @trimmed_tuple, $val;\n                }\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            foreach my $val (@$tuple) {\n                push @trimmed_tuple, $val if $val <= $K;\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test_array (@$test_list) {\n        my @trimmed_array;\n        foreach my $element (@$test_array) {\n            if ($element > $K) {\n                push @trimmed_array, $element;\n            }\n        }\n        push @trimmed_list, \\@trimmed_array;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            foreach my $val (@$tuple) {\n                push @trimmed_tuple, $val if $val <= $K;\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @trimmed = sort {$b <=> $a} @$test;\n        splice(@trimmed, $K);\n        push @result, \\@trimmed;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            foreach my $element (@$tuple) {\n                push @trimmed_tuple, $element if $element <= $K;\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            foreach my $val (@$tuple) {\n                push @trimmed_tuple, $val - $K;\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @test_array = @$test;\n        my $len = scalar(@test_array);\n        my $start = $K;\n        my $end = $len - $K;\n        if ($start > $end) {\n            $start = $end = int($len/2);\n        }\n        my @trimmed_array = @test_array[$start..$end];\n        push @result, \\@trimmed_array;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list;\n    for my $test (@$test_list) {\n        my @trimmed_test;\n        for my $tuple (@$test) {\n            my @trimmed_tuple;\n            for my $array (@$tuple) {\n                my @trimmed_array = @$array[$K .. $#$array];\n                push @trimmed_tuple, \\@trimmed_array;\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test_array (@$test_list) {\n        my @trimmed_array = @$test_array;\n        my $length = scalar @trimmed_array;\n        if ($length > $K) {\n            splice @trimmed_array, $K;\n        }\n        push @trimmed_list, \\@trimmed_array;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    for my $test_array (@$test_list) {\n        my @trimmed_array = @$test_array;\n        splice @trimmed_array, 0, $K;\n        splice @trimmed_array, -$K, $K;\n        push @result, \\@trimmed_array;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list = ();\n    foreach my $test_array (@$test_list) {\n        my @trimmed_array = ();\n        foreach my $element (@$test_array) {\n            if ($element > $K) {\n                push @trimmed_array, $element;\n            }\n        }\n        push @trimmed_list, \\@trimmed_array;\n    }\n    return \\@trimmed_list;\n}"
  ]
}