{
  "name": "mbpp_444_trim_tuple",
  "language": "pl",
  "prompt": "# Write a function to trim each array by k in the given array array.\nsub trim_tuple {\n    my($test_list, $K) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_444_trim_tuple.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&trim_tuple;\n        if(eq_deeply($candidate->([[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], 2),\"[(2,), (9,), (2,), (2,)]\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], 1),\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[7, 8, 4, 9], [11, 8, 12, 4], [4, 1, 7, 8], [3, 6, 9, 7]], 1),\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @trimmed_list;\n    for my $test (@$test_list) {\n        my @trimmed_test;\n        for my $tuple (@$test) {\n            my @trimmed_tuple;\n            for my $element (@$tuple) {\n                push @trimmed_tuple, $element if $element <= $K;\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    foreach my $test_array (@$test_list) {\n        my @trimmed_array;\n        my $size = scalar @$test_array;\n        if ($size <= $K) {\n            push @trimmed_array, @$test_array;\n        } else {\n            for (my $i = 0; $i < $K; $i++) {\n                push @trimmed_array, $test_array->[$i];\n            }\n            for (my $i = $size - $K; $i < $size; $i++) {\n                push @trimmed_array, $test_array->[$i];\n            }\n        }\n        push @result, \\@trimmed_array;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list;\n    foreach my $test_array (@$test_list) {\n        my @trimmed_array;\n        my $array_size = scalar(@$test_array);\n        if ($array_size > $K) {\n            @trimmed_array = @$test_array[$K..($array_size - $K - 1)];\n        } else {\n            @trimmed_array = @$test_array;\n        }\n        push @trimmed_list, \\@trimmed_array;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test_array (@$test_list) {\n        my @trimmed_array;\n        foreach my $element (@$test_array) {\n            push @trimmed_array, $element if $element <= $K;\n        }\n        push @trimmed_list, \\@trimmed_array;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    for my $tuple (@$test_list) {\n        my @tuple = @$tuple;\n        my $sum = 0;\n        for my $i (0..$#$tuple) {\n            $sum += $tuple[$i];\n            if ($sum > $K) {\n                splice @tuple, $i;\n                last;\n            }\n        }\n        push @result, \\@tuple;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test_case (@$test_list) {\n        my @test_case = @$test_case;\n        my $n = scalar(@test_case);\n        my $start = $K;\n        my $end = $n - $K - 1;\n        if ($start > $end) {\n            $start = $end = int(($start + $end) / 2);\n        }\n        my @trimmed = @test_case[$start..$end];\n        push @result, \\@trimmed;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @trimmed = sort {$b <=> $a} @$test;\n        splice @trimmed, $K;\n        push @result, \\@trimmed;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my $trimmed_test = trim_array($test, $K);\n        push @result, $trimmed_test;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list;\n    foreach my $test_array (@$test_list) {\n        my @trimmed_array;\n        foreach my $test_element (@$test_array) {\n            if ($test_element > $K) {\n                push @trimmed_array, $test_element;\n            }\n        }\n        push @trimmed_list, \\@trimmed_array;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            foreach my $element (@$tuple) {\n                push @trimmed_tuple, $element if $element <= $K;\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @trimmed_list;\n    foreach my $test (@$test_list) {\n        my @trimmed_test;\n        foreach my $tuple (@$test) {\n            my @trimmed_tuple;\n            foreach my $array (@$tuple) {\n                push @trimmed_tuple, [@$array[0..$K-1]];\n            }\n            push @trimmed_test, \\@trimmed_tuple;\n        }\n        push @trimmed_list, \\@trimmed_test;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @trimmed_test = @$test;\n        my $size = scalar @trimmed_test;\n        if ($size > $K) {\n            splice @trimmed_test, $K;\n        }\n        push @result, \\@trimmed_test;\n    }\n    return \\@result;\n}",
    "    my @trimmed_list;\n    for my $test_tuple (@$test_list) {\n        my @trimmed_tuple;\n        for my $test_element (@$test_tuple) {\n            my $trimmed_element = trim_array($test_element, $K);\n            push @trimmed_tuple, $trimmed_element;\n        }\n        push @trimmed_list, \\@trimmed_tuple;\n    }\n    return \\@trimmed_list;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @trimmed = sort {$b <=> $a} @$test;\n        splice @trimmed, $K;\n        push @result, \\@trimmed;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @test = @$test;\n        my $len = scalar @test;\n        my $start = $K;\n        my $end = $len - $K - 1;\n        my @trimmed_test = @test[$start..$end];\n        push @result, \\@trimmed_test;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @test_array = @$test;\n        my $count = 0;\n        my @trimmed_array;\n        foreach my $element (@test_array) {\n            if ($count < $K) {\n                push @trimmed_array, $element;\n            }\n            $count++;\n        }\n        push @result, \\@trimmed_array;\n    }\n    return \\@result;\n}",
    "    my @result;\n    for my $test (@$test_list) {\n        my @trimmed = sort {$b <=> $a} @$test;\n        splice @trimmed, $K;\n        push @result, \\@trimmed;\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @test = @$test;\n        my $len = scalar(@test);\n        my $start = $K;\n        my $end = $len - $K - 1;\n        if ($start < 0) {\n            $start = 0;\n        }\n        if ($end < 0) {\n            $end = 0;\n        }\n        my @trimmed = @test[$start..$end];\n        push @result, \\@trimmed;\n    }\n    return \\@result;\n}",
    "    my @trimmed_array;\n    foreach my $test_array (@$test_list) {\n        my @trimmed_array_inner;\n        my $size = scalar @$test_array;\n        my $start = $K;\n        my $end = $size - $K - 1;\n        for (my $i = $start; $i <= $end; $i++) {\n            push @trimmed_array_inner, $test_array->[$i];\n        }\n        push @trimmed_array, \\@trimmed_array_inner;\n    }\n    return \\@trimmed_array;\n}",
    "    my @result;\n    foreach my $test (@$test_list) {\n        my @trimmed = sort {$b <=> $a} @$test;\n        splice @trimmed, $K;\n        push @result, \\@trimmed;\n    }\n    return \\@result;\n}"
  ]
}