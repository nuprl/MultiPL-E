{
  "name": "mbpp_64_subject_marks",
  "language": "pl",
  "prompt": "# Write a function to sort an array of arrays using the second value of each array.\nsub subject_marks {\n    my($subjectmarks) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_64_subject_marks.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&subject_marks;\n        if(eq_deeply($candidate->([[\"English\", 88], [\"Science\", 90], [\"Maths\", 97], [\"Social sciences\", 82]]),[[\"Social sciences\", 82], [\"English\", 88], [\"Science\", 90], [\"Maths\", 97]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[\"Telugu\", 49], [\"Hindhi\", 54], [\"Social\", 33]]),[[\"Social\", 33], [\"Telugu\", 49], [\"Hindhi\", 54]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[\"Physics\", 96], [\"Chemistry\", 97], [\"Biology\", 45]]),[[\"Biology\", 45], [\"Physics\", 96], [\"Chemistry\", 97]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @sorted = sort {$a->[1] <=> $b->[1]} @$subjectmarks;\n    return @sorted;\n}",
    "    my @sortedmarks = sort { $a->[1] <=> $b->[1] } @$subjectmarks;\n    return @sortedmarks;\n}",
    "    my @sortedmarks = sort { $a->[1] <=> $b->[1] } @$subjectmarks;\n    return @sortedmarks;\n}",
    "    my @sortedmarks = sort { $a->[1] <=> $b->[1] } @$subjectmarks;\n    return @sortedmarks;\n}",
    "    my @sortedmarks = sort { $a->[1] <=> $b->[1] } @$subjectmarks;\n    return @sortedmarks;\n}",
    "    my @sortedmarks = sort {$a->[1] <=> $b->[1]} @$subjectmarks;\n    return @sortedmarks;\n}",
    "    my @sorted_marks = sort { $a->[1] <=> $b->[1] } @$subjectmarks;\n    return @sorted_marks;\n}",
    "    my @sorted = sort { $a->[1] <=> $b->[1] } @$subjectmarks;\n    return \\@sorted;\n}",
    "    my @sorted_marks = sort { $a->[1] <=> $b->[1] } @$subjectmarks;\n    return @sorted_marks;\n}",
    "    my @sorted_marks = sort { $a->[1] <=> $b->[1] } @$subjectmarks;\n    return @sorted_marks;\n}",
    "    my @sorted_marks = sort {$a->[1] <=> $b->[1]} @$subjectmarks;\n    return @sorted_marks;\n}",
    "    my @sorted = sort { $a->[1] <=> $b->[1] } @$subjectmarks;\n    return \\@sorted;\n}",
    "    my @sorted_marks = sort {$a->[1] <=> $b->[1]} @$subjectmarks;\n    return @sorted_marks;\n}",
    "    my @sorted = sort {$a->[1] <=> $b->[1]} @$subjectmarks;\n    return \\@sorted;\n}",
    "    my @sorted_marks = sort { $a->[1] <=> $b->[1] } @$subjectmarks;\n    return @sorted_marks;\n}",
    "    my @sortedmarks = sort { $a->[1] <=> $b->[1] } @$subjectmarks;\n    return @sortedmarks;\n}",
    "    my @sorted = sort { $a->[1] <=> $b->[1] } @$subjectmarks;\n    return @sorted;\n}",
    "    my @sorted_marks = sort { $a->[1] <=> $b->[1] } @$subjectmarks;\n    return @sorted_marks;\n}",
    "    my @sortedmarks = sort { $a->[1] <=> $b->[1] } @$subjectmarks;\n    return @sortedmarks;\n}",
    "    my @sorted_marks = sort { $a->[1] <=> $b->[1] } @$subjectmarks;\n    return @sorted_marks;\n}"
  ]
}