{
  "name": "mbpp_732_replace_specialchar",
  "language": "pl",
  "prompt": "# Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nsub replace_specialchar {\n    my($text) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_732_replace_specialchar.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&replace_specialchar;\n        if(eq_deeply($candidate->(\"Python language, Programming language.\"),\"Python:language::Programming:language:\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c,d e f\"),\"a:b:c:d:e:f\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ram reshma,ram rahim\"),\"ram:reshma:ram:rahim\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    $text =~ s/[ ,.]/:/g;\n    return $text;\n}",
    "    $text =~ s/[ ,.]/:/g;\n    return $text;\n}",
    "    $text =~ s/[\\s,\\.]/:/g;\n    return $text;\n}",
    "    $text =~ s/[\\s,.]/:/g;\n    return $text;\n}",
    "    $text =~ s/[\\s,\\.]/:/g;\n    return $text;\n}",
    "    $text =~ s/[\\s,.]/:/g;\n    return $text;\n}",
    "    $text =~ s/[\\s,.]/:/g;\n    return $text;\n}",
    "    $text =~ s/[\\s,.]/:/g;\n    return $text;\n}",
    "    $text =~ s/[\\s,\\.]/:/g;\n    return $text;\n}",
    "    $text =~ s/[\\s,\\.]/:/g;\n    return $text;\n}",
    "    $text =~ s/[ ,.]/:/g;\n    return $text;\n}",
    "    $text =~ s/[\\s,\\.]/:/g;\n    return $text;\n}",
    "    $text =~ s/[\\s,\\.]/:/g;\n    return $text;\n}",
    "    $text =~ s/[\\s,\\.]/:/g;\n    return $text;\n}",
    "    $text =~ s/[\\s,\\.]/:/g;\n    return $text;\n}",
    "    $text =~ s/[\\s,\\.]/:/g;\n    return $text;\n}",
    "    $text =~ s/[\\s,\\.]/:/g;\n    return $text;\n}",
    "    $text =~ s/[\\s,\\.]/:/g;\n    return $text;\n}",
    "    $text =~ s/[\\s,.]/:/g;\n    return $text;\n}",
    "    $text =~ s/[\\s,\\.]/:/g;\n    return $text;\n}"
  ]
}