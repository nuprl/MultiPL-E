{
  "name": "mbpp_296_get_Inv_Count",
  "language": "pl",
  "prompt": "# Write a plthon function to count inversions in an array.\nsub get_Inv_Count {\n    my($arr) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_296_get_Inv_Count.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_Inv_Count;\n        if(eq_deeply($candidate->([1, 20, 6, 4, 5]),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 1]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 5, 6, 1]),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my @arr = @$arr;\n    my $n = scalar(@arr);\n    my $inv_count = 0;\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = $i + 1; $j < $n; $j++) {\n            if($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $count = 0;\n    for(my $i = 0; $i < scalar(@$arr); $i++) {\n        for(my $j = $i + 1; $j < scalar(@$arr); $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $inv_count = 0;\n    for(my $i = 0; $i < scalar(@$arr); $i++) {\n        for(my $j = $i + 1; $j < scalar(@$arr); $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $inv_count = 0;\n    my $size = scalar @$arr;\n    for(my $i = 0; $i < $size - 1; $i++) {\n        for(my $j = $i + 1; $j < $size; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $count = 0;\n    my $n = scalar @$arr;\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = $i+1; $j < $n; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $n = scalar @$arr;\n    return get_Inv_Count_Util($arr, 0, $n-1);\n}",
    "    my $inv_count = 0;\n    for (my $i = 0; $i < scalar(@$arr); $i++) {\n        for (my $j = $i + 1; $j < scalar(@$arr); $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $inv_count = 0;\n    my $size = scalar @{$arr};\n    for (my $i = 0; $i < $size - 1; $i++) {\n        for (my $j = $i + 1; $j < $size; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my @arr = @$arr;\n    my $n = scalar @arr;\n    my $inv_count = 0;\n    for(my $i=0; $i<$n-1; $i++){\n        for(my $j=$i+1; $j<$n; $j++){\n            if($arr[$i] > $arr[$j]){\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $count = 0;\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = $i + 1; $j < $n; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $inv_count = 0;\n    my $size = scalar @$arr;\n    for(my $i = 0; $i < $size - 1; $i++) {\n        for(my $j = $i + 1; $j < $size; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar @$arr;\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $inv_count = 0;\n    my $size = scalar @$arr;\n    for (my $i = 0; $i < $size - 1; $i++) {\n        for (my $j = $i + 1; $j < $size; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $inv_count = 0;\n    my $size = scalar @$arr;\n    for (my $i = 0; $i < $size - 1; $i++) {\n        for (my $j = $i + 1; $j < $size; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $count = 0;\n    for(my $i=0; $i<$#$arr; $i++) {\n        for(my $j=$i+1; $j<=$#$arr; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $inv_count = 0;\n    my $size = scalar(@$arr);\n    for (my $i = 0; $i < $size - 1; $i++) {\n        for (my $j = $i + 1; $j < $size; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    return _mergeSort($arr, 0, $n - 1);\n}",
    "    my $n = scalar(@$arr);\n    return _mergeSort($arr, 0, $n-1);\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for(my $i=0; $i<$n-1; $i++) {\n        for(my $j=$i+1; $j<$n; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar @$arr;\n    my $inv_count = 0;\n    for(my $i = 0; $i < $n - 1; $i++) {\n        for(my $j = $i + 1; $j < $n; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for(my $i = 0; $i < $n - 1; $i++) {\n        for(my $j = $i + 1; $j < $n; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $inv_count = 0;\n    for(my $i = 0; $i < scalar(@$arr); $i++) {\n        for(my $j = $i+1; $j < scalar(@$arr); $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $inv_count = 0;\n    my $size = scalar @$arr;\n    for (my $i = 0; $i < $size - 1; $i++) {\n        for (my $j = $i + 1; $j < $size; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $inv_count = 0;\n    my $size = scalar(@$arr);\n    for (my $i = 0; $i < $size - 1; $i++) {\n        for (my $j = $i + 1; $j < $size; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar @$arr;\n    my $inv_count = 0;\n    for(my $i = 0; $i < $n - 1; $i++) {\n        for(my $j = $i + 1; $j < $n; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@{$arr});\n    my $inv_count = 0;\n    for(my $i = 0; $i < $n - 1; $i++) {\n        for(my $j = $i + 1; $j < $n; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for(my $i = 0; $i < $n - 1; $i++) {\n        for(my $j = $i + 1; $j < $n; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $inv_count = 0;\n    for(my $i = 0; $i < scalar(@$arr); $i++) {\n        for(my $j = $i+1; $j < scalar(@$arr); $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $inv_count = 0;\n    for(my $i = 0; $i < scalar(@$arr); $i++) {\n        for(my $j = $i+1; $j < scalar(@$arr); $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar @$arr;\n    my $inv_count = 0;\n    for(my $i = 0; $i < $n-1; $i++) {\n        for(my $j = $i+1; $j < $n; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar @$arr;\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@{$arr});\n    my $inv_count = 0;\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = $i+1; $j < $n; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = @$arr;\n    my $inv_count = 0;\n    for(my $i=0; $i<$n-1; $i++) {\n        for(my $j=$i+1; $j<$n; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $inv_count = 0;\n    my $size = scalar @$arr;\n    for(my $i=0; $i<$size-1; $i++) {\n        for(my $j=$i+1; $j<$size; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $count = 0;\n    for(my $i = 0; $i < scalar(@$arr); $i++) {\n        for(my $j = $i + 1; $j < scalar(@$arr); $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $inv_count = 0;\n    my $size = scalar @$arr;\n    for (my $i = 0; $i < $size - 1; $i++) {\n        for (my $j = $i + 1; $j < $size; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    return _mergeSort($arr, 0, $n-1);\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for(my $i=0; $i<$n-1; $i++) {\n        for(my $j=$i+1; $j<$n; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar @$arr;\n    my $inv_count = 0;\n    for(my $i = 0; $i < $n - 1; $i++) {\n        for(my $j = $i + 1; $j < $n; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    return _mergeSort($arr, $n);\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for(my $i = 0; $i < $n - 1; $i++) {\n        for(my $j = $i + 1; $j < $n; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@{$arr});\n    my $inv_count = 0;\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = $i + 1; $j < $n; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $inv_count = 0;\n    my $n = scalar @$arr;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@{$arr});\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $inv_count = 0;\n    my $size = scalar @$arr;\n    for (my $i = 0; $i < $size - 1; $i++) {\n        for (my $j = $i + 1; $j < $size; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $inv_count = 0;\n    for (my $i = 0; $i < scalar(@$arr); $i++) {\n        for (my $j = $i + 1; $j < scalar(@$arr); $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar @$arr;\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for(my $i = 0; $i < $n - 1; $i++) {\n        for(my $j = $i + 1; $j < $n; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for(my $i = 0; $i < $n - 1; $i++) {\n        for(my $j = $i + 1; $j < $n; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $inv_count = 0;\n    for(my $i = 0; $i < scalar(@$arr); $i++) {\n        for(my $j = $i+1; $j < scalar(@$arr); $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for(my $i = 0; $i < $n - 1; $i++) {\n        for(my $j = $i + 1; $j < $n; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar @$arr;\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar @$arr;\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for(my $i = 0; $i < $n - 1; $i++) {\n        for(my $j = $i + 1; $j < $n; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar @$arr;\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar @$arr;\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $inv_count = 0;\n    my $size = scalar(@$arr);\n    for (my $i = 0; $i < $size - 1; $i++) {\n        for (my $j = $i + 1; $j < $size; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    return _merge_Sort_Count($arr, 0, $n-1);\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for(my $i=0; $i<$n-1; $i++) {\n        for(my $j=$i+1; $j<$n; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for(my $i = 0; $i < $n - 1; $i++) {\n        for(my $j = $i + 1; $j < $n; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $inv_count = 0;\n    my $size = scalar @$arr;\n    for (my $i = 0; $i < $size - 1; $i++) {\n        for (my $j = $i + 1; $j < $size; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $inv_count = 0;\n    my $n = scalar(@$arr);\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for(my $i=0; $i<$n-1; $i++) {\n        for(my $j=$i+1; $j<$n; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for(my $i = 0; $i < $n - 1; $i++) {\n        for(my $j = $i + 1; $j < $n; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for(my $i = 0; $i < $n - 1; $i++) {\n        for(my $j = $i + 1; $j < $n; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $inv_count = 0;\n    for(my $i = 0; $i <= $#{$arr}; $i++) {\n        for(my $j = $i+1; $j <= $#{$arr}; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $inv_count = 0;\n    my $n = scalar @$arr;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for(my $i=0; $i<$n; $i++) {\n        for(my $j=$i+1; $j<$n; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $inv_count = 0;\n    my $size = scalar(@{$arr});\n    for(my $i = 0; $i < $size - 1; $i++) {\n        for(my $j = $i + 1; $j < $size; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $inv_count = 0;\n    my $size = scalar(@$arr);\n    for(my $i = 0; $i < $size - 1; $i++) {\n        for(my $j = $i + 1; $j < $size; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $count = 0;\n    for(my $i = 0; $i < scalar(@$arr); $i++) {\n        for(my $j = $i + 1; $j < scalar(@$arr); $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for(my $i = 0; $i < $n - 1; $i++) {\n        for(my $j = $i + 1; $j < $n; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $inv_count = 0;\n    my $size = scalar @$arr;\n    for(my $i = 0; $i < $size - 1; $i++) {\n        for(my $j = $i + 1; $j < $size; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for(my $i = 0; $i < $n - 1; $i++) {\n        for(my $j = $i + 1; $j < $n; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    return _mergeSort($arr, $n);\n}",
    "    my $len = scalar @$arr;\n    my $inv_count = 0;\n    for(my $i = 0; $i < $len; $i++) {\n        for(my $j = $i + 1; $j < $len; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $count = 0;\n    for(my $i = 0; $i < scalar @$arr; $i++) {\n        for(my $j = $i + 1; $j < scalar @$arr; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for(my $i = 0; $i < $n - 1; $i++) {\n        for(my $j = $i + 1; $j < $n; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $inv_count = 0;\n    my $size = scalar(@$arr);\n    for(my $i = 0; $i < $size - 1; $i++) {\n        for(my $j = $i + 1; $j < $size; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $inv_count = 0;\n    for (my $i = 0; $i < scalar(@$arr); $i++) {\n        for (my $j = $i + 1; $j < scalar(@$arr); $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar @$arr;\n    my $inv_count = 0;\n    for(my $i = 0; $i < $n - 1; $i++) {\n        for(my $j = $i + 1; $j < $n; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    return _mergeSort($arr, 0, $n - 1);\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for(my $i = 0; $i < $n - 1; $i++) {\n        for(my $j = $i + 1; $j < $n; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $count = 0;\n    for(my $i = 0; $i < scalar(@$arr); $i++) {\n        for(my $j = $i+1; $j < scalar(@$arr); $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for(my $i = 0; $i < $n - 1; $i++) {\n        for(my $j = $i + 1; $j < $n; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar @$arr;\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for(my $i=0; $i<$n-1; $i++) {\n        for(my $j=$i+1; $j<$n; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my @arr = @{$arr};\n    my $n = scalar @arr;\n    my $inv_count = 0;\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = $i+1; $j < $n; $j++) {\n            if($arr[$i] > $arr[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar @$arr;\n    my $count = 0;\n    for (my $i = 0; $i < $n-1; $i++) {\n        for (my $j = $i+1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $inv_count = 0;\n    my $size = scalar(@$arr);\n    for (my $i = 0; $i < $size - 1; $i++) {\n        for (my $j = $i + 1; $j < $size; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $inv_count = 0;\n    my $n = scalar(@$arr);\n    for(my $i = 0; $i < $n - 1; $i++) {\n        for(my $j = $i + 1; $j < $n; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $inv_count = 0;\n    my $size = scalar @$arr;\n    for(my $i = 0; $i < $size; $i++) {\n        for(my $j = $i + 1; $j < $size; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $inv_count = 0;\n    my $size = scalar @$arr;\n    for(my $i = 0; $i < $size - 1; $i++) {\n        for(my $j = $i + 1; $j < $size; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for(my $i = 0; $i < $n - 1; $i++) {\n        for(my $j = $i + 1; $j < $n; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for(my $i = 0; $i < $n - 1; $i++) {\n        for(my $j = $i + 1; $j < $n; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for(my $i = 0; $i < $n - 1; $i++) {\n        for(my $j = $i + 1; $j < $n; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for(my $i = 0; $i < $n - 1; $i++) {\n        for(my $j = $i + 1; $j < $n; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for(my $i = 0; $i < $n - 1; $i++) {\n        for(my $j = $i + 1; $j < $n; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for(my $i = 0; $i < $n - 1; $i++) {\n        for(my $j = $i + 1; $j < $n; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@{$arr});\n    my $inv_count = 0;\n    for(my $i=0; $i<$n-1; $i++) {\n        for(my $j=$i+1; $j<$n; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    return _merge_sort($arr, 0, $n-1);\n}",
    "    my $n = scalar @$arr;\n    my $inv_count = 0;\n    for(my $i = 0; $i < $n - 1; $i++) {\n        for(my $j = $i + 1; $j < $n; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $count = 0;\n    for(my $i=0; $i<@$arr; $i++) {\n        for(my $j=$i+1; $j<@$arr; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $inv_count = 0;\n    my $size = scalar @$arr;\n    for (my $i = 0; $i < $size; $i++) {\n        for (my $j = $i + 1; $j < $size; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    return get_Inv_Count_Util($arr, 0, $n-1);\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar @$arr;\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for(my $i = 0; $i < $n - 1; $i++) {\n        for(my $j = $i + 1; $j < $n; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for(my $i = 0; $i < $n - 1; $i++) {\n        for(my $j = $i + 1; $j < $n; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    return _merge_sort($arr, 0, $n - 1);\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for(my $i = 0; $i < $n - 1; $i++) {\n        for(my $j = $i + 1; $j < $n; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $inv_count = 0;\n    for (my $i = 0; $i < scalar @$arr; $i++) {\n        for (my $j = $i + 1; $j < scalar @$arr; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $inv_count = 0;\n    my $size = scalar(@$arr);\n    for(my $i = 0; $i < $size; $i++) {\n        for(my $j = $i+1; $j < $size; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar @{$arr};\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $inv_count = 0;\n    my $size = scalar @$arr;\n    for (my $i = 0; $i < $size - 1; $i++) {\n        for (my $j = $i + 1; $j < $size; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for(my $i = 0; $i < $n - 1; $i++) {\n        for(my $j = $i + 1; $j < $n; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $inv_count = 0;\n    for(my $i = 0; $i <= $#{$arr}; $i++) {\n        for(my $j = $i+1; $j <= $#{$arr}; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $inv_count = 0;\n    for(my $i = 0; $i < scalar(@$arr); $i++) {\n        for(my $j = $i + 1; $j < scalar(@$arr); $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n-1; $i++) {\n        for (my $j = $i+1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for(my $i=0; $i<$n-1; $i++) {\n        for(my $j=$i+1; $j<$n; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    return _mergeSort($arr, 0, $n-1);\n}",
    "    my $n = scalar(@$arr);\n    return _merge_sort($arr, 0, $n-1);\n}",
    "    my $n = scalar @$arr;\n    return _merge_Sort($arr, 0, $n-1);\n}",
    "    my $n = scalar(@{$arr});\n    my $inv_count = 0;\n    for(my $i = 0; $i < $n - 1; $i++) {\n        for(my $j = $i + 1; $j < $n; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $inv_count = 0;\n    for(my $i = 0; $i < scalar(@$arr); $i++) {\n        for(my $j = $i+1; $j < scalar(@$arr); $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = $i+1; $j < $n; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $inv_count = 0;\n    for (my $i = 0; $i < scalar(@$arr); $i++) {\n        for (my $j = $i + 1; $j < scalar(@$arr); $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $inv_count = 0;\n    for(my $i = 0; $i < scalar(@$arr) - 1; $i++) {\n        for(my $j = $i + 1; $j < scalar(@$arr); $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for(my $i = 0; $i < $n - 1; $i++) {\n        for(my $j = $i + 1; $j < $n; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $inv_count = 0;\n    for(my $i = 0; $i < scalar @$arr; $i++) {\n        for(my $j = $i+1; $j < scalar @$arr; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $inv_count = 0;\n    my $size = scalar @$arr;\n    for (my $i = 0; $i < $size - 1; $i++) {\n        for (my $j = $i + 1; $j < $size; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $count = 0;\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = $i + 1; $j < $n; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "    my $inv_count = 0;\n    my $n = scalar(@$arr);\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j = $i+1; $j < $n; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar @$arr;\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    if($n == 1) {\n        return 0;\n    }\n    my $mid = int($n/2);\n    my @left = @$arr[0..$mid-1];\n    my @right = @$arr[$mid..$n-1];\n    my $left_inv = get_Inv_Count(\\@left);\n    my $right_inv = get_Inv_Count(\\@right);\n    my $split_inv = get_Split_Inv_Count(\\@left, \\@right);\n    return $left_inv + $right_inv + $split_inv;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for(my $i=0; $i<$n-1; $i++) {\n        for(my $j=$i+1; $j<$n; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $inv_count = 0;\n    for (my $i = 0; $i <= $#{$arr}; $i++) {\n        for (my $j = $i+1; $j <= $#{$arr}; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $inv_count = 0;\n    for (my $i = 0; $i < scalar(@$arr); $i++) {\n        for (my $j = $i + 1; $j < scalar(@$arr); $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    return _mergeSort($arr, 0, $n-1);\n}",
    "    my $n = scalar @$arr;\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $inv_count = 0;\n    my $size = scalar @$arr;\n    for (my $i = 0; $i < $size - 1; $i++) {\n        for (my $j = $i + 1; $j < $size; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    return _mergeSort($arr, 0, $n-1);\n}",
    "    my $inv_count = 0;\n    my $size = scalar @$arr;\n    for(my $i = 0; $i < $size - 1; $i++) {\n        for(my $j = $i + 1; $j < $size; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $inv_count = 0;\n    my $n = scalar @$arr;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for(my $i = 0; $i < $n - 1; $i++) {\n        for(my $j = $i + 1; $j < $n; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar @$arr;\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar(@$arr);\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar @$arr;\n    return _mergeSort($arr, $n);\n}",
    "    my $inv_count = 0;\n    for(my $i = 0; $i <= $#{$arr}; $i++) {\n        for(my $j = $i+1; $j <= $#{$arr}; $j++) {\n            if($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}",
    "    my $n = scalar @$arr;\n    my $inv_count = 0;\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = $i+1; $j < $n; $j++) {\n            if ($arr->[$i] > $arr->[$j]) {\n                $inv_count++;\n            }\n        }\n    }\n    return $inv_count;\n}"
  ]
}