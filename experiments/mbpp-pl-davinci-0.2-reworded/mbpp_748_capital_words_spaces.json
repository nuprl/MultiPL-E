{
  "name": "mbpp_748_capital_words_spaces",
  "language": "pl",
  "prompt": "# Write a function to put spaces between words starting with capital letters in a given string.\nsub capital_words_spaces {\n    my($str1) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_748_capital_words_spaces.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&capital_words_spaces;\n        if(eq_deeply($candidate->(\"Python\"),\"Python\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"PythonProgrammingExamples\"),\"Python Programming Examples\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"GetReadyToBeCodingFreak\"),\"Get Ready To Be Coding Freak\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $str2 = \"\";\n    my $i = 0;\n    while ($i < length($str1)) {\n        my $c = substr($str1, $i, 1);\n        if ($c =~ /[A-Z]/) {\n            $str2 .= \" \";\n        }\n        $str2 .= $c;\n        $i++;\n    }\n    return $str2;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    my @words = split(/([A-Z][a-z]+)/, $str1);\n    return join(\" \", @words);\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    my $str2 = \"\";\n    my $i = 0;\n    while($i < length($str1)) {\n        if(substr($str1, $i, 1) =~ /[A-Z]/) {\n            $str2 .= \" \";\n        }\n        $str2 .= substr($str1, $i, 1);\n        $i++;\n    }\n    return $str2;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}"
  ]
}