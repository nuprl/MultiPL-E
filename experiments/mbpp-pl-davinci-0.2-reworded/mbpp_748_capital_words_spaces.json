{
  "name": "mbpp_748_capital_words_spaces",
  "language": "pl",
  "prompt": "# Write a function to put spaces between words starting with capital letters in a given string.\nsub capital_words_spaces {\n    my($str1) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_748_capital_words_spaces.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&capital_words_spaces;\n        if(eq_deeply($candidate->(\"Python\"),\"Python\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"PythonProgrammingExamples\"),\"Python Programming Examples\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"GetReadyToBeCodingFreak\"),\"Get Ready To Be Coding Freak\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $str2 = \"\";\n    my $i = 0;\n    while ($i < length($str1)) {\n        my $c = substr($str1, $i, 1);\n        if ($c =~ /[A-Z]/) {\n            $str2 .= \" \";\n        }\n        $str2 .= $c;\n        $i++;\n    }\n    return $str2;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    my @words = split(/([A-Z][a-z]+)/, $str1);\n    return join(\" \", @words);\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    my $str2 = \"\";\n    my $i = 0;\n    while($i < length($str1)) {\n        if(substr($str1, $i, 1) =~ /[A-Z]/) {\n            $str2 .= \" \";\n        }\n        $str2 .= substr($str1, $i, 1);\n        $i++;\n    }\n    return $str2;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    my $str2 = \"\";\n    my $str3 = \"\";\n    my $str4 = \"\";\n    my $str5 = \"\";\n    my $str6 = \"\";\n    my $str7 = \"\";\n    my $str8 = \"\";\n    my $str9 = \"\";\n    my $str10 = \"\";\n    my $str11 = \"\";\n    my $str12 = \"\";\n    my $str13 = \"\";\n    my $str14 = \"\";\n    my $str15 = \"\";\n    my $str16 = \"\";\n    my $str17 = \"\";\n    my $str18 = \"\";\n    my $str19 = \"\";\n    my $str20 = \"\";\n    my $str21 = \"\";\n    my $str22 = \"\";\n    my $str23 = \"\";\n    my $str24 = \"\";\n    my $str25 = \"\";\n    my $str26 = \"\";\n    my $str27 = \"\";\n    my $str28 = \"\";\n    my $str29 = \"\";\n    my $str30 = \"\";\n    my $str31 = \"\";\n    my $str32 = \"\";\n    my $str33 = \"\";\n    my $str34 = \"\";\n    my $str35 = \"\";\n    my $str36 = \"\";\n    my $str37 = \"\";\n    my $str38 = \"\";\n    my $str39 = \"\";\n    my $str40 = \"\";\n    my $str41 = \"\";\n    my $str42 = \"\";\n    my $str43 = \"\";\n    my $str44 = \"\";\n    my $str45 = \"\";\n    my $str46 = \"\";\n    my $str47 = \"\";\n    my $str48 = \"\";\n    my $str49 = \"\";\n    my $str50 = \"\";\n    my $str51 = \"\";\n    my $str52 = \"\";\n    my $str53 = \"\";\n    my $str54 = \"\";\n    my $str55 = \"\";\n    my $str56 = \"\";\n    my $str57 = \"\";\n    my $str58 = \"",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    my $result = \"\";\n    my @words = split(/([A-Z][a-z]+)/, $str1);\n    foreach my $word (@words) {\n        $result .= $word . \" \";\n    }\n    return $result;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z][a-z]+)/ $1 /g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/(\\b[A-Z]\\w+\\b)/ $1 /g;\n    return $str1;\n}",
    "    $str1 =~ s/(\\b[A-Z]\\w+)/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    my @words = split(/\\s+/, $str1);\n    my $result = \"\";\n    foreach my $word (@words) {\n        if ($word =~ /^[A-Z]/) {\n            $result .= \" $word\";\n        } else {\n            $result .= $word;\n        }\n    }\n    return $result;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/(\\b[A-Z]\\w+)/ $1 /g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    my $str2 = \"\";\n    my $i = 0;\n    while ($i < length($str1)) {\n        my $c = substr($str1, $i, 1);\n        if ($c =~ /[A-Z]/) {\n            $str2 .= \" \";\n        }\n        $str2 .= $c;\n        $i++;\n    }\n    return $str2;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z][a-z]+)/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/(\\b[A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])([a-z])/$1 $2/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    my $str2 = \"\";\n    my $i = 0;\n    while($i < length($str1)) {\n        if(substr($str1, $i, 1) =~ /[A-Z]/) {\n            $str2 = $str2 . \" \" . substr($str1, $i, 1);\n        }\n        else {\n            $str2 = $str2 . substr($str1, $i, 1);\n        }\n        $i++;\n    }\n    return $str2;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    my $str2 = \"\";\n    my $i = 0;\n    while ($i < length($str1)) {\n        if (substr($str1, $i, 1) =~ /[A-Z]/) {\n            $str2 .= \" \";\n        }\n        $str2 .= substr($str1, $i, 1);\n        $i++;\n    }\n    return $str2;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z][a-z]+)/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/(\\b[A-Z][a-z]+\\b)/ $1 /g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    my @str = split(/([A-Z])/, $str1);\n    my $str2 = join(\" \", @str);\n    return $str2;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/(\\b[A-Z][a-z]+\\b)/ $1 /g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z][a-z]+)/ $1 /g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    my $str2 = $str1;\n    $str2 =~ s/([A-Z])/ $1/g;\n    return $str2;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])([a-z]+)/$1 $2/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    my $str2 = \"\";\n    my $i = 0;\n    my $len = length($str1);\n    while($i < $len) {\n        my $char = substr($str1, $i, 1);\n        if($char =~ /[A-Z]/) {\n            $str2 .= \" \" . $char;\n        } else {\n            $str2 .= $char;\n        }\n        $i++;\n    }\n    return $str2;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    my @words = split(/\\s+/,$str1);\n    my $str2 = \"\";\n    foreach my $word (@words) {\n        if ($word =~ /^[A-Z]/) {\n            $str2 .= \" $word\";\n        } else {\n            $str2 .= $word;\n        }\n    }\n    return $str2;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    my @str1 = split(//, $str1);\n    my $str2 = \"\";\n    foreach my $i (0 .. $#str1) {\n        if ($str1[$i] =~ /[A-Z]/) {\n            if ($i != 0) {\n                $str2 .= \" \";\n            }\n        }\n        $str2 .= $str1[$i];\n    }\n    return $str2;\n}",
    "    $str1 =~ s/(\\b[A-Z][a-z]+\\b)/ $1 /g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z][a-z]+)/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/(\\b[A-Z]\\w+)/ $1 /g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    my $str2 = \"\";\n    my $i = 0;\n    while ($i < length($str1)) {\n        if (substr($str1, $i, 1) =~ /[A-Z]/) {\n            $str2 .= \" \";\n        }\n        $str2 .= substr($str1, $i, 1);\n        $i++;\n    }\n    return $str2;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z][a-z]+)/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}",
    "    $str1 =~ s/([A-Z])/ $1/g;\n    return $str1;\n}"
  ]
}