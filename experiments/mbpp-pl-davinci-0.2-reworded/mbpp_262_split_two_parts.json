{
  "name": "mbpp_262_split_two_parts",
  "language": "pl",
  "prompt": "# Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nsub split_two_parts {\n    my($list1, $L) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_262_split_two_parts.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&split_two_parts;\n        if(eq_deeply($candidate->([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @list2 = ();\n    my @list3 = ();\n    my $i = 0;\n    while ($i < $L) {\n        push(@list2, $list1->[$i]);\n        $i++;\n    }\n    while ($i < scalar(@$list1)) {\n        push(@list3, $list1->[$i]);\n        $i++;\n    }\n    return [\\@list2, \\@list3];\n}",
    "    my @list2 = ();\n    my @list3 = ();\n    for(my $i = 0; $i < $L; $i++) {\n        push @list2, $list1->[$i];\n    }\n    for(my $i = $L; $i < scalar @{$list1}; $i++) {\n        push @list3, $list1->[$i];\n    }\n    return (\\@list2, \\@list3);\n}",
    "    my @list2;\n    my @list3;\n    my @list4;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $aa = 0;\n    my $bb = 0;\n    my $cc = 0;\n    my $dd = 0;\n    my $ee = 0;\n    my $ff = 0;\n    my $gg = 0;\n    my $hh = 0;\n    my $ii = 0;\n    my $jj = 0;\n    my $kk = 0;\n    my $ll = 0;\n    my $mm = 0;\n    my $nn = 0;\n    my $oo = 0;\n    my $pp = 0;\n    my $qq = 0;\n    my $rr = 0;\n    my $ss = 0;\n    my $tt = 0;\n    my $uu = 0;\n    my $vv = 0;\n    my $ww = 0;\n    my $xx = 0;\n    my $yy = 0;\n    my $zz = 0;\n    my $aaa = 0;\n    my $bbb = 0;\n    my $ccc = 0;\n    my $ddd = 0;\n    my $eee = 0;\n    my $fff = 0;\n    my $ggg = 0;\n    my $hhh = 0;\n    my $iii = 0;\n    my $jjj = 0;\n    my $kkk = 0;\n    my $lll = 0;\n    my $mmm = 0;\n    my $nnn = 0;\n    my $ooo = 0;\n    my $ppp = 0;\n    my $qqq = 0;",
    "    my @list2 = splice @$list1, $L;\n    return [$list1, \\@list2];\n}",
    "    my @list2 = ();\n    for(my $i = 0; $i < $L; $i++) {\n        push(@list2, shift(@$list1));\n    }\n    return [\\@list2, $list1];\n}",
    "    my @list2 = ();\n    my @list3 = ();\n    my $i = 0;\n    while ($i < $L) {\n        push @list2, $list1->[$i];\n        $i++;\n    }\n    while ($i < scalar @$list1) {\n        push @list3, $list1->[$i];\n        $i++;\n    }\n    return [\\@list2, \\@list3];\n}",
    "    my @list2 = ();\n    my $i = 0;\n    while ($i < $L) {\n        push @list2, shift @$list1;\n        $i++;\n    }\n    return [\\@list2, $list1];\n}",
    "    my @list2 = ();\n    my @list3 = ();\n    my $i = 0;\n    while ($i < $L) {\n        push @list2, $list1->[$i];\n        $i++;\n    }\n    while ($i < scalar @$list1) {\n        push @list3, $list1->[$i];\n        $i++;\n    }\n    return [\\@list2, \\@list3];\n}",
    "    my @list2 = ();\n    my @list3 = ();\n    my $i = 0;\n    while ($i < $L) {\n        push @list2, $list1->[$i];\n        $i++;\n    }\n    while ($i < scalar @$list1) {\n        push @list3, $list1->[$i];\n        $i++;\n    }\n    return [\\@list2, \\@list3];\n}",
    "    my @list2 = ();\n    my @list3 = ();\n    my $i = 0;\n    while ($i < $L) {\n        push @list2, $list1->[$i];\n        $i++;\n    }\n    while ($i < @$list1) {\n        push @list3, $list1->[$i];\n        $i++;\n    }\n    return (\\@list2, \\@list3);\n}",
    "    my @list2 = ();\n    my @list3 = ();\n    my $i = 0;\n    while ($i < $L) {\n        push @list2, $list1->[$i];\n        $i++;\n    }\n    while ($i < scalar @$list1) {\n        push @list3, $list1->[$i];\n        $i++;\n    }\n    return (\\@list2, \\@list3);\n}",
    "    my @list2 = ();\n    my @list3 = ();\n    for (my $i = 0; $i < $L; $i++) {\n        push @list2, $list1->[$i];\n    }\n    for (my $i = $L; $i < scalar @$list1; $i++) {\n        push @list3, $list1->[$i];\n    }\n    return (\\@list2, \\@list3);\n}",
    "    my @list2 = ();\n    my @list3 = ();\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $length = @$list1;\n    while ($i < $length) {\n        if ($i < $L) {\n            $list2[$j] = $list1->[$i];\n            $j++;\n        }\n        else {\n            $list3[$k] = $list1->[$i];\n            $k++;\n        }\n        $i++;\n    }\n    return (\\@list2, \\@list3);\n}",
    "    my @list1 = @$list1;\n    my @list2 = ();\n    my @list3 = ();\n    my @list4 = ();\n    my $i = 0;\n    while ($i < $L) {\n        push @list2, $list1[$i];\n        $i++;\n    }\n    while ($i < scalar @list1) {\n        push @list3, $list1[$i];\n        $i++;\n    }\n    push @list4, \\@list2;\n    push @list4, \\@list3;\n    return @list4;\n}",
    "    my @list2 = ();\n    my @list3 = ();\n    my $i = 0;\n    while ($i < $L) {\n        push @list2, $list1->[$i];\n        $i++;\n    }\n    while ($i < scalar(@$list1)) {\n        push @list3, $list1->[$i];\n        $i++;\n    }\n    return (\\@list2, \\@list3);\n}",
    "    my @list2 = ();\n    my @list3 = ();\n    my $i = 0;\n    while ($i < $L) {\n        push @list2, $list1->[$i];\n        $i++;\n    }\n    while ($i < scalar @$list1) {\n        push @list3, $list1->[$i];\n        $i++;\n    }\n    return (\\@list2, \\@list3);\n}",
    "    my @list2 = ();\n    my @list3 = ();\n    my @list4 = ();\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = 0;\n    my $n = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $aa = 0;\n    my $bb = 0;\n    my $cc = 0;\n    my $dd = 0;\n    my $ee = 0;\n    my $ff = 0;\n    my $gg = 0;\n    my $hh = 0;\n    my $ii = 0;\n    my $jj = 0;\n    my $kk = 0;\n    my $ll = 0;\n    my $mm = 0;\n    my $nn = 0;\n    my $oo = 0;\n    my $pp = 0;\n    my $qq = 0;\n    my $rr = 0;\n    my $ss = 0;\n    my $tt = 0;\n    my $uu = 0;\n    my $vv = 0;\n    my $ww = 0;\n    my $xx = 0;\n    my $yy = 0;\n    my $zz = 0;\n    my $aaa = 0;\n    my $bbb = 0;\n    my $ccc = 0;\n    my $ddd = 0;\n    my $eee = 0;\n    my $fff = 0;\n    my $ggg = 0;\n    my $hhh = 0;\n    my $iii = 0;\n    my $jjj = 0;\n    my $kkk = 0;\n    my $lll = 0;\n    my $mmm = 0;\n    my $nnn = 0;\n    my $ooo = 0;\n    my $ppp = 0;\n    my $qqq = 0;\n    my $rr",
    "    my @list2 = ();\n    my @list3 = ();\n    my @list4 = ();\n    my $i = 0;\n    my $j = 0;\n    foreach my $element (@$list1) {\n        if ($i < $L) {\n            $list2[$i] = $element;\n            $i++;\n        }\n        else {\n            $list3[$j] = $element;\n            $j++;\n        }\n    }\n    push(@list4, \\@list2);\n    push(@list4, \\@list3);\n    return @list4;\n}",
    "    my @list2 = ();\n    my @list3 = ();\n    my $i = 0;\n    while ($i < $L) {\n        push @list2, $list1->[$i];\n        $i++;\n    }\n    while ($i < scalar @$list1) {\n        push @list3, $list1->[$i];\n        $i++;\n    }\n    return [\\@list2, \\@list3];\n}",
    "    my @list2 = ();\n    my @list3 = ();\n    for (my $i = 0; $i < $L; $i++) {\n        push @list2, $list1->[$i];\n    }\n    for (my $i = $L; $i < scalar @$list1; $i++) {\n        push @list3, $list1->[$i];\n    }\n    return [\\@list2, \\@list3];\n}"
  ]
}