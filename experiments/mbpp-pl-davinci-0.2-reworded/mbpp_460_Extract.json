{
  "name": "mbpp_460_Extract",
  "language": "pl",
  "prompt": "# Write a plthon function to get the first element of each subarray.\nsub Extract {\n    my($lst) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_460_Extract.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Extract;\n        if(eq_deeply($candidate->([[1, 2], [3, 4, 5], [6, 7, 8, 9]]),[1, 3, 6])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5]]),[1, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[9, 8, 1], [1, 2]]),[9, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @result = ();\n    foreach my $subarray (@$lst) {\n        push @result, $subarray->[0];\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $sub (@$lst) {\n        push @result, $sub->[0];\n    }\n    return \\@result;\n}",
    "    my @result = ();\n    foreach my $item (@$lst) {\n        push(@result, $item->[0]);\n    }\n    return \\@result;\n}",
    "    my @lst = @$lst;\n    my @result = ();\n    for my $sublst (@lst) {\n        my @sublst = @$sublst;\n        push @result, $sublst[0];\n    }\n    return @result;\n}",
    "    my @result;\n    foreach my $sublst (@$lst) {\n\tpush(@result, $sublst->[0]);\n    }\n    return @result;\n}",
    "    my @result = ();\n    foreach my $sublst (@$lst) {\n\tpush @result, $sublst->[0];\n    }\n    return @result;\n}",
    "    my @result;\n    foreach my $sub (@$lst) {\n        push @result, $sub->[0];\n    }\n    return \\@result;\n}",
    "    my @result = ();\n    foreach my $subarray (@$lst) {\n        push(@result, $subarray->[0]);\n    }\n    return \\@result;\n}",
    "    my @result;\n    foreach my $subarray (@$lst) {\n        push @result, $subarray->[0];\n    }\n    return \\@result;\n}",
    "    my @result = ();\n    foreach my $sub (@$lst) {\n\tpush @result, $sub->[0];\n    }\n    return @result;\n}",
    "    my @result = ();\n    foreach my $sublst (@$lst) {\n        push @result, $sublst->[0];\n    }\n    return @result;\n}",
    "    my @result = ();\n    foreach my $sublst (@$lst) {\n        push @result, $sublst->[0];\n    }\n    return \\@result;\n}",
    "    my @result = ();\n    foreach my $sub (@{$lst}) {\n\tpush @result, $sub->[0];\n    }\n    return \\@result;\n}",
    "    my @result = ();\n    foreach my $sublst (@$lst) {\n        push(@result, $sublst->[0]);\n    }\n    return @result;\n}",
    "    my @result = ();\n    foreach my $sub (@$lst) {\n        push @result, $sub->[0];\n    }\n    return @result;\n}",
    "    my @result;\n    foreach my $sub (@$lst) {\n\tpush @result, $sub->[0];\n    }\n    return @result;\n}",
    "    my @result = ();\n    foreach my $sub (@$lst) {\n        push(@result, $sub->[0]);\n    }\n    return @result;\n}",
    "    my @result = ();\n    foreach my $sublst (@$lst) {\n\tpush(@result, $sublst->[0]);\n    }\n    return @result;\n}",
    "    my @result;\n    foreach my $subarray (@$lst) {\n\tpush @result, $subarray->[0];\n    }\n    return \\@result;\n}",
    "    my @result = ();\n    for my $sublist (@$lst) {\n        push @result, $sublist->[0];\n    }\n    return \\@result;\n}"
  ]
}