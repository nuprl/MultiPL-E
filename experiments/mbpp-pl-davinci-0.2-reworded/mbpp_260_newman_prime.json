{
  "name": "mbpp_260_newman_prime",
  "language": "pl",
  "prompt": "# Write a function to find the nth newman\u2013shanks\u2013williams prime number.\nsub newman_prime {\n    my($n) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_260_newman_prime.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&newman_prime;\n        if(eq_deeply($candidate->(3),7)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),17)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),41)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $p = 1;\n    my $i = 0;\n    while ($i < $n) {\n        $p = next_prime($p);\n        $i++ if is_newman_prime($p);\n    }\n    return $p;\n}",
    "    my $p = 2;\n    my $i = 1;\n    while ($i < $n) {\n        $p = next_prime($p);\n        $i++ if is_newman_prime($p);\n    }\n    return $p;\n}",
    "    my $i = 0;\n    my $p = 1;\n    while ($i < $n) {\n        $p += 2 * $p + 1;\n        $i++ if is_prime($p);\n    }\n    return $p;\n}",
    "    my $i = 0;\n    my $p = 1;\n    while ($i < $n) {\n        $p = next_prime($p);\n        $i++ if is_prime($p**2 - 1);\n    }\n    return $p;\n}",
    "    my $p = 1;\n    for (1 .. $n) {\n        $p = next_prime($p);\n        $p = next_prime(2*$p + 1);\n    }\n    return $p;\n}",
    "    my $i = 0;\n    my $p = 1;\n    while ($i < $n) {\n        $p = next_prime($p);\n        $i++ if is_prime($p*$p - $p + 1);\n    }\n    return $p;\n}",
    "    my $i = 0;\n    my $p = 2;\n    while ($i < $n) {\n        $p = next_prime($p);\n        $i++ if is_newman_prime($p);\n    }\n    return $p;\n}",
    "    my $i = 0;\n    my $p = 1;\n    while ($i < $n) {\n        $p = next_prime($p);\n        if (is_prime(($p*$p)-2)) {\n            $i++;\n        }\n    }\n    return $p;\n}",
    "    my $p = 2;\n    my $i = 1;\n    while ($i < $n) {\n        $p = next_prime($p);\n        $i++ if is_newman_prime($p);\n    }\n    return $p;\n}",
    "    my $i = 0;\n    my $p = 1;\n    while ($i < $n) {\n        $p = next_newman_prime($p);\n        $i++;\n    }\n    return $p;\n}",
    "    my $i = 0;\n    my $p = 1;\n    while ($i < $n) {\n        $p = next_prime($p);\n        $i++ if is_newman_prime($p);\n    }\n    return $p;\n}",
    "    my $p = 1;\n    for (1 .. $n) {\n        $p = next_newman_prime($p);\n    }\n    return $p;\n}",
    "    my $i = 0;\n    my $p = 1;\n    while ($i < $n) {\n        $p = next_prime($p);\n        $i++ if is_prime(($p-1)**2 + 1);\n    }\n    return $p;\n}",
    "    my $p = 2;\n    my $i = 1;\n    while ($i < $n) {\n        $p = next_prime($p);\n        $i++ if is_prime(($p-1)**2 + 1);\n    }\n    return $p;\n}",
    "    my $i = 1;\n    my $p = 2;\n    while ($i < $n) {\n        $p = next_prime($p);\n        $i++;\n    }\n    return $p;\n}",
    "    my $i = 0;\n    my $p = 1;\n    while ($i < $n) {\n        $p += 2 * $p + 1;\n        $i++ if is_prime($p);\n    }\n    return $p;\n}",
    "    my $i = 0;\n    my $p = 1;\n    while ($i < $n) {\n        $p += 2 * $p + 1;\n        $i++ if is_prime($p);\n    }\n    return $p;\n}",
    "    my $i = 0;\n    my $p = 1;\n    while ($i < $n) {\n        $p = next_prime($p);\n        $i++ if is_newman_prime($p);\n    }\n    return $p;\n}",
    "    my $p = 2;\n    my $i = 1;\n    while ($i < $n) {\n        $p = next_prime($p);\n        $i++ if is_prime($p * $p - 1);\n    }\n    return $p;\n}",
    "    my $i = 0;\n    my $p = 1;\n    while ($i < $n) {\n        $p = next_prime($p);\n        $i++ if is_prime(($p-1)**2 + 1);\n    }\n    return $p;\n}"
  ]
}