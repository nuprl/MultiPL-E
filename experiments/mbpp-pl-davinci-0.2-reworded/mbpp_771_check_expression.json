{
  "name": "mbpp_771_check_expression",
  "language": "pl",
  "prompt": "# Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nsub check_expression {\n    my($exp) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_expression;\n        if(eq_deeply($candidate->(\"{()}[{}]\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"{()}[{]\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"{()}[{}][]({})\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @stack;\n    my @exp_arr = split(//, $exp);\n    foreach my $char (@exp_arr) {\n        if ($char eq '(' || $char eq '{' || $char eq '[') {\n            push(@stack, $char);\n        }\n        elsif ($char eq ')' || $char eq '}' || $char eq ']') {\n            my $top = pop(@stack);\n            if ($top eq '(' && $char ne ')') {\n                return 0;\n            }\n            elsif ($top eq '{' && $char ne '}') {\n                return 0;\n            }\n            elsif ($top eq '[' && $char ne ']') {\n                return 0;\n            }\n        }\n    }\n    if (scalar(@stack) == 0) {\n        return 1;\n    }\n    return 0;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my $i = 0;\n    while ($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push(@stack, $c);\n        } elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop(@stack);\n            if ($c eq ')' && $top ne '(') {\n                $balanced = 0;\n                last;\n            } elsif ($c eq '}' && $top ne '{') {\n                $balanced = 0;\n                last;\n            } elsif ($c eq ']' && $top ne '[') {\n                $balanced = 0;\n                last;\n            }\n        }\n        $i++;\n    }\n    if ($balanced && scalar(@stack) == 0) {\n        return 1;\n    }\n    return 0;\n}",
    "    my @stack;\n    my %braces = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']'\n    );\n    for my $char (split //, $exp) {\n        if ($char eq '(' || $char eq '{' || $char eq '[') {\n            push @stack, $char;\n        }\n        elsif ($char eq ')' || $char eq '}' || $char eq ']') {\n            my $last = pop @stack;\n            return 0 if $braces{$last} ne $char;\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        }\n        elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            my $last = pop @stack;\n            if ($brackets{$last} ne $c) {\n                return 0;\n            }\n        }\n    }\n    return @stack == 0;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    my $balanced = 1;\n    for my $char (split //, $exp) {\n        if (exists $brackets{$char}) {\n            push @stack, $char;\n        }\n        elsif ($char eq ')' || $char eq '}' || $char eq ']') {\n            my $last = pop @stack;\n            if ($brackets{$last} ne $char) {\n                $balanced = 0;\n                last;\n            }\n        }\n    }\n    return $balanced;\n}",
    "    my @stack;\n    for my $c (split //, $exp) {\n        if ($c eq '(') {\n            push @stack, $c;\n        } elsif ($c eq ')') {\n            if (scalar @stack == 0) {\n                return 0;\n            } else {\n                pop @stack;\n            }\n        }\n    }\n    return scalar @stack == 0;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '[' => ']',\n        '{' => '}',\n    );\n    for my $char (split //, $exp) {\n        if (exists $brackets{$char}) {\n            push @stack, $char;\n        }\n        elsif (scalar @stack && $brackets{$stack[-1]} eq $char) {\n            pop @stack;\n        }\n        else {\n            return 0;\n        }\n    }\n    return scalar @stack ? 0 : 1;\n}",
    "    my @stack;\n    my %hash = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    my @exp = split //, $exp;\n    for my $char (@exp) {\n        if ($char eq '(' || $char eq '{' || $char eq '[') {\n            push @stack, $char;\n        }\n        elsif ($char eq ')' || $char eq '}' || $char eq ']') {\n            my $top = pop @stack;\n            if ($hash{$top} ne $char) {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my %pairs = (\n        '(' => ')',\n        '[' => ']',\n        '{' => '}',\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '[' || $c eq '{') {\n            push @stack, $c;\n        }\n        elsif ($c eq ')' || $c eq ']' || $c eq '}') {\n            my $top = pop @stack;\n            if (!defined $top || $c ne $pairs{$top}) {\n                $balanced = 0;\n                last;\n            }\n        }\n    }\n    if (@stack) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '[' => ']',\n        '{' => '}',\n    );\n    for my $char (split //, $exp) {\n        if (exists $brackets{$char}) {\n            push @stack, $char;\n        }\n        elsif (defined $stack[-1] && $brackets{$stack[-1]} eq $char) {\n            pop @stack;\n        }\n        else {\n            return 0;\n        }\n    }\n    return @stack ? 0 : 1;\n}",
    "    my @stack;\n    my @exp = split(//, $exp);\n    for my $i (0..$#exp) {\n        if ($exp[$i] eq '(' or $exp[$i] eq '{' or $exp[$i] eq '[') {\n            push @stack, $exp[$i];\n        }\n        elsif ($exp[$i] eq ')' or $exp[$i] eq '}' or $exp[$i] eq ']') {\n            my $top = pop @stack;\n            if ($exp[$i] eq ')' and $top ne '(') {\n                return 0;\n            }\n            elsif ($exp[$i] eq '}' and $top ne '{') {\n                return 0;\n            }\n            elsif ($exp[$i] eq ']' and $top ne '[') {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $char (split //, $exp) {\n        if (exists $brackets{$char}) {\n            push @stack, $char;\n        }\n        elsif (scalar @stack == 0) {\n            return 0;\n        }\n        elsif ($brackets{$stack[-1]} eq $char) {\n            pop @stack;\n        }\n        else {\n            return 0;\n        }\n    }\n    return scalar @stack == 0;\n}",
    "    my @stack;\n    my %brackets = (\n        '{' => '}',\n        '(' => ')',\n        '[' => ']',\n    );\n    foreach my $char (split //, $exp) {\n        if (exists $brackets{$char}) {\n            push @stack, $char;\n        }\n        elsif (scalar @stack > 0 && $brackets{$stack[-1]} eq $char) {\n            pop @stack;\n        }\n        else {\n            return 0;\n        }\n    }\n    return scalar @stack == 0;\n}",
    "    my @stack;\n    my %hash = (\n        '(' => ')',\n        '[' => ']',\n        '{' => '}',\n    );\n    for my $char (split //, $exp) {\n        if ($char eq '(' || $char eq '[' || $char eq '{') {\n            push @stack, $char;\n        }\n        elsif ($char eq ')' || $char eq ']' || $char eq '}') {\n            my $top = pop @stack;\n            if ($hash{$top} ne $char) {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        }\n        elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop @stack;\n            if ($brackets{$top} ne $c) {\n                return 0;\n            }\n        }\n    }\n    return @stack == 0;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my $i = 0;\n    while ($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if ($c eq '(') {\n            push @stack, $c;\n        } elsif ($c eq ')') {\n            if (scalar(@stack) == 0) {\n                $balanced = 0;\n                last;\n            } else {\n                pop @stack;\n            }\n        }\n        $i++;\n    }\n    if (scalar(@stack) > 0) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my %map = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        }\n        elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            if (scalar @stack == 0) {\n                return 0;\n            }\n            my $top = pop @stack;\n            if ($map{$top} ne $c) {\n                return 0;\n            }\n        }\n    }\n    return scalar @stack == 0;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my $i = 0;\n    while($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push(@stack, $c);\n        }\n        elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop(@stack);\n            if($top eq '(' && $c ne ')') {\n                $balanced = 0;\n                last;\n            }\n            if($top eq '{' && $c ne '}') {\n                $balanced = 0;\n                last;\n            }\n            if($top eq '[' && $c ne ']') {\n                $balanced = 0;\n                last;\n            }\n        }\n        $i++;\n    }\n    if(scalar(@stack) > 0) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my %map = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        } elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop @stack;\n            return 0 if !$top || $map{$top} ne $c;\n        }\n    }\n    return @stack ? 0 : 1;\n}",
    "    my @stack;\n    my %brackets = (\n        '{' => '}',\n        '[' => ']',\n        '(' => ')'\n    );\n    for my $char (split //, $exp) {\n        if (exists $brackets{$char}) {\n            push @stack, $char;\n        } elsif (scalar @stack == 0) {\n            return 0;\n        } else {\n            my $top = pop @stack;\n            if ($char ne $brackets{$top}) {\n                return 0;\n            }\n        }\n    }\n    return scalar @stack == 0;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']'\n    );\n    for my $char (split //, $exp) {\n        if ($char eq '(' || $char eq '{' || $char eq '[') {\n            push @stack, $char;\n        } elsif ($char eq ')' || $char eq '}' || $char eq ']') {\n            my $top = pop @stack;\n            if ($brackets{$top} ne $char) {\n                $balanced = 0;\n                last;\n            }\n        }\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my $i = 0;\n    while($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push(@stack, $c);\n        } elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            if(scalar(@stack) == 0) {\n                $balanced = 0;\n                last;\n            }\n            my $top = pop(@stack);\n            if(($top eq '(' && $c ne ')') || ($top eq '{' && $c ne '}') || ($top eq '[' && $c ne ']')) {\n                $balanced = 0;\n                last;\n            }\n        }\n        $i++;\n    }\n    if(scalar(@stack) != 0) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my %pairs = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']'\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        } elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            if (@stack) {\n                my $top = pop @stack;\n                if ($pairs{$top} ne $c) {\n                    $balanced = 0;\n                    last;\n                }\n            } else {\n                $balanced = 0;\n                last;\n            }\n        }\n    }\n    if (@stack) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my $i = 0;\n    while($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push(@stack, $c);\n        }\n        elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop(@stack);\n            if($top eq '(' && $c ne ')' || $top eq '{' && $c ne '}' || $top eq '[' && $c ne ']') {\n                $balanced = 0;\n                last;\n            }\n        }\n        $i++;\n    }\n    if($balanced && scalar(@stack) == 0) {\n        return 1;\n    }\n    else {\n        return 0;\n    }\n}",
    "    my @stack;\n    my $balanced = 1;\n    my $i = 0;\n    while($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        }\n        elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            if(scalar(@stack) == 0) {\n                $balanced = 0;\n                last;\n            }\n            my $top = pop @stack;\n            if($c eq ')' && $top ne '(') {\n                $balanced = 0;\n                last;\n            }\n            elsif($c eq '}' && $top ne '{') {\n                $balanced = 0;\n                last;\n            }\n            elsif($c eq ']' && $top ne '[') {\n                $balanced = 0;\n                last;\n            }\n        }\n        $i++;\n    }\n    if($balanced == 1 && scalar(@stack) == 0) {\n        return 1;\n    }\n    else {\n        return 0;\n    }\n}",
    "    my @stack;\n    my %pairs = (\n        '{' => '}',\n        '[' => ']',\n        '(' => ')',\n    );\n    for my $char (split //, $exp) {\n        if ($char eq '{' || $char eq '[' || $char eq '(') {\n            push @stack, $char;\n        }\n        elsif ($char eq '}' || $char eq ']' || $char eq ')') {\n            if ($pairs{$stack[-1]} eq $char) {\n                pop @stack;\n            }\n            else {\n                return 0;\n            }\n        }\n    }\n    return @stack ? 0 : 1;\n}",
    "    my @stack;\n    my %pairs = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']'\n    );\n    for my $c (split //, $exp) {\n        if (exists $pairs{$c}) {\n            push @stack, $c;\n        } elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop @stack;\n            if ($pairs{$top} ne $c) {\n                return 0;\n            }\n        }\n    }\n    return @stack == 0;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my $i = 0;\n    while($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push(@stack, $c);\n        }\n        elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            if(scalar(@stack) == 0) {\n                $balanced = 0;\n                last;\n            }\n            my $top = pop(@stack);\n            if($c eq ')' && $top ne '(') {\n                $balanced = 0;\n                last;\n            }\n            if($c eq '}' && $top ne '{') {\n                $balanced = 0;\n                last;\n            }\n            if($c eq ']' && $top ne '[') {\n                $balanced = 0;\n                last;\n            }\n        }\n        $i++;\n    }\n    if($balanced == 1 && scalar(@stack) == 0) {\n        return 1;\n    }\n    return 0;\n}",
    "    my @stack;\n    my %map = (\n        '(' => ')',\n        '[' => ']',\n        '{' => '}',\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '[' || $c eq '{') {\n            push @stack, $c;\n        }\n        elsif ($c eq ')' || $c eq ']' || $c eq '}') {\n            my $top = pop @stack;\n            return 0 if (!$top || $map{$top} ne $c);\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    my %closing_brackets = reverse %brackets;\n    for my $char (split //, $exp) {\n        if (exists $brackets{$char}) {\n            push @stack, $char;\n        }\n        elsif (exists $closing_brackets{$char}) {\n            my $last_bracket = pop @stack;\n            return 0 if $brackets{$last_bracket} ne $char;\n        }\n    }\n    return @stack ? 0 : 1;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my $i = 0;\n    while($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push(@stack, $c);\n        }\n        elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop(@stack);\n            if($top eq '(' && $c ne ')') {\n                $balanced = 0;\n                last;\n            }\n            elsif($top eq '{' && $c ne '}') {\n                $balanced = 0;\n                last;\n            }\n            elsif($top eq '[' && $c ne ']') {\n                $balanced = 0;\n                last;\n            }\n        }\n        $i++;\n    }\n    if(scalar(@stack) > 0) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my $i = 0;\n    while($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        }\n        elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop @stack;\n            if(($c eq ')' && $top ne '(') || ($c eq '}' && $top ne '{') || ($c eq ']' && $top ne '[')) {\n                return 0;\n            }\n        }\n        $i++;\n    }\n    return 1;\n}",
    "    my @stack;\n    my $i = 0;\n    while($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push(@stack, $c);\n        }\n        elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop(@stack);\n            if(($c eq ')' && $top ne '(') || ($c eq '}' && $top ne '{') || ($c eq ']' && $top ne '[')) {\n                return 0;\n            }\n        }\n        $i++;\n    }\n    return 1;\n}",
    "    my @stack;\n    my @exp = split //, $exp;\n    for my $c (@exp) {\n        if ($c eq '(') {\n            push @stack, $c;\n        }\n        elsif ($c eq ')') {\n            if (scalar @stack == 0) {\n                return 0;\n            }\n            else {\n                pop @stack;\n            }\n        }\n    }\n    return scalar @stack == 0;\n}",
    "    my @stack;\n    my %map = (\n        '(' => ')',\n        '[' => ']',\n        '{' => '}'\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '[' || $c eq '{') {\n            push @stack, $c;\n        }\n        elsif ($c eq ')' || $c eq ']' || $c eq '}') {\n            my $top = pop @stack;\n            if ($map{$top} ne $c) {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '[' => ']',\n        '{' => '}',\n    );\n    my $balanced = 1;\n    foreach my $char (split //, $exp) {\n        if (exists $brackets{$char}) {\n            push @stack, $char;\n        }\n        elsif (scalar @stack > 0 && $char eq $brackets{$stack[-1]}) {\n            pop @stack;\n        }\n        else {\n            $balanced = 0;\n            last;\n        }\n    }\n    $balanced = 0 if scalar @stack > 0;\n    return $balanced;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my %pairs = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        }\n        elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            if (!@stack) {\n                $balanced = 0;\n                last;\n            }\n            my $top = pop @stack;\n            if ($pairs{$top} ne $c) {\n                $balanced = 0;\n                last;\n            }\n        }\n    }\n    if (@stack) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my $i = 0;\n    my $len = length($exp);\n    while($i < $len) {\n        my $ch = substr($exp, $i, 1);\n        if($ch eq '(' || $ch eq '{' || $ch eq '[') {\n            push(@stack, $ch);\n        }\n        elsif($ch eq ')' || $ch eq '}' || $ch eq ']') {\n            my $top = pop(@stack);\n            if(!$top) {\n                return 0;\n            }\n            if(($ch eq ')' && $top ne '(') || ($ch eq '}' && $top ne '{') || ($ch eq ']' && $top ne '[')) {\n                return 0;\n            }\n        }\n        $i++;\n    }\n    if(scalar(@stack) > 0) {\n        return 0;\n    }\n    return 1;\n}",
    "    my @stack;\n    my %map = (\n        '{' => '}',\n        '[' => ']',\n        '(' => ')',\n    );\n    for my $c (split //, $exp) {\n        if (exists $map{$c}) {\n            push @stack, $c;\n        }\n        elsif ($c eq '}' || $c eq ']' || $c eq ')') {\n            my $top = pop @stack;\n            if ($map{$top} ne $c) {\n                return 0;\n            }\n        }\n    }\n    return @stack == 0;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my $i = 0;\n    while($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push(@stack, $c);\n        }\n        elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop(@stack);\n            if($top eq '(' && $c ne ')') {\n                $balanced = 0;\n                last;\n            }\n            elsif($top eq '{' && $c ne '}') {\n                $balanced = 0;\n                last;\n            }\n            elsif($top eq '[' && $c ne ']') {\n                $balanced = 0;\n                last;\n            }\n        }\n        $i++;\n    }\n    if($balanced == 1 && scalar(@stack) == 0) {\n        return 1;\n    }\n    else {\n        return 0;\n    }\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $char (split //, $exp) {\n        if (exists $brackets{$char}) {\n            push @stack, $char;\n        }\n        elsif ($char eq ')' || $char eq '}' || $char eq ']') {\n            if ($brackets{pop @stack} ne $char) {\n                return 0;\n            }\n        }\n    }\n    return @stack ? 0 : 1;\n}",
    "    my @stack;\n    my $i = 0;\n    while($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push(@stack, $c);\n        }\n        elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop(@stack);\n            if(($top eq '(' && $c ne ')') || ($top eq '{' && $c ne '}') || ($top eq '[' && $c ne ']')) {\n                return 0;\n            }\n        }\n        $i++;\n    }\n    return 1;\n}",
    "    my @stack;\n    my $i = 0;\n    my $len = length($exp);\n    while($i < $len) {\n        my $ch = substr($exp, $i, 1);\n        if($ch eq '(' || $ch eq '{' || $ch eq '[') {\n            push(@stack, $ch);\n        }\n        elsif($ch eq ')' || $ch eq '}' || $ch eq ']') {\n            my $top = pop(@stack);\n            if(($ch eq ')' && $top ne '(') ||\n               ($ch eq '}' && $top ne '{') ||\n               ($ch eq ']' && $top ne '[')) {\n                return 0;\n            }\n        }\n        $i++;\n    }\n    return 1;\n}",
    "    my @stack;\n    my @exp = split(//, $exp);\n    for my $char (@exp) {\n        if ($char eq '(' || $char eq '{' || $char eq '[') {\n            push @stack, $char;\n        }\n        elsif ($char eq ')' || $char eq '}' || $char eq ']') {\n            my $top = pop @stack;\n            if ($top eq '(' && $char ne ')') {\n                return 0;\n            }\n            elsif ($top eq '{' && $char ne '}') {\n                return 0;\n            }\n            elsif ($top eq '[' && $char ne ']') {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my %braces = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $char (split //, $exp) {\n        if (exists $braces{$char}) {\n            push @stack, $char;\n        }\n        elsif (my $open = pop @stack) {\n            if ($char ne $braces{$open}) {\n                $balanced = 0;\n                last;\n            }\n        }\n        else {\n            $balanced = 0;\n            last;\n        }\n    }\n    $balanced = 0 if @stack;\n    return $balanced;\n}",
    "    my @stack;\n    my %pairs = (\n        '{' => '}',\n        '[' => ']',\n        '(' => ')',\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '{' || $c eq '[' || $c eq '(') {\n            push @stack, $c;\n        }\n        elsif ($c eq '}' || $c eq ']' || $c eq ')') {\n            my $last = pop @stack;\n            return 0 if $pairs{$last} ne $c;\n        }\n    }\n    return 0 if @stack;\n    return 1;\n}",
    "    my @stack;\n    my $balanced = 1;\n    foreach my $char (split //, $exp) {\n        if ($char eq '(') {\n            push @stack, $char;\n        } elsif ($char eq ')') {\n            if (scalar @stack == 0) {\n                $balanced = 0;\n                last;\n            } else {\n                pop @stack;\n            }\n        }\n    }\n    if (scalar @stack != 0) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my $balanced = 1;\n    foreach my $c (split //, $exp) {\n        if ($c eq '(') {\n            push @stack, $c;\n        } elsif ($c eq ')') {\n            if (scalar @stack == 0) {\n                $balanced = 0;\n                last;\n            } else {\n                pop @stack;\n            }\n        }\n    }\n    if (scalar @stack > 0) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my @exp_array = split(//, $exp);\n    my $balanced = 1;\n    foreach my $ch (@exp_array) {\n        if ($ch eq '(' || $ch eq '{' || $ch eq '[') {\n            push(@stack, $ch);\n        }\n        elsif ($ch eq ')' || $ch eq '}' || $ch eq ']') {\n            if (scalar(@stack) == 0) {\n                $balanced = 0;\n                last;\n            }\n            my $top = pop(@stack);\n            if ($ch eq ')' && $top ne '(') {\n                $balanced = 0;\n                last;\n            }\n            elsif ($ch eq '}' && $top ne '{') {\n                $balanced = 0;\n                last;\n            }\n            elsif ($ch eq ']' && $top ne '[') {\n                $balanced = 0;\n                last;\n            }\n        }\n    }\n    if (scalar(@stack) > 0) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    my @exp = split(//, $exp);\n    for my $c (@exp) {\n        if (exists $brackets{$c}) {\n            push @stack, $c;\n        } elsif (scalar @stack > 0 && $brackets{$stack[-1]} eq $c) {\n            pop @stack;\n        } else {\n            return 0;\n        }\n    }\n    return scalar @stack == 0;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my $i = 0;\n    while ($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if ($c eq '(' || $c eq '[' || $c eq '{') {\n            push(@stack, $c);\n        }\n        elsif ($c eq ')' || $c eq ']' || $c eq '}') {\n            if (scalar(@stack) == 0) {\n                $balanced = 0;\n                last;\n            }\n            my $top = pop(@stack);\n            if ($c eq ')' && $top ne '(') {\n                $balanced = 0;\n                last;\n            }\n            if ($c eq ']' && $top ne '[') {\n                $balanced = 0;\n                last;\n            }\n            if ($c eq '}' && $top ne '{') {\n                $balanced = 0;\n                last;\n            }\n        }\n        $i++;\n    }\n    if (scalar(@stack) != 0) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my $i = 0;\n    while($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push(@stack, $c);\n        }\n        elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop(@stack);\n            if(($c eq ')' && $top ne '(') || ($c eq '}' && $top ne '{') || ($c eq ']' && $top ne '[')) {\n                $balanced = 0;\n                last;\n            }\n        }\n        $i++;\n    }\n    if($balanced && scalar(@stack) == 0) {\n        return 1;\n    }\n    else {\n        return 0;\n    }\n}",
    "    my @stack = ();\n    my %pairs = (\n        '(' => ')',\n        '[' => ']',\n        '{' => '}'\n    );\n    for my $char (split //, $exp) {\n        if ($char eq '(' || $char eq '[' || $char eq '{') {\n            push @stack, $char;\n        }\n        elsif ($char eq ')' || $char eq ']' || $char eq '}') {\n            my $top = pop @stack;\n            return 0 if $pairs{$top} ne $char;\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my @exp = split(//, $exp);\n    foreach my $c (@exp) {\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push(@stack, $c);\n        } elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop(@stack);\n            if ($top eq '(' && $c ne ')') {\n                return 0;\n            } elsif ($top eq '{' && $c ne '}') {\n                return 0;\n            } elsif ($top eq '[' && $c ne ']') {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my %map = (\n        '(' => ')',\n        '[' => ']',\n        '{' => '}',\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '[' || $c eq '{') {\n            push @stack, $c;\n        } elsif ($c eq ')' || $c eq ']' || $c eq '}') {\n            my $top = pop @stack;\n            if (!$top || $map{$top} ne $c) {\n                return 0;\n            }\n        }\n    }\n    return @stack == 0;\n}",
    "    my @stack;\n    my %pairs = (\n        '(' => ')',\n        '[' => ']',\n        '{' => '}',\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '[' || $c eq '{') {\n            push @stack, $c;\n        }\n        elsif ($c eq ')' || $c eq ']' || $c eq '}') {\n            my $top = pop @stack;\n            if ($c ne $pairs{$top}) {\n                return 0;\n            }\n        }\n    }\n    return @stack ? 0 : 1;\n}",
    "    my @stack;\n    my %pairs = (\n        '{' => '}',\n        '(' => ')',\n        '[' => ']',\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '{' || $c eq '(' || $c eq '[') {\n            push @stack, $c;\n        } elsif ($c eq '}' || $c eq ')' || $c eq ']') {\n            my $top = pop @stack;\n            if ($pairs{$top} ne $c) {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my @stack = ();\n    my @chars = split //, $exp;\n    for my $c (@chars) {\n        if ($c eq '(') {\n            push @stack, $c;\n        } elsif ($c eq ')') {\n            if (scalar @stack == 0) {\n                return 0;\n            }\n            pop @stack;\n        }\n    }\n    return scalar @stack == 0;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my $i = 0;\n    while($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        }\n        elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            if(scalar @stack == 0) {\n                $balanced = 0;\n                last;\n            }\n            my $top = pop @stack;\n            if($c eq ')' && $top ne '(') {\n                $balanced = 0;\n                last;\n            }\n            if($c eq '}' && $top ne '{') {\n                $balanced = 0;\n                last;\n            }\n            if($c eq ']' && $top ne '[') {\n                $balanced = 0;\n                last;\n            }\n        }\n        $i++;\n    }\n    if(scalar @stack != 0) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my $i = 0;\n    while($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push(@stack, $c);\n        }\n        elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            if(scalar(@stack) == 0) {\n                $balanced = 0;\n                last;\n            }\n            my $top = pop(@stack);\n            if($c eq ')' && $top ne '(') {\n                $balanced = 0;\n                last;\n            }\n            elsif($c eq '}' && $top ne '{') {\n                $balanced = 0;\n                last;\n            }\n            elsif($c eq ']' && $top ne '[') {\n                $balanced = 0;\n                last;\n            }\n        }\n        $i++;\n    }\n    if(scalar(@stack) != 0) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    for my $c (split //, $exp) {\n        if ($c eq '(') {\n            push @stack, $c;\n        } elsif ($c eq ')') {\n            if (@stack == 0) {\n                return 0;\n            } else {\n                pop @stack;\n            }\n        }\n    }\n    return @stack == 0;\n}",
    "    my @stack;\n    my $balanced = 1;\n    for my $c (split //, $exp) {\n        if ($c eq '(') {\n            push @stack, $c;\n        }\n        elsif ($c eq ')') {\n            if (@stack == 0) {\n                $balanced = 0;\n                last;\n            }\n            else {\n                pop @stack;\n            }\n        }\n    }\n    if (@stack != 0) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my %pairs = (\n        '(' => ')',\n        '[' => ']',\n        '{' => '}',\n    );\n    for my $char (split //, $exp) {\n        if ($char eq '(' || $char eq '[' || $char eq '{') {\n            push @stack, $char;\n        }\n        elsif ($char eq ')' || $char eq ']' || $char eq '}') {\n            my $last = pop @stack;\n            if ($pairs{$last} ne $char) {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my $i = 0;\n    my $len = length($exp);\n    while($i < $len) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        }\n        elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop @stack;\n            if(($top eq '(' && $c ne ')') || ($top eq '{' && $c ne '}') || ($top eq '[' && $c ne ']')) {\n                return 0;\n            }\n        }\n        $i++;\n    }\n    return 1;\n}",
    "    my @stack;\n    my $i = 0;\n    while($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        } elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop @stack;\n            if(($c eq ')' && $top ne '(') || ($c eq '}' && $top ne '{') || ($c eq ']' && $top ne '[')) {\n                return 0;\n            }\n        }\n        $i++;\n    }\n    return 1;\n}",
    "    my @stack;\n    my %brackets = (\n        '{' => '}',\n        '[' => ']',\n        '(' => ')',\n    );\n    for my $char (split //, $exp) {\n        if (exists $brackets{$char}) {\n            push @stack, $char;\n        } elsif ($char eq '}' || $char eq ']' || $char eq ')') {\n            my $last = pop @stack;\n            if ($char ne $brackets{$last}) {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my %pairs = (\n        '{' => '}',\n        '[' => ']',\n        '(' => ')',\n    );\n    foreach my $char (split(//, $exp)) {\n        if (exists $pairs{$char}) {\n            push @stack, $char;\n        }\n        elsif ($char eq '}' || $char eq ']' || $char eq ')') {\n            my $top = pop @stack;\n            if ($pairs{$top} ne $char) {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my %hash = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']'\n    );\n    for my $i (0..length($exp)-1) {\n        my $char = substr($exp, $i, 1);\n        if (exists $hash{$char}) {\n            push @stack, $char;\n        } else {\n            my $last = pop @stack;\n            if ($hash{$last} ne $char) {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my $i = 0;\n    while($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push(@stack, $c);\n        }\n        elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            if(scalar(@stack) == 0) {\n                $balanced = 0;\n                last;\n            }\n            my $top = pop(@stack);\n            if(($c eq ')' && $top ne '(') || ($c eq '}' && $top ne '{') || ($c eq ']' && $top ne '[')) {\n                $balanced = 0;\n                last;\n            }\n        }\n        $i++;\n    }\n    if(scalar(@stack) > 0) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my $i = 0;\n    while ($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if ($c eq '(' || $c eq '[' || $c eq '{') {\n            push(@stack, $c);\n        } elsif ($c eq ')' || $c eq ']' || $c eq '}') {\n            my $top = pop(@stack);\n            if (($c eq ')' && $top ne '(') ||\n                ($c eq ']' && $top ne '[') ||\n                ($c eq '}' && $top ne '{')) {\n                $balanced = 0;\n                last;\n            }\n        }\n        $i++;\n    }\n    if ($balanced && scalar(@stack) == 0) {\n        return 1;\n    }\n    return 0;\n}",
    "    my @stack;\n    foreach my $c (split //, $exp) {\n        if ($c eq '(') {\n            push @stack, $c;\n        } elsif ($c eq ')') {\n            if (scalar(@stack) == 0) {\n                return 0;\n            } else {\n                pop @stack;\n            }\n        }\n    }\n    return scalar(@stack) == 0;\n}",
    "    my @stack;\n    my %map = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $c (split //, $exp) {\n        if (exists $map{$c}) {\n            push @stack, $c;\n        }\n        elsif (scalar @stack) {\n            my $top = pop @stack;\n            if ($c ne $map{$top}) {\n                return 0;\n            }\n        }\n        else {\n            return 0;\n        }\n    }\n    return scalar @stack ? 0 : 1;\n}",
    "    my @stack;\n    my @exp = split(//, $exp);\n    for my $c (@exp) {\n        if ($c eq '(') {\n            push @stack, $c;\n        } elsif ($c eq ')') {\n            if (scalar @stack == 0) {\n                return 0;\n            }\n            pop @stack;\n        }\n    }\n    return scalar @stack == 0;\n}",
    "    my @stack;\n    my @exp = split(//, $exp);\n    for my $c (@exp) {\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        } elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop @stack;\n            if ($top eq '(' && $c ne ')') {\n                return 0;\n            } elsif ($top eq '{' && $c ne '}') {\n                return 0;\n            } elsif ($top eq '[' && $c ne ']') {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my %pairs = (\n        '(' => ')',\n        '[' => ']',\n        '{' => '}',\n    );\n    for my $char (split //, $exp) {\n        if ($char eq '(' || $char eq '[' || $char eq '{') {\n            push @stack, $char;\n        }\n        elsif ($char eq ')' || $char eq ']' || $char eq '}') {\n            my $last = pop @stack;\n            return 0 if $pairs{$last} ne $char;\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my %pairs = (\n        '{' => '}',\n        '[' => ']',\n        '(' => ')',\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '{' || $c eq '[' || $c eq '(') {\n            push @stack, $c;\n        }\n        elsif ($c eq '}' || $c eq ']' || $c eq ')') {\n            my $top = pop @stack;\n            return 0 if !$top || $pairs{$top} ne $c;\n        }\n    }\n    return @stack ? 0 : 1;\n}",
    "    my @stack;\n    my %map = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']'\n    );\n    for my $c (split //, $exp) {\n        if(exists $map{$c}) {\n            push @stack, $c;\n        }\n        elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop @stack;\n            if($map{$top} ne $c) {\n                return 0;\n            }\n        }\n    }\n    return @stack ? 0 : 1;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my $i = 0;\n    while($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push(@stack, $c);\n        } elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop(@stack);\n            if(($c eq ')' && $top ne '(') || ($c eq '}' && $top ne '{') || ($c eq ']' && $top ne '[')) {\n                $balanced = 0;\n                last;\n            }\n        }\n        $i++;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $char (split //, $exp) {\n        if (exists $brackets{$char}) {\n            push @stack, $char;\n        }\n        elsif ($char eq ')' || $char eq '}' || $char eq ']') {\n            if (scalar @stack == 0) {\n                return 0;\n            }\n            my $top = pop @stack;\n            if ($brackets{$top} ne $char) {\n                return 0;\n            }\n        }\n    }\n    return scalar @stack == 0;\n}",
    "    my @stack;\n    my $i = 0;\n    my $length = length($exp);\n    while($i < $length) {\n        my $char = substr($exp, $i, 1);\n        if($char eq '(' || $char eq '{' || $char eq '[') {\n            push @stack, $char;\n        }\n        elsif($char eq ')' || $char eq '}' || $char eq ']') {\n            my $top = pop @stack;\n            if(($top eq '(' && $char ne ')') || ($top eq '{' && $char ne '}') || ($top eq '[' && $char ne ']')) {\n                return 0;\n            }\n        }\n        $i++;\n    }\n    return 1;\n}",
    "    my @stack;\n    my %map = (\n        '(' => ')',\n        '[' => ']',\n        '{' => '}',\n    );\n    for my $char (split //, $exp) {\n        if ($char eq '(' || $char eq '[' || $char eq '{') {\n            push @stack, $char;\n        }\n        elsif ($char eq ')' || $char eq ']' || $char eq '}') {\n            my $top = pop @stack;\n            return 0 if $map{$top} ne $char;\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my %map = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        } elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            if (scalar @stack == 0) {\n                return 0;\n            }\n            my $top = pop @stack;\n            if ($map{$top} ne $c) {\n                return 0;\n            }\n        }\n    }\n    return scalar @stack == 0;\n}",
    "    my @stack;\n    my %hash = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']'\n    );\n    for my $char (split //, $exp) {\n        if (exists $hash{$char}) {\n            push @stack, $char;\n        }\n        elsif ($char eq ')' || $char eq '}' || $char eq ']') {\n            my $top = pop @stack;\n            if ($hash{$top} ne $char) {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my %pairs = (\n        '(' => ')',\n        '[' => ']',\n        '{' => '}',\n    );\n    foreach my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '[' || $c eq '{') {\n            push @stack, $c;\n        }\n        elsif ($c eq ')' || $c eq ']' || $c eq '}') {\n            my $top = pop @stack;\n            if ($pairs{$top} ne $c) {\n                $balanced = 0;\n                last;\n            }\n        }\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my $i = 0;\n    while($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        }\n        elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            if(scalar(@stack) == 0) {\n                $balanced = 0;\n                last;\n            }\n            my $top = pop @stack;\n            if($top eq '(' && $c ne ')') {\n                $balanced = 0;\n                last;\n            }\n            elsif($top eq '{' && $c ne '}') {\n                $balanced = 0;\n                last;\n            }\n            elsif($top eq '[' && $c ne ']') {\n                $balanced = 0;\n                last;\n            }\n        }\n        $i++;\n    }\n    if(scalar(@stack) != 0) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my %hash = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $ch (split //, $exp) {\n        if (exists $hash{$ch}) {\n            push @stack, $ch;\n        }\n        elsif (scalar @stack && $hash{$stack[-1]} eq $ch) {\n            pop @stack;\n        }\n        else {\n            return 0;\n        }\n    }\n    return scalar @stack ? 0 : 1;\n}",
    "    my @stack;\n    my $i = 0;\n    while($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push(@stack, $c);\n        }\n        elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop(@stack);\n            if(($c eq ')' && $top ne '(') || ($c eq '}' && $top ne '{') || ($c eq ']' && $top ne '[')) {\n                return 0;\n            }\n        }\n        $i++;\n    }\n    return 1;\n}",
    "    my @stack = ();\n    my $balanced = 1;\n    foreach my $c (split //, $exp) {\n        if ($c eq '(') {\n            push @stack, $c;\n        } elsif ($c eq ')') {\n            if (@stack) {\n                pop @stack;\n            } else {\n                $balanced = 0;\n                last;\n            }\n        }\n    }\n    if (@stack) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my %map = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $char (split //, $exp) {\n        if ($char eq '(' || $char eq '{' || $char eq '[') {\n            push @stack, $char;\n        }\n        elsif ($char eq ')' || $char eq '}' || $char eq ']') {\n            my $top = pop @stack;\n            if ($map{$top} ne $char) {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my %mapping = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        } elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop @stack;\n            if ($mapping{$top} ne $c) {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my %pairs = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        } elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            if ($pairs{$stack[-1]} eq $c) {\n                pop @stack;\n            } else {\n                return 0;\n            }\n        }\n    }\n    return @stack == 0;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    my @chars = split //, $exp;\n    for my $char (@chars) {\n        if (exists $brackets{$char}) {\n            push @stack, $char;\n        }\n        elsif ($char eq ')' || $char eq '}' || $char eq ']') {\n            if ($brackets{pop @stack} ne $char) {\n                return 0;\n            }\n        }\n    }\n    return @stack ? 0 : 1;\n}",
    "    my @stack;\n    my %map = (\n        '(' => ')',\n        '[' => ']',\n        '{' => '}',\n    );\n    for my $char (split //, $exp) {\n        if ($char eq '(' || $char eq '[' || $char eq '{') {\n            push @stack, $char;\n        }\n        elsif ($char eq ')' || $char eq ']' || $char eq '}') {\n            my $top = pop @stack;\n            if ($map{$top} ne $char) {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my %brackets = (\n        '{' => '}',\n        '[' => ']',\n        '(' => ')',\n    );\n    for my $char (split //, $exp) {\n        if ($char eq '{' || $char eq '[' || $char eq '(') {\n            push @stack, $char;\n        }\n        elsif ($char eq '}' || $char eq ']' || $char eq ')') {\n            my $top = pop @stack;\n            if ($brackets{$top} ne $char) {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my %brackets = (\n        '{' => '}',\n        '[' => ']',\n        '(' => ')',\n    );\n    for my $c (split //, $exp) {\n        if (exists $brackets{$c}) {\n            push @stack, $c;\n        }\n        elsif (scalar @stack && $brackets{$stack[-1]} eq $c) {\n            pop @stack;\n        }\n        else {\n            return 0;\n        }\n    }\n    return scalar @stack ? 0 : 1;\n}",
    "    my @stack;\n    my $balanced = 1;\n    for my $c (split //, $exp) {\n        if ($c eq '(') {\n            push @stack, $c;\n        } elsif ($c eq ')') {\n            if (@stack) {\n                pop @stack;\n            } else {\n                $balanced = 0;\n                last;\n            }\n        }\n    }\n    $balanced && !@stack;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']'\n    );\n    foreach my $ch (split //, $exp) {\n        if (exists $brackets{$ch}) {\n            push @stack, $ch;\n        }\n        elsif (scalar @stack == 0) {\n            return 0;\n        }\n        elsif ($brackets{$stack[-1]} eq $ch) {\n            pop @stack;\n        }\n        else {\n            return 0;\n        }\n    }\n    return scalar @stack == 0;\n}",
    "    my @stack;\n    my %pairs = (\n        '{' => '}',\n        '[' => ']',\n        '(' => ')'\n    );\n    for my $char (split //, $exp) {\n        if ($char eq '{' || $char eq '[' || $char eq '(') {\n            push @stack, $char;\n        }\n        elsif ($char eq '}' || $char eq ']' || $char eq ')') {\n            my $last = pop @stack;\n            if (!defined $last || $pairs{$last} ne $char) {\n                return 0;\n            }\n        }\n    }\n    return @stack == 0;\n}",
    "    my @stack;\n    my %pairs = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        }\n        elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            return 0 if !@stack;\n            my $top = pop @stack;\n            return 0 if $pairs{$top} ne $c;\n        }\n    }\n    return 0 if @stack;\n    return 1;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '[' => ']',\n        '{' => '}',\n    );\n    my %closing = reverse %brackets;\n    for my $char (split //, $exp) {\n        if (exists $brackets{$char}) {\n            push @stack, $char;\n        }\n        elsif (exists $closing{$char}) {\n            my $last = pop @stack;\n            return 0 if $brackets{$last} ne $char;\n        }\n    }\n    return @stack ? 0 : 1;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    my $balanced = 1;\n    foreach my $char (split //, $exp) {\n        if (exists $brackets{$char}) {\n            push @stack, $char;\n        }\n        elsif (scalar @stack > 0 && $char eq $brackets{$stack[-1]}) {\n            pop @stack;\n        }\n        else {\n            $balanced = 0;\n            last;\n        }\n    }\n    $balanced = 0 if scalar @stack > 0;\n    return $balanced;\n}",
    "    my @stack;\n    my $i = 0;\n    my $len = length($exp);\n    while($i < $len) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push(@stack, $c);\n        }\n        elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            if(scalar(@stack) == 0) {\n                return 0;\n            }\n            my $top = pop(@stack);\n            if(($top eq '(' && $c ne ')') || ($top eq '{' && $c ne '}') || ($top eq '[' && $c ne ']')) {\n                return 0;\n            }\n        }\n        $i++;\n    }\n    if(scalar(@stack) == 0) {\n        return 1;\n    }\n    return 0;\n}",
    "    my @stack;\n    my @exp = split //, $exp;\n    for my $char (@exp) {\n        if ($char eq '(' || $char eq '{' || $char eq '[') {\n            push @stack, $char;\n        } elsif ($char eq ')' || $char eq '}' || $char eq ']') {\n            my $top = pop @stack;\n            if ($top eq '(' && $char ne ')') {\n                return 0;\n            } elsif ($top eq '{' && $char ne '}') {\n                return 0;\n            } elsif ($top eq '[' && $char ne ']') {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my %brackets = (\n        '{' => '}',\n        '[' => ']',\n        '(' => ')',\n    );\n    for my $char (split //, $exp) {\n        if ($char =~ /[\\{\\[\\(]/) {\n            push @stack, $char;\n        }\n        elsif ($char =~ /[\\}\\]\\)]/) {\n            my $last = pop @stack;\n            if ($brackets{$last} ne $char) {\n                $balanced = 0;\n                last;\n            }\n        }\n    }\n    if (@stack) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my %pairs = (\n        '{' => '}',\n        '[' => ']',\n        '(' => ')',\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '{' || $c eq '[' || $c eq '(') {\n            push @stack, $c;\n        }\n        elsif ($c eq '}' || $c eq ']' || $c eq ')') {\n            if (scalar @stack) {\n                my $top = pop @stack;\n                if ($pairs{$top} ne $c) {\n                    return 0;\n                }\n            }\n            else {\n                return 0;\n            }\n        }\n    }\n    return scalar @stack ? 0 : 1;\n}",
    "    my @stack;\n    my $balanced = 1;\n    for my $c (split //, $exp) {\n        if ($c eq '(') {\n            push @stack, $c;\n        } elsif ($c eq ')') {\n            if (@stack) {\n                pop @stack;\n            } else {\n                $balanced = 0;\n                last;\n            }\n        }\n    }\n    $balanced = 0 if @stack;\n    return $balanced;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']'\n    );\n    my @chars = split(//, $exp);\n    foreach my $char (@chars) {\n        if (exists $brackets{$char}) {\n            push @stack, $char;\n        } else {\n            my $top = pop @stack;\n            if ($brackets{$top} ne $char) {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my $i = 0;\n    while($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        } elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop @stack;\n            if(($c eq ')' && $top ne '(') || ($c eq '}' && $top ne '{') || ($c eq ']' && $top ne '[')) {\n                return 0;\n            }\n        }\n        $i++;\n    }\n    return 1;\n}",
    "    my @stack;\n    my @exp = split(//, $exp);\n    foreach my $c (@exp) {\n        if ($c eq '(') {\n            push(@stack, $c);\n        } elsif ($c eq ')') {\n            if (scalar(@stack) == 0) {\n                return 0;\n            } else {\n                pop(@stack);\n            }\n        }\n    }\n    return scalar(@stack) == 0;\n}",
    "    my @stack;\n    my @exp = split //, $exp;\n    for my $c (@exp) {\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        }\n        elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop @stack;\n            if ($top eq '(' && $c ne ')') {\n                return 0;\n            }\n            elsif ($top eq '{' && $c ne '}') {\n                return 0;\n            }\n            elsif ($top eq '[' && $c ne ']') {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    foreach my $ch (split //, $exp) {\n        if ($ch eq '(') {\n            push @stack, $ch;\n        } elsif ($ch eq ')') {\n            if (scalar @stack == 0) {\n                return 0;\n            }\n            pop @stack;\n        }\n    }\n    return scalar @stack == 0;\n}",
    "    my @stack = ();\n    my %map = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']'\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        } elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop @stack;\n            return 0 if !$top || $map{$top} ne $c;\n        }\n    }\n    return @stack ? 0 : 1;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        } elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop @stack;\n            if (!$top || $brackets{$top} ne $c) {\n                return 0;\n            }\n        }\n    }\n    return @stack == 0;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']'\n    );\n    for my $char (split //, $exp) {\n        if (exists $brackets{$char}) {\n            push @stack, $char;\n        }\n        elsif ($char eq $brackets{$stack[-1]}) {\n            pop @stack;\n        }\n        else {\n            return 0;\n        }\n    }\n    return @stack ? 0 : 1;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my $i = 0;\n    while($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        } elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop @stack;\n            if($c eq ')' && $top ne '(') {\n                $balanced = 0;\n                last;\n            } elsif($c eq '}' && $top ne '{') {\n                $balanced = 0;\n                last;\n            } elsif($c eq ']' && $top ne '[') {\n                $balanced = 0;\n                last;\n            }\n        }\n        $i++;\n    }\n    if($balanced && scalar(@stack) == 0) {\n        return 1;\n    } else {\n        return 0;\n    }\n}",
    "    my @stack;\n    my @exp = split //, $exp;\n    for my $ch (@exp) {\n        if ($ch eq '(') {\n            push @stack, $ch;\n        }\n        elsif ($ch eq ')') {\n            if (scalar @stack == 0) {\n                return 0;\n            }\n            pop @stack;\n        }\n    }\n    return scalar @stack == 0;\n}",
    "    my @stack;\n    my %pairs = (\n        '(' => ')',\n        '[' => ']',\n        '{' => '}',\n    );\n    for my $char (split //, $exp) {\n        if ($char eq '(' || $char eq '[' || $char eq '{') {\n            push @stack, $char;\n        } elsif ($char eq ')' || $char eq ']' || $char eq '}') {\n            my $last = pop @stack;\n            if ($pairs{$last} ne $char) {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my %map = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    foreach my $char (split //, $exp) {\n        if (exists $brackets{$char}) {\n            push @stack, $char;\n        }\n        elsif (scalar @stack > 0 && $char eq $brackets{$stack[-1]}) {\n            pop @stack;\n        }\n        else {\n            return 0;\n        }\n    }\n    return scalar @stack == 0;\n}",
    "    my @stack;\n    my %closing_brackets = (\n        ')' => '(',\n        ']' => '[',\n        '}' => '{',\n    );\n    for my $char (split //, $exp) {\n        if ($char =~ /[\\(\\[\\{]/) {\n            push @stack, $char;\n        }\n        elsif ($char =~ /[\\)\\]\\}]/) {\n            if ($closing_brackets{$char} eq pop @stack) {\n                next;\n            }\n            else {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my %pairs = (\n        '(' => ')',\n        '[' => ']',\n        '{' => '}',\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '[' || $c eq '{') {\n            push @stack, $c;\n        } elsif ($c eq ')' || $c eq ']' || $c eq '}') {\n            my $last = pop @stack;\n            return 0 if $pairs{$last} ne $c;\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my %pairs = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $c (split //, $exp) {\n        if (exists $pairs{$c}) {\n            push @stack, $c;\n        }\n        elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop @stack;\n            return 0 if $pairs{$top} ne $c;\n        }\n    }\n    return @stack ? 0 : 1;\n}",
    "    my $stack = [];\n    my $balanced = 1;\n    foreach my $char (split //, $exp) {\n        if ($char eq '(' || $char eq '{' || $char eq '[') {\n            push @$stack, $char;\n        }\n        elsif ($char eq ')' || $char eq '}' || $char eq ']') {\n            if (scalar @$stack == 0) {\n                $balanced = 0;\n                last;\n            }\n            my $top = pop @$stack;\n            if ($top eq '(' && $char ne ')') {\n                $balanced = 0;\n                last;\n            }\n            elsif ($top eq '{' && $char ne '}') {\n                $balanced = 0;\n                last;\n            }\n            elsif ($top eq '[' && $char ne ']') {\n                $balanced = 0;\n                last;\n            }\n        }\n    }\n    if (scalar @$stack > 0) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my @exp = split //, $exp;\n    foreach my $c (@exp) {\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        }\n        elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop @stack;\n            if ($top eq '(' && $c ne ')') {\n                return 0;\n            }\n            elsif ($top eq '{' && $c ne '}') {\n                return 0;\n            }\n            elsif ($top eq '[' && $c ne ']') {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my $top = -1;\n    my $balanced = 1;\n    my %map = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']'\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            $top++;\n            $stack[$top] = $c;\n        }\n        elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            if ($top == -1) {\n                $balanced = 0;\n                last;\n            }\n            elsif ($map{$stack[$top]} eq $c) {\n                $top--;\n            }\n            else {\n                $balanced = 0;\n                last;\n            }\n        }\n    }\n    if ($top != -1) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my $i = 0;\n    while($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push(@stack, $c);\n        }\n        elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            if(scalar(@stack) == 0) {\n                $balanced = 0;\n                last;\n            }\n            my $top = pop(@stack);\n            if(($top eq '(' && $c eq ')') || ($top eq '{' && $c eq '}') || ($top eq '[' && $c eq ']')) {\n                $balanced = 1;\n            }\n            else {\n                $balanced = 0;\n                last;\n            }\n        }\n        $i++;\n    }\n    if(scalar(@stack) != 0) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']'\n    );\n    for my $char (split //, $exp) {\n        if (exists $brackets{$char}) {\n            push @stack, $char;\n        }\n        elsif (grep { $char eq $brackets{$_} } keys %brackets) {\n            return 0 if !@stack || $brackets{pop @stack} ne $char;\n        }\n    }\n    return @stack ? 0 : 1;\n}",
    "    my @stack;\n    my %brackets = (\n        '{' => '}',\n        '(' => ')',\n        '[' => ']',\n    );\n    for my $char (split //, $exp) {\n        if (exists $brackets{$char}) {\n            push @stack, $char;\n        }\n        elsif ($char eq '}' || $char eq ')' || $char eq ']') {\n            my $top = pop @stack;\n            if ($brackets{$top} ne $char) {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my %braces = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    my @chars = split //, $exp;\n    foreach my $char (@chars) {\n        if (exists $braces{$char}) {\n            push @stack, $char;\n        }\n        elsif ($char eq $braces{$stack[-1]}) {\n            pop @stack;\n        }\n        else {\n            return 0;\n        }\n    }\n    return @stack ? 0 : 1;\n}",
    "    my @stack;\n    for my $c (split //, $exp) {\n        if ($c eq '(') {\n            push @stack, $c;\n        } elsif ($c eq ')') {\n            if (scalar @stack == 0) {\n                return 0;\n            } else {\n                pop @stack;\n            }\n        }\n    }\n    return scalar @stack == 0;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']'\n    );\n    foreach my $c (split //, $exp) {\n        if (exists $brackets{$c}) {\n            push @stack, $c;\n        } elsif (scalar @stack > 0 && $c eq $brackets{$stack[-1]}) {\n            pop @stack;\n        } else {\n            return 0;\n        }\n    }\n    return scalar @stack == 0 ? 1 : 0;\n}",
    "    my @stack;\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        } elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop @stack;\n            if ($top eq '(' && $c ne ')') {\n                return 0;\n            } elsif ($top eq '{' && $c ne '}') {\n                return 0;\n            } elsif ($top eq '[' && $c ne ']') {\n                return 0;\n            }\n        }\n    }\n    return @stack == 0;\n}",
    "    my @stack;\n    my %pairs = (\n        '{' => '}',\n        '[' => ']',\n        '(' => ')',\n    );\n    my $i = 0;\n    while($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '{' || $c eq '[' || $c eq '(') {\n            push @stack, $c;\n        } elsif($c eq '}' || $c eq ']' || $c eq ')') {\n            my $top = pop @stack;\n            if(!defined($top) || $pairs{$top} ne $c) {\n                return 0;\n            }\n        }\n        $i++;\n    }\n    return scalar(@stack) == 0;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my %closing = (\n        ')' => '(',\n        ']' => '[',\n        '}' => '{',\n    );\n    foreach my $char (split //, $exp) {\n        if ($char =~ /[\\(\\[\\{]/) {\n            push @stack, $char;\n        } elsif ($char =~ /[\\)\\]\\}]/) {\n            if (scalar @stack == 0) {\n                $balanced = 0;\n                last;\n            }\n            my $top = pop @stack;\n            if ($top ne $closing{$char}) {\n                $balanced = 0;\n                last;\n            }\n        }\n    }\n    if (scalar @stack > 0) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my $i = 0;\n    while($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        }\n        elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop @stack;\n            if(!$top) {\n                return 0;\n            }\n            if($c eq ')' && $top ne '(') {\n                return 0;\n            }\n            if($c eq '}' && $top ne '{') {\n                return 0;\n            }\n            if($c eq ']' && $top ne '[') {\n                return 0;\n            }\n        }\n        $i++;\n    }\n    return @stack ? 0 : 1;\n}",
    "    my @stack;\n    my %brackets = (\n        '{' => '}',\n        '[' => ']',\n        '(' => ')'\n    );\n    my @chars = split //, $exp;\n    for my $char (@chars) {\n        if (exists $brackets{$char}) {\n            push @stack, $char;\n        }\n        elsif (scalar @stack > 0 && $brackets{$stack[-1]} eq $char) {\n            pop @stack;\n        }\n        else {\n            return 0;\n        }\n    }\n    return scalar @stack == 0;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    foreach my $char (split //, $exp) {\n        if (exists $brackets{$char}) {\n            push @stack, $char;\n        }\n        elsif ($char eq ')' || $char eq '}' || $char eq ']') {\n            return 0 if $brackets{pop @stack} ne $char;\n        }\n    }\n    return @stack ? 0 : 1;\n}",
    "    my @stack;\n    my %hash = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']'\n    );\n    for my $char (split //, $exp) {\n        if ($char eq '(' || $char eq '{' || $char eq '[') {\n            push @stack, $char;\n        }\n        elsif ($char eq ')' || $char eq '}' || $char eq ']') {\n            if (scalar @stack == 0) {\n                return 0;\n            }\n            my $top = pop @stack;\n            if ($hash{$top} ne $char) {\n                return 0;\n            }\n        }\n    }\n    return scalar @stack == 0 ? 1 : 0;\n}",
    "    my @stack;\n    my %map = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        } elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop @stack;\n            if (!$top || $map{$top} ne $c) {\n                return 0;\n            }\n        }\n    }\n    return @stack ? 0 : 1;\n}",
    "    my $stack = [];\n    my %brackets = (\n        '(' => ')',\n        '[' => ']',\n        '{' => '}'\n    );\n    for my $ch (split //, $exp) {\n        if (exists $brackets{$ch}) {\n            push @$stack, $ch;\n        } elsif ($ch eq ')' || $ch eq ']' || $ch eq '}') {\n            my $top = pop @$stack;\n            return 0 if $brackets{$top} ne $ch;\n        }\n    }\n    return 0 if @$stack;\n    return 1;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my %pairs = (\n        '{' => '}',\n        '[' => ']',\n        '(' => ')',\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '{' || $c eq '[' || $c eq '(') {\n            push @stack, $c;\n        } elsif ($c eq '}' || $c eq ']' || $c eq ')') {\n            if (scalar @stack == 0) {\n                $balanced = 0;\n                last;\n            }\n            my $top = pop @stack;\n            if ($pairs{$top} ne $c) {\n                $balanced = 0;\n                last;\n            }\n        }\n    }\n    if (scalar @stack > 0) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @exp_arr = split(//, $exp);\n    my @stack;\n    my $top = -1;\n    foreach my $ch (@exp_arr) {\n        if ($ch eq '(' || $ch eq '[' || $ch eq '{') {\n            $top++;\n            $stack[$top] = $ch;\n        }\n        elsif ($ch eq ')' || $ch eq ']' || $ch eq '}') {\n            if ($top == -1) {\n                return 0;\n            }\n            my $top_ch = $stack[$top];\n            if (($ch eq ')' && $top_ch eq '(') || ($ch eq ']' && $top_ch eq '[') || ($ch eq '}' && $top_ch eq '{')) {\n                $top--;\n            }\n            else {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my @exp_array = split(//, $exp);\n    for my $ch (@exp_array) {\n        if ($ch eq '(' || $ch eq '{' || $ch eq '[') {\n            push @stack, $ch;\n        }\n        elsif ($ch eq ')' || $ch eq '}' || $ch eq ']') {\n            my $top = pop @stack;\n            if ($ch eq ')' && $top ne '(') {\n                return 0;\n            }\n            elsif ($ch eq '}' && $top ne '{') {\n                return 0;\n            }\n            elsif ($ch eq ']' && $top ne '[') {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']'\n    );\n    my @chars = split(//, $exp);\n    foreach my $char (@chars) {\n        if ($char eq '(' || $char eq '{' || $char eq '[') {\n            push(@stack, $char);\n        } elsif ($char eq ')' || $char eq '}' || $char eq ']') {\n            if (scalar(@stack) == 0) {\n                $balanced = 0;\n                last;\n            }\n            my $top = pop(@stack);\n            if ($brackets{$top} ne $char) {\n                $balanced = 0;\n                last;\n            }\n        }\n    }\n    if ($balanced && scalar(@stack) == 0) {\n        return 1;\n    } else {\n        return 0;\n    }\n}",
    "    my @stack;\n    my $balanced = 1;\n    my $i = 0;\n    while($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '[' || $c eq '{') {\n            push @stack, $c;\n        } elsif($c eq ')' || $c eq ']' || $c eq '}') {\n            if(scalar(@stack) == 0) {\n                $balanced = 0;\n                last;\n            }\n            my $top = pop @stack;\n            if($c eq ')' && $top ne '(') {\n                $balanced = 0;\n                last;\n            } elsif($c eq ']' && $top ne '[') {\n                $balanced = 0;\n                last;\n            } elsif($c eq '}' && $top ne '{') {\n                $balanced = 0;\n                last;\n            }\n        }\n        $i++;\n    }\n    if(scalar(@stack) > 0) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my $i = 0;\n    while($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push(@stack, $c);\n        }\n        elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            my $p = pop(@stack);\n            if(!$p) {\n                return 0;\n            }\n            if($c eq ')' && $p ne '(') {\n                return 0;\n            }\n            if($c eq '}' && $p ne '{') {\n                return 0;\n            }\n            if($c eq ']' && $p ne '[') {\n                return 0;\n            }\n        }\n        $i++;\n    }\n    return scalar(@stack) == 0;\n}",
    "    my @stack;\n    my $i = 0;\n    my $len = length($exp);\n    while ($i < $len) {\n        my $c = substr($exp, $i, 1);\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push(@stack, $c);\n        } elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            if (scalar(@stack) == 0) {\n                return 0;\n            }\n            my $top = pop(@stack);\n            if ($c eq ')' && $top ne '(') {\n                return 0;\n            } elsif ($c eq '}' && $top ne '{') {\n                return 0;\n            } elsif ($c eq ']' && $top ne '[') {\n                return 0;\n            }\n        }\n        $i++;\n    }\n    return scalar(@stack) == 0;\n}",
    "    my @stack;\n    my %map = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        } elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop @stack;\n            if ($map{$top} ne $c) {\n                return 0;\n            }\n        }\n    }\n    return @stack == 0;\n}",
    "    my @stack;\n    my %pairs = (\n        '(' => ')',\n        '[' => ']',\n        '{' => '}',\n    );\n    for my $c (split //, $exp) {\n        if (exists $pairs{$c}) {\n            push @stack, $c;\n        } elsif ($c eq ')' || $c eq ']' || $c eq '}') {\n            my $last = pop @stack;\n            return 0 if !defined $last || $pairs{$last} ne $c;\n        }\n    }\n    return @stack ? 0 : 1;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    my @chars = split(//, $exp);\n    for my $char (@chars) {\n        if ($char eq '(' || $char eq '{' || $char eq '[') {\n            push @stack, $char;\n        }\n        elsif ($char eq ')' || $char eq '}' || $char eq ']') {\n            my $top = pop @stack;\n            if ($brackets{$top} ne $char) {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my %map = (\n        '{' => '}',\n        '[' => ']',\n        '(' => ')',\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '{' || $c eq '[' || $c eq '(') {\n            push @stack, $c;\n        } elsif ($c eq '}' || $c eq ']' || $c eq ')') {\n            my $top = pop @stack;\n            if ($map{$top} ne $c) {\n                return 0;\n            }\n        }\n    }\n    return @stack == 0;\n}",
    "    my @stack;\n    my %map = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']'\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        } elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop @stack;\n            if ($map{$top} ne $c) {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my $i = 0;\n    while($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push(@stack, $c);\n        } elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop(@stack);\n            if(($top eq '(' && $c ne ')') || ($top eq '{' && $c ne '}') || ($top eq '[' && $c ne ']')) {\n                return 0;\n            }\n        }\n        $i++;\n    }\n    return 1;\n}",
    "    my @stack;\n    my %match = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $ch (split //, $exp) {\n        if ($ch eq '(' || $ch eq '{' || $ch eq '[') {\n            push @stack, $ch;\n        }\n        elsif ($ch eq ')' || $ch eq '}' || $ch eq ']') {\n            my $top = pop @stack;\n            return 0 if !$top || $match{$top} ne $ch;\n        }\n    }\n    return @stack ? 0 : 1;\n}",
    "    my @stack;\n    my $balanced = 1;\n    for my $ch (split //, $exp) {\n        if ($ch eq '(') {\n            push @stack, $ch;\n        } elsif ($ch eq ')') {\n            if (scalar @stack == 0) {\n                $balanced = 0;\n                last;\n            }\n            pop @stack;\n        }\n    }\n    if (scalar @stack != 0) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my $i = 0;\n    while($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push(@stack, $c);\n        }\n        elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop(@stack);\n            if(!$top) {\n                $balanced = 0;\n                last;\n            }\n            if($c eq ')' && $top ne '(') {\n                $balanced = 0;\n                last;\n            }\n            if($c eq '}' && $top ne '{') {\n                $balanced = 0;\n                last;\n            }\n            if($c eq ']' && $top ne '[') {\n                $balanced = 0;\n                last;\n            }\n        }\n        $i++;\n    }\n    if(scalar(@stack) > 0) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']'\n    );\n    my @chars = split //, $exp;\n    for my $char (@chars) {\n        if (exists $brackets{$char}) {\n            push @stack, $char;\n        }\n        elsif ($char eq ')' || $char eq '}' || $char eq ']') {\n            if (scalar @stack == 0) {\n                return 0;\n            }\n            my $top = pop @stack;\n            if ($brackets{$top} ne $char) {\n                return 0;\n            }\n        }\n    }\n    return scalar @stack == 0;\n}",
    "    my @stack;\n    my @exp_arr = split(//, $exp);\n    foreach my $ch (@exp_arr) {\n        if ($ch eq '(' || $ch eq '{' || $ch eq '[') {\n            push(@stack, $ch);\n        }\n        elsif ($ch eq ')' || $ch eq '}' || $ch eq ']') {\n            if (scalar(@stack) == 0) {\n                return 0;\n            }\n            my $top = pop(@stack);\n            if ($top eq '(' && $ch ne ')') {\n                return 0;\n            }\n            elsif ($top eq '{' && $ch ne '}') {\n                return 0;\n            }\n            elsif ($top eq '[' && $ch ne ']') {\n                return 0;\n            }\n        }\n    }\n    if (scalar(@stack) == 0) {\n        return 1;\n    }\n    else {\n        return 0;\n    }\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '[' => ']',\n        '{' => '}',\n    );\n    my @open_brackets = keys %brackets;\n    my @close_brackets = values %brackets;\n    my $balanced = 1;\n    for my $char (split //, $exp) {\n        if (grep {$_ eq $char} @open_brackets) {\n            push @stack, $char;\n        }\n        elsif (grep {$_ eq $char} @close_brackets) {\n            my $last_open_bracket = pop @stack;\n            if ($brackets{$last_open_bracket} ne $char) {\n                $balanced = 0;\n                last;\n            }\n        }\n    }\n    if (@stack) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my @exp = split(//, $exp);\n    for my $ch (@exp) {\n        if ($ch eq '(' || $ch eq '{' || $ch eq '[') {\n            push @stack, $ch;\n        }\n        elsif ($ch eq ')' || $ch eq '}' || $ch eq ']') {\n            if (scalar @stack == 0) {\n                return 0;\n            }\n            my $top = pop @stack;\n            if ($ch eq ')' && $top ne '(') {\n                return 0;\n            }\n            elsif ($ch eq '}' && $top ne '{') {\n                return 0;\n            }\n            elsif ($ch eq ']' && $top ne '[') {\n                return 0;\n            }\n        }\n    }\n    if (scalar @stack == 0) {\n        return 1;\n    }\n    return 0;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my %pairs = (\n        '(' => ')',\n        '[' => ']',\n        '{' => '}',\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '[' || $c eq '{') {\n            push @stack, $c;\n        }\n        elsif ($c eq ')' || $c eq ']' || $c eq '}') {\n            my $top = pop @stack;\n            if (!$top || $pairs{$top} ne $c) {\n                $balanced = 0;\n                last;\n            }\n        }\n    }\n    $balanced && !@stack;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $char (split //, $exp) {\n        if (exists $brackets{$char}) {\n            push @stack, $char;\n        }\n        elsif (scalar @stack == 0) {\n            return 0;\n        }\n        elsif ($brackets{$stack[-1]} eq $char) {\n            pop @stack;\n        }\n        else {\n            return 0;\n        }\n    }\n    return scalar @stack == 0;\n}",
    "    my @stack;\n    my %brackets = (\n        '{' => '}',\n        '[' => ']',\n        '(' => ')',\n    );\n    my $balanced = 1;\n    for my $char (split //, $exp) {\n        if ($char eq '{' || $char eq '[' || $char eq '(') {\n            push @stack, $char;\n        }\n        elsif ($char eq '}' || $char eq ']' || $char eq ')') {\n            if (scalar @stack == 0) {\n                $balanced = 0;\n                last;\n            }\n            my $top = pop @stack;\n            if ($brackets{$top} ne $char) {\n                $balanced = 0;\n                last;\n            }\n        }\n    }\n    if (scalar @stack != 0) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $char (split //, $exp) {\n        if (exists $brackets{$char}) {\n            push @stack, $char;\n        }\n        elsif (scalar @stack) {\n            my $last = pop @stack;\n            return 0 if $brackets{$last} ne $char;\n        }\n        else {\n            return 0;\n        }\n    }\n    return 0 if scalar @stack;\n    return 1;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my $i = 0;\n    my $len = length($exp);\n    while($i < $len && $balanced) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push(@stack, $c);\n        }\n        elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            if(scalar(@stack) == 0) {\n                $balanced = 0;\n            }\n            else {\n                my $top = pop(@stack);\n                if(!(($c eq ')' && $top eq '(') || ($c eq '}' && $top eq '{') || ($c eq ']' && $top eq '['))) {\n                    $balanced = 0;\n                }\n            }\n        }\n        $i++;\n    }\n    if(scalar(@stack) != 0) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my $i = 0;\n    while($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push(@stack, $c);\n        } elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop(@stack);\n            if(($c eq ')' && $top ne '(') || ($c eq '}' && $top ne '{') || ($c eq ']' && $top ne '[')) {\n                $balanced = 0;\n                last;\n            }\n        }\n        $i++;\n    }\n    if(scalar(@stack) > 0) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my $balanced = 1;\n    for my $c (split //, $exp) {\n        if ($c eq '(') {\n            push @stack, $c;\n        } elsif ($c eq ')') {\n            if (@stack == 0) {\n                $balanced = 0;\n                last;\n            } else {\n                pop @stack;\n            }\n        }\n    }\n    if (@stack != 0) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my $i = 0;\n    while($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push(@stack, $c);\n        } elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            if(scalar(@stack) == 0) {\n                return 0;\n            }\n            my $top = pop(@stack);\n            if($c eq ')' && $top ne '(') {\n                return 0;\n            }\n            if($c eq '}' && $top ne '{') {\n                return 0;\n            }\n            if($c eq ']' && $top ne '[') {\n                return 0;\n            }\n        }\n        $i++;\n    }\n    if(scalar(@stack) != 0) {\n        return 0;\n    }\n    return 1;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']'\n    );\n    foreach my $char (split //, $exp) {\n        if ($char eq '(' || $char eq '{' || $char eq '[') {\n            push @stack, $char;\n        }\n        elsif ($char eq ')' || $char eq '}' || $char eq ']') {\n            if ($brackets{pop @stack} ne $char) {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $c (split //, $exp) {\n        if (exists $brackets{$c}) {\n            push @stack, $c;\n        }\n        elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            return 0 if $brackets{pop @stack} ne $c;\n        }\n    }\n    return 0 if @stack;\n    return 1;\n}",
    "    my @stack;\n    my %brackets = (\n        '{' => '}',\n        '[' => ']',\n        '(' => ')'\n    );\n    for my $c (split //, $exp) {\n        if (exists $brackets{$c}) {\n            push @stack, $c;\n        } elsif ($c eq '}' || $c eq ']' || $c eq ')') {\n            my $last = pop @stack;\n            return 0 if !$last || $brackets{$last} ne $c;\n        }\n    }\n    return 0 if @stack;\n    return 1;\n}",
    "    my @stack;\n    my @exp = split(//, $exp);\n    for my $i (@exp) {\n        if ($i eq '(' || $i eq '{' || $i eq '[') {\n            push @stack, $i;\n        }\n        elsif ($i eq ')' || $i eq '}' || $i eq ']') {\n            if (scalar(@stack) == 0) {\n                return 0;\n            }\n            my $top = pop @stack;\n            if ($top eq '(' && $i ne ')') {\n                return 0;\n            }\n            if ($top eq '{' && $i ne '}') {\n                return 0;\n            }\n            if ($top eq '[' && $i ne ']') {\n                return 0;\n            }\n        }\n    }\n    if (scalar(@stack) != 0) {\n        return 0;\n    }\n    return 1;\n}",
    "    my @stack;\n    for my $c (split //, $exp) {\n        if ($c eq '(') {\n            push @stack, $c;\n        } elsif ($c eq ')') {\n            if (@stack == 0) {\n                return 0;\n            } else {\n                pop @stack;\n            }\n        }\n    }\n    return @stack == 0;\n}",
    "    my @stack;\n    my $i = 0;\n    my $len = length($exp);\n    while($i < $len) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        } elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop @stack;\n            if(($c eq ')' && $top ne '(') || ($c eq '}' && $top ne '{') || ($c eq ']' && $top ne '[')) {\n                return 0;\n            }\n        }\n        $i++;\n    }\n    return 1;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my $i = 0;\n    while($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push(@stack, $c);\n        } elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop(@stack);\n            if($top eq '(' && $c ne ')') {\n                $balanced = 0;\n                last;\n            } elsif($top eq '{' && $c ne '}') {\n                $balanced = 0;\n                last;\n            } elsif($top eq '[' && $c ne ']') {\n                $balanced = 0;\n                last;\n            }\n        }\n        $i++;\n    }\n    if(scalar(@stack) > 0) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my %map = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        } elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop @stack;\n            if ($map{$top} ne $c) {\n                $balanced = 0;\n                last;\n            }\n        }\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my $balanced = 1;\n    for my $ch (split //, $exp) {\n        if ($ch eq '(') {\n            push @stack, $ch;\n        } elsif ($ch eq ')') {\n            if (scalar @stack == 0) {\n                $balanced = 0;\n                last;\n            } else {\n                pop @stack;\n            }\n        }\n    }\n    if (scalar @stack > 0) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my $balanced = 1;\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '[' || $c eq '{') {\n            push @stack, $c;\n        } elsif ($c eq ')') {\n            if (pop @stack ne '(') {\n                $balanced = 0;\n                last;\n            }\n        } elsif ($c eq ']') {\n            if (pop @stack ne '[') {\n                $balanced = 0;\n                last;\n            }\n        } elsif ($c eq '}') {\n            if (pop @stack ne '{') {\n                $balanced = 0;\n                last;\n            }\n        }\n    }\n    return $balanced && !@stack;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '[' => ']',\n        '{' => '}',\n    );\n    foreach my $char (split //, $exp) {\n        if (exists $brackets{$char}) {\n            push @stack, $char;\n        } elsif (scalar @stack && $brackets{$stack[-1]} eq $char) {\n            pop @stack;\n        } else {\n            return 0;\n        }\n    }\n    return scalar @stack ? 0 : 1;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my $i = 0;\n    while($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push(@stack, $c);\n        }\n        elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop(@stack);\n            if(!$top) {\n                $balanced = 0;\n                last;\n            }\n            if($c eq ')' && $top ne '(') {\n                $balanced = 0;\n                last;\n            }\n            if($c eq '}' && $top ne '{') {\n                $balanced = 0;\n                last;\n            }\n            if($c eq ']' && $top ne '[') {\n                $balanced = 0;\n                last;\n            }\n        }\n        $i++;\n    }\n    if(scalar(@stack) > 0) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack = ();\n    my $balanced = 1;\n    my %pairs = (\n        '(' => ')',\n        '[' => ']',\n        '{' => '}'\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '[' || $c eq '{') {\n            push @stack, $c;\n        }\n        elsif ($c eq ')' || $c eq ']' || $c eq '}') {\n            my $top = pop @stack;\n            if ($pairs{$top} ne $c) {\n                $balanced = 0;\n                last;\n            }\n        }\n    }\n    $balanced = 0 if scalar @stack > 0;\n    return $balanced;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my $i = 0;\n    while($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push(@stack, $c);\n        } elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop(@stack);\n            if(($c eq ')' && $top ne '(') || ($c eq '}' && $top ne '{') || ($c eq ']' && $top ne '[')) {\n                $balanced = 0;\n                last;\n            }\n        }\n        $i++;\n    }\n    if($balanced && scalar(@stack) == 0) {\n        return 1;\n    } else {\n        return 0;\n    }\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']'\n    );\n    my @exp = split(//, $exp);\n    for my $char (@exp) {\n        if (exists $brackets{$char}) {\n            push @stack, $char;\n        } else {\n            my $last = pop @stack;\n            if ($brackets{$last} ne $char) {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my $stack = [];\n    my $balanced = 1;\n    foreach my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push @$stack, $c;\n        } elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop @$stack;\n            if ($top eq '(' && $c ne ')') {\n                $balanced = 0;\n                last;\n            } elsif ($top eq '{' && $c ne '}') {\n                $balanced = 0;\n                last;\n            } elsif ($top eq '[' && $c ne ']') {\n                $balanced = 0;\n                last;\n            }\n        }\n    }\n    if (@$stack) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my %pairs = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        }\n        elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            if (@stack && $pairs{$stack[-1]} eq $c) {\n                pop @stack;\n            }\n            else {\n                return 0;\n            }\n        }\n    }\n    return @stack ? 0 : 1;\n}",
    "    my @stack;\n    my $i = 0;\n    while($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        } else {\n            if(scalar @stack == 0) {\n                return 0;\n            }\n            my $top = pop @stack;\n            if(!(($top eq '(' && $c eq ')') || ($top eq '{' && $c eq '}') || ($top eq '[' && $c eq ']'))) {\n                return 0;\n            }\n        }\n        $i++;\n    }\n    return scalar @stack == 0;\n}",
    "    my @stack;\n    my %map = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $char (split //, $exp) {\n        if (exists $map{$char}) {\n            push @stack, $char;\n        }\n        elsif ($char eq ')' || $char eq '}' || $char eq ']') {\n            my $top = pop @stack;\n            return 0 if $map{$top} ne $char;\n        }\n    }\n    return 0 if @stack;\n    return 1;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']'\n    );\n    for my $char (split //, $exp) {\n        if ($char eq '(' || $char eq '{' || $char eq '[') {\n            push @stack, $char;\n        }\n        elsif ($char eq ')' || $char eq '}' || $char eq ']') {\n            my $top = pop @stack;\n            if ($brackets{$top} ne $char) {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my %closing = (\n        ')' => '(',\n        ']' => '[',\n        '}' => '{',\n    );\n    my %opening = reverse %closing;\n    for my $c (split //, $exp) {\n        if (exists $opening{$c}) {\n            push @stack, $c;\n        }\n        elsif (exists $closing{$c}) {\n            return 0 if $closing{$c} ne pop @stack;\n        }\n    }\n    return @stack ? 0 : 1;\n}",
    "    my $stack = [];\n    my $balanced = 1;\n    for(my $i = 0; $i < length($exp); $i++) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push(@$stack, $c);\n        }\n        elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop(@$stack);\n            if(!$top || ($top eq '(' && $c ne ')') || ($top eq '{' && $c ne '}') || ($top eq '[' && $c ne ']')) {\n                $balanced = 0;\n                last;\n            }\n        }\n    }\n    if(@$stack) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my $i = 0;\n    while($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push(@stack, $c);\n        } elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop(@stack);\n            if(($c eq ')' && $top ne '(') || ($c eq '}' && $top ne '{') || ($c eq ']' && $top ne '[')) {\n                $balanced = 0;\n                last;\n            }\n        }\n        $i++;\n    }\n    if($balanced && scalar(@stack) == 0) {\n        return 1;\n    } else {\n        return 0;\n    }\n}",
    "    my @stack;\n    my $balanced = 1;\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        }\n        elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop @stack;\n            if ($top eq '(' && $c eq ')') {\n                next;\n            }\n            elsif ($top eq '{' && $c eq '}') {\n                next;\n            }\n            elsif ($top eq '[' && $c eq ']') {\n                next;\n            }\n            else {\n                $balanced = 0;\n                last;\n            }\n        }\n    }\n    if (@stack) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        }\n        elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop @stack;\n            if ($top eq '(' && $c ne ')') {\n                return 0;\n            }\n            elsif ($top eq '{' && $c ne '}') {\n                return 0;\n            }\n            elsif ($top eq '[' && $c ne ']') {\n                return 0;\n            }\n        }\n    }\n    return @stack == 0;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    my $i = 0;\n    while($i < length($exp)) {\n        my $ch = substr($exp, $i, 1);\n        if(exists $brackets{$ch}) {\n            push @stack, $ch;\n        }\n        elsif(scalar @stack > 0 && $brackets{$stack[-1]} eq $ch) {\n            pop @stack;\n        }\n        else {\n            return 0;\n        }\n        $i++;\n    }\n    return scalar @stack == 0;\n}",
    "    my @stack;\n    my %pairs = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $char (split //, $exp) {\n        if ($char eq '(' || $char eq '{' || $char eq '[') {\n            push @stack, $char;\n        }\n        elsif ($char eq ')' || $char eq '}' || $char eq ']') {\n            return 0 if !@stack;\n            my $top = pop @stack;\n            return 0 if $pairs{$top} ne $char;\n        }\n    }\n    return 0 if @stack;\n    return 1;\n}",
    "    my @stack;\n    my %pairs = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    my @chars = split(//, $exp);\n    foreach my $char (@chars) {\n        if ($char eq '(' || $char eq '{' || $char eq '[') {\n            push @stack, $char;\n        } elsif ($char eq ')' || $char eq '}' || $char eq ']') {\n            if (scalar @stack == 0) {\n                return 0;\n            }\n            my $top = pop @stack;\n            if ($pairs{$top} ne $char) {\n                return 0;\n            }\n        }\n    }\n    return scalar @stack == 0;\n}",
    "    my @stack;\n    my %hash = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']'\n    );\n    for my $char (split //, $exp) {\n        if ($char eq '(' || $char eq '{' || $char eq '[') {\n            push @stack, $char;\n        }\n        elsif ($char eq ')' || $char eq '}' || $char eq ']') {\n            my $top = pop @stack;\n            if ($hash{$top} ne $char) {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my $stack = [];\n    my %open = (\n        '(' => 1,\n        '[' => 1,\n        '{' => 1,\n    );\n    my %close = (\n        ')' => '(',\n        ']' => '[',\n        '}' => '{',\n    );\n    for my $c (split //, $exp) {\n        if (exists $open{$c}) {\n            push @$stack, $c;\n        } elsif (exists $close{$c}) {\n            if (scalar @$stack == 0) {\n                return 0;\n            }\n            my $top = pop @$stack;\n            if ($top ne $close{$c}) {\n                return 0;\n            }\n        }\n    }\n    return scalar @$stack == 0;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '[' => ']',\n        '{' => '}'\n    );\n    for my $char (split //, $exp) {\n        if (exists $brackets{$char}) {\n            push @stack, $char;\n        }\n        elsif (scalar @stack && $brackets{$stack[-1]} eq $char) {\n            pop @stack;\n        }\n        else {\n            return 0;\n        }\n    }\n    return scalar @stack ? 0 : 1;\n}",
    "    my @stack;\n    my %hash = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $c (split //, $exp) {\n        if (exists $hash{$c}) {\n            push @stack, $c;\n        }\n        elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            if ($c ne $hash{pop @stack}) {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}"
  ]
}