{
  "name": "mbpp_771_check_expression",
  "language": "pl",
  "prompt": "# Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nsub check_expression {\n    my($exp) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_expression;\n        if(eq_deeply($candidate->(\"{()}[{}]\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"{()}[{]\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"{()}[{}][]({})\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @stack;\n    my @exp_arr = split(//, $exp);\n    foreach my $char (@exp_arr) {\n        if ($char eq '(' || $char eq '{' || $char eq '[') {\n            push(@stack, $char);\n        }\n        elsif ($char eq ')' || $char eq '}' || $char eq ']') {\n            my $top = pop(@stack);\n            if ($top eq '(' && $char ne ')') {\n                return 0;\n            }\n            elsif ($top eq '{' && $char ne '}') {\n                return 0;\n            }\n            elsif ($top eq '[' && $char ne ']') {\n                return 0;\n            }\n        }\n    }\n    if (scalar(@stack) == 0) {\n        return 1;\n    }\n    return 0;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my $i = 0;\n    while ($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push(@stack, $c);\n        } elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop(@stack);\n            if ($c eq ')' && $top ne '(') {\n                $balanced = 0;\n                last;\n            } elsif ($c eq '}' && $top ne '{') {\n                $balanced = 0;\n                last;\n            } elsif ($c eq ']' && $top ne '[') {\n                $balanced = 0;\n                last;\n            }\n        }\n        $i++;\n    }\n    if ($balanced && scalar(@stack) == 0) {\n        return 1;\n    }\n    return 0;\n}",
    "    my @stack;\n    my %braces = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']'\n    );\n    for my $char (split //, $exp) {\n        if ($char eq '(' || $char eq '{' || $char eq '[') {\n            push @stack, $char;\n        }\n        elsif ($char eq ')' || $char eq '}' || $char eq ']') {\n            my $last = pop @stack;\n            return 0 if $braces{$last} ne $char;\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        }\n        elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            my $last = pop @stack;\n            if ($brackets{$last} ne $c) {\n                return 0;\n            }\n        }\n    }\n    return @stack == 0;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    my $balanced = 1;\n    for my $char (split //, $exp) {\n        if (exists $brackets{$char}) {\n            push @stack, $char;\n        }\n        elsif ($char eq ')' || $char eq '}' || $char eq ']') {\n            my $last = pop @stack;\n            if ($brackets{$last} ne $char) {\n                $balanced = 0;\n                last;\n            }\n        }\n    }\n    return $balanced;\n}",
    "    my @stack;\n    for my $c (split //, $exp) {\n        if ($c eq '(') {\n            push @stack, $c;\n        } elsif ($c eq ')') {\n            if (scalar @stack == 0) {\n                return 0;\n            } else {\n                pop @stack;\n            }\n        }\n    }\n    return scalar @stack == 0;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '[' => ']',\n        '{' => '}',\n    );\n    for my $char (split //, $exp) {\n        if (exists $brackets{$char}) {\n            push @stack, $char;\n        }\n        elsif (scalar @stack && $brackets{$stack[-1]} eq $char) {\n            pop @stack;\n        }\n        else {\n            return 0;\n        }\n    }\n    return scalar @stack ? 0 : 1;\n}",
    "    my @stack;\n    my %hash = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    my @exp = split //, $exp;\n    for my $char (@exp) {\n        if ($char eq '(' || $char eq '{' || $char eq '[') {\n            push @stack, $char;\n        }\n        elsif ($char eq ')' || $char eq '}' || $char eq ']') {\n            my $top = pop @stack;\n            if ($hash{$top} ne $char) {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my %pairs = (\n        '(' => ')',\n        '[' => ']',\n        '{' => '}',\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '[' || $c eq '{') {\n            push @stack, $c;\n        }\n        elsif ($c eq ')' || $c eq ']' || $c eq '}') {\n            my $top = pop @stack;\n            if (!defined $top || $c ne $pairs{$top}) {\n                $balanced = 0;\n                last;\n            }\n        }\n    }\n    if (@stack) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '[' => ']',\n        '{' => '}',\n    );\n    for my $char (split //, $exp) {\n        if (exists $brackets{$char}) {\n            push @stack, $char;\n        }\n        elsif (defined $stack[-1] && $brackets{$stack[-1]} eq $char) {\n            pop @stack;\n        }\n        else {\n            return 0;\n        }\n    }\n    return @stack ? 0 : 1;\n}",
    "    my @stack;\n    my @exp = split(//, $exp);\n    for my $i (0..$#exp) {\n        if ($exp[$i] eq '(' or $exp[$i] eq '{' or $exp[$i] eq '[') {\n            push @stack, $exp[$i];\n        }\n        elsif ($exp[$i] eq ')' or $exp[$i] eq '}' or $exp[$i] eq ']') {\n            my $top = pop @stack;\n            if ($exp[$i] eq ')' and $top ne '(') {\n                return 0;\n            }\n            elsif ($exp[$i] eq '}' and $top ne '{') {\n                return 0;\n            }\n            elsif ($exp[$i] eq ']' and $top ne '[') {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $char (split //, $exp) {\n        if (exists $brackets{$char}) {\n            push @stack, $char;\n        }\n        elsif (scalar @stack == 0) {\n            return 0;\n        }\n        elsif ($brackets{$stack[-1]} eq $char) {\n            pop @stack;\n        }\n        else {\n            return 0;\n        }\n    }\n    return scalar @stack == 0;\n}",
    "    my @stack;\n    my %brackets = (\n        '{' => '}',\n        '(' => ')',\n        '[' => ']',\n    );\n    foreach my $char (split //, $exp) {\n        if (exists $brackets{$char}) {\n            push @stack, $char;\n        }\n        elsif (scalar @stack > 0 && $brackets{$stack[-1]} eq $char) {\n            pop @stack;\n        }\n        else {\n            return 0;\n        }\n    }\n    return scalar @stack == 0;\n}",
    "    my @stack;\n    my %hash = (\n        '(' => ')',\n        '[' => ']',\n        '{' => '}',\n    );\n    for my $char (split //, $exp) {\n        if ($char eq '(' || $char eq '[' || $char eq '{') {\n            push @stack, $char;\n        }\n        elsif ($char eq ')' || $char eq ']' || $char eq '}') {\n            my $top = pop @stack;\n            if ($hash{$top} ne $char) {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my @stack;\n    my %brackets = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        }\n        elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop @stack;\n            if ($brackets{$top} ne $c) {\n                return 0;\n            }\n        }\n    }\n    return @stack == 0;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my $i = 0;\n    while ($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if ($c eq '(') {\n            push @stack, $c;\n        } elsif ($c eq ')') {\n            if (scalar(@stack) == 0) {\n                $balanced = 0;\n                last;\n            } else {\n                pop @stack;\n            }\n        }\n        $i++;\n    }\n    if (scalar(@stack) > 0) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my %map = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        }\n        elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            if (scalar @stack == 0) {\n                return 0;\n            }\n            my $top = pop @stack;\n            if ($map{$top} ne $c) {\n                return 0;\n            }\n        }\n    }\n    return scalar @stack == 0;\n}",
    "    my @stack;\n    my $balanced = 1;\n    my $i = 0;\n    while($i < length($exp)) {\n        my $c = substr($exp, $i, 1);\n        if($c eq '(' || $c eq '{' || $c eq '[') {\n            push(@stack, $c);\n        }\n        elsif($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop(@stack);\n            if($top eq '(' && $c ne ')') {\n                $balanced = 0;\n                last;\n            }\n            if($top eq '{' && $c ne '}') {\n                $balanced = 0;\n                last;\n            }\n            if($top eq '[' && $c ne ']') {\n                $balanced = 0;\n                last;\n            }\n        }\n        $i++;\n    }\n    if(scalar(@stack) > 0) {\n        $balanced = 0;\n    }\n    return $balanced;\n}",
    "    my @stack;\n    my %map = (\n        '(' => ')',\n        '{' => '}',\n        '[' => ']',\n    );\n    for my $c (split //, $exp) {\n        if ($c eq '(' || $c eq '{' || $c eq '[') {\n            push @stack, $c;\n        } elsif ($c eq ')' || $c eq '}' || $c eq ']') {\n            my $top = pop @stack;\n            return 0 if !$top || $map{$top} ne $c;\n        }\n    }\n    return @stack ? 0 : 1;\n}",
    "    my @stack;\n    my %brackets = (\n        '{' => '}',\n        '[' => ']',\n        '(' => ')'\n    );\n    for my $char (split //, $exp) {\n        if (exists $brackets{$char}) {\n            push @stack, $char;\n        } elsif (scalar @stack == 0) {\n            return 0;\n        } else {\n            my $top = pop @stack;\n            if ($char ne $brackets{$top}) {\n                return 0;\n            }\n        }\n    }\n    return scalar @stack == 0;\n}"
  ]
}