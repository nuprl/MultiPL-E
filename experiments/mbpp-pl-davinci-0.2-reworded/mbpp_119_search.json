{
  "name": "mbpp_119_search",
  "language": "pl",
  "prompt": "# Write a plthon function to find the element that appears only once in a sorted array.\nsub search {\n    my($arr) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_119_search.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&search;\n        if(eq_deeply($candidate->([1, 1, 2, 2, 3]),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 2, 3, 3, 4, 4]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $low = 0;\n    my $high = @$arr - 1;\n    while($low <= $high) {\n        my $mid = int(($low + $high)/2);\n        if($mid == 0 || $mid == @$arr - 1) {\n            return $arr->[$mid];\n        }\n        if($arr->[$mid] != $arr->[$mid-1] && $arr->[$mid] != $arr->[$mid+1]) {\n            return $arr->[$mid];\n        }\n        if($arr->[$mid] == $arr->[$mid-1]) {\n            if($mid % 2 == 0) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        } else {\n            if($mid % 2 == 0) {\n                $high = $mid - 1;\n            } else {\n                $low = $mid + 1;\n            }\n        }\n    }\n}",
    "    my $low = 0;\n    my $high = scalar(@$arr) - 1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($mid == 0 || $mid == scalar(@$arr) - 1) {\n            return $arr->[$mid];\n        }\n        if ($arr->[$mid] != $arr->[$mid - 1] && $arr->[$mid] != $arr->[$mid + 1]) {\n            return $arr->[$mid];\n        }\n        if ($arr->[$mid] == $arr->[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        } else {\n            if ($mid % 2 == 0) {\n                $high = $mid - 1;\n            } else {\n                $low = $mid + 1;\n            }\n        }\n    }\n}",
    "    my $n = @$arr;\n    my $low = 0;\n    my $high = $n - 1;\n    while($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if($mid == 0 || $mid == $n - 1) {\n            return $arr->[$mid];\n        }\n        if($arr->[$mid] != $arr->[$mid - 1] && $arr->[$mid] != $arr->[$mid + 1]) {\n            return $arr->[$mid];\n        }\n        if($arr->[$mid] == $arr->[$mid - 1]) {\n            if($mid % 2 == 0) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        } else {\n            if($mid % 2 == 0) {\n                $high = $mid - 1;\n            } else {\n                $low = $mid + 1;\n            }\n        }\n    }\n}",
    "    my $n = scalar(@$arr);\n    my $low = 0;\n    my $high = $n - 1;\n    while($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if($mid == 0 || $mid == $n - 1) {\n            return $arr->[$mid];\n        }\n        if($arr->[$mid] != $arr->[$mid - 1] && $arr->[$mid] != $arr->[$mid + 1]) {\n            return $arr->[$mid];\n        }\n        if($arr->[$mid] == $arr->[$mid - 1]) {\n            if(($mid - 1) % 2 == 0) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        } else {\n            if(($mid - 1) % 2 == 0) {\n                $high = $mid - 1;\n            } else {\n                $low = $mid + 1;\n            }\n        }\n    }\n    return -1;\n}",
    "    my $n = scalar(@$arr);\n    my $low = 0;\n    my $high = $n - 1;\n    while($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if($mid == 0 || $mid == $n - 1) {\n            return $arr->[$mid];\n        }\n        if($arr->[$mid] != $arr->[$mid - 1] && $arr->[$mid] != $arr->[$mid + 1]) {\n            return $arr->[$mid];\n        }\n        if($arr->[$mid] == $arr->[$mid - 1]) {\n            if($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        } else {\n            if($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n}",
    "    my $n = scalar(@$arr);\n    my $low = 0;\n    my $high = $n - 1;\n    while ($low <= $high) {\n        my $mid = $low + ($high - $low)/2;\n        if ($mid == 0 || $mid == $n - 1) {\n            return $arr->[$mid];\n        }\n        if ($arr->[$mid] != $arr->[$mid - 1] && $arr->[$mid] != $arr->[$mid + 1]) {\n            return $arr->[$mid];\n        }\n        if ($arr->[$mid] == $arr->[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        } else {\n            if ($mid % 2 == 0) {\n                $high = $mid - 1;\n            } else {\n                $low = $mid + 1;\n            }\n        }\n    }\n    return -1;\n}",
    "    my $n = scalar(@$arr);\n    my $low = 0;\n    my $high = $n - 1;\n    while($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if($mid == 0 || $mid == $n - 1) {\n            return $arr->[$mid];\n        }\n        if($arr->[$mid] != $arr->[$mid - 1] && $arr->[$mid] != $arr->[$mid + 1]) {\n            return $arr->[$mid];\n        }\n        if($arr->[$mid] == $arr->[$mid - 1]) {\n            if(($mid - 1) % 2 == 0) {\n                $low = $mid + 1;\n            }\n            else {\n                $high = $mid - 1;\n            }\n        }\n        else {\n            if(($mid - 1) % 2 == 0) {\n                $high = $mid - 1;\n            }\n            else {\n                $low = $mid + 1;\n            }\n        }\n    }\n    return -1;\n}",
    "    my $n = scalar(@$arr);\n    my $low = 0;\n    my $high = $n - 1;\n    while($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if($mid == 0 || $mid == $n - 1) {\n            return $arr->[$mid];\n        }\n        if($arr->[$mid] != $arr->[$mid - 1] && $arr->[$mid] != $arr->[$mid + 1]) {\n            return $arr->[$mid];\n        }\n        if($arr->[$mid] == $arr->[$mid - 1]) {\n            if(($mid - 1) % 2 == 0) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        } elsif($arr->[$mid] == $arr->[$mid + 1]) {\n            if(($mid + 1) % 2 == 0) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n}",
    "    my $n = scalar(@$arr);\n    my $l = 0;\n    my $r = $n - 1;\n    while($l <= $r) {\n        my $m = int(($l + $r) / 2);\n        if($m == 0 or $m == $n - 1) {\n            return $arr->[$m];\n        }\n        if($arr->[$m] != $arr->[$m - 1] and $arr->[$m] != $arr->[$m + 1]) {\n            return $arr->[$m];\n        }\n        if($arr->[$m] == $arr->[$m - 1]) {\n            if($m % 2 == 0) {\n                $r = $m - 2;\n            }\n            else {\n                $l = $m + 1;\n            }\n        }\n        else {\n            if($m % 2 == 0) {\n                $l = $m + 2;\n            }\n            else {\n                $r = $m - 1;\n            }\n        }\n    }\n}",
    "    my $low = 0;\n    my $high = scalar(@$arr) - 1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high)/2);\n        if ($mid == 0 || $mid == scalar(@$arr) - 1) {\n            return $arr->[$mid];\n        }\n        if ($arr->[$mid] != $arr->[$mid - 1] && $arr->[$mid] != $arr->[$mid + 1]) {\n            return $arr->[$mid];\n        }\n        if ($arr->[$mid] == $arr->[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        } else {\n            if ($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}",
    "    my $n = scalar(@$arr);\n    my $low = 0;\n    my $high = $n - 1;\n    while($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($mid == 0 || $mid == $n - 1) {\n            return $arr->[$mid];\n        }\n        if ($arr->[$mid] != $arr->[$mid - 1] && $arr->[$mid] != $arr->[$mid + 1]) {\n            return $arr->[$mid];\n        }\n        if ($arr->[$mid] == $arr->[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        } else {\n            if ($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}",
    "    my $n = scalar(@$arr);\n    my $low = 0;\n    my $high = $n - 1;\n    while($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if($mid == 0 || $mid == $n - 1) {\n            return $arr->[$mid];\n        }\n        if($arr->[$mid] != $arr->[$mid - 1] && $arr->[$mid] != $arr->[$mid + 1]) {\n            return $arr->[$mid];\n        }\n        if($mid % 2 == 0) {\n            if($arr->[$mid] == $arr->[$mid + 1]) {\n                $low = $mid + 2;\n            }\n            else {\n                $high = $mid - 2;\n            }\n        }\n        else {\n            if($arr->[$mid] == $arr->[$mid - 1]) {\n                $low = $mid + 1;\n            }\n            else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}",
    "    my $n = scalar(@$arr);\n    my $low = 0;\n    my $high = $n - 1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($mid == 0 || $mid == $n - 1) {\n            return $arr->[$mid];\n        }\n        if ($arr->[$mid] != $arr->[$mid - 1] && $arr->[$mid] != $arr->[$mid + 1]) {\n            return $arr->[$mid];\n        }\n        if ($mid % 2 == 0) {\n            if ($arr->[$mid] == $arr->[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 2;\n            }\n        } else {\n            if ($arr->[$mid] == $arr->[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}",
    "    my $n = scalar @$arr;\n    my $low = 0;\n    my $high = $n - 1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($mid == 0 || $mid == $n - 1) {\n            return $arr->[$mid];\n        }\n        if ($arr->[$mid] != $arr->[$mid - 1] && $arr->[$mid] != $arr->[$mid + 1]) {\n            return $arr->[$mid];\n        }\n        if ($arr->[$mid] == $arr->[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        } else {\n            if ($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}",
    "    my $n = @$arr;\n    my $low = 0;\n    my $high = $n - 1;\n    while($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if($mid == 0 || $mid == $n - 1) {\n            return $arr->[$mid];\n        }\n        if($arr->[$mid] != $arr->[$mid - 1] && $arr->[$mid] != $arr->[$mid + 1]) {\n            return $arr->[$mid];\n        }\n        if($arr->[$mid] == $arr->[$mid - 1]) {\n            if($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        } else {\n            if($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}",
    "    my $n = scalar(@$arr);\n    my $i = 0;\n    while($i < $n) {\n        if($i == $n - 1) {\n            return $arr->[$i];\n        }\n        if($arr->[$i] == $arr->[$i + 1]) {\n            $i += 2;\n        } else {\n            return $arr->[$i];\n        }\n    }\n}",
    "    my $low = 0;\n    my $high = scalar(@$arr) - 1;\n    while ($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if ($mid == 0 || $mid == scalar(@$arr) - 1) {\n            return $arr->[$mid];\n        }\n        if ($arr->[$mid] != $arr->[$mid - 1] && $arr->[$mid] != $arr->[$mid + 1]) {\n            return $arr->[$mid];\n        }\n        if ($arr->[$mid] == $arr->[$mid - 1]) {\n            if ($mid % 2 == 0) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        } else {\n            if ($mid % 2 == 0) {\n                $high = $mid - 1;\n            } else {\n                $low = $mid + 1;\n            }\n        }\n    }\n}",
    "    my $n = scalar(@$arr);\n    my $low = 0;\n    my $high = $n - 1;\n    while($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if($mid == 0 || $mid == $n - 1) {\n            return $arr->[$mid];\n        }\n        if($arr->[$mid] != $arr->[$mid - 1] && $arr->[$mid] != $arr->[$mid + 1]) {\n            return $arr->[$mid];\n        }\n        if($arr->[$mid] == $arr->[$mid - 1]) {\n            if($mid % 2 == 0) {\n                $high = $mid - 2;\n            } else {\n                $low = $mid + 1;\n            }\n        } else {\n            if($mid % 2 == 0) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}",
    "    my $n = scalar(@$arr);\n    my $low = 0;\n    my $high = $n - 1;\n    while($low <= $high) {\n        my $mid = int(($low + $high) / 2);\n        if($mid == 0 || $mid == $n - 1) {\n            return $arr->[$mid];\n        }\n        if($arr->[$mid] != $arr->[$mid - 1] && $arr->[$mid] != $arr->[$mid + 1]) {\n            return $arr->[$mid];\n        }\n        if($arr->[$mid] == $arr->[$mid - 1]) {\n            if($mid % 2 == 0) {\n                $low = $mid + 1;\n            }\n            else {\n                $high = $mid - 1;\n            }\n        }\n        else {\n            if($mid % 2 == 0) {\n                $high = $mid - 1;\n            }\n            else {\n                $low = $mid + 1;\n            }\n        }\n    }\n    return -1;\n}",
    "    my $n = scalar(@$arr);\n    my $low = 0;\n    my $high = $n - 1;\n    while ($low <= $high) {\n        if ($low == $high) {\n            return $arr->[$low];\n        }\n        my $mid = int(($low + $high) / 2);\n        if ($mid % 2 == 0) {\n            if ($arr->[$mid] == $arr->[$mid + 1]) {\n                $low = $mid + 2;\n            } else {\n                $high = $mid;\n            }\n        } else {\n            if ($arr->[$mid] == $arr->[$mid - 1]) {\n                $low = $mid + 1;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n    }\n    return -1;\n}"
  ]
}