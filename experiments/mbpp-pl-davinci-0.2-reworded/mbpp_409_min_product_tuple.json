{
  "name": "mbpp_409_min_product_tuple",
  "language": "pl",
  "prompt": "# Write a function to find the minimum product from the pairs of arrays within a given array.\nsub min_product_tuple {\n    my($list1) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_409_min_product_tuple.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&min_product_tuple;\n        if(eq_deeply($candidate->([[2, 7], [2, 6], [1, 8], [4, 9]]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[10, 20], [15, 2], [5, 10]]),30)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[11, 44], [10, 15], [20, 5], [12, 9]]),100)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $min_product = $list1->[0] * $list1->[1];\n    for (my $i = 0; $i < @$list1; $i++) {\n        for (my $j = $i + 1; $j < @$list1; $j++) {\n            my $product = $list1->[$i] * $list1->[$j];\n            if ($product < $min_product) {\n                $min_product = $product;\n            }\n        }\n    }\n    return $min_product;\n}",
    "    my @list1 = sort {$a <=> $b} @$list1;\n    my $min = $list1[0] * $list1[1];\n    for(my $i = 2; $i < @list1; $i++) {\n        my $product = $list1[0] * $list1[$i];\n        $min = $product if $product < $min;\n    }\n    return $min;\n}",
    "    my $min = $list1->[0] * $list1->[1];\n    for (my $i = 0; $i < scalar @$list1; $i++) {\n        for (my $j = $i + 1; $j < scalar @$list1; $j++) {\n            my $product = $list1->[$i] * $list1->[$j];\n            if ($product < $min) {\n                $min = $product;\n            }\n        }\n    }\n    return $min;\n}",
    "    my @list = @$list1;\n    my $min_product = $list[0] * $list[1];\n    for(my $i = 0; $i < scalar(@list) - 1; $i++) {\n        for(my $j = $i + 1; $j < scalar(@list); $j++) {\n            if($list[$i] * $list[$j] < $min_product) {\n                $min_product = $list[$i] * $list[$j];\n            }\n        }\n    }\n    return $min_product;\n}",
    "    my @list = @$list1;\n    my $min = $list[0] * $list[1];\n    for(my $i = 0; $i < scalar(@list) - 1; $i++) {\n        for(my $j = $i + 1; $j < scalar(@list); $j++) {\n            my $prod = $list[$i] * $list[$j];\n            if($prod < $min) {\n                $min = $prod;\n            }\n        }\n    }\n    return $min;\n}",
    "    my @list1 = @$list1;\n    my $min = $list1[0] * $list1[1];\n    for (my $i = 0; $i < $#list1; $i++) {\n        for (my $j = $i + 1; $j < @list1; $j++) {\n            my $product = $list1[$i] * $list1[$j];\n            $min = $product if $product < $min;\n        }\n    }\n    return $min;\n}",
    "    my $min_product = $list1->[0] * $list1->[1];\n    for(my $i = 0; $i < scalar(@{$list1}); $i++) {\n        for(my $j = $i + 1; $j < scalar(@{$list1}); $j++) {\n            my $product = $list1->[$i] * $list1->[$j];\n            if($product < $min_product) {\n                $min_product = $product;\n            }\n        }\n    }\n    return $min_product;\n}",
    "    my @list = @{$list1};\n    my $min = $list[0] * $list[1];\n    for(my $i = 0; $i < scalar @list; $i++){\n        for(my $j = $i+1; $j < scalar @list; $j++){\n            my $product = $list[$i] * $list[$j];\n            if($product < $min){\n                $min = $product;\n            }\n        }\n    }\n    return $min;\n}",
    "    my @list = @$list1;\n    my $min_product = $list[0] * $list[1];\n    for (my $i = 0; $i < scalar(@list); $i++) {\n        for (my $j = $i + 1; $j < scalar(@list); $j++) {\n            if ($list[$i] * $list[$j] < $min_product) {\n                $min_product = $list[$i] * $list[$j];\n            }\n        }\n    }\n    return $min_product;\n}",
    "    my $min = $list1->[0] * $list1->[1];\n    for(my $i = 0; $i < scalar(@{$list1}); $i++) {\n        for(my $j = $i + 1; $j < scalar(@{$list1}); $j++) {\n            my $product = $list1->[$i] * $list1->[$j];\n            if($product < $min) {\n                $min = $product;\n            }\n        }\n    }\n    return $min;\n}",
    "    my $min_product = $list1->[0] * $list1->[1];\n    for (my $i = 0; $i < scalar @$list1; $i++) {\n        for (my $j = $i + 1; $j < scalar @$list1; $j++) {\n            my $product = $list1->[$i] * $list1->[$j];\n            if ($product < $min_product) {\n                $min_product = $product;\n            }\n        }\n    }\n    return $min_product;\n}",
    "    my @list = sort { $a <=> $b } @$list1;\n    my $min = $list[0] * $list[1];\n    return $min;\n}",
    "    my $min = $list1->[0] * $list1->[1];\n    for(my $i = 0; $i < @$list1; $i++) {\n        for(my $j = $i + 1; $j < @$list1; $j++) {\n            my $product = $list1->[$i] * $list1->[$j];\n            $min = $product if $product < $min;\n        }\n    }\n    return $min;\n}",
    "    my @list = sort { $a <=> $b } @$list1;\n    my $min = $list[0] * $list[1];\n    for(my $i = 0; $i < scalar(@list) - 1; $i++) {\n        my $product = $list[$i] * $list[$i + 1];\n        $min = $product if $product < $min;\n    }\n    return $min;\n}",
    "    my @list = @$list1;\n    my $min = $list[0] * $list[1];\n    for(my $i = 0; $i < scalar(@list); $i++) {\n        for(my $j = $i + 1; $j < scalar(@list); $j++) {\n            my $product = $list[$i] * $list[$j];\n            if($product < $min) {\n                $min = $product;\n            }\n        }\n    }\n    return $min;\n}",
    "    my $min_product = $list1->[0] * $list1->[1];\n    for (my $i = 0; $i < scalar(@$list1) - 1; $i++) {\n        for (my $j = $i + 1; $j < scalar(@$list1); $j++) {\n            my $product = $list1->[$i] * $list1->[$j];\n            if ($product < $min_product) {\n                $min_product = $product;\n            }\n        }\n    }\n    return $min_product;\n}",
    "    my @list = @$list1;\n    my $min_product = $list[0] * $list[1];\n    for (my $i = 0; $i < scalar(@list) - 1; $i++) {\n        for (my $j = $i + 1; $j < scalar(@list); $j++) {\n            my $product = $list[$i] * $list[$j];\n            if ($product < $min_product) {\n                $min_product = $product;\n            }\n        }\n    }\n    return $min_product;\n}",
    "    my @list = sort {$a <=> $b} @$list1;\n    my $min_product = $list[0] * $list[1];\n    return $min_product;\n}",
    "    my $min_product = $list1->[0] * $list1->[1];\n    for (my $i = 0; $i < scalar(@$list1) - 1; $i++) {\n        for (my $j = $i + 1; $j < scalar(@$list1); $j++) {\n            my $product = $list1->[$i] * $list1->[$j];\n            if ($product < $min_product) {\n                $min_product = $product;\n            }\n        }\n    }\n    return $min_product;\n}",
    "    my $min = $list1->[0] * $list1->[1];\n    for (my $i = 0; $i < scalar(@$list1); $i++) {\n        for (my $j = $i + 1; $j < scalar(@$list1); $j++) {\n            my $product = $list1->[$i] * $list1->[$j];\n            if ($product < $min) {\n                $min = $product;\n            }\n        }\n    }\n    return $min;\n}"
  ]
}