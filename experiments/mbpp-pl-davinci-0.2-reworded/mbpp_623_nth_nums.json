{
  "name": "mbpp_623_nth_nums",
  "language": "pl",
  "prompt": "# Write a function to compute the n-th power of each number in an array.\nsub nth_nums {\n    my($nums, $n) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_623_nth_nums.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&nth_nums;\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 30], 3),[1000, 8000, 27000])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12, 15], 5),[248832, 759375])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @nth_nums = ();\n    foreach my $num (@$nums) {\n        push @nth_nums, $num ** $n;\n    }\n    return \\@nth_nums;\n}",
    "    return map { $_ ** $n } @$nums;\n}",
    "    return map { $_ ** $n } @$nums;\n}",
    "    return map { $_ ** $n } @$nums;\n}",
    "    my @nth_nums;\n    foreach my $num (@$nums) {\n        push @nth_nums, $num ** $n;\n    }\n    return @nth_nums;\n}",
    "    my @nth_nums = ();\n    foreach my $num (@$nums) {\n        push @nth_nums, $num ** $n;\n    }\n    return @nth_nums;\n}",
    "    my @nums = @$nums;\n    my @nth_nums = ();\n    for my $num (@nums) {\n        push @nth_nums, $num ** $n;\n    }\n    return @nth_nums;\n}",
    "    return map { $_ ** $n } @$nums;\n}",
    "    my @nums = @$nums;\n    my @nth_nums = map { $_ ** $n } @nums;\n    return @nth_nums;\n}",
    "    my @nth_nums;\n    foreach my $num (@$nums) {\n        push @nth_nums, $num ** $n;\n    }\n    return @nth_nums;\n}",
    "    return map { $_ ** $n } @$nums;\n}",
    "    return map { $_ ** $n } @$nums;\n}",
    "    return map { $_ ** $n } @$nums;\n}",
    "    return [map { $_ ** $n } @$nums];\n}",
    "    my @nth_nums = ();\n    foreach my $num (@$nums) {\n        push @nth_nums, $num ** $n;\n    }\n    return @nth_nums;\n}",
    "    return map { $_ ** $n } @$nums;\n}",
    "    return map { $_ ** $n } @$nums;\n}",
    "    return map { $_ ** $n } @$nums;\n}",
    "    my @nth_nums = map { $_ ** $n } @$nums;\n    return \\@nth_nums;\n}",
    "    return map { $_ ** $n } @$nums;\n}"
  ]
}