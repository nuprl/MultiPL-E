{
  "name": "mbpp_567_issort_list",
  "language": "pl",
  "prompt": "# Write a function to check whether a specified array is sorted or not.\nsub issort_list {\n    my($list1) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_567_issort_list.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&issort_list;\n        if(eq_deeply($candidate->([1, 2, 4, 6, 8, 10, 12, 14, 16, 17]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 4, 6, 8, 10, 12, 14, 20, 17]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 4, 6, 8, 10, 15, 14, 20]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my $list2 = [sort {$a <=> $b} @$list1];\n    return $list1 eq $list2;\n}",
    "    my $i;\n    my $j;\n    my $n = scalar(@$list1);\n    for ($i = 0; $i < $n - 1; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($list1->[$i] > $list1->[$j]) {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my $i;\n    my $j;\n    my $len = @$list1;\n    for ($i = 0; $i < $len - 1; $i++) {\n        for ($j = $i + 1; $j < $len; $j++) {\n            if ($list1->[$i] > $list1->[$j]) {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
    "    my $flag = 1;\n    for(my $i = 0; $i < scalar(@$list1) - 1; $i++) {\n        if($list1->[$i] > $list1->[$i + 1]) {\n            $flag = 0;\n            last;\n        }\n    }\n    return $flag;\n}",
    "    my $list2 = [sort @$list1];\n    return $list1 eq $list2;\n}",
    "    my($i);\n    for($i = 0; $i < @$list1 - 1; $i++) {\n        if($list1->[$i] > $list1->[$i + 1]) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my @list = @$list1;\n    my $n = @list;\n    for (my $i = 1; $i < $n; $i++) {\n        if ($list[$i] < $list[$i-1]) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my($i, $j, $k, $flag);\n    $flag = 1;\n    for($i = 0; $i < $#$list1; $i++) {\n        if($list1->[$i] > $list1->[$i+1]) {\n            $flag = 0;\n            last;\n        }\n    }\n    return $flag;\n}",
    "    my $i;\n    for ($i = 1; $i < @$list1; $i++) {\n        if ($list1->[$i] < $list1->[$i-1]) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my $i;\n    my $j;\n    my $k;\n    my $n;\n    my $t;\n    my $flag;\n    my $result;\n    $n = scalar(@$list1);\n    $flag = 0;\n    $j = 0;\n    while( $j < $n-1 )\n    {\n        if( $list1->[$j]<=$list1->[$j+1] )\n        {\n            $j = $j+1;\n        }\n        else\n        {\n            $flag = 1;\n            last;\n        }\n    }\n    $result = !$flag;\n    return $result;\n}",
    "    my $i = 0;\n    my $j = 0;\n    my $len = @$list1;\n    for($i = 0; $i < $len - 1; $i++) {\n        if($$list1[$i] > $$list1[$i + 1]) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my($i, $j, $flag);\n    for ($i = 0; $i < $#{$list1}; $i++) {\n        for ($j = $i + 1; $j <= $#{$list1}; $j++) {\n            if ($list1->[$i] > $list1->[$j]) {\n                $flag = 0;\n                last;\n            }\n        }\n    }\n    if ($flag == 0) {\n        return 0;\n    }\n    else {\n        return 1;\n    }\n}",
    "    my($i, $j);\n    my(@list) = @$list1;\n    for($i = 0; $i < @list - 1; $i++) {\n        if($list[$i] > $list[$i + 1]) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my $len = scalar(@$list1);\n    my $i = 0;\n    while ($i < $len-1) {\n        if ($list1->[$i] > $list1->[$i+1]) {\n            return 0;\n        }\n        $i++;\n    }\n    return 1;\n}",
    "    my $list2 = $list1;\n    my $list3 = $list1;\n    my $list4 = $list1;\n    my $list5 = $list1;\n    my $list6 = $list1;\n    my $list7 = $list1;\n    my $list8 = $list1;\n    my $list9 = $list1;\n    my $list10 = $list1;\n    my $list11 = $list1;\n    my $list12 = $list1;\n    my $list13 = $list1;\n    my $list14 = $list1;\n    my $list15 = $list1;\n    my $list16 = $list1;\n    my $list17 = $list1;\n    my $list18 = $list1;\n    my $list19 = $list1;\n    my $list20 = $list1;\n    my $list21 = $list1;\n    my $list22 = $list1;\n    my $list23 = $list1;\n    my $list24 = $list1;\n    my $list25 = $list1;\n    my $list26 = $list1;\n    my $list27 = $list1;\n    my $list28 = $list1;\n    my $list29 = $list1;\n    my $list30 = $list1;\n    my $list31 = $list1;\n    my $list32 = $list1;\n    my $list33 = $list1;\n    my $list34 = $list1;\n    my $list35 = $list1;\n    my $list36 = $list1;\n    my $list37 = $list1;\n    my $list38 = $list1;\n    my $list39 = $list1;\n    my $list40 = $list1;\n    my $list41 = $list1;\n    my $list42 = $list1;\n    my $list43 = $list1;\n    my $list44 = $list1;\n    my $list45 = $list1;\n    my $list46 = $list1;\n    my $list47 = $list1;\n    my $list48",
    "    my $i;\n    for($i=0; $i<$#{$list1}; $i++) {\n        if($list1->[$i] > $list1->[$i+1]) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my $i;\n    for ($i = 1; $i < @$list1; $i++) {\n        if ($list1->[$i] < $list1->[$i - 1]) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my($i);\n    for($i=0; $i<$#$list1; $i++) {\n        if($list1->[$i] > $list1->[$i+1]) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "    my $list2 = [sort {$a <=> $b} @$list1];\n    return $list1 eq $list2;\n}",
    "    my $list2 = [sort @$list1];\n    return $list1 eq $list2;\n}"
  ]
}