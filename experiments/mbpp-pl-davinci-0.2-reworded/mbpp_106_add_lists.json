{
  "name": "mbpp_106_add_lists",
  "language": "pl",
  "prompt": "# Write a function to append the given array to the given arrays.\nsub add_lists {\n    my($test_list, $test_tup) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_106_add_lists.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add_lists;\n        if(eq_deeply($candidate->([5, 6, 7], [9, 10]),[9, 10, 5, 6, 7])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([6, 7, 8], [10, 11]),[10, 11, 6, 7, 8])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7, 8, 9], [11, 12]),[11, 12, 7, 8, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my @test_list = @$test_list;\n    my @test_tup = @$test_tup;\n    my @result;\n    for my $i (0..$#test_list) {\n        push @result, [@{$test_list[$i]}, @{$test_tup[$i]}];\n    }\n    return \\@result;\n}",
    "    my @test_list = @$test_list;\n    my @test_tup = @$test_tup;\n    my @result;\n    for my $i (0 .. $#test_list) {\n        push @result, [@{$test_list[$i]}, @{$test_tup[$i]}];\n    }\n    return \\@result;\n}",
    "    my @list = @$test_list;\n    my @tup = @$test_tup;\n    my @result;\n    for my $i (0 .. $#list) {\n        push @result, [@{$list[$i]}, @{$tup[$i]}];\n    }\n    return \\@result;\n}",
    "    my @test_list = @$test_list;\n    my @test_tup = @$test_tup;\n    my @new_list = ();\n    for my $i (0 .. $#test_list) {\n        push @new_list, [@{$test_list[$i]}, @{$test_tup[$i]}];\n    }\n    return \\@new_list;\n}",
    "    my @new_list = @$test_list;\n    my @new_tup = @$test_tup;\n    push @new_list, @new_tup;\n    return \\@new_list;\n}",
    "    my $test_list_ref = ref($test_list);\n    my $test_tup_ref = ref($test_tup);\n    if ($test_list_ref eq 'ARRAY' && $test_tup_ref eq 'ARRAY') {\n        my @test_list = @{$test_list};\n        my @test_tup = @{$test_tup};\n        my @test_list_tup = (@test_list, @test_tup);\n        return \\@test_list_tup;\n    }\n    else {\n        return undef;\n    }\n}",
    "    my $test_list_len = @$test_list;\n    my $test_tup_len = @$test_tup;\n    my $i;\n    for ($i = 0; $i < $test_tup_len; $i++) {\n        $test_list->[$test_list_len + $i] = $test_tup->[$i];\n    }\n}",
    "    my @test_list = @$test_list;\n    my @test_tup = @$test_tup;\n    my @new_list;\n    for my $i (0 .. $#test_list) {\n        push @new_list, [ @{$test_list[$i]}, @{$test_tup[$i]} ];\n    }\n    return \\@new_list;\n}",
    "    my @test_list = @$test_list;\n    my @test_tup = @$test_tup;\n    my @result;\n    for my $i (0 .. $#test_list) {\n        push @result, [@{$test_list[$i]}, @{$test_tup[$i]}];\n    }\n    return \\@result;\n}",
    "    my $test_list_ref = ref($test_list);\n    my $test_tup_ref = ref($test_tup);\n    if ($test_list_ref ne 'ARRAY' || $test_tup_ref ne 'ARRAY') {\n        die \"add_lists: arguments must be arrays\\n\";\n    }\n    my @new_list = @$test_list;\n    push @new_list, @$test_tup;\n    return \\@new_list;\n}",
    "    my @new_list = @$test_list;\n    my @new_tup = @$test_tup;\n    push @new_list, @new_tup;\n    return @new_list;\n}",
    "    my $test_tup_len = scalar @$test_tup;\n    my $test_list_len = scalar @$test_list;\n    for (my $i = 0; $i < $test_tup_len; $i++) {\n        for (my $j = 0; $j < $test_list_len; $j++) {\n            if ($test_tup->[$i] eq $test_list->[$j]) {\n                return 0;\n            }\n        }\n    }\n    push(@$test_list, @$test_tup);\n    return 1;\n}",
    "    my @test_list = @$test_list;\n    my @test_tup = @$test_tup;\n    my @new_list;\n    for my $i (0 .. $#test_list) {\n        push @new_list, [@{$test_list[$i]}, @{$test_tup[$i]}];\n    }\n    return \\@new_list;\n}",
    "    my $test_list_ref = ref($test_list);\n    my $test_tup_ref = ref($test_tup);\n    if ($test_list_ref eq 'ARRAY') {\n        if ($test_tup_ref eq 'ARRAY') {\n            return [@$test_list, @$test_tup];\n        }\n        else {\n            return [@$test_list, $test_tup];\n        }\n    }\n    elsif ($test_tup_ref eq 'ARRAY') {\n        return [$test_list, @$test_tup];\n    }\n    else {\n        return [$test_list, $test_tup];\n    }\n}",
    "    my @test_list = @$test_list;\n    my @test_tup = @$test_tup;\n    my @new_list;\n    for my $i (0 .. $#test_list) {\n        push @new_list, [@{$test_list[$i]}, @{$test_tup[$i]}];\n    }\n    return @new_list;\n}",
    "    my @list = @$test_list;\n    my @tup = @$test_tup;\n    my @new_list;\n    my $i;\n    for ($i = 0; $i < @list; $i++) {\n        push @new_list, $list[$i];\n    }\n    for ($i = 0; $i < @tup; $i++) {\n        push @new_list, $tup[$i];\n    }\n    return @new_list;\n}",
    "    my @test_list = @$test_list;\n    my @test_tup = @$test_tup;\n    my @result = ();\n    my $i = 0;\n    for my $e (@test_list) {\n        push @result, [@$e, $test_tup[$i++]];\n    }\n    return \\@result;\n}",
    "    my @test_list = @$test_list;\n    my @test_tup = @$test_tup;\n    my @test_list_tup = (@test_list, @test_tup);\n    return @test_list_tup;\n}",
    "    my $test_tup_len = scalar @{$test_tup};\n    my $test_list_len = scalar @{$test_list};\n    my $new_list = [];\n    for (my $i = 0; $i < $test_list_len; $i++) {\n        for (my $j = 0; $j < $test_tup_len; $j++) {\n            my $new_tup = [@{$test_list->[$i]}, @{$test_tup->[$j]}];\n            push @{$new_list}, $new_tup;\n        }\n    }\n    return $new_list;\n}",
    "    my @test_list = @$test_list;\n    my @test_tup = @$test_tup;\n    my @result;\n    push @result, @test_list;\n    push @result, @test_tup;\n    return @result;\n}"
  ]
}