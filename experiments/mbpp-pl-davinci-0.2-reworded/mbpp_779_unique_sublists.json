{
  "name": "mbpp_779_unique_sublists",
  "language": "pl",
  "prompt": "# Write a function to count the number of arrays within an array. The function should return a hash, where every array is turned to an array, and the value of the array is the number of its occurrences.\nsub unique_sublists {\n    my($list1) = @_;\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_779_unique_sublists.py",
  "prompt_terminology": "reworded",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_sublists;\n        if(eq_deeply($candidate->([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]),{[1, 3] => 2, [5, 7] => 2, [13, 15, 17] => 1, [9, 11] => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]]),{[\"green\", \"orange\"] => 2, [\"black\"] => 1, [\"white\"] => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 2], [3, 4], [4, 5], [6, 7]]),{[1, 2] => 1, [3, 4] => 1, [4, 5] => 1, [6, 7] => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "completions": [
    "    my %count;\n    foreach my $item (@$list1) {\n        $count{$item}++;\n    }\n    return %count;\n}",
    "    my %uniq;\n    foreach my $sublist (@$list1) {\n        my $key = join(',', @$sublist);\n        $uniq{$key}++;\n    }\n    return %uniq;\n}",
    "    my %hash;\n    foreach my $item (@$list1) {\n        if (ref $item eq 'ARRAY') {\n            $hash{$item}++;\n        }\n    }\n    return \\%hash;\n}",
    "    my %hash = ();\n    my @list = @{$list1};\n    foreach my $item (@list) {\n        my @sublist = @{$item};\n        my $key = join(',', @sublist);\n        if (exists $hash{$key}) {\n            $hash{$key}++;\n        } else {\n            $hash{$key} = 1;\n        }\n    }\n    return %hash;\n}",
    "    my %hash;\n    foreach my $item (@$list1) {\n        if (ref($item) eq 'ARRAY') {\n            $hash{$item}++;\n        }\n    }\n    return \\%hash;\n}",
    "    my %hash;\n    foreach my $item (@$list1) {\n        $hash{$item}++;\n    }\n    return %hash;\n}",
    "    my %hash;\n    foreach my $i (@{$list1}) {\n        if (ref($i) eq 'ARRAY') {\n            $hash{$i}++;\n        }\n    }\n    return %hash;\n}",
    "    my %counts;\n    foreach my $item (@$list1) {\n        my $key = join(',', @$item);\n        $counts{$key}++;\n    }\n    return %counts;\n}",
    "    my %hash;\n    foreach my $sublist (@$list1) {\n        my $key = join(',', @$sublist);\n        $hash{$key}++;\n    }\n    return \\%hash;\n}",
    "    my %hash = ();\n    foreach my $item (@$list1) {\n        my @sorted = sort @$item;\n        my $key = join(',', @sorted);\n        $hash{$key}++;\n    }\n    return %hash;\n}",
    "    my %count;\n    foreach my $item (@$list1) {\n        $count{$item}++;\n    }\n    return %count;\n}",
    "    my %count;\n    foreach my $item (@$list1) {\n        $count{$item}++;\n    }\n    return %count;\n}",
    "    my %count;\n    foreach my $item (@$list1) {\n        if (ref $item eq 'ARRAY') {\n            $count{$item}++;\n        }\n    }\n    return %count;\n}",
    "    my %count;\n    foreach my $item (@$list1) {\n        my @item = @$item;\n        my @sorted_item = sort { $a <=> $b } @item;\n        $count{join(',', @sorted_item)}++;\n    }\n    return \\%count;\n}",
    "    my %hash;\n    foreach my $sublist (@$list1) {\n        my @sublist = @$sublist;\n        my $sublist_string = join(',', @sublist);\n        if (exists($hash{$sublist_string})) {\n            $hash{$sublist_string}++;\n        } else {\n            $hash{$sublist_string} = 1;\n        }\n    }\n    return %hash;\n}",
    "    my %hash;\n    foreach my $item (@$list1) {\n        if (ref($item) eq 'ARRAY') {\n            $hash{join(',', @$item)}++;\n        }\n    }\n    return %hash;\n}",
    "    my %count;\n    foreach my $item (@$list1) {\n        $count{$item}++;\n    }\n    return \\%count;\n}",
    "    my %hash;\n    foreach my $item (@$list1) {\n        my @temp = @$item;\n        my $string = join(',', @temp);\n        $hash{$string}++;\n    }\n    return %hash;\n}",
    "    my %count;\n    foreach my $item (@$list1) {\n        $count{$item}++;\n    }\n    return %count;\n}",
    "    my %hash = ();\n    my @list2 = @$list1;\n    for(my $i = 0; $i < scalar @list2; $i++){\n        my $key = join(\" \", @{$list2[$i]});\n        if(exists $hash{$key}){\n            $hash{$key}++;\n        }\n        else{\n            $hash{$key} = 1;\n        }\n    }\n    return %hash;\n}"
  ]
}