name: HumanEval_27_flip_case
language: racket
prompt: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
  \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define (flip_case\
  \ string)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
  \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
  ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
  \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
completions: ["  (define (helper string result)\n    (if (string-empty? string)\n\
    \        result\n        (helper (substring string 0 1) (append result (substring\
    \ string 1 string)))))\n  (helper string '()))\n", "  (define (helper string result)\n\
    \    (if (string-empty? string)\n        result\n        (helper (substring string\
    \ 0 1)\n                (cons (char->string (char string)) result))\n        ))\n\
    \  (helper string '()))\n", "  (cond\n    [(empty? string) string]\n    [(equal?\
    \ (first string) (string-ref string 0)) (string-append (make-string (string-length\
    \ string) (char->string #\\U)) (string-append (make-string (string-length string)\
    \ (char->string #\\l)) (string-append (make-string (string-length string) (char->string\
    \ #\\L)) (string-append (make-string (string-length string) (char->string #\\\
    L)) (string-append (make-string (string-length string) (char->string #\\U)) (string-append\
    \ (make-string (string-length string) (char->string #\\l)) (string-append (make-string\
    \ (string-length string) (char->string #\\L)) (string-append (make-string (string-length\
    \ string) (char->string #\\L)) (string-append (make-string (string-length string)\
    \ (char->string #\\U)) (string-append (make-string (string-length string) (char->string\
    \ #\\l)) (string-append (make-string (string-length string) (char->string #\\\
    L)) (string-append (make-string (string-length string) (char->string #\\L)) (string-append\
    \ (make-string (string-length string) (char->string #\\U)) (string-append (make-string\
    \ (string-length string) (char->string #\\l)) (string-append (make-string (string-length\
    \ string) (char->string #\\L)) (string-append (make-string (string-length string)\
    \ (char->string #\\L)) (string-append (make-string (string-length string) (char->string\
    \ #\\U)) (string-append (make-string (string-length string) (char->string #\\\
    l)) (string-append (make-string (string-length string) (char->string #\\L)) (string-append\
    \ (make-string (string-length string) (char->string #\\L)) (string-append (make-string\
    \ (string-length string) (char->string #\\U)) (string-append (make-string (string-length\
    \ string) (char->string #\\l)) (string-append (make-string (string-length string)\
    \ (char->string #\\L)) (string-append (make-string (string-length string) (char->string\
    \ #\\L)) (string-append (make-string (string-length string) (char->string #\\\
    U)) (string-append (make-string (string-length string) (char->string #\\l)) (string-append\
    \ (make-string (string-length string) (char->string #\\L)) (string-", "  (define\
    \ (helper string result)\n    (cond [(empty? string) result]\n          [(char-lower?\
    \ (car string)) (helper (cdr string) (cons (char-upper? (car string)) result))]\n\
    \          [else (helper (cdr string) (cons (car string) result))]))\n  (helper\
    \ string '()))\n", "  (define (helper string result)\n    (if (string-empty? string)\n\
    \        result\n        (helper (substring string 0 1)\n                (if (char-lower?\
    \ (first string))\n                    (cons (first string) (helper (rest string)\
    \ (cons (first string) result)))\n                    (helper (rest string) (cons\
    \ (first string) result))))))\n  (helper string '()))\n", "  (define (helper string\
    \ result)\n    (if (string-empty? string)\n        result\n        (helper (substring\
    \ string 0 1) (append result (substring string 1 string)))\n      )\n  )\n  (helper\
    \ string '())\n)\n", "  (define (helper string result)\n    (if (string-empty?\
    \ string)\n        result\n        (helper (substring string 0 1)\n          \
    \      (cons (char->string (char->integer char->char (char->integer char->char\
    \ (char->integer string))))\n                      result)))\n  (helper string\
    \ '()))\n", "  (define (helper string index result)\n    (cond [(< index 0) result]\n\
    \          [(char=? (char-code string) (char-code (char-code (substring string\
    \ 0 index)))) (string-append result (char->string (char->char (char-code (char-code\
    \ (substring string 0 index))))))]\n          [(char=? (char-code string) (char-code\
    \ (char-code (substring string index 1)))) (string-append result (char->string\
    \ (char->char (char-code (char-code (substring string index 1))))))]\n       \
    \   [else (helper (substring string 0 index) (substring string index 1) result)]))\n\
    \  (helper string 0 \"\"))\n", "  (define (helper char acc)\n    (cond ((char=?\
    \ char #\\a) (char-upper-case char))\n          ((char=? char #\\A) (char-lower-case\
    \ char))\n          ((char=? char #\\z) (char-upper-case char))\n          ((char=?\
    \ char #\\Z) (char-lower-case char))\n          ((char=? char #\\0) (cons char\
    \ acc))\n          ((char=? char #\\9) (cons char (helper #\\9 acc)))\n      \
    \    (else (helper char acc))))\n  (helper string '()))\n", "  (define (helper\
    \ string result)\n    (cond [(empty? string) result]\n          [(char-lower?\
    \ (car string)) (helper (cdr string) (cons (char-upper? (car string)) result))]\n\
    \          [else (helper (cdr string) (cons (car string) result))]))\n  (helper\
    \ string '()))\n", "  (define (helper string result)\n    (if (string-empty? string)\n\
    \        result\n        (helper (substring string 0 1)\n                (cons\
    \ (char->upper-case (first string))\n                      result)))\n    (helper\
    \ (substring string 1 string-length (first string))\n            '())))\n", " \
    \ (define (helper string result)\n    (if (string-empty? string)\n        result\n\
    \        (helper (substring string 0 1) (append result (substring string 1 string)))))\n\
    \  (helper string '()))\n", "  (define (helper string result)\n    (if (string-empty?\
    \ string)\n        result\n        (helper (substring string 0 1)\n          \
    \      (cons (char->upper-case (first string))\n                      (helper\
    \ (substring string 1 length) result))))))\n  (helper string '()))\n", "  (define\
    \ (helper string result)\n    (cond [(empty? string) result]\n          [else\
    \ (helper (cdr string) (append result (list \n                               \
    \                   (if (char-lower? (car string))\n                         \
    \                             (char-upper? (car string))\n                   \
    \                                   (char-lower? (car string))))))]\n        \
    \  [else (helper (cdr string) result)]))\n  (helper string '()))\n", "  (define\
    \ (helper string result)\n    (if (string-empty? string)\n        result\n   \
    \     (helper (substring string 0 1) (append result (string-append (substring\
    \ string 0 1) (substring string 1 string)))\n               (helper (substring\
    \ string 1 string) result (substring string 0 1)))))\n  (helper string '()))\n",
  "  (define (helper string result)\n    (if (string-empty? string)\n        result\n\
    \        (helper (substring string 0 1)\n                (cons (char->upper-case\
    \ (first string))\n                      result))\n        ))\n  (helper string\
    \ '()))\n", "  (define (helper string result)\n    (if (string-empty? string)\n\
    \        result\n        (helper (substring string 0 1)\n                (cons\
    \ (char->upper-case (first string))\n                      result)))\n    (helper\
    \ (substring string 1 string-length (first string))\n            (cons (char->lower-case\
    \ (first string))\n                  result)))\n  (helper string '()))\n", " \
    \ (define (helper string result)\n    (if (string-empty? string)\n        result\n\
    \        (helper (substring string 0 1)\n                (cons (char->upper-case\
    \ (first string))\n                      result))\n        ))\n  (helper string\
    \ '()))\n", "  (define (helper string result)\n    (cond\n      [(empty? string)\
    \ result]\n      [(char-lower? (car string)) (helper (cdr string) (cons (char-upper?\
    \ (car string)) result))]\n      [(char-upper? (car string)) (helper (cdr string)\
    \ (cons (char-lower? (car string)) result))]\n      [else (helper (cdr string)\
    \ result)]\n      ))\n  (helper string '()))\n", "  (cond\n    ((empty? string)\
    \ string)\n    ((char-lower? (car string)) (string-append (char-upcase (car string))\
    \ (string-reverse (string-tail (cdr string))))\n     (flip_case (string-tail (cdr\
    \ string))))\n    ((char-upper? (car string)) (string-append (char-downcase (car\
    \ string)) (string-reverse (string-tail (cdr string))))\n     (flip_case (string-tail\
    \ (cdr string))))\n    (else (string-append (car string) (string-reverse (string-tail\
    \ (cdr string)))))\n  )\n)\n", "  (define (helper string result)\n    (if (string-empty?\
    \ string)\n        result\n        (helper (substring string 0 1)\n          \
    \      (cons (char->upper-case (car string))\n                      result))\n\
    \        ))\n  (helper string '()))\n", "  (define (helper string result)\n  \
    \  (if (string-empty? string)\n        result\n        (helper (substring string\
    \ 0 1)\n                (cons (char->upper-case\n                       (char->lower-case\
    \ (first string)))\n                      result)))\n    (helper (substring string\
    \ 1 string-length(string))\n            '()))\n  (helper string '()))\n", "  (define\
    \ (helper string index result)\n    (cond [(< index 0) result]\n          [(char=?\
    \ (char-code string) (char-code (char-code (substring string 0 index)))) (string-append\
    \ result (char-code (char-code (substring string 0 index))))]\n          [else\
    \ (helper (substring string index) (- index 1) (helper (substring string index)\
    \ (- index 1) result))]\n          ))\n  (helper string 0 (string-append string\
    \ 'a')))\n", "  (define (helper string result)\n    (if (string-empty? string)\n\
    \        result\n        (helper (substring string 0 1)\n                (cons\
    \ (char->upper-case (car string))\n                      result))\n        ))\n\
    \  (helper string '()))\n", "  (cond\n    [(string-empty? string) string]\n  \
    \  [(equal? (char-code (car string)) #\\a) (char->string #\\A)]\n    [(equal?\
    \ (char-code (car string)) #\\e) (char->string #\\E)]\n    [(equal? (char-code\
    \ (car string)) #\\i) (char->string #\\I)]\n    [(equal? (char-code (car string))\
    \ #\\o) (char->string #\\O)]\n    [(equal? (char-code (car string)) #\\u) (char->string\
    \ #\\U)]\n    [(equal? (char-code (car string)) #\\y) (char->string #\\Y)]\n \
    \   [else (string-append (string->chars (char->string #\\A) string) (string->chars\
    \ (char->string #\\U) string))]))\n", "  (define (helper string result)\n    (cond\
    \ [(empty? string) result]\n          [(char->boolean (char->integer string))\
    \ (helper (cdr string) (char->string result))]\n          [(char->boolean (char->integer\
    \ string)) (helper (cdr string) (char->string result))]\n          [else (helper\
    \ (cdr string) (char->string result))]))\n  (helper string '()))\n", "  (define\
    \ (helper string result)\n    (if (string-empty? string)\n        result\n   \
    \     (helper (substring string 0 1) (append result (substring string 1 string)))))\n\
    \  (helper string '()))\n", "  (define (helper string result)\n    (if (string-empty?\
    \ string)\n        result\n        (helper (substring string 0 1)\n          \
    \      (cons (char->upper-case (first string))\n                      (helper\
    \ (substring string 1 string) (cons (char->lower-case (first string)) result))))))\n\
    \  (helper string '()))\n", "  (define (helper string result)\n    (if (empty?\
    \ string)\n        result\n        (helper (cdr string) (cons (char->upper-case\n\
    \                                     (char->lower-case (car string))) result))))\n\
    \  (helper string '()))\n", "  (define (helper string result)\n    (if (string-empty?\
    \ string)\n        result\n        (helper (substring string 0 1) (append result\
    \ (substring string 1)))\n      )\n  )\n  (helper string '())\n)\n", "  (cond\n\
    \    [(empty? string) string]\n    [(equal? (first string) (string-ref string\
    \ 0)) (string-append (string-ref string 0) (string-ref string 1))]\n    [else\
    \ (string-append (string-ref string 0) (string-ref string 1))]\n  )\n)\n", " \
    \ (cond\n    [(empty? string) string]\n    [(equal? (first string) (string-ref\
    \ string 0)) (string-append (string-ref string 0) (string-ref string 1))]\n  \
    \  [else (string-append (string-ref string 0) (string-ref string 1))]))\n", " \
    \ (cond\n    [(empty? string) string]\n    [(equal? (first string) (string-ref\
    \ string 0)) (string-append (make-string (string-length string) (char->string\
    \ #\\U)) (string-append (make-string (string-length string) (char->string #\\\
    l)) (string-append (make-string (string-length string) (char->string #\\L)) (string-append\
    \ (make-string (string-length string) (char->string #\\U)) (string-append (make-string\
    \ (string-length string) (char->string #\\l)) (string-append (make-string (string-length\
    \ string) (char->string #\\L)) (string-append (make-string (string-length string)\
    \ (char->string #\\U)) (string-append (make-string (string-length string) (char->string\
    \ #\\l)) (string-append (make-string (string-length string) (char->string #\\\
    L)) (string-append (make-string (string-length string) (char->string #\\U)) (string-append\
    \ (make-string (string-length string) (char->string #\\l)) (string-append (make-string\
    \ (string-length string) (char->string #\\L)) (string-append (make-string (string-length\
    \ string) (char->string #\\U)) (string-append (make-string (string-length string)\
    \ (char->string #\\l)) (string-append (make-string (string-length string) (char->string\
    \ #\\L)) (string-append (make-string (string-length string) (char->string #\\\
    U)) (string-append (make-string (string-length string) (char->string #\\l)) (string-append\
    \ (make-string (string-length string) (char->string #\\L)) (string-append (make-string\
    \ (string-length string) (char->string #\\U)) (string-append (make-string (string-length\
    \ string) (char->string #\\l)) (string-append (make-string (string-length string)\
    \ (char->string #\\L)) (string-append (make-string (string-length string) (char->string\
    \ #\\U)) (string-append (make-string (string-length string) (char->string #\\\
    l)) (string-append (make-string (string-length string) (char->string #\\L)) (string-append\
    \ (make-string (string-length string) (char->string #\\U)) (string-append (make-string\
    \ (string-length string) (char->string #\\l)) (string-append (make-string (string-length\
    \ string) (char->string #\\L)) (string-", "  (define (helper string index result)\n\
    \    (cond\n      [(empty? string) result]\n      [(char-lower? (car string))\
    \ (helper (cdr string) (+ index 1) (append result (list char-upper? (car string))))]\n\
    \      [(char-upper? (car string)) (helper (cdr string) (+ index 1) (append result\
    \ (list char-lower? (car string))))]\n      [else (helper (cdr string) (+ index\
    \ 1) result)]))\n  (helper string 0 '()))\n", "  (cond\n    [(empty? string) string]\n\
    \    [(equal? (first string) (string-ref string 0)) (string-append (make-string\
    \ (string-length string) (char->string #\\U)) (string-append (make-string (string-length\
    \ string) (char->string #\\l)) (string-append (make-string (string-length string)\
    \ (char->string #\\u)) (string-append (make-string (string-length string) (char->string\
    \ #\\L)) (string-append (make-string (string-length string) (char->string #\\\
    L)) (string-append (make-string (string-length string) (char->string #\\u)) (string-append\
    \ (make-string (string-length string) (char->string #\\U)) (string-append (make-string\
    \ (string-length string) (char->string #\\l)) (string-append (make-string (string-length\
    \ string) (char->string #\\u)) (string-append (make-string (string-length string)\
    \ (char->string #\\L)) (string-append (make-string (string-length string) (char->string\
    \ #\\L)) (string-append (make-string (string-length string) (char->string #\\\
    u)) (string-append (make-string (string-length string) (char->string #\\U)) (string-append\
    \ (make-string (string-length string) (char->string #\\l)) (string-append (make-string\
    \ (string-length string) (char->string #\\u)) (string-append (make-string (string-length\
    \ string) (char->string #\\L)) (string-append (make-string (string-length string)\
    \ (char->string #\\L)) (string-append (make-string (string-length string) (char->string\
    \ #\\u)) (string-append (make-string (string-length string) (char->string #\\\
    U)) (string-append (make-string (string-length string) (char->string #\\l)) (string-append\
    \ (make-string (string-length string) (char->string #\\u)) (string-append (make-string\
    \ (string-length string) (char->string #\\L)) (string-append (make-string (string-length\
    \ string) (char->string #\\L)) (string-append (make-string (string-length string)\
    \ (char->string #\\u)) (string-append (make-string (string-length string) (char->string\
    \ #\\U)) (string-append (make-string (string-length string) (char->string #\\\
    l)) (string-append (make-string (string-length string) (char->string #\\u)) (string-append\
    \ (make-string (string-length string) (", "  (define (helper string index result)\n\
    \    (cond\n      [(empty? string) result]\n      [(char=? (car string) (car (cdr\
    \ string))) (helper (cdr string) (+ index 1) (cons (car string) result))]\n  \
    \    [else (helper (cdr string) (+ index 1) result)]))\n  (helper (reverse string)\
    \ 0 '()))\n", "  (define (helper string result)\n    (if (string-empty? string)\n\
    \        result\n        (helper (substring string 0 1) (append result (substring\
    \ string 1 string)))))\n  (helper string '()))\n", "  (define (helper string index\
    \ result)\n    (cond [(< index 0) result]\n          [(char=? (char-code string)\
    \ (char-code (char-code (substring string 0 index)))) (helper (substring string\
    \ (1+ index)) (+ index 1) (append result (substring string index)))]\n       \
    \   [else (helper (substring string (1+ index)) (+ index 1) result)]\n       \
    \   ))\n  (helper string 0 '()))\n", "  (define (helper string result)\n    (if\
    \ (string-empty? string)\n        result\n        (helper (substring string 0\
    \ 1)\n                (cons (char->upper-case\n                       (char->lower-case\
    \ (first string)))\n                      result))))\n  (helper string '()))\n",
  "  (cond\n    [(empty? string) string]\n    [(equal? (first string) (string-ref\
    \ string 0)) (string-append (make-string (string-length string) (char->string\
    \ #\\U)) (string-reverse (substring (second string) 1)))]\n    [else (string-append\
    \ (make-string (string-length string) (char->string #\\L)) (string-reverse (substring\
    \ (second string) 1)))]))\n", "  (define (helper string result)\n    (if (string-empty?\
    \ string)\n        result\n        (helper (substring string 0 1) (append result\
    \ (substring string 1 string)))))\n  (helper string '()))\n", "  (cond\n    [(empty?\
    \ string) string]\n    [(equal? (first string) (string-ref string 0)) (string-append\
    \ (make-string (string-length string) (char->string #\\U)) (string-append (make-string\
    \ (string-length string) (char->string #\\L)) (string-append (make-string (string-length\
    \ string) (char->string #\\l)) (string-append (make-string (string-length string)\
    \ (char->string #\\u)) (string-append (make-string (string-length string) (char->string\
    \ #\\U)) (string-append (make-string (string-length string) (char->string #\\\
    l)) (string-append (make-string (string-length string) (char->string #\\u)) (string-append\
    \ (make-string (string-length string) (char->string #\\l)) (string-append (make-string\
    \ (string-length string) (char->string #\\u)) (string-append (make-string (string-length\
    \ string) (char->string #\\L)) (string-append (make-string (string-length string)\
    \ (char->string #\\l)) (string-append (make-string (string-length string) (char->string\
    \ #\\u)) (string-append (make-string (string-length string) (char->string #\\\
    U)) (string-append (make-string (string-length string) (char->string #\\l)) (string-append\
    \ (make-string (string-length string) (char->string #\\u)) (string-append (make-string\
    \ (string-length string) (char->string #\\L)) (string-append (make-string (string-length\
    \ string) (char->string #\\l)) (string-append (make-string (string-length string)\
    \ (char->string #\\u)) (string-append (make-string (string-length string) (char->string\
    \ #\\U)) (string-append (make-string (string-length string) (char->string #\\\
    L)) (string-append (make-string (string-length string) (char->string #\\l)) (string-append\
    \ (make-string (string-length string) (char->string #\\u)) (string-append (make-string\
    \ (string-length string) (char->string #\\L))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
  "  (define (helper string result)\n    (if (string-empty? string)\n        result\n\
    \        (helper (substring string 0 1)\n                (cons (char->upper-case\
    \ (first string))\n                       (helper (substring string 1 length)\
    \ result))))))\n  (helper string '()))\n", "  (define (helper string result)\n\
    \    (if (string-empty? string)\n        result\n        (helper (substring string\
    \ 0 1)\n                (cons (char->upper-case (first string))\n            \
    \          result)))\n    (helper (substring string 1 string-length (first string))\n\
    \            (cons (char->lower-case (first string))\n                  result)))\n\
    \  (helper string '()))\n", "  (define (helper string result)\n    (if (string-empty?\
    \ string)\n        result\n        (helper (substring string 0 1)\n          \
    \      (cond [(char=? (char-code string) 97) (char-code string) (char-code string)\n\
    \                       (char=? (char-code string) 65) (char-code string) (char-code\
    \ string)\n                       (char=? (char-code string) 97) (char-code string)\
    \ (char-code string)\n                       (char=? (char-code string) 65) (char-code\
    \ string) (char-code string)\n                       (char=? (char-code string)\
    \ 97) (char-code string) (char-code string)\n                       (char=? (char-code\
    \ string) 65) (char-code string) (char-code string)\n                       (char=?\
    \ (char-code string) 97) (char-code string) (char-code string)\n             \
    \          (char=? (char-code string) 65) (char-code string) (char-code string)\n\
    \                       (char=? (char-code string) 97) (char-code string) (char-code\
    \ string)\n                       (char=? (char-code string) 65) (char-code string)\
    \ (char-code string)\n                       (char=? (char-code string) 97) (char-code\
    \ string) (char-code string)\n                       (char=? (char-code string)\
    \ 65) (char-code string) (char-code string)\n                       (char=? (char-code\
    \ string) 97) (char-code string) (char-code string)\n                       (char=?\
    \ (char-code string) 65) (char-code string) (char-code string)\n             \
    \          (char=? (char-code string) 97) (char-code string) (char-code string)\n\
    \                       (char=? (char-code string) 65) (char-code string) (char-code\
    \ string)\n                       (char=? (char-code string) 97) (char-code string)\
    \ (char-code string)\n                       (char=? (char-code string) 65) (char-code\
    \ string) (char-code string)\n                       (char=? (char-code string)\
    \ 97) (char-code string) (char-code string)\n                       (char=? (char-code\
    \ string) 65) (char-code string) (char-code string)\n                       (char=?\
    \ (char-code string) 97) (char-code string) (char-code string)\n             \
    \          (char=? (char-code string) 65) (char-code string) (char-code string)\n\
    \                      ", "  (define (helper string result)\n    (if (string-empty?\
    \ string)\n        result\n        (helper (substring string 0 1)\n          \
    \      (cons (char->upper-case\n                       (char->lower-case (first\
    \ string)))\n                      result)))\n    (helper (substring string 1\
    \ string-length) '())))\n", "  (define (helper string index result)\n    (cond\
    \ [(< index 0) result]\n          [(char=? (char-code string) (char-code (char-code\
    \ (substring string 0 index)))) (string-append result (char->string (char->char\
    \ (char-code (char-code (substring string 0 index))))))]\n          [(char=? (char-code\
    \ string) (char-code (char-code (substring string index index)))) (string-append\
    \ result (char->string (char->char (char-code (char-code (substring string index\
    \ index))))))]\n          [(char=? (char-code string) (char-code (char-code (substring\
    \ string index (+ index 1)))))\n           (helper (substring string 0 index)\
    \ index (string-append result (char->string (char->char (char-code (char-code\
    \ (substring string 0 index)))))))]\n          [else (string-append result (char->string\
    \ (char->char (char-code (char-code (substring string index (+ index 1))))))]))\n\
    \  (helper string 0 (string-append string (char->string (char->char (char-code\
    \ (char-code string)))))) ))\n", "  (define (helper string result)\n    (if (string-empty?\
    \ string)\n        result\n        (helper (substring string 0 1)\n          \
    \      (cons (char->upper-case\n                       (char->lower-case (first\
    \ string)))\n                      result)))\n    (helper (substring string 1\
    \ string-length) '())))\n", "  (cond\n    [(empty? string) string]\n    [(equal?\
    \ (first string) (string-ref string 0)) (string-append (string-ref string 0) (string-ref\
    \ string 1))]\n    [else (string-append (string-ref string 0) (string-ref string\
    \ 1))]\n  )\n)\n", "  (define (helper string result)\n    (cond\n      [(empty?\
    \ string) result]\n      [(char-lower? (car string)) (helper (cdr string) (cons\
    \ (char-upper? (car string)) result))]\n      [(char-upper? (car string)) (helper\
    \ (cdr string) (cons (char-lower? (car string)) result))]\n      [else (helper\
    \ (cdr string) result)]))\n  (helper string '()))\n", "  (define (helper string\
    \ result)\n    (if (string-empty? string)\n        result\n        (helper (substring\
    \ string 0 1)\n                (cond [(char=? (first string) (char-code (char-downcase\
    \ (first string)))) #(cons #(char-upcase (first string)) result)]\n          \
    \            [(char=? (first string) (char-code (char-upcase (first string))))\
    \ #(cons #(char-downcase (first string)) result)]\n                      [else\
    \ (cons string result)])))\n  (helper string '()))\n", "  (define (helper string\
    \ result)\n    (if (string-empty? string)\n        result\n        (helper (substring\
    \ string 0 1)\n                (cons (char->upper-case\n                     \
    \  (char->lower-case (string-ref string 0))))\n                (helper (substring\
    \ string 1 string-length)))))\n  (helper string '()))\n", "  (define (helper string\
    \ result)\n    (if (string-empty? string)\n        result\n        (helper (substring\
    \ string 0 1)\n                (cons (char->upper-case\n                     \
    \  (char->lower-case (first string)))\n                      result)))\n    (helper\
    \ (substring string 1 string-length) '())))\n", "  (define (helper string result)\n\
    \    (if (string-empty? string)\n        result\n        (helper (substring string\
    \ 0 1)\n                (if (char-lower? (first string))\n                   \
    \ (cons (first string) (helper (rest string) (cons (first string) result)))\n\
    \                    (cons (first string) result))))))\n  (helper string '()))\n",
  "  (define (helper string result)\n    (if (string-empty? string)\n        result\n\
    \        (helper (substring string 0 1)\n                (cons (char->upper-case\
    \ (first string))\n                      result)))\n    (helper (substring string\
    \ 1 string-length (first string))\n            (cons (char->lower-case (first\
    \ string))\n                  result)))\n  (helper string '()))\n", "  (define\
    \ (helper char acc)\n    (cond [(char=? char #\\A) (cons char acc)]\n        \
    \  [(char=? char #\\Z) (cons char acc)]\n          [(char=? char #\\a) (cons char\
    \ (append #\\A acc))]\n          [(char=? char #\\z) (cons char (append #\\Z acc))]\n\
    \          [(char=? char #\\A) (cons char (append #\\A acc))]\n          [(char=?\
    \ char #\\Z) (cons char (append #\\Z acc))]\n          [(char=? char #\\a) (cons\
    \ char (append #\\A acc))]\n          [(char=? char #\\z) (cons char (append #\\\
    Z acc))]\n          [(char=? char #\\A) (cons char (append #\\A acc))]\n     \
    \     [(char=? char #\\Z) (cons char (append #\\Z acc))]\n          [(char=? char\
    \ #\\a) (cons char (append #\\A acc))]\n          [(char=? char #\\z) (cons char\
    \ (append #\\Z acc))]\n          [(char=? char #\\A) (cons char (append #\\A acc))]\n\
    \          [(char=? char #\\Z) (cons char (append #\\Z acc))]\n          [(char=?\
    \ char #\\a) (cons char (append #\\A acc))]\n          [(char=? char #\\z) (cons\
    \ char (append #\\Z acc))]\n          [(char=? char #\\A) (cons char (append #\\\
    A acc))]\n          [(char=? char #\\Z) (cons char (append #\\Z acc))]\n     \
    \     [(char=? char #\\a) (cons char (append #\\A acc))]\n          [(char=? char\
    \ #\\z) (cons char (append #\\Z acc))]\n          [(char=? char #\\A) (cons char\
    \ (append #\\A acc))]\n          [(char=? char #\\Z) (cons char (append #\\Z acc))]\n\
    \          [(char=? char #\\a) (cons char (append #\\A acc))]\n          [(char=?\
    \ char #\\z) (cons char (append #\\Z acc))]\n          [(char=? char #\\", " \
    \ (define (helper string index result)\n    (if (char=? string #\\A)\n       \
    \ (helper (substring string 0 index) #\\A result)\n        (helper (substring\
    \ string index (length string)) #\\A result)))\n  (helper string 0 (make-string\
    \ (string-length string) ?A)))\n", "  (define (helper string result)\n    (if\
    \ (string-empty? string)\n        result\n        (helper (substring string 0\
    \ 1) (append result (substring string 1 string)))))\n  (helper string '()))\n",
  "  (define (helper string result)\n    (if (string-empty? string)\n        result\n\
    \        (helper (substring string 0 1)\n                (cons (char->upper-case\
    \ (car string))\n                      result))\n        ))\n  (helper string\
    \ '()))\n", "  (define (helper char acc)\n    (cond\n      [(char-lower-case?\
    \ char) (cons char (helper (char-upper-case? char) acc))]\n      [(char-upper-case?\
    \ char) (cons char (helper (char-lower-case? char) acc))]\n      [else (cons char\
    \ acc)])\n    (helper string '()))\n  (helper string '()))\n", "  (define (helper\
    \ string result)\n    (if (string-empty? string)\n        result\n        (helper\
    \ (substring string 0 1)\n                (cons (char->upper-case (first string))\n\
    \                      result)))\n    (helper (substring string 1 string-length)\
    \ '())))\n  (foldr helper string '()))\n", "  (define (helper string result)\n\
    \    (if (string-empty? string)\n        result\n        (helper (substring string\
    \ 0 1) (append result (substring string 1 string)))))\n  (helper string '()))\n",
  "  (define (helper char acc)\n    (if (char? char)\n        (helper (char->string\
    \ char) acc)\n        (char->string char)))\n  (helper string '()))\n", "  (cond\n\
    \    [(string-empty? string) string]\n    [(equal? (char-code (car string)) #\\\
    A) (upper-case-char (char-code (car string)))]\n    [else (cons (char-code (car\
    \ string)) (flip_case (string-cdr string)))]))\n", "  (cond\n    [(empty? string)\
    \ string]\n    [(equal? (first string) (string-ref string 0)) (string-append (make-string\
    \ (string-length string) (char->string #\\U)) (string-append (make-string (string-length\
    \ string) (char->string #\\L)) (string-append (make-string (string-length string)\
    \ (char->string #\\l)) (string-append (make-string (string-length string) (char->string\
    \ #\\u)) (string-append (make-string (string-length string) (char->string #\\\
    L)) (string-append (make-string (string-length string) (char->string #\\u)) (string-append\
    \ (make-string (string-length string) (char->string #\\L)) (string-append (make-string\
    \ (string-length string) (char->string #\\u)) (string-append (make-string (string-length\
    \ string) (char->string #\\L)) (string-append (make-string (string-length string)\
    \ (char->string #\\u)) (string-append (make-string (string-length string) (char->string\
    \ #\\L)) (string-append (make-string (string-length string) (char->string #\\\
    u)) (string-append (make-string (string-length string) (char->string #\\L)) (string-append\
    \ (make-string (string-length string) (char->string #\\u)) (string-append (make-string\
    \ (string-length string) (char->string #\\L)) (string-append (make-string (string-length\
    \ string) (char->string #\\u)) (string-append (make-string (string-length string)\
    \ (char->string #\\L)) (string-append (make-string (string-length string) (char->string\
    \ #\\u)) (string-append (make-string (string-length string) (char->string #\\\
    L)) (string-append (make-string (string-length string) (char->string #\\u)) (string-append\
    \ (make-string (string-length string) (char->string #\\L)) (string-append (make-string\
    \ (string-length string) (char->string #\\u)) (string-append (make-string (string-length\
    \ string) (char->string #\\L)) (string-append (make-string (string-length string)\
    \ (char->string #\\u)) (string-append (make-string (string-length string) (char->string\
    \ #\\L)) (string-append (make-string (string-length string) (char->string #\\\
    u)) (string-append (make-string (string-length string) (char->string #\\L)) (string-append\
    \ (make-string (string-length string) (char->string ", "  (define (helper string\
    \ result)\n    (if (string-empty? string)\n        result\n        (helper (substring\
    \ string 0 1)\n                (if (char-lower? (first string))\n            \
    \        (cons (first string) (second string))\n                    (cons (second\
    \ string) (first string))))))\n  (helper string '()))\n", "  (define (helper string\
    \ result)\n    (if (string-empty? string)\n        result\n        (helper (substring\
    \ string 0 1) (append result (substring string 1 string)))))\n  (helper string\
    \ '()))\n", "  (define (helper string result)\n    (cond\n      [(empty? string)\
    \ result]\n      [(char-lower? (car string)) (helper (cdr string) (cons (char-upper?\
    \ (car string)) result))]\n      [(char-upper? (car string)) (helper (cdr string)\
    \ (cons (char-lower? (car string)) result))]\n      [else (helper (cdr string)\
    \ result)]\n      ))\n  (helper string '()))\n", "  (cond\n    [(string-empty?\
    \ string) string]\n    [(equal? (char-code (car string)) #\\a) (char->string #\\\
    A)]\n    [(equal? (char-code (car string)) #\\z) (char->string #\\Z)]\n    [(equal?\
    \ (char-code (car string)) #\\A) (char->string #\\a)]\n    [(equal? (char-code\
    \ (car string)) #\\Z) (char->string #\\z)]\n    [else (string-append (string->chars\
    \ (char->string #\\A) (string->chars (char->string #\\Z) (string->chars (char->string\
    \ #\\a) (string->chars (char->string #\\z) string))))]))\n", "  (define (helper\
    \ string)\n    (cond\n      [(empty? string) string]\n      [(char-lower? (car\
    \ string)) (char-upcase (car string))]\n      [(char-upper? (car string)) (char-downcase\
    \ (car string))]\n      [else (helper (cdr string))]))\n  (helper string))\n",
  "  (define (helper string result)\n    (if (string-empty? string)\n        result\n\
    \        (helper (substring string 0 1) (append result (substring string 1 string)))))\n\
    \  (helper string '()))\n", "  (define (helper char result)\n    (if (char? char)\n\
    \        (helper (char->string! char) (char->string! result))\n        (helper\
    \ (string->char! char) (char->string! result))))\n  (helper (string->char! string)\
    \ \"\"))\n</cell>\n<cell>\n#lang racket\n", "  (cond\n    [(empty? string) string]\n\
    \    [(equal? (first string) (string-ref string 0)) (string-append (string-ref\
    \ string 0) (string-ref string 1))]\n    [else (string-append (string-ref string\
    \ 0) (string-ref string 1))]))\n", "  (cond [(string? string) (map #(if (char-lower?\
    \ %) #(upper-case %) #(lower-case %)) string)]\n        [else string]))\n", " \
    \ (cond\n    [(empty? string) string]\n    [(equal? (first string) (string-ref\
    \ string 0)) (string-append (make-string (string-length string) (char->string\
    \ #\\U)) (rest string))]\n    [else (string-append (make-string (string-length\
    \ string) (char->string #\\L)) (rest string))]))\n", "  (cond\n    [(empty? string)\
    \ string]\n    [(equal? (first string) (string-ref string 0)) (string-append (make-string\
    \ (string-length string) (char->string #\\U) (substring (second string) 1)))]\n\
    \    [else (string-append (make-string (string-length string) (char->string #\\\
    L) (substring (second string) 1)))]))\n", "  (define (helper string result)\n\
    \    (if (string-empty? string)\n        result\n        (helper (substring string\
    \ 0 1)\n                (cons (char->upper-case (first string))\n            \
    \          result)))\n    (helper (substring string 1 string-length (first string))\n\
    \            (cons (char->lower-case (first string))\n                  result)))\n\
    \  (helper string '()))\n", "  (define (helper string result)\n    (if (string-empty?\
    \ string)\n        result\n        (helper (substring string 0 1) (append result\
    \ (substring string 1 string)))))\n  (helper string '()))\n", "  (define (helper\
    \ string result)\n    (if (string-empty? string)\n        result\n        (helper\
    \ (substring string 0 1)\n                (cons (char->upper-case\n          \
    \             (char->lower-case (string-ref string 0))))\n                (cons\
    \ (char->lower-case\n                       (char->upper-case (string-ref string\
    \ 0)))))))\n  (helper string '()))\n", "  (define (helper string result)\n   \
    \ (if (string-empty? string)\n        result\n        (helper (substring string\
    \ 0 1)\n                (if (char-lower-case? string)\n                    (concat\
    \ result (substring string 1 -1))\n                    (concat result (substring\
    \ string 0 -1))))))\n  (helper string \"\"))\n</cell>\n<cell>\n#lang racket\n",
  "  (define (helper string index result)\n    (cond [(< index 0) result]\n      \
    \    [(char=? (char-code string) (string-ref string index)) (helper (substring\
    \ string index) (- index 1) (append result (string-ref string index)))]\n    \
    \      [else (helper (substring string index) (+ index 1) result)]))\n  (helper\
    \ string 0 (reverse result)))\n", "  (cond\n    [(empty? string) string]\n   \
    \ [(equal? (first string) (string-ref string 0)) (string-append (make-string (string-length\
    \ string) (char->string #\\U)) (string-reverse (substring (second string) 1)))]\n\
    \    [else (string-append (make-string (string-length string) (char->string #\\\
    L)) (string-reverse (substring (second string) 1)))]))\n", "  (define (helper\
    \ string result)\n    (if (string-empty? string)\n        result\n        (helper\
    \ (substring string 0 1) (append result (substring string 1)))\n      )\n  )\n\
    \  (helper string '())\n)\n", "  (define (helper char result)\n    (cond\n   \
    \   [(char-lower? char) (cons char (helper (char-upper? char) result))]\n    \
    \  [(char-upper? char) (cons char (helper (char-lower? char) result))]\n     \
    \ [else result]))\n  (helper string '()))\n", "  (cond\n    [(empty? string) string]\n\
    \    [(equal? (first string) (string-ref string 0)) (string-append (make-string\
    \ (string-length string) (char->string #\\U)) (rest string))]\n    [else (string-append\
    \ (make-string (string-length string) (char->string #\\L)) (flip_case (rest string)))]))\n",
  "  (define (helper string result)\n    (if (empty? string)\n        result\n   \
    \     (helper (cdr string) (append result (list \n                           \
    \               (if (char-lower? (car string))\n                             \
    \                 (char-upper? (car string))\n                               \
    \               (char-lower? (car string))))))))\n  (helper string '()))\n", " \
    \ (define (helper string result)\n    (if (string-empty? string)\n        result\n\
    \        (helper (substring string 0 1)\n                (cons (char->upper-case\n\
    \                       (char->lower-case\n                         (char->upper-case\n\
    \                           (char->lower-case string)))) result))))\n  (helper\
    \ string '()))\n", "  (define (helper string result)\n    (cond [(empty? string)\
    \ result]\n          [(char-lower? (car string)) (helper (cdr string) (cons (char-upper?\
    \ (car string)) result))]\n          [else (helper (cdr string) (cons (car string)\
    \ result))]))\n  (helper string '()))\n", "  (define (helper string result)\n\
    \    (if (string-empty? string)\n        result\n        (helper (substring string\
    \ 0 1)\n                (cons (char->upper-case (first string))\n            \
    \          (helper (substring string 1 length) result))))))\n  (helper string\
    \ '()))\n", "  (define (helper string result)\n    (if (string-empty? string)\n\
    \        result\n        (helper (substring string 0 1) (append result (string-append\
    \ (substring string 0 1) (substring string 1 string)))\n               (helper\
    \ (substring string 1 string) result (substring string 0 1)))))\n  (helper string\
    \ '()))\n", "  (define (helper string result)\n    (if (string-empty? string)\n\
    \        result\n        (helper (substring string 0 1)\n                (cons\
    \ (char->upper-case\n                       (char->lower-case (first string)))\n\
    \                      result)))\n    (helper (substring string 1 string-length(string))\n\
    \            '()))\n  (helper string '()))\n", "  (define (helper char acc)\n\
    \    (cond ((char? char) (cons char (reverse acc)))\n          ((char=? char #\\\
    A) (cons char (reverse acc)))\n          (else (helper (char->string char) (cons\
    \ char (reverse acc))))))\n  (helper string '()))\n", "  (define (helper string\
    \ result)\n    (if (string-empty? string)\n        result\n        (helper (substring\
    \ string 0 1) (append result (substring string 1 string)))))\n  (helper string\
    \ '()))\n", "  (define (helper string result)\n    (if (string-empty? string)\n\
    \        result\n        (helper (substring string 0 1) (append result (substring\
    \ string 1)))\n      )\n  )\n  (helper string '())\n)\n", "  (define (helper string\
    \ result)\n    (if (string-empty? string)\n        result\n        (helper (substring\
    \ string 0 1) (append result (substring string 1)))\n      )\n    )\n  (helper\
    \ string '())\n)\n", "  (define (helper string result)\n    (if (string-empty?\
    \ string)\n        result\n        (helper (substring string 0 1)\n          \
    \      (cons (char->upper-case (first string))\n                      (helper\
    \ (substring string 1 length) result))))))\n  (helper string '()))\n", "  (define\
    \ (helper string result)\n    (if (string-empty? string)\n        result\n   \
    \     (helper (substring string 0 1) (append result (substring string 1)))\n \
    \     )\n    )\n  (helper string '())\n)\n", "  (define (helper string index result)\n\
    \    (cond\n      [(empty? string) result]\n      [(char-lower? (car string))\
    \ (helper (cdr string) (+ index 1) (cons (char-upper? (car string)) result))]\n\
    \      [(char-upper? (car string)) (helper (cdr string) (+ index 1) (cons (char-lower?\
    \ (car string)) result))]\n      [else (helper (cdr string) (+ index 1) result)]))\n\
    \  (helper string 0 '()))\n", "  (cond\n    [(string-empty? string) string]\n\
    \    [(equal? (char-code (car string)) #\\a) (char-upper-case (car string))]\n\
    \    [(equal? (char-code (car string)) #\\A) (char-lower-case (car string))]\n\
    \    [else (string-append (flip_case (car string)) (string-append (char-upper-case\
    \ (car string)) (flip_case (cdr string))))]))\n", "  (define (helper string result)\n\
    \    (if (string-empty? string)\n        result\n        (helper (substring string\
    \ 0 1) (append result (substring string 1 string)))))\n  (helper string '()))\n",
  "  (define (helper string result)\n    (if (string-empty? string)\n        result\n\
    \        (helper (substring string 0 1)\n                (append result (substring\
    \ string 1 string)))))\n  (helper string '()))\n", "  (cond [(empty? string) string]\n\
    \        [(equal? (first string) (string-ref string 0)) (string-append (string-ref\
    \ string 0) (string-ref string 1))]\n        [else (string-append (string-ref\
    \ string 0) (string-ref string 1))]))\n", "  (define (helper string result)\n\
    \    (if (string-empty? string)\n        result\n        (helper (substring string\
    \ 0 1) (append result (substring string 1 string)))))\n  (helper string '()))\n",
  "  (define (helper string result)\n    (if (empty? string)\n        result\n   \
    \     (helper (cdr string) (cons (char->upper-case\n                         \
    \            (char->lower-case (car string))) result))))\n  (helper string '()))\n",
  "  (define (helper string result)\n    (if (string-empty? string)\n        result\n\
    \        (helper (substring string 0 1)\n                (cons (char->upper-case\
    \ (first string))\n                      (helper (substring string 1 length) result))))))\n\
    \  (helper string '()))\n", "  (define (helper string result)\n    (if (string-empty?\
    \ string)\n        result\n        (helper (substring string 0 1) (append result\
    \ (substring string 1 string)))))\n  (helper string '()))\n", "  (cond\n    [(string-empty?\
    \ string) string]\n    [(equal? (char-code (car string)) #\\a) (upper-case (string-reverse\
    \ string))]\n    [(equal? (char-code (car string)) #\\A) (lower-case (string-reverse\
    \ string))]\n    [else (string-append (string-reverse string) (make-string (char-code\
    \ (car string)) #\\A))]))\n", "  (define (helper char acc)\n    (if (char-upper?\
    \ char)\n        (cons char (reverse acc))\n        (cons char (cons (char-lower?\
    \ char) acc))))\n  (helper string '()))\n", "  (define (helper string result)\n\
    \    (if (string-empty? string)\n        result\n        (helper (substring string\
    \ 0 1) (append result (substring string 1 string)))))\n  (helper string '()))\n",
  "  (cond [(empty? string) string]\n        [(equal? (first string) (string-ref string\
    \ 0)) (string-append (make-string (string-length string) (char->string #\\U) (substring\
    \ (second string) 1)))]\n        [else (string-append (make-string (string-length\
    \ string) (char->string #\\L) (substring (second string) 1)))]))\n", "  (define\
    \ (helper string result)\n    (if (string-empty? string)\n        result\n   \
    \     (helper (substring string 0 1)\n                (cons (char->upper-case\n\
    \                       (char->lower-case (first string)))\n                 \
    \     result)))\n    (helper (substring string 1 string-length) '())))\n", " \
    \ (cond [(empty? string) string]\n        [(equal? (first string) (string-ref\
    \ string 0)) (string-append (string-ref string 0) (string-ref string 1))]\n  \
    \      [else (string-append (string-ref string 0) (string-ref string 1))]))\n",
  "  (define (helper string result)\n    (if (string-empty? string)\n        result\n\
    \        (helper (substring string 0 1)\n                (append result (substring\
    \ string 1 string)))))\n  (helper string '()))\n", "  (cond\n    [(empty? string)\
    \ string]\n    [(equal? (first string) (string-ref string 0)) (string-append (string-ref\
    \ string 0) (string-ref string 1))]\n    [else (string-append (string-ref string\
    \ 0) (string-ref string 1))]\n  ))\n", "  (define (helper string)\n    (if (string-empty?\
    \ string)\n        string\n        (helper (substring string 0 (string->length\
    \ (first string))) (substring string (string->length (first string)) (string->length\
    \ (first string))))))\n  (helper string))\n", "  (define (helper string result)\n\
    \    (cond [(empty? string) result]\n          [(char-lower? (car string)) (helper\
    \ (cdr string) (cons (char-upper? (car string)) result))]\n          [else (helper\
    \ (cdr string) result)]\n          ))\n  (helper string '()))\n", "  (define (helper\
    \ string result)\n    (if (string-empty? string)\n        result\n        (helper\
    \ (substring string 0 1)\n                (cons (char->upper-case (first string))\n\
    \                      result)))))\n  (helper string '()))\n", "  (define (helper\
    \ string result)\n    (if (string-empty? string)\n        result\n        (helper\
    \ (substring string 0 1)\n                (cons (char->upper-case\n          \
    \             (char->lower-case\n                         (char->upper-case\n\
    \                           (char->lower-case string)))) result)))\n  (helper\
    \ string '()))\n", "  (define (helper string result)\n    (if (string-empty? string)\n\
    \        result\n        (helper (substring string 0 1) (append result (substring\
    \ string 1 string)))))\n  (helper string '()))\n", "  (cond\n    [(empty? string)\
    \ string]\n    [(equal? (first string) (string-ref string 0)) (string-append (make-string\
    \ (string-length string) (char->string #\\U)) (string-append (make-string (string-length\
    \ string) (char->string #\\l)) (string-append (make-string (string-length string)\
    \ (char->string #\\L)) (string-append (make-string (string-length string) (char->string\
    \ #\\u)) (string-append (make-string (string-length string) (char->string #\\\
    L)) (string-append (make-string (string-length string) (char->string #\\l)) (string-append\
    \ (make-string (string-length string) (char->string #\\u)) (string-append (make-string\
    \ (string-length string) (char->string #\\U)) (string-append (make-string (string-length\
    \ string) (char->string #\\l)) (string-append (make-string (string-length string)\
    \ (char->string #\\u)) (string-append (make-string (string-length string) (char->string\
    \ #\\U)) (string-append (make-string (string-length string) (char->string #\\\
    u)) (string-append (make-string (string-length string) (char->string #\\l)) (string-append\
    \ (make-string (string-length string) (char->string #\\u))))))))]\n    [else (string-append\
    \ (make-string (string-length string) (char->string #\\l)) (string-append (make-string\
    \ (string-length string) (char->string #\\u)) (string-append (make-string (string-length\
    \ string) (char->string #\\U)) (string-append (make-string (string-length string)\
    \ (char->string #\\u)) (string-append (make-string (string-length string) (char->string\
    \ #\\l)) (string-append (make-string (string-length string) (char->string #\\\
    u)) (string-append (make-string (string-length string) (char->string #\\U)) (string-append\
    \ (make-string (string-length string) (char->string #\\u)) (string-append (make-string\
    \ (string-length string) (char->string #\\l)) (string-append (make-string (string-length\
    \ string) (char->string #\\u))))))))]\n  )\n)\n", "  (define (helper string result)\n\
    \    (if (string-empty? string)\n        result\n        (helper (substring string\
    \ 0 1)\n                (cons (char->upper-case\n                       (char->lower-case\
    \ (first string)))\n                      result))))\n  (helper string '()))\n",
  "  (define (helper string result)\n    (cond\n      [(empty? string) result]\n \
    \     [(char-lower? (car string)) (helper (cdr string) (cons (char-upper? (car\
    \ string)) result))]\n      [(char-upper? (car string)) (helper (cdr string) (cons\
    \ (char-lower? (car string)) result))]\n      [else (helper (cdr string) (cons\
    \ (car string) result))]\n      ))\n  (helper string '()))\n", "  (define (helper\
    \ char acc)\n    (if (char? char)\n        (helper (char->string char) (string-append\
    \ acc char))\n        acc))\n  (helper string \"\"))\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\nI wrote a function that does this in one line:\n<code>",
  "  (cond\n    [(empty? string) string]\n    [(equal? (first string) (string-ref\
    \ string 0)) (string-append (make-string (string-length string) (char->string\
    \ #\\U) (substring (second string) 1)))]\n    [else (string-append (make-string\
    \ (string-length string) (char->string #\\L) (substring (second string) 1)))]))\n",
  "  (define (helper string result)\n    (if (string-empty? string)\n        result\n\
    \        (helper (substring string 0 1)\n                (cons (char->upper-case\n\
    \                       (char->lower-case (first string)))\n                 \
    \     result)))\n    (helper (substring string 1 string-length) '())))\n", " \
    \ (define (helper string result)\n    (cond [(empty? string) result]\n       \
    \   [(char-lower? (car string)) (helper (cdr string) (cons (char-upper? (car string))\
    \ result))]\n          [else (helper (cdr string) (cons (car string) result))]))\n\
    \  (helper string '()))\n", "  (define (helper string)\n    (cond\n      [(empty?\
    \ string) string]\n      [(char-lower? (car string)) (char-upcase (car string))]\n\
    \      [(char-upper? (car string)) (char-lowercase (car string))]\n      [else\
    \ (helper (cdr string))]))\n  (helper string))\n", "  (define (helper string result)\n\
    \    (if (string-empty? string)\n        result\n        (helper (substring string\
    \ 0 1)\n                (cons (char->upper-case (first string))\n            \
    \          result)))\n    (helper (substring string 1 string-length (first string))\n\
    \            (cons (char->lower-case (first string))\n                  result)))\n\
    \  (helper string '()))\n", "  (cond\n    [(empty? string) string]\n    [(equal?\
    \ (first string) (string-ref string 0)) (string-append (string-ref string 0) (string-ref\
    \ string 1))]\n    [else (string-append (string-ref string 0) (make-string (string-length\
    \ string) (char->lower (char->upper (first string))))\n                      \
    \ (make-string (string-length string) (char->upper (char->lower (first string))))]))\n",
  "  (define (helper char result)\n    (cond [(char=? char #\\a) (concat result #\\\
    A)]\n          [(char=? char #\\A) (concat result #\\a)]\n          [(char=? char\
    \ #\\z) (concat result #\\Z)]\n          [(char=? char #\\Z) (concat result #\\\
    z)]\n          [(char=? char #\\Z) (concat result #\\Z)]\n          [(char=? char\
    \ #\\z) (concat result #\\Z)]\n          [(char=? char #\\Z) (concat result #\\\
    z)]\n          [(char=? char #\\z) (concat result #\\Z)]\n          [(char=? char\
    \ #\\Z) (concat result #\\z)]\n          [(char=? char #\\z) (concat result #\\\
    Z)]\n          [(char=? char #\\Z) (concat result #\\z)]\n          [(char=? char\
    \ #\\z) (concat result #\\Z)]\n          [(char=? char #\\Z) (concat result #\\\
    z)]\n          [(char=? char #\\z) (concat result #\\Z)]\n          [(char=? char\
    \ #\\Z) (concat result #\\z)]\n          [(char=? char #\\z) (concat result #\\\
    Z)]\n          [(char=? char #\\Z) (concat result #\\z)]\n          [(char=? char\
    \ #\\z) (concat result #\\Z)]\n          [(char=? char #\\z) (concat result #\\\
    z)]\n          [(char=? char #\\Z) (concat result #\\z)]\n          [(char=? char\
    \ #\\z) (concat result #\\Z)]\n          [(char=? char #\\z) (concat result #\\\
    z)]\n          [(char=? char #\\Z) (concat result #\\z)]\n          [(char=? char\
    \ #\\z) (concat result #\\Z)]\n          [(char=? char #\\z) (concat result #\\\
    z)]\n          [(char=? char #\\Z) (concat result #\\z)]\n          [(char=? char\
    \ #\\z) (concat result #\\Z)]\n          [(char=? char #\\z) (concat result #\\\
    z)]", "  (define (helper string result)\n    (if (string-empty? string)\n    \
    \    result\n        (helper (substring string 0 1)\n                (cons (char->upper-case\n\
    \                       (char->lower-case (first string)))\n                 \
    \     result))))\n  (helper string '()))\n", "  (cond\n    [(empty? string) string]\n\
    \    [(equal? (first string) (string-ref string 0)) (string-append (string-ref\
    \ string 0) (string-ref string 1))]\n    [else (string-append (string-ref string\
    \ 0) (string-ref string 1))]\n  ))\n", "  (cond [(empty? string) string]\n   \
    \     [(equal? (first string) (string-ref string 0)) (string-append (string-ref\
    \ string 0) (string-ref string 1))]\n        [else (string-append (string-ref\
    \ string 0) (string-ref string 1))]))\n", "  (cond\n    [(empty? string) string]\n\
    \    [(equal? (first string) (string-ref string 0)) (string-append (string-ref\
    \ string 0) (string-ref string 1))]\n    [else (string-append (string-ref string\
    \ 0) (string-ref string 1))]\n  ))\n", "  (define (helper char result)\n    (cond\
    \ ((char= char #\\A) (cons #\\A result))\n          ((char= char #\\Z) (cons #\\\
    Z result))\n          ((char= char #\\a) (cons #\\A result))\n          ((char=\
    \ char #\\z) (cons #\\Z result))\n          ((char= char #\\0) (cons char result))\n\
    \          (else (helper (char->string->char (char->string char)) result))))\n\
    \  (helper string '()))\n", "  (define (helper string)\n    (cond\n      [(empty?\
    \ string) string]\n      [(char-lower? (car string)) (helper (cdr string))]\n\
    \      [(char-upper? (car string)) (helper (cdr string))]\n      [else (string-append\
    \ (helper (cdr string)) (string-append (string string) (string-append (string\
    \ string) 'A')))]\n      ))\n  (helper string))\n", "  (define (helper string\
    \ result)\n    (cond [(empty? string) result]\n          [(char-lower? (car string))\
    \ (helper (cdr string) (cons (char-upper? (car string)) result))]\n          [(char-upper?\
    \ (car string)) (helper (cdr string) (cons (char-lower? (car string)) result))]\n\
    \          [else (helper (cdr string) result)]))\n  (helper string '()))\n", " \
    \ (define (helper string result)\n    (if (string-empty? string)\n        result\n\
    \        (helper (substring string 0 1)\n                (cons (char->upper-case\
    \ (first string))\n                      (helper (substring string 1 length) result))))))\n\
    \  (helper string '()))\n", "  (define (helper string result)\n    (if (string-empty?\
    \ string)\n        result\n        (helper (substring string 0 1) (append result\
    \ (substring string 1 string)))\n      )\n  )\n  (helper string '())\n)\n", " \
    \ (define (helper string result)\n    (if (string-empty? string)\n        result\n\
    \        (helper (substring string 0 1) (append result (string-append (substring\
    \ string 0 1) (substring string 1 string)))\n               (helper (substring\
    \ string 1 string) result (string-append (substring string 1 string) (string-append\
    \ (substring string 0 1) (substring string 1 string)))))))\n  (helper string '()))\n",
  "  (define (helper string result)\n    (if (string-empty? string)\n        result\n\
    \        (helper (substring string 0 1)\n                (cons (char->upper-case\
    \ (first string))\n                      (helper (substring string 1 length) result))))))\n\
    \  (helper string '()))\n", "  (define (helper string result)\n    (if (string-empty?\
    \ string)\n        result\n        (helper (substring string 0 1)\n          \
    \      (cond [(char=? (first string) 'a)\n                       'A']\n      \
    \                    [(char=? (first string) 'b)\n                       'B']\n\
    \                          [(char=? (first string) 'c)\n                     \
    \  'C']\n                          [(char=? (first string) 'd)\n             \
    \          'D']\n                          [(char=? (first string) 'e)\n     \
    \                  'E']\n                          [(char=? (first string) 'f)\n\
    \                       'F']\n                          [(char=? (first string)\
    \ 'g)\n                       'G']\n                          [(char=? (first\
    \ string) 'h)\n                       'H']\n                          [(char=?\
    \ (first string) 'i)\n                       'I']\n                          [(char=?\
    \ (first string) 'j)\n                       'J']\n                          [(char=?\
    \ (first string) 'k)\n                       'K']\n                          [(char=?\
    \ (first string) 'l)\n                       'L']\n                          [(char=?\
    \ (first string) 'm)\n                       'M']\n                          [(char=?\
    \ (first string) 'n)\n                       'N']\n                          [(char=?\
    \ (first string) 'o)\n                       'O']\n                          [(char=?\
    \ (first string) 'p)\n                       'P']\n                          [(char=?\
    \ (first string) 'q)\n                       'Q']\n                          [(char=?\
    \ (first string) 'r)\n                       'R']\n                          [(char=?\
    \ (first string) 's)\n                       'S']\n                          [(char=?\
    \ (first string) 't')\n                       'T']\n                         \
    \ [(char=? (first string) 'u)\n                       'U']\n                 \
    \         [(char=? (first string) 'v)\n                       'V']\n         \
    \                 [(char=? (first string) 'w)\n                       'W']\n \
    \                         [(char=? (first string) 'x)\n                      \
    \ 'X']\n                          [(char=? (first string) 'y)\n              \
    \         'Y']\n                          [(char=? (first string) 'z)\n      \
    \                 'Z']\n                          [(char=? (first string) 'A')\n\
    \                       'a']\n                          [(char=? (first string)\
    \ 'B')\n                       'b']\n                          [(char=? (first\
    \ string) 'C')\n                       'c']\n                          [(char=?\
    \ (first string) 'D')\n                       'd']\n                         \
    \ [(char=? (first string) 'E')\n                       'e']\n                \
    \          [(char=? (first string) 'F')\n                       'f']\n", "  (cond\
    \ [(empty? string) string]\n        [(equal? (first string) (string-ref string\
    \ 0)) (string-append (string-ref string 0) (string-ref string 1))]\n        [else\
    \ (string-append (string-ref string 0) (string-ref string 1))]))\n", "  (cond\n\
    \    [(empty? string) string]\n    [(equal? (first string) (string-ref string\
    \ 0)) (string-append (make-string (string-length string) (char->string #\\U))\
    \ (string-append (make-string (string-length string) (char->string #\\L)) (string-append\
    \ (make-string (string-length string) (char->string #\\l)) (string-append (make-string\
    \ (string-length string) (char->string #\\u)) (string-append (make-string (string-length\
    \ string) (char->string #\\L)) (string-append (make-string (string-length string)\
    \ (char->string #\\u)) (string-append (make-string (string-length string) (char->string\
    \ #\\l)) (string-append (make-string (string-length string) (char->string #\\\
    L)) (string-append (make-string (string-length string) (char->string #\\u)) (string-append\
    \ (make-string (string-length string) (char->string #\\L)) (string-append (make-string\
    \ (string-length string) (char->string #\\u)) (string-append (make-string (string-length\
    \ string) (char->string #\\l)) (string-append (make-string (string-length string)\
    \ (char->string #\\L)) (string-append (make-string (string-length string) (char->string\
    \ #\\u)) (string-append (make-string (string-length string) (char->string #\\\
    L)) (string-append (make-string (string-length string) (char->string #\\u)) (string-append\
    \ (make-string (string-length string) (char->string #\\l)) (string-append (make-string\
    \ (string-length string) (char->string #\\L)) (string-append (make-string (string-length\
    \ string) (char->string #\\u)) (string-append (make-string (string-length string)\
    \ (char->string #\\L)) (string-append (make-string (string-length string) (char->string\
    \ #\\u)) (string-append (make-string (string-length string) (char->string #\\\
    l)) (string-append (make-string (string-length string) (char->string #\\L)) (string-append\
    \ (make-string (string-length string) (char->string #\\u)) (string-append (make-string\
    \ (string-length string) (char->string #\\L)) (string-append (make-string (string-length\
    \ string) (char->string #\\u)) (string-append (make-string (string-length string)\
    \ (char->string #\\l)) (string-append (make-string (string-length string) (char",
  "  (define (helper string result)\n    (if (string-empty? string)\n        result\n\
    \        (helper (substring string 0 1)\n                (cons (char->string (char->integer\
    \ char->char (char->integer char->char (char->integer string)))) result)))\n \
    \   (helper (substring string 1 -1)\n            (cons (char->string (char->integer\
    \ char->char (char->integer char->char (char->integer string)))) result)))\n \
    \ (helper string '()))\n", "  (define (helper string result)\n    (if (string-empty?\
    \ string)\n        result\n        (helper (substring string 0 1) (append result\
    \ (substring string 1 string)))))\n  (helper string '()))\n", "  (define (helper\
    \ string result)\n    (if (string-empty? string)\n        result\n        (helper\
    \ (substring string 0 1)\n                (cons (char->string (char->integer char->char\
    \ (char->integer string))\n                         (char->string (char->integer\
    \ char->char (char->integer result))))))\n    (helper (substring string 1 string-length\
    \ (char->integer string))\n            (cons (char->string (char->integer char->char\
    \ (char->integer string))\n                      (char->string (char->integer\
    \ char->char (char->integer result)))))))\n  (helper string '()))\n", "  (cond\n\
    \    [(empty? string) string]\n    [(equal? (first string) (string-ref string\
    \ 0)) (string-append (make-string (string-length string) ?A) (make-string (string-length\
    \ string) ?a))]\n    [else (string-append (make-string (string-length string)\
    \ ?A) (make-string (string-length string) ?a) (flip_case (string-ref string 1)))]))\n",
  "  (define (helper string result)\n    (if (string-empty? string)\n        result\n\
    \        (helper (substring string 0 1)\n                (cons (char->upper-case\n\
    \                       (char->lower-case (first string)))\n                 \
    \     result)))\n    (helper (substring string 1 string-length) '())))\n", " \
    \ (define (helper string index result)\n    (cond [(< index 0) result]\n     \
    \     [(char=? (char-code string) (char-code (char-code (substring string 0 index))))\
    \ (helper (substring string (1+ index)) (+ index 1) (append result (substring\
    \ string 0 index)))]\n          [else (helper (substring string (1+ index)) (+\
    \ index 1) result)]))\n  (helper string 0 ''))\n", "  (define (helper string result)\n\
    \    (if (string-empty? string)\n        result\n        (helper (substring string\
    \ 0 1)\n                (cons (char->upper-case (first string))\n            \
    \          result)))\n    (helper (substring string 1 string-length) '())))\n\
    \  (foldr helper string '()))\n", "  (define (helper string result)\n    (if (string-empty?\
    \ string)\n        result\n        (helper (substring string 0 1) (append result\
    \ (substring string 1 string)))))\n  (helper string '()))\n", "  (cond\n    [(string-empty?\
    \ string) string]\n    [(equal? (char-code (car string)) #\\a) (char->string #\\\
    A)]\n    [(equal? (char-code (car string)) #\\z) (char->string #\\Z)]\n    [(equal?\
    \ (char-code (car string)) #\\A) (char->string #\\a)]\n    [(equal? (char-code\
    \ (car string)) #\\Z) (char->string #\\z)]\n    [else (string-append (string-append\
    \ (string-append (string-append (char->string #\\A) (car string)) (char->string\
    \ #\\z)) (char->string #\\A))\n                   (flip_case (string-cdr string))]))\n",
  "  (cond\n    [(empty? string) string]\n    [(equal? (first string) (string-ref\
    \ string 0)) (string-append (make-string (string-length string) (char->string\
    \ #\\U)) (rest string))]\n    [else (string-append (make-string (string-length\
    \ string) (char->string #\\L)) (rest string))]))\n", "  (define (helper string\
    \ result)\n    (if (string-empty? string)\n        result\n        (helper (substring\
    \ string 0 1) (append result (substring string 1 string)))))\n  (helper string\
    \ '()))\n", "  (cond\n    [(empty? string) string]\n    [(equal? (first string)\
    \ (string-ref string 0)) (string-append (string-ref string 0) (string-ref string\
    \ 1))]\n    [else (string-append (string-ref string 0) (string-ref string 1))]\n\
    \  )\n)\n", "  (define (helper string index result)\n    (if (string-empty? string)\n\
    \        result\n        (helper (substring string index (+ index 1)) index (if\
    \ (char-lower-case? string) (string-append result (char-upper-case? string)) result))))\n\
    \  (helper string 0 (string-append string (char-upper-case? string))))\n", " \
    \ (define (helper string result)\n    (if (string-empty? string)\n        result\n\
    \        (helper (substring string 0 1) (append result (substring string 1)))\n\
    \      )\n  )\n  (helper string '())\n)\n", "  (define (helper string result)\n\
    \    (if (string-empty? string)\n        result\n        (helper (substring string\
    \ 0 1)\n                (cond [(char=? (first string) 'a)\n                  \
    \     'A']\n                          [(char=? (first string) 'b)\n          \
    \             'B']\n                          [(char=? (first string) 'c)\n  \
    \                     'C']\n                          [(char=? (first string)\
    \ 'd)\n                       'D']\n                          [(char=? (first\
    \ string) 'e)\n                       'E']\n                          [(char=?\
    \ (first string) 'f)\n                       'F']\n                          [(char=?\
    \ (first string) 'g)\n                       'G']\n                          [(char=?\
    \ (first string) 'h)\n                       'H']\n                          [(char=?\
    \ (first string) 'i)\n                       'I']\n                          [(char=?\
    \ (first string) 'j)\n                       'J']\n                          [(char=?\
    \ (first string) 'k)\n                       'K']\n                          [(char=?\
    \ (first string) 'l)\n                       'L']\n                          [(char=?\
    \ (first string) 'm)\n                       'M']\n                          [(char=?\
    \ (first string) 'n)\n                       'N']\n                          [(char=?\
    \ (first string) 'o)\n                       'O']\n                          [(char=?\
    \ (first string) 'p)\n                       'P']\n                          [(char=?\
    \ (first string) 'q)\n                       'Q']\n                          [(char=?\
    \ (first string) 'r)\n                       'R']\n                          [(char=?\
    \ (first string) 's)\n                       'S']\n                          [(char=?\
    \ (first string) 't')\n                       'T']\n                         \
    \ [(char=? (first string) 'u)\n                       'U']\n                 \
    \         [(char=? (first string) 'v)\n                       'V']\n         \
    \                 [(char=? (first string) 'w)\n                       'W']\n \
    \                         [(char=? (first string) 'x)\n                      \
    \ 'X']\n                          [(char=? (first string) 'y)\n              \
    \         'Y']\n                          [(char=? (first string) 'z)\n      \
    \                 'Z']\n                          [(char=? (first string) 'A)\n\
    \                       'a']\n                          [(char=? (first string)\
    \ 'B)\n                       'b']\n                          [(char=? (first\
    \ string) 'C)\n                       'c']\n                          [(char=?\
    \ (first string) 'D)\n                       'd']\n                          [(char=?\
    \ (first string) 'E)\n                       'e']\n                          [(char=?\
    \ (first string) 'F)\n                       'f']\n                          [(char=?\
    \ (", "  (cond\n    [(empty? string) string]\n    [(equal? (first string) (string-ref\
    \ string 0)) (string-append (make-string 1 (string->length (first string)) #\\\
    0)\n                                               (make-string 1 (string->length\
    \ (first string)) #\\1))]\n    [else (string-append (make-string 1 (string->length\
    \ (first string)) #\\0)\n                           (make-string 1 (string->length\
    \ (first string)) #\\1))\n          (flip_case (string-rest (first string)))]))\n",
  "  (define (helper string result)\n    (cond\n      [(empty? string) result]\n \
    \     [(char-lower? (car string)) (helper (cdr string) (append result (list char-upper?\
    \ (car string))))]\n      [(char-upper? (car string)) (helper (cdr string) (append\
    \ result (list char-lower? (car string))))]\n      [else (helper (cdr string)\
    \ result)]))\n  (helper string '()))\n", "  (define (helper string result)\n \
    \   (cond\n      [(empty? string) result]\n      [(char-lower? (car string)) (helper\
    \ (cdr string) (cons (char-upper? (car string)) result))]\n      [(char-upper?\
    \ (car string)) (helper (cdr string) (cons (char-lower? (car string)) result))]\n\
    \      [else (helper (cdr string) result)]))\n  (helper string '()))\n", "  (define\
    \ (helper string result)\n    (if (string-empty? string)\n        result\n   \
    \     (helper (substring string 0 1) (append result (string-append (substring\
    \ string 0 1) (substring string 1 string)))))\n  )\n  (helper string '()))\n",
  "  (cond\n    [(string-empty? string) string]\n    [(equal? (char-code (car string))\
    \ #\\A) (make-string (char-code (car string)) #\\Z)]\n    [(equal? (char-code\
    \ (car string)) #\\z) (make-string (char-code (car string)) #\\A)]\n    [else\
    \ (make-string (char-code (car string)) (char-code (car string)) #\\A)]))\n",
  "  (cond\n    [(string-empty? string) string]\n    [(equal? (char-code (car string))\
    \ #\\a) (char-upper (char-code (car string)))]\n    [(equal? (char-code (car string))\
    \ #\\A) (char-lower (char-code (car string)))]\n    [else (string-append (string-upper\
    \ (char-code (car string))) (string-lower (char-code (car string))))]))\n", " \
    \ (define (helper string result)\n    (cond\n      [(empty? string) result]\n\
    \      [(char-lower? (car string)) (helper (cdr string) (append result (car string)))]\n\
    \      [(char-upper? (car string)) (helper (cdr string) (append result (upper-case\
    \ (car string))))]\n      [else (helper (cdr string) result)]))\n  (helper string\
    \ '()))\n", "  (cond [(string? string) (map #(if (char=? (char-code %) 97) (char-code\
    \ %) (char-code %)) string)]\n        [else string]))\n", "  (cond\n    [(string-empty?\
    \ string) string]\n    [(equal? (char-code (car string)) #\\a) (char->string #\\\
    A)]\n    [(equal? (char-code (car string)) #\\z) (char->string #\\Z)]\n    [(equal?\
    \ (char-code (car string)) #\\A) (char->string #\\a)]\n    [(equal? (char-code\
    \ (car string)) #\\Z) (char->string #\\z)]\n    [else (string-append (string-append\
    \ (char->string #\\A) (string-append (char->string #\\z) (string-append (char->string\
    \ #\\A) (string-append (char->string #\\z) (string-append (char->string #\\A)\
    \ (string-append (char->string #\\z) (string-append (char->string #\\A) (string-append\
    \ (char->string #\\z) (string-append (char->string #\\A) (string-append (char->string\
    \ #\\z) (string-append (char->string #\\A) (string-append (char->string #\\z)\
    \ (string-append (char->string #\\A) (string-append (char->string #\\z) (string-append\
    \ (char->string #\\A) (string-append (char->string #\\z) (string-append (char->string\
    \ #\\A) (string-append (char->string #\\z) (string-append (char->string #\\A)\
    \ (string-append (char->string #\\z) (string-append (char->string #\\A) (string-append\
    \ (char->string #\\z) (string-append (char->string #\\A) (string-append (char->string\
    \ #\\z) (string-append (char->string #\\A) (string-append (char->string #\\z)\
    \ (string-append (char->string #\\A) (string-append (char->string #\\z) (string-append\
    \ (char->string #\\A) (string-append (char->string #\\z) (string-append (char->string\
    \ #\\A) (string-append (char->string #\\z) (string-append (char->string #\\A)\
    \ (string-append (char->string #\\z) (string-append (char->string #\\A) (string-append\
    \ (char->string #\\z) (string-append (char->string #\\A) (string-append (char->string\
    \ #\\z) (string-append (char->string #\\A) (string-append (char->string #\\z)\
    \ (string-", "  (define (helper string result)\n    (if (string-empty? string)\n\
    \        result\n        (helper (substring string 0 1) (append result (substring\
    \ string 1 string)))))\n  (helper string '()))\n", "  (define (helper string result)\n\
    \    (if (string-empty? string)\n        result\n        (helper (substring string\
    \ 0 1)\n                (cons (char->upper-case\n                       (char->lower-case\
    \ (first string)))\n                      result)))\n    (helper (substring string\
    \ 1 string-length) '())))\n", "  (define (helper string result)\n    (if (string-empty?\
    \ string)\n        result\n        (helper (substring string 0 1) (append result\
    \ (substring string 1 string)))))\n  (helper string '()))\n", "  (define (helper\
    \ string result)\n    (if (string-empty? string)\n        result\n        (helper\
    \ (substring string 0 1)\n                (cons (char->upper-case (first string))\n\
    \                      (helper (substring string 1 length) result))))))\n  (helper\
    \ string '()))\n", "  (define (helper string result)\n    (cond\n      [(empty?\
    \ string) result]\n      [(char-lower? (car string)) (helper (cdr string) (cons\
    \ (char-upper? (car string)) result))]\n      [(char-upper? (car string)) (helper\
    \ (cdr string) (cons (char-lower? (car string)) result))]\n      [else (helper\
    \ (cdr string) (cons (car string) result))]\n      ))\n  (helper string '()))\n",
  "  (define (helper char result)\n    (if (char-lower? char)\n        (helper (char-upper?\
    \ char) result)\n        result))\n  (helper string '()))\n", "  (cond\n    [(string-empty?\
    \ string) string]\n    [(equal? (char-code (car string)) #\\a) (char-upper-case\n\
    \                                     (char-code (car string)))]\n    [(equal?\
    \ (char-code (car string)) #\\A) (char-lower-case\n                          \
    \           (char-code (car string)))]\n    [else (cons (char-upper-case\n   \
    \               (char-code (car string)))\n                (flip_case\n      \
    \           (char-code (cdr string))))]))\n", "  (define (helper string result)\n\
    \    (if (string-empty? string)\n        result\n        (helper (substring string\
    \ 0 1)\n                (cons (char->upper-case (first string))\n            \
    \          result)))\n    (helper (substring string 1 string-length (first string))\n\
    \            (cons (char->lower-case (first string))\n                  result)))\n\
    \  (helper string '()))\n", "  (define (helper string result)\n    (if (string-empty?\
    \ string)\n        result\n        (helper (substring string 0 1) (append result\
    \ (substring string 1 string)))))\n  (helper string '()))\n", "  (cond\n    [(empty?\
    \ string) string]\n    [(equal? (first string) (string-ref string 0)) (string-append\
    \ (make-string (string-length string) (char->string #\\U)) (rest string))]\n \
    \   [else (string-append (make-string (string-length string) (char->string #\\\
    L)) (rest string))]))\n", "  (define (helper string result)\n    (if (string-empty?\
    \ string)\n        result\n        (helper (substring string 0 1) (append result\
    \ (substring string 1 string)))))\n  (helper string '()))\n", "  (define (helper\
    \ char str)\n    (if (char? char)\n        (if (char= char #\\a)\n           \
    \ (char= char #\\A)\n            (char= char #\\z))\n        str))\n  (define\
    \ (helper str char)\n    (if (char? char)\n        (if (char= char #\\A)\n   \
    \         (char= char #\\a)\n            (char= char #\\z))\n        str))\n \
    \ (define (helper str char)\n    (if (char? char)\n        (if (char= char #\\\
    A)\n            (char= char #\\A)\n            (char= char #\\z))\n        str))\n\
    \  (define (helper str char)\n    (if (char? char)\n        (if (char= char #\\\
    A)\n            (char= char #\\a)\n            (char= char #\\z))\n        str))\n\
    \  (define (helper str char)\n    (if (char? char)\n        (if (char= char #\\\
    A)\n            (char= char #\\A)\n            (char= char #\\z))\n        str))\n\
    \  (define (helper str char)\n    (if (char? char)\n        (if (char= char #\\\
    A)\n            (char= char #\\a)\n            (char= char #\\z))\n        str))\n\
    \  (define (helper str char)\n    (if (char? char)\n        (if (char= char #\\\
    A)\n            (char= char #\\A)\n            (char= char #\\z))\n        str))\n\
    \  (define (helper str char)\n    (if (char? char)\n        (if (char= char #\\\
    A)\n            (char= char #\\a)\n            (char= char #\\z))\n        str))\n\
    \  (define (helper str char)\n    (if (char? char)\n        (if (char= char #\\\
    A)\n            (char= char #\\A)\n            (char= char #\\z))\n        str))\n\
    \  (define (helper str char)\n    (if (char? char)\n        (if (char= char #\\\
    A)\n            (char= char #\\a)\n            (char= char #\\z))\n        str))\n\
    \  (define (helper str char)\n    (if (char? char)\n        (if (char= char #\\\
    A)\n            (char= char #\\A)\n            (char= char #\\z))\n        str))\n\
    \  (define (helper str char)\n    (if (char? char)\n        (if (char= char #\\\
    A)\n            (char= char #\\a)\n            (char= char #\\z))\n        str))\n\
    \  (define (helper str char)\n    (if (char? char)\n        (if (char= char #\\",
  "  (cond\n    [(empty? string) string]\n    [(equal? (first string) (string-ref\
    \ string 0)) (string-append (make-string (string-length string) (char->string\
    \ #\\U)) (string-append (make-string (string-length string) (char->string #\\\
    l)) (string-append (make-string (string-length string) (char->string #\\u)) (string-append\
    \ (make-string (string-length string) (char->string #\\L)) (string-append (make-string\
    \ (string-length string) (char->string #\\L)) (string-append (make-string (string-length\
    \ string) (char->string #\\u)) (string-append (make-string (string-length string)\
    \ (char->string #\\U)) (string-append (make-string (string-length string) (char->string\
    \ #\\u)) (string-append (make-string (string-length string) (char->string #\\\
    l)) (string-append (make-string (string-length string) (char->string #\\L)) (string-append\
    \ (make-string (string-length string) (char->string #\\u)) (string-append (make-string\
    \ (string-length string) (char->string #\\U)) (string-append (make-string (string-length\
    \ string) (char->string #\\u)) (string-append (make-string (string-length string)\
    \ (char->string #\\l)) (string-append (make-string (string-length string) (char->string\
    \ #\\L)) (string-append (make-string (string-length string) (char->string #\\\
    u)) (string-append (make-string (string-length string) (char->string #\\U)) (string-append\
    \ (make-string (string-length string) (char->string #\\u)) (string-append (make-string\
    \ (string-length string) (char->string #\\l)) (string-append (make-string (string-length\
    \ string) (char->string #\\L)) (string-append (make-string (string-length string)\
    \ (char->string #\\u)) (string-append (make-string (string-length string) (char->string\
    \ #\\U)) (string-append (make-string (string-length string) (char->string #\\\
    u)) (string-append (make-string (string-length string) (char->string #\\l)) (string-append\
    \ (make-string (string-length string) (char->string #\\L)) (string-append (make-string\
    \ (string-length string) (char->string #\\u)) (string-append (make-string (string-length\
    \ string) (char->string #\\U)) (string-append (make-string (string-length string)\
    \ (char", "  (cond\n    [(empty? string) string]\n    [(equal? (first string)\
    \ (string-ref string 0)) (string-append (make-string (string-length string) (char->string\
    \ #\\U)) (string-append (make-string (string-length string) (char->string #\\\
    l)) (string-append (make-string (string-length string) (char->string #\\L)) (string-append\
    \ (make-string (string-length string) (char->string #\\U)) (string-append (make-string\
    \ (string-length string) (char->string #\\l)) (string-append (make-string (string-length\
    \ string) (char->string #\\L)) (string-append (make-string (string-length string)\
    \ (char->string #\\U)) (string-append (make-string (string-length string) (char->string\
    \ #\\l)) (string-append (make-string (string-length string) (char->string #\\\
    L)) (string-append (make-string (string-length string) (char->string #\\U)) (string-append\
    \ (make-string (string-length string) (char->string #\\l)) (string-append (make-string\
    \ (string-length string) (char->string #\\L)) (string-append (make-string (string-length\
    \ string) (char->string #\\U)) (string-append (make-string (string-length string)\
    \ (char->string #\\l)) (string-append (make-string (string-length string) (char->string\
    \ #\\L)) (string-append (make-string (string-length string) (char->string #\\\
    U)) (string-append (make-string (string-length string) (char->string #\\l)) (string-append\
    \ (make-string (string-length string) (char->string #\\L)) (string-append (make-string\
    \ (string-length string) (char->string #\\U)) (string-append (make-string (string-length\
    \ string) (char->string #\\l)) (string-append (make-string (string-length string)\
    \ (char->string #\\L)) (string-append (make-string (string-length string) (char->string\
    \ #\\U)) (string-append (make-string (string-length string) (char->string #\\\
    l)) (string-append (make-string (string-length string) (char->string #\\L)) (string-append\
    \ (make-string (string-length string) (char->string #\\U)) (string-append (make-string\
    \ (string-length string) (char->string #\\l)) (string-append (make-string (string-length\
    \ string) (char->string #\\L)) (string-", "  (define (helper string result)\n\
    \    (cond\n      [(empty? string) result]\n      [(char-lower? (car string))\
    \ (helper (cdr string) (cons (char-upper? (car string)) result))]\n      [(char-upper?\
    \ (car string)) (helper (cdr string) (cons (char-lower? (car string)) result))]\n\
    \      [else (helper (cdr string) (cons (car string) result))]))\n  (helper string\
    \ '()))\n", "  (define (helper string result)\n    (if (string-empty? string)\n\
    \        result\n        (helper (substring string 0 1) (append result (substring\
    \ string 1 string)))))\n  (helper string '()))\n", "  (cond\n    [(empty? string)\
    \ string]\n    [(equal? (first string) (string-ref string 0)) (string-append (make-string\
    \ (string-length string) (char->string #\\U)) (string-append (make-string (string-length\
    \ string) (char->string #\\l)) (string-append (make-string (string-length string)\
    \ (char->string #\\L)) (string-append (make-string (string-length string) (char->string\
    \ #\\U)) (string-append (make-string (string-length string) (char->string #\\\
    l)) (string-append (make-string (string-length string) (char->string #\\L)) (string-append\
    \ (make-string (string-length string) (char->string #\\U)) (string-append (make-string\
    \ (string-length string) (char->string #\\l)) (string-append (make-string (string-length\
    \ string) (char->string #\\L)) (string-append (make-string (string-length string)\
    \ (char->string #\\U)) (string-append (make-string (string-length string) (char->string\
    \ #\\l)) (string-append (make-string (string-length string) (char->string #\\\
    L))))))))]\n    [else (string-append (make-string (string-length string) (char->string\
    \ #\\U)) (string-append (make-string (string-length string) (char->string #\\\
    l)) (string-append (make-string (string-length string) (char->string #\\L)) (string-append\
    \ (make-string (string-length string) (char->string #\\U)) (string-append (make-string\
    \ (string-length string) (char->string #\\l)) (string-append (make-string (string-length\
    \ string) (char->string #\\L)) (string-append (make-string (string-length string)\
    \ (char->string #\\U)) (string-append (make-string (string-length string) (char->string\
    \ #\\l)) (string-append (make-string (string-length string) (char->string #\\\
    L))))))))]\n  ))\n", "  (cond\n    ((empty? string) string)\n    ((char-lower?\
    \ (car string)) (string-append (char-upcase (car string)) (string-reverse (string-tail\
    \ (cdr string))))\n     (flip_case (string-tail (cdr string))))\n    ((char-upper?\
    \ (car string)) (string-append (char-downcase (car string)) (string-reverse (string-tail\
    \ (cdr string))))\n     (flip_case (string-tail (cdr string))))\n    (else (string-append\
    \ (car string) (string-reverse (string-tail (cdr string)))))\n  )\n)\n", "  (cond\n\
    \    [(empty? string) string]\n    [(equal? (first string) (string-ref string\
    \ 0)) (string-append (make-string (string-length string) (char->string #\\U))\
    \ (string-append (make-string (string-length string) (char->string #\\l)) (string-append\
    \ (make-string (string-length string) (char->string #\\u)) (string-append (make-string\
    \ (string-length string) (char->string #\\L)) (string-append (make-string (string-length\
    \ string) (char->string #\\L)) (string-append (make-string (string-length string)\
    \ (char->string #\\u)) (string-append (make-string (string-length string) (char->string\
    \ #\\U)) (string-append (make-string (string-length string) (char->string #\\\
    l)) (string-append (make-string (string-length string) (char->string #\\u)) (string-append\
    \ (make-string (string-length string) (char->string #\\L)) (string-append (make-string\
    \ (string-length string) (char->string #\\l)) (string-append (make-string (string-length\
    \ string) (char->string #\\u)) (string-append (make-string (string-length string)\
    \ (char->string #\\L)) (string-append (make-string (string-length string) (char->string\
    \ #\\l)) (string-append (make-string (string-length string) (char->string #\\\
    u)) (string-append (make-string (string-length string) (char->string #\\U)) (string-append\
    \ (make-string (string-length string) (char->string #\\l)) (string-append (make-string\
    \ (string-length string) (char->string #\\u)) (string-append (make-string (string-length\
    \ string) (char->string #\\L)) (string-append (make-string (string-length string)\
    \ (char->string #\\l)) (string-append (make-string (string-length string) (char->string\
    \ #\\u)) (string-append (make-string (string-length string) (char->string #\\\
    U)) (string-append (make-string (string-length string) (char->string #\\l)) (string-append\
    \ (make-string (string-length string) (char->string #\\u)) (string-append (make-string\
    \ (string-length string) (char->string #\\L)) (string-append (make-string (string-length\
    \ string) (char->string #\\l)) (string-append (make-string (string-length string)\
    \ (char->string #\\u)) (string-append (make-string (string-length string) (",
  "  (define (helper string index result)\n    (cond\n      [(empty? string) (list\
    \ result)]\n      [(char=? (car string) (car result)) (helper (cdr string) (+\
    \ index 1) (cdr result))]\n      [else (helper (cdr string) (+ index 1) (cons\
    \ (car string) result))]\n      ))\n  (helper string 0 '()))\n", "  (define (helper\
    \ string index result)\n    (cond [(< index 0) result]\n          [(char=? (char-code\
    \ string) (char-code (char-code (substring string index 1))))\n           (helper\
    \ (substring string (1+ index)) (1+ index) (cons (char-code (char-code (substring\
    \ string index 1))) (cons (char-code (char-code (substring string index))) result)))]\n\
    \          [else (helper (substring string (1+ index)) (1+ index) (cons (char-code\
    \ (char-code (substring string index))) result))]))\n  (helper string 0 '()))\n",
  "  (define (helper string result)\n    (if (string-empty? string)\n        result\n\
    \        (helper (substring string 0 1) (append result (substring string 1 string)))))\n\
    \  (helper string '()))\n", "  (cond [(empty? string) string]\n        [(equal?\
    \ (first string) (string-ref string 0)) (string-append (make-string (string-length\
    \ string) (char->string #\\U)) (string-reverse (substring (second string) 0 1)))]\n\
    \        [else (string-append (make-string (string-length string) (char->string\
    \ #\\L)) (string-reverse (substring (second string) 0 1)))]))\n", "  (define (helper\
    \ string result)\n    (if (string-empty? string)\n        result\n        (helper\
    \ (substring string 0 1)\n                (if (char-lower? (car string))\n   \
    \                 (cons (char-upper (car string)) result)\n                  \
    \  (cons (car string) result))))\n  (helper string '()))\n", "  (cond\n    [(string-empty?\
    \ string) string]\n    [(equal? (char-code (string-ref string 0)) #\\a) (make-string\
    \ (string-length string) (char-code #\\A))]\n    [(equal? (char-code (string-ref\
    \ string 0)) #\\A) (make-string (string-length string) (char-code #\\a))]\n  \
    \  [(equal? (char-code (string-ref string 0)) #\\z) (make-string (string-length\
    \ string) (char-code #\\Z))]\n    [(equal? (char-code (string-ref string 0)) #\\\
    Z) (make-string (string-length string) (char-code #\\z))]\n    [else (make-string\
    \ (string-length string) (char-code #\\ (char-code (string-ref string 0))))]))\n",
  "  (define (helper string result)\n    (if (string-empty? string)\n        result\n\
    \        (helper (substring string 0 1)\n                (cons (char->upper-case\
    \ (first string))\n                      result)))\n    (helper (substring string\
    \ 1 string-length (string-length string))\n            '())))\n", "  (cond\n \
    \   [(empty? string) string]\n    [(equal? (first string) (string-ref string 0))\
    \ (string-append (string-ref string 0) (string-ref string 1))]\n    [else (string-append\
    \ (string-ref string 0) (make-string (length string) (char->string (string-ref\
    \ string 1))))]))\n", "  (define (helper string result)\n    (if (string-empty?\
    \ string)\n        result\n        (helper (substring string 0 1) (append result\
    \ (substring string 1 string)))))\n  (helper string '()))\n", "  (define (helper\
    \ string result)\n    (if (empty? string)\n        result\n        (helper (cdr\
    \ string) (cons (char->upper-case\n                                     (char->lower-case\
    \ (car string))) result)))\n  (helper string '()))\n", "  (define (helper string\
    \ result)\n    (if (string-empty? string)\n        result\n        (helper (substring\
    \ string 0 1) (append result (substring string 1)))\n      )\n  )\n  (helper string\
    \ '())\n)\n", "  (define (helper string result)\n    (if (string-empty? string)\n\
    \        result\n        (helper (substring string 0 1) (append result (substring\
    \ string 1 string)))\n      )\n  )\n  (helper string '())\n)\n", "  (cond [(empty?\
    \ string) string]\n        [(equal? (first string) (string-ref string 0)) (string-append\
    \ (make-string (string-length string) (char->string #\\U)) (make-string (string-length\
    \ string) (char->string #\\l)))]\n        [else (string-append (make-string (string-length\
    \ string) (char->string #\\U)) (make-string (string-length string) (char->string\
    \ #\\l))\n                           (make-string (string-length string) (char->string\
    \ #\\l))\n                           (make-string (string-length string) (char->string\
    \ #\\l))\n                           (make-string (string-length string) (char->string\
    \ #\\l))\n                           (make-string (string-length string) (char->string\
    \ #\\l))\n                           (make-string (string-length string) (char->string\
    \ #\\l))\n                           (make-string (string-length string) (char->string\
    \ #\\l))\n                           (make-string (string-length string) (char->string\
    \ #\\l))\n                           (make-string (string-length string) (char->string\
    \ #\\l))\n                           (make-string (string-length string) (char->string\
    \ #\\l))\n                           (make-string (string-length string) (char->string\
    \ #\\l))\n                           (make-string (string-length string) (char->string\
    \ #\\l))\n                           (make-string (string-length string) (char->string\
    \ #\\l))\n                           (make-string (string-length string) (char->string\
    \ #\\l))\n                           (make-string (string-length string) (char->string\
    \ #\\l))\n                           (make-string (string-length string) (char->string\
    \ #\\l))\n                           (make-string (string-length string) (char->string\
    \ #\\l))\n                           (make-string (string-length string) (char->string\
    \ #\\l))\n                           (make-string (string-length string) (char->string\
    \ #\\l))\n                           (make-string (string-length string) (char->string\
    \ #\\l))\n                           (make-string (string-length string) (char->string\
    \ #\\l))\n                           (make-string (string-length string) (char->string\
    \ #\\l))\n                           (make-string (string-length string) (char->string\
    \ #\\l))\n                           (make-string (string-length string) (char->string\
    \ #\\l))\n                           (make-string (string-length string) (char->string\
    \ #\\l))\n                           (make-string (string-length string) (char"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
