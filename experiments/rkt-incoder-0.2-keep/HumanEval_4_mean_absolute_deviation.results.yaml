language: racket
name: HumanEval_4_mean_absolute_deviation
results:
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpc1g63xkd.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpc1g63xkd.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpzmos5wv5.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpzmos5wv5.rkt:11:41\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (let ((mean\
    \ 0))\n    (map (lambda (x) (+ x mean)) numbers)\n    (/ (- mean mean numbers)\
    \ (length numbers))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate mean_absolute_deviation))\n    (check-equal? (candidate (list\
    \ 1.0 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnl5q3byo.rkt:20:4\n\
    \n-: contract violation\n  expected: number?\n  given: '(1.0 2.0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnl5q3byo.rkt:21:4\n\
    \n-: contract violation\n  expected: number?\n  given: '(1.0 2.0 3.0 4.0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnl5q3byo.rkt:22:4\n\
    \n-: contract violation\n  expected: number?\n  given: '(1.0 2.0 3.0 4.0 5.0)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs numbers)) (length numbers)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate mean_absolute_deviation))\n    (check-equal? (candidate\
    \ (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6skqep66.rkt:18:4

    actual:     1.5

    expected:   0.5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6skqep66.rkt:19:4

    actual:     2.5

    expected:   1.0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6skqep66.rkt:20:4

    actual:     3.0

    expected:   1.2

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs numbers)) (length numbers)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate mean_absolute_deviation))\n    (check-equal? (candidate\
    \ (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkg4qjs8v.rkt:18:4

    actual:     1.5

    expected:   0.5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkg4qjs8v.rkt:19:4

    actual:     2.5

    expected:   1.0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkg4qjs8v.rkt:20:4

    actual:     3.0

    expected:   1.2

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) length))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp2e4hr_0c.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmp2e4hr_0c.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs (- numbers mean))) #(length numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n \
    \   (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpc27tmwz4.rkt:11:34: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpc27tmwz4.rkt:11:34\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpcl_q97j_.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpcl_q97j_.rkt:11:41\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs numbers)) (length numbers)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate mean_absolute_deviation))\n    (check-equal? (candidate\
    \ (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0uhobsgt.rkt:18:4

    actual:     1.5

    expected:   0.5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0uhobsgt.rkt:19:4

    actual:     2.5

    expected:   1.0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0uhobsgt.rkt:20:4

    actual:     3.0

    expected:   1.2

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs numbers)) (length numbers)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate mean_absolute_deviation))\n    (check-equal? (candidate\
    \ (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfsuutu9_.rkt:18:4

    actual:     1.5

    expected:   0.5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfsuutu9_.rkt:19:4

    actual:     2.5

    expected:   1.0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfsuutu9_.rkt:20:4

    actual:     3.0

    expected:   1.2

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs (- numbers mean))) #(length numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n \
    \   (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpslm750ub.rkt:11:34: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpslm750ub.rkt:11:34\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs numbers)) \n     (apply + (map length numbers))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_tyeheu1.rkt:19:4\n\
    \nlength: contract violation\n  expected: list?\n  given: 1.0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_tyeheu1.rkt:20:4\n\
    \nlength: contract violation\n  expected: list?\n  given: 1.0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_tyeheu1.rkt:21:4\n\
    \nlength: contract violation\n  expected: list?\n  given: 1.0\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs numbers)) \n     (apply + (map length numbers))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjxudksjx.rkt:19:4\n\
    \nlength: contract violation\n  expected: list?\n  given: 1.0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjxudksjx.rkt:20:4\n\
    \nlength: contract violation\n  expected: list?\n  given: 1.0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjxudksjx.rkt:21:4\n\
    \nlength: contract violation\n  expected: list?\n  given: 1.0\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp9olydlzg.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmp9olydlzg.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) \n     (length numbers)))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp54e20w2k.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmp54e20w2k.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp31utlbik.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmp31utlbik.rkt:11:41\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (let ((mean\
    \ 0))\n    (for ((i numbers))\n      (set! mean (+ mean i))\n      (set! mean\
    \ (/ mean numbers))\n      (set! mean 0))\n    mean))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n \
    \   (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0q_sgiin.rkt:23:4\n\
    \n/: contract violation\n  expected: number?\n  given: '(1.0 2.0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0q_sgiin.rkt:24:4\n\
    \n/: contract violation\n  expected: number?\n  given: '(1.0 2.0 3.0 4.0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0q_sgiin.rkt:25:4\n\
    \n/: contract violation\n  expected: number?\n  given: '(1.0 2.0 3.0 4.0 5.0)\n\
    --------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (let ((mean\
    \ (mean numbers)))\n    (/ (apply + (map abs numbers)) mean)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpns070ya6.rkt:11:15: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpns070ya6.rkt:11:15\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) length))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp9h3zucl2.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmp9h3zucl2.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp871nejsg.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmp871nejsg.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp8na7ck0n.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmp8na7ck0n.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp_vjz1599.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmp_vjz1599.rkt:11:41\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs numbers)) (length numbers)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate mean_absolute_deviation))\n    (check-equal? (candidate\
    \ (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4p5y73d2.rkt:18:4

    actual:     1.5

    expected:   0.5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4p5y73d2.rkt:19:4

    actual:     2.5

    expected:   1.0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4p5y73d2.rkt:20:4

    actual:     3.0

    expected:   1.2

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs numbers)) (length numbers)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate mean_absolute_deviation))\n    (check-equal? (candidate\
    \ (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdgnzvseu.rkt:18:4

    actual:     1.5

    expected:   0.5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdgnzvseu.rkt:19:4

    actual:     2.5

    expected:   1.0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdgnzvseu.rkt:20:4

    actual:     3.0

    expected:   1.2

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x numbers))) numbers)) \n     (length numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4b6_7kgg.rkt:19:4\n\
    \n-: contract violation\n  expected: number?\n  given: '(1.0 2.0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4b6_7kgg.rkt:20:4\n\
    \n-: contract violation\n  expected: number?\n  given: '(1.0 2.0 3.0 4.0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4b6_7kgg.rkt:21:4\n\
    \n-: contract violation\n  expected: number?\n  given: '(1.0 2.0 3.0 4.0 5.0)\n\
    --------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) #(length numbers)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpjet46uen.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpjet46uen.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs (- numbers mean))) count))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate mean_absolute_deviation))\n    (check-equal? (candidate\
    \ (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpt7h8v5fi.rkt:11:34: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpt7h8v5fi.rkt:11:34\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs numbers)) \n     (apply + (map length numbers))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiy471qcg.rkt:19:4\n\
    \nlength: contract violation\n  expected: list?\n  given: 1.0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiy471qcg.rkt:20:4\n\
    \nlength: contract violation\n  expected: list?\n  given: 1.0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiy471qcg.rkt:21:4\n\
    \nlength: contract violation\n  expected: list?\n  given: 1.0\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs numbers)) (length numbers)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate mean_absolute_deviation))\n    (check-equal? (candidate\
    \ (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf9jn6b9k.rkt:18:4

    actual:     1.5

    expected:   0.5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf9jn6b9k.rkt:19:4

    actual:     2.5

    expected:   1.0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf9jn6b9k.rkt:20:4

    actual:     3.0

    expected:   1.2

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs numbers)) \n     (apply + (map length numbers))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa8gg8ufd.rkt:19:4\n\
    \nlength: contract violation\n  expected: list?\n  given: 1.0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa8gg8ufd.rkt:20:4\n\
    \nlength: contract violation\n  expected: list?\n  given: 1.0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa8gg8ufd.rkt:21:4\n\
    \nlength: contract violation\n  expected: list?\n  given: 1.0\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x numbers))) numbers)) \n     (length numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfhe__kje.rkt:19:4\n\
    \n-: contract violation\n  expected: number?\n  given: '(1.0 2.0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfhe__kje.rkt:20:4\n\
    \n-: contract violation\n  expected: number?\n  given: '(1.0 2.0 3.0 4.0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfhe__kje.rkt:21:4\n\
    \n-: contract violation\n  expected: number?\n  given: '(1.0 2.0 3.0 4.0 5.0)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x numbers))) numbers)) \n     (length numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn6vav4tc.rkt:19:4\n\
    \n-: contract violation\n  expected: number?\n  given: '(1.0 2.0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn6vav4tc.rkt:20:4\n\
    \n-: contract violation\n  expected: number?\n  given: '(1.0 2.0 3.0 4.0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn6vav4tc.rkt:21:4\n\
    \n-: contract violation\n  expected: number?\n  given: '(1.0 2.0 3.0 4.0 5.0)\n\
    --------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) #(length numbers)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpynem2bu1.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpynem2bu1.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs (- numbers mean))) #(length numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n \
    \   (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnlv50eh4.rkt:11:34: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpnlv50eh4.rkt:11:34\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs numbers)) \n     (apply + (map length numbers))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpix5j1elt.rkt:19:4\n\
    \nlength: contract violation\n  expected: list?\n  given: 1.0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpix5j1elt.rkt:20:4\n\
    \nlength: contract violation\n  expected: list?\n  given: 1.0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpix5j1elt.rkt:21:4\n\
    \nlength: contract violation\n  expected: list?\n  given: 1.0\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs numbers)) (length numbers)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate mean_absolute_deviation))\n    (check-equal? (candidate\
    \ (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpity6yfcx.rkt:18:4

    actual:     1.5

    expected:   0.5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpity6yfcx.rkt:19:4

    actual:     2.5

    expected:   1.0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpity6yfcx.rkt:20:4

    actual:     3.0

    expected:   1.2

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (let ((mean\
    \ (mean numbers)))\n    (/ (apply + (map (lambda (x) (abs (- x mean))) numbers))\
    \ \n       (length numbers))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate mean_absolute_deviation))\n    (check-equal? (candidate\
    \ (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5_fgve4x.rkt:11:15: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmp5_fgve4x.rkt:11:15\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp96pwuz4v.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmp96pwuz4v.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) length))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpf1c_1ict.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpf1c_1ict.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpyzw0zss6.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpyzw0zss6.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpflunu1zl.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpflunu1zl.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) length))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpkgn2zu9b.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpkgn2zu9b.rkt:11:41\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs numbers)) (length numbers)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate mean_absolute_deviation))\n    (check-equal? (candidate\
    \ (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpt3lrwe_z.rkt:18:4

    actual:     1.5

    expected:   0.5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpt3lrwe_z.rkt:19:4

    actual:     2.5

    expected:   1.0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpt3lrwe_z.rkt:20:4

    actual:     3.0

    expected:   1.2

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) #(length numbers)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp4_ev0yk3.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmp4_ev0yk3.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpplzhs1jk.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpplzhs1jk.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (let ((mean\
    \ (mean numbers)))\n    (/ (apply + (map abs (- numbers mean))) (* (length numbers)\
    \ (length numbers)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate mean_absolute_deviation))\n    (check-equal? (candidate (list\
    \ 1.0 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpwnjmyp43.rkt:11:15: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpwnjmyp43.rkt:11:15\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp528egefy.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmp528egefy.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmplbx76gbs.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmplbx76gbs.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) #(length numbers)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpwxr0pqxz.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpwxr0pqxz.rkt:11:41\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (let ((mean\
    \ 0))\n    (for ((i numbers))\n      (set! mean (+ mean i))\n      (/ (- mean\
    \ mean) 2))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate mean_absolute_deviation))\n    (check-equal? (candidate (list 1.0\
    \ 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpiv3kjbmt.rkt:21:4

    actual:     #<void>

    expected:   0.5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpiv3kjbmt.rkt:22:4

    actual:     #<void>

    expected:   1.0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpiv3kjbmt.rkt:23:4

    actual:     #<void>

    expected:   1.2

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs (- numbers mean))) count))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate mean_absolute_deviation))\n    (check-equal? (candidate\
    \ (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnoz66h3y.rkt:11:34: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpnoz66h3y.rkt:11:34\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs numbers)) \n     (apply + (map length numbers))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphtu5zbvn.rkt:19:4\n\
    \nlength: contract violation\n  expected: list?\n  given: 1.0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphtu5zbvn.rkt:20:4\n\
    \nlength: contract violation\n  expected: list?\n  given: 1.0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphtu5zbvn.rkt:21:4\n\
    \nlength: contract violation\n  expected: list?\n  given: 1.0\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs (- numbers mean))) length))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate mean_absolute_deviation))\n    (check-equal? (candidate\
    \ (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp6fa_s0yf.rkt:11:34: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmp6fa_s0yf.rkt:11:34\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs (- numbers mean))) #(length numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n \
    \   (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmppyby436n.rkt:11:34: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmppyby436n.rkt:11:34\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (let ((mean\
    \ 0))\n    (for ((i numbers))\n      (set! mean (+ mean i))\n      (/ (- mean\
    \ mean) 2))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate mean_absolute_deviation))\n    (check-equal? (candidate (list 1.0\
    \ 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp9nkrdmi.rkt:21:4

    actual:     #<void>

    expected:   0.5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp9nkrdmi.rkt:22:4

    actual:     #<void>

    expected:   1.0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp9nkrdmi.rkt:23:4

    actual:     #<void>

    expected:   1.2

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) #(length numbers)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpplkz33x6.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpplkz33x6.rkt:11:41\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs numbers)) (length numbers)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate mean_absolute_deviation))\n    (check-equal? (candidate\
    \ (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmponbl115_.rkt:18:4

    actual:     1.5

    expected:   0.5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmponbl115_.rkt:19:4

    actual:     2.5

    expected:   1.0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmponbl115_.rkt:20:4

    actual:     3.0

    expected:   1.2

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs numbers)) (length numbers)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate mean_absolute_deviation))\n    (check-equal? (candidate\
    \ (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpiks15mkz.rkt:18:4

    actual:     1.5

    expected:   0.5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpiks15mkz.rkt:19:4

    actual:     2.5

    expected:   1.0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpiks15mkz.rkt:20:4

    actual:     3.0

    expected:   1.2

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpkx168cv1.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpkx168cv1.rkt:11:41\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x numbers))) numbers)) \n     (length numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtahi1id.rkt:19:4\n\
    \n-: contract violation\n  expected: number?\n  given: '(1.0 2.0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtahi1id.rkt:20:4\n\
    \n-: contract violation\n  expected: number?\n  given: '(1.0 2.0 3.0 4.0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtahi1id.rkt:21:4\n\
    \n-: contract violation\n  expected: number?\n  given: '(1.0 2.0 3.0 4.0 5.0)\n\
    --------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs (- numbers mean))) #(length numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n \
    \   (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpi09o64_o.rkt:11:34: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpi09o64_o.rkt:11:34\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (let ((mean\
    \ (mean numbers)))\n    (/ (apply + (map abs (- numbers mean))) \n       (length\
    \ numbers))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate mean_absolute_deviation))\n    (check-equal? (candidate (list 1.0\
    \ 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpojy55kuv.rkt:11:15: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpojy55kuv.rkt:11:15\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (let ((mean\
    \ 0))\n    (map (lambda (x)\n           (let ((diff (abs (- x mean))))\n     \
    \        (set! mean (+ mean x))\n             diff))\n         numbers)))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpws28f0bt.rkt:23:4

    actual:     ''(1.0 1.0)

    expected:   0.5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpws28f0bt.rkt:24:4

    actual:     ''(1.0 1.0 0.0 2.0)

    expected:   1.0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpws28f0bt.rkt:25:4

    actual:     ''(1.0 1.0 0.0 2.0 5.0)

    expected:   1.2

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpp6d10wvw.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpp6d10wvw.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs (- numbers mean))) length))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate mean_absolute_deviation))\n    (check-equal? (candidate\
    \ (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpzb0cu9ji.rkt:11:34: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpzb0cu9ji.rkt:11:34\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp40ek8a3e.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmp40ek8a3e.rkt:11:41\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs numbers)) (length numbers)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate mean_absolute_deviation))\n    (check-equal? (candidate\
    \ (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy_g1tyrz.rkt:18:4

    actual:     1.5

    expected:   0.5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy_g1tyrz.rkt:19:4

    actual:     2.5

    expected:   1.0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy_g1tyrz.rkt:20:4

    actual:     3.0

    expected:   1.2

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs (- numbers mean))) #(length numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n \
    \   (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp3c9thvcj.rkt:11:34: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmp3c9thvcj.rkt:11:34\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs numbers)) (length numbers)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate mean_absolute_deviation))\n    (check-equal? (candidate\
    \ (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp10ko3plj.rkt:18:4

    actual:     1.5

    expected:   0.5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp10ko3plj.rkt:19:4

    actual:     2.5

    expected:   1.0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp10ko3plj.rkt:20:4

    actual:     3.0

    expected:   1.2

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs numbers)) \n     (apply + (map length numbers))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpklovnrag.rkt:19:4\n\
    \nlength: contract violation\n  expected: list?\n  given: 1.0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpklovnrag.rkt:20:4\n\
    \nlength: contract violation\n  expected: list?\n  given: 1.0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpklovnrag.rkt:21:4\n\
    \nlength: contract violation\n  expected: list?\n  given: 1.0\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (let ((mean\
    \ 0))\n    (map (lambda (x) (+ x (/ mean x)))\n         numbers))\n  mean)\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmprzc8g0yu.rkt:14:2: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmprzc8g0yu.rkt:14:2\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (let ((mean\
    \ (mean numbers)))\n    (/ (apply + (map (lambda (x) (abs (- x mean))) numbers))\
    \ \n       (length numbers))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate mean_absolute_deviation))\n    (check-equal? (candidate\
    \ (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpo95dz31_.rkt:11:15: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpo95dz31_.rkt:11:15\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs numbers)) (length numbers)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate mean_absolute_deviation))\n    (check-equal? (candidate\
    \ (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyhfn5ksb.rkt:18:4

    actual:     1.5

    expected:   0.5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyhfn5ksb.rkt:19:4

    actual:     2.5

    expected:   1.0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyhfn5ksb.rkt:20:4

    actual:     3.0

    expected:   1.2

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (let ((mean\
    \ (mean numbers)))\n    (/ (apply + (map (lambda (x) (abs (- x mean))) numbers))\
    \ \n       (length numbers))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate mean_absolute_deviation))\n    (check-equal? (candidate\
    \ (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpfi64459f.rkt:11:15: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpfi64459f.rkt:11:15\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) length))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpm3m3j5ow.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpm3m3j5ow.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (let ((mean\
    \ (mean numbers)))\n    (/ (apply + (map abs (- numbers mean))) (- (length numbers)\
    \ 2))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ mean_absolute_deviation))\n    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpcav9xg_1.rkt:11:15: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpcav9xg_1.rkt:11:15\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxvpw2_qh.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpxvpw2_qh.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) #(length numbers)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpkb6o2xw_.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpkb6o2xw_.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (let ((mean\
    \ (mean numbers)))\n    (/ (apply + (map abs numbers)) mean)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpf_99kwms.rkt:11:15: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpf_99kwms.rkt:11:15\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (let ((mean\
    \ (mean numbers)))\n    (/ (apply + (map (lambda (x) (abs (- x mean))) numbers))\
    \ \n       (length numbers))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate mean_absolute_deviation))\n    (check-equal? (candidate\
    \ (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp1cl8q59m.rkt:11:15: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmp1cl8q59m.rkt:11:15\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs (- numbers mean))) #(length numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n \
    \   (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp1lwa6m0_.rkt:11:34: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmp1lwa6m0_.rkt:11:34\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs numbers)) (length numbers)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate mean_absolute_deviation))\n    (check-equal? (candidate\
    \ (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcv1p9ai_.rkt:18:4

    actual:     1.5

    expected:   0.5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcv1p9ai_.rkt:19:4

    actual:     2.5

    expected:   1.0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcv1p9ai_.rkt:20:4

    actual:     3.0

    expected:   1.2

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs numbers)) (length numbers)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate mean_absolute_deviation))\n    (check-equal? (candidate\
    \ (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbuh5mple.rkt:18:4

    actual:     1.5

    expected:   0.5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbuh5mple.rkt:19:4

    actual:     2.5

    expected:   1.0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbuh5mple.rkt:20:4

    actual:     3.0

    expected:   1.2

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs numbers)) (length numbers)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate mean_absolute_deviation))\n    (check-equal? (candidate\
    \ (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpul_7rb_t.rkt:18:4

    actual:     1.5

    expected:   0.5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpul_7rb_t.rkt:19:4

    actual:     2.5

    expected:   1.0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpul_7rb_t.rkt:20:4

    actual:     3.0

    expected:   1.2

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmptxw5pw4v.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmptxw5pw4v.rkt:11:41\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x numbers))) numbers)) \n     (length numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpamrm627b.rkt:19:4\n\
    \n-: contract violation\n  expected: number?\n  given: '(1.0 2.0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpamrm627b.rkt:20:4\n\
    \n-: contract violation\n  expected: number?\n  given: '(1.0 2.0 3.0 4.0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpamrm627b.rkt:21:4\n\
    \n-: contract violation\n  expected: number?\n  given: '(1.0 2.0 3.0 4.0 5.0)\n\
    --------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpy5r7zsh8.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpy5r7zsh8.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp4q187c3c.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmp4q187c3c.rkt:11:41\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x numbers))) numbers)) \n     (length numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7pv83qwt.rkt:19:4\n\
    \n-: contract violation\n  expected: number?\n  given: '(1.0 2.0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7pv83qwt.rkt:20:4\n\
    \n-: contract violation\n  expected: number?\n  given: '(1.0 2.0 3.0 4.0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7pv83qwt.rkt:21:4\n\
    \n-: contract violation\n  expected: number?\n  given: '(1.0 2.0 3.0 4.0 5.0)\n\
    --------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp4guj7d4z.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmp4guj7d4z.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs (- numbers mean))) count))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate mean_absolute_deviation))\n    (check-equal? (candidate\
    \ (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp2on0bqd2.rkt:11:34: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmp2on0bqd2.rkt:11:34\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs numbers)) (length numbers)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate mean_absolute_deviation))\n    (check-equal? (candidate\
    \ (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmt0zk8k3.rkt:18:4

    actual:     1.5

    expected:   0.5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmt0zk8k3.rkt:19:4

    actual:     2.5

    expected:   1.0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmt0zk8k3.rkt:20:4

    actual:     3.0

    expected:   1.2

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnbrfavk1.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpnbrfavk1.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmprqoy_jjh.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmprqoy_jjh.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp76o70h_d.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmp76o70h_d.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) #(length numbers)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpthurco_v.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpthurco_v.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs (- numbers mean))) count))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate mean_absolute_deviation))\n    (check-equal? (candidate\
    \ (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp1u4inxnl.rkt:11:34: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmp1u4inxnl.rkt:11:34\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) #(length numbers)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpi7ioo_11.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpi7ioo_11.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs (- numbers mean))) #(length numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n \
    \   (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpmaldxhnr.rkt:11:34: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpmaldxhnr.rkt:11:34\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpe7yx9v6l.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpe7yx9v6l.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs (- numbers mean))) numbers))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate mean_absolute_deviation))\n    (check-equal? (candidate\
    \ (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpbtfjggky.rkt:11:34: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpbtfjggky.rkt:11:34\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs (- numbers mean))) count))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate mean_absolute_deviation))\n    (check-equal? (candidate\
    \ (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp9dmop2qw.rkt:11:34: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmp9dmop2qw.rkt:11:34\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (let ((mean\
    \ 0))\n    (map (lambda (x) (+ x (/ x mean)))\n         numbers)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpapi9k7lu.rkt:20:4


    /: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpapi9k7lu.rkt:21:4


    /: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpapi9k7lu.rkt:22:4


    /: division by zero

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs numbers)) \n     (apply + (map length numbers))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0i2akkeg.rkt:19:4\n\
    \nlength: contract violation\n  expected: list?\n  given: 1.0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0i2akkeg.rkt:20:4\n\
    \nlength: contract violation\n  expected: list?\n  given: 1.0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0i2akkeg.rkt:21:4\n\
    \nlength: contract violation\n  expected: list?\n  given: 1.0\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) #(length numbers)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp82dj_4kg.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmp82dj_4kg.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs (- numbers mean))) numbers))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate mean_absolute_deviation))\n    (check-equal? (candidate\
    \ (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpx7mwxi0h.rkt:11:34: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpx7mwxi0h.rkt:11:34\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (let ((mean\
    \ 0))\n    (for ((x numbers))\n      (set! mean (+ mean x))\n      (/ (- mean\
    \ x) numbers))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate mean_absolute_deviation))\n    (check-equal? (candidate (list 1.0\
    \ 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvdpa_gyx.rkt:21:4\n\
    \n/: contract violation\n  expected: number?\n  given: '(1.0 2.0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvdpa_gyx.rkt:22:4\n\
    \n/: contract violation\n  expected: number?\n  given: '(1.0 2.0 3.0 4.0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvdpa_gyx.rkt:23:4\n\
    \n/: contract violation\n  expected: number?\n  given: '(1.0 2.0 3.0 4.0 5.0)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x numbers))) numbers)) \n     (length numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppjh0mn8g.rkt:19:4\n\
    \n-: contract violation\n  expected: number?\n  given: '(1.0 2.0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppjh0mn8g.rkt:20:4\n\
    \n-: contract violation\n  expected: number?\n  given: '(1.0 2.0 3.0 4.0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppjh0mn8g.rkt:21:4\n\
    \n-: contract violation\n  expected: number?\n  given: '(1.0 2.0 3.0 4.0 5.0)\n\
    --------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0sswvezd.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmp0sswvezd.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxmpr94tq.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpxmpr94tq.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmps9zp98i2.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmps9zp98i2.rkt:11:41\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs numbers)) \n     (apply + (map length numbers))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpemw1e8h8.rkt:19:4\n\
    \nlength: contract violation\n  expected: list?\n  given: 1.0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpemw1e8h8.rkt:20:4\n\
    \nlength: contract violation\n  expected: list?\n  given: 1.0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpemw1e8h8.rkt:21:4\n\
    \nlength: contract violation\n  expected: list?\n  given: 1.0\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) #(length numbers)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqd7u3l9a.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpqd7u3l9a.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (let ((mean\
    \ (mean numbers)))\n    (/ (apply + (map abs numbers)) mean)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxjcgur0m.rkt:11:15: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpxjcgur0m.rkt:11:15\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (let ((mean\
    \ (mean numbers)))\n    (/ (apply + (map abs numbers)) mean)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmprd6i82e3.rkt:11:15: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmprd6i82e3.rkt:11:15\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp9h00e74p.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmp9h00e74p.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp8iwtu_gh.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmp8iwtu_gh.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs (- numbers mean))) numbers))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate mean_absolute_deviation))\n    (check-equal? (candidate\
    \ (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl8nontwe.rkt:11:34: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpl8nontwe.rkt:11:34\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x numbers))) numbers)) \n     (length numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk40p9f62.rkt:19:4\n\
    \n-: contract violation\n  expected: number?\n  given: '(1.0 2.0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk40p9f62.rkt:20:4\n\
    \n-: contract violation\n  expected: number?\n  given: '(1.0 2.0 3.0 4.0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk40p9f62.rkt:21:4\n\
    \n-: contract violation\n  expected: number?\n  given: '(1.0 2.0 3.0 4.0 5.0)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x numbers))) numbers)) \n     (length numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv9ny3l6u.rkt:19:4\n\
    \n-: contract violation\n  expected: number?\n  given: '(1.0 2.0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv9ny3l6u.rkt:20:4\n\
    \n-: contract violation\n  expected: number?\n  given: '(1.0 2.0 3.0 4.0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv9ny3l6u.rkt:21:4\n\
    \n-: contract violation\n  expected: number?\n  given: '(1.0 2.0 3.0 4.0 5.0)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs numbers)) (length numbers)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate mean_absolute_deviation))\n    (check-equal? (candidate\
    \ (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpubt5228h.rkt:18:4

    actual:     1.5

    expected:   0.5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpubt5228h.rkt:19:4

    actual:     2.5

    expected:   1.0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpubt5228h.rkt:20:4

    actual:     3.0

    expected:   1.2

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs numbers)) (length numbers)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate mean_absolute_deviation))\n    (check-equal? (candidate\
    \ (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp45_ilttn.rkt:18:4

    actual:     1.5

    expected:   0.5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp45_ilttn.rkt:19:4

    actual:     2.5

    expected:   1.0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp45_ilttn.rkt:20:4

    actual:     3.0

    expected:   1.2

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs numbers)) (length numbers)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate mean_absolute_deviation))\n    (check-equal? (candidate\
    \ (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2cvkmhbg.rkt:18:4

    actual:     1.5

    expected:   0.5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2cvkmhbg.rkt:19:4

    actual:     2.5

    expected:   1.0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2cvkmhbg.rkt:20:4

    actual:     3.0

    expected:   1.2

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (let ((mean\
    \ (mean numbers)))\n    (/ (apply + (map abs (- numbers mean))) \n       (length\
    \ numbers))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate mean_absolute_deviation))\n    (check-equal? (candidate (list 1.0\
    \ 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp9o9plsp3.rkt:11:15: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmp9o9plsp3.rkt:11:15\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs numbers)) \n     (length numbers)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n    (check-equal?\
    \ (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0\
    \ 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmxqfm2sz.rkt:19:4

    actual:     1.5

    expected:   0.5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmxqfm2sz.rkt:20:4

    actual:     2.5

    expected:   1.0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmxqfm2sz.rkt:21:4

    actual:     3.0

    expected:   1.2

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) length))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5_ohhq8l.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmp5_ohhq8l.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs (- numbers mean))) \n     (length numbers)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpdmpitidx.rkt:11:34: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpdmpitidx.rkt:11:34\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp3845kk_b.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmp3845kk_b.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs (- numbers mean))) \n     (length numbers)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpss39xvik.rkt:11:34: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpss39xvik.rkt:11:34\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (let ((mean\
    \ 0))\n    (for ((i numbers))\n      (set! mean (+ mean i))\n      (set! mean\
    \ (/ mean numbers))\n      (set! mean 0))\n    mean))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n \
    \   (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz6opjlb4.rkt:23:4\n\
    \n/: contract violation\n  expected: number?\n  given: '(1.0 2.0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz6opjlb4.rkt:24:4\n\
    \n/: contract violation\n  expected: number?\n  given: '(1.0 2.0 3.0 4.0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz6opjlb4.rkt:25:4\n\
    \n/: contract violation\n  expected: number?\n  given: '(1.0 2.0 3.0 4.0 5.0)\n\
    --------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpgsmhcrpw.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpgsmhcrpw.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (let ((mean\
    \ (mean numbers)))\n    (/ (apply + (map abs (- numbers mean))) \n       (length\
    \ numbers))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate mean_absolute_deviation))\n    (check-equal? (candidate (list 1.0\
    \ 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmprqxib3tr.rkt:11:15: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmprqxib3tr.rkt:11:15\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x numbers))) numbers)) \n     (length numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt592i4z9.rkt:19:4\n\
    \n-: contract violation\n  expected: number?\n  given: '(1.0 2.0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt592i4z9.rkt:20:4\n\
    \n-: contract violation\n  expected: number?\n  given: '(1.0 2.0 3.0 4.0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt592i4z9.rkt:21:4\n\
    \n-: contract violation\n  expected: number?\n  given: '(1.0 2.0 3.0 4.0 5.0)\n\
    --------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (let ((mean\
    \ (mean numbers)))\n    (/ (apply + (map abs numbers)) mean)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpe42m2049.rkt:11:15: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpe42m2049.rkt:11:15\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs numbers)) \n     (apply + (map length numbers))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn0vig1_a.rkt:19:4\n\
    \nlength: contract violation\n  expected: list?\n  given: 1.0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn0vig1_a.rkt:20:4\n\
    \nlength: contract violation\n  expected: list?\n  given: 1.0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn0vig1_a.rkt:21:4\n\
    \nlength: contract violation\n  expected: list?\n  given: 1.0\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) \n     (length numbers)))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpwwpph4my.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpwwpph4my.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpsok_2vlq.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpsok_2vlq.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs (- numbers mean))) #(length numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n \
    \   (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmptsofctw9.rkt:11:34: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmptsofctw9.rkt:11:34\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) #(length numbers)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp_16nrlyh.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmp_16nrlyh.rkt:11:41\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs numbers)) \n     (apply + (map length numbers))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgpy2kcmv.rkt:19:4\n\
    \nlength: contract violation\n  expected: list?\n  given: 1.0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgpy2kcmv.rkt:20:4\n\
    \nlength: contract violation\n  expected: list?\n  given: 1.0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgpy2kcmv.rkt:21:4\n\
    \nlength: contract violation\n  expected: list?\n  given: 1.0\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpspz4tjwu.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpspz4tjwu.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs (- numbers mean))) count))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate mean_absolute_deviation))\n    (check-equal? (candidate\
    \ (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpm88ky48b.rkt:11:34: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpm88ky48b.rkt:11:34\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpvk1eptc8.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpvk1eptc8.rkt:11:41\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs numbers)) (length numbers)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate mean_absolute_deviation))\n    (check-equal? (candidate\
    \ (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqqtk987y.rkt:18:4

    actual:     1.5

    expected:   0.5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqqtk987y.rkt:19:4

    actual:     2.5

    expected:   1.0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqqtk987y.rkt:20:4

    actual:     3.0

    expected:   1.2

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (let ((mean\
    \ 0))\n    (map (lambda (x) (+ x mean)) numbers)\n    (/ (- mean mean numbers)\
    \ (length numbers))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate mean_absolute_deviation))\n    (check-equal? (candidate (list\
    \ 1.0 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw1bn38tz.rkt:20:4\n\
    \n-: contract violation\n  expected: number?\n  given: '(1.0 2.0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw1bn38tz.rkt:21:4\n\
    \n-: contract violation\n  expected: number?\n  given: '(1.0 2.0 3.0 4.0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw1bn38tz.rkt:22:4\n\
    \n-: contract violation\n  expected: number?\n  given: '(1.0 2.0 3.0 4.0 5.0)\n\
    --------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp49_y2vfn.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmp49_y2vfn.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs (- numbers mean))) #(length numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n \
    \   (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpy9665n9s.rkt:11:34: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpy9665n9s.rkt:11:34\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpjq16acxp.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpjq16acxp.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs (- numbers mean))) numbers))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate mean_absolute_deviation))\n    (check-equal? (candidate\
    \ (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpeqxv4f5v.rkt:11:34: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpeqxv4f5v.rkt:11:34\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs numbers)) (length numbers)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate mean_absolute_deviation))\n    (check-equal? (candidate\
    \ (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp697vhkvs.rkt:18:4

    actual:     1.5

    expected:   0.5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp697vhkvs.rkt:19:4

    actual:     2.5

    expected:   1.0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp697vhkvs.rkt:20:4

    actual:     3.0

    expected:   1.2

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp816x83q5.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmp816x83q5.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs (- numbers mean))) numbers))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate mean_absolute_deviation))\n    (check-equal? (candidate\
    \ (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpvod5amn6.rkt:11:34: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpvod5amn6.rkt:11:34\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs numbers)) (length numbers)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate mean_absolute_deviation))\n    (check-equal? (candidate\
    \ (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptrx26ewl.rkt:18:4

    actual:     1.5

    expected:   0.5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptrx26ewl.rkt:19:4

    actual:     2.5

    expected:   1.0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptrx26ewl.rkt:20:4

    actual:     3.0

    expected:   1.2

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpgfq9xcnr.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpgfq9xcnr.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpwmcpi3o4.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpwmcpi3o4.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs (- numbers mean))) #(length numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n \
    \   (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp_uvaimoy.rkt:11:34: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmp_uvaimoy.rkt:11:34\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) #(length numbers)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpi6uozl56.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpi6uozl56.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs (- numbers mean))) #(length numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n \
    \   (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp9fpb_1zh.rkt:11:34: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmp9fpb_1zh.rkt:11:34\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) #(length numbers)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp4jcsptkx.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmp4jcsptkx.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqjpztv52.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpqjpztv52.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpna6snix7.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpna6snix7.rkt:11:41\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs numbers)) (length numbers)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate mean_absolute_deviation))\n    (check-equal? (candidate\
    \ (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpg7enyfcq.rkt:18:4

    actual:     1.5

    expected:   0.5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpg7enyfcq.rkt:19:4

    actual:     2.5

    expected:   1.0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpg7enyfcq.rkt:20:4

    actual:     3.0

    expected:   1.2

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpfws2cy5p.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpfws2cy5p.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpjiq_07on.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpjiq_07on.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) \n     (length numbers)))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpx9daalpi.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpx9daalpi.rkt:11:41\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs numbers)) (length numbers)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate mean_absolute_deviation))\n    (check-equal? (candidate\
    \ (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4p5tqlij.rkt:18:4

    actual:     1.5

    expected:   0.5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4p5tqlij.rkt:19:4

    actual:     2.5

    expected:   1.0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4p5tqlij.rkt:20:4

    actual:     3.0

    expected:   1.2

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) #(length numbers)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpcotvvtm8.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpcotvvtm8.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp2plek01e.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmp2plek01e.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpih4_fzsf.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpih4_fzsf.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpjzjr415u.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpjzjr415u.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs (- numbers mean))) #(length numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n \
    \   (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp1al93oyr.rkt:11:34: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmp1al93oyr.rkt:11:34\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x numbers))) numbers)) \n     (length numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwsxnxd2q.rkt:19:4\n\
    \n-: contract violation\n  expected: number?\n  given: '(1.0 2.0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwsxnxd2q.rkt:20:4\n\
    \n-: contract violation\n  expected: number?\n  given: '(1.0 2.0 3.0 4.0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwsxnxd2q.rkt:21:4\n\
    \n-: contract violation\n  expected: number?\n  given: '(1.0 2.0 3.0 4.0 5.0)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x numbers))) numbers)) \n     (length numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp375e9qfb.rkt:19:4\n\
    \n-: contract violation\n  expected: number?\n  given: '(1.0 2.0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp375e9qfb.rkt:20:4\n\
    \n-: contract violation\n  expected: number?\n  given: '(1.0 2.0 3.0 4.0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp375e9qfb.rkt:21:4\n\
    \n-: contract violation\n  expected: number?\n  given: '(1.0 2.0 3.0 4.0 5.0)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs numbers)) (length numbers)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate mean_absolute_deviation))\n    (check-equal? (candidate\
    \ (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfnpy76kc.rkt:18:4

    actual:     1.5

    expected:   0.5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfnpy76kc.rkt:19:4

    actual:     2.5

    expected:   1.0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfnpy76kc.rkt:20:4

    actual:     3.0

    expected:   1.2

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) #(length numbers)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpr53o_gll.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpr53o_gll.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp_8bedvdt.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmp_8bedvdt.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5l476bty.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmp5l476bty.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5e859qtc.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmp5e859qtc.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (let ((mean\
    \ (mean numbers)))\n    (/ (apply + (map (lambda (x) (abs (- x mean))) numbers))\
    \ \n       (length numbers))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate mean_absolute_deviation))\n    (check-equal? (candidate\
    \ (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp3y9tnfhq.rkt:11:15: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmp3y9tnfhq.rkt:11:15\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp9iwii6o1.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmp9iwii6o1.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (let ((mean\
    \ (mean numbers)))\n    (/ (apply + (map abs (- numbers mean))) (* (length numbers)\
    \ (length numbers)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate mean_absolute_deviation))\n    (check-equal? (candidate (list\
    \ 1.0 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxi5lf3tp.rkt:11:15: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpxi5lf3tp.rkt:11:15\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) #(length numbers)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp9jllftxa.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmp9jllftxa.rkt:11:41\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs numbers)) (length numbers)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate mean_absolute_deviation))\n    (check-equal? (candidate\
    \ (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi368f0hv.rkt:18:4

    actual:     1.5

    expected:   0.5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi368f0hv.rkt:19:4

    actual:     2.5

    expected:   1.0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi368f0hv.rkt:20:4

    actual:     3.0

    expected:   1.2

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpkxz76fcq.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpkxz76fcq.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxeimunlq.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpxeimunlq.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp826btpde.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmp826btpde.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpt7ail6c7.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpt7ail6c7.rkt:11:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7v8zh98f.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmp7v8zh98f.rkt:11:41\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (let ((mean\
    \ 0))\n    (map (lambda (x) (+ x (/ mean x)))\n         numbers)\n    (/ (apply\
    \ + numbers) (length numbers))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate mean_absolute_deviation))\n    (check-equal? (candidate\
    \ (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7k2w_f8y.rkt:21:4

    actual:     1.5

    expected:   0.5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7k2w_f8y.rkt:22:4

    actual:     2.5

    expected:   1.0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7k2w_f8y.rkt:23:4

    actual:     3.0

    expected:   1.2

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmphomrfbel.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmphomrfbel.rkt:11:41\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs numbers)) \n     (apply + (map length numbers))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb0qvswu7.rkt:19:4\n\
    \nlength: contract violation\n  expected: list?\n  given: 1.0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb0qvswu7.rkt:20:4\n\
    \nlength: contract violation\n  expected: list?\n  given: 1.0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb0qvswu7.rkt:21:4\n\
    \nlength: contract violation\n  expected: list?\n  given: 1.0\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (let ((mean\
    \ (mean numbers)))\n    (/ (apply + (map (lambda (x) (abs (- x mean))) numbers))\
    \ \n       (length numbers))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate mean_absolute_deviation))\n    (check-equal? (candidate\
    \ (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpw69bj3iy.rkt:11:15: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpw69bj3iy.rkt:11:15\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs (- numbers mean))) count))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate mean_absolute_deviation))\n    (check-equal? (candidate\
    \ (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpla2ly627.rkt:11:34: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpla2ly627.rkt:11:34\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs (- numbers mean))) #(length numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n \
    \   (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpz87epkc0.rkt:11:34: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpz87epkc0.rkt:11:34\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x numbers))) numbers)) \n     (length numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpythhdfwx.rkt:19:4\n\
    \n-: contract violation\n  expected: number?\n  given: '(1.0 2.0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpythhdfwx.rkt:20:4\n\
    \n-: contract violation\n  expected: number?\n  given: '(1.0 2.0 3.0 4.0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpythhdfwx.rkt:21:4\n\
    \n-: contract violation\n  expected: number?\n  given: '(1.0 2.0 3.0 4.0 5.0)\n\
    --------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs (- numbers mean))) #(length numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n \
    \   (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmptibp1w90.rkt:11:34: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmptibp1w90.rkt:11:34\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) count))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpi4i0d75_.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpi4i0d75_.rkt:11:41\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x numbers))) numbers)) \n     (length numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsacppln0.rkt:19:4\n\
    \n-: contract violation\n  expected: number?\n  given: '(1.0 2.0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsacppln0.rkt:20:4\n\
    \n-: contract violation\n  expected: number?\n  given: '(1.0 2.0 3.0 4.0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsacppln0.rkt:21:4\n\
    \n-: contract violation\n  expected: number?\n  given: '(1.0 2.0 3.0 4.0 5.0)\n\
    --------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) #(length numbers)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
    \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpvkgo1y32.rkt:11:41: mean: unbound identifier\n  in: mean\n  location...:\n\
    \   /tmp/tmpvkgo1y32.rkt:11:41\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
    \ the average absolute difference between each\n;; element and a centerpoint (mean\
    \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (/ (apply\
    \ + (map abs numbers)) (length numbers)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate mean_absolute_deviation))\n    (check-equal? (candidate\
    \ (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0)) 1.0)\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) 1.2)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxfguacyr.rkt:18:4

    actual:     1.5

    expected:   0.5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxfguacyr.rkt:19:4

    actual:     2.5

    expected:   1.0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxfguacyr.rkt:20:4

    actual:     3.0

    expected:   1.2

    --------------------

    '
  stdout: ''
