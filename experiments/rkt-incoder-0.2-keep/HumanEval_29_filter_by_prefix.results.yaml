language: racket
name: HumanEval_29_filter_by_prefix
results:
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb1uh3yin.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmqb_st75.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcri13d35.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqan58o69.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuzen6lv9.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (str)\n         \
    \   (string=? prefix str))\n          strings))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmgy_euod.rkt:19:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpic5dzzu2.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) '()]\n  \
    \      [(equal? (first strings) prefix) (cons (first strings) (filter_by_prefix\
    \ (rest strings) prefix))]\n        [else (filter_by_prefix (rest strings) prefix)]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp27q6j3ae.rkt:19:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcj656r8t.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond\n    [(empty? strings) strings]\n\
    \    [(equal? (first strings) prefix) (cons (first strings) strings)]\n    [else\
    \ (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzliseca0.rkt:20:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond\n    [(empty? strings) strings]\n\
    \    [(equal? (first strings) prefix) (cons (first strings) strings)]\n    [else\
    \ (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_mcrleu.rkt:20:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpeglu7u5m.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond\n    [(empty? strings) strings]\n\
    \    [(equal? (first strings) prefix) (cons (first strings) strings)]\n    [else\
    \ (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpypmvd215.rkt:20:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplqyqg36a.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyocu4twg.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnnafm85y.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpao8bzknn.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbif5jonn.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond\n    [(empty? strings) strings]\n\
    \    [(equal? (first strings) prefix) (cons (first strings) strings)]\n    [else\
    \ (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi8ejmk28.rkt:20:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpypvruzcr.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (x) (equal? (string-ref\
    \ x 0) prefix)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1n1oeblc.rkt:17:4

    actual:     ''()

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjmizc7bo.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond\n    [(empty? strings) strings]\n\
    \    [(equal? (first strings) prefix) (cons (first strings) strings)]\n    [else\
    \ (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbexfbnwv.rkt:20:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond\n    [(empty? strings) strings]\n\
    \    [(equal? (first strings) prefix) (cons (first strings) strings)]\n    [else\
    \ (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp371hvwlz.rkt:20:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) '()]\n  \
    \      [(equal? (first strings) prefix) (cons (first strings) strings)]\n    \
    \    [else (cons (first strings)\n                    (filter_by_prefix (rest\
    \ strings)\n                                    prefix))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz4lq5idg.rkt:21:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (x) (string-match\
    \ prefix x))\n         strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list\
    \ ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"\
    xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"\
    ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpgz068z_x.rkt:9:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpgz068z_x.rkt:9:23\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1l0o8hli.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond\n    [(empty? strings) strings]\n\
    \    [(equal? (first strings) prefix) (filter_by_prefix (rest strings) prefix)]\n\
    \    [else (cons (first strings) (filter_by_prefix (rest strings) prefix))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsbkvad64.rkt:20:4

    actual:     ''("asd" "xxy" "john doe" "xxxAAA")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) '()]\n  \
    \      [(equal? (first strings) prefix) (cons (first strings) (filter_by_prefix\
    \ (rest strings) prefix))]\n        [else (filter_by_prefix (rest strings) prefix)]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkdawxr3a.rkt:19:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond\n    [(empty? strings) strings]\n\
    \    [(equal? (first strings) prefix) (cons (first strings) strings)]\n    [else\
    \ (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp68a0mzag.rkt:20:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond\n    [(empty? strings) strings]\n\
    \    [(equal? (first strings) prefix) strings]\n    [else (cons (first strings)\
    \ (filter_by_prefix (rest strings) prefix))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvbk0yeu_.rkt:20:4

    actual:     ''("xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpymixuhyq.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) '()]\n  \
    \      [(equal? (first strings) prefix) (cons (first strings) strings)]\n    \
    \    [else (cons (first strings)\n                    (filter_by_prefix (rest\
    \ strings)\n                                    prefix))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp731rx4k2.rkt:21:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9__mqqq0.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ph97vz5.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxv9bzsq2.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpayjdlj7r.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond\n    [(empty? strings) strings]\n\
    \    [(equal? (first strings) prefix) (cons (first strings) strings)]\n    [else\
    \ (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnywzp4_u.rkt:20:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6m7j1z2d.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond\n    [(empty? strings) strings]\n\
    \    [(equal? (first strings) prefix) (cons (first strings) strings)]\n    [else\
    \ (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1y855a1o.rkt:20:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond\n    [(empty? strings) strings]\n\
    \    [(equal? (first strings) prefix) (cons (first strings) strings)]\n    [else\
    \ (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfzw6gah9.rkt:20:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgwn59so6.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) '()]\n  \
    \      [(equal? (first strings) prefix) (cons (first strings) strings)]\n    \
    \    [else (cons (first strings)\n                    (filter_by_prefix (rest\
    \ strings) prefix))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpshc7g3os.rkt:20:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpisc7f9sz.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond\n    [(empty? strings) strings]\n\
    \    [(equal? (first strings) prefix) (filter_by_prefix (rest strings) prefix)]\n\
    \    [else (cons (first strings) (filter_by_prefix (rest strings) prefix))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjd7roqiq.rkt:20:4

    actual:     ''("asd" "xxy" "john doe" "xxxAAA")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr7dxkio6.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (str)\n         \
    \   (string-match prefix str))\n          strings))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpu1pot0dt.rkt:10:13: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpu1pot0dt.rkt:10:13\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb2yf05ok.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond\n    [(empty? strings) strings]\n\
    \    [(equal? (first strings) prefix) (cons (first strings) strings)]\n    [else\
    \ (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9wwz9gmd.rkt:20:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) '()]\n  \
    \      [(equal? (first strings) prefix) (cons (first strings) strings)]\n    \
    \    [else (cons (first strings)\n                    (filter_by_prefix (rest\
    \ strings) prefix))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp509prr6d.rkt:20:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond\n    [(empty? strings) strings]\n\
    \    [(equal? (first strings) prefix) strings]\n    [else (cons (first strings)\n\
    \                (filter_by_prefix (rest strings) prefix))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpammg2rsc.rkt:21:4

    actual:     ''("xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptk9gav3h.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) '()]\n  \
    \      [(equal? (first strings) prefix) (cons (first strings) (filter_by_prefix\
    \ (rest strings) prefix))]\n        [else (filter_by_prefix (rest strings) prefix)]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmi39qv5_.rkt:19:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_wutnjz.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond\n    [(empty? strings) strings]\n\
    \    [(equal? (first strings) prefix) (cons (first strings) strings)]\n    [else\
    \ (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphg20v7w1.rkt:20:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7bwphcml.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (x) (equal? (substring\
    \ x 0 length) prefix)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list\
    \ ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"\
    xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"\
    ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphkh0cczl.rkt:17:4\n\
    \nsubstring: contract violation\n  expected: exact-nonnegative-integer?\n  given:\
    \ #<procedure:length>\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpajdur6z5.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond\n    [(empty? strings) strings]\n\
    \    [(equal? (first strings) prefix) (cons (first strings) strings)]\n    [else\
    \ (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqp_l4mga.rkt:20:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm28ejjdb.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond\n    [(empty? strings) strings]\n\
    \    [(equal? (first strings) prefix) (cons (first strings) strings)]\n    [else\
    \ (cons (first strings)\n                (filter_by_prefix (rest strings) prefix))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpc58z652p.rkt:21:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (x) (string-match\
    \ prefix x))\n         strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list\
    \ ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"\
    xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"\
    ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpe2q6_bf8.rkt:9:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpe2q6_bf8.rkt:9:23\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond\n    [(empty? strings) strings]\n\
    \    [(equal? (first strings) prefix) (filter_by_prefix (rest strings) prefix)]\n\
    \    [else (cons (first strings) (filter_by_prefix (rest strings) prefix))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi28u6c6s.rkt:20:4

    actual:     ''("asd" "xxy" "john doe" "xxxAAA")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp5xov8gn.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond\n    [(empty? strings) strings]\n\
    \    [(equal? (first strings) prefix) (cons (first strings) strings)]\n    [else\
    \ (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp85qht9ad.rkt:20:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond\n    [(empty? strings) strings]\n\
    \    [(equal? (first strings) prefix) (cons (first strings) strings)]\n    [else\
    \ (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr4wolrn8.rkt:20:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond\n    [(empty? strings) strings]\n\
    \    [(equal? (first strings) prefix) (cons (first strings) strings)]\n    [else\
    \ (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps20tlvks.rkt:20:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (x) (equal? (substring\
    \ x 0) prefix)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr7kudjri.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpljkxr5zb.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) '()]\n  \
    \      [(equal? (first strings) prefix) (cons (first strings) strings)]\n    \
    \    [else (cons (first strings)\n                    (filter_by_prefix (rest\
    \ strings) prefix))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpavdw_pek.rkt:20:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfiqyt9ml.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpup15hj5t.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoc__1w84.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuiskiz9x.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpn3gjpuyi.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6wa4alu4.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2ayq0z8u.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond\n    [(empty? strings) strings]\n\
    \    [(equal? (first strings) prefix) (cons (first strings) strings)]\n    [else\
    \ (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsa4k6re0.rkt:20:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond\n    [(empty? strings) strings]\n\
    \    [(equal? (first strings) prefix) (cons (first strings) strings)]\n    [else\
    \ (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp45osxdsj.rkt:20:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (str)\n         \
    \  (string-match prefix str))\n         strings))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmprgcdryi_.rkt:10:12: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmprgcdryi_.rkt:10:12\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv_vat0ua.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (x) (string-match\
    \ prefix x))\n         strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list\
    \ ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"\
    xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"\
    ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp_ryi_e0m.rkt:9:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmp_ryi_e0m.rkt:9:23\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp97e4kywx.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond\n    [(empty? strings) strings]\n\
    \    [(equal? (first strings) prefix) (filter_by_prefix (rest strings) prefix)]\n\
    \    [else (cons (first strings) (filter_by_prefix (rest strings) prefix))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7294twfv.rkt:20:4

    actual:     ''("asd" "xxy" "john doe" "xxxAAA")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_j_n4kz5.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1upkt9jy.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbutf1ztl.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38dt2quv.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjsvw8qjg.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvu6qgvjq.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphxehh42t.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnazyfpv4.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond\n    [(empty? strings) strings]\n\
    \    [(equal? (first strings) prefix) (filter_by_prefix (rest strings) prefix)]\n\
    \    [else (cons (first strings) (filter_by_prefix (rest strings) prefix))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_nrru2qs.rkt:20:4

    actual:     ''("asd" "xxy" "john doe" "xxxAAA")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond\n    [(empty? strings) strings]\n\
    \    [(equal? (first strings) prefix) (cons (first strings) strings)]\n    [else\
    \ (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp52o473gp.rkt:20:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_bi057hc.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) '()]\n  \
    \      [(equal? (first strings) prefix) (cons (first strings) (filter_by_prefix\
    \ (rest strings) prefix))]\n        [else (filter_by_prefix (rest strings) prefix)]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprrx6t69l.rkt:19:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkc17fe8a.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) '()]\n  \
    \      [(equal? (first strings) prefix) (cons (first strings) strings)]\n    \
    \    [else (cons (first strings)\n                    (filter_by_prefix (rest\
    \ strings) prefix))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_eyc8nog.rkt:20:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprij7dvpe.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpais6gpz2.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond\n    [(empty? strings) strings]\n\
    \    [(equal? (first strings) prefix) (filter_by_prefix (rest strings) prefix)]\n\
    \    [else (cons (first strings) (filter_by_prefix (rest strings) prefix))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy669_ryv.rkt:20:4

    actual:     ''("asd" "xxy" "john doe" "xxxAAA")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) '()]\n  \
    \      [(equal? (first strings) prefix) (cons (first strings) (filter_by_prefix\
    \ (rest strings) prefix))]\n        [else (filter_by_prefix (rest strings) prefix)]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvtgf4sk_.rkt:19:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplxmy3sm1.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpptazx287.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (x) (string-prefix?\
    \ x prefix)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp47e6ch7s.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond\n    [(empty? strings) strings]\n\
    \    [(equal? (first strings) prefix) (cons (first strings) strings)]\n    [else\
    \ (cons (first strings)\n                (filter_by_prefix (rest strings)\n  \
    \                              prefix))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list\
    \ ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"\
    xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"\
    ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7ur2kx2v.rkt:22:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5gser02l.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond\n    [(empty? strings) strings]\n\
    \    [(equal? (first strings) prefix) (cons (first strings) strings)]\n    [else\
    \ (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6zntjhhl.rkt:20:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp66lk1ptg.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpozvigazi.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (x) (equal? (substring\
    \ x 0) prefix)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6ytbfvxk.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_o6bw3zr.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (x) (string-match\
    \ prefix x))\n         strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list\
    \ ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"\
    xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"\
    ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpy5o78tul.rkt:9:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpy5o78tul.rkt:9:23\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (x) (string-match\
    \ prefix x))\n         strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list\
    \ ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"\
    xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"\
    ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp029t1z6y.rkt:9:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmp029t1z6y.rkt:9:23\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdzzq1fzp.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond\n    [(empty? strings) strings]\n\
    \    [(equal? (first strings) prefix) (cons (first strings) strings)]\n    [else\
    \ (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwo5487hi.rkt:20:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp75qna8u9.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond\n    [(empty? strings) strings]\n\
    \    [(equal? (first strings) prefix) (filter_by_prefix (rest strings) prefix)]\n\
    \    [else (cons (first strings) (filter_by_prefix (rest strings) prefix))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndi3_1ka.rkt:20:4

    actual:     ''("asd" "xxy" "john doe" "xxxAAA")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (x) (equal? (string-prefix\
    \ prefix x) prefix)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list\
    \ ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"\
    xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"\
    ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp4dq16vzn.rkt:9:31: string-prefix: unbound identifier\n  in: string-prefix\n\
    \  location...:\n   /tmp/tmp4dq16vzn.rkt:9:31\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmi4_1n4z.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond\n    [(empty? strings) strings]\n\
    \    [(equal? (first strings) prefix) (filter_by_prefix (rest strings) prefix)]\n\
    \    [else (cons (first strings) (filter_by_prefix (rest strings) prefix))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_567ol6i.rkt:20:4

    actual:     ''("asd" "xxy" "john doe" "xxxAAA")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond\n    [(empty? strings) strings]\n\
    \    [(equal? (first strings) prefix) strings]\n    [else (cons (first strings)\
    \ (filter_by_prefix (rest strings) prefix))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphdad8p57.rkt:20:4

    actual:     ''("xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfxt8vphy.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp892xhc59.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0gd13a2_.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfse49ejj.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_rf5qb_p.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjvpszouj.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond\n    [(empty? strings) strings]\n\
    \    [(equal? (first strings) prefix) (cons (first strings) strings)]\n    [else\
    \ (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjyztdt8m.rkt:20:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjab0uz85.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (str)\n         \
    \   (string-match prefix str))\n          strings))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmppkhlueg0.rkt:10:13: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmppkhlueg0.rkt:10:13\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptox43q7x.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0d02o39w.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (x) (string-prefix?\
    \ x prefix)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (x) (string-match\
    \ prefix x))\n         strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list\
    \ ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"\
    xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"\
    ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpcdxfa2df.rkt:9:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpcdxfa2df.rkt:9:23\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp92bj1wxu.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond\n    [(empty? strings) strings]\n\
    \    [(equal? (first strings) prefix) (filter_by_prefix (rest strings) prefix)]\n\
    \    [else (cons (first strings) (filter_by_prefix (rest strings) prefix))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy6lob87u.rkt:20:4

    actual:     ''("asd" "xxy" "john doe" "xxxAAA")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (x) (equal? (string-prefix\
    \ x prefix) prefix)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list\
    \ ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"\
    xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"\
    ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7xjufga7.rkt:9:31: string-prefix: unbound identifier\n  in: string-prefix\n\
    \  location...:\n   /tmp/tmp7xjufga7.rkt:9:31\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond\n    [(empty? strings) strings]\n\
    \    [(equal? (first strings) prefix) (filter_by_prefix (rest strings) prefix)]\n\
    \    [else (cons (first strings) (filter_by_prefix (rest strings) prefix))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnaipo8u4.rkt:20:4

    actual:     ''("asd" "xxy" "john doe" "xxxAAA")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond\n    [(empty? strings) strings]\n\
    \    [(equal? (first strings) prefix) (cons (first strings) strings)]\n    [else\
    \ (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpolnn_sfb.rkt:20:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) '()]\n  \
    \      [(equal? (first strings) prefix) (cons (first strings) (filter_by_prefix\
    \ (rest strings) prefix))]\n        [else (filter_by_prefix (rest strings) prefix)]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_cvvonbe.rkt:19:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpryo2ik5r.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) '()]\n  \
    \      [(equal? (first strings) prefix) (cons (first strings) strings)]\n    \
    \    [else (cons (first strings)\n                    (filter_by_prefix (rest\
    \ strings)\n                                    prefix))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjg81ed_7.rkt:21:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp10rwevim.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz_skspaf.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpirxkurk5.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond\n    [(empty? strings) strings]\n\
    \    [(equal? (first strings) prefix) (filter_by_prefix (rest strings) prefix)]\n\
    \    [else (cons (first strings) (filter_by_prefix (rest strings) prefix))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph33i0tbi.rkt:20:4

    actual:     ''("asd" "xxy" "john doe" "xxxAAA")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond\n    [(empty? strings) strings]\n\
    \    [(equal? (first strings) prefix) (cons (first strings) strings)]\n    [else\
    \ (cons (first strings)\n                (filter_by_prefix (rest strings)\n  \
    \                              prefix))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list\
    \ ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"\
    xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"\
    ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpifbyhjdz.rkt:22:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond\n    [(empty? strings) strings]\n\
    \    [(equal? (first strings) prefix) (filter_by_prefix (rest strings) prefix)]\n\
    \    [else (cons (first strings) (filter_by_prefix (rest strings) prefix))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpajz4i03f.rkt:20:4

    actual:     ''("asd" "xxy" "john doe" "xxxAAA")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdcn48gkg.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond\n    [(empty? strings) strings]\n\
    \    [(equal? (first strings) prefix) (cons (first strings) strings)]\n    [else\
    \ (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8i0472zp.rkt:20:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond\n    [(empty? strings) strings]\n\
    \    [(equal? (first strings) prefix) (filter_by_prefix (rest strings) prefix)]\n\
    \    [else (cons (first strings) (filter_by_prefix (rest strings) prefix))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3raupewk.rkt:20:4

    actual:     ''("asd" "xxy" "john doe" "xxxAAA")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphkfhwel2.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (x) (string-match\
    \ prefix x))\n         strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list\
    \ ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"\
    xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"\
    ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpjnfhmlpt.rkt:9:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpjnfhmlpt.rkt:9:23\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (x) (string-match\
    \ prefix x))\n         strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list\
    \ ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"\
    xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"\
    ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpbx70fs1c.rkt:9:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpbx70fs1c.rkt:9:23\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplr8wwprd.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond\n    [(empty? strings) strings]\n\
    \    [(equal? (first strings) prefix) (cons (first strings) strings)]\n    [else\
    \ (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4njg501m.rkt:20:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpc1325om1.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm7kuel36.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpaecwijok.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyr2f6124.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4mb6b_88.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbv02n7gp.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8njcb9b1.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (x) (equal? (substring\
    \ x 0) prefix)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqaj9agi8.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpha6j_de8.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond\n    [(empty? strings) strings]\n\
    \    [(equal? (first strings) prefix) (filter_by_prefix (rest strings) prefix)]\n\
    \    [else (cons (first strings) (filter_by_prefix (rest strings) prefix))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcqkfte18.rkt:20:4

    actual:     ''("asd" "xxy" "john doe" "xxxAAA")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpja4a42gk.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyqm42z3f.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (x) (string-match\
    \ prefix x))\n         strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list\
    \ ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"\
    xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"\
    ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpplwm8p59.rkt:9:23: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpplwm8p59.rkt:9:23\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3bjbi7fa.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond\n    [(empty? strings) strings]\n\
    \    [(equal? (first strings) prefix) (filter_by_prefix (rest strings) prefix)]\n\
    \    [else (cons (first strings) (filter_by_prefix (rest strings) prefix))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjtgq_pc3.rkt:20:4

    actual:     ''("asd" "xxy" "john doe" "xxxAAA")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpseial_pk.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwv0mw5i2.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpszor7ydw.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbe0i10iv.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7hl6g3g9.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfu3m50_4.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuf10z89w.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw9lb8_w1.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond\n    [(empty? strings) strings]\n\
    \    [(equal? (first strings) prefix) (cons (first strings) strings)]\n    [else\
    \ (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpii39t0zi.rkt:20:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpt1ike1n5.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) '()]\n  \
    \      [(equal? (first strings) prefix) (cons (first strings) strings)]\n    \
    \    [else (cons (first strings)\n                    (filter_by_prefix (rest\
    \ strings) prefix))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1hd9kn3l.rkt:20:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp9ej3ja1.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8a_q5npl.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzdn_560j.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx4ma9qyo.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzk3ce8id.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpk3_y22kv.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpc8ybjy7b.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4at4x6wy.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3czsozln.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzf6mk651.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpglwy6u4w.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptlv45tdn.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppiqvpxb_.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqu26eecc.rkt:19:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond\n    [(empty? strings) strings]\n\
    \    [(equal? (first strings) prefix) (cons (first strings) strings)]\n    [else\
    \ (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9k1__xk7.rkt:20:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (cond\n    [(empty? strings) strings]\n\
    \    [(equal? (first strings) prefix) (cons (first strings) strings)]\n    [else\
    \ (filter_by_prefix (rest strings) prefix)]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw4t4rdi2.rkt:20:4

    actual:     ''("xxx" "xxx" "asd" "xxy" "john doe" "xxxAAA" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
