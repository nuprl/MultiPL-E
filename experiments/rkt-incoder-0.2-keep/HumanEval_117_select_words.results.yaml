language: racket
name: HumanEval_117_select_words
results:
- exit_code: 1
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) (empty-list)] \n    [(= n 0) (empty-list)] \n \
    \   [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp66we6qcj.rkt:16:17: empty-list: unbound identifier\n  in: empty-list\n\
    \  location...:\n   /tmp/tmp66we6qcj.rkt:16:17\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= (length s) 0) '()]\n    [(= n 0)\
    \ '()]\n    [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5pbaevu2.rkt:26:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp5pbaevu2.rkt:27:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp5pbaevu2.rkt:28:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5pbaevu2.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5pbaevu2.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5pbaevu2.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5pbaevu2.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [else (cons (substring s 0 (- (length s) n)) (select_words (substring\
    \ s n) (- n 1))) ]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb58hnyg_.rkt:26:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpb58hnyg_.rkt:27:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpb58hnyg_.rkt:28:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb58hnyg_.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb58hnyg_.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb58hnyg_.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb58hnyg_.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) (list)]\n    [(= n 0) (list)]\n    [(= n 1) (cons\
    \ (first s) (select_words (rest s) 0))]\n    [else (cons (first s)\n         \
    \       (select_words (rest s)\n                            (sub1 n)))]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7sjl6xrn.rkt:28:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp7sjl6xrn.rkt:29:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp7sjl6xrn.rkt:30:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7sjl6xrn.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp7sjl6xrn.rkt:32:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7sjl6xrn.rkt:33:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp7sjl6xrn.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) (list)]\n    [(= n 0) (list)]\n    [(= (length\
    \ s) 0) (list)]\n    [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphq60qzf1.rkt:26:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmphq60qzf1.rkt:27:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphq60qzf1.rkt:28:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphq60qzf1.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphq60qzf1.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphq60qzf1.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphq60qzf1.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= (length s) 0) '()]\n    [(= n 0)\
    \ '()]\n    [else (cons (substring s 0 (- (length s) n)) (select_words (substring\
    \ s n) (- n 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfs9aujh1.rkt:26:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfs9aujh1.rkt:27:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfs9aujh1.rkt:28:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfs9aujh1.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfs9aujh1.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfs9aujh1.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfs9aujh1.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) n)\
    \ (cons s empty)]\n    [else (cons (substring s 0 (- n 1)) (select_words (substring\
    \ s (+ n 1) (length s))))]\n  ))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5pssut38.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp5pssut38.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp5pssut38.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5pssut38.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5pssut38.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5pssut38.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5pssut38.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) (list)]\n    [(= 0 (string-length s)) (list)]\n\
    \    [(= n (string-length s)) (list)]\n    [else (cons (substring s 0 (- n 1))\
    \ (select_words (substring s (+ n 1) (length s)))]))) \n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp16e390gj.rkt:19:87: read-syntax: missing `)` to close preceding\
    \ `(`, found instead `]`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [(= (length s) n) (cons (first s) (select_words (rest s) n))]\n  \
    \  [else (cons (first s) (select_words (rest s) (- n 1))))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpltroelk3.rkt:20:58: read-syntax: missing `]` to close preceding\
    \ `[`, found instead `)`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= (length s) n) '()]\n    [(= (length\
    \ s) 0) '()]\n    [(= (length s) 1) (cons (first s) (select_words (rest s) n))]\n\
    \    [else (cons (first s)\n                (select_words (rest s) n))]\n  ))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphrcu792k.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmphrcu792k.rkt:30:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphrcu792k.rkt:31:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphrcu792k.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphrcu792k.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphrcu792k.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphrcu792k.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [else (cons (first s)\n                (select_words (rest s) (sub1\
    \ n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplz7nv556.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmplz7nv556.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmplz7nv556.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplz7nv556.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplz7nv556.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplz7nv556.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplz7nv556.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [(= (length s) n) (cons (first s) (select_words (rest s) n))]\n  \
    \  [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb30b_a3t.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpb30b_a3t.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpb30b_a3t.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb30b_a3t.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb30b_a3t.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb30b_a3t.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb30b_a3t.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) (list)]\n    [(= 0 (length s)) (list)]\n    [(=\
    \ 1 (length s)) (list '())]\n    [else (cons (first s)\n                (select_words\
    \ (rest s) n))]\n  ))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had a\
    \ little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_r3ceheq.rkt:28:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_r3ceheq.rkt:29:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_r3ceheq.rkt:30:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_r3ceheq.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_r3ceheq.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_r3ceheq.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_r3ceheq.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(equal? (length s) n) '()]\n    [(equal?\
    \ (length s) 0) '()]\n    [else (cons (first s)\n                (select_words\
    \ (rest s) n))]\n    ))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had a\
    \ little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9ie40lli.rkt:28:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9ie40lli.rkt:29:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9ie40lli.rkt:30:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9ie40lli.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9ie40lli.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9ie40lli.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9ie40lli.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (cons (first\
    \ s) (select_words (rest s) 0))]\n    [else (cons (first s)\n                (select_words\
    \ (rest s)\n                            (sub1 n)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgwzjgnwn.rkt:28:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpgwzjgnwn.rkt:29:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgwzjgnwn.rkt:30:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgwzjgnwn.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpgwzjgnwn.rkt:32:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgwzjgnwn.rkt:33:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgwzjgnwn.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(equal? (length s) n) (cons (car s)\
    \ (select_words (cdr s) n))]\n    [else (cons (car s)\n                (select_words\
    \ (cdr s) n))]\n  ))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpofpu3ope.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpofpu3ope.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpofpu3ope.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpofpu3ope.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpofpu3ope.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpofpu3ope.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpofpu3ope.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (cons (first\
    \ s) (select_words (rest s) 0))]\n    [else (cons (first s)\n                (select_words\
    \ (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had a\
    \ little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo8xc_erz.rkt:27:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpo8xc_erz.rkt:28:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpo8xc_erz.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo8xc_erz.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpo8xc_erz.rkt:31:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo8xc_erz.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpo8xc_erz.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprkfrpaoc.rkt:26:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprkfrpaoc.rkt:27:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprkfrpaoc.rkt:28:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprkfrpaoc.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprkfrpaoc.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprkfrpaoc.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprkfrpaoc.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= (length s) n) '()]\n    [(= (length\
    \ s) 0) '()]\n    [else (cons (first s) (select_words (rest s) n))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplqu2s02g.rkt:26:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmplqu2s02g.rkt:27:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmplqu2s02g.rkt:28:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplqu2s02g.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplqu2s02g.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplqu2s02g.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplqu2s02g.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= (length s) 0) '()]\n    [(= n 0)\
    \ '()]\n    [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx91reri9.rkt:26:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpx91reri9.rkt:27:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpx91reri9.rkt:28:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx91reri9.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx91reri9.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx91reri9.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx91reri9.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphueve4po.rkt:26:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmphueve4po.rkt:27:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphueve4po.rkt:28:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphueve4po.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphueve4po.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphueve4po.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphueve4po.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) (list)]\n    [(equal? (length s) n) (list s)]\n\
    \    [else (cons (first s) (select_words (rest s) n))]\n  ))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnr8ct9n_.rkt:26:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpnr8ct9n_.rkt:27:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpnr8ct9n_.rkt:28:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnr8ct9n_.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnr8ct9n_.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnr8ct9n_.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnr8ct9n_.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) (list)]\n    [(= (length s) n) (list s)]\n    [else\
    \ (cons (first s) (select_words (rest s) n))]\n  ))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7c6uud_u.rkt:26:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp7c6uud_u.rkt:27:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7c6uud_u.rkt:28:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7c6uud_u.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7c6uud_u.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7c6uud_u.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7c6uud_u.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (cons (first\
    \ s) (select_words (rest s) 0))]\n    [else (cons (first s)\n                (select_words\
    \ (rest s)\n                            (sub1 n)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx1wri1z1.rkt:28:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpx1wri1z1.rkt:29:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpx1wri1z1.rkt:30:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx1wri1z1.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpx1wri1z1.rkt:32:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx1wri1z1.rkt:33:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpx1wri1z1.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (cons (car\
    \ s) (select_words (cdr s) 0))]\n    [else (cons (car s) (select_words (cdr s)\
    \ (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate select_words))\n    (check-equal? (candidate \"Mary had a little lamb\"\
    \ 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\"\
    \ 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\"\
    \ 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"\
    ))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz0owiicj.rkt:26:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Mary had a little lamb\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpz0owiicj.rkt:27:4\n\ncar: contract violation\n  expected:\
    \ pair?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpz0owiicj.rkt:28:4\n\ncar:\
    \ contract violation\n  expected: pair?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz0owiicj.rkt:29:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz0owiicj.rkt:30:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz0owiicj.rkt:31:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz0owiicj.rkt:32:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n\
    \    [else (cons (first s)\n                (select_words (rest s) (sub1 n)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9i37f75x.rkt:27:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp9i37f75x.rkt:28:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9i37f75x.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9i37f75x.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp9i37f75x.rkt:31:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9i37f75x.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp9i37f75x.rkt:33:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [(= (length s) n) (cons (first s) (select_words (rest s) n))]\n  \
    \  [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgmas4asn.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgmas4asn.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgmas4asn.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgmas4asn.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgmas4asn.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgmas4asn.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgmas4asn.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) (list '())]\n    [(= (length s) n) (list s)]\n\
    \    [(= (length s) 0) (list '())]\n    [(= (length s) 1) (list '())]\n    [else\
    \ (cons (first s) (select_words (rest s) n))]\n  )\n)\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplw271x27.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmplw271x27.rkt:30:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmplw271x27.rkt:31:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplw271x27.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplw271x27.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplw271x27.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplw271x27.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [(= (length s) n) '()]\n    [else (cons (first s) (select_words (rest\
    \ s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3fg7c433.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3fg7c433.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3fg7c433.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3fg7c433.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3fg7c433.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3fg7c433.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3fg7c433.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n\
    \    [else (cons (first s)\n                (select_words (rest s)\n         \
    \                   (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz3wmt2v7.rkt:28:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpz3wmt2v7.rkt:29:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpz3wmt2v7.rkt:30:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz3wmt2v7.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpz3wmt2v7.rkt:32:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz3wmt2v7.rkt:33:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpz3wmt2v7.rkt:34:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [(= (length s) n) '()]\n    [else (cons (first s) (select_words (rest\
    \ s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt5jnyqer.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpt5jnyqer.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpt5jnyqer.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt5jnyqer.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt5jnyqer.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt5jnyqer.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt5jnyqer.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) n)\
    \ s]\n    [else (cons (first s)\n                (select_words (rest s) (sub1\
    \ n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzm5_cpkr.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzm5_cpkr.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzm5_cpkr.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzm5_cpkr.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzm5_cpkr.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzm5_cpkr.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzm5_cpkr.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (cons (first\
    \ s) (select_words (rest s) 0))]\n    [else (cons (first s) (select_words (rest\
    \ s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwcjh2a05.rkt:26:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpwcjh2a05.rkt:27:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpwcjh2a05.rkt:28:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwcjh2a05.rkt:29:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpwcjh2a05.rkt:30:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwcjh2a05.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpwcjh2a05.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (cons (first\
    \ s) (select_words (rest s) 0))]\n    [else (cons (first s)\n                (select_words\
    \ (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had a\
    \ little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0x_r0qr7.rkt:27:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp0x_r0qr7.rkt:28:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0x_r0qr7.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0x_r0qr7.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp0x_r0qr7.rkt:31:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0x_r0qr7.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0x_r0qr7.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= (length s) 0) '()]\n    [(= n 0)\
    \ '()]\n    [else (cons (first s)\n                (select_words (rest s) (sub1\
    \ n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpww5qtfjs.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpww5qtfjs.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpww5qtfjs.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpww5qtfjs.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpww5qtfjs.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpww5qtfjs.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpww5qtfjs.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [else (cons (first\
    \ s)\n                (select_words (rest s)\n                             (sub1\
    \ n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmwxbr_4x.rkt:27:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpmwxbr_4x.rkt:28:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpmwxbr_4x.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmwxbr_4x.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpmwxbr_4x.rkt:31:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmwxbr_4x.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpmwxbr_4x.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) (list)]\n    [(equal? (length s) n) (list s)]\n\
    \    [else (cons (first s)\n                (select_words (rest s) n))]\n  )\n\
    )\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvroydsmh.rkt:28:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpvroydsmh.rkt:29:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvroydsmh.rkt:30:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvroydsmh.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvroydsmh.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvroydsmh.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvroydsmh.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n\
    \    [else (cons (first s)\n                (select_words (rest s)\n         \
    \                   (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpckpsntbz.rkt:28:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpckpsntbz.rkt:29:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpckpsntbz.rkt:30:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpckpsntbz.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpckpsntbz.rkt:32:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpckpsntbz.rkt:33:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpckpsntbz.rkt:34:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) (list empty)]\n    [(equal? (length s) 0) (list\
    \ empty)]\n    [(equal? (length s) n) (list s)]\n    [else (cons (first s)\n \
    \               (select_words (rest s) n))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpklndzmyl.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpklndzmyl.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpklndzmyl.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpklndzmyl.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpklndzmyl.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpklndzmyl.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpklndzmyl.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [(= n 1) (cons (first s) (select_words (rest s) 0))]\n    [else (cons\
    \ (first s) (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0p4uh3tf.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0p4uh3tf.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0p4uh3tf.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0p4uh3tf.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0p4uh3tf.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0p4uh3tf.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0p4uh3tf.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) (empty)]\n    [(= 0 (string-length s)) '()]\n \
    \   [(= n 0) '()]\n    [(= (string-length s) n) (cons (first s) (select_words\
    \ (rest s) n))]\n    [else (cons (first s)\n                (select_words (rest\
    \ s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp93v6gb_u.rkt:28:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp93v6gb_u.rkt:29:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp93v6gb_u.rkt:30:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp93v6gb_u.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp93v6gb_u.rkt:32:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp93v6gb_u.rkt:34:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= (length s) 0) '()]\n    [(= n 0)\
    \ '()]\n    [else (cons (first s)\n                (select_words (rest s) (sub1\
    \ n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2j5h6q85.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp2j5h6q85.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2j5h6q85.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2j5h6q85.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2j5h6q85.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2j5h6q85.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2j5h6q85.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) (list)]\n    [(= 0 (string-length s)) (list)]\n\
    \    [(= n (string-length s)) (list)]\n    [else (cons (first s)\n           \
    \     (select_words (rest s)\n                             (- n (string-length\
    \ s))))]\n    )\n  )\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had a\
    \ little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp71_dizy9.rkt:24:0: read-syntax: unexpected `)`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) (list)]\n    [(= 0 (string-length s)) empty]\n\
    \    [(= n (string-length s)) empty]\n    [else (cons (first s)\n            \
    \    (select_words (rest s) n))]\n  )\n)\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkv86vnd2.rkt:29:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpkv86vnd2.rkt:30:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpkv86vnd2.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkv86vnd2.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpkv86vnd2.rkt:33:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkv86vnd2.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [(= (length s) n) (cons s (select_words (rest s) n))]\n    [else (cons\
    \ (first s) (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprkwws0s6.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprkwws0s6.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprkwws0s6.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprkwws0s6.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprkwws0s6.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprkwws0s6.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprkwws0s6.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) (list)]\n    [(equal? (length (first s)) n) (cons\
    \ (first s) (select_words (rest s) n))]\n    [else (cons (first s) (select_words\
    \ (rest s) n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfevqg4sa.rkt:25:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpfevqg4sa.rkt:26:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfevqg4sa.rkt:27:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfevqg4sa.rkt:28:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpfevqg4sa.rkt:29:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfevqg4sa.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfevqg4sa.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(equal? (length s) 0) '()]\n    [(equal?\
    \ (length s) n) '()]\n    [else (cons (first s)\n                (select_words\
    \ (rest s) n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvswy6uct.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpvswy6uct.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvswy6uct.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvswy6uct.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvswy6uct.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvswy6uct.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvswy6uct.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) (list)]\n    [(= 0 (string-length s)) (list)]\n\
    \    [(= n (string-length s)) (list)]\n    [else (cons (substring s 0 (- n 1))\
    \ (select_words (substring s (+ n 1) (- n 1))))]\n  )\n)\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzaazlhu9.rkt:28:4\n\
    \nsubstring: ending index is smaller than starting index\n  ending index: 3\n\
    \  starting index: 5\n  valid range: [0, 22]\n  string: \"Mary had a little lamb\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzaazlhu9.rkt:29:4\n\nsubstring: ending index is smaller than\
    \ starting index\n  ending index: 2\n  starting index: 4\n  valid range: [0, 22]\n\
    \  string: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzaazlhu9.rkt:30:4\n\nsubstring:\
    \ ending index is smaller than starting index\n  ending index: 1\n  starting index:\
    \ 3\n  valid range: [0, 18]\n  string: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzaazlhu9.rkt:31:4\n\
    \nsubstring: ending index is smaller than starting index\n  ending index: 3\n\
    \  starting index: 5\n  valid range: [0, 11]\n  string: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzaazlhu9.rkt:32:4\n\
    \nsubstring: ending index is smaller than starting index\n  ending index: 2\n\
    \  starting index: 4\n  valid range: [0, 9]\n  string: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzaazlhu9.rkt:34:4\n\
    \nsubstring: ending index is smaller than starting index\n  ending index: 0\n\
    \  starting index: 2\n  valid range: [0, 11]\n  string: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [else (cons (first s)\n                (select_words (rest s) (sub1\
    \ n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpek5kha8t.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpek5kha8t.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpek5kha8t.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpek5kha8t.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpek5kha8t.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpek5kha8t.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpek5kha8t.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= (length s) n) '()]\n    [(= (length\
    \ s) 0) '()]\n    [(= n 0) '()]\n    [else (cons (first s) (select_words (rest\
    \ s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_j1yqtw_.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_j1yqtw_.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_j1yqtw_.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_j1yqtw_.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_j1yqtw_.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_j1yqtw_.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_j1yqtw_.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) (list)]\n    [(= n 0) (list)]\n    [(= (length\
    \ s) 0) (list)]\n    [else (cons (substring s 0 (- (length s) n)) (select_words\
    \ (substring s n (- (length s) n)) (- n 1)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3wlndrmx.rkt:26:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3wlndrmx.rkt:27:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3wlndrmx.rkt:28:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3wlndrmx.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3wlndrmx.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3wlndrmx.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3wlndrmx.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [(= (length s) n) '()]\n    [else (cons (first s) (select_words (rest\
    \ s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsfq2ovij.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpsfq2ovij.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsfq2ovij.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsfq2ovij.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsfq2ovij.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsfq2ovij.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsfq2ovij.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [(= (length s) n) (cons (first s) (select_words (rest s) n))]\n  \
    \  [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjcrs6a65.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpjcrs6a65.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjcrs6a65.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjcrs6a65.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjcrs6a65.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjcrs6a65.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjcrs6a65.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) (list)]\n    [(equal? (length s) n) (list s)]\n\
    \    [else (cons (first s)\n                (select_words (rest s) n))]\n  ))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn84ize1j.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpn84ize1j.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpn84ize1j.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn84ize1j.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn84ize1j.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn84ize1j.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn84ize1j.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (cons (first\
    \ s) (select_words (rest s) 0))]\n    [else (cons (first s) (select_words (rest\
    \ s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmperrm2wrd.rkt:26:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmperrm2wrd.rkt:27:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmperrm2wrd.rkt:28:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmperrm2wrd.rkt:29:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmperrm2wrd.rkt:30:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmperrm2wrd.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmperrm2wrd.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [else (cons (first s)\n                (select_words (rest s)\n  \
    \                           (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpljqa2a63.rkt:28:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpljqa2a63.rkt:29:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpljqa2a63.rkt:30:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpljqa2a63.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpljqa2a63.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpljqa2a63.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpljqa2a63.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [else (cons (first s)\n                (select_words (rest s) (sub1\
    \ n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafms78ce.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpafms78ce.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpafms78ce.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafms78ce.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafms78ce.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafms78ce.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafms78ce.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [(= (length s) n) '()]\n    [else (cons (first s)\n              \
    \  (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjj9q5c24.rkt:28:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpjj9q5c24.rkt:29:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjj9q5c24.rkt:30:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjj9q5c24.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjj9q5c24.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjj9q5c24.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjj9q5c24.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (cons (first\
    \ s) (select_words (rest s) 0))]\n    [else (cons (first s)\n                (select_words\
    \ (rest s)\n                            (sub1 n)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp_qv01d3.rkt:28:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpp_qv01d3.rkt:29:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp_qv01d3.rkt:30:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp_qv01d3.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpp_qv01d3.rkt:32:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp_qv01d3.rkt:33:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp_qv01d3.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= (length s) n) (cons (car s) (select_words\
    \ (cdr s) n))]\n    [else (cons (car s)\n                (select_words (cdr s)\
    \ n))]\n  ))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi3seprgj.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpi3seprgj.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpi3seprgj.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi3seprgj.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi3seprgj.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi3seprgj.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi3seprgj.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [else (cons (first s)\n                (select_words (rest s) (sub1\
    \ n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplkjenmto.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmplkjenmto.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmplkjenmto.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplkjenmto.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplkjenmto.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplkjenmto.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplkjenmto.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(equal? (length s) n) s]\n    [else\
    \ (cons (first s) (select_words (rest s) n))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5g0v5_3n.rkt:25:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp5g0v5_3n.rkt:26:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp5g0v5_3n.rkt:27:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5g0v5_3n.rkt:28:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5g0v5_3n.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5g0v5_3n.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5g0v5_3n.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(equal? (length s) n) (cons (first s)\
    \ (select_words (rest s) n))]\n    [else (cons (first s) (select_words (rest s)\
    \ n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi1k90nhz.rkt:25:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpi1k90nhz.rkt:26:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpi1k90nhz.rkt:27:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi1k90nhz.rkt:28:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi1k90nhz.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi1k90nhz.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi1k90nhz.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(equal? (length s) 0) '()]\n    [(equal?\
    \ (length s) n) '()]\n    [else (cons (first s) (select_words (rest s) n))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcij0c3lt.rkt:26:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpcij0c3lt.rkt:27:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcij0c3lt.rkt:28:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcij0c3lt.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcij0c3lt.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcij0c3lt.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcij0c3lt.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) (list)]\n    [(equal? (length s) n) (list s)]\n\
    \    [else (cons (first s)\n                (select_words (rest s) n))]\n  )\n\
    )\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpltq56s7w.rkt:28:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpltq56s7w.rkt:29:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpltq56s7w.rkt:30:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpltq56s7w.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpltq56s7w.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpltq56s7w.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpltq56s7w.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) (list)]\n    [(equal? (length s) n) (list s)]\n\
    \    [else (cons (first s) (select_words (rest s) n))]\n  ))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph0yj6nx8.rkt:26:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmph0yj6nx8.rkt:27:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmph0yj6nx8.rkt:28:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph0yj6nx8.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph0yj6nx8.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph0yj6nx8.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph0yj6nx8.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [else (cons (first s)\n                (select_words (rest s) (sub1\
    \ n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx1317_s9.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpx1317_s9.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpx1317_s9.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx1317_s9.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx1317_s9.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx1317_s9.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx1317_s9.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [(= n 1) (cons (first s) (select_words (rest s) 0))]\n    [else (cons\
    \ (first s) (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzpqnn1kc.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzpqnn1kc.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzpqnn1kc.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzpqnn1kc.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzpqnn1kc.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzpqnn1kc.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzpqnn1kc.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) (list)]\n    [(equal? (length s) n) (list s)]\n\
    \    [(equal? (length s) 0) (list)]\n    [else (cons (first s)\n             \
    \   (select_words (rest s) n))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj5oc3foe.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpj5oc3foe.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpj5oc3foe.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj5oc3foe.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj5oc3foe.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj5oc3foe.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj5oc3foe.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) (list)]\n    [(equal? (length s) n) (list s)]\n\
    \    [else (append (select_words (substring s 0 (- (length s) n)) n) (select_words\
    \ (substring s n (- (length s) n)) n))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyr59xw8b.rkt:25:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpyr59xw8b.rkt:26:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyr59xw8b.rkt:27:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyr59xw8b.rkt:28:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyr59xw8b.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyr59xw8b.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyr59xw8b.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [(= (length s) n) '()]\n    [else (cons (first s)\n              \
    \  (select_words (rest s)\n                            (sub1 n)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpna5cqezk.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpna5cqezk.rkt:30:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpna5cqezk.rkt:31:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpna5cqezk.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpna5cqezk.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpna5cqezk.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpna5cqezk.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) (list)]\n    [(equal? (length s) 0) (list)]\n \
    \   [(equal? (length s) n) (list)]\n    [else (cons (first s)\n              \
    \  (select_words (rest s) n))]\n  ))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ir50jub.rkt:28:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp4ir50jub.rkt:29:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ir50jub.rkt:30:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ir50jub.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ir50jub.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ir50jub.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ir50jub.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [else (cons (first s)\n                (select_words (rest s)\n  \
    \                           (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt8yezrrb.rkt:28:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpt8yezrrb.rkt:29:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpt8yezrrb.rkt:30:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt8yezrrb.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt8yezrrb.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt8yezrrb.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt8yezrrb.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) (list)]\n    [(= (length s) 0) (list)]\n    [(=\
    \ (length s) n) (list)]\n    [else (cons (first s) (select_words (rest s) n))]\n\
    \  )\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppcj90qaq.rkt:28:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppcj90qaq.rkt:29:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppcj90qaq.rkt:30:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppcj90qaq.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppcj90qaq.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppcj90qaq.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppcj90qaq.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= (length s) 0) '()]\n    [(= n 0)\
    \ '()]\n    [else (cons (first s)\n                (select_words (rest s) (sub1\
    \ n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0t2ykldj.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0t2ykldj.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0t2ykldj.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0t2ykldj.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0t2ykldj.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0t2ykldj.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0t2ykldj.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= (length s) 0) '()]\n    [(= n 0)\
    \ '()]\n    [else (cons (first s)\n                (select_words (rest s) (sub1\
    \ n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0lmhbt3z.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0lmhbt3z.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0lmhbt3z.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0lmhbt3z.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0lmhbt3z.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0lmhbt3z.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0lmhbt3z.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (cons (first\
    \ s) (select_words (rest s) 0))]\n    [else (cons (first s) (select_words (rest\
    \ s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6b8u552_.rkt:26:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp6b8u552_.rkt:27:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6b8u552_.rkt:28:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6b8u552_.rkt:29:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp6b8u552_.rkt:30:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6b8u552_.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6b8u552_.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (cons (first\
    \ s) (select_words (rest s) 0))]\n    [else (cons (first s)\n                (select_words\
    \ (rest s)\n                            (sub1 n)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpth9wdsvo.rkt:28:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpth9wdsvo.rkt:29:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpth9wdsvo.rkt:30:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpth9wdsvo.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpth9wdsvo.rkt:32:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpth9wdsvo.rkt:33:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpth9wdsvo.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [(= (length s) n) (cons (first s) (select_words (rest s) n))]\n  \
    \  [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkke0_5a1.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpkke0_5a1.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkke0_5a1.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkke0_5a1.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkke0_5a1.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkke0_5a1.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkke0_5a1.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(equal? (length s) 0) '()]\n    [(equal?\
    \ (length s) n) '()]\n    [else (cons (first s)\n                (select_words\
    \ (rest s) n))]\n  )\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had a\
    \ little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9doxu2zg.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9doxu2zg.rkt:30:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9doxu2zg.rkt:31:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9doxu2zg.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9doxu2zg.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9doxu2zg.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9doxu2zg.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) (list)]\n    [(= 0 (length s)) (list)]\n    [(=\
    \ 1 (length s)) (list s)]\n    [else (cons (first s)\n                (select_words\
    \ (rest s) n))]\n    )\n  )\n)\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmphpn1kmhn.rkt:23:0: read-syntax: unexpected `)`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(equal? (length s) n) s]\n    [(equal?\
    \ (length s) 0) '()]\n    [else (cons (first s)\n                (select_words\
    \ (rest s) n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6r6sd78s.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6r6sd78s.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6r6sd78s.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6r6sd78s.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6r6sd78s.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6r6sd78s.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6r6sd78s.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) (list)]\n    [(= (length s) 0) (list)]\n    [(=\
    \ n 0) (list)]\n    [else (cons (first s)\n                (select_words (rest\
    \ s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjrd3ma4u.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpjrd3ma4u.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjrd3ma4u.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjrd3ma4u.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjrd3ma4u.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjrd3ma4u.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjrd3ma4u.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(equal? (length s) 0) '()]\n    [(equal?\
    \ (length s) n) '()]\n    [else (cons (first s)\n                (select_words\
    \ (rest s) n))]\n  )\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had a\
    \ little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwsm8vzm.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzwsm8vzm.rkt:30:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwsm8vzm.rkt:31:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwsm8vzm.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwsm8vzm.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwsm8vzm.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwsm8vzm.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) n)\
    \ (cons (first s) (select_words (rest s) n))]\n    [else (cons (first s) (select_words\
    \ (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had a\
    \ little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeymjop1g.rkt:26:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpeymjop1g.rkt:27:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpeymjop1g.rkt:28:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeymjop1g.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeymjop1g.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeymjop1g.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeymjop1g.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n\
    \    [else (cons (first s)\n                (select_words (rest s)\n         \
    \                    (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0gdpkf89.rkt:28:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp0gdpkf89.rkt:29:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0gdpkf89.rkt:30:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0gdpkf89.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp0gdpkf89.rkt:32:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0gdpkf89.rkt:33:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp0gdpkf89.rkt:34:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) n)\
    \ '()]\n    [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp711aeeb.rkt:26:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp711aeeb.rkt:27:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp711aeeb.rkt:28:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp711aeeb.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp711aeeb.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp711aeeb.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp711aeeb.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [(= (length s) n) '()]\n    [else (cons (first s) (select_words (rest\
    \ s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprjrktdwq.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprjrktdwq.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprjrktdwq.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprjrktdwq.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprjrktdwq.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprjrktdwq.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprjrktdwq.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpey9emipp.rkt:26:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpey9emipp.rkt:27:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpey9emipp.rkt:28:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpey9emipp.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpey9emipp.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpey9emipp.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpey9emipp.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) (empty-list)] \n    [(= (length s) n) (cons (car\
    \ s) (empty-list))] \n    [(= (length s) 0) (empty-list)] \n    [else (cons (car\
    \ s) (select_words (cdr s) n))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpc83wy6q7.rkt:16:17: empty-list: unbound identifier\n  in: empty-list\n\
    \  location...:\n   /tmp/tmpc83wy6q7.rkt:16:17\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) n)\
    \ (cons (first s) (select_words (rest s) n))]\n    [else (cons (first s)\n   \
    \             (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpudqnu52c.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpudqnu52c.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpudqnu52c.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpudqnu52c.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpudqnu52c.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpudqnu52c.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpudqnu52c.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= (length s) 0) '()]\n    [(= n 0)\
    \ '()]\n    [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4rxyow3u.rkt:26:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp4rxyow3u.rkt:27:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4rxyow3u.rkt:28:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4rxyow3u.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4rxyow3u.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4rxyow3u.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4rxyow3u.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= (length s) n) '()]\n    [(= (length\
    \ s) 0) '()]\n    [(= n 0) '()]\n    [else (cons (first s) (select_words (rest\
    \ s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkjuub4qo.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpkjuub4qo.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkjuub4qo.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkjuub4qo.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkjuub4qo.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkjuub4qo.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkjuub4qo.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= (length s) n) '()]\n    [(= (length\
    \ s) 0) '()]\n    [else (cons (first s)\n                (select_words (rest s)\
    \ n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp75t54uky.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp75t54uky.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp75t54uky.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp75t54uky.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp75t54uky.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp75t54uky.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp75t54uky.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) (list)]\n    [(equal? (length s) n) (list s)]\n\
    \    [else (cons (first s) (select_words (rest s) n))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2bqe61tv.rkt:25:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp2bqe61tv.rkt:26:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2bqe61tv.rkt:27:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2bqe61tv.rkt:28:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2bqe61tv.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2bqe61tv.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2bqe61tv.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n\
    \    [else (cons (first s)\n                (select_words (rest s) (sub1 n)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5gyvmmxj.rkt:27:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp5gyvmmxj.rkt:28:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp5gyvmmxj.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5gyvmmxj.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp5gyvmmxj.rkt:31:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5gyvmmxj.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp5gyvmmxj.rkt:33:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) (list '())]\n    [(equal? (length s) 0) (list '())]\n\
    \    [(equal? (length s) n) (list '())]\n    [(equal? (length s) (- n 1)) (cons\
    \ (first s) (select_words (rest s) n))]\n    [else (cons (first s) (select_words\
    \ (rest s) n))]\n  )\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had a\
    \ little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm2xelypy.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm2xelypy.rkt:30:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpm2xelypy.rkt:31:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm2xelypy.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm2xelypy.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm2xelypy.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm2xelypy.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) (list)]\n    [(= (length s) 0) (list)]\n    [(=\
    \ (length s) n) (list)]\n    [else (cons (first s)\n                (select_words\
    \ (rest s) n))]\n    )\n  )\n)\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpw7xtsmgl.rkt:23:0: read-syntax: unexpected `)`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [else (cons (first s)\n                (select_words (rest s) (sub1\
    \ n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp880mhv8l.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp880mhv8l.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp880mhv8l.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp880mhv8l.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp880mhv8l.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp880mhv8l.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp880mhv8l.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(equal? (length s) n) '()]\n    [(equal?\
    \ (length s) 0) '()]\n    [else (cons (first s) (select_words (rest s) n))]\n\
    \  )\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpytk0snzk.rkt:28:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpytk0snzk.rkt:29:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpytk0snzk.rkt:30:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpytk0snzk.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpytk0snzk.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpytk0snzk.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpytk0snzk.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [(= (length s) n) (cons (first s) (select_words (rest s) n))]\n  \
    \  [else (cons (first s) (select_words (rest s) (- n 1)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4s9_6g44.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp4s9_6g44.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4s9_6g44.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4s9_6g44.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4s9_6g44.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4s9_6g44.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4s9_6g44.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [else (cons (first\
    \ s) (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuayziq7y.rkt:25:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpuayziq7y.rkt:26:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuayziq7y.rkt:27:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuayziq7y.rkt:28:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpuayziq7y.rkt:29:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuayziq7y.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuayziq7y.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(equal? (length s) 0) '()]\n    [(equal?\
    \ (length s) n) '()]\n    [else (cons (first s)\n                (select_words\
    \ (rest s)\n                             (- n (length s))))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprqt4xcr7.rkt:28:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprqt4xcr7.rkt:29:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprqt4xcr7.rkt:30:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprqt4xcr7.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprqt4xcr7.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprqt4xcr7.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprqt4xcr7.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [(= (length s) n) '()]\n    [else (cons (first s) (select_words (rest\
    \ s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxagx8gon.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpxagx8gon.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxagx8gon.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxagx8gon.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxagx8gon.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxagx8gon.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxagx8gon.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [(= (length s) n) (cons (first s) (select_words (rest s) n))]\n  \
    \  [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppbuzpttd.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppbuzpttd.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppbuzpttd.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppbuzpttd.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppbuzpttd.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppbuzpttd.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppbuzpttd.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) n)\
    \ (cons (car s) (select_words (cdr s) n))]\n    [else (cons (car s) (select_words\
    \ (cdr s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had a\
    \ little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq4j2bdet.rkt:26:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpq4j2bdet.rkt:27:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpq4j2bdet.rkt:28:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq4j2bdet.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq4j2bdet.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq4j2bdet.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq4j2bdet.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [else (cons (first s)\n                (select_words (rest s) (sub1\
    \ n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpbdiske.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpcpbdiske.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpbdiske.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpbdiske.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpbdiske.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpbdiske.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpbdiske.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) (list '())]\n    [(= (length s) n) (list s)]\n\
    \    [(= (length s) 0) (list '())]\n    [else (cons (first s) (select_words (rest\
    \ s) n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpverqjbbz.rkt:26:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpverqjbbz.rkt:27:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpverqjbbz.rkt:28:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpverqjbbz.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpverqjbbz.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpverqjbbz.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpverqjbbz.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n\
    \    [else (cons (first s)\n                (select_words (rest s) (sub1 n)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp58d_ucf4.rkt:27:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp58d_ucf4.rkt:28:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp58d_ucf4.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp58d_ucf4.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp58d_ucf4.rkt:31:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp58d_ucf4.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp58d_ucf4.rkt:33:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(equal? (length s) 0) '()]\n    [(equal?\
    \ (length s) n) '()]\n    [else (cons (first s)\n                (select_words\
    \ (rest s) n))]\n  )\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had a\
    \ little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptx2l5f7c.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmptx2l5f7c.rkt:30:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmptx2l5f7c.rkt:31:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptx2l5f7c.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptx2l5f7c.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptx2l5f7c.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptx2l5f7c.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (cons (first\
    \ s) (select_words (rest s) 0))]\n    [else (cons (first s) (select_words (rest\
    \ s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbbzx52qi.rkt:26:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpbbzx52qi.rkt:27:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbbzx52qi.rkt:28:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbbzx52qi.rkt:29:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpbbzx52qi.rkt:30:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbbzx52qi.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbbzx52qi.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) (list)]\n    [(= (length s) n) (list)]\n    [(=\
    \ (length s) 0) (list)]\n    [else (cons (first s)\n                (select_words\
    \ (rest s) n))]\n    )\n  )\n)\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp30cbpx1p.rkt:23:0: read-syntax: unexpected `)`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) (list '())]\n    [(equal? (length s) n) (list s)]\n\
    \    [(equal? (length s) 0) (list '())]\n    [else (cons (first s)\n         \
    \       (select_words (rest s) n))]\n  )\n)\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp79wfby2o.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp79wfby2o.rkt:30:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp79wfby2o.rkt:31:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp79wfby2o.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp79wfby2o.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp79wfby2o.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp79wfby2o.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [else (cons (first s)\n                (select_words (rest s) (sub1\
    \ n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmperstvtqn.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmperstvtqn.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmperstvtqn.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmperstvtqn.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmperstvtqn.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmperstvtqn.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmperstvtqn.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp34aa5oeo.rkt:26:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp34aa5oeo.rkt:27:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp34aa5oeo.rkt:28:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp34aa5oeo.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp34aa5oeo.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp34aa5oeo.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp34aa5oeo.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [(= (length s) n) (cons (first s) (select_words (rest s) n))]\n  \
    \  [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdt0fci8m.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpdt0fci8m.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdt0fci8m.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdt0fci8m.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdt0fci8m.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdt0fci8m.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdt0fci8m.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n\
    \    [else (cons (first s)\n                (select_words (rest s) (sub1 n)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyz73h3r4.rkt:27:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpyz73h3r4.rkt:28:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpyz73h3r4.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyz73h3r4.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpyz73h3r4.rkt:31:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyz73h3r4.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpyz73h3r4.rkt:33:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(equal? (length s) n) (cons (car s)\
    \ (select_words (cdr s) n))]\n    [else (cons (car s)\n                (select_words\
    \ (cdr s) n))]\n  ))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjbmy0wbw.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpjbmy0wbw.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjbmy0wbw.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjbmy0wbw.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjbmy0wbw.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjbmy0wbw.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjbmy0wbw.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) (list empty)]\n    [(equal? (length s) 0) (list\
    \ empty)]\n    [(equal? (length s) n) (list s)]\n    [else (cons (first s)\n \
    \               (select_words (rest s) n))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjdiv7t9n.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpjdiv7t9n.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjdiv7t9n.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjdiv7t9n.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjdiv7t9n.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjdiv7t9n.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjdiv7t9n.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (cons (first\
    \ s) (select_words (rest s) 0))]\n    [else (cons (first s) (select_words (rest\
    \ s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprfgzerst.rkt:26:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmprfgzerst.rkt:27:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprfgzerst.rkt:28:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprfgzerst.rkt:29:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmprfgzerst.rkt:30:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprfgzerst.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprfgzerst.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (cons (first\
    \ s) (select_words (rest s) 0))]\n    [else (cons (first s)\n                (select_words\
    \ (rest s)\n                             (sub1 n)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp38y2mahm.rkt:28:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp38y2mahm.rkt:29:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp38y2mahm.rkt:30:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp38y2mahm.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp38y2mahm.rkt:32:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp38y2mahm.rkt:33:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp38y2mahm.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [(= (length s) n) '()]\n    [else (cons (first s)\n              \
    \  (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3lm5237u.rkt:28:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3lm5237u.rkt:29:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3lm5237u.rkt:30:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3lm5237u.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3lm5237u.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3lm5237u.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3lm5237u.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(equal? (length s) 0) '()]\n    [(equal?\
    \ (length s) n) '()]\n    [else (cons (first s)\n                (select_words\
    \ (rest s) n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkzoblovd.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpkzoblovd.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkzoblovd.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkzoblovd.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkzoblovd.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkzoblovd.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkzoblovd.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) n)\
    \ (cons (first s) (select_words (rest s) n))]\n    [else (cons (first s) (select_words\
    \ (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had a\
    \ little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsdcdai8b.rkt:26:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpsdcdai8b.rkt:27:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsdcdai8b.rkt:28:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsdcdai8b.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsdcdai8b.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsdcdai8b.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsdcdai8b.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (cons (first\
    \ s) (select_words (rest s) 0))]\n    [else (cons (first s)\n                (select_words\
    \ (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had a\
    \ little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpchric3vv.rkt:27:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpchric3vv.rkt:28:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpchric3vv.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpchric3vv.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpchric3vv.rkt:31:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpchric3vv.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpchric3vv.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) (list)]\n    [(equal? (length s) n) (list s)]\n\
    \    [else (cons (first s) (select_words (rest s) n))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9qk7ocf7.rkt:25:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9qk7ocf7.rkt:26:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9qk7ocf7.rkt:27:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9qk7ocf7.rkt:28:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9qk7ocf7.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9qk7ocf7.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9qk7ocf7.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) (list)]\n    [(= 0 (string-length s)) (list)]\n\
    \    [(= n (string-length s)) (list)]\n    [else (cons (substring s 0 (string-length\
    \ s) (+ 0 (string-length s))) \n                (select_words (substring s (+\
    \ 0 (string-length s)) \n                                 (+ 0 (string-length\
    \ s))) n)]\n  )\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqq0u3oiw.rkt:21:60: read-syntax: missing `)` to close `(` on line\
    \ 19, found instead `]`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) (list)]\n    [(= (length s) 0) (list)]\n    [(=\
    \ (length s) n) (list)]\n    [else (cons (first s)\n                (select_words\
    \ (rest s) n))]\n    )\n  )\n)\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp05fbrosr.rkt:23:0: read-syntax: unexpected `)`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n\
    \    [else (cons (first s)\n                (select_words (rest s) (sub1 n)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi7yvx3fz.rkt:27:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpi7yvx3fz.rkt:28:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpi7yvx3fz.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi7yvx3fz.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpi7yvx3fz.rkt:31:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi7yvx3fz.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpi7yvx3fz.rkt:33:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1rf5pwmc.rkt:26:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1rf5pwmc.rkt:27:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1rf5pwmc.rkt:28:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1rf5pwmc.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1rf5pwmc.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1rf5pwmc.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1rf5pwmc.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) (list)]\n    [(= n 0) (list)]\n    [(= (length\
    \ s) 0) (list)]\n    [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt8m94lb3.rkt:26:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpt8m94lb3.rkt:27:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpt8m94lb3.rkt:28:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt8m94lb3.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt8m94lb3.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt8m94lb3.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt8m94lb3.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [(= (length s) n) '()]\n    [else (cons (first s) (select_words (rest\
    \ s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeqn5_4e4.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpeqn5_4e4.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpeqn5_4e4.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeqn5_4e4.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeqn5_4e4.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeqn5_4e4.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeqn5_4e4.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [(= (length s) n) '()]\n    [else (cons (first s)\n              \
    \  (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3cjm6rui.rkt:28:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3cjm6rui.rkt:29:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3cjm6rui.rkt:30:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3cjm6rui.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3cjm6rui.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3cjm6rui.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3cjm6rui.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= (length s) 0) '()]\n    [(= n 0)\
    \ '()]\n    [else (cons (first s)\n                (select_words (rest s) (sub1\
    \ n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy3sjw97z.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpy3sjw97z.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpy3sjw97z.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy3sjw97z.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy3sjw97z.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy3sjw97z.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy3sjw97z.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [(= (length s) n) (cons (first s) (select_words (rest s) n))]\n  \
    \  [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq8u20iox.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpq8u20iox.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpq8u20iox.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq8u20iox.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq8u20iox.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq8u20iox.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq8u20iox.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) (list)]\n    [(= (length s) 0) (list)]\n    [(=\
    \ n 0) (list)]\n    [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph0hbuj4m.rkt:26:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmph0hbuj4m.rkt:27:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmph0hbuj4m.rkt:28:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph0hbuj4m.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph0hbuj4m.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph0hbuj4m.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph0hbuj4m.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [(= (length s) n) (cons (first s) (select_words (rest s) n))]\n  \
    \  [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplh18dde_.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmplh18dde_.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmplh18dde_.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplh18dde_.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplh18dde_.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplh18dde_.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplh18dde_.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(equal? (length s) n) s]\n    [else\
    \ (cons (first s)\n                (select_words (rest s) n))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdkqo7q6t.rkt:26:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpdkqo7q6t.rkt:27:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdkqo7q6t.rkt:28:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdkqo7q6t.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdkqo7q6t.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdkqo7q6t.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdkqo7q6t.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(equal? (length s) n) s]\n    [else\
    \ (cons (first s)\n                (select_words (rest s) n))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpepdrupd0.rkt:26:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpepdrupd0.rkt:27:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpepdrupd0.rkt:28:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpepdrupd0.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpepdrupd0.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpepdrupd0.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpepdrupd0.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [(= (length s) n) (cons (first s) (select_words (rest s) n))]\n  \
    \  [else (cons (first s) (select_words (rest s) (- n 1)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpygc2shug.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpygc2shug.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpygc2shug.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpygc2shug.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpygc2shug.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpygc2shug.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpygc2shug.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [(= (length s) n) '()]\n    [else (cons (first s) (select_words (rest\
    \ s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyczto2us.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpyczto2us.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyczto2us.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyczto2us.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyczto2us.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyczto2us.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyczto2us.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [(= (length s) n) (cons (first s) (select_words (rest s) n))]\n  \
    \  [else (cons (first s) (select_words (rest s) (- n 1)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf39p_pgj.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpf39p_pgj.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpf39p_pgj.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf39p_pgj.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf39p_pgj.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf39p_pgj.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf39p_pgj.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (cons (car\
    \ s) (select_words (cdr s) 0))]\n    [else (cons (car s)\n                (select_words\
    \ (cdr s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had a\
    \ little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoqpvi2v4.rkt:27:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Mary had a little lamb\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpoqpvi2v4.rkt:28:4\n\ncar: contract violation\n  expected:\
    \ pair?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpoqpvi2v4.rkt:29:4\n\ncar:\
    \ contract violation\n  expected: pair?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoqpvi2v4.rkt:30:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoqpvi2v4.rkt:31:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoqpvi2v4.rkt:32:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoqpvi2v4.rkt:33:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) (list)]\n    [(= n 0) (list)]\n    [(= n 1) (cons\
    \ (first s) (select_words (rest s) 0))]\n    [else (cons (first s) (select_words\
    \ (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had a\
    \ little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_mwoc79l.rkt:26:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp_mwoc79l.rkt:27:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_mwoc79l.rkt:28:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_mwoc79l.rkt:29:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp_mwoc79l.rkt:30:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_mwoc79l.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_mwoc79l.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [(= (length s) n) '()]\n    [else (cons (first s) (select_words (rest\
    \ s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplnfdv0ke.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmplnfdv0ke.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmplnfdv0ke.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplnfdv0ke.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplnfdv0ke.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplnfdv0ke.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplnfdv0ke.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [(= (length s) n) s]\n    [else (cons (first s)\n                (select_words\
    \ (rest s)\n                             (sub1 n)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmvc7c5j0.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpmvc7c5j0.rkt:30:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmvc7c5j0.rkt:31:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmvc7c5j0.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmvc7c5j0.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmvc7c5j0.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmvc7c5j0.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) (list)]\n    [(= (length s) n) (list)]\n    [(=\
    \ (length s) 0) (list)]\n    [else (cons (first s) (select_words (rest s) n))]\n\
    \  ))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmperb3pxa5.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmperb3pxa5.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmperb3pxa5.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmperb3pxa5.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmperb3pxa5.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmperb3pxa5.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmperb3pxa5.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) (list)]\n    [(= (length s) n) (list)]\n    [(=\
    \ (length s) 0) (list)]\n    [else (cons (first s) (select_words (rest s) n))]\n\
    \  )\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5w7lettr.rkt:28:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp5w7lettr.rkt:29:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp5w7lettr.rkt:30:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5w7lettr.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5w7lettr.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5w7lettr.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5w7lettr.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [(= (length s) n) '()]\n    [else (cons (first s) (select_words (rest\
    \ s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptuut1nm8.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmptuut1nm8.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmptuut1nm8.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptuut1nm8.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptuut1nm8.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptuut1nm8.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptuut1nm8.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) (list)]\n    [(equal? (length s) n) (list s)]\n\
    \    [else (cons (first s) (select_words (rest s) n))]\n  ))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpncnkksxf.rkt:26:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpncnkksxf.rkt:27:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpncnkksxf.rkt:28:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpncnkksxf.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpncnkksxf.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpncnkksxf.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpncnkksxf.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(equal? n (length s)) s]\n    [else\
    \ (cons (first s)\n                (select_words (rest s) n))]\n  )\n)\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc6pi4amk.rkt:28:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpc6pi4amk.rkt:29:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpc6pi4amk.rkt:30:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc6pi4amk.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc6pi4amk.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc6pi4amk.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc6pi4amk.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) (list)]\n    [(= 0 (string-length s)) (list)]\n\
    \    [(= n (string-length s)) (list)]\n    [else (cons (substring s 0 (- (string-length\
    \ s) n)) (select_words (substring s (+ 0 (string-length s) n) n))]))) \n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp4z16882a.rkt:19:112: read-syntax: missing `)` to close preceding\
    \ `(`, found instead `]`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [(= (length s) n) (cons (first s) (select_words (rest s) n))]\n  \
    \  [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiu3lpmfe.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpiu3lpmfe.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpiu3lpmfe.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiu3lpmfe.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiu3lpmfe.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiu3lpmfe.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiu3lpmfe.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [(= (length s) n) (cons s (select_words (rest s) n))]\n    [else (cons\
    \ (first s) (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4c2kxx_2.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp4c2kxx_2.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4c2kxx_2.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4c2kxx_2.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4c2kxx_2.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4c2kxx_2.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4c2kxx_2.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) n)\
    \ s]\n    [else (cons (first s)\n                (select_words (rest s)\n    \
    \                         (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwkgp0mrj.rkt:28:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpwkgp0mrj.rkt:29:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwkgp0mrj.rkt:30:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwkgp0mrj.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwkgp0mrj.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwkgp0mrj.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwkgp0mrj.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) (list)]\n    [(= (length s) n) (list)]\n    [(=\
    \ (length s) 0) (list)]\n    [else (cons (first s) (select_words (rest s) n))]\n\
    \  )\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7uzwitv8.rkt:28:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp7uzwitv8.rkt:29:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7uzwitv8.rkt:30:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7uzwitv8.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7uzwitv8.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7uzwitv8.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7uzwitv8.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [else (cons (first s)\n                (select_words (rest s) (sub1\
    \ n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr46k7v72.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpr46k7v72.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpr46k7v72.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr46k7v72.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr46k7v72.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr46k7v72.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr46k7v72.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) (list '())]\n    [(equal? (length s) n) (list s)]\n\
    \    [else (cons (first s)\n                (select_words (rest s) n))]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpton7jx_t.rkt:26:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpton7jx_t.rkt:27:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpton7jx_t.rkt:28:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpton7jx_t.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpton7jx_t.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpton7jx_t.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpton7jx_t.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [(= (length s) n) '()]\n    [else (cons (first s)\n              \
    \  (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzjwp8lxm.rkt:28:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzjwp8lxm.rkt:29:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzjwp8lxm.rkt:30:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzjwp8lxm.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzjwp8lxm.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzjwp8lxm.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzjwp8lxm.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) (list)]\n    [(equal? (length s) n) (list s)]\n\
    \    [else (cons (first s)\n                (select_words (rest s) n))]\n    ))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp088iem_6.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp088iem_6.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp088iem_6.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp088iem_6.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp088iem_6.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp088iem_6.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp088iem_6.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [(= (length s) n) '()]\n    [else (cons (first s)\n              \
    \  (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr5ip76a3.rkt:28:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpr5ip76a3.rkt:29:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpr5ip76a3.rkt:30:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr5ip76a3.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr5ip76a3.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr5ip76a3.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr5ip76a3.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [(= (length s) n) (cons s s)]\n    [else (cons (substring s 0 (- n\
    \ 1)) (select_words (substring s (+ n 1) (length s))))]\n  ))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxoz_3g1q.rkt:28:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpxoz_3g1q.rkt:29:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxoz_3g1q.rkt:30:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxoz_3g1q.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxoz_3g1q.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxoz_3g1q.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxoz_3g1q.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [(= (length s) n) '()]\n    [else (cons (first s) (select_words (rest\
    \ s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5zh2c10f.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp5zh2c10f.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp5zh2c10f.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5zh2c10f.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5zh2c10f.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5zh2c10f.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5zh2c10f.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) n)\
    \ '()]\n    [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjygq7p17.rkt:26:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpjygq7p17.rkt:27:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjygq7p17.rkt:28:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjygq7p17.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjygq7p17.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjygq7p17.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjygq7p17.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) (list '())]\n    [(equal? (length s) n) (list s)]\n\
    \    [(equal? (length s) 0) (list '())]\n    [else (cons (first s) (select_words\
    \ (rest s) n))]\n  )\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had a\
    \ little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyfso54a5.rkt:28:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpyfso54a5.rkt:29:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyfso54a5.rkt:30:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyfso54a5.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyfso54a5.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyfso54a5.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyfso54a5.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) (list)]\n    [(= n 0) (list)]\n    [else (cons\
    \ (first s)\n                (select_words (rest s)\n                        \
    \     (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg3033lpa.rkt:27:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpg3033lpa.rkt:28:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpg3033lpa.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg3033lpa.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpg3033lpa.rkt:31:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg3033lpa.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpg3033lpa.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [(= (length s) n) '()]\n    [else (cons (first s) (select_words (rest\
    \ s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcjfkrf8u.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpcjfkrf8u.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcjfkrf8u.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcjfkrf8u.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcjfkrf8u.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcjfkrf8u.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcjfkrf8u.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= (length s) n) '()]\n    [(= (length\
    \ s) 0) '()]\n    [(= n 0) '()]\n    [else (cons (first s)\n                (select_words\
    \ (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had a\
    \ little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoq3j5c_c.rkt:28:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpoq3j5c_c.rkt:29:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpoq3j5c_c.rkt:30:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoq3j5c_c.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoq3j5c_c.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoq3j5c_c.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoq3j5c_c.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [(= (length s) n) (cons s (select_words (rest s) n))]\n    [else (cons\
    \ (first s) (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa2keczs5.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpa2keczs5.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpa2keczs5.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa2keczs5.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa2keczs5.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa2keczs5.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa2keczs5.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_aueo29u.rkt:26:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_aueo29u.rkt:27:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_aueo29u.rkt:28:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_aueo29u.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_aueo29u.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_aueo29u.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_aueo29u.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= (length s) n) '()]\n    [(= (length\
    \ s) 0) '()]\n    [else (cons (first s)\n                (select_words (rest s)\
    \ n))]\n  ))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxo10qvox.rkt:28:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpxo10qvox.rkt:29:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxo10qvox.rkt:30:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxo10qvox.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxo10qvox.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxo10qvox.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxo10qvox.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) (list)]\n    [(= (length s) n) (list)]\n    [(=\
    \ (length s) 0) (list)]\n    [else (cons (first s) (select_words (rest s) n))]\n\
    \  )\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9vw1c6l6.rkt:28:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9vw1c6l6.rkt:29:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9vw1c6l6.rkt:30:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9vw1c6l6.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9vw1c6l6.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9vw1c6l6.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9vw1c6l6.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) (list)]\n    [(= (length s) n) (list)]\n    [else\
    \ (cons (first s) (select_words (rest s) n))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpur3yczad.rkt:25:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpur3yczad.rkt:26:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpur3yczad.rkt:27:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpur3yczad.rkt:28:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpur3yczad.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpur3yczad.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpur3yczad.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [(= (length s) n) '()]\n    [else (cons (first s)\n              \
    \  (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy11ga1cp.rkt:28:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpy11ga1cp.rkt:29:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpy11ga1cp.rkt:30:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy11ga1cp.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy11ga1cp.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy11ga1cp.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy11ga1cp.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [(= (length s) n) '()]\n    [else (cons (first s)\n              \
    \  (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv4fo34gx.rkt:28:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpv4fo34gx.rkt:29:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv4fo34gx.rkt:30:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv4fo34gx.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv4fo34gx.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv4fo34gx.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv4fo34gx.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= (length s) 0) '()]\n    [(= n 0)\
    \ '()]\n    [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpumbagesy.rkt:26:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpumbagesy.rkt:27:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpumbagesy.rkt:28:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpumbagesy.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpumbagesy.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpumbagesy.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpumbagesy.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(equal? (length s) 0) '()]\n    [(equal?\
    \ (length s) n) '()]\n    [else (cons (first s) (select_words (rest s) n))]\n\
    \  )\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5r16sxl9.rkt:28:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp5r16sxl9.rkt:29:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp5r16sxl9.rkt:30:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5r16sxl9.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5r16sxl9.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5r16sxl9.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5r16sxl9.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) (list)]\n    [(= (length s) n) (list)]\n    [else\
    \ (cons (first s)\n                (select_words (rest s) n))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdffk0txd.rkt:26:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpdffk0txd.rkt:27:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdffk0txd.rkt:28:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdffk0txd.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdffk0txd.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdffk0txd.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdffk0txd.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (cons (car\
    \ s) (select_words (cdr s) 0))]\n    [else (cons (car s)\n                (select_words\
    \ (cdr s)\n                            (sub1 n)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjn72qrth.rkt:28:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Mary had a little lamb\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpjn72qrth.rkt:29:4\n\ncar: contract violation\n  expected:\
    \ pair?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjn72qrth.rkt:30:4\n\ncar:\
    \ contract violation\n  expected: pair?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjn72qrth.rkt:31:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjn72qrth.rkt:32:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjn72qrth.rkt:33:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjn72qrth.rkt:34:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= (length s) n) '()]\n    [(= (length\
    \ s) 0) '()]\n    [else (cons (first s) (select_words (rest s) n))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy97m5_ns.rkt:26:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpy97m5_ns.rkt:27:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpy97m5_ns.rkt:28:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy97m5_ns.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy97m5_ns.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy97m5_ns.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy97m5_ns.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [(= (length s) n) (cons (first s) (select_words (rest s) n))]\n  \
    \  [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprc045xwz.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprc045xwz.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprc045xwz.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprc045xwz.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprc045xwz.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprc045xwz.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprc045xwz.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) (list)]\n    [(= 0 (string-length s)) empty]\n\
    \    [(= n 0) (list)]\n    [else (cons (substring s 0 (string-length s) (- n 1))\
    \ \n                (select_words (substring s (+ 0 (string-length s) (- n 1))\
    \ n))]))) \n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpgykn_0d9.rkt:20:78: read-syntax: missing `)` to close `(` on line\
    \ 19, found instead `]`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(equal? (length s) 0) '()]\n    [(equal?\
    \ (length s) n) '()]\n    [else (cons (first s)\n                (select_words\
    \ (rest s) n))]\n  ))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had a\
    \ little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp37jbcvzs.rkt:28:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp37jbcvzs.rkt:29:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp37jbcvzs.rkt:30:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp37jbcvzs.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp37jbcvzs.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp37jbcvzs.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp37jbcvzs.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) (list)]\n    [(= (length s) 0) (list)]\n    [(=\
    \ n 0) (list)]\n    [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvfiko6jc.rkt:26:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpvfiko6jc.rkt:27:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvfiko6jc.rkt:28:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvfiko6jc.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvfiko6jc.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvfiko6jc.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvfiko6jc.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [(= (length s) n) (cons (first s) (select_words (rest s) n))]\n  \
    \  [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiymp4ljh.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpiymp4ljh.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpiymp4ljh.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiymp4ljh.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiymp4ljh.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiymp4ljh.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiymp4ljh.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n\
    \    [else (cons (first s)\n                (select_words (rest s) (sub1 n)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp161w4154.rkt:27:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp161w4154.rkt:28:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp161w4154.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp161w4154.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp161w4154.rkt:31:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp161w4154.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp161w4154.rkt:33:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) (list)]\n    [(= (length s) n) (list)]\n    [(=\
    \ (length s) 0) (list)]\n    [else (cons (first s) (select_words (rest s) n))]\n\
    \  )\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpimrj_s38.rkt:28:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpimrj_s38.rkt:29:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpimrj_s38.rkt:30:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpimrj_s38.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpimrj_s38.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpimrj_s38.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpimrj_s38.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(equal? (length s) n) s]\n    [else\
    \ (cons (first s) (select_words (rest s) n))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7yw6v2f3.rkt:25:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp7yw6v2f3.rkt:26:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7yw6v2f3.rkt:27:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7yw6v2f3.rkt:28:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7yw6v2f3.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7yw6v2f3.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7yw6v2f3.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [(= (length s) n) '()]\n    [else (cons (first s) (select_words (rest\
    \ s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqqcqt04o.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpqqcqt04o.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqqcqt04o.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqqcqt04o.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqqcqt04o.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqqcqt04o.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqqcqt04o.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= (length s) n) '()]\n    [(= (length\
    \ s) 0) '()]\n    [(= (length s) 1) (cons (first s) (select_words (rest s) n))]\n\
    \    [else (cons (first s) (select_words (rest s) n))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8ah1hg00.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp8ah1hg00.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8ah1hg00.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8ah1hg00.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8ah1hg00.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8ah1hg00.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8ah1hg00.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) (list)]\n    [(= 0 (length s)) (list)]\n    [(=\
    \ n (length s)) (list)]\n    [else (cons (first s)\n                (select_words\
    \ (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had a\
    \ little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph4ehvp2c.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmph4ehvp2c.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmph4ehvp2c.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph4ehvp2c.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph4ehvp2c.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph4ehvp2c.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph4ehvp2c.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [(= (length s) n) (cons (first s) (select_words (rest s) n))]\n  \
    \  [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptdbs9al_.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmptdbs9al_.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmptdbs9al_.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptdbs9al_.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptdbs9al_.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptdbs9al_.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptdbs9al_.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) (list)]\n    [(= n 0) (list)]\n    [(= n 1) (list\
    \ s)]\n    [else (cons (first s)\n                (select_words (rest s) (sub1\
    \ n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphtrxx520.rkt:27:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmphtrxx520.rkt:28:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmphtrxx520.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphtrxx520.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmphtrxx520.rkt:31:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphtrxx520.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmphtrxx520.rkt:33:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) (list)]\n    [(= (length s) 0) (list)]\n    [(=\
    \ n 0) (list)]\n    [else (cons (first s)\n                (select_words (rest\
    \ s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqgb0rixs.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpqgb0rixs.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqgb0rixs.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqgb0rixs.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqgb0rixs.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqgb0rixs.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqgb0rixs.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [else (cons (substring s 0 (- (length s) n)) (select_words (substring\
    \ s n) (- n 1))) ]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeprm8o2e.rkt:26:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpeprm8o2e.rkt:27:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpeprm8o2e.rkt:28:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeprm8o2e.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeprm8o2e.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeprm8o2e.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeprm8o2e.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [(= (length s) n) '()]\n    [else (cons (first s)\n              \
    \  (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj7rsq1xj.rkt:28:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpj7rsq1xj.rkt:29:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpj7rsq1xj.rkt:30:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj7rsq1xj.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj7rsq1xj.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj7rsq1xj.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj7rsq1xj.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= (length s) n) '()]\n    [(= n 0)\
    \ '()]\n    [(= (length s) 1) (cons (first s) (select_words (rest s) 0))]\n  \
    \  [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5j_t4wcx.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp5j_t4wcx.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp5j_t4wcx.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5j_t4wcx.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5j_t4wcx.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5j_t4wcx.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5j_t4wcx.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [(= (length s) n) (cons (first s) (select_words (rest s) n))]\n  \
    \  [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_p7_60e.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpe_p7_60e.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_p7_60e.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_p7_60e.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_p7_60e.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_p7_60e.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_p7_60e.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0)\
    \ '()]\n    [(= (length s) n) s]\n    [else (cons (first s) (select_words (rest\
    \ s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkzhh9c4y.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpkzhh9c4y.rkt:28:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkzhh9c4y.rkt:29:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkzhh9c4y.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkzhh9c4y.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkzhh9c4y.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkzhh9c4y.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(equal? (length s) n) '()]\n    [(equal?\
    \ (length s) 0) '()]\n    [else (cons (first s) (select_words (rest s) n))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo2rk3178.rkt:26:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpo2rk3178.rkt:27:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo2rk3178.rkt:28:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo2rk3178.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo2rk3178.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo2rk3178.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo2rk3178.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
