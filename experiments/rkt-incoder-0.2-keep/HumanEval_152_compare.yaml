name: HumanEval_152_compare
language: racket
prompt: "#lang racket\n\n;; I think we all remember that feeling when the result of\
  \ some long-awaited\n;; event is finally known. The feelings and thoughts you have\
  \ at that moment are\n;; definitely worth noting down and comparing.\n;; Your task\
  \ is to determine if a person correctly guessed the results of a number of matches.\n\
  ;; You are given two arrays of scores and guesses of equal length, where each index\
  \ shows a match. \n;; Return an array of the same length denoting how far off each\
  \ guess was. If they have guessed correctly,\n;; the value is 0, and if not, the\
  \ value is the absolute difference between the guess and the score.\n;; example:\n\
  ;; compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n;; compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
  \ -> [4,4,1,0,0,6]\n(define (compare game guess)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate compare))\n\
  \    (check-equal? (candidate (list 1 2 3 4 5 1) (list 1 2 3 4 2 -2)) (list 0 0\
  \ 0 0 3 3))\n    (check-equal? (candidate (list 0 0 0 0 0 0) (list 0 0 0 0 0 0))\
  \ (list 0 0 0 0 0 0))\n    (check-equal? (candidate (list 1 2 3) (list -1 -2 -3))\
  \ (list 2 4 6))\n    (check-equal? (candidate (list 1 2 3 5) (list -1 2 3 4)) (list\
  \ 2 0 0 1))\n))\n\n(test-humaneval)"
completions: ["  (if (null? game)\n      '()\n      (if (null? guess)\n          '()\n\
    \          (let ((game-index (car game))\n                (guess-index (car guess)))\n\
    \            (if (= game-index guess-index)\n                (cons 0 '())\n  \
    \              (cons (abs (- guess-index game-index)) '())))))\n", "  (define\
    \ (compare game guess)\n    (define (compare game guess)\n      (define (compare\
    \ game guess)\n        (define (compare game guess)\n          (define (compare\
    \ game guess)\n            (define (compare game guess)\n              (define\
    \ (compare game guess)\n                (define (compare game guess)\n       \
    \           (define (compare game guess)\n                    (define (compare\
    \ game guess)\n                      (define (compare game guess)\n          \
    \              (define (compare game guess)\n                          (define\
    \ (compare game guess)\n                            (define (compare game guess)\n\
    \                              (define (compare game guess)\n                \
    \                (define (compare game guess)\n                              \
    \    (define (compare game guess)\n                                    (define\
    \ (compare game guess)\n                                      (define (compare\
    \ game guess)\n                                        (define (compare game guess)\n\
    \                                          (define (compare game guess)\n    \
    \                                        (define (compare game guess)\n      \
    \                                        (define (compare game guess)\n      \
    \                                          (define (compare game guess)\n    \
    \                                              (define (compare game guess)\n\
    \                                                    (define (compare game guess)\n\
    \                                                      (define (compare game guess)\n\
    \                                                        (define (compare game\
    \ guess)\n                                                          (define (compare\
    \ game guess)\n                                                            (define\
    \ (compare game guess)\n                                                     \
    \         (define (compare game guess)\n                                     \
    \                           (define (compare game guess)\n                   \
    \                                               (define (compare game guess)\n\
    \                                                                    (define (compare\
    \ game guess)\n                                                              \
    \        (define (compare game guess)\n                                      \
    \                                  (define (compare game guess)\n            \
    \                                                              (define (compare\
    \ game guess)\n                                                              \
    \              (define (compare game guess)\n                                \
    \                                              (define (compare game guess)\n\
    \                                                                            \
    \    (define (compare game guess)\n                                          \
    \                                        (define (compare game guess)\n      \
    \                                                                            \
    \  (define (compare game guess)\n                                            \
    \                                          (define (compare game guess)\n    \
    \                                                                            \
    \        (define (compare game guess)\n                                      \
    \                                                    (define (compare game guess)\n\
    \                                                                            \
    \                (define (compare game guess)\n                              \
    \                                                                (define (compare\
    \ game guess)\n                                                              \
    \                                  (define (compare game guess)\n            \
    \                                                                            \
    \          (define (compare game guess)\n                                    \
    \                                                                (define (compare\
    \ game guess)\n                                                              \
    \                                        (define (compare game guess)\n      \
    \                                                                            \
    \                      (define (compare game guess)\n                        \
    \                                                                            \
    \      (define (compare game guess)\n                                        \
    \                                                                    (define (compare\
    \ game guess)\n                                                              \
    \                                                (define (compare game guess)\n\
    \                                                                            \
    \                                    (define (compare game gues", "  (if (= (length\
    \ game) (length guess))\n      (let ((diff (make-array (length game) initial-element\
    \ 0)))\n        (do ((i 0 (+ i 1))\n             (j 0 (+ j 1)))\n          ((<\
    \ i j) (set! diff (sub1 diff)))\n          ((< j length) (set! diff (sub1 diff)))\n\
    \          ((< i length) (set! diff (sub1 diff)))\n          (set! diff (sub1\
    \ (array-ref game i) (array-ref guess j))))\n      diff))\n", "  (let loop ((game-scores\
    \ (make-array (length game) 0))\n             (guess-scores (make-array (length\
    \ guess) 0))\n             (game-guesses game)\n             (guess-guesses guess)\n\
    \             (game-index 0)\n             (guess-index 0))\n    (if (= game-index\
    \ 0)\n        (loop (cdr game-scores) (cdr guess-scores) (cdr game-guesses) (cdr\
    \ guess-guesses) (+ game-index 1) (+ guess-index 1))\n        (loop (cdr game-scores)\
    \ (cons (car game-guesses) guess-scores) (cdr game-guesses) (cons (car guess-guesses)\
    \ guess-guesses) (+ game-index 1) (+ guess-index 1)))))\n", "  (let ((scores (map\
    \ score-of game)))\n    (if (= (length game) (length guess))\n        (let ((scores\
    \ (map score-of guess)))\n          (if (= (length game) (length scores))\n  \
    \            (let ((scores (map score-of game)))\n                (if (= (length\
    \ game) (length scores))\n                    (let ((scores (map score-of guess)))\n\
    \                      (if (= (length game) (length scores))\n               \
    \           (let ((scores (map score-of game)))\n                            (if\
    \ (= (length game) (length scores))\n                                (let ((scores\
    \ (map score-of guess)))\n                                  (if (= (length game)\
    \ (length scores))\n                                      (let ((scores (map score-of\
    \ game)))\n                                        (if (= (length game) (length\
    \ scores))\n                                            (let ((scores (map score-of\
    \ guess)))\n                                              (if (= (length game)\
    \ (length scores))\n                                                  (let ((scores\
    \ (map score-of game)))\n                                                    (if\
    \ (= (length game) (length scores))\n                                        \
    \                (let ((scores (map score-of guess)))\n                      \
    \                                    (if (= (length game) (length scores))\n \
    \                                                             (let ((scores (map\
    \ score-of game)))\n                                                         \
    \       (if (= (length game) (length scores))\n                              \
    \                                      (let ((scores (map score-of guess)))\n\
    \                                                                      (if (=\
    \ (length game) (length scores))\n                                           \
    \                               (let ((scores (map score-of guess)))\n       \
    \                                                                     (if (= (length\
    \ game) (length scores))\n                                                   \
    \                             (let ((scores (map score-of guess)))\n         \
    \                                                                         (if\
    \ (= (length game) (length scores))\n                                        \
    \                                              (let ((scores (map score-of guess)))\n\
    \                                                                            \
    \            (if (= (length game) (length scores))\n                         \
    \                                                                   (let ((scores\
    \ (map score-of guess)))\n                                                   \
    \                                           (if (= (length game) (length scores))\n\
    \                                                                            \
    \                      (let ((scores (map score-of guess)))\n                \
    \                                                                            \
    \        (if (= (length game) (length scores))\n                             \
    \                                                                           (let\
    \ ((scores (map score-of guess)))\n                                          \
    \                                                                (if (= (length\
    \ game) (length scores))\n                                                   \
    \                                                           (let ((scores (map\
    \ score-of guess)))\n                                                        \
    \                                                        (if (= (length game)\
    \ (length scores))\n                                                         \
    \                                                           (let ((scores (map\
    \ score-of guess)))\n                                                        \
    \                                                              (if (= (length\
    \ game) (length scores))\n                                                   \
    \                                                                       (", " \
    \ (if (null? game)\n      '()\n      (let ((score (car game))\n            (guess1\
    \ (car guess))\n            (guess2 (cdr guess)))\n        (if (= guess1 guess2)\n\
    \            (list 0 0)\n            (list (abs (- guess1 score)) (abs (- guess2\
    \ score)))))))\n", "  (if (= (length game) (length guess))\n      (let ((diff\
    \ (make-array (length game) 'int)))\n        (do ((i 0 (+ i 1))\n            \
    \ (j (+ i 1))\n             (diff (make-array (length guess) 'int)))\n       \
    \   ((< i j) (set! diff (make-array (length guess) 'int))\n            (do ((a\
    \ 0 (+ a 1))\n                  (b (+ a 1))\n                  (diff (make-array\
    \ (length guess) 'int)))\n              ((< a b) (set! diff (make-array (length\
    \ guess) 'int))\n                (do ((a 0 (+ a 1))\n                      (b\
    \ (+ a 1))\n                      (diff (make-array (length guess) 'int)))\n \
    \                 ((< a b) (set! diff (make-array (length guess) 'int))\n    \
    \                (do ((a 0 (+ a 1))\n                          (b (+ a 1))\n \
    \                         (diff (make-array (length guess) 'int)))\n         \
    \             ((< a b) (set! diff (make-array (length guess) 'int))\n        \
    \                (do ((a 0 (+ a 1))\n                              (b (+ a 1))\n\
    \                              (diff (make-array (length guess) 'int)))\n    \
    \                      ((< a b) (set! diff (make-array (length guess) 'int))\n\
    \                            (do ((a 0 (+ a 1))\n                            \
    \      (b (+ a 1))\n                                  (diff (make-array (length\
    \ guess) 'int)))\n                              ((< a b) (set! diff (make-array\
    \ (length guess) 'int))\n                                (do ((a 0 (+ a 1))\n\
    \                                      (b (+ a 1))\n                         \
    \             (diff (make-array (length guess) 'int)))\n                     \
    \           ((< a b) (set! diff (make-array (length guess) 'int))\n          \
    \                        (do ((a 0 (+ a 1))\n                                \
    \        (b (+ a 1))\n                                        (diff (make-array\
    \ (length guess) 'int)))\n                                  ((< a b) (set! diff\
    \ (make-array (length guess) 'int))\n                                    (do ((a\
    \ 0 (+ a 1))\n                                          (b (+ a 1))\n        \
    \                                  (diff (make-array (length guess) 'int)))\n\
    \                                  ((< a b) (set! diff (make-array (length guess)\
    \ 'int))\n                                    (do ((a 0 (+ a 1))\n           \
    \                               (b (+ a 1))\n                                \
    \          (diff (make-array ", "  (if (= (length game) (length guess))\n    \
    \  (let ((diff (make-array (length guess) :initial-element 0)))\n        (do ((i\
    \ 0 (+ i 1))\n             (j (+ i 1))\n             (diff (make-array (length\
    \ guess) :initial-element 0)))\n          ((< i j) (set! diff (- diff (- guess\
    \ game))))\n          (set! diff (- diff (- guess game)))))\n      (let ((diff\
    \ (make-array (length guess) :initial-element 0)))\n        (do ((i 0 (+ i 1))\n\
    \             (j (+ i 1))\n             (diff (make-array (length guess) :initial-element\
    \ 0)))\n          ((< i j) (set! diff (- diff (- guess game))))\n          (set!\
    \ diff (- diff (- guess game)))))\n      (let ((diff (make-array (length guess)\
    \ :initial-element 0)))\n        (do ((i 0 (+ i 1))\n             (j (+ i 1))\n\
    \             (diff (make-array (length guess) :initial-element 0)))\n       \
    \   ((< i j) (set! diff (- diff (- guess game))))\n          (set! diff (- diff\
    \ (- guess game)))))\n      (let ((diff (make-array (length guess) :initial-element\
    \ 0)))\n        (do ((i 0 (+ i 1))\n             (j (+ i 1))\n             (diff\
    \ (make-array (length guess) :initial-element 0)))\n          ((< i j) (set! diff\
    \ (- diff (- guess game))))\n          (set! diff (- diff (- guess game)))))\n\
    \      (let ((diff (make-array (length guess) :initial-element 0)))\n        (do\
    \ ((i 0 (+ i 1))\n             (j (+ i 1))\n             (diff (make-array (length\
    \ guess) :initial-element 0)))\n          ((< i j) (set! diff (- diff (- guess\
    \ game))))\n          (set! diff (- diff (- guess game)))))\n      (let ((diff\
    \ (make-array (length guess) :initial-element 0)))\n        (do ((i 0 (+ i 1))\n\
    \             (j (+ i 1))\n             (diff (make-array (length guess) :initial-element\
    \ 0)))\n          ((< i j) (set! diff (- diff (- guess game))))\n          (set!\
    \ diff (- diff (- guess game)))))\n      (let ((diff (make-array (length guess)\
    \ :initial-element 0)))\n        (do ((i ", "  (define (compare game guess)\n\
    \    (define (compare game guess)\n      (define (compare game guess)\n      \
    \  (define (compare game guess)\n          (define (compare game guess)\n    \
    \        (define (compare game guess)\n              (define (compare game guess)\n\
    \                (define (compare game guess)\n                  (define (compare\
    \ game guess)\n                    (define (compare game guess)\n            \
    \          (define (compare game guess)\n                        (define (compare\
    \ game guess)\n                          (define (compare game guess)\n      \
    \                      (define (compare game guess)\n                        \
    \      (define (compare game guess)\n                                (define (compare\
    \ game guess)\n                                  (define (compare game guess)\n\
    \                                    (define (compare game guess)\n          \
    \                            (define (compare game guess)\n                  \
    \                      (define (compare game guess)\n                        \
    \                  (define (compare game guess)\n                            \
    \                (define (compare game guess)\n                              \
    \                (define (compare game guess)\n                              \
    \                  (define (compare game guess)\n                            \
    \                      (define (compare game guess)\n                        \
    \                            (define (compare game guess)\n                  \
    \                                    (define (compare game guess)\n          \
    \                                              (define (compare game guess)\n\
    \                                                          (define (compare game\
    \ guess)\n                                                            (define\
    \ (compare game guess)\n                                                     \
    \         (define (compare game guess)\n                                     \
    \                           (define (compare game guess)\n                   \
    \                                               (define (compare game guess)\n\
    \                                                                    (define (compare\
    \ game guess)\n                                                              \
    \        (define (compare game guess)\n                                      \
    \                                  (define (compare game guess)\n            \
    \                                                              (define (compare\
    \ game guess)\n                                                              \
    \              (define (compare game guess)\n                                \
    \                                              (define (compare game guess)\n\
    \                                                                            \
    \    (define (compare game guess)\n                                          \
    \                                        (define (compare game guess)\n      \
    \                                                                            \
    \  (define (compare game guess)\n                                            \
    \                                          (define (compare game guess)\n    \
    \                                                                            \
    \        (define (compare game guess)\n                                      \
    \                                                    (define (compare game guess)\n\
    \                                                                            \
    \                (define (compare game guess)\n                              \
    \                                                                (define (compare\
    \ game guess)\n                                                              \
    \                                  (define (compare game guess)\n            \
    \                                                                            \
    \          (define (compare game guess)\n                                    \
    \                                                                (define (compare\
    \ game guess)\n                                                              \
    \                                        (define (compare game guess)\n      \
    \                                                                            \
    \                      (define (compare game guess)\n                        \
    \                                                                            \
    \      (define (compare game guess)\n                                        \
    \                                                                    (define (compare\
    \ game guess)\n                                                              \
    \                                                (define (compare game guess)\n\
    \                                                                            \
    \                                    (define (compare game gues", "  (if (null?\
    \ game)\n      '()\n      (if (null? guess)\n          '()\n          (let ((score\
    \ (car game))\n                (guess (car guess))\n                (diff))\n\
    \            (if (= score guess)\n                (cons diff '())\n          \
    \      (let ((diff (- guess score)))\n                  (cons diff (compare (cdr\
    \ game) guess)))))\n          (let ((score (car game))\n                (guess\
    \ (car guess))\n                (diff))\n            (if (= score guess)\n   \
    \             (cons diff '())\n                (let ((diff (- guess score)))\n\
    \                  (cons diff (compare (cdr game) guess)))))\n          (let ((score\
    \ (car game))\n                (guess (car guess))\n                (diff))\n\
    \            (if (= score guess)\n                (cons diff '())\n          \
    \      (let ((diff (- guess score)))\n                  (cons diff (compare (cdr\
    \ game) guess)))))\n          (let ((score (car game))\n                (guess\
    \ (car guess))\n                (diff))\n            (if (= score guess)\n   \
    \             (cons diff '())\n                (let ((diff (- guess score)))\n\
    \                  (cons diff (compare (cdr game) guess)))))\n          (let ((score\
    \ (car game))\n                (guess (car guess))\n                (diff))\n\
    \            (if (= score guess)\n                (cons diff '())\n          \
    \      (let ((diff (- guess score)))\n                  (cons diff (compare (cdr\
    \ game) guess)))))\n          (let ((score (car game))\n                (guess\
    \ (car guess))\n                (diff))\n            (if (= score guess)\n   \
    \             (cons diff '())\n                (let ((diff (- guess score)))\n\
    \                  (cons diff (compare (cdr game) guess)))))\n          (let ((score\
    \ (car game))\n                (guess (car guess))\n                (diff))\n\
    \            (if (= score guess)\n                (cons diff '())\n          \
    \      (let ((diff (- guess score)))\n                  (cons diff (compare (cdr\
    \ game) guess)))))\n          (let ((score (car game))\n                (guess\
    \ (car guess))\n                (diff))\n            (if (= score guess)\n   \
    \             (cons diff '())\n                (let ((diff (- guess score)))\n\
    \                  (cons ", "  (if (= (length game) (length guess))\n      (let\
    \ ((diff (make-array (length guess) 'int)))\n        (do ((i 0 (+ i 1))\n    \
    \         (j (+ i 1))\n             (diff diff))\n          ((< i j) (set! diff\
    \ (make-array (length guess) 'int)))\n          ((< j length) (set! diff (make-array\
    \ (length guess) 'int)))\n          ((< i length) (set! diff (make-array (length\
    \ guess) 'int)))\n          ((< i j) (set! diff (make-array (length guess) 'int)))\n\
    \          ((< j i) (set! diff (make-array (length guess) 'int)))\n          ((<\
    \ i j) (set! diff (make-array (length guess) 'int)))\n          ((< j i) (set!\
    \ diff (make-array (length guess) 'int)))\n          ((< i j) (set! diff (make-array\
    \ (length guess) 'int)))\n          ((< j i) (set! diff (make-array (length guess)\
    \ 'int)))\n          ((< i j) (set! diff (make-array (length guess) 'int)))\n\
    \          ((< j i) (set! diff (make-array (length guess) 'int)))\n          ((<\
    \ i j) (set! diff (make-array (length guess) 'int)))\n          ((< j i) (set!\
    \ diff (make-array (length guess) 'int)))\n          ((< i j) (set! diff (make-array\
    \ (length guess) 'int)))\n          ((< j i) (set! diff (make-array (length guess)\
    \ 'int)))\n          ((< i j) (set! diff (make-array (length guess) 'int)))\n\
    \          ((< j i) (set! diff (make-array (length guess) 'int)))\n          ((<\
    \ i j) (set! diff (make-array (length guess) 'int)))\n          ((< j i) (set!\
    \ diff (make-array (length guess) 'int)))\n          ((< i j) (set! diff (make-array\
    \ (length guess) 'int)))\n          ((< j i) (set! diff (make-array (length guess)\
    \ 'int)))\n          ((< i j) (set! diff (make-array (length guess) 'int)))\n\
    \          ((< j i) (set! diff (make-array (length guess) 'int)))\n          ((<\
    \ i ", "  (if (= (length game) (length guess))\n      (let ((score (car game))\n\
    \            (guess-score (car guess)))\n        (if (= guess-score score)\n \
    \           (list 0 0)\n            (list (abs (- guess-score score))\n      \
    \            (abs (- score guess-score)))))\n      (let ((score (car guess))\n\
    \            (guess-score (car game)))\n        (if (= guess-score score)\n  \
    \          (list 0 0)\n            (list (abs (- guess-score score))\n       \
    \           (abs (- score guess-score)))))\n      (let ((score (car game))\n \
    \           (guess-score (car guess)))\n        (if (= guess-score score)\n  \
    \          (list 0 0)\n            (list (abs (- guess-score score))\n       \
    \           (abs (- score guess-score)))))\n      (let ((score (car guess))\n\
    \            (guess-score (car game)))\n        (if (= guess-score score)\n  \
    \          (list 0 0)\n            (list (abs (- guess-score score))\n       \
    \           (abs (- score guess-score)))))\n      (let ((score (car guess))\n\
    \            (guess-score (car game)))\n        (if (= guess-score score)\n  \
    \          (list 0 0)\n            (list (abs (- guess-score score))\n       \
    \           (abs (- score guess-score)))))\n      (let ((score (car guess))\n\
    \            (guess-score (car game)))\n        (if (= guess-score score)\n  \
    \          (list 0 0)\n            (list (abs (- guess-score score))\n       \
    \           (abs (- score guess-score)))))\n      (let ((score (car guess))\n\
    \            (guess-score (car game)))\n        (if (= guess-score score)\n  \
    \          (list 0 0)\n            (list (abs (- guess-score score))\n       \
    \           (abs (- score guess-score)))))\n      (let ((score (car guess))\n\
    \            (guess-score (car game)))\n        (if (= guess-score score)\n  \
    \          (list 0 0)\n            (list (abs (- guess-score score))\n       \
    \           (abs (- score guess-score)))))\n      (let ((score (car guess))\n\
    \            (guess-score (car game)))\n        (if (= guess-score score)\n  \
    \          (list 0 0)\n            (list (abs (- guess-score score))\n       \
    \           (abs (- score guess-score", "  (if (null? game)\n      (if (null?\
    \ guess)\n          (list 0)\n          (list 0))\n      (let ((score (car game))\n\
    \            (guess1 (car guess))\n            (guess2 (car guess)))\n       \
    \ (if (= guess1 guess2)\n            (list 0)\n            (list (abs (- guess1\
    \ score))\n                  (abs (- guess2 score)))))\n      (let ((score (car\
    \ game))\n            (guess1 (car guess))\n            (guess2 (car guess)))\n\
    \        (if (= guess1 guess2)\n            (list 0)\n            (list (abs (-\
    \ guess1 score))\n                  (abs (- guess2 score)))))\n      (let ((score\
    \ (car game))\n            (guess1 (car guess))\n            (guess2 (car guess)))\n\
    \        (if (= guess1 guess2)\n            (list 0)\n            (list (abs (-\
    \ guess1 score))\n                  (abs (- guess2 score)))))\n      (let ((score\
    \ (car game))\n            (guess1 (car guess))\n            (guess2 (car guess)))\n\
    \        (if (= guess1 guess2)\n            (list 0)\n            (list (abs (-\
    \ guess1 score))\n                  (abs (- guess2 score)))))\n      (let ((score\
    \ (car game))\n            (guess1 (car guess))\n            (guess2 (car guess)))\n\
    \        (if (= guess1 guess2)\n            (list 0)\n            (list (abs (-\
    \ guess1 score))\n                  (abs (- guess2 score)))))\n      (let ((score\
    \ (car game))\n            (guess1 (car guess))\n            (guess2 (car guess)))\n\
    \        (if (= guess1 guess2)\n            (list 0)\n            (list (abs (-\
    \ guess1 score))\n                  (abs (- guess2 score)))))\n      (let ((score\
    \ (car game))\n            (guess1 (car guess))\n            (guess2 (car guess)))\n\
    \        (if (= guess1 guess2)\n            (list 0)\n            (list (abs (-\
    \ guess1 score))\n                  (abs (- guess2 score)))))\n      (let ((score\
    \ (car game))\n            (guess1 (car guess))\n            (guess2 (car guess)))\n\
    \        (if (= guess1 guess2)\n            (list 0)\n            (list (abs (-\
    \ guess1 score))\n                  (abs (- guess2 score)))))\n      (let ((score\
    \ (car game))\n            (guess1 (car guess", "  (if (= (length game) (length\
    \ guess))\n      (let ((diff (make-array (length guess) 'int)))\n        (do ((i\
    \ 0 (+ i 1))\n             (j (+ i 1))\n             (diff diff))\n          \
    \  ((< i j) (set! diff 0))\n            (set! diff\n                  (+ (- guess\
    \ (car game)) (- diff (car game))))\n            (set! diff (- diff (car game)))\n\
    \            (set! diff (- diff (car guess)))\n            (set! diff (- diff\
    \ (car guess)))\n            (set! diff (- diff (car guess)))\n            (set!\
    \ diff (- diff (car guess)))\n            (set! diff (- diff (car guess)))\n \
    \           (set! diff (- diff (car guess)))\n            (set! diff (- diff (car\
    \ guess)))\n            (set! diff (- diff (car guess)))\n            (set! diff\
    \ (- diff (car guess)))\n            (set! diff (- diff (car guess)))\n      \
    \      (set! diff (- diff (car guess)))\n            (set! diff (- diff (car guess)))\n\
    \            (set! diff (- diff (car guess)))\n            (set! diff (- diff\
    \ (car guess)))\n            (set! diff (- diff (car guess)))\n            (set!\
    \ diff (- diff (car guess)))\n            (set! diff (- diff (car guess)))\n \
    \           (set! diff (- diff (car guess)))\n            (set! diff (- diff (car\
    \ guess)))\n            (set! diff (- diff (car guess)))\n            (set! diff\
    \ (- diff (car guess)))\n            (set! diff (- diff (car guess)))\n      \
    \      (set! diff (- diff (car guess)))\n            (set! diff (- diff (car guess)))\n\
    \            (set! diff (- diff (car guess)))\n            (set! diff (- diff\
    \ (car guess)))\n            (set! diff (- diff (car guess)))\n            (set!\
    \ diff (- diff (car guess)))\n            (set! diff (- diff (car guess)))\n \
    \           (set! diff (- diff (car guess)))\n            (set! diff (- diff (car\
    \ guess)))\n            (set! diff (- diff (car guess)))\n            (set! diff\
    \ (- diff (car guess)))\n            (set! diff (- diff (car guess)))\n      \
    \      (set! diff (- diff (car guess", "  (if (null? game)\n      (if (null? guess)\n\
    \          (list 0)\n          (list 0))\n      (if (equal? (car game) (car guess))\n\
    \          (list 0)\n          (list (abs (- (car game) (car guess)))))))\n",
  "  (let ((scores (make-array (length game) 'int))\n        (guesses (make-array\
    \ (length guess) 'int)))\n    (loop for i from 0 to (length game)\n          for\
    \ j from 0 to (length guess)\n          when (= (game-score game i) (guess-score\
    \ guess j))\n          do (set! scores[i] j)\n              (set! guesses[j] i))\n\
    \    (let ((score (make-array (length guess) 'int))\n          (guess (make-array\
    \ (length game) 'int)))\n      (loop for i from 0 to (length guess)\n        \
    \    for j from 0 to (length game)\n            when (= (guesses[j] i) j)\n  \
    \          do (set! score[j] i)\n                (set! guess[i] j))\n      (let\
    \ ((diff (make-array (length guess) 'int))\n            (guess (make-array (length\
    \ game) 'int)))\n        (loop for i from 0 to (length guess)\n              for\
    \ j from 0 to (length game)\n              when (= (guesses[j] i) j)\n       \
    \       do (set! diff (- guesses[j] i))\n                (set! guess[i] j))\n\
    \      (let ((diff (make-array (length guess) 'int))\n            (guess (make-array\
    \ (length game) 'int)))\n        (loop for i from 0 to (length guess)\n      \
    \        for j from 0 to (length game)\n              when (= (guesses[j] i) j)\n\
    \              do (set! diff (- guesses[j] i))\n                (set! guess[i]\
    \ j))\n      (let ((diff (make-array (length guess) 'int))\n            (guess\
    \ (make-array (length game) 'int)))\n        (loop for i from 0 to (length guess)\n\
    \              for j from 0 to (length game)\n              when (= (guesses[j]\
    \ i) j)\n              do (set! diff (- guesses[j] i))\n                (set!\
    \ guess[i] j))\n      (let ((diff (make-array (length guess) 'int))\n        \
    \    (guess (make-array (length game) 'int)))\n        (loop for i from 0 to (length\
    \ guess)\n              for j from 0 to (length game)\n              when (= (guesses[j]\
    \ i) j)\n              do (set! diff (- guesses[j] i))\n                (set!\
    \ guess[i] j))\n      (let ((diff (make-array (length guess) 'int))\n", "  (if\
    \ (= (length game) (length guess))\n      (let ((diff (make-array (length guess)\
    \ 'int))\n            (index (make-array (length guess) 'int)))\n        (do ((i\
    \ 0 (+ i 1))\n             (j 0 (+ j 1)))\n            ((< i j) (set! diff 0 (+\
    \ diff (- guess (car game)) (- guess (car guess))))\n                  (set! index\
    \ (+ index i)))\n          (set! diff (+ diff (- guess (car game) (- guess (car\
    \ guess)))))\n        (set! diff (- diff (abs (car game) (car guess))))\n    \
    \    (set! index (- index 1))\n        (set! diff (+ diff (- index (length game))))\n\
    \        (set! diff (- diff (abs (car game) (- index (length game)))))\n     \
    \   (set! diff (- diff (abs (car game) (- index (length game)))))\n        (set!\
    \ diff (- diff (abs (car game) (- index (length game)))))\n        (set! diff\
    \ (- diff (abs (car game) (- index (length game)))))\n        (set! diff (- diff\
    \ (abs (car game) (- index (length game)))))\n        (set! diff (- diff (abs\
    \ (car game) (- index (length game)))))\n        (set! diff (- diff (abs (car\
    \ game) (- index (length game)))))\n        (set! diff (- diff (abs (car game)\
    \ (- index (length game)))))\n        (set! diff (- diff (abs (car game) (- index\
    \ (length game)))))\n        (set! diff (- diff (abs (car game) (- index (length\
    \ game)))))\n        (set! diff (- diff (abs (car game) (- index (length game)))))\n\
    \        (set! diff (- diff (abs (car game) (- index (length game)))))\n     \
    \   (set! diff (- diff (abs (car game) (- index (length game)))))\n        (set!\
    \ diff (- diff (abs (car game) (- index (length game)))))\n        (set! diff\
    \ (- diff (abs (car game) (- index (length game)))))\n        (set! diff (- diff\
    \ (abs (car game) (- index (length ", "  (if (= (length game) (length guess))\n\
    \      (let ((diff (make-array (length game) initial-element 0)))\n        (do\
    \ ((i 0 (+ i 1))\n             (j (+ i 1))\n             (diff diff))\n      \
    \    ((< i j) (set! diff (make-array (length game) initial-element 0)))\n    \
    \      ((< j length) (set! diff (make-array (length game) initial-element 0)))\n\
    \          ((= i j) (set! diff (make-array (length game) initial-element 0)))\n\
    \          ((= j length) (set! diff (make-array (length game) initial-element\
    \ 0)))\n          ((= i j) (set! diff (make-array (length game) initial-element\
    \ 0)))\n          ((= j length) (set! diff (make-array (length game) initial-element\
    \ 0)))\n          ((= i j) (set! diff (make-array (length game) initial-element\
    \ 0)))\n          ((= j length) (set! diff (make-array (length game) initial-element\
    \ 0)))\n          ((= i j) (set! diff (make-array (length game) initial-element\
    \ 0)))\n          ((= j length) (set! diff (make-array (length game) initial-element\
    \ 0)))\n          ((= i j) (set! diff (make-array (length game) initial-element\
    \ 0)))\n          ((= j length) (set! diff (make-array (length game) initial-element\
    \ 0)))\n          ((= i j) (set! diff (make-array (length game) initial-element\
    \ 0)))\n          ((= j length) (set! diff (make-array (length game) initial-element\
    \ 0)))\n          ((= i j) (set! diff (make-array (length game) initial-element\
    \ 0)))\n          ((= j length) (set! diff (make-array (length game) initial-element\
    \ 0)))\n          ((= i j) (set! diff (make-array (length game) initial-element\
    \ 0)))\n          ((= j length) (set! diff (make-array (length game) initial-element\
    \ 0)))\n          ((= i j) (set! diff (make-array (length game) initial-element\
    \ 0)))\n          ((= j length) (set! diff (make-array (length game) initial-element\
    \ 0)))\n          ((= i j) (set! diff (make-array (length game) initial-element\
    \ 0)))\n          ((= j length) (set! diff (make-array (length game) initial-element\
    \ 0)))\n          ", "  (if (= (length game) (length guess))\n      (map (lambda\
    \ (score)\n             (if (= (modulo score 10) 0)\n                 (/ score\
    \ 10)\n                 (abs (- guess score))))\n           game)\n      (map\
    \ (lambda (score)\n             (if (= (modulo score 10) 0)\n                \
    \ (/ score 10)\n                 (abs (- guess score))))\n           guess)))\n",
  "  (if (= (length game) (length guess))\n      (let ((score (car game))\n      \
    \      (guess (car guess)))\n        (if (= guess score)\n            (list 0\
    \ 0)\n            (list (abs (- guess score))\n                  (abs (- score\
    \ guess))))))\n  ;; The game is too short\n  (list -1 -1))\n</code>\n<|/ a tags=racket,scheme\
    \ |>\n<| c |>\nThanks for the answer! I really appreciate it. I was thinking about\
    \ using map to compare the two arrays, but I didn't know how to do that in racket.\
    \ Thanks again!\n<|/ c |>\n<| c |>\nI added a solution that uses `map` but I think\
    \ it's more complicated than it needs to be. `map` isn't really the right tool\
    \ for the job, since it only works on lists. `map` will also only work if you\
    \ have a list of lists. But if you have a list of numbers, `map` will work just\
    \ fine.\n<|/ c |>\n<| c |>\nI added a solution that uses `map` but I think it's\
    \ more complicated than it needs to be. `map` isn't really the right tool for\
    \ the job, since it only works on lists. `map` will also only work if you have\
    \ a list of lists. But if you have a list of numbers, `map` will work just fine.\n\
    <|/ c |>\n<| a dscore=1 |>\nHere's a solution that uses map and foldl to compare\
    \ the two lists. I added a helper function compare-score that compares two numbers.\
    \ I added a helper function compare-guess that compares two guesses. I added a\
    \ helper function compare-games that compares two games. I added a helper function\
    \ compare-game-guess that compares two guesses and a game.\n<code>", "  (if (=\
    \ (length game) (length guess))\n      (let ((diff (make-array (length guess)\
    \ 'int)))\n        (do ((i 0 (+ i 1))\n             (j 0 (+ j 1)))\n         \
    \   ((< i j) (set! diff (make-array (length guess) 'int)))\n            (set!\
    \ diff (+ (array-ref diff j) (array-ref diff i)))\n            (set! diff (abs\
    \ (- diff (array-ref game j))))\n            (set! diff (if (= (array-ref game\
    \ j) (array-ref guess i)) 0\n                          diff))\n            (set!\
    \ diff (if (= (array-ref game j) (array-ref guess i)) 0\n                    \
    \      diff))\n            (set! diff (if (= (array-ref game j) (array-ref guess\
    \ i)) 0\n                          diff))\n            (set! diff (if (= (array-ref\
    \ game j) (array-ref guess i)) 0\n                          diff))\n         \
    \   (set! diff (if (= (array-ref game j) (array-ref guess i)) 0\n            \
    \              diff))\n            (set! diff (if (= (array-ref game j) (array-ref\
    \ guess i)) 0\n                          diff))\n            (set! diff (if (=\
    \ (array-ref game j) (array-ref guess i)) 0\n                          diff))\n\
    \            (set! diff (if (= (array-ref game j) (array-ref guess i)) 0\n   \
    \                       diff))\n            (set! diff (if (= (array-ref game\
    \ j) (array-ref guess i)) 0\n                          diff))\n            (set!\
    \ diff (if (= (array-ref game j) (array-ref guess i)) 0\n                    \
    \      diff))\n            (set! diff (if (= (array-ref game j) (array-ref guess\
    \ i)) 0\n                          diff))\n            (set! diff (if (= (array-ref\
    \ game j) (array-ref guess i)) 0\n                          diff))\n         \
    \   (set! diff (if (= (array-ref game j) (array-ref guess i)) 0\n            \
    \              diff))\n            (set! diff (if (= (array-ref game j) (array-ref\
    \ guess i)) 0\n                          diff))\n            (set! diff (if (=\
    \ (array-ref game j) (array-ref guess i)) 0\n                          diff))\n\
    \            (set! diff (if (= (array-ref game j) (array-ref guess i)) 0\n   \
    \                       ", "  (if (= (length game) (length guess))\n      (let\
    \ ((diff (make-array (length guess) :initial-element 0)))\n        (do ((i 0 (+\
    \ i 1))\n             (j (+ i 1))\n             (diff (make-array (length guess)\
    \ :initial-element 0)))\n          ((< i j) (set! diff (make-array (length guess)\
    \ :initial-element 0)))\n          ((< j length) (set! diff (make-array (length\
    \ guess) :initial-element 0)))\n          ((< i length) (set! diff (make-array\
    \ (length guess) :initial-element 0)))\n          ((< i j)\n           (do ((a\
    \ 0 (+ a 1))\n                (diff (make-array (length guess) :initial-element\
    \ 0)))\n              ((< a length) (set! diff (make-array (length guess) :initial-element\
    \ 0)))\n              ((< a i)\n               (do ((b (+ b 1))\n            \
    \         (diff (make-array (length guess) :initial-element 0)))\n           \
    \      ((< b length) (set! diff (make-array (length guess) :initial-element 0)))\n\
    \                 ((< b j)\n                  (do ((diff (make-array (length guess)\
    \ :initial-element 0)))\n                    (set! diff (make-array (length guess)\
    \ :initial-element 0)))\n                  (set! diff (- diff (+ guess (aref game\
    \ i))))))))\n          ((< j i)\n           (do ((a 0 (+ a 1))\n             \
    \   (diff (make-array (length guess) :initial-element 0)))\n              ((<\
    \ a length) (set! diff (make-array (length guess) :initial-element 0)))\n    \
    \          ((< a j)\n               (do ((b (+ b 1))\n                     (diff\
    \ (make-array (length guess) :initial-element 0)))\n                 ((< b length)\
    \ (set! diff (make-array (length guess) :initial-element 0)))\n              \
    \   ((< b i)\n                  (do ((diff (make-array (length guess) :initial-element\
    \ 0)))\n                    (set! diff (make-array (length guess) :initial-element\
    \ 0)))\n                  (set! diff (- diff (+ guess (aref game j))))))))\n \
    \         (set! diff (+ diff (- guess (aref game i))))\n          diff)\n    \
    \  (let ((diff (make-array (length guess) :initial-element 0)))\n        (do ((i\
    \ 0 (+ i 1))\n             (j (+ i 1))\n             (diff (make-array (length\
    \ guess) :initial-element 0)))\n          ((< ", "  (if (= (length game) (length\
    \ guess))\n      (let ((diff (make-array (length guess) initial-element 0)))\n\
    \        (do ((i 0 (+ i 1))\n             (g 0 (+ g 1)))\n            ((< i length)\
    \ (set! diff (subarray diff (- i 1) (+ g 1))))\n            (set! diff (subarray\
    \ diff (- g 1) (- i 1))))\n        (subarray diff 0 0))\n      (let ((diff (make-array\
    \ (length game) initial-element 0)))\n        (do ((i 0 (+ i 1))\n           \
    \  (g 0 (+ g 1)))\n            ((< i length) (set! diff (subarray diff (- i 1)\
    \ (+ g 1))))\n            (set! diff (subarray diff (- g 1) (- i 1))))\n     \
    \   (subarray diff 0 0))))\n", "  (let ((score (game-score game)))\n    (let ((diff\
    \ (game-diff game guess)))\n      (if (game-correct game)\n          (list diff)\n\
    \          (list score (abs (- diff score)))))))\n", "  (if (= (length game) (length\
    \ guess))\n      (map (lambda (x y) (if (= x y) 0 abs (- x y))) game guess)\n\
    \      (map (lambda (x y) (if (= x y) 0 abs (- x y))) guess game)))\n", "  (define\
    \ (compare game guess)\n    (define (compare game guess)\n      (define (compare\
    \ game guess)\n        (define (compare game guess)\n          (define (compare\
    \ game guess)\n            (define (compare game guess)\n              (define\
    \ (compare game guess)\n                (define (compare game guess)\n       \
    \           (define (compare game guess)\n                    (define (compare\
    \ game guess)\n                      (define (compare game guess)\n          \
    \              (define (compare game guess)\n                          (define\
    \ (compare game guess)\n                            (define (compare game guess)\n\
    \                              (define (compare game guess)\n                \
    \                (define (compare game guess)\n                              \
    \    (define (compare game guess)\n                                    (define\
    \ (compare game guess)\n                                      (define (compare\
    \ game guess)\n                                        (define (compare game guess)\n\
    \                                          (define (compare game guess)\n    \
    \                                        (define (compare game guess)\n      \
    \                                        (define (compare game guess)\n      \
    \                                          (define (compare game guess)\n    \
    \                                              (define (compare game guess)\n\
    \                                                    (define (compare game guess)\n\
    \                                                      (define (compare game guess)\n\
    \                                                        (define (compare game\
    \ guess)\n                                                          (define (compare\
    \ game guess)\n                                                            (define\
    \ (compare game guess)\n                                                     \
    \         (define (compare game guess)\n                                     \
    \                           (define (compare game guess)\n                   \
    \                                               (define (compare game guess)\n\
    \                                                                    (define (compare\
    \ game guess)\n                                                              \
    \        (define (compare game guess)\n                                      \
    \                                  (define (compare game guess)\n            \
    \                                                              (define (compare\
    \ game guess)\n                                                              \
    \              (define (compare game guess)\n                                \
    \                                              (define (compare game guess)\n\
    \                                                                            \
    \    (define (compare game guess)\n                                          \
    \                                        (define (compare game guess)\n      \
    \                                                                            \
    \  (define (compare game guess)\n                                            \
    \                                          (define (compare game guess)\n    \
    \                                                                            \
    \        (define (compare game guess)\n                                      \
    \                                                    (define (compare game guess)\n\
    \                                                                            \
    \                (define (compare game guess)\n                              \
    \                                                                (define (compare\
    \ game guess)\n                                                              \
    \                                  (define (compare game guess)\n            \
    \                                                                            \
    \          (define (compare game guess)\n                                    \
    \                                                                (define (compare\
    \ game guess)\n                                                              \
    \                                        (define (compare game guess)\n      \
    \                                                                            \
    \                      (define (compare game guess)\n                        \
    \                                                                            \
    \      (define (compare game guess)\n                                        \
    \                                                                    (define (compare\
    \ game guess)\n                                                              \
    \                                                (define (compare game guess)\n\
    \                                                                            \
    \                                    (define (compare game gues", "  (if (= (length\
    \ game) (length guess))\n      (map + (map - guess game))\n      (map - (map -\
    \ guess game) (map - game guess))))\n", "  (if (= (length game) (length guess))\n\
    \      (let ((diff (make-array (length guess) initial-element-value 0)))\n   \
    \     (do ((i 0 (+ i 1))\n             (game (sub1 game))\n             (guess\
    \ (sub1 guess)))\n          ((< i guess) (set! diff (+ diff (abs (- guess game))))\n\
    \          ((> i guess) (set! diff (+ diff (- guess game))))\n          (set!\
    \ diff (+ diff (abs (- guess game))))\n          (set! diff (+ diff (abs (- game\
    \ guess))))\n          (set! diff (+ diff (abs (- game game))))\n          (set!\
    \ diff (+ diff (abs (- guess guess))))\n          (set! diff (+ diff (abs (- game\
    \ guess))))\n          (set! diff (+ diff (abs (- guess game))))\n          (set!\
    \ diff (+ diff (abs (- game guess))))\n          (set! diff (+ diff (abs (- guess\
    \ guess))))\n          (set! diff (+ diff (abs (- game guess))))\n          (set!\
    \ diff (+ diff (abs (- guess game))))\n          (set! diff (+ diff (abs (- game\
    \ guess))))\n          (set! diff (+ diff (abs (- guess guess))))\n          (set!\
    \ diff (+ diff (abs (- game guess))))\n          (set! diff (+ diff (abs (- guess\
    \ game))))\n          (set! diff (+ diff (abs (- game guess))))\n          (set!\
    \ diff (+ diff (abs (- guess guess))))\n          (set! diff (+ diff (abs (- game\
    \ guess))))\n          (set! diff (+ diff (abs (- guess game))))\n          (set!\
    \ diff (+ diff (abs (- game guess))))\n          (set! diff (+ diff (abs (- guess\
    \ guess))))\n          (set! diff (+ diff (abs (- game guess))))\n          (set!\
    \ diff (+ diff (abs (- guess game))))\n          (set! diff (+ diff (abs (- game\
    \ guess))))\n          (set! diff (+ diff (abs (- guess guess))))\n          (set!\
    \ diff (+ diff (abs (- game guess))))\n          (set! diff (+ diff (abs (- guess\
    \ game))))\n          (set", "  (define (compare game guess)\n    (if (null? game)\n\
    \        guess\n        (if (null? guess)\n            game\n            (if (>\
    \ (car game) (car guess))\n                (compare (cdr game) (cdr guess))\n\
    \                (compare (cdr game) (cdr guess))\n            )\n        )\n\
    \    )\n  )\n  (compare game guess)\n)\n", "  (if (= (length game) (length guess))\n\
    \      (let ((diff (make-array (length guess) :initial-element 0)))\n        (do\
    \ ((i 0 (+ i 1))\n             (game-idx (+ i 1))\n             (guess-idx (+\
    \ i 1)))\n          ((< i guess-idx) (set! diff (+ diff (abs (- guess game))))\n\
    \            (set! diff (+ diff (abs (- game guess))))\n            (set! diff\
    \ (+ diff (abs (- guess game-idx))))\n            (set! diff (+ diff (abs (- game\
    \ guess-idx))))\n            (set! diff (+ diff (abs (- guess game-idx))))\n \
    \           (set! diff (+ diff (abs (- game guess-idx))))\n            (set! diff\
    \ (+ diff (abs (- guess game-idx))))\n            (set! diff (+ diff (abs (- game\
    \ guess-idx))))\n            (set! diff (+ diff (abs (- guess game-idx))))\n \
    \           (set! diff (+ diff (abs (- game guess-idx))))\n            (set! diff\
    \ (+ diff (abs (- guess game-idx))))\n            (set! diff (+ diff (abs (- game\
    \ guess-idx))))\n            (set! diff (+ diff (abs (- guess game-idx))))\n \
    \           (set! diff (+ diff (abs (- game guess-idx))))\n            (set! diff\
    \ (+ diff (abs (- guess game-idx))))\n            (set! diff (+ diff (abs (- game\
    \ guess-idx))))\n            (set! diff (+ diff (abs (- guess game-idx))))\n \
    \           (set! diff (+ diff (abs (- game guess-idx))))\n            (set! diff\
    \ (+ diff (abs (- guess game-idx))))\n            (set! diff (+ diff (abs (- game\
    \ guess-idx))))\n            (set! diff (+ diff (abs (- guess game-idx))))\n \
    \           (set! diff (+ diff (abs (- guess game-idx))))\n            (set! diff\
    \ (+ diff (abs (- guess game-idx))))\n            (set! diff (+ diff (abs (- guess\
    \ game-idx))))\n            (set! diff (+ diff (abs (- guess game-idx))))\n  \
    \          (set! diff (+ diff (abs (- guess game-idx))))\n            (set! diff\
    \ (+ diff (abs (- guess ", "  (if (= (length game) (length guess))\n      (let\
    \ ((diff (make-array (length game) initial-element 0)))\n        (do ((i 0 (+\
    \ i 1))\n             (j 0 (+ j 1)))\n            ((< i j) (set! diff (+ diff\
    \ (abs (- guess game))))\n               (set! diff (+ diff (abs (- game guess))))\n\
    \               (set! diff (+ diff (abs (- guess game))))\n               (set!\
    \ diff (+ diff (abs (- game guess))))\n               (set! diff (+ diff (abs\
    \ (- guess game))))\n               (set! diff (+ diff (abs (- game guess))))\n\
    \               (set! diff (+ diff (abs (- guess game))))\n               (set!\
    \ diff (+ diff (abs (- game guess))))\n               (set! diff (+ diff (abs\
    \ (- guess game))))\n               (set! diff (+ diff (abs (- game guess))))\n\
    \               (set! diff (+ diff (abs (- guess game))))\n               (set!\
    \ diff (+ diff (abs (- game guess))))\n               (set! diff (+ diff (abs\
    \ (- guess game))))\n               (set! diff (+ diff (abs (- game guess))))\n\
    \               (set! diff (+ diff (abs (- guess game))))\n               (set!\
    \ diff (+ diff (abs (- game guess))))\n               (set! diff (+ diff (abs\
    \ (- guess game))))\n               (set! diff (+ diff (abs (- game guess))))\n\
    \               (set! diff (+ diff (abs (- guess game))))\n               (set!\
    \ diff (+ diff (abs (- game guess))))\n               (set! diff (+ diff (abs\
    \ (- guess game))))\n               (set! diff (+ diff (abs (- game guess))))\n\
    \               (set! diff (+ diff (abs (- guess game))))\n               (set!\
    \ diff (+ diff (abs (- game guess))))\n               (set! diff (+ diff (abs\
    \ (- guess game))))\n               (set! diff (+ diff (abs (- game guess))))\n\
    \               (set! diff (+ diff (abs (- guess game))))\n               (set!\
    \ diff (+ diff (abs (- game guess))))\n               (set! diff (+ diff (abs\
    \ (- guess game))))\n", "  (if (= (length game) (length guess))\n      (let ((score\
    \ (car game))\n            (guess-score (car guess)))\n        (if (= guess-score\
    \ score)\n            (list 0 0)\n            (list (abs (- guess-score score))))))\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\nI wrote a solution that uses recursion\
    \ and a helper function called compare-scores. I hope it helps.\n<code>", "  (if\
    \ (= (length game) (length guess))\n      (let ((diff (make-array (length guess)\
    \ initial-element-value 0)))\n        (do ((i 0 (+ i 1))\n             (j 0 (+\
    \ j 1)))\n            ((or (= i j) (= i 0))\n             (set! diff (+ diff (abs\
    \ (- guess game))))\n             (set! diff (+ diff (abs (- game guess))))\n\
    \             (set! diff (+ diff (abs (- guess game))))\n             (set! diff\
    \ (+ diff (abs (- game guess))))\n             (set! diff (+ diff (abs (- guess\
    \ game))))\n             (set! diff (+ diff (abs (- game guess))))\n         \
    \    (set! diff (+ diff (abs (- guess game))))\n             (set! diff (+ diff\
    \ (abs (- game guess))))\n             (set! diff (+ diff (abs (- guess game))))\n\
    \             (set! diff (+ diff (abs (- game guess))))\n             (set! diff\
    \ (+ diff (abs (- guess game))))\n             (set! diff (+ diff (abs (- game\
    \ guess))))\n             (set! diff (+ diff (abs (- guess game))))\n        \
    \     (set! diff (+ diff (abs (- game guess))))\n             (set! diff (+ diff\
    \ (abs (- guess game))))\n             (set! diff (+ diff (abs (- game guess))))\n\
    \             (set! diff (+ diff (abs (- guess game))))\n             (set! diff\
    \ (+ diff (abs (- game guess))))\n             (set! diff (+ diff (abs (- guess\
    \ game))))\n             (set! diff (+ diff (abs (- game guess))))\n         \
    \    (set! diff (+ diff (abs (- guess game))))\n             (set! diff (+ diff\
    \ (abs (- game guess))))\n             (set! diff (+ diff (abs (- guess game))))\n\
    \             (set! diff (+ diff (abs (- game guess))))\n             (set! diff\
    \ (+ diff (abs (- guess game))))\n             (set! diff (+ diff (abs (- game\
    \ guess))))\n             (set! diff (+ diff (abs (- guess game))))\n        \
    \     (set! diff (+ diff (abs (- game guess))))\n             (set! diff (+ diff\
    \ (abs (- guess game))))\n             (set! diff (+ diff (abs (- game guess))))\n\
    \             (set! diff (", "  (if (= (length game) (length guess))\n      (let\
    \ ((scores (make-array (length game) 'int))\n            (guesses (make-array\
    \ (length guess) 'int)))\n        (do ((i 0 (+ i 1))\n             (j (+ i 1))\n\
    \             (score (car game))\n             (guess (car guess)))\n        \
    \  ((< i j) (set! scores (vector-set! scores (vector-ref scores i) score))\n \
    \           (set! guesses (vector-set! guesses (vector-ref guesses j) guess))\n\
    \            (set! i (+ i 1))\n            (set! j (+ j 1)))\n        (let ((scores\
    \ (vector-ref scores i))\n              (guesses (vector-ref guesses j)))\n  \
    \        (if (= (length scores) (length guesses))\n              (let ((scores\
    \ (vector-ref scores 0))\n                    (guesses (vector-ref guesses 0)))\n\
    \                (if (= (length scores) 0)\n                    (let ((scores\
    \ (vector-ref scores 0))\n                          (guesses (vector-ref guesses\
    \ 0)))\n                      (if (= (length scores) 0)\n                    \
    \      (let ((scores (vector-ref scores 0))\n                                (guesses\
    \ (vector-ref guesses 0)))\n                            (if (= (length scores)\
    \ 0)\n                                (let ((scores (vector-ref scores 0))\n \
    \                                     (guesses (vector-ref guesses 0)))\n    \
    \                              (if (= (length scores) 0)\n                   \
    \                   (let ((scores (vector-ref scores 0))\n                   \
    \                         (guesses (vector-ref guesses 0)))\n                \
    \                    (if (= (length scores) 0)\n                             \
    \           (let ((scores (vector-ref scores 0))\n                           \
    \                   (guesses (vector-ref guesses 0)))\n                      \
    \                (if (= (length scores) 0)\n                                 \
    \         (let ((scores (vector-ref scores 0))\n                             \
    \                   (guesses (vector-ref guesses 0)))\n                      \
    \                  (if (= (length scores) 0)\n                               \
    \             (let ((scores (vector-ref scores 0))\n                         \
    \                         (guesses (vector-ref guesses 0)))\n                \
    \                          (if (= (length scores) 0)\n                       \
    \                       (let ((scores (vector-ref scores 0))\n               \
    \                                     (guesses (vector-ref guesses 0)))\n    \
    \                                        (if (= (length scores) 0)\n         \
    \                                       (let ((scores (vector-ref scores 0))\n\
    \                                                      (", "  (if (= (length game)\
    \ (length guess))\n      (let ((diff (make-array (length guess) :initial-element\
    \ 0)))\n        (do ((i 0 (+ i 1))\n             (g (+ i 1))\n             (gs\
    \ (+ i 1)))\n          ((< i length) (set! diff (make-array (length guess) :initial-element\
    \ 0)))\n          ((< g length) (set! diff (make-array (length guess) :initial-element\
    \ 0)))\n          ((< gs length) (set! diff (make-array (length guess) :initial-element\
    \ 0)))\n          ((= g gs) (set! diff (make-array (length guess) :initial-element\
    \ 0)))\n          ((= g 0) (set! diff (make-array (length guess) :initial-element\
    \ 0)))\n          ((= g 1) (set! diff (make-array (length guess) :initial-element\
    \ 0)))\n          ((= g 2) (set! diff (make-array (length guess) :initial-element\
    \ 0)))\n          ((= g 3) (set! diff (make-array (length guess) :initial-element\
    \ 0)))\n          ((= g 4) (set! diff (make-array (length guess) :initial-element\
    \ 0)))\n          ((= g 5) (set! diff (make-array (length guess) :initial-element\
    \ 0)))\n          ((= g 6) (set! diff (make-array (length guess) :initial-element\
    \ 0)))\n          ((= g 7) (set! diff (make-array (length guess) :initial-element\
    \ 0)))\n          ((= g 8) (set! diff (make-array (length guess) :initial-element\
    \ 0)))\n          ((= g 9) (set! diff (make-array (length guess) :initial-element\
    \ 0)))\n          ((= g 10) (set! diff (make-array (length guess) :initial-element\
    \ 0)))\n          ((= g 11) (set! diff (make-array (length guess) :initial-element\
    \ 0)))\n          ((= g 12) (set! diff (make-array (length guess) :initial-element\
    \ 0)))\n          ((= g 13) (set! diff (make-array (length guess) :initial-element\
    \ 0)))\n          ((= g 14) (set! diff (make-array (length guess) :initial-element\
    \ 0)))\n          ((= g 15) (set! diff (make-array (length guess) :initial-element\
    \ 0)))\n          ((= g 16) (set! diff (make-array (length guess) :initial-element\
    \ 0)))\n          ((= g 17) (set! diff (make-array (length guess) :initial-element ",
  "  (if (= (length game) (length guess))\n      (let ((scores (make-array (length\
    \ game) 'int)))\n        (do ((i 0 (+ i 1))\n             (j 0 (+ j 1)))\n   \
    \         ((or (= i j) (< i j))\n             (set! scores\n                 \
    \   (+ (car game)\n                         (car guess)\n                    \
    \     (car scores))))\n          (set! scores (make-array (length guess) 'int))\n\
    \          (set! scores (make-array (length game) 'int))\n          (set! scores\
    \ (make-array (length guess) 'int))\n          (set! scores (make-array (length\
    \ guess) 'int))\n          (set! scores (make-array (length guess) 'int))\n  \
    \        (set! scores (make-array (length guess) 'int))\n          (set! scores\
    \ (make-array (length guess) 'int))\n          (set! scores (make-array (length\
    \ guess) 'int))\n          (set! scores (make-array (length guess) 'int))\n  \
    \        (set! scores (make-array (length guess) 'int))\n          (set! scores\
    \ (make-array (length guess) 'int))\n          (set! scores (make-array (length\
    \ guess) 'int))\n          (set! scores (make-array (length guess) 'int))\n  \
    \        (set! scores (make-array (length guess) 'int))\n          (set! scores\
    \ (make-array (length guess) 'int))\n          (set! scores (make-array (length\
    \ guess) 'int))\n          (set! scores (make-array (length guess) 'int))\n  \
    \        (set! scores (make-array (length guess) 'int))\n          (set! scores\
    \ (make-array (length guess) 'int))\n          (set! scores (make-array (length\
    \ guess) 'int))\n          (set! scores (make-array (length guess) 'int))\n  \
    \        (set! scores (make-array (length guess) 'int))\n          (set! scores\
    \ (make-array (length guess) 'int))\n          (set! scores (make-array (length\
    \ guess) 'int))\n          (set! scores (make-array (length guess) 'int))\n  \
    \        (set! scores (make-array (length guess) 'int))\n          (set! scores\
    \ (make-array (length guess) 'int))", "  (let loop ((games game) (guesses guess)\
    \ (result '()))\n    (if (null? games)\n        result\n        (loop (rest games)\
    \ (first guesses) (cons (abs (- (first guesses) (first games))) result)))))\n",
  "  (if (null? game)\n      (list guess)\n      (let ((score (car game))\n      \
    \      (guess (car guess))\n            (diff (car guess)))\n        (if (= score\
    \ guess)\n            (list guess)\n            (if (< diff score)\n         \
    \       (list diff score)\n                (list diff diff score)))))\n", "  (if\
    \ (null? game)\n      (list guess)\n      (let ((score (car game))\n         \
    \   (guess (car guess)))\n        (if (= guess score)\n            (list guess)\n\
    \            (cons (abs (- guess score)) (compare cdr guess)))))) ; <-- HERE\n\
    </code>\n<|/ a tags=racket,scheme |>\n<| c |>\nThanks for your answer! I understand\
    \ it better now. I'm still a little confused on how to implement the compare function.\
    \ I think I understand it better now but I'm still confused on how to implement\
    \ the compare function. Could you please give me an example of how I would implement\
    \ the compare function? Thanks!\n<|/ c |>\n<| c |>\nI added an example to my answer.\
    \ Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your help! I really appreciate\
    \ it!\n<|/ c |>\n<| a tags=racket,scheme |>\nThe compare function you wrote is\
    \ almost correct, except that you need to compare each element of the two lists\
    \ individually. \n<code>", "  (if (= (length game) (length guess))\n      (let\
    \ ((diff (make-array (length guess) 'int)))\n        (do ((i 0 (+ i 1))\n    \
    \         (g (+ i 1))\n             (gs (+ i 1)))\n          ((< i length) (set!\
    \ diff (make-array (length guess) 'int)))\n          ((< g length) (set! diff\
    \ (make-array (length guess) 'int)))\n          ((< gs length) (set! diff (make-array\
    \ (length guess) 'int)))\n          ((< g gs) (set! diff (make-array (length guess)\
    \ 'int)))\n          ((< g g) (set! diff (make-array (length guess) 'int)))\n\
    \          ((< g (+ g 1))\n           (set! diff (make-array (length guess) 'int))\n\
    \           (set! diff (vector-set! diff i 0 (- g g))))\n          ((< g (+ g\
    \ 1))\n           (set! diff (make-array (length guess) 'int))\n           (set!\
    \ diff (vector-set! diff i 0 (- g g))))\n          ((< gs (+ gs 1))\n        \
    \   (set! diff (make-array (length guess) 'int))\n           (set! diff (vector-set!\
    \ diff i 0 (- g gs))))\n          ((< gs (+ gs 1))\n           (set! diff (make-array\
    \ (length guess) 'int))\n           (set! diff (vector-set! diff i 0 (- g gs))))\n\
    \          ((< gs (+ gs 1))\n           (set! diff (make-array (length guess)\
    \ 'int))\n           (set! diff (vector-set! diff i 0 (- g gs))))\n          ((<\
    \ gs (+ gs 1))\n           (set! diff (make-array (length guess) 'int))\n    \
    \       (set! diff (vector-set! diff i 0 (- g gs))))\n          ((< gs (+ gs 1))\n\
    \           (set! diff (make-array (length guess) 'int))\n           (set! diff\
    \ (vector-set! diff i 0 (- g gs))))\n          ((< gs (+ gs 1))\n           (set!\
    \ diff (make-array (length guess) 'int))\n           (set! diff (vector-set! diff\
    \ i 0 (- g gs))))\n          ((< gs (+ gs 1))\n           (set! diff (make-array\
    \ (length guess", "  (if (= (length game) (length guess))\n      (map + (map -\
    \ game guess))\n      (map - (map - guess game)))) ; <-- this is where you go\
    \ wrong\n", "  (if (null? game)\n      (if (null? guess)\n          (list 0)\n\
    \          (list 0))\n      (let ((g (car guess))\n            (s (car game)))\n\
    \        (if (= g s)\n            (list 0)\n            (list (abs (- g s))))))))\n",
  "  (define (compare game guess)\n    (if (null? game)\n        (if (null? guess)\n\
    \            0\n            (abs (first guess) (rest game)))\n        (if (equal?\
    \ (first game) (first guess))\n            (if (equal? (rest game) (rest guess))\n\
    \                (+ 1 (compare game (rest guess)))\n                (+ 1 (compare\
    \ game guess)))\n            (if (equal? (first game) (rest guess))\n        \
    \        (+ 1 (compare game guess))\n                (+ 1 (compare game (rest\
    \ guess)))))))\n  (compare game guess))\n", "  (if (= (length game) (length guess))\n\
    \      (let ((diff (make-array (length guess) initial-element 0)))\n        (do\
    \ ((i 0 (+ i 1))\n             (game (subseq game 0 i))\n             (guess (subseq\
    \ guess 0 i))\n             (diff (subseq diff 0 i)))\n          ((< i length)\
    \ (set! diff (subseq diff 0 i)))\n          ((= i length) (set! diff 0))\n   \
    \       ((= i (length game))\n           (set! diff (subseq diff 0 (- i length)))\n\
    \           (set! diff (- diff (subseq guess 0 i)))\n           (set! diff (-\
    \ diff (subseq game 0 i))))\n        (if (= (subseq guess 0 i) guess)\n      \
    \      (set! diff 0)\n            (set! diff (- diff (subseq guess 0 i))))\n \
    \       (set! diff (+ diff (subseq game 0 i))))\n      (let ((diff (make-array\
    \ (length guess) initial-element 0)))\n        (do ((i 0 (+ i 1))\n          \
    \   (game (subseq game 0 i))\n             (guess (subseq guess 0 i))\n      \
    \       (diff (subseq diff 0 i)))\n          ((< i length) (set! diff (subseq\
    \ diff 0 i)))\n          ((= i length) (set! diff 0))\n          ((= i (length\
    \ game))\n           (set! diff (subseq diff 0 (- i length)))\n           (set!\
    \ diff (- diff (subseq guess 0 i)))\n           (set! diff (- diff (subseq game\
    \ 0 i))))\n        (if (= (subseq guess 0 i) guess)\n            (set! diff 0)\n\
    \            (set! diff (- diff (subseq guess 0 i))))\n        (set! diff (+ diff\
    \ (subseq game 0 i))))\n      diff)))\n", "  (if (= (length game) (length guess))\n\
    \      (let ([scores (make-array (length game) initial-contents '())\n       \
    \     guesses (make-array (length guess) initial-contents '())])\n        (do\
    \ ([i 0 (+ i 1)])\n            ((< i length (+ i 1))\n             (set! scores\
    \ (assoc i 0 (+ 0 (car game))))\n             (set! guesses (assoc i 0 (+ 0 (car\
    \ guess))))\n             (set! i (+ i 1)))\n        (let ([score (car scores)])\n\
    \          (let ([guess (car guesses)])\n            (if (= score guess)\n   \
    \             (set! scores (assoc i 0 (+ score guess)))\n                (set!\
    \ guesses (assoc i 0 (+ guess score)))))\n          (cons score guesses))\n  \
    \    (let ([scores (make-array (length game) initial-contents '())\n         \
    \   guesses (make-array (length guess) initial-contents '())])\n        (do ([i\
    \ 0 (+ i 1)])\n            ((< i length (+ i 1))\n             (set! scores (assoc\
    \ i 0 (+ 0 (car game))))\n             (set! guesses (assoc i 0 (+ 0 (car guess))))\n\
    \             (set! i (+ i 1)))\n        (let ([score (car scores)])\n       \
    \   (let ([guess (car guesses)])\n            (if (= score guess)\n          \
    \      (set! scores (assoc i 0 (+ score guess)))\n                (set! guesses\
    \ (assoc i 0 (+ guess score)))))\n          (cons score guesses)))))\n", "  (if\
    \ (= (length game) (length guess))\n      (let ((diff (make-array (length guess)\
    \ initial-element 0)))\n        (do ((i 0 (+ i 1))\n             (j (+ i 1))\n\
    \             (diff (make-array (length guess) initial-element 0)))\n        \
    \    ((< i j) (set! diff (make-array (length guess) initial-element 0)))\n   \
    \         (set! diff (array-set! diff i (array-ref guess j) (abs (array-ref game\
    \ j))))\n            (set! diff (array-set! diff j (array-ref game i) (abs (array-ref\
    \ guess i))))\n            (set! diff (array-set! diff i (array-ref guess j) (abs\
    \ (array-ref game j))))\n            (set! diff (array-set! diff j (array-ref\
    \ game i) (abs (array-ref guess i))))\n            (set! diff (array-set! diff\
    \ i (array-ref guess j) (abs (array-ref game j))))\n            (set! diff (array-set!\
    \ diff j (array-ref game i) (abs (array-ref guess i))))\n            (set! diff\
    \ (array-set! diff i (array-ref guess j) (abs (array-ref game j))))\n        \
    \    (set! diff (array-set! diff j (array-ref game i) (abs (array-ref guess i))))\n\
    \            (set! diff (array-set! diff i (array-ref guess j) (abs (array-ref\
    \ game j))))\n            (set! diff (array-set! diff j (array-ref game i) (abs\
    \ (array-ref guess i))))\n            (set! diff (array-set! diff i (array-ref\
    \ guess j) (abs (array-ref game j))))\n            (set! diff (array-set! diff\
    \ j (array-ref game i) (abs (array-ref guess i))))\n            (set! diff (array-set!\
    \ diff i (array-ref guess j) (abs (array-ref game j))))\n            (set! diff\
    \ (array-set! diff j (array-ref game i) (abs (array-ref guess i))))\n        \
    \    (set! diff (array-set! diff i (array-ref guess j) (abs (array-ref game j))))\n\
    \            (set! diff (array-set! diff j (array-ref game i) (abs (array-ref\
    \ guess i))))\n            (set! diff (array-set! ", "  (let loop ((games game)\
    \ (guesses guess) (result '()))\n    (cond\n      [(empty? games) (append result\
    \ (list 0))]\n      [(empty? guesses) (append result (list 0))]\n      [(equal?\
    \ (first games) (first guesses)) (loop (rest games) (rest guesses) (cons 0 (append\
    \ result (list 0))))]\n      [else (loop (rest games) (rest guesses) (cons (abs\
    \ (first guesses) - (first games)) (append result (list 0))))]))))\n", "  (if\
    \ (= (length game) (length guess))\n      (let ((diff (make-array (length game)\
    \ 'int)))\n        (do ((i 0 (+ i 1))\n             (game (sub1 game))\n     \
    \        (guess (sub1 guess))\n             (diff (sub1 diff)))\n          ((<\
    \ i length) (set! diff (make-array (length game) 'int))\n          (set! diff\
    \ (- diff guess))\n          (set! diff (+ diff game))\n          (set! diff (-\
    \ diff game))\n          (set! diff (+ diff guess))\n          (set! diff (- diff\
    \ guess))\n          (set! diff (+ diff game))\n          (set! diff (- diff game))\n\
    \          (set! diff (+ diff guess))\n          (set! diff (- diff guess))\n\
    \          (set! diff (+ diff game))\n          (set! diff (- diff game))\n  \
    \        (set! diff (+ diff guess))\n          (set! diff (- diff guess))\n  \
    \        (set! diff (+ diff game))\n          (set! diff (- diff game))\n    \
    \      (set! diff (+ diff guess))\n          (set! diff (- diff guess))\n    \
    \      (set! diff (+ diff game))\n          (set! diff (- diff game))\n      \
    \    (set! diff (+ diff guess))\n          (set! diff (- diff guess))\n      \
    \    (set! diff (+ diff game))\n          (set! diff (- diff game))\n        \
    \  (set! diff (+ diff guess))\n          (set! diff (- diff guess))\n        \
    \  (set! diff (+ diff game))\n          (set! diff (- diff game))\n          (set!\
    \ diff (+ diff guess))\n          (set! diff (- diff guess))\n          (set!\
    \ diff (+ diff game))\n          (set! diff (- diff game))\n          (set! diff\
    \ (+ diff guess))\n          (set! diff (- diff guess))\n          (set! diff\
    \ (+ diff game))\n          (set! diff (- diff game))\n          (set! diff (+\
    \ diff guess))\n          (set! diff (- diff guess))\n          (set! diff (+\
    \ diff game))\n          (set! diff (- diff game))\n          (set", "  (if (=\
    \ (length game) (length guess))\n      (map (lambda (i j)\n             (if (=\
    \ i j)\n                 (if (= (- guess game) 0)\n                     (- guess\
    \ game)\n                     (- game guess)))\n               (range (length\
    \ guess))\n               (range (length game)))))\n      (map (lambda (i j)\n\
    \             (if (= i j)\n                 (if (= (- guess game) 0)\n       \
    \              (- guess game)\n                     (- game guess)))\n       \
    \        (range (length guess))\n               (range (length game)))))\n  ;;\
    \ If they have guessed correctly, the difference between the guess and the score\
    \ is 0.\n  ;; If they have guessed incorrectly, the difference is the absolute\
    \ difference between the guess and the score.\n  (if (= (length game) (length\
    \ guess))\n      (map (lambda (i j)\n             (if (= i j)\n              \
    \   (if (= (- guess game) 0)\n                     (- guess game)\n          \
    \           (- game guess)))\n               (range (length guess))\n        \
    \       (range (length game)))))\n  ;; If they have guessed correctly, the difference\
    \ between the guess and the score is 0.\n  ;; If they have guessed incorrectly,\
    \ the difference is the absolute difference between the guess and the score.\n\
    \  (if (= (length game) (length guess))\n      (map (lambda (i j)\n          \
    \   (if (= i j)\n                 (if (= (- guess game) 0)\n                 \
    \    (- guess game)\n                     (- game guess)))\n               (range\
    \ (length guess))\n               (range (length game)))))\n  ;; If they have\
    \ guessed correctly, the difference between the guess and the score is 0.\n  ;;\
    \ If they have guessed incorrectly, the difference is the absolute difference\
    \ between the guess and the score.\n  (if (= (length game) (length guess))\n \
    \     (map (lambda (i j)\n             (if (= i j)\n                 (if (= (-\
    \ guess game) 0)\n                     (- guess game)\n                     (-\
    \ game guess)))\n               (range (length guess))\n               (range\
    \ (length game)))))\n  ;; If they have guessed correctly, the difference between\
    \ the guess and the score is 0.\n  ;; If they have guessed incorrectly, the difference\
    \ is the absolute difference between the guess and the score.\n  (if (= (length\
    \ game) (length guess))\n      (map (lambda (i j)\n             (if (= i j)\n\
    \                 (if (= (- guess game) 0)\n                     (- guess game)\n\
    \                     (- ", "  (if (null? game)\n      (if (null? guess)\n   \
    \       (list 0)\n          (list 0))\n      (let ((score (car game))\n      \
    \      (guess1 (car guess))\n            (guess2 (car guess)))\n        (if (=\
    \ guess1 guess2)\n            (list 0)\n            (list (abs (- guess1 score))\n\
    \                  (abs (- guess2 score)))))\n      (let ((score (car game))\n\
    \            (guess1 (car guess))\n            (guess2 (car guess)))\n       \
    \ (if (= guess1 guess2)\n            (list 0)\n            (list (abs (- guess1\
    \ score))\n                  (abs (- guess2 score)))))\n      (let ((score (car\
    \ game))\n            (guess1 (car guess))\n            (guess2 (car guess)))\n\
    \        (if (= guess1 guess2)\n            (list 0)\n            (list (abs (-\
    \ guess1 score))\n                  (abs (- guess2 score)))))\n      (let ((score\
    \ (car game))\n            (guess1 (car guess))\n            (guess2 (car guess)))\n\
    \        (if (= guess1 guess2)\n            (list 0)\n            (list (abs (-\
    \ guess1 score))\n                  (abs (- guess2 score)))))\n      (let ((score\
    \ (car game))\n            (guess1 (car guess))\n            (guess2 (car guess)))\n\
    \        (if (= guess1 guess2)\n            (list 0)\n            (list (abs (-\
    \ guess1 score))\n                  (abs (- guess2 score)))))\n      (let ((score\
    \ (car game))\n            (guess1 (car guess))\n            (guess2 (car guess)))\n\
    \        (if (= guess1 guess2)\n            (list 0)\n            (list (abs (-\
    \ guess1 score))\n                  (abs (- guess2 score)))))\n      (let ((score\
    \ (car game))\n            (guess1 (car guess))\n            (guess2 (car guess)))\n\
    \        (if (= guess1 guess2)\n            (list 0)\n            (list (abs (-\
    \ guess1 score))\n                  (abs (- guess2 score)))))\n      (let ((score\
    \ (car game))\n            (guess1 (car guess))\n            (guess2 (car guess)))\n\
    \        (if (= guess1 guess2)\n            (list 0)\n            (list (abs (-\
    \ guess1 score))\n                  (abs (- guess2 score)))))\n      (let ((score\
    \ (car game))\n            (guess1 (car guess", "  (if (null? game)\n      (list\
    \ guess)\n      (let ([score (car game)]\n            [guess (car guess)]\n  \
    \          [guess (cdr guess)]\n            [score (cdr game)])\n        (if (=\
    \ guess score)\n            (list guess)\n            (if (= guess 0)\n      \
    \          (list guess)\n                (if (< guess score)\n               \
    \     (list guess)\n                    (if (< guess 0)\n                    \
    \    (list guess)\n                        (if (< guess score)\n             \
    \               (list guess)\n                            (list guess)\n     \
    \                   )\n                    )\n                )\n            )\n\
    \        )\n      )\n  )\n)\n", "  (if (= (length game) (length guess))\n    \
    \  (let ((score (car game))\n            (guess-score (car guess)))\n        (if\
    \ (= guess-score score)\n            0\n            (abs (- guess-score score))))\n\
    \      (let ((score (car guess))\n            (guess-score (car game)))\n    \
    \    (if (= guess-score score)\n            0\n            (abs (- guess-score\
    \ score))))))\n", "  (if (null? game)\n      (list guess)\n      (let ((g (car\
    \ game))\n            (gs (car guess))\n            (g (- g gs))\n           \
    \ (gs (- gs g)))\n        (cond ((= g gs) (list 0))\n              ((< g gs) (list\
    \ g))\n              ((> g gs) (list gs))\n              (else (list g (- g gs)\
    \ (- gs g)))))\n  )\n", "  (if (= (length game) (length guess))\n      (let ((diff\
    \ (make-array (length guess) :initial-element 0)))\n        (do ((i 0 (+ i 1))\n\
    \             (g (+ i 1))\n             (gs (+ i 1)))\n          ((< i length)\
    \ (set! diff (make-array (length guess) :initial-element 0)))\n          ((< g\
    \ length) (set! diff (make-array (length guess) :initial-element 0)))\n      \
    \    ((< gs length) (set! diff (make-array (length guess) :initial-element 0)))\n\
    \          ((= g gs) (set! diff (make-array (length guess) :initial-element 0)))\n\
    \          ((= g 0) (set! diff (make-array (length guess) :initial-element 0)))\n\
    \          ((= g 1) (set! diff (make-array (length guess) :initial-element 0)))\n\
    \          ((= g 2) (set! diff (make-array (length guess) :initial-element 0)))\n\
    \          ((= g 3) (set! diff (make-array (length guess) :initial-element 0)))\n\
    \          ((= g 4) (set! diff (make-array (length guess) :initial-element 0)))\n\
    \          ((= g 5) (set! diff (make-array (length guess) :initial-element 0)))\n\
    \          ((= g 6) (set! diff (make-array (length guess) :initial-element 0)))\n\
    \          ((= g 7) (set! diff (make-array (length guess) :initial-element 0)))\n\
    \          ((= g 8) (set! diff (make-array (length guess) :initial-element 0)))\n\
    \          ((= g 9) (set! diff (make-array (length guess) :initial-element 0)))\n\
    \          ((= g 10) (set! diff (make-array (length guess) :initial-element 0)))\n\
    \          ((= g 11) (set! diff (make-array (length guess) :initial-element 0)))\n\
    \          ((= g 12) (set! diff (make-array (length guess) :initial-element 0)))\n\
    \          ((= g 13) (set! diff (make-array (length guess) :initial-element 0)))\n\
    \          ((= g 14) (set! diff (make-array (length guess) :initial-element 0)))\n\
    \          ((= g 15) (set! diff (make-array (length guess) :initial-element 0)))\n\
    \          ((= g 16) (set! diff (make-array (length guess) :initial-element 0)))\n\
    \          ((= g 17) (set! diff (make-array (length guess) :initial-element ",
  "  (if (null? game)\n      (list guess)\n      (let ((diff (- guess (car game))))\n\
    \        (if (null? guess)\n            (list diff)\n            (cons diff (compare\
    \ (cdr game) guess)))))\n", "  (if (null? game)\n      (if (null? guess)\n   \
    \       (list 0)\n          (list 0))\n      (let ((g (car guess))\n         \
    \   (s (car game)))\n        (if (= g s)\n            (list 0)\n            (list\
    \ (abs (- g s)))))))\n", "  (if (= (length game) (length guess))\n      (let ((score\
    \ (car game))\n            (guess (car guess))\n            (diff (- guess score)))\n\
    \        (if (= guess score)\n            (list diff)\n            (cons diff\
    \ (compare game (cons guess guess))))))\n  (let ((score (car game))\n        (guess\
    \ (car guess))\n        (diff (- guess score)))\n    (if (= guess score)\n   \
    \     (list diff)\n        (cons diff (compare game (cons guess guess))))))\n",
  "  (if (= (length game) (length guess))\n      (let ((diff (make-array (length guess)\
    \ initial-element 0)))\n        (do ((i 0 (+ i 1))\n             (game (sub1 game))\n\
    \             (guess (sub1 guess)))\n          ((< i guess) (set! diff (+ diff\
    \ (abs (- guess game))))\n          ((> i guess) (set! diff (+ diff (- guess game))))\n\
    \          (set! diff (+ diff (- guess game))))\n        (reverse diff))\n   \
    \   (let ((diff (make-array (length guess) initial-element 0)))\n        (do ((i\
    \ 0 (+ i 1))\n             (game (sub1 game))\n             (guess (sub1 guess)))\n\
    \          ((< i guess) (set! diff (+ diff (abs (- guess game))))\n          ((>\
    \ i guess) (set! diff (+ diff (- guess game))))\n          (set! diff (+ diff\
    \ (- guess game))))\n        (reverse diff))))\n", "  (if (= (length game) (length\
    \ guess))\n      (let ((diff (make-array (length guess) 'int))\n            (index\
    \ (make-array (length guess) 'int)))\n        (do ((i 0 (+ i 1))\n           \
    \  (j 0 (+ j 1)))\n            ((< i j) (set! diff (make-array (length guess)\
    \ 'int)))\n            (set! index (make-array (length guess) 'int))\n       \
    \     (if (= (modulo i 2) (modulo j 2))\n                (set! diff (- guess game))\n\
    \                (set! diff (- game guess))\n                (set! diff (- diff\
    \ game))\n                (set! diff (- diff guess))\n                (set! diff\
    \ (- diff (modulo i 2)))\n                (set! diff (- diff (modulo j 2)))\n\
    \                (set! diff (- diff (modulo i 2)))\n                (set! diff\
    \ (- diff (modulo j 2)))\n                (set! diff (- diff (modulo i 2)))\n\
    \                (set! diff (- diff (modulo j 2)))\n                (set! diff\
    \ (- diff (modulo i 2)))\n                (set! diff (- diff (modulo j 2)))\n\
    \                (set! diff (- diff (modulo i 2)))\n                (set! diff\
    \ (- diff (modulo j 2)))\n                (set! diff (- diff (modulo i 2)))\n\
    \                (set! diff (- diff (modulo j 2)))\n                (set! diff\
    \ (- diff (modulo i 2)))\n                (set! diff (- diff (modulo j 2)))\n\
    \                (set! diff (- diff (modulo i 2)))\n                (set! diff\
    \ (- diff (modulo j 2)))\n                (set! diff (- diff (modulo i 2)))\n\
    \                (set! diff (- diff (modulo j 2)))\n                (set! diff\
    \ (- diff (modulo i 2)))\n                (set! diff (- diff (modulo j 2)))\n\
    \                (set! diff (- diff (modulo i 2)))\n                (set! diff\
    \ (- diff (modulo j 2)))\n                (set! diff (- diff (modulo i 2)))\n\
    \                (set! diff (- diff (modulo j 2)))\n                (set! diff\
    \ (- diff (modulo i 2)))\n                (set! diff (- diff (modulo j 2)))\n\
    \                (set! diff (- diff (modulo i 2)))\n                (set! diff\
    \ (- diff (modulo j 2)))\n                (set! ", "  (let loop ((games game)\
    \ (guesses guess) (result '()))\n    (cond\n      [(null? games) (append result\
    \ guess)]\n      [(null? guesses) (append result (list 0))]\n      [(= (first\
    \ guesses) (first games)) (append result (list 0))]\n      [else (loop (rest games)\
    \ (rest guesses) (cons (- (first guesses) (first games)) result))])))\n", "  (if\
    \ (null? game)\n      (list guess)\n      (let ((diff (- guess (car game))))\n\
    \        (if (= diff 0)\n            (list guess)\n            (append (list diff)\
    \ (compare (cdr game) guess)))))\n", "  (if (= (length game) (length guess))\n\
    \      (let ((diff (make-array (length guess) 'int)))\n        (do ((i 0 (+ i\
    \ 1))\n             (g (+ i 1))\n             (gs (+ i 1)))\n          ((< i length)\
    \ (set! diff (make-array (length guess) 'int)))\n          ((< g length) (set!\
    \ diff (make-array (length guess) 'int)))\n          ((< gs length) (set! diff\
    \ (make-array (length guess) 'int)))\n          ((< g gs) (set! diff (make-array\
    \ (length guess) 'int)))\n          ((< g (+ g 1))\n           (set! diff (make-array\
    \ (length guess) 'int)))\n          ((< gs (+ gs 1))\n           (set! diff (make-array\
    \ (length guess) 'int)))\n          ((< diff length) (set! diff (make-array (length\
    \ guess) 'int)))\n          ((< diff 0)\n           (set! diff (make-array (length\
    \ guess) 'int)))\n          ((< diff (+ diff 1))\n           (set! diff (make-array\
    \ (length guess) 'int)))\n          ((< diff (+ diff 1))\n           (set! diff\
    \ (make-array (length guess) 'int)))\n          ((< diff (+ diff 1))\n       \
    \    (set! diff (make-array (length guess) 'int)))\n          ((< diff (+ diff\
    \ 1))\n           (set! diff (make-array (length guess) 'int)))\n          ((<\
    \ diff (+ diff 1))\n           (set! diff (make-array (length guess) 'int)))\n\
    \          ((< diff (+ diff 1))\n           (set! diff (make-array (length guess)\
    \ 'int)))\n          ((< diff (+ diff 1))\n           (set! diff (make-array (length\
    \ guess) 'int)))\n          ((< diff (+ diff 1))\n           (set! diff (make-array\
    \ (length guess) 'int)))\n          ((< diff (+ diff 1))\n           (set! diff\
    \ (make-array (length guess) 'int)))\n          ((< diff (+ diff 1))\n       \
    \    (set! diff (make-array (length guess) 'int)))\n          ((< diff (+ diff\
    \ 1))\n           (set! diff (make-array (length guess) 'int)))\n          ((<\
    \ diff (+ diff 1))\n           (set! diff (make-array (length guess) 'int)))\n\
    \          ((", "  (if (= (length game) (length guess))\n      (let ((score (car\
    \ game))\n            (guess (car guess)))\n        (if (= guess score)\n    \
    \        (list 0 0)\n            (list (abs (- guess score)) (abs (- score guess))))))\n\
    \  (let ((score (car game))\n        (guess (car guess)))\n    (if (= guess score)\n\
    \        (list 0 0)\n        (list (abs (- guess score)) (abs (- score guess))))))\n",
  "  (if (= (length game) (length guess))\n      (let ((diff (make-array (length guess)\
    \ 'int)))\n        (do ((i 0 (+ i 1))\n             (j 0 (+ j 1)))\n         \
    \   ((< i j) (set! diff (make-array (length guess) 'int)))\n            (set!\
    \ diff (sub1 diff (sub1 guess game)))\n            (set! diff (sub1 diff (sub1\
    \ game guess))))\n        (reverse diff))\n      (let ((diff (make-array (length\
    \ guess) 'int)))\n        (do ((i 0 (+ i 1))\n             (j 0 (+ j 1)))\n  \
    \          ((< i j) (set! diff (make-array (length guess) 'int)))\n          \
    \  (set! diff (sub1 diff (sub1 guess game)))\n            (set! diff (sub1 diff\
    \ (sub1 game guess))))\n        (reverse diff))))\n", "  (if (= (length game)\
    \ (length guess))\n      (let ((diff (make-array (length game) initial-element-value\
    \ 0)))\n        (do ((i 0 (+ i 1))\n             (game-idx (+ i 1))\n        \
    \     (guess-idx (+ i 1)))\n          ((< i guess-idx) (set! diff (sub1 diff)))\n\
    \          ((< i game-idx) (set! diff (sub1 diff)))\n          (set! diff (sub1\
    \ (+ diff (* game (- guess guess)))))\n          (set! diff (abs diff))\n    \
    \      (set! diff (+ diff (* guess game)))))\n      (let ((diff (make-array (length\
    \ guess) initial-element-value 0)))\n        (do ((i 0 (+ i 1))\n            \
    \ (game-idx (+ i 1))\n             (guess-idx (+ i 1)))\n          ((< i guess-idx)\
    \ (set! diff (sub1 diff)))\n          ((< i game-idx) (set! diff (sub1 diff)))\n\
    \          (set! diff (sub1 (+ diff (* game (- guess guess)))))\n          (set!\
    \ diff (abs diff))\n          (set! diff (+ diff (* guess game)))))\n      (let\
    \ ((diff (make-array (length guess) initial-element-value 0)))\n        (do ((i\
    \ 0 (+ i 1))\n             (game-idx (+ i 1))\n             (guess-idx (+ i 1)))\n\
    \          ((< i guess-idx) (set! diff (sub1 diff)))\n          ((< i game-idx)\
    \ (set! diff (sub1 diff)))\n          (set! diff (sub1 (+ diff (* game (- guess\
    \ guess)))))\n          (set! diff (abs diff))\n          (set! diff (+ diff (*\
    \ guess game)))))\n      (let ((diff (make-array (length guess) initial-element-value\
    \ 0)))\n        (do ((i 0 (+ i 1))\n             (game-idx (+ i 1))\n        \
    \     (guess-idx (+ i 1)))\n          ((< i guess-idx) (set! diff (sub1 diff)))\n\
    \          ((< i game-idx) (set! diff (sub1 diff)))\n          (set! diff (sub1\
    \ (+ diff (* game (- guess guess)))))\n          (set! diff (abs diff))\n    \
    \      (set! diff (+ diff (* guess game", "  (if (= (length game) (length guess))\n\
    \      (map (lambda (x y) (if (= x y) 0 \n                            (abs (-\
    \ x y))) \n              game guess) \n          game guess)\n      (map (lambda\
    \ (x y) (if (= x y) 0 \n                            (abs (- x y))) \n        \
    \      guess game) \n          game guess)))\n", "  (if (null? game)\n      '()\n\
    \      (let ((score (car game))\n            (guess (car guess))\n           \
    \ (games (cdr game)))\n        (if (= guess score)\n            (list 0)\n   \
    \         (let ((diff (- guess score))\n                  (games (cons diff games)))\n\
    \              (if (null? games)\n                  (list diff)\n            \
    \      (append (compare games guess) (list diff))))))))\n", "  (if (= (length\
    \ game) (length guess))\n      (let ((diff (make-array (length guess) :initial-element\
    \ 0)))\n        (do ((i 0 (+ i 1))\n             (game-index (+ i 1))\n      \
    \       (guess-index (+ i 1)))\n          ((< i guess-index) (set! diff (+ diff\
    \ (abs (- guess game))))\n            (set! diff (+ diff (abs (- game guess))))\n\
    \            (set! diff (+ diff (abs (- guess game-index))))\n            (set!\
    \ diff (+ diff (abs (- game guess-index))))\n            (set! diff (+ diff (abs\
    \ (- game game-index))))\n            (set! diff (+ diff (abs (- guess guess-index))))\n\
    \            (set! diff (+ diff (abs (- game game-index))))\n            (set!\
    \ diff (+ diff (abs (- guess game-index))))\n            (set! diff (+ diff (abs\
    \ (- game guess-index))))\n            (set! diff (+ diff (abs (- guess game-index))))\n\
    \            (set! diff (+ diff (abs (- game guess-index))))\n            (set!\
    \ diff (+ diff (abs (- guess game-index))))\n            (set! diff (+ diff (abs\
    \ (- game guess-index))))\n            (set! diff (+ diff (abs (- guess game-index))))\n\
    \            (set! diff (+ diff (abs (- guess game-index))))\n            (set!\
    \ diff (+ diff (abs (- guess game-index))))\n            (set! diff (+ diff (abs\
    \ (- guess game-index))))\n            (set! diff (+ diff (abs (- guess game-index))))\n\
    \            (set! diff (+ diff (abs (- guess game-index))))\n            (set!\
    \ diff (+ diff (abs (- guess game-index))))\n            (set! diff (+ diff (abs\
    \ (- guess game-index))))\n            (set! diff (+ diff (abs (- guess game-index))))\n\
    \            (set! diff (+ diff (abs (- guess game-index))))\n            (set!\
    \ diff (+ diff (abs (- guess game-index))))\n            (set! diff (+ diff (abs\
    \ (- guess game-index))))\n            (set! diff (+ diff (abs (- guess game-index))))\n\
    \            (set! diff (+ diff (abs (- guess ", "  (if (= (length game) (length\
    \ guess))\n      (let ((diff (make-array (length guess) 'int)))\n        (do ((i\
    \ 0 (+ i 1))\n             (g (+ i 1))\n             (gs (+ i 1)))\n         \
    \ ((< i length) (set! diff (make-array (length guess) 'int)))\n          ((< g\
    \ length) (set! diff (make-array (length guess) 'int)))\n          ((< gs length)\
    \ (set! diff (make-array (length guess) 'int)))\n          ((< g length) (set!\
    \ diff (make-array (length guess) 'int)))\n          ((< gs length) (set! diff\
    \ (make-array (length guess) 'int)))\n          ((< g length) (set! diff (make-array\
    \ (length guess) 'int)))\n          ((< gs length) (set! diff (make-array (length\
    \ guess) 'int)))\n          ((< g length) (set! diff (make-array (length guess)\
    \ 'int)))\n          ((< gs length) (set! diff (make-array (length guess) 'int)))\n\
    \          ((< g length) (set! diff (make-array (length guess) 'int)))\n     \
    \     ((< gs length) (set! diff (make-array (length guess) 'int)))\n         \
    \ ((< g length) (set! diff (make-array (length guess) 'int)))\n          ((< gs\
    \ length) (set! diff (make-array (length guess) 'int)))\n          ((< g length)\
    \ (set! diff (make-array (length guess) 'int)))\n          ((< gs length) (set!\
    \ diff (make-array (length guess) 'int)))\n          ((< g length) (set! diff\
    \ (make-array (length guess) 'int)))\n          ((< gs length) (set! diff (make-array\
    \ (length guess) 'int)))\n          ((< g length) (set! diff (make-array (length\
    \ guess) 'int)))\n          ((< gs length) (set! diff (make-array (length guess)\
    \ 'int)))\n          ((< g length) (set! diff (make-array (length guess) 'int)))\n\
    \          ((< gs length) (set! diff (make-array (length guess) 'int)))\n    \
    \      ((< g length) (set! diff (make-array (length guess) 'int)))\n         \
    \ ((< gs length) (set! diff (make-", "  (if (= (length game) (length guess))\n\
    \      (let ((diff (make-array (length guess) initial-element 0)))\n        (do\
    \ ((i 0 (+ i 1))\n             (j 0 (+ j 1)))\n          ((< i j) (set! diff (subarray\
    \ diff (- i j) j)))\n          ((< j i) (set! diff (subarray diff i j)))\n   \
    \       ((< i j) (set! diff (subarray diff i j)))\n          (set! diff (subarray\
    \ diff i j))\n          (set! diff (- diff (+ guess game)))\n          (set! diff\
    \ (abs diff))\n          (set! diff (+ diff (- guess game)))\n          (set!\
    \ diff (abs diff))\n          (set! diff (+ diff (- guess game)))\n          (set!\
    \ diff (abs diff))\n          (set! diff (+ diff (- guess game)))\n          (set!\
    \ diff (abs diff))\n          (set! diff (+ diff (- guess game)))\n          (set!\
    \ diff (abs diff))\n          (set! diff (+ diff (- guess game)))\n          (set!\
    \ diff (abs diff))\n          (set! diff (+ diff (- guess game)))\n          (set!\
    \ diff (abs diff))\n          (set! diff (+ diff (- guess game)))\n          (set!\
    \ diff (abs diff))\n          (set! diff (+ diff (- guess game)))\n          (set!\
    \ diff (abs diff))\n          (set! diff (+ diff (- guess game)))\n          (set!\
    \ diff (abs diff))\n          (set! diff (+ diff (- guess game)))\n          (set!\
    \ diff (abs diff))\n          (set! diff (+ diff (- guess game)))\n          (set!\
    \ diff (abs diff))\n          (set! diff (+ diff (- guess game)))\n          (set!\
    \ diff (abs diff))\n          (set! diff (+ diff (- guess game)))\n          (set!\
    \ diff (abs diff))\n          (set! diff (+ diff (- guess game)))\n          (set!\
    \ diff (abs diff))\n          (set! diff (+ diff (- guess game)))\n          (set!\
    \ diff (abs diff))\n", "  (if (= (length game) (length guess))\n      (let ((diff\
    \ (make-array (length guess) initial-element 0)))\n        (do ((i 0 (+ i 1))\n\
    \             (j (+ i 1))\n             (diff diff))\n          ((< i j) (set!\
    \ diff (make-array (length guess) initial-element 0)))\n          ((= i j) (set!\
    \ diff (make-array (length guess) initial-element 0)))\n          ((= i (+ j 1))\n\
    \           (set! diff (make-array (length guess) initial-element 0)))\n     \
    \     ((< i j)\n           (set! diff (make-array (length guess) initial-element\
    \ 0)))\n          ((= i j)\n           (set! diff (make-array (length guess) initial-element\
    \ 0)))\n          ((= i (+ j 1))\n           (set! diff (make-array (length guess)\
    \ initial-element 0)))\n          ((< i j)\n           (set! diff (make-array\
    \ (length guess) initial-element 0)))\n          ((= i j)\n           (set! diff\
    \ (make-array (length guess) initial-element 0)))\n          ((= i (+ j 1))\n\
    \           (set! diff (make-array (length guess) initial-element 0)))\n     \
    \     ((< i j)\n           (set! diff (make-array (length guess) initial-element\
    \ 0)))\n          ((= i j)\n           (set! diff (make-array (length guess) initial-element\
    \ 0)))\n          ((= i (+ j 1))\n           (set! diff (make-array (length guess)\
    \ initial-element 0)))\n          ((< i j)\n           (set! diff (make-array\
    \ (length guess) initial-element 0)))\n          ((= i j)\n           (set! diff\
    \ (make-array (length guess) initial-element 0)))\n          ((= i (+ j 1))\n\
    \           (set! diff (make-array (length guess) initial-element 0)))\n     \
    \     ((< i j)\n           (set! diff (make-array (length guess) initial-element\
    \ 0)))\n          ((= i j)\n           (set! diff (make-array (length guess) initial-element\
    \ 0)))\n          ((= i (+ j 1))\n           (set! diff (make-array (length guess)\
    \ initial-element 0)))\n          ((< i j)\n           (set! diff (make-array\
    \ (length guess) initial-element 0)))\n          ((= i j)\n           (set! diff\
    \ (make-array (length guess) initial-element 0)))\n          ((= i (+ j 1))\n\
    \           (set! diff (", "  (let ((game-scores (map score-of game)))\n    (let\
    \ ((guess-scores (map score-of guess)))\n      (let ((diff (map abs (subtract-all\
    \ guess-scores game-scores))))\n        (if (equal? (sort diff) diff)\n      \
    \      (list 0)\n            (list diff)))))\n", "  (if (= (length game) (length\
    \ guess))\n      (let ((diff (make-array (length guess) initial-element 0)))\n\
    \        (do ((i 0 (+ i 1))\n             (g (+ i 1))\n             (gs (+ i 1)))\n\
    \          ((< i length) (set! diff (make-array (length guess) initial-element\
    \ 0)))\n          ((< g length) (set! diff (make-array (length guess) initial-element\
    \ 0)))\n          ((< gs length) (set! diff (make-array (length guess) initial-element\
    \ 0)))\n          ((< g gs) (set! diff (make-array (length guess) initial-element\
    \ 0)))\n          ((< g (+ g 1))\n           (set! diff (make-array (length guess)\
    \ initial-element 0)))\n          ((< g (+ gs 1))\n           (set! diff (make-array\
    \ (length guess) initial-element 0)))\n          ((< g (+ g 1))\n           (set!\
    \ diff (make-array (length guess) initial-element 0)))\n          ((< g (+ gs\
    \ 1))\n           (set! diff (make-array (length guess) initial-element 0)))\n\
    \          ((< g (+ g 1))\n           (set! diff (make-array (length guess) initial-element\
    \ 0)))\n          ((< g (+ gs 1))\n           (set! diff (make-array (length guess)\
    \ initial-element 0)))\n          ((< g (+ g 1))\n           (set! diff (make-array\
    \ (length guess) initial-element 0)))\n          ((< g (+ gs 1))\n           (set!\
    \ diff (make-array (length guess) initial-element 0)))\n          ((< g (+ g 1))\n\
    \           (set! diff (make-array (length guess) initial-element 0)))\n     \
    \     ((< g (+ gs 1))\n           (set! diff (make-array (length guess) initial-element\
    \ 0)))\n          ((< g (+ g 1))\n           (set! diff (make-array (length guess)\
    \ initial-element 0)))\n          ((< g (+ gs 1))\n           (set! diff (make-array\
    \ (length guess) initial-element 0)))\n          ((< g (+ g 1))\n           (set!\
    \ diff (make-array (length guess) initial-element 0)))\n          ((< g (+ gs\
    \ 1))\n           (set! diff (make-array (length guess) initial-element 0)))\n\
    \          ((< g (+ g 1))\n           (set! diff (make-array (length ", "  (let\
    \ ((scores (make-array (length game) \n                            :element-type\
    \ 'int\n                            :initial-contents game)))\n    (let loop ((i\
    \ 0) (j 0))\n      (if (= i j)\n          (array-map 'identity guess)\n      \
    \    (let ((diff (- guess scores i)))\n            (if (= diff 0)\n          \
    \      (array-map 'identity guess)\n                (loop (+ i 1) (+ j 1))))))))\n",
  "  (let loop ((game-length game) (guess-length guess) (game-index 0) (guess-index\
    \ 0))\n    (cond\n      [(or (= game-length guess-length) (= guess-length 0))\
    \ '()]\n      [(= game-length 0) '(guess-index guess-index)]\n      [(= guess-length\
    \ 0) '(game-index game-index)]\n      [(= game-length guess-length) (loop (- game-index\
    \ game-length) (- guess-index guess-length) (+ game-index 1) (+ guess-index 1))]\n\
    \      [(= guess-length guess-length) (loop (- game-index game-length) (- guess-index\
    \ guess-length) (+ game-index 1) (+ guess-index 1))]\n      [(= game-length guess-length)\
    \ (loop (- game-index game-length) (- guess-index guess-length) (+ game-index\
    \ 1) (+ guess-index 1))]\n      [(= guess-length 0) (loop (- game-index game-length)\
    \ (- guess-index guess-length) (+ game-index 1) (+ guess-index 1))]\n      [(=\
    \ game-length 0) (loop (- game-index game-length) (- guess-index guess-length)\
    \ (+ game-index 1) (+ guess-index 1))]\n      [(= game-length guess-length) (loop\
    \ (- game-index game-length) (- guess-index guess-length) (+ game-index 1) (+\
    \ guess-index 1))]\n      [(= guess-length guess-length) (loop (- game-index game-length)\
    \ (- guess-index guess-length) (+ game-index 1) (+ guess-index 1))]\n      [(=\
    \ game-length guess-length) (loop (- game-index game-length) (- guess-index guess-length)\
    \ (+ game-index 1) (+ guess-index 1))]\n      [(= guess-length 0) (loop (- game-index\
    \ game-length) (- guess-index guess-length) (+ game-index 1) (+ guess-index 1))]\n\
    \      [(= game-length 0) (loop (- game-index game-length) (- guess-index guess-length)\
    \ (+ game-index 1) (+ guess-index 1))]\n      [(= game-length guess-length) (loop\
    \ (- game-index game-length) (- guess-index guess-length) (+ ", "  (if (null?\
    \ game)\n      (list guess)\n      (let ((diff (- guess (car game))))\n      \
    \  (if (= diff 0)\n            (list guess)\n            (cons diff (compare rest\
    \ guess)))))) ; recurse\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI appreciate your\
    \ answer, but I'm afraid I didn't make myself clear. I'm looking for a solution\
    \ that doesn't involve recursion. My apologies for not being clear enough.\n<|/\
    \ c |>\n<| c |>\nI added a solution without recursion.\n<|/ c |>\n<| c |>\nThank\
    \ you so much! I really appreciate it!\n<|/ c |>\n<| a tags=racket,scheme |>\n\
    <code>", "  (if (= (length game) (length guess))\n      (let ((diff (make-array\
    \ (length guess) initial-element-value 0)))\n        (do ((i 0 (+ i 1))\n    \
    \         (j (+ i 1))\n             (diff (make-array (length guess) initial-element-value\
    \ 0)))\n          ((< i j) (set! diff (make-array (length guess) initial-element-value\
    \ 0)))\n          ((= i j) (set! diff (make-array (length guess) initial-element-value\
    \ 0)))\n          ((= i 0) (set! diff (make-array (length guess) initial-element-value\
    \ 0)))\n          ((= j 0) (set! diff (make-array (length guess) initial-element-value\
    \ 0)))\n          ((= i j) (set! diff (make-array (length guess) initial-element-value\
    \ 0)))\n          ((= j i) (set! diff (make-array (length guess) initial-element-value\
    \ 0)))\n          ((= i 0) (set! diff (make-array (length guess) initial-element-value\
    \ 0)))\n          ((= j 0) (set! diff (make-array (length guess) initial-element-value\
    \ 0)))\n          ((= i j) (set! diff (make-array (length guess) initial-element-value\
    \ 0)))\n          ((= j i) (set! diff (make-array (length guess) initial-element-value\
    \ 0)))\n          ((= i 0) (set! diff (make-array (length guess) initial-element-value\
    \ 0)))\n          ((= j 0) (set! diff (make-array (length guess) initial-element-value\
    \ 0)))\n          ((= i j) (set! diff (make-array (length guess) initial-element-value\
    \ 0)))\n          ((= j i) (set! diff (make-array (length guess) initial-element-value\
    \ 0)))\n          ((= i 0) (set! diff (make-array (length guess) initial-element-value\
    \ 0)))\n          ((= j 0) (set! diff (make-array (length guess) initial-element-value\
    \ 0)))\n          ((= i j) (set! diff (make-array (length guess) initial-element-value\
    \ 0)))\n          ((= j i) (set! diff (make-array (length guess) initial-element-value\
    \ 0)))\n          ((= i 0) (set! diff (make-array (length guess) initial-element-value\
    \ 0)))\n          ((= j 0) (set! diff (make-array (", "  (if (= (length game)\
    \ (length guess))\n      (let ((diff (make-array (length guess) initial-element\
    \ 0)))\n        (do ((i 0 (+ i 1))\n             (g (+ i 1))\n             (gs\
    \ (+ i 1)))\n          ((< i length) (set! diff (make-array (length guess) initial-element\
    \ 0)))\n          ((< g length) (set! diff (make-array (length guess) initial-element\
    \ 0)))\n          ((< gs length) (set! diff (make-array (length guess) initial-element\
    \ 0)))\n          ((< g gs) (set! diff (make-array (length guess) initial-element\
    \ 0)))\n          ((< g g) (set! diff (make-array (length guess) initial-element\
    \ 0)))\n          ((< g (+ g 1))\n           (set! diff (make-array (length guess)\
    \ initial-element 0)))\n          ((< g (+ g 1))\n           (set! diff (make-array\
    \ (length guess) initial-element 0)))\n          ((< g (+ g 1))\n           (set!\
    \ diff (make-array (length guess) initial-element 0)))\n          ((< g (+ g 1))\n\
    \           (set! diff (make-array (length guess) initial-element 0)))\n     \
    \     ((< g (+ g 1))\n           (set! diff (make-array (length guess) initial-element\
    \ 0)))\n          ((< g (+ g 1))\n           (set! diff (make-array (length guess)\
    \ initial-element 0)))\n          ((< g (+ g 1))\n           (set! diff (make-array\
    \ (length guess) initial-element 0)))\n          ((< g (+ g 1))\n           (set!\
    \ diff (make-array (length guess) initial-element 0)))\n          ((< g (+ g 1))\n\
    \           (set! diff (make-array (length guess) initial-element 0)))\n     \
    \     ((< g (+ g 1))\n           (set! diff (make-array (length guess) initial-element\
    \ 0)))\n          ((< g (+ g 1))\n           (set! diff (make-array (length guess)\
    \ initial-element 0)))\n          ((< g (+ g 1))\n           (set! diff (make-array\
    \ (length guess) initial-element 0)))\n          ((< g (+ g 1))\n           (set!\
    \ diff (make-array (length guess) initial-element 0)))\n          ((< g (+ g 1))\n\
    \           (set! diff (make-array (length guess) initial-element 0)))\n     \
    \     ((< g", "  (if (= (length game) (length guess))\n      (let ((score (car\
    \ game))\n            (guess-score (car guess)))\n        (if (= guess-score score)\n\
    \            (list 0 0)\n            (list (abs (- guess-score score))))))\n \
    \ ;; The game is too short\n  (if (= (length game) 0)\n      (list 0 0)\n    \
    \  ;; The game is too long\n      (let ((score (car guess))\n            (guess-score\
    \ (car game)))\n        (if (= guess-score score)\n            (list 0 0)\n  \
    \          (list (abs (- guess-score score)))))))\n</code>\n<|/ a |>\n<| c |>\n\
    I like this solution, although I do think it would be better to have `compare`\
    \ return `(list 0 0)` instead of `(list 0 0)` if the game is too short or too\
    \ long.\n<|/ c |>\n<| c |>\nI agree. I'll add that to the answer.\n<|/ c |>\n\
    <| c |>\nI added a version that returns `(list 0 0)` instead of `(list 0 0)` if\
    \ the game is too short or too long.\n<|/ c |>\n<| c |>\nI added a version that\
    \ returns `(list 0 0)` instead of `(list 0 0)` if the game is too short or too\
    \ long.\n<|/ c |>\n<| c |>\nI added a version that returns `(list 0 0)` instead\
    \ of `(list 0 0)` if the game is too short or too long.\n<|/ c |>\n<| a dscore=2\
    \ |>\nI believe this solution is more elegant and easier to understand:\n<code>",
  "  (if (= (length game) (length guess))\n      (map (lambda (x y) (if (= x y) 0\
    \ \n                          (abs (- x y)))) game guess)\n      (map (lambda\
    \ (x y) (if (= x y) 0 \n                          (abs (- x y)))) guess game)))\n",
  "  (if (= (length game) (length guess))\n      (let ((diff (make-array (length guess)\
    \ 'int)))\n        (do ((i 0 (+ i 1))\n             (j (+ i 1))\n            \
    \ (diff (make-array (length guess) 'int)))\n          ((< i j) (set! diff (make-array\
    \ (length guess) 'int))\n            (do ((k 0 (+ k 1))\n                   (l\
    \ (+ k 1))\n                   (diff (make-array (length guess) 'int)))\n    \
    \          ((< k l) (set! diff (make-array (length guess) 'int))\n           \
    \     (do ((m 0 (+ m 1))\n                       (n (+ m 1))\n               \
    \        (diff (make-array (length guess) 'int)))\n                  ((< m n)\
    \ (set! diff (make-array (length guess) 'int))\n                    (do ((a 0\
    \ (+ a 1))\n                          (b (+ a 1))\n                          (diff\
    \ (make-array (length guess) 'int)))\n                      ((< a b) (set! diff\
    \ (make-array (length guess) 'int))\n                        (do ((c 0 (+ c 1))\n\
    \                              (d\n                               (+ (- c d) a))\n\
    \                              (diff (make-array (length guess) 'int)))\n    \
    \                      ((< c d) (set! diff (make-array (length guess) 'int))\n\
    \                            (do ((e 0 (+ e 1))\n                            \
    \      (f\n                                   (+ (- e f) b))\n               \
    \                   (diff (make-array (length guess) 'int)))\n               \
    \               ((< e f) (set! diff (make-array (length guess) 'int))\n      \
    \                          (do ((g 0 (+ g 1))\n                              \
    \        (h\n                                       (+ (- g h) c))\n         \
    \                             (diff (make-array (length guess) 'int)))\n     \
    \                           ((< g h) (set! diff (make-array (length guess) 'int))\n\
    \                                  (do ((i 0 (+ i 1))\n                      \
    \                  (j\n                                         (+ (- i j) e))\n\
    \                                        (diff (make-array (length guess) 'int)))\n\
    \                                  ((< i j) (set! diff (make-array (length guess)\
    \ 'int))\n                                    (do ((k 0 (+ k 1))\n           \
    \                               (l\n                                         \
    \  (+ (- k l) g))\n                                          (diff (make-array\
    \ (length guess) 'int)))\n                                  ((< k l) (set! diff\
    \ (make-array (length guess", "  (if (= (length game) (length guess))\n      (let\
    \ ((diff (make-array (length guess) initial-element 0)))\n        (do ((i 0 (+\
    \ i 1))\n             (game (subseq game 0 i))\n             (guess (subseq guess\
    \ 0 i))\n             (diff (subseq diff 0 i)))\n          ((< i length) (set!\
    \ diff (subseq diff 0 i)))\n          ((= i (length game)) (set! diff (subseq\
    \ diff 0 i)))\n          ((= i (length guess)) (set! diff (subseq diff 0 i)))\n\
    \          ((= i (length diff)) (set! diff (subseq diff 0 i)))\n          ((=\
    \ i (length diff)) (set! diff (subseq diff 0 i)))\n          ((= i (length diff))\
    \ (set! diff (subseq diff 0 i)))\n          ((= i (length diff)) (set! diff (subseq\
    \ diff 0 i)))\n          ((= i (length diff)) (set! diff (subseq diff 0 i)))\n\
    \          ((= i (length diff)) (set! diff (subseq diff 0 i)))\n          ((=\
    \ i (length diff)) (set! diff (subseq diff 0 i)))\n          ((= i (length diff))\
    \ (set! diff (subseq diff 0 i)))\n          ((= i (length diff)) (set! diff (subseq\
    \ diff 0 i)))\n          ((= i (length diff)) (set! diff (subseq diff 0 i)))\n\
    \          ((= i (length diff)) (set! diff (subseq diff 0 i)))\n          ((=\
    \ i (length diff)) (set! diff (subseq diff 0 i)))\n          ((= i (length diff))\
    \ (set! diff (subseq diff 0 i)))\n          ((= i (length diff)) (set! diff (subseq\
    \ diff 0 i)))\n          ((= i (length diff)) (set! diff (subseq diff 0 i)))\n\
    \          ((= i (length diff)) (set! diff (subseq diff 0 i)))\n          ((=\
    \ i (length diff)) (set! diff (subseq diff 0 i)))\n          ((= i (length diff))\
    \ (set! diff (subseq diff 0 i)))\n          ((= i (length diff)) (set! diff (subseq\
    \ diff 0 i)))\n          ((= i (length diff)) (set! diff (subseq diff 0 i)))\n\
    \          ((= i (length diff)) (set! diff (", "  (if (= (length game) (length\
    \ guess))\n      (let ((score (car game))\n            (guess (car guess))\n \
    \           (diff (- guess score)))\n        (if (= guess score)\n           \
    \ (list diff)\n            (cons diff (compare game (sub1 guess))))))\n  (let\
    \ ((score (car game))\n        (guess (car guess))\n        (diff (- guess score)))\n\
    \    (if (= guess score)\n        (list diff)\n        (cons diff (compare game\
    \ (sub1 guess))))))\n", "  (let ((scores (make-array (length game) initial-element-value\
    \ #f)))\n    (do ((i 0 (+ i 1)))\n        ((< i length) (return-from compare '()))\n\
    \      (let ((score (assoc game i)))\n        (cond\n          ((not score) (return-from\
    \ compare '()))\n          ((not (= (first guess) (first score)))\n          \
    \ (set! scores\n                   (assoc scores\n                           (-\
    \ i 1)\n                           (abs (- (first guess) (first score))))))\n\
    \          ((not (= (first guess) (first score)))\n           (set! scores\n \
    \                  (assoc scores\n                           (- i 1)\n       \
    \                    (- (first guess) (first score))))))\n      (set! scores\n\
    \            (assoc scores\n                   (- i 1)\n                   (-\
    \ (first guess) (first score))))))))\n", "  (if (null? game)\n      (list guess)\n\
    \      (let ((diff (- guess (car game))))\n        (if (= diff 0)\n          \
    \  (list guess)\n            (append (list diff) (compare (cdr game) guess)))))\n",
  "  (if (= (length game) (length guess))\n      (let ((diff (make-array (length guess)\
    \ 'int)))\n        (do ((i 0 (+ i 1))\n             (j 0 (+ j 1)))\n         \
    \   ((< i j) (set! diff 0 (+ diff (abs (- (car game) (caar guess))))))\n     \
    \       (set! diff (+ diff (abs (- (car guess) (caar game))))))\n        diff)\n\
    \      (let ((diff (make-array (length game) 'int)))\n        (do ((i 0 (+ i 1))\n\
    \             (j 0 (+ j 1)))\n            ((< i j) (set! diff 0 (+ diff (abs (-\
    \ (car guess) (caar game))))))\n            (set! diff (+ diff (abs (- (car game)\
    \ (caar guess))))))\n        diff)))\n", "  (if (= (length game) (length guess))\n\
    \      (let ((diff (make-array (length guess) initial-element 0)))\n        (do\
    \ ((i 0 (+ i 1))\n             (g 0 (+ g 1)))\n          ((< i length) (set! diff\
    \ (make-array (length guess) initial-element 0)))\n          ((< g length) (set!\
    \ diff (make-array (length guess) initial-element 0)))\n          ((= i g) (set!\
    \ diff (make-array (length guess) initial-element 0)))\n          ((= g i) (set!\
    \ diff (make-array (length guess) initial-element 0)))\n          ((= (length\
    \ game) (length guess))\n           (do ((j 0 (+ j 1))\n                (s 0 (+\
    \ s 1)))\n              ((< j length) (set! diff (make-array (length guess) initial-element\
    \ 0)))\n              ((< s length) (set! diff (make-array (length guess) initial-element\
    \ 0)))\n              ((= j s) (set! diff (make-array (length guess) initial-element\
    \ 0)))\n              ((= s j) (set! diff (make-array (length guess) initial-element\
    \ 0)))\n              ((= (length game) (length guess))\n               (do ((k\
    \ 0 (+ k 1))\n                     (s 0 (+ s 1)))\n                  ((< k length)\
    \ (set! diff (make-array (length guess) initial-element 0)))\n               \
    \   ((< s length) (set! diff (make-array (length guess) initial-element 0)))\n\
    \                  ((= k s) (set! diff (make-array (length guess) initial-element\
    \ 0)))\n                  ((= s k) (set! diff (make-array (length guess) initial-element\
    \ 0)))\n                  ((= (length game) (length guess))\n                \
    \   (do ((l 0 (+ l 1))\n                         (s 0 (+ s 1)))\n            \
    \         ((< l length) (set! diff (make-array (length guess) initial-element\
    \ 0)))\n                     ((< s length) (set! diff (make-array (length guess)\
    \ initial-element 0)))\n                     ((= l s) (set! diff (make-array (length\
    \ guess) initial-element 0)))\n                     ((= s l) (set! diff (make-array\
    \ (length guess) initial-element 0)))\n                     ((= (length game)\
    \ (length guess))\n                     (do ((m 0 (+ m 1))\n                 \
    \          (s 0 (+ s 1)))\n                     ((< m length) (set! diff (make-array\
    \ (length guess) ", "  (if (null? game)\n      (list guess)\n      (let ((score\
    \ (car game))\n            (guess (car guess))\n            (games (cdr game)))\n\
    \        (if (= guess score)\n            (list guess)\n            (if (= (abs\
    \ (- guess score)) (abs (- score guess)))\n                (list guess)\n    \
    \            (if (= (abs (- guess score)) (abs (- score guess)))\n           \
    \         (list guess)\n                    (if (= (abs (- guess score)) (abs\
    \ (- score guess)))\n                        (list guess)\n                  \
    \      (if (= (abs (- guess score)) (abs (- score guess)))\n                 \
    \           (list guess)\n                            (if (= (abs (- guess score))\
    \ (abs (- score guess)))\n                                (list guess)\n     \
    \                           (if (= (abs (- guess score)) (abs (- score guess)))\n\
    \                                    (list guess)\n                          \
    \          (if (= (abs (- guess score)) (abs (- score guess)))\n             \
    \                           (list guess)\n                                   \
    \     (if (= (abs (- guess score)) (abs (- score guess)))\n                  \
    \                          (list guess)\n                                    \
    \        (if (= (abs (- guess score)) (abs (- score guess)))\n               \
    \                                 (list guess)\n                             \
    \                   (if (= (abs (- guess score)) (abs (- score guess)))\n    \
    \                                                (list guess)\n              \
    \                                      (if (= (abs (- guess score)) (abs (- score\
    \ guess)))\n                                                        (list guess)\n\
    \                                                        (if (= (abs (- guess\
    \ score)) (abs (- score guess)))\n                                           \
    \                 (list guess)\n                                             \
    \               (if (= (abs (- guess score)) (abs (- score guess)))\n        \
    \                                                        (list guess)\n      \
    \                                                          (if (= (abs (- guess\
    \ score)) (abs (- score guess)))\n                                           \
    \                         (list guess)\n                                     \
    \                               (if (= (abs (- guess score)) (abs (- score guess)))\n\
    \                                                                        (list\
    \ guess)\n                                                                   \
    \     (if (= (abs (- guess score)) (abs (- score guess)))\n                  \
    \                                                          (list guess)\n    \
    \                                                                        (if (=\
    \ (abs (- guess score)) (abs (- score guess)))\n                             \
    \                                                   (list guess)\n           \
    \                                                                     (if (= (abs\
    \ (- guess score)) (abs (- score guess)))\n                                  \
    \                                                  (list guess)\n            \
    \                                                                        (if (=\
    \ (abs (- guess score)) (abs (- score ", "  (if (= (length game) (length guess))\n\
    \      (let ([scores (make-array (length guess) (lambda (x) (+ x 1)))])\n    \
    \    (do ([i 0 (+ i 1)])\n            ((< i guess) (set! scores (assoc i 0 (+\
    \ scores guess)))\n               (set! scores (assoc i 1 (+ scores game)))\n\
    \               (set! scores (assoc i 2 (+ scores (- guess i))))\n           \
    \    (set! scores (assoc i 3 (+ scores (- game i))))\n               (set! scores\
    \ (assoc i 4 (+ scores (- game (- i 1))))))\n        scores)\n      (let ([scores\
    \ (make-array (length guess) (lambda (x) (+ x 1)))])\n        (do ([i 0 (+ i 1)])\n\
    \            ((< i guess) (set! scores (assoc i 0 (+ scores guess)))\n       \
    \        (set! scores (assoc i 1 (+ scores game)))\n               (set! scores\
    \ (assoc i 2 (+ scores (- guess i))))\n               (set! scores (assoc i 3\
    \ (+ scores (- game i))))\n               (set! scores (assoc i 4 (+ scores (-\
    \ game (- i 1))))))\n        scores)))\n", "  (if (null? game)\n      (if (null?\
    \ guess)\n          (list 0)\n          (list 0))\n      (let ((score (car game))\n\
    \            (guess1 (car guess))\n            (guess2 (car guess)))\n       \
    \ (if (= guess1 guess2)\n            (list 0)\n            (list (abs (- guess1\
    \ score) (- guess2 score)))))))\n", "  (if (= (length game) (length guess))\n\
    \      (let ((diff (make-array (length guess) 'int)))\n        (do ((i 0 (+ i\
    \ 1))\n             (j (+ i 1))\n             (diff (make-array (length guess)\
    \ 'int)))\n          ((< i j) (set! diff (make-array (length guess) 'int)))\n\
    \          ((< j length) (set! diff (make-array (length guess) 'int)))\n     \
    \     ((< i length) (set! diff (make-array (length guess) 'int)))\n          ((<\
    \ i j)\n           (do ((a 0 (+ a 1))\n                (diff (make-array (length\
    \ guess) 'int)))\n              ((< a length) (set! diff (make-array (length guess)\
    \ 'int)))\n              ((< a i)\n               (do ((b (+ b 1))\n         \
    \            (diff (make-array (length guess) 'int)))\n                 ((< b\
    \ length) (set! diff (make-array (length guess) 'int)))\n                 ((<\
    \ b j)\n                  (do ((diff (make-array (length guess) 'int))\n     \
    \                  ((< i j) (set! diff (make-array (length guess) 'int)))\n  \
    \                     ((< j length) (set! diff (make-array (length guess) 'int)))\n\
    \                       ((< i length) (set! diff (make-array (length guess) 'int)))\n\
    \                       ((< i j)\n                        (do ((diff (make-array\
    \ (length guess) 'int))\n                            ((< i j) (set! diff (make-array\
    \ (length guess) 'int)))\n                            ((< j length) (set! diff\
    \ (make-array (length guess) 'int)))\n                            ((< i length)\
    \ (set! diff (make-array (length guess) 'int)))\n                            ((<\
    \ i j)\n                             (do ((diff (make-array (length guess) 'int))\n\
    \                                  ((< i j) (set! diff (make-array (length guess)\
    \ 'int)))\n                                  ((< j length) (set! diff (make-array\
    \ (length guess) 'int)))\n                                  ((< i length) (set!\
    \ diff (make-array (length guess) 'int)))\n                                  ((<\
    \ i j)\n                                   (do ((diff (make-array (length guess)\
    \ 'int))\n                                        ((< i j) (set! diff (make-array\
    \ (length guess) 'int)))\n                                        ((< ", "  (let\
    \ ([scores (map score-of game)])\n    (let ([guesses (map guess-of guess)])\n\
    \      (let ([score-diff (map score-diff scores guesses)])\n        (map abs score-diff))))))\n",
  "  (let ((scores (make-array (length game) 'int))\n        (guesses (make-array\
    \ (length guess) 'int)))\n    (do ((i 0 (+ i 1))\n         (j 0 (+ j 1)))\n  \
    \      ((< i guess) (set! guesses (vector-set! guesses j guess)))\n        ((<\
    \ j game) (set! scores (vector-set! scores i game)))\n        ((< i guess) (set!\
    \ guesses (vector-set! guesses j guess)))\n        ((< j game) (set! scores (vector-set!\
    \ scores i game)))\n      (when (= i j)\n        (set! scores (vector-set! scores\
    \ i 0))))\n    (let ((score (vector-ref scores 0)))\n      (if (= score 0)\n \
    \         (vector-ref guesses 0)\n          (let ((diff (abs (- guess score))))\n\
    \            (vector-set! guesses 0 (vector-set! guesses 0 diff))\n          \
    \  (vector-set! scores 0 (vector-set! scores 0 diff))\n            (vector-set!\
    \ guesses i (vector-set! guesses i (- diff score)))))\n      (vector-ref guesses\
    \ 0))))\n", "  (if (= (length game) (length guess))\n      (let ([scores (make-array\
    \ (length game) initial-contents '())\n            guesses (make-array (length\
    \ guess) initial-contents '())])\n        (do ([i 0 (+ i 1)])\n            ((<\
    \ i length (+ i 1))\n             (set! scores\n                    (cons (- guess\
    \ (car game)) scores))\n             (set! guesses\n                    (cons\
    \ (car game) guesses)))\n        (do ([i 0 (+ i 1)])\n            ((< i length\
    \ (+ i 1))\n             (set! scores\n                    (cons (- guess (car\
    \ guess)) scores))\n             (set! guesses\n                    (cons (car\
    \ guess) guesses)))\n        (do ([i 0 (+ i 1)])\n            ((< i length (+\
    \ i 1))\n             (set! scores\n                    (cons (- guess (car guess))\
    \ scores))\n             (set! guesses\n                    (cons (car game) guesses)))\n\
    \        (do ([i 0 (+ i 1)])\n            ((< i length (+ i 1))\n            \
    \ (set! scores\n                    (cons (- guess (car guess)) scores))\n   \
    \          (set! guesses\n                    (cons (car game) guesses)))\n  \
    \      (do ([i 0 (+ i 1)])\n            ((< i length (+ i 1))\n             (set!\
    \ scores\n                    (cons (- guess (car guess)) scores))\n         \
    \    (set! guesses\n                    (cons (car game) guesses)))\n        (do\
    \ ([i 0 (+ i 1)])\n            ((< i length (+ i 1))\n             (set! scores\n\
    \                    (cons (- guess (car guess)) scores))\n             (set!\
    \ guesses\n                    (cons (car game) guesses)))\n        (do ([i 0\
    \ (+ i 1)])\n            ((< i length (+ i 1))\n             (set! scores\n  \
    \                  (cons (- guess (car guess)) scores))\n             (set! guesses\n\
    \                    (cons (car game) guesses)))\n        (do ([i 0 (+ i 1)])\n\
    \            ((< i length (+ i 1))\n             (set! scores\n              \
    \      (cons (- guess (car guess)) scores))\n             (set! guesses\n    \
    \                (cons (car game) guesses)))\n        (do ([i 0 (+ i 1)])\n  \
    \          ((< ", "  (define (compare-loop i j game-score guess-score)\n    (cond\
    \ ((= i j) (if (= game-score guess-score) 0 guess-score))\n          ((< i j)\
    \ (compare-loop (+ i 1) j game-score (+ guess-score 1)))\n          ((> i j) (compare-loop\
    \ (+ i 1) j (+ game-score 1) guess-score))))\n  (compare-loop 0 0 (car game) (car\
    \ guess)))\n", "  (if (= (length game) (length guess))\n      (let ((diff (make-array\
    \ (length guess) 'int))\n            (idx (make-array (length guess) 'int)))\n\
    \        (do ((i 0 (+ i 1))\n             (j (+ i 1))\n             (diff diff\
    \ 0))\n            ((< i j) (set! idx (make-array (length guess) 'int)))\n   \
    \       (do ((a 0 (+ a 1))\n              (b (+ a 1))\n              (diff diff\
    \ 0))\n            ((< a b) (set! idx (make-array (length guess) 'int)))\n   \
    \       (do ((a 0 (+ a 1))\n              (b (+ a 1))\n              (diff diff\
    \ 0))\n            ((< a b) (set! idx (make-array (length guess) 'int)))\n   \
    \       (do ((a 0 (+ a 1))\n              (b (+ a 1))\n              (diff diff\
    \ 0))\n            ((< a b) (set! idx (make-array (length guess) 'int)))\n   \
    \       (do ((a 0 (+ a 1))\n              (b (+ a 1))\n              (diff diff\
    \ 0))\n            ((< a b) (set! idx (make-array (length guess) 'int)))\n   \
    \       (do ((a 0 (+ a 1))\n              (b (+ a 1))\n              (diff diff\
    \ 0))\n            ((< a b) (set! idx (make-array (length guess) 'int)))\n   \
    \       (do ((a 0 (+ a 1))\n              (b (+ a 1))\n              (diff diff\
    \ 0))\n            ((< a b) (set! idx (make-array (length guess) 'int)))\n   \
    \       (do ((a 0 (+ a 1))\n              (b (+ a 1))\n              (diff diff\
    \ 0))\n            ((< a b) (set! idx (make-array (length guess) 'int)))\n   \
    \       (do ((a 0 (+ a 1))\n              (b (+ a 1))\n              (diff diff\
    \ 0))\n            ((< a b) (set! idx (make-array (length guess) 'int)))\n   \
    \       (do ((a 0 (+ a 1))\n              (b (+ a 1))\n              (diff diff\
    \ 0))\n            ((< a b) (set! idx (make-array (length guess) 'int)))\n   \
    \       (do ((a 0 (+ a 1))\n              (b (+ a 1))\n              (diff diff\
    \ 0))\n            ((< a b) (set! idx (make-", "  (let ([scores (map score-of\
    \ game)])\n    (let ([guesses (map guess-of guess)])\n      (let ([score-diff\
    \ (map score-diff scores guesses)])\n        (map score-diff guesses)))))\n",
  "  (if (= (length game) (length guess))\n      (let ((diff (make-array (length game)\
    \ 'int)))\n        (do ((i 0 (+ i 1))\n             (game (subseq game 0 i))\n\
    \             (guess (subseq guess 0 i))\n             (diff (subseq diff 0 i)))\n\
    \          ((< i length) diff)\n          (set! diff (- diff (- guess game)))\n\
    \          (set! diff (- diff (- game guess)))\n          (set! diff (+ diff (-\
    \ i 1))))))\n  (let ((diff (make-array (length guess) 'int)))\n    (do ((i 0 (+\
    \ i 1))\n         (game (subseq game 0 i))\n         (guess (subseq guess 0 i))\n\
    \         (diff (subseq diff 0 i)))\n      ((< i length) diff)\n      (set! diff\
    \ (- diff (- guess game)))\n      (set! diff (- diff (- game guess)))\n      (set!\
    \ diff (+ diff (- i 1))))))\n  diff)\n", "  (if (= (length game) (length guess))\n\
    \      (let ((scores (make-array (length game) 'int))\n            (guesses (make-array\
    \ (length guess) 'int)))\n        (do ((i 0 (+ i 1))\n             (j 0 (+ j 1)))\n\
    \            ((or (< i j) (< j i))\n             (set! scores\n              \
    \      (map (lambda (score)\n                           (if (= (- score guess)\n\
    \                                  (- score scores))\n                       \
    \        (+ score guess)\n                               score))\n           \
    \              scores))\n             (set! guesses\n                    (map\
    \ (lambda (guess)\n                           (if (= (- guess score)\n       \
    \                           (- guess guesses))\n                             \
    \  (+ guess score)\n                               guess))\n                 \
    \        guesses)))\n        (map abs (- guesses scores)))))\n", "  (if (= (length\
    \ game) (length guess))\n      (let ((diff (make-array (length guess) 'int)))\n\
    \        (do ((i 0 (+ i 1))\n             (j 0 (+ j 1)))\n            ((< i j)\
    \ (set! diff 0 (+ diff (- guess game))))\n            (set! diff (+ diff (- game\
    \ (gethash (sub1 i) guess))))\n          diff)\n      (let ((diff (make-array\
    \ (length guess) 'int)))\n        (do ((i 0 (+ i 1))\n             (j 0 (+ j 1)))\n\
    \            ((< i j) (set! diff 0 (+ diff (- guess game))))\n            (set!\
    \ diff (+ diff (- game (gethash (sub1 i) guess))))\n          diff))))\n", " \
    \ (if (= (length game) (length guess))\n      (map (lambda (game-guess index)\n\
    \             (if (= (game-guess game) 0)\n                 0\n              \
    \   (abs (game-guess game) guess (+ index 1))))\n            game\n          \
    \  guess)\n      (map (lambda (game-guess index)\n             (if (= (game-guess\
    \ game) 0)\n                 0\n                 (abs (game-guess game) guess\
    \ (+ index 1))))\n            game\n            guess)))\n", "  (if (= (length\
    \ game) (length guess))\n      (let ([scores (make-array (length game) initial-element\
    \ 0)])\n        (do ([i 0 (+ i 1)])\n            ((< i length) (set! scores\n\
    \                                (map (lambda (score)\n                      \
    \                (if (= (+ i 1) length)\n                                    \
    \      score\n                                          (if (= (- i 1) length)\n\
    \                                              (- score guess)\n             \
    \                                 (- guess score)))\n                        \
    \              scores)))\n            (set! scores (map (lambda (score)\n    \
    \                          (if (= i 0)\n                                  score\n\
    \                                  (if (= i 1)\n                             \
    \         (- score guess)\n                                      (- guess score)))\n\
    \                              scores)))\n        scores)\n      (let ([scores\
    \ (make-array (length guess) initial-element 0)])\n        (do ([i 0 (+ i 1)])\n\
    \            ((< i length) (set! scores\n                                (map\
    \ (lambda (score)\n                                      (if (= (+ i 1) length)\n\
    \                                          score\n                           \
    \               (if (= (- i 1) length)\n                                     \
    \         (- score guess)\n                                              (- guess\
    \ score)))\n                                      scores)))\n            (set!\
    \ scores (map (lambda (score)\n                              (if (= i 0)\n   \
    \                               score\n                                  (if (=\
    \ i 1)\n                                      (- score guess)\n              \
    \                        (- guess score)))\n                              scores)))\n\
    \        scores)))\n", "  (let loop ((game-scores game)\n             (guess-scores\
    \ guess))\n    (if (= (length game-scores) (length guess-scores))\n        (let\
    \ loop ((i 0)\n                   (game-score game-scores)\n                 \
    \  (guess-score guess-scores))\n          (if (= i 0)\n              (list game-score)\n\
    \              (let ((diff (- guess-score game-score)))\n                (if (<\
    \ diff 0)\n                    (loop (+ i 1)\n                           (cdr\
    \ game-scores)\n                           (car guess-scores))\n             \
    \       (loop (+ i 1)\n                           (cdr game-scores)\n        \
    \                   (car guess-scores))))))\n        (let loop ((i 0)\n      \
    \             (game-score game-scores)\n                   (guess-score guess-scores))\n\
    \          (if (= i 0)\n              (list game-score)\n              (let ((diff\
    \ (- guess-score game-score)))\n                (if (< diff 0)\n             \
    \       (loop (+ i 1)\n                           (cdr game-scores)\n        \
    \                   (car guess-scores))\n                    (loop (+ i 1)\n \
    \                          (cdr game-scores)\n                           (car\
    \ guess-scores))))))))))\n", "  (define (compare game guess)\n    (if (= (length\
    \ game) (length guess))\n        (let ((diff (- guess game)))\n          (if (=\
    \ diff 0)\n              (list 0)\n              (list diff))))\n    (let ((diff\
    \ (- guess game)))\n      (if (= diff 0)\n          (list 0)\n          (list\
    \ diff))))\n  (compare game guess))\n", "  (let ((score (car game))\n        (guess\
    \ (cdr game)))\n    (if (null? guess)\n        (list score)\n        (let ((diff\
    \ (- guess score)))\n          (if (= diff 0)\n              (list score)\n  \
    \            (list diff))))))\n", "  (if (= (length game) (length guess))\n  \
    \    (let ((score (car game))\n            (guess (car guess))\n            (diff\
    \ (- guess score)))\n        (if (= guess score)\n            (list diff)\n  \
    \          (list diff score)))))\n", "  (if (= (length game) (length guess))\n\
    \      (map (lambda (game-score guess-score)\n             (if (= (- guess-score\
    \ game-score) 0)\n                 0\n                 (abs (- guess-score game-score))))\n\
    \           game guess)\n      (map (lambda (game-score guess-score)\n       \
    \      (if (= (- guess-score game-score) 0)\n                 0\n            \
    \     (abs (- guess-score game-score))))\n           (reverse game) guess)))\n",
  "  (if (null? game)\n      (list guess)\n      (let ((diff (- guess (car game))))\n\
    \        (if (= diff 0)\n            (list guess)\n            (cons diff (compare\
    \ (cdr game) guess)))))) \n", "  (if (= (length game) (length guess))\n      (let\
    \ ((diff (make-array (length guess) initial-element 0)))\n        (do ((i 0 (+\
    \ i 1))\n             (game-index (+ i 1))\n             (guess-index (+ i 1)))\n\
    \          ((< i guess-index) (set! diff (+ diff (abs (- guess game))))\n    \
    \      ((< game-index guess-index) (set! diff (+ diff (abs (- game guess))))\n\
    \          (set! diff (+ diff (abs (- guess game)))))\n        (reverse diff))\n\
    \      (let ((diff (make-array (length guess) initial-element 0)))\n        (do\
    \ ((i 0 (+ i 1))\n             (game-index (+ i 1))\n             (guess-index\
    \ (+ i 1)))\n          ((< i guess-index) (set! diff (+ diff (abs (- guess game))))\n\
    \          ((< game-index guess-index) (set! diff (+ diff (abs (- game guess))))\n\
    \          (set! diff (+ diff (abs (- guess game)))))\n        (reverse diff))))\n",
  "  (if (= (length game) (length guess))\n      (let ((diff (make-array (length guess)\
    \ :initial-element 0)))\n        (do ((i 0 (+ i 1))\n             (game (subseq\
    \ game 0 i))\n             (guess (subseq guess 0 i))\n             (diff (subseq\
    \ diff 0 i)))\n          ((< i length) (set! diff (make-array (length guess) :initial-element\
    \ 0)))\n          ((= i length) (set! diff (make-array (length game) :initial-element\
    \ 0)))\n          ((= i (length game)) (set! diff (make-array (length game) :initial-element\
    \ 0)))\n          ((= i (length guess)) (set! diff (make-array (length game) :initial-element\
    \ 0)))\n          ((= i (length diff)) (set! diff (make-array (length game) :initial-element\
    \ 0)))\n          ((= i (length diff)) (set! diff (make-array (length guess) :initial-element\
    \ 0)))\n          ((= i (length diff)) (set! diff (make-array (length game) :initial-element\
    \ 0)))\n          ((= i (length diff)) (set! diff (make-array (length guess) :initial-element\
    \ 0)))\n          ((= i (length diff)) (set! diff (make-array (length game) :initial-element\
    \ 0)))\n          ((= i (length diff)) (set! diff (make-array (length guess) :initial-element\
    \ 0)))\n          ((= i (length diff)) (set! diff (make-array (length game) :initial-element\
    \ 0)))\n          ((= i (length diff)) (set! diff (make-array (length guess) :initial-element\
    \ 0)))\n          ((= i (length diff)) (set! diff (make-array (length game) :initial-element\
    \ 0)))\n          ((= i (length diff)) (set! diff (make-array (length guess) :initial-element\
    \ 0)))\n          ((= i (length diff)) (set! diff (make-array (length game) :initial-element\
    \ 0)))\n          ((= i (length diff)) (set! diff (make-array (length guess) :initial-element\
    \ 0)))\n          ((= i (length diff)) (set! diff (make-array (length game) :initial-element\
    \ 0)))\n          ((= i (length diff)) (set! diff (make-array (length guess) :initial-element\
    \ 0)))\n          ((= i (length diff)) (set! diff (make-array (length game) :initial-element\
    \ 0)))\n          ((= i (length diff)) (set! diff (make-array ", "  (if (null?\
    \ game)\n      (list guess)\n      (let ((score (car game))\n            (guess\
    \ (car guess)))\n        (if (= score guess)\n            (list 0)\n         \
    \   (list (abs (- guess score)))))))\n", "  (if (= (length game) (length guess))\n\
    \      (let ((diff (make-array (length guess) initial-element 0)))\n        (do\
    \ ((i 0 (+ i 1))\n             (j (+ i 1))\n             (diff (make-array (length\
    \ guess) initial-element 0)))\n          ((< i j) (set! diff (make-array (length\
    \ guess) initial-element 0)))\n          ((< j length) (set! diff (make-array\
    \ (length guess) initial-element 0)))\n          ((= i j) (set! diff (make-array\
    \ (length guess) initial-element 0)))\n          ((= j length) (set! diff (make-array\
    \ (length guess) initial-element 0)))\n          ((= i (+ i 1))\n           (set!\
    \ diff (make-array (length guess) initial-element 0)))\n          ((= j (+ j 1))\n\
    \           (set! diff (make-array (length guess) initial-element 0)))\n     \
    \     ((= i j)\n           (set! diff (make-array (length guess) initial-element\
    \ 0)))\n          ((= j length)\n           (set! diff (make-array (length guess)\
    \ initial-element 0)))\n          ((= i (+ i 1))\n           (set! diff (make-array\
    \ (length guess) initial-element 0)))\n          ((= j (+ j 1))\n           (set!\
    \ diff (make-array (length guess) initial-element 0)))\n          ((= i j)\n \
    \          (set! diff (make-array (length guess) initial-element 0)))\n      \
    \    ((= j length)\n           (set! diff (make-array (length guess) initial-element\
    \ 0)))\n          ((= i (+ i 1))\n           (set! diff (make-array (length guess)\
    \ initial-element 0)))\n          ((= j (+ j 1))\n           (set! diff (make-array\
    \ (length guess) initial-element 0)))\n          ((= i j)\n           (set! diff\
    \ (make-array (length guess) initial-element 0)))\n          ((= j length)\n \
    \          (set! diff (make-array (length guess) initial-element 0)))\n      \
    \    ((= i (+ i 1))\n           (set! diff (make-array (length guess) initial-element\
    \ 0)))\n          ((= j (+ j 1))\n           (set! diff (make-array (length guess)\
    \ initial-element 0)))\n          ((= i j)\n           (set! diff (make-array\
    \ (length guess) initial-element 0)))\n          ((= j length)\n           (set!\
    \ diff (make-array (length guess) initial-element 0", "  (if (= (length game)\
    \ (length guess))\n      (let ((diff (make-array (length guess) initial-element\
    \ 0)))\n        (do ((i 0 (+ i 1))\n             (game (subseq game 0 i))\n  \
    \           (guess (subseq guess 0 i))\n             (diff (subseq diff 0 i)))\n\
    \          ((< i length) (set! diff (make-array (length guess) initial-element\
    \ 0)))\n          ((= i length) (set! diff (make-array (length game) initial-element\
    \ 0)))\n          ((= i (length game))\n           (set! diff (make-array (length\
    \ game) initial-element 0)))\n          ((= i (length guess))\n           (set!\
    \ diff (make-array (length game) initial-element 0)))\n          ((= i (length\
    \ diff))\n           (set! diff (make-array (length game) initial-element 0)))\n\
    \          ((= i (length diff))\n           (set! diff (make-array (length guess)\
    \ initial-element 0)))\n          ((= i (length diff))\n           (set! diff\
    \ (make-array (length game) initial-element 0)))\n          ((= i (length diff))\n\
    \           (set! diff (make-array (length guess) initial-element 0)))\n     \
    \     ((= i (length diff))\n           (set! diff (make-array (length game) initial-element\
    \ 0)))\n          ((= i (length diff))\n           (set! diff (make-array (length\
    \ guess) initial-element 0)))\n          ((= i (length diff))\n           (set!\
    \ diff (make-array (length game) initial-element 0)))\n          ((= i (length\
    \ diff))\n           (set! diff (make-array (length guess) initial-element 0)))\n\
    \          ((= i (length diff))\n           (set! diff (make-array (length game)\
    \ initial-element 0)))\n          ((= i (length diff))\n           (set! diff\
    \ (make-array (length guess) initial-element 0)))\n          ((= i (length diff))\n\
    \           (set! diff (make-array (length game) initial-element 0)))\n      \
    \    ((= i (length diff))\n           (set! diff (make-array (length guess) initial-element\
    \ 0)))\n          ((= i (length diff))\n           (set! diff (make-array (length\
    \ game) initial-element 0)))\n          ((= i (length diff))\n           (set!\
    \ diff (make-array (length guess) initial-element 0)))\n          ((= i (length\
    \ diff))\n           (set! diff (make-array (length game) initial-element ", " \
    \ (if (null? game)\n      (list guess)\n      (let ((score (car game))\n     \
    \       (guess (car guess))\n            (diff (abs (- guess score))))\n     \
    \   (cons (cons diff guess)\n              (compare (cdr game)\n             \
    \          (cdr guess))))))\n", "  (if (= (length game) (length guess))\n    \
    \  (map (lambda (x y) (if (= x y) 0 abs (- x y))) game guess)\n      (map (lambda\
    \ (x y) (if (= x y) 0 abs (- x y))) guess game)))\n", "  (if (null? game)\n  \
    \    (list guess)\n      (let ((score (car game))\n            (guess (car guess))\n\
    \            (diff (abs (- guess score))))\n        (if (= guess score)\n    \
    \        (list guess)\n            (cons diff (compare rest (cdr guess)))))))\n",
  "  (if (null? game)\n      (list guess)\n      (let ((diff (- guess (car game))))\n\
    \        (if (= diff 0)\n            (list guess)\n            (cons diff (compare\
    \ (cdr game) guess)))))) \n", "  (if (= (length game) (length guess))\n      (let\
    \ ((diff (make-array (length guess) initial-element 0)))\n        (do ((i 0 (+\
    \ i 1))\n             (j 0 (+ j 1)))\n            ((or (= i j) (= i 0))\n    \
    \         (set! diff (+ diff (abs (- guess game))))\n             (set! diff (+\
    \ diff (abs (- game guess))))\n             (set! diff (+ diff (abs (- guess game)))))\n\
    \          (set! diff (+ diff (abs (- guess game))))\n          (set! diff (+\
    \ diff (abs (- game guess))))\n          (set! diff (+ diff (abs (- guess game)))))\n\
    \      (let ((diff (make-array (length guess) initial-element 0)))\n        (do\
    \ ((i 0 (+ i 1))\n             (j 0 (+ j 1)))\n            ((or (= i j) (= i 0))\n\
    \             (set! diff (+ diff (abs (- guess game))))\n             (set! diff\
    \ (+ diff (abs (- game guess))))\n             (set! diff (+ diff (abs (- guess\
    \ game)))))\n          (set! diff (+ diff (abs (- guess game))))\n          (set!\
    \ diff (+ diff (abs (- game guess))))\n          (set! diff (+ diff (abs (- guess\
    \ game)))))\n      (let ((diff (make-array (length guess) initial-element 0)))\n\
    \        (do ((i 0 (+ i 1))\n             (j 0 (+ j 1)))\n            ((or (=\
    \ i j) (= i 0))\n             (set! diff (+ diff (abs (- guess game))))\n    \
    \         (set! diff (+ diff (abs (- game guess))))\n             (set! diff (+\
    \ diff (abs (- guess game)))))\n          (set! diff (+ diff (abs (- guess game))))\n\
    \          (set! diff (+ diff (abs (- game guess))))\n          (set! diff (+\
    \ diff (abs (- guess game)))))\n      (let ((diff (make-array (length guess) initial-element\
    \ 0)))\n        (do ((i 0 (+ i 1))\n             (j 0 (+ j 1)))\n            ((or\
    \ (= i j) (= i 0))\n             (set! diff (+ diff (abs (- guess game))))\n \
    \            (set! diff (+ diff (abs (- game guess))))\n             (set! diff\
    \ (+ diff (abs (", "  (let ((score (car game))\n        (guess (car guess)))\n\
    \    (if (= guess score)\n        0\n        (abs (- guess score)))))\n", "  (if\
    \ (= (length game) (length guess))\n      (map (lambda (x y) (if (= x y) 0 \n\
    \                          (abs (- x y)))) game guess)\n      (map (lambda (x\
    \ y) (if (= x y) 0 \n                          (abs (- x y)))) guess game)))\n",
  "  (let ((scores (make-array (length guess) \n                            :element-type\
    \ 'int\n                            :initial-contents 0))\n        (guesses (make-array\
    \ (length guess) \n                            :element-type 'int\n          \
    \                  :initial-contents 0)))\n    (loop for i from 0 to (length game)\n\
    \          for j from 0 to (length guess)\n          when (= (array-ref game i)\
    \ \n                  (array-ref guess j))\n          (set! scores\n         \
    \       (array-set! scores \n                           (array-ref scores i)\n\
    \                           (array-ref scores i)\n                           +1))\n\
    \          (set! guesses\n                (array-set! guesses \n             \
    \              (array-ref guesses i)\n                           (array-ref guesses\
    \ i)\n                           +1))\n          (when (= i j)\n            (set!\
    \ scores \n                  (array-set! scores \n                           \
    \  (array-ref scores i)\n                             (array-ref scores i)\n \
    \                            0))\n            (set! guesses\n                \
    \  (array-set! guesses \n                             (array-ref guesses i)\n\
    \                             (array-ref guesses i)\n                        \
    \     0))\n            (set! scores \n                  (array-set! scores \n\
    \                             (array-ref scores i)\n                         \
    \    (array-ref scores i)\n                             0))\n            (set!\
    \ guesses\n                  (array-set! guesses \n                          \
    \   (array-ref guesses i)\n                             (array-ref guesses i)\n\
    \                             0))\n            (set! scores \n               \
    \   (array-set! scores \n                             (array-ref scores i)\n \
    \                            (array-ref scores i)\n                          \
    \   0))\n            (set! guesses\n                  (array-set! guesses \n \
    \                            (array-ref guesses i)\n                         \
    \    (array-ref guesses i)\n                             0))\n            (set!\
    \ scores \n                  (array-set! scores \n                           \
    \  (array-ref scores i)\n                             (array-ref scores i)\n \
    \                            0))\n            (set! guesses\n                \
    \  (array-set! guesses \n                             (array-ref guesses i)\n\
    \                             (array-ref guesses i)\n                        \
    \     0))\n            (set! scores \n                  (array-set! scores \n\
    \                             (array-ref scores i)\n                         \
    \    (array-ref scores i)\n                             0))\n            (set!\
    \ guesses\n                  (array-set! ", "  (define (compare game guess)\n\
    \    (define (compare game guess)\n      (define (compare game guess)\n      \
    \  (define (compare game guess)\n          (define (compare game guess)\n    \
    \        (define (compare game guess)\n              (define (compare game guess)\n\
    \                (define (compare game guess)\n                  (define (compare\
    \ game guess)\n                    (define (compare game guess)\n            \
    \          (define (compare game guess)\n                        (define (compare\
    \ game guess)\n                          (define (compare game guess)\n      \
    \                      (define (compare game guess)\n                        \
    \      (define (compare game guess)\n                                (define (compare\
    \ game guess)\n                                  (define (compare game guess)\n\
    \                                    (define (compare game guess)\n          \
    \                            (define (compare game guess)\n                  \
    \                      (define (compare game guess)\n                        \
    \                  (define (compare game guess)\n                            \
    \                (define (compare game guess)\n                              \
    \                (define (compare game guess)\n                              \
    \                  (define (compare game guess)\n                            \
    \                      (define (compare game guess)\n                        \
    \                            (define (compare game guess)\n                  \
    \                                    (define (compare game guess)\n          \
    \                                              (define (compare game guess)\n\
    \                                                          (define (compare game\
    \ guess)\n                                                            (define\
    \ (compare game guess)\n                                                     \
    \         (define (compare game guess)\n                                     \
    \                           (define (compare game guess)\n                   \
    \                                               (define (compare game guess)\n\
    \                                                                    (define (compare\
    \ game guess)\n                                                              \
    \        (define (compare game guess)\n                                      \
    \                                  (define (compare game guess)\n            \
    \                                                              (define (compare\
    \ game guess)\n                                                              \
    \              (define (compare game guess)\n                                \
    \                                              (define (compare game guess)\n\
    \                                                                            \
    \    (define (compare game guess)\n                                          \
    \                                        (define (compare game guess)\n      \
    \                                                                            \
    \  (define (compare game guess)\n                                            \
    \                                          (define (compare game guess)\n    \
    \                                                                            \
    \        (define (compare game guess)\n                                      \
    \                                                    (define (compare game guess)\n\
    \                                                                            \
    \                (define (compare game guess)\n                              \
    \                                                                (define (compare\
    \ game guess)\n                                                              \
    \                                  (define (compare game guess)\n            \
    \                                                                            \
    \          (define (compare game guess)\n                                    \
    \                                                                (define (compare\
    \ game guess)\n                                                              \
    \                                        (define (compare game guess)\n      \
    \                                                                            \
    \                      (define (compare game guess)\n                        \
    \                                                                            \
    \      (define (compare game guess)\n                                        \
    \                                                                    (define (compare\
    \ game guess)\n                                                              \
    \                                                (define (compare game guess)\n\
    \                                                                            \
    \                                    (define (compare game gues", "  (if (= (length\
    \ game) (length guess))\n      (let ((scores (make-array (length guess) 'int))\n\
    \            (guesses (make-array (length guess) 'int)))\n        (let loop ((i\
    \ 0) (j 0))\n          (if (< i j)\n              (begin (set! guesses (vector-set!\
    \ guesses i (car guess)))\n                     (set! scores (vector-set! scores\
    \ i (car game)))\n                     (loop (+ i 1) (+ j 1))\n              \
    \       (set! guesses (vector-set! guesses j (car guess)))\n                 \
    \    (set! scores (vector-set! scores j (car game)))\n                     (loop\
    \ (+ i 1) (+ j 1))\n                     (set! guesses (vector-set! guesses i\
    \ (car guess)))\n                     (set! scores (vector-set! scores i (car\
    \ game)))\n                     (loop (+ i 1) (+ j 1))\n                     (set!\
    \ guesses (vector-set! guesses j (car guess)))\n                     (set! scores\
    \ (vector-set! scores j (car game)))\n                     (loop (+ i 1) (+ j\
    \ 1))\n                     (set! guesses (vector-set! guesses i (car guess)))\n\
    \                     (set! scores (vector-set! scores i (car game)))\n      \
    \               (loop (+ i 1) (+ j 1))\n                     (set! guesses (vector-set!\
    \ guesses j (car guess)))\n                     (set! scores (vector-set! scores\
    \ j (car game)))\n                     (loop (+ i 1) (+ j 1))\n              \
    \       (set! guesses (vector-set! guesses i (car guess)))\n                 \
    \    (set! scores (vector-set! scores i (car game)))\n                     (loop\
    \ (+ i 1) (+ j 1))\n                     (set! guesses (vector-set! guesses j\
    \ (car guess)))\n                     (set! scores (vector-set! scores j (car\
    \ game)))\n                     (loop (+ i 1) (+ j 1))\n                     (set!\
    \ guesses (vector-set! guesses i (car guess)))\n                     (set! scores\
    \ (vector-set! scores i (car game)))\n                     (loop (+ i 1) (+ j\
    \ 1))\n                     (set! guesses (vector-set! guesses j (car guess)))\n\
    \                     (set! scores (vector-set! score", "  (if (= (length game)\
    \ (length guess))\n      (let ((diff (make-array (length guess) initial-element-value\
    \ 0)))\n        (do ((i 0 (+ i 1))\n             (g (+ i 1))\n             (g\
    \ (+ i 1)))\n          ((< i length) (set! diff (make-array (length guess) initial-element-value\
    \ 0)))\n          ((= i length) (set! diff (make-array (length guess) initial-element-value\
    \ 0)))\n          ((= (modulo i length) 0)\n           (set! diff (make-array\
    \ (length guess) initial-element-value 0)))\n          ((= (modulo i length) 1)\n\
    \           (set! diff (make-array (length guess) initial-element-value 0)))\n\
    \          ((= (modulo i length) 2)\n           (set! diff (make-array (length\
    \ guess) initial-element-value 0)))\n          ((= (modulo i length) 3)\n    \
    \       (set! diff (make-array (length guess) initial-element-value 0)))\n   \
    \       ((= (modulo i length) 4)\n           (set! diff (make-array (length guess)\
    \ initial-element-value 0)))\n          ((= (modulo i length) 5)\n           (set!\
    \ diff (make-array (length guess) initial-element-value 0)))\n          ((= (modulo\
    \ i length) 6)\n           (set! diff (make-array (length guess) initial-element-value\
    \ 0)))\n          ((= (modulo i length) 7)\n           (set! diff (make-array\
    \ (length guess) initial-element-value 0)))\n          ((= (modulo i length) 8)\n\
    \           (set! diff (make-array (length guess) initial-element-value 0)))\n\
    \          ((= (modulo i length) 9)\n           (set! diff (make-array (length\
    \ guess) initial-element-value 0)))\n          ((= (modulo i length) 10)\n   \
    \        (set! diff (make-array (length guess) initial-element-value 0)))\n  \
    \        ((= (modulo i length) 11)\n           (set! diff (make-array (length\
    \ guess) initial-element-value 0)))\n          ((= (modulo i length) 12)\n   \
    \        (set! diff (make-array (length guess) initial-element-value 0)))\n  \
    \        ((= (modulo i length) 13)\n           (set! diff (make-array (length\
    \ guess) initial-element-value 0)))\n          ((= (modulo i ", "  (if (= (length\
    \ game) (length guess))\n      (map (lambda (score)\n             (if (= (modulo\
    \ score 10) 0)\n                 (/ score 10)\n                 (abs (- guess\
    \ score))))\n           game)\n      (map (lambda (score)\n             (if (=\
    \ (modulo score 10) 0)\n                 (/ score 10)\n                 (abs (-\
    \ guess score))))\n           guess)))\n", "  (if (= (length game) (length guess))\n\
    \      (map + (map - guess game))\n      (map - (map - guess game) (map - game\
    \ guess))))\n", "  (if (= (length game) (length guess))\n      (let ((diff (make-array\
    \ (length guess) initial-element 0)))\n        (for ((i 0 (+ i 1))) (do ((j (+\
    \ i 1))) (set! diff (+ diff (- guess game))) (set! diff (+ diff (- j game))) (set!\
    \ diff (+ diff (- i guess))))\n        diff)\n      (let ((diff (make-array (length\
    \ guess) initial-element 0)))\n        (for ((i 0 (+ i 1))) (do ((j (+ i 1)))\
    \ (set! diff (+ diff (- guess game))) (set! diff (+ diff (- j game))) (set! diff\
    \ (+ diff (- i guess))) (set! diff (+ diff (- i guess))) (set! diff (+ diff (-\
    \ i guess))))\n        diff)))\n", "  (if (= (length game) (length guess))\n \
    \     (let ((diff (make-array (length guess) 'int)))\n        (do ((i 0 (+ i 1))\n\
    \             (j (+ i 1))\n             (diff diff))\n            ((< i j) (set!\
    \ diff 0))\n            (set! diff (+ (car diff)\n                           (*\
    \ (car game)\n                              (car guess))\n                   \
    \        (* (car guess)\n                              (cdr game)\n          \
    \                    (cdr guess))))\n            (set! i (+ i 1))\n          \
    \  (set! j (+ j 1))\n            (set! diff (- diff))\n            (set! diff\
    \ (abs diff))\n            (set! diff (- diff))\n            (set! diff (- diff))\n\
    \            (set! diff (- diff))\n            (set! diff (- diff))\n        \
    \    (set! diff (- diff))\n            (set! diff (- diff))\n            (set!\
    \ diff (- diff))\n            (set! diff (- diff))\n            (set! diff (-\
    \ diff))\n            (set! diff (- diff))\n            (set! diff (- diff))\n\
    \            (set! diff (- diff))\n            (set! diff (- diff))\n        \
    \    (set! diff (- diff))\n            (set! diff (- diff))\n            (set!\
    \ diff (- diff))\n            (set! diff (- diff))\n            (set! diff (-\
    \ diff))\n            (set! diff (- diff))\n            (set! diff (- diff))\n\
    \            (set! diff (- diff))\n            (set! diff (- diff))\n        \
    \    (set! diff (- diff))\n            (set! diff (- diff))\n            (set!\
    \ diff (- diff))\n            (set! diff (- diff))\n            (set! diff (-\
    \ diff))\n            (set! diff (- diff))\n            (set! diff (- diff))\n\
    \            (set! diff (- diff))\n            (set! diff (- diff))\n        \
    \    (set! diff (- diff))\n            (set! diff (- diff))\n            (set!\
    \ diff (- diff))\n            (set! diff (- diff))\n            (set! diff (-\
    \ diff))\n            (set! diff (- diff))\n            (set! diff (- diff))\n\
    \            (set! diff (- diff))\n            (set! diff (- diff))\n        \
    \    (set! diff (- diff))\n            (", "  (let ([scores (map score game)]\n\
    \        [guesses (map guess game)])\n    (if (= (length scores) (length guesses))\n\
    \        (let ([scores (map score guesses)])\n          (map diff guesses scores))\n\
    \        (let ([scores (map score guesses)])\n          (map diff guesses scores))))))\n",
  "  (if (= (length game) (length guess))\n      (let ((scores (make-array (length\
    \ game) 'int))\n            (guesses (make-array (length guess) 'int)))\n    \
    \    (do ((i 0 (+ i 1))\n             (j 0 (+ j 1)))\n            ((< i j) (set!\
    \ scores 0 (+ scores 0))\n                      (set! guesses 0 (+ guesses 0))\n\
    \                      (set! i (+ i 1)))\n          ((< j i) (set! scores 0 (+\
    \ scores 0))\n                      (set! guesses 0 (+ guesses 0))\n         \
    \             (set! j (+ j 1)))\n          (set! i (+ i 1))\n          (set! j\
    \ (+ j 1))\n          (set! scores (+ scores (- game (first game)))\n        \
    \          guesses (+ guesses (- guess (first guess))))\n          (set! scores\
    \ (+ scores (first game))\n                  guesses (+ guesses (first guess))))\n\
    \        (set! scores (+ scores (first game))\n                guesses (+ guesses\
    \ (first guess))))\n      (let ((scores (make-array (length guess) 'int))\n  \
    \          (guesses (make-array (length game) 'int)))\n        (do ((i 0 (+ i\
    \ 1))\n             (j 0 (+ j 1)))\n            ((< i j) (set! scores 0 (+ scores\
    \ 0))\n                      (set! guesses 0 (+ guesses 0))\n                \
    \      (set! i (+ i 1)))\n          ((< j i) (set! scores 0 (+ scores 0))\n  \
    \                    (set! guesses 0 (+ guesses 0))\n                      (set!\
    \ j (+ j 1)))\n          (set! i (+ i 1))\n          (set! j (+ j 1))\n      \
    \    (set! scores (+ scores (- guess (first guess)))\n                  guesses\
    \ (+ guesses (- game (first game))))\n          (set! scores (+ scores (first\
    \ guess))\n                  guesses (+ guesses (first game))))\n        (set!\
    \ scores (+ scores (first guess))\n                guesses (+ guesses (first game))))\n\
    \      (let ((scores (make-array (length guess) 'int))\n            (guesses (make-array\
    \ (length game) 'int)))\n        (do ((i 0 (+ i 1))\n             (j 0 (+ j 1)))\n\
    \            ((< i j) (set! scores 0 (+ scores 0))", "  (if (= (length game) (length\
    \ guess))\n      (let ((scores (make-array (length game) initial-element 0)))\n\
    \        (do ((i 0 (+ i 1)))\n            ((< i length) (return-from compare '()))\n\
    \            (let ((score (car game)))\n              (set! scores\n         \
    \           (+ score\n                      (if (= (first guess) score)\n    \
    \                      0\n                          (abs (- guess (first guess))))))\n\
    \              (set! game (rest game))\n              (set! i (+ i 1))))\n   \
    \     scores))))\n", "  (if (null? game)\n      (list guess)\n      (let ([score\
    \ (car game)]\n            [guess (car guess)]\n            [result (if (= score\
    \ guess) 0 \n                        (abs (- guess score)))])\n        (cons result\
    \ (compare rest (cdr guess)))))) ; recurse on rest of game\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThanks for the answer! I understand that my code was a bit too\
    \ complicated and that there are better ways to do it, but I wanted to understand\
    \ how recursion works and how it could be applied here. Thanks again!\n<|/ c |>\n\
    <| c |>\nI added a comment to my answer explaining how it works. I hope it helps.\n\
    <|/ c |>\n<| a dscore=1 |>\nThe other answers here are great, but I wanted to\
    \ add my own solution, which is to just use recursion to solve the problem and\
    \ to keep it simple.\n<code>", "  (if (null? game)\n      (list guess)\n     \
    \ (let ((diff (- guess (car game))))\n        (if (= diff 0)\n            (list\
    \ guess)\n            (cons diff (compare (cdr game) guess)))))\n", "  (if (=\
    \ (length game) (length guess))\n      (map (lambda (game-guess index)\n     \
    \       (if (= (game-guess game) guess)\n                0\n                (abs\
    \ (game-guess game) guess)))\n          game\n          guess)\n      (map (lambda\
    \ (game-guess index)\n            (if (= (game-guess game) guess)\n          \
    \      0\n                (abs (game-guess game) guess)))\n          game\n  \
    \        (sub1 guess))))\n", "  (let loop ((game-length game) (guess-length guess)\
    \ (game-index 0) (guess-index 0) (game-score 0) (guess-score 0))\n    (if (< guess-index\
    \ guess-length)\n        (let ((game-element (list-ref game game-index)))\n  \
    \        (if (= game-element guess-element)\n              (loop (+ game-length\
    \ 1) (+ guess-index 1) (+ game-index 1) (+ guess-index 1) (+ game-score 1) (+\
    \ guess-score 1))\n              (loop (+ game-length 1) (+ guess-index 1) (+\
    \ game-index 1) (+ guess-index 1) (+ game-score 1) (+ guess-score 0))))\n    \
    \  (loop (+ game-length 1) (+ guess-index 1) (+ game-index 1) (+ guess-index 1)\
    \ (+ game-score 0) (+ guess-score 0)))))\n", "  (if (null? game)\n      (list\
    \ guess)\n      (let ((diff (- guess (car game))))\n        (if (= diff 0)\n \
    \           (list guess)\n            (cons diff (compare (cdr game) guess))))))\
    \ ; <-- HERE\n</code>\n<|/ a tags=racket,scheme |>\n<| c |>\nI really appreciate\
    \ your help! I really appreciate you taking the time to explain it so thoroughly.\
    \ I really appreciate you taking the time to explain it so thoroughly. I really\
    \ appreciate you taking the time to explain it so thoroughly. I really appreciate\
    \ you taking the time to explain it so thoroughly. I really appreciate you taking\
    \ the time to explain it so thoroughly. I really appreciate you taking the time\
    \ to explain it so thoroughly. I really appreciate you taking the time to explain\
    \ it so thoroughly. I really appreciate you taking the time to explain it so thoroughly.\
    \ I really appreciate you taking the time to explain it so thoroughly. I really\
    \ appreciate you taking the time to explain it so thoroughly. I really appreciate\
    \ you taking the time to explain it so thoroughly. I really appreciate you taking\
    \ the time to explain it so thoroughly. I really appreciate you taking the time\
    \ to explain it so thoroughly. I really appreciate you taking the time to explain\
    \ it so thoroughly. I really appreciate you taking the time to explain it so thoroughly.\
    \ I really appreciate you taking the time to explain it so thoroughly. I really\
    \ appreciate you taking the time to explain it so thoroughly. I really appreciate\
    \ you taking the time to explain it so thoroughly. I really appreciate you taking\
    \ the time to explain it so thoroughly. I really appreciate you taking the time\
    \ to explain it so thoroughly. I really appreciate you taking the time to explain\
    \ it so thoroughly. I really appreciate you taking the time to explain it so thoroughly.\
    \ I really appreciate you taking the time to explain it so thoroughly. I really\
    \ appreciate you taking the time to explain it so thoroughly. I really appreciate\
    \ you taking the time to explain it so thoroughly. I really appreciate you taking\
    \ the time to explain it so thoroughly. I really appreciate you taking the time\
    \ to explain it so thoroughly", "  (if (= (length game) (length guess))\n    \
    \  (let ((score (car game))\n            (guess (car guess)))\n        (if (=\
    \ guess score)\n            (list 0 0)\n            (list (abs (- guess score))\n\
    \                  (abs (- score guess))))))\n</code>\n<|/ a dscore=1 |>\n<| c\
    \ |>\nThank you for your answer. I tried your solution and it works perfectly.\
    \ I will try to understand it more and try to understand your solution. Thank\
    \ you very much!\n<|/ c |>\n<| c |>\nI added some comments to my answer, hopefully\
    \ that helps.\n<|/ c |>\n<| c |>\nThank you very much! I understand it much better\
    \ now. I will try to understand it more and try to understand your solution. Thank\
    \ you very much!\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  (let loop ((game-scores\
    \ (make-array (length game) 0))\n             (guess-scores (make-array (length\
    \ guess) 0))\n             (game-guesses (make-array (length game) 0))\n     \
    \        (guess-guesses (make-array (length guess) 0)))\n    (if (= (length game)\
    \ (length guess))\n        (loop (cdr game-scores) (cdr guess-scores) (cdr game-guesses)\
    \ (cdr guess-guesses))\n        (loop (cons (car game) game-scores) (cdr guess-scores)\
    \ (cdr game-guesses) (cdr guess-guesses)))))\n", "  (let ((scores (make-array\
    \ (length game) 'int))\n        (guesses (make-array (length guess) 'int)))\n\
    \    (loop for i from 0 to (length game)\n          for j from 0 to (length guess)\n\
    \          when (= (array-ref game i) j)\n          do (set! scores[i] 0)\n  \
    \            (set! guesses[j] 0))\n    (loop for i from 0 to (length game)\n \
    \         for j from 0 to (length guess)\n          when (= (array-ref guess j)\
    \ i)\n          do (set! scores[i] 0)\n              (set! guesses[j] 0))\n  \
    \  (loop for i from 0 to (length game)\n          for j from 0 to (length guess)\n\
    \          when (= (array-ref guess j) i)\n          do (set! scores[i] 0)\n \
    \             (set! guesses[j] 0))\n    (loop for i from 0 to (length game)\n\
    \          for j from 0 to (length guess)\n          when (= (array-ref game i)\
    \ j)\n          do (set! scores[i] 0)\n              (set! guesses[j] 0))\n  \
    \  (loop for i from 0 to (length game)\n          for j from 0 to (length guess)\n\
    \          when (= (array-ref game i) j)\n          do (set! scores[i] 0)\n  \
    \            (set! guesses[j] 0))\n    (loop for i from 0 to (length game)\n \
    \         for j from 0 to (length guess)\n          when (= (array-ref guess j)\
    \ i)\n          do (set! scores[i] 0)\n              (set! guesses[j] 0))\n  \
    \  (loop for i from 0 to (length game)\n          for j from 0 to (length guess)\n\
    \          when (= (array-ref guess j) i)\n          do (set! scores[i] 0)\n \
    \             (set! guesses[j] 0))\n    (loop for i from 0 to (length game)\n\
    \          for j from 0 to (length guess)\n          when (= (array-ref game i)\
    \ j)\n          do (set! scores[i] 0)\n              (set! guesses[j] 0))\n  \
    \  (loop for i from 0 to (length game)\n          for j from 0 to (length guess)\n\
    \          when (= (array-ref guess j) i)\n          do (set! scores[i] 0)\n \
    \             (set! guesses[j] 0))\n    (loop for i from 0 to (length game)",
  "  (if (= (length game) (length guess))\n      (map + (map - guess game))\n    \
    \  (map - (map - guess game) (map - game guess))))\n", "  (let ((scores (make-array\
    \ (length game) initial-element 0)))\n    (do ((i 0 (+ i 1))\n         (j 0 (+\
    \ j 1)))\n        ((< i length) (return-from compare '()))\n      (let ((score\
    \ (car game)))\n        (cond\n          ((< j length) (return-from compare '()))\n\
    \          ((= j 0) (set! scores (set! scores (set! score (+ score guess)) i))))\n\
    \      (cond\n        ((< j length) (set! scores (set! scores (set! score (- score\
    \ guess)) i)))))))\n", "  (if (null? game)\n      (if (null? guess)\n        \
    \  (list 0)\n          (list 0))\n      (let ((g (car guess))\n            (s\
    \ (car game)))\n        (if (= g s)\n            (list 0)\n            (list (abs\
    \ (- g s)))))))\n", "  (let ((score (car game))\n        (guess (cdr game)))\n\
    \    (if (= guess score)\n        0\n        (abs (- guess score)))))\n", "  (if\
    \ (= (length game) (length guess))\n      (let ((diff (make-array (length guess)\
    \ 'int)))\n        (do ((i 0 (+ i 1))\n             (j (+ i 1))\n            \
    \ (diff diff))\n            ((< i j) (set! diff (make-array (length guess) 'int)))\n\
    \          (let ((diff (make-array (length guess) 'int)))\n            (do ((i\
    \ 0 (+ i 1))\n                 (j (+ i 1))\n                 (diff diff))\n  \
    \            ((< i j) (set! diff (make-array (length guess) 'int)))\n        \
    \      (let ((diff (make-array (length guess) 'int)))\n                (do ((i\
    \ 0 (+ i 1))\n                     (j (+ i 1))\n                     (diff diff))\n\
    \                  ((< i j) (set! diff (make-array (length guess) 'int)))\n  \
    \                (let ((diff (make-array (length guess) 'int)))\n            \
    \        (do ((i 0 (+ i 1))\n                         (j (+ i 1))\n          \
    \               (diff diff))\n                      ((< i j) (set! diff (make-array\
    \ (length guess) 'int)))\n                      (let ((diff (make-array (length\
    \ guess) 'int)))\n                        (do ((i 0 (+ i 1))\n               \
    \              (j (+ i 1))\n                             (diff diff))\n      \
    \                    ((< i j) (set! diff (make-array (length guess) 'int)))\n\
    \                          (let ((diff (make-array (length guess) 'int)))\n  \
    \                          (do ((i 0 (+ i 1))\n                              \
    \   (j (+ i 1))\n                                 (diff diff))\n             \
    \                 ((< i j) (set! diff (make-array (length guess) 'int)))\n   \
    \                           (let ((diff (make-array (length guess) 'int)))\n \
    \                               (do ((i 0 (+ i 1))\n                         \
    \              (j (+ i 1))\n                                       (diff diff))\n\
    \                                  ((< i j) (set! diff (make-array (length guess)\
    \ 'int)))\n                                  (let ((diff (make-array (length guess)\
    \ 'int)))\n                                    (do ((i 0 (+ i 1))\n          \
    \                                 (j (+ i 1))\n                              \
    \             (diff diff))\n                                      ((< i j) (set!\
    \ diff (make-array (length guess) 'int)))\n                                  \
    \    (let ((diff (make-array (length guess) 'int)))\n                        \
    \                (do ((i 0 (+ i ", "  (if (= (length game) (length guess))\n \
    \     (let ((diff (make-array (length guess) :initial-element 0)))\n        (do\
    \ ((i 0 (+ i 1))\n             (game-index (+ i 1))\n             (guess-index\
    \ (+ i 1)))\n          ((< i guess-index) (set! diff (+ diff (abs (- guess game))))\n\
    \            (set! diff (+ diff (abs (- game guess))))\n            (set! diff\
    \ (+ diff (abs (- guess game-index))))\n            (set! diff (+ diff (abs (-\
    \ game guess-index))))\n            (set! diff (+ diff (abs (- guess game-index))))\n\
    \            (set! diff (+ diff (abs (- game guess-index))))\n            (set!\
    \ diff (+ diff (abs (- guess game-index))))\n            (set! diff (+ diff (abs\
    \ (- game guess-index))))\n            (set! diff (+ diff (abs (- guess game-index))))\n\
    \            (set! diff (+ diff (abs (- game guess-index))))\n            (set!\
    \ diff (+ diff (abs (- guess game-index))))\n            (set! diff (+ diff (abs\
    \ (- game guess-index))))\n            (set! diff (+ diff (abs (- guess game-index))))\n\
    \            (set! diff (+ diff (abs (- guess game-index))))\n            (set!\
    \ diff (+ diff (abs (- guess game-index))))\n            (set! diff (+ diff (abs\
    \ (- guess game-index))))\n            (set! diff (+ diff (abs (- guess game-index))))\n\
    \            (set! diff (+ diff (abs (- guess game-index))))\n            (set!\
    \ diff (+ diff (abs (- guess game-index))))\n            (set! diff (+ diff (abs\
    \ (- guess game-index))))\n            (set! diff (+ diff (abs (- guess game-index))))\n\
    \            (set! diff (+ diff (abs (- guess game-index))))\n            (set!\
    \ diff (+ diff (abs (- guess game-index))))\n            (set! diff (+ diff (abs\
    \ (- guess game-index))))\n            (set! diff (+ diff (abs (- guess game-index))))\n\
    \            (set! diff (+ diff (abs (- guess game-index))))\n            (set!\
    \ diff (+ diff (abs (- guess ", "  (if (= (length game) (length guess))\n    \
    \  (let ((diff (make-array (length guess) initial-element 0)))\n        (do ((i\
    \ 0 (+ i 1))\n             (j 0 (+ j 1)))\n            ((< i j) (set! diff (+\
    \ diff (abs (- (car game) (car guess))))))\n          (set! diff (+ diff (abs\
    \ (- (car guess) (car game)))))\n          (set! diff (+ diff (abs (- (car game)\
    \ (car guess))))))\n      (let ((diff (make-array (length guess) initial-element\
    \ 0)))\n        (do ((i 0 (+ i 1))\n             (j 0 (+ j 1)))\n            ((<\
    \ i j) (set! diff (+ diff (abs (- (car guess) (car game)))))\n          (set!\
    \ diff (+ diff (abs (- (car game) (car guess))))))\n          (set! diff (+ diff\
    \ (abs (- (car guess) (car game)))))\n          (set! diff (+ diff (abs (- (car\
    \ game) (car guess))))))\n      (let ((diff (make-array (length guess) initial-element\
    \ 0)))\n        (do ((i 0 (+ i 1))\n             (j 0 (+ j 1)))\n            ((<\
    \ i j) (set! diff (+ diff (abs (- (car guess) (car game)))))\n          (set!\
    \ diff (+ diff (abs (- (car game) (car guess))))))\n          (set! diff (+ diff\
    \ (abs (- (car guess) (car game)))))\n          (set! diff (+ diff (abs (- (car\
    \ game) (car guess))))))\n      (let ((diff (make-array (length guess) initial-element\
    \ 0)))\n        (do ((i 0 (+ i 1))\n             (j 0 (+ j 1)))\n            ((<\
    \ i j) (set! diff (+ diff (abs (- (car guess) (car game)))))\n          (set!\
    \ diff (+ diff (abs (- (car game) (car guess))))))\n          (set! diff (+ diff\
    \ (abs (- (car guess) (car game)))))\n          (set! diff (+ diff (abs (- (car\
    \ game) (car guess))))))\n      (let ((diff (make-array (length guess) initial-element\
    \ 0)))\n        (do ((i 0 (+ ", "  (define (compare game guess i)\n    (cond\n\
    \      [(= i 0) 0]\n      [(= i #(length game)) (abs (first guess) (first game))]\n\
    \      [(= i #(length game)) (abs (first guess) (first game))]\n      [else (if\
    \ (= (first guess) (first game))\n                (compare game (sub1 guess) (sub1\
    \ game) (sub1 i))\n                (compare game (sub1 guess) (sub1 game) (sub1\
    \ i)))]))\n  (compare game guess 0))\n", "  (if (= (length game) (length guess))\n\
    \      (map #(if (= (first game) (first %)) (second %) (abs (first %) (- (second\
    \ %))))\n           (zip game guess))\n      (map #(if (= (first game) (first\
    \ %)) (second %) (abs (first %) (second %))))\n           (zip game guess))))\n",
  "  (if (null? game)\n      (list guess)\n      (let ((diff (- guess (car game))))\n\
    \        (if (= diff 0)\n            (list guess)\n            (cons diff (compare\
    \ (cdr game) guess)))))\n", "  (if (= (length game) (length guess))\n      (let\
    \ ((diff (make-array (length guess) initial-element 0)))\n        (do ((i 0 (+\
    \ i 1))\n             (j (+ i 1))\n             (diff diff))\n            ((<\
    \ i j) (set! diff (make-array (length guess) initial-element 0)))\n          \
    \  (set! diff (+ (array-ref diff i) array-ref diff j))\n            (set! diff\
    \ (abs (- diff (array-ref game i))))\n            (set! diff (if (= (array-ref\
    \ guess i) array-ref game j) 0 diff))\n            (set! diff (if (= (array-ref\
    \ guess i) array-ref game j) diff 0)))\n        diff)))\n", "  (if (= (length\
    \ game) (length guess))\n      (let ((diff (make-array (length guess) 'int)))\n\
    \        (do ((i 0 (+ i 1))\n             (j (+ i 1))\n             (diff (make-array\
    \ (length guess) 'int)))\n          ((< i j) (set! diff (make-array (length guess)\
    \ 'int))\n            (set! diff (- diff (+ i j))))\n          (set! diff (- diff\
    \ (- i j)))\n          (set! diff (- diff (- i j)))\n          (set! diff (- diff\
    \ (- i j)))\n          (set! diff (- diff (- i j)))\n          (set! diff (- diff\
    \ (- i j)))\n          (set! diff (- diff (- i j)))\n          (set! diff (- diff\
    \ (- i j)))\n          (set! diff (- diff (- i j)))\n          (set! diff (- diff\
    \ (- i j)))\n          (set! diff (- diff (- i j)))\n          (set! diff (- diff\
    \ (- i j)))\n          (set! diff (- diff (- i j)))\n          (set! diff (- diff\
    \ (- i j)))\n          (set! diff (- diff (- i j)))\n          (set! diff (- diff\
    \ (- i j)))\n          (set! diff (- diff (- i j)))\n          (set! diff (- diff\
    \ (- i j)))\n          (set! diff (- diff (- i j)))\n          (set! diff (- diff\
    \ (- i j)))\n          (set! diff (- diff (- i j)))\n          (set! diff (- diff\
    \ (- i j)))\n          (set! diff (- diff (- i j)))\n          (set! diff (- diff\
    \ (- i j)))\n          (set! diff (- diff (- i j)))\n          (set! diff (- diff\
    \ (- i j)))\n          (set! diff (- diff (- i j)))\n          (set! diff (- diff\
    \ (- i j)))\n          (set! diff (- diff (- i j)))\n          (set! diff (- diff\
    \ (- i j)))\n          (set! diff (- diff (- i j)))\n          (set", "  (if (=\
    \ (length game) (length guess))\n      (let ((diff (make-array (length guess)\
    \ initial-element 0)))\n        (do ((i 0 (+ i 1))\n             (game (subseq\
    \ game 0 i))\n             (guess (subseq guess 0 i))\n             (diff (subseq\
    \ diff 0 i)))\n          ((< i length) (set! diff (make-array (length guess) initial-element\
    \ 0)))\n          ((= i (length game))\n           (do ((j 0 (+ j 1))\n      \
    \          (diff (subseq diff 0 j))\n                (game (subseq game 0 j))\n\
    \                (guess (subseq guess 0 j)))\n              ((< j length) (set!\
    \ diff (make-array (length guess) initial-element 0)))\n              ((= j length)\
    \ (set! diff (make-array (length guess) initial-element 0)))\n              ((=\
    \ (memref game j) (memref guess i))\n               (set! diff (subseq diff 0\
    \ j)))\n              ((< j length) (set! diff (make-array (length guess) initial-element\
    \ 0)))\n              ((< i length) (set! diff (make-array (length guess) initial-element\
    \ 0)))\n              ((< j length) (set! diff (make-array (length guess) initial-element\
    \ 0)))\n              ((< i length) (set! diff (make-array (length guess) initial-element\
    \ 0)))\n              ((< j length) (set! diff (make-array (length guess) initial-element\
    \ 0)))\n              ((< i length) (set! diff (make-array (length guess) initial-element\
    \ 0)))\n              ((< j length) (set! diff (make-array (length guess) initial-element\
    \ 0)))\n              ((< i length) (set! diff (make-array (length guess) initial-element\
    \ 0)))\n              ((< j length) (set! diff (make-array (length guess) initial-element\
    \ 0)))\n              ((< i length) (set! diff (make-array (length guess) initial-element\
    \ 0)))\n              ((< j length) (set! diff (make-array (length guess) initial-element\
    \ 0)))\n              ((< i length) (set! diff (make-array (length guess) initial-element\
    \ 0)))\n              ((< j length) (set! diff (make-array (length guess) initial-element\
    \ 0)))\n              ((< i length) (set! diff (make-array (length guess) initial-element\
    \ 0)))\n              ((< j length) (set! diff (make-array (length guess", " \
    \ (if (= (length game) (length guess))\n      (let ((score (car game))\n     \
    \       (guess-score (car guess)))\n        (if (= guess-score score)\n      \
    \      (list 0 0)\n            (list (abs (- guess-score score))\n           \
    \       (abs (- score guess-score)))))\n      (let ((score (car game))\n     \
    \       (guess-score (car guess)))\n        (if (= guess-score score)\n      \
    \      (list 0 0)\n            (list (abs (- guess-score score))\n           \
    \       (abs (- score guess-score)))))\n      (let ((score (car game))\n     \
    \       (guess-score (car guess)))\n        (if (= guess-score score)\n      \
    \      (list 0 0)\n            (list (abs (- guess-score score))\n           \
    \       (abs (- score guess-score)))))\n      (let ((score (car game))\n     \
    \       (guess-score (car guess)))\n        (if (= guess-score score)\n      \
    \      (list 0 0)\n            (list (abs (- guess-score score))\n           \
    \       (abs (- score guess-score)))))\n      (let ((score (car game))\n     \
    \       (guess-score (car guess)))\n        (if (= guess-score score)\n      \
    \      (list 0 0)\n            (list (abs (- guess-score score))\n           \
    \       (abs (- score guess-score)))))\n      (let ((score (car game))\n     \
    \       (guess-score (car guess)))\n        (if (= guess-score score)\n      \
    \      (list 0 0)\n            (list (abs (- guess-score score))\n           \
    \       (abs (- score guess-score)))))\n      (let ((score (car game))\n     \
    \       (guess-score (car guess)))\n        (if (= guess-score score)\n      \
    \      (list 0 0)\n            (list (abs (- guess-score score))\n           \
    \       (abs (- score guess-score)))))\n      (let ((score (car game))\n     \
    \       (guess-score (car guess)))\n        (if (= guess-score score)\n      \
    \      (list 0 0)\n            (list (abs (- guess-score score))\n           \
    \       (abs (- score guess-score)))))\n      (let ((score (car game))\n     \
    \       (guess-score (car guess)))\n        (if (= guess-score score)\n      \
    \      (list 0 0)\n            (list (abs (- guess-score score))\n           \
    \       (abs (- score guess-score", "  (if (= (length game) (length guess))\n\
    \      (let ((diff (make-array (length guess) initial-element 0)))\n        (do\
    \ ((i 0 (+ i 1))\n             (j 0 (+ j 1)))\n            ((< i j) (set! diff\
    \ (+ diff (abs (- guess game)))))\n          (set! diff (+ diff (abs (- guess\
    \ game)))))\n        diff)\n      (let ((diff (make-array (length guess) initial-element\
    \ 0)))\n        (do ((i 0 (+ i 1))\n             (j 0 (+ j 1)))\n            ((<\
    \ i j) (set! diff (+ diff (abs (- guess game)))))\n          (set! diff (+ diff\
    \ (abs (- guess game)))))\n        diff)))\n", "  (let ((scores (make-array (length\
    \ game) 'int))\n        (guesses (make-array (length guess) 'int)))\n    (for\
    \ ((i 0) (j 0))\n      (when (< i j)\n        (set! scores[i] 0)\n        (set!\
    \ guesses[i] 0))\n      (when (= i j)\n        (set! scores[i] 0)\n        (set!\
    \ guesses[i] 0))\n      (when (= i j)\n        (set! scores[i] 0))\n      (when\
    \ (= i j)\n        (set! scores[i] 0))\n      (when (= i j)\n        (set! scores[i]\
    \ 0))\n      (when (= i j)\n        (set! scores[i] 0))\n      (when (= i j)\n\
    \        (set! scores[i] 0))\n      (when (= i j)\n        (set! scores[i] 0))\n\
    \      (when (= i j)\n        (set! scores[i] 0))\n      (when (= i j)\n     \
    \   (set! scores[i] 0))\n      (when (= i j)\n        (set! scores[i] 0))\n  \
    \    (when (= i j)\n        (set! scores[i] 0))\n      (when (= i j)\n       \
    \ (set! scores[i] 0))\n      (when (= i j)\n        (set! scores[i] 0))\n    \
    \  (when (= i j)\n        (set! scores[i] 0))\n      (when (= i j)\n        (set!\
    \ scores[i] 0))\n      (when (= i j)\n        (set! scores[i] 0))\n      (when\
    \ (= i j)\n        (set! scores[i] 0))\n      (when (= i j)\n        (set! scores[i]\
    \ 0))\n      (when (= i j)\n        (set! scores[i] 0))\n      (when (= i j)\n\
    \        (set! scores[i] 0))\n      (when (= i j)\n        (set! scores[i] 0))\n\
    \      (when (= i j)\n        (set! scores[i] 0))\n      (when (= i j)\n     \
    \   (set! scores[i] 0))\n      (when (= i j)\n        (set! scores[i] 0))\n  \
    \    (when (= i j)\n        (set! scores[i] 0))\n      (when (= i j)\n       \
    \ (set! scores[i] 0))\n      (when (= i j)\n        (set! scores[i] 0))\n    \
    \  (when (= i j)\n        (set! scores[i] 0))\n      (when (= i j)\n        (set!\
    \ scores[i] 0))\n      (when (= i j)\n        (set! scores[i] 0))\n      (when\
    \ (= i j)\n        (set! scores[i] 0))\n      (when (= i j)\n        (set! ",
  "  (define (compare game guess)\n    (if (null? game)\n        guess\n        (if\
    \ (null? guess)\n            game\n            (if (> (car game) (car guess))\n\
    \                (compare (cdr game) (cdr guess))\n                (compare (cdr\
    \ game) (cdr guess))\n            )\n        )\n    )\n  )\n  (compare game guess)\n\
    )\n", "  (if (null? game)\n      '()\n      (let ((score (car game))\n       \
    \     (guess (car guess))\n            (game1 (cdr game))\n            (guess1\
    \ (cdr guess)))\n        (if (= guess guess1)\n            (if (= score score)\n\
    \                (list 0)\n                (list abs (- guess score)))\n     \
    \       (if (= score 0)\n                (list 0)\n                (list abs (-\
    \ guess score)))))\n      (if (= guess game1)\n          '()\n          (if (=\
    \ score 0)\n              (list 0)\n              (list abs (- guess score)))))\n\
    \  (if (null? guess)\n      '()\n      (let ((score (car game))\n            (guess\
    \ (car guess))\n            (game1 (cdr game))\n            (guess1 (cdr guess)))\n\
    \        (if (= guess guess1)\n            (if (= score score)\n             \
    \   (list 0)\n                (list abs (- guess score)))\n            (if (=\
    \ score 0)\n                (list 0)\n                (list abs (- guess score)))))\n\
    \      (if (= guess game1)\n          '()\n          (if (= score 0)\n       \
    \       (list 0)\n              (list abs (- guess score)))))\n  (if (null? game)\n\
    \      '()\n      (let ((score (car game))\n            (guess (car guess))\n\
    \            (game1 (cdr game))\n            (guess1 (cdr guess)))\n        (if\
    \ (= guess guess1)\n            (if (= score score)\n                (list 0)\n\
    \                (list abs (- guess score)))\n            (if (= score 0)\n  \
    \              (list 0)\n                (list abs (- guess score)))))\n     \
    \ (if (= guess game1)\n          '()\n          (if (= score 0)\n            \
    \  (list 0)\n              (list abs (- guess score)))))\n  (if (null? guess)\n\
    \      '()\n      (let ((score (car game))\n            (guess (car guess))\n\
    \            (game1 (cdr game))\n            (guess1 (cdr guess)))\n        (if\
    \ (= guess guess1)\n            (if (= score score)\n                (list 0)\n\
    \                (list abs (- guess score)))\n            (if (= score 0)\n  \
    \              (list 0)\n                (list abs (- guess score)))))\n     \
    \ (if (= guess game1)\n          '()\n          (if (= score 0)\n            \
    \  (list 0)\n              (list abs (- guess score)))))\n  (if (null? game)\n\
    \      '()\n      (let ((score (car game))\n            (guess (car ", "  (if\
    \ (= (length game) (length guess))\n      (let ((diff (make-array (length guess)\
    \ 'int)))\n        (do ((i 0 (+ i 1))\n             (g (+ i 1))\n            \
    \ (gs (+ i 1)))\n          ((< i guess) (set! diff (- diff guess))\n         \
    \           (set! diff (+ diff (- g gs))))\n          (set! diff (+ diff (- g\
    \ gs))))\n      (let ((diff (make-array (length guess) 'int)))\n        (do ((i\
    \ 0 (+ i 1))\n             (g (+ i 1))\n             (gs (+ i 1)))\n         \
    \ ((< i guess) (set! diff (- diff guess))\n                    (set! diff (+ diff\
    \ (- g gs))))\n          (set! diff (+ diff (- g gs))))\n      (let ((diff (make-array\
    \ (length guess) 'int)))\n        (do ((i 0 (+ i 1))\n             (g (+ i 1))\n\
    \             (gs (+ i 1)))\n          ((< i guess) (set! diff (- diff guess))\n\
    \                    (set! diff (+ diff (- g gs))))\n          (set! diff (+ diff\
    \ (- g gs))))\n      (let ((diff (make-array (length guess) 'int)))\n        (do\
    \ ((i 0 (+ i 1))\n             (g (+ i 1))\n             (gs (+ i 1)))\n     \
    \     ((< i guess) (set! diff (- diff guess))\n                    (set! diff\
    \ (+ diff (- g gs))))\n          (set! diff (+ diff (- g gs))))\n      (let ((diff\
    \ (make-array (length guess) 'int)))\n        (do ((i 0 (+ i 1))\n           \
    \  (g (+ i 1))\n             (gs (+ i 1)))\n          ((< i guess) (set! diff\
    \ (- diff guess))\n                    (set! diff (+ diff (- g gs))))\n      \
    \    (set! diff (+ diff (- g gs))))\n      (let ((diff (make-array (length guess)\
    \ 'int)))\n        (do ((i 0 (+ i 1))\n             (g (+ i 1))\n            \
    \ (gs (+ i 1)))\n          ((< i guess) (set! diff (- diff guess))\n         \
    \           (set! diff (+ diff (- g gs))))\n          (set! diff (+ diff (- g\
    \ gs))))\n      (let ((", "  (if (= (length game) (length guess))\n      (let\
    \ ((diff (make-array (length guess) initial-element 0)))\n        (do ((i 0 (+\
    \ i 1))\n             (j 0 (+ j 1)))\n            ((< i j) (set! diff (+ diff\
    \ (abs (- (car guess) (car game)))))\n               (set! diff (+ diff (abs (-\
    \ (car game) (car guess))))))\n        (set! diff (+ diff (abs (- (car guess)\
    \ (car game))))))\n      (let ((diff (make-array (length guess) initial-element\
    \ 0)))\n        (do ((i 0 (+ i 1))\n             (j 0 (+ j 1)))\n            ((<\
    \ i j) (set! diff (+ diff (abs (- (car guess) (car game)))))\n               (set!\
    \ diff (+ diff (abs (- (car game) (car guess))))))\n        (set! diff (+ diff\
    \ (abs (- (car guess) (car game))))))\n      (let ((diff (make-array (length guess)\
    \ initial-element 0)))\n        (do ((i 0 (+ i 1))\n             (j 0 (+ j 1)))\n\
    \            ((< i j) (set! diff (+ diff (abs (- (car guess) (car game)))))\n\
    \               (set! diff (+ diff (abs (- (car game) (car guess))))))\n     \
    \   (set! diff (+ diff (abs (- (car guess) (car game))))))\n      (let ((diff\
    \ (make-array (length guess) initial-element 0)))\n        (do ((i 0 (+ i 1))\n\
    \             (j 0 (+ j 1)))\n            ((< i j) (set! diff (+ diff (abs (-\
    \ (car guess) (car game)))))\n               (set! diff (+ diff (abs (- (car game)\
    \ (car guess))))))\n        (set! diff (+ diff (abs (- (car guess) (car game))))))\n\
    \      (let ((diff (make-array (length guess) initial-element 0)))\n        (do\
    \ ((i 0 (+ i 1))\n             (j 0 (+ j 1)))\n            ((< i j) (set! diff\
    \ (+ diff (abs (- (car guess) (car game)))))\n               (set! diff (+ diff\
    \ (abs (- (car game) (car guess))))))\n        (set! diff (+ diff (abs (- (c",
  "  (if (null? game)\n      '()\n      (let ((score (car game))\n            (guess\
    \ (car guess)))\n        (if (= guess score)\n            (list 0)\n         \
    \   (list (abs (- guess score)))))\n        (compare (cdr game) guess)\n     \
    \ )\n    )\n  )\n", "  (if (= (length game) (length guess))\n      (let ((diff\
    \ (make-array (length guess) 'int)))\n        (do ((i 0 (+ i 1))\n           \
    \  (game (sub1 game))\n             (guess (sub1 guess)))\n          ((< i guess)\
    \ (set! diff (vector-set! diff i (abs (- guess game))))\n          ((> i guess)\
    \ (set! diff (vector-set! diff i (- diff guess))))\n          (set! diff (vector-set!\
    \ diff i (+ diff game))))\n        diff)\n      (let ((diff (make-array (length\
    \ guess) 'int)))\n        (do ((i 0 (+ i 1))\n             (game (sub1 game))\n\
    \             (guess (sub1 guess)))\n          ((< i guess) (set! diff (vector-set!\
    \ diff i (abs (- guess game))))\n          ((> i guess) (set! diff (vector-set!\
    \ diff i (- diff guess))))\n          (set! diff (vector-set! diff i (+ diff game))))\n\
    \        diff)))\n", "  (if (= (length game) (length guess))\n      (let ((diff\
    \ (make-array (length guess) :initial-element 0)))\n        (do ((i 0 (+ i 1))\n\
    \             (j (+ i 1))\n             (diff diff))\n          ((< i j) (set!\
    \ diff (- diff (+ i j))))\n          (set! diff (+ diff (- guess game)))))\n \
    \     (let ((diff (make-array (length guess) :initial-element 0)))\n        (do\
    \ ((i 0 (+ i 1))\n             (j (+ i 1))\n             (diff diff))\n      \
    \    ((< i j) (set! diff (- diff (+ i j))))\n          (set! diff (+ diff (- guess\
    \ game)))))\n  diff))\n", "  (if (= (length game) (length guess))\n      (let\
    \ ((diff (make-array (length guess) :initial-element 0)))\n        (do ((i 0 (+\
    \ i 1))\n             (game-index (+ i 1))\n             (guess-index (+ i 1)))\n\
    \          ((< i guess-index) (set! diff (+ diff (abs (- (car game) (car guess))))))\n\
    \          ((< i game-index) (set! diff (+ diff (abs (- (car guess) (car game))))))\n\
    \          (set! diff (+ diff (abs (- (car guess) (car game))))))))\n", "  (if\
    \ (= (length game) (length guess))\n      (let ((diff (make-array (length guess)\
    \ 'int)))\n        (do ((i 0 (+ i 1))\n             (game (sub1 game))\n     \
    \        (guess (sub1 guess)))\n          ((< i guess) \n           (set! diff\
    \ (sub1 diff))\n           (set! diff (- guess diff)))\n          ((< i game)\n\
    \           (set! diff (- diff game))\n           (set! diff (- diff guess)))\n\
    \          (set! diff (+ diff game))\n          (set! diff (+ diff guess))\n \
    \         (set! diff (- diff guess))\n          (set! diff (- diff game))\n  \
    \        (set! diff (- diff game))\n          (set! diff (- diff guess))\n   \
    \       (set! diff (- diff game))\n          (set! diff (- diff guess))\n    \
    \      (set! diff (- diff game))\n          (set! diff (- diff guess))\n     \
    \     (set! diff (- diff game))\n          (set! diff (- diff guess))\n      \
    \    (set! diff (- diff game))\n          (set! diff (- diff guess))\n       \
    \   (set! diff (- diff game))\n          (set! diff (- diff guess))\n        \
    \  (set! diff (- diff game))\n          (set! diff (- diff guess))\n         \
    \ (set! diff (- diff game))\n          (set! diff (- diff guess))\n          (set!\
    \ diff (- diff game))\n          (set! diff (- diff guess))\n          (set! diff\
    \ (- diff game))\n          (set! diff (- diff guess))\n          (set! diff (-\
    \ diff game))\n          (set! diff (- diff guess))\n          (set! diff (- diff\
    \ game))\n          (set! diff (- diff guess))\n          (set! diff (- diff game))\n\
    \          (set! diff (- diff guess))\n          (set! diff (- diff game))\n \
    \         (set! diff (- diff guess))\n          (set! diff (- diff game))\n  \
    \        (set! diff (- diff guess))\n          (set! diff (- diff game))\n   \
    \       (set! diff (- diff guess))\n          (set! diff (- diff game))", "  (define\
    \ (compare game guess)\n    (if (null? game)\n        (if (null? guess)\n    \
    \        0\n            (abs (first guess) (rest game)))\n        (if (equal?\
    \ (first game) (first guess))\n            (+ 1 (compare (rest game) (rest guess)))\n\
    \            (+ 1 (compare (rest game) guess))))\n  (compare game guess))\n",
  "  (if (= (length game) (length guess))\n      (let ((diff (make-array (length guess)\
    \ initial-element 0)))\n        (do ((i 0 (+ i 1))\n             (j 0 (+ j 1)))\n\
    \            ((or (= i j) (= i 0))\n             (set! diff (+ diff (abs (- guess\
    \ game))))\n             (set! diff (+ diff (abs (- game guess))))\n         \
    \    (set! diff (+ diff (abs (- guess game))))\n             (set! diff (+ diff\
    \ (abs (- game guess))))\n             (set! diff (+ diff (abs (- guess game))))\n\
    \             (set! diff (+ diff (abs (- game guess))))\n             (set! diff\
    \ (+ diff (abs (- guess game))))\n             (set! diff (+ diff (abs (- game\
    \ guess))))\n             (set! diff (+ diff (abs (- guess game))))\n        \
    \     (set! diff (+ diff (abs (- game guess))))\n             (set! diff (+ diff\
    \ (abs (- guess game))))\n             (set! diff (+ diff (abs (- game guess))))\n\
    \             (set! diff (+ diff (abs (- guess game))))\n             (set! diff\
    \ (+ diff (abs (- game guess))))\n             (set! diff (+ diff (abs (- guess\
    \ game))))\n             (set! diff (+ diff (abs (- game guess))))\n         \
    \    (set! diff (+ diff (abs (- guess game))))\n             (set! diff (+ diff\
    \ (abs (- game guess))))\n             (set! diff (+ diff (abs (- guess game))))\n\
    \             (set! diff (+ diff (abs (- game guess))))\n             (set! diff\
    \ (+ diff (abs (- guess game))))\n             (set! diff (+ diff (abs (- game\
    \ guess))))\n             (set! diff (+ diff (abs (- guess game))))\n        \
    \     (set! diff (+ diff (abs (- game guess))))\n             (set! diff (+ diff\
    \ (abs (- guess game))))\n             (set! diff (+ diff (abs (- game guess))))\n\
    \             (set! diff (+ diff (abs (- guess game))))\n             (set! diff\
    \ (+ diff (abs (- game guess))))\n             (set! diff (+ diff (abs (- guess\
    \ game))))\n             (set! diff (+ diff (abs (- game guess))))\n         \
    \    (set! diff (+ diff ", "  (if (= (length game) (length guess))\n      (let\
    \ ((diff (make-array (length guess) :initial-element 0)))\n        (do ((i 0 (+\
    \ i 1))\n             (g (+ i 1))\n             (gs (+ i 1)))\n          ((< i\
    \ length) (set! diff (make-array (length guess) :initial-element 0)))\n      \
    \    ((< g length) (set! diff (make-array (length guess) :initial-element 0)))\n\
    \          ((< gs length) (set! diff (make-array (length guess) :initial-element\
    \ 0)))\n          ((= g gs) (set! diff (make-array (length guess) :initial-element\
    \ 0)))\n          ((= g 0) (set! diff (make-array (length guess) :initial-element\
    \ 0)))\n          ((= gs 0) (set! diff (make-array (length guess) :initial-element\
    \ 0)))\n          ((= g g) (set! diff (make-array (length guess) :initial-element\
    \ 0)))\n          ((= g 0) (set! diff (make-array (length guess) :initial-element\
    \ 0)))\n          ((= gs 0) (set! diff (make-array (length guess) :initial-element\
    \ 0)))\n          ((= g gs) (set! diff (make-array (length guess) :initial-element\
    \ 0)))\n          ((= g 0) (set! diff (make-array (length guess) :initial-element\
    \ 0)))\n          ((= gs 0) (set! diff (make-array (length guess) :initial-element\
    \ 0)))\n          ((= g g) (set! diff (make-array (length guess) :initial-element\
    \ 0)))\n          ((= g 0) (set! diff (make-array (length guess) :initial-element\
    \ 0)))\n          ((= gs 0) (set! diff (make-array (length guess) :initial-element\
    \ 0)))\n          ((= g gs) (set! diff (make-array (length guess) :initial-element\
    \ 0)))\n          ((= g 0) (set! diff (make-array (length guess) :initial-element\
    \ 0)))\n          ((= gs 0) (set! diff (make-array (length guess) :initial-element\
    \ 0)))\n          ((= g g) (set! diff (make-array (length guess) :initial-element\
    \ 0)))\n          ((= g 0) (set! diff (make-array (length guess) :initial-element\
    \ 0)))\n          ((= gs 0) (set! diff (make-array (length guess) :initial-element\
    \ 0)))\n          ((= g gs) (set! diff ", "  (if (null? game)\n      (if (null?\
    \ guess)\n          (list 0)\n          (list 0))\n      (let ((score (car game))\n\
    \            (guess (car guess))\n            (diff (abs (- guess score))))\n\
    \        (if (= guess score)\n            (list 0)\n            (list (cons diff\
    \ diff))))))\n", "  (let loop ((game-scores game)\n             (guess-scores\
    \ guess))\n    (if (= (length game-scores) (length guess-scores))\n        (let\
    \ loop ((i 0)\n                   (game-score game-scores)\n                 \
    \  (guess-score guess-scores))\n          (if (= i 0)\n              (list game-score)\n\
    \              (let ((diff (- guess-score game-score)))\n                (if (<\
    \ diff 0)\n                    (loop (+ i 1)\n                           (cdr\
    \ game-scores)\n                           (car guess-scores))\n             \
    \       (loop (+ i 1)\n                           (cdr game-scores)\n        \
    \                   (car guess-scores)\n                           (cons diff\
    \ (cdr guess-scores))))))\n        (let loop ((i 0)\n                   (game-score\
    \ game-scores)\n                   (guess-score guess-scores)\n              \
    \     (game-guess game)\n                   (guess-guess guess))\n          (if\
    \ (= i 0)\n              (list game-score)\n              (let ((diff (- guess-score\
    \ game-score)))\n                (if (< diff 0)\n                    (loop (+\
    \ i 1)\n                           (cdr game-scores)\n                       \
    \    (car guess-scores)\n                           (car guess-guess)\n      \
    \                     (car game-guess))\n                    (loop (+ i 1)\n \
    \                          (cdr game-scores)\n                           (car\
    \ guess-scores)\n                           (car guess-guess)\n              \
    \             (car game-guess)\n                           (cons diff (cdr guess-scores)))))))))\n",
  "  (let loop ((game-scores game) (guess-scores guess) (game-guess 0) (guess-guess\
    \ 0))\n    (if (= (length game-scores) (length guess-scores))\n        (let ((game-score\
    \ (car game-scores))\n              (guess-score (car guess-scores)))\n      \
    \    (if (= game-score guess-score)\n              (loop (cdr game-scores) (cdr\
    \ guess-scores) (+ game-guess guess-guess) (+ guess-guess 1))\n              (loop\
    \ (cdr game-scores) (cdr guess-scores) (+ game-guess guess-guess) (+ guess-guess\
    \ 0)))))\n    (if (= (length game-scores) 0)\n        (loop (cdr game-scores)\
    \ guess-scores (+ game-guess 1) guess-guess))\n    (if (= (length guess-scores)\
    \ 0)\n        (loop (game-scores game) (cdr guess-scores) (+ game-guess 1) guess-guess))\n\
    \    (if (= game-guess guess-guess)\n        (loop (cdr game-scores) (cdr guess-scores)\
    \ (+ game-guess 1) guess-guess))\n    (if (< game-guess guess-guess)\n       \
    \ (loop (cdr game-scores) guess-scores (+ game-guess 0) guess-guess))))\n", " \
    \ (if (= (length game) (length guess))\n      (let ([scores (make-array (length\
    \ game) \n                               (lambda (x) (= x 0))\n              \
    \                 (vector game))])\n        (map (lambda (score)\n           \
    \    (let ([guess (vector-ref guess 0)])\n                 (if (= guess score)\n\
    \                     (vector-set! scores 0 0)\n                     (vector-set!\
    \ scores (+ score \n                                           (vector-ref scores\
    \ 0))))\n                 scores))\n        scores)\n      (let ([scores (make-array\
    \ (length guess) \n                               (lambda (x) (= x 0))\n     \
    \                          (vector guess))])\n        (map (lambda (score)\n \
    \              (let ([guess (vector-ref guess 0)])\n                 (if (= guess\
    \ score)\n                     (vector-set! scores 0 0)\n                    \
    \ (vector-set! scores (+ score \n                                           (vector-ref\
    \ scores 0))))\n                 scores))\n        scores))))\n", "  (if (null?\
    \ game)\n      (list guess)\n      (let ((diff (- guess (car game))))\n      \
    \  (if (= diff 0)\n            (list guess)\n            (cons diff (compare (cdr\
    \ game) guess)))))) ; <-- this line is what makes the difference\n", "  (if (null?\
    \ game)\n      (list guess)\n      (let ([score (car game)\n             guess\
    \ (car guess)])\n        (if (= score guess)\n            (list 0)\n         \
    \   (list (abs (- guess score)))))))\n", "  (if (= (length game) (length guess))\n\
    \      (let ((diff (make-array (length guess) initial-element 0)))\n        (do\
    \ ((i 0 (+ i 1))\n             (j 0 (+ j 1)))\n            ((< i j) (set! diff\
    \ (+ diff (abs (- (car game) (car guess))))))\n          (set! diff (+ diff (abs\
    \ (- (car guess) (car game)))))\n          (set! diff (+ diff (abs (- (car guess)\
    \ (car game)))))\n          (set! diff (+ diff (abs (- (car guess) (car game)))))\n\
    \          (set! diff (+ diff (abs (- (car guess) (car game)))))\n          (set!\
    \ diff (+ diff (abs (- (car guess) (car game)))))\n          (set! diff (+ diff\
    \ (abs (- (car guess) (car game)))))\n          (set! diff (+ diff (abs (- (car\
    \ guess) (car game)))))\n          (set! diff (+ diff (abs (- (car guess) (car\
    \ game)))))\n          (set! diff (+ diff (abs (- (car guess) (car game)))))\n\
    \          (set! diff (+ diff (abs (- (car guess) (car game)))))\n          (set!\
    \ diff (+ diff (abs (- (car guess) (car game)))))\n          (set! diff (+ diff\
    \ (abs (- (car guess) (car game)))))\n          (set! diff (+ diff (abs (- (car\
    \ guess) (car game)))))\n          (set! diff (+ diff (abs (- (car guess) (car\
    \ game)))))\n          (set! diff (+ diff (abs (- (car guess) (car game)))))\n\
    \          (set! diff (+ diff (abs (- (car guess) (car game)))))\n          (set!\
    \ diff (+ diff (abs (- (car guess) (car game)))))\n          (set! diff (+ diff\
    \ (abs (- (car guess) (car game)))))\n          (set! diff (+ diff (abs (- (car\
    \ guess) (car game)))))\n          (set! diff (+ diff (abs (- (car guess) (car\
    \ game)))))\n          (", "  (if (= (length game) (length guess))\n      (let\
    \ ((diff (make-array (length guess) initial-element 0)))\n        (do ((i 0 (+\
    \ i 1))\n             (j (+ i 1))\n             (diff (make-array (length guess)\
    \ initial-element 0)))\n            ((< i j) (set! diff (make-array (length guess)\
    \ initial-element 0)))\n            (set! diff (+ (array-ref diff i) array-ref\
    \ diff j))\n            (set! diff (abs (- diff (array-ref game i))))\n      \
    \      (set! diff (abs (- diff (array-ref guess j))))\n            (set! diff\
    \ (abs (- diff (array-ref game i))))\n            (set! diff (abs (- diff (array-ref\
    \ guess j))))\n            (set! diff (abs (- diff (array-ref game i))))\n   \
    \         (set! diff (abs (- diff (array-ref guess j))))\n            (set! diff\
    \ (abs (- diff (array-ref game i))))\n            (set! diff (abs (- diff (array-ref\
    \ guess j))))\n            (set! diff (abs (- diff (array-ref game i))))\n   \
    \         (set! diff (abs (- diff (array-ref guess j))))\n            (set! diff\
    \ (abs (- diff (array-ref game i))))\n            (set! diff (abs (- diff (array-ref\
    \ guess j))))\n            (set! diff (abs (- diff (array-ref game i))))\n   \
    \         (set! diff (abs (- diff (array-ref guess j))))\n            (set! diff\
    \ (abs (- diff (array-ref game i))))\n            (set! diff (abs (- diff (array-ref\
    \ guess j))))\n            (set! diff (abs (- diff (array-ref game i))))\n   \
    \         (set! diff (abs (- diff (array-ref guess j))))\n            (set! diff\
    \ (abs (- diff (array-ref game i))))\n            (set! diff (abs (- diff (array-ref\
    \ guess j))))\n            (set! diff (abs (- diff (array-ref game i))))\n   \
    \         (set! diff (abs (- diff (array-ref guess j))))\n            (set! diff\
    \ (abs (- diff (array-ref game i))))\n            (set! diff (abs (- diff (array-ref\
    \ guess j))))\n            (set! diff (abs (", "  (if (= (length game) (length\
    \ guess))\n      (let ((diff (make-array (length guess) 'int))\n            (index\
    \ (make-array (length guess) 'int)))\n        (do ((i 0 (+ i 1))\n           \
    \  (j 0 (+ j 1)))\n            ((< i j) (set! diff (make-array (length guess)\
    \ 'int)))\n          (set! index (make-array (length guess) 'int))\n         \
    \ (do ((a 0 (+ a 1))\n              (b (+ b 1)))\n            ((< a b) (set! index\
    \ (make-array (length guess) 'int)))\n          (set! diff (- guess game))\n \
    \         (set! index (+ index 1))\n          (set! diff (+ diff (- guess game)))\n\
    \          (set! index (+ index 1))\n          (set! diff (+ diff (- guess game)))\n\
    \          (set! index (+ index 1))\n          (set! diff (+ diff (- guess game)))\n\
    \          (set! index (+ index 1))\n          (set! diff (+ diff (- guess game)))\n\
    \          (set! index (+ index 1))\n          (set! diff (+ diff (- guess game)))\n\
    \          (set! index (+ index 1))\n          (set! diff (+ diff (- guess game)))\n\
    \          (set! index (+ index 1))\n          (set! diff (+ diff (- guess game)))\n\
    \          (set! index (+ index 1))\n          (set! diff (+ diff (- guess game)))\n\
    \          (set! index (+ index 1))\n          (set! diff (+ diff (- guess game)))\n\
    \          (set! index (+ index 1))\n          (set! diff (+ diff (- guess game)))\n\
    \          (set! index (+ index 1))\n          (set! diff (+ diff (- guess game)))\n\
    \          (set! index (+ index 1))\n          (set! diff (+ diff (- guess game)))\n\
    \          (set! index (+ index 1))\n          (set! diff (+ diff (- guess game)))\n\
    \          (set! index (+ index 1))\n          (set! diff (+ diff (- guess game)))\n\
    \          (set! index (+ index 1))\n          (set! diff (+ diff (- guess game)))\n\
    \          (set! index (+ index 1))\n          ", "  (let ([scores (sort (map\
    \ score game))\n         guesses (sort (map guess game))])\n    (if (= (length\
    \ scores) (length guesses))\n        (let ([score (first scores)\n           \
    \    guess (first guesses)])\n          (if (= guess score)\n              (list\
    \ 0 0)\n              (list abs (- guess score))))\n        (list 0 (- guess (first\
    \ scores)))))))\n", "  (if (= (length game) (length guess))\n      (let ((diff\
    \ (make-array (length guess) 'int)))\n        (do ((i 0 (+ i 1))\n           \
    \  (j 0 (+ j 1)))\n            ((< i j) (set! diff 0 (+ diff (- guess game))))\n\
    \            (set! diff (+ diff (- game (gethash (sub1 i) guess))))\n        \
    \  diff)\n      (let ((diff (make-array (length guess) 'int)))\n        (do ((i\
    \ 0 (+ i 1))\n             (j 0 (+ j 1)))\n            ((< i j) (set! diff 0 (+\
    \ diff (- guess game))))\n            (set! diff (+ diff (- game (gethash (sub1\
    \ i) guess))))\n          diff))))\n", "  (if (= (length game) (length guess))\n\
    \      (let ((diff (make-array (length game) initial-element 0)))\n        (do\
    \ ((i 0 (+ i 1))\n             (j 0 (+ j 1)))\n            ((< i j) (set! diff\
    \ (- diff (+ guess (car game)))))\n            (set! diff (- diff (+ score (car\
    \ game)))))\n        diff)\n      (let ((diff (make-array (length guess) initial-element\
    \ 0)))\n        (do ((i 0 (+ i 1))\n             (j 0 (+ j 1)))\n            ((<\
    \ i j) (set! diff (- diff (+ guess (car guess)))))\n            (set! diff (-\
    \ diff (+ score (car guess)))))\n        diff)))\n", "  (if (= (length game) (length\
    \ guess))\n      (let ((diff (make-array (length guess) 'int)))\n        (do ((i\
    \ 0 (+ i 1))\n             (j 0 (+ j 1)))\n            ((or (< i j) (< j i)) (set!\
    \ diff 0 (+ diff (- guess game)))\n                              (set! diff 0\
    \ (+ diff (- game guess))))\n          (set! diff (+ diff (- guess game)))))\n\
    \      (let ((diff (make-array (length guess) 'int)))\n        (do ((i 0 (+ i\
    \ 1))\n             (j 0 (+ j 1)))\n            ((or (< i j) (< j i)) (set! diff\
    \ 0 (+ diff (- guess game)))\n                              (set! diff 0 (+ diff\
    \ (- game guess))))\n          (set! diff (+ diff (- guess game)))))\n      (let\
    \ ((diff (make-array (length guess) 'int)))\n        (do ((i 0 (+ i 1))\n    \
    \         (j 0 (+ j 1)))\n            ((or (< i j) (< j i)) (set! diff 0 (+ diff\
    \ (- guess game)))\n                              (set! diff 0 (+ diff (- game\
    \ guess))))\n          (set! diff (+ diff (- guess game)))))\n      (let ((diff\
    \ (make-array (length guess) 'int)))\n        (do ((i 0 (+ i 1))\n           \
    \  (j 0 (+ j 1)))\n            ((or (< i j) (< j i)) (set! diff 0 (+ diff (- guess\
    \ game)))\n                              (set! diff 0 (+ diff (- game guess))))\n\
    \          (set! diff (+ diff (- guess game)))))\n      (let ((diff (make-array\
    \ (length guess) 'int)))\n        (do ((i 0 (+ i 1))\n             (j 0 (+ j 1)))\n\
    \            ((or (< i j) (< j i)) (set! diff 0 (+ diff (- guess game)))\n   \
    \                           (set! diff 0 (+ diff (- game guess))))\n         \
    \ (set! diff (+ diff (- guess game)))))\n      (let ((diff (make-array (length\
    \ guess) 'int)))\n        (do ((i 0 (+ i 1))\n             (j 0 (+ j 1)))\n  \
    \          ((or (< i j) (< j i)) (set! diff 0 (+ diff (- guess game)))\n     \
    \                         (set! diff 0 (+ diff (- game guess))))\n          (set!\
    \ diff (", "  (if (= (length game) (length guess))\n      (let ((diff (make-array\
    \ (length guess) initial-element 0)))\n        (do ((i 0 (+ i 1))\n          \
    \   (game (subseq game 0 i))\n             (guess (subseq guess 0 i))\n      \
    \       (diff (subseq diff 0 i)))\n          ((< i length) (set! diff (make-array\
    \ (length guess) initial-element 0)))\n          ((= i length) (set! diff (make-array\
    \ (length guess) initial-element 0)))\n          ((= i (length game)) (set! diff\
    \ (make-array (length guess) initial-element 0)))\n          ((= i (length guess))\n\
    \           (set! diff (make-array (length guess) initial-element 0)))\n     \
    \     ((= i (length diff))\n           (set! diff (make-array (length guess) initial-element\
    \ 0)))\n          ((= i (length diff))\n           (set! diff (make-array (length\
    \ guess) initial-element 0)))\n          ((= i (length diff))\n           (set!\
    \ diff (make-array (length guess) initial-element 0)))\n          ((= i (length\
    \ diff))\n           (set! diff (make-array (length guess) initial-element 0)))\n\
    \          ((= i (length diff))\n           (set! diff (make-array (length guess)\
    \ initial-element 0)))\n          ((= i (length diff))\n           (set! diff\
    \ (make-array (length guess) initial-element 0)))\n          ((= i (length diff))\n\
    \           (set! diff (make-array (length guess) initial-element 0)))\n     \
    \     ((= i (length diff))\n           (set! diff (make-array (length guess) initial-element\
    \ 0)))\n          ((= i (length diff))\n           (set! diff (make-array (length\
    \ guess) initial-element 0)))\n          ((= i (length diff))\n           (set!\
    \ diff (make-array (length guess) initial-element 0)))\n          ((= i (length\
    \ diff))\n           (set! diff (make-array (length guess) initial-element 0)))\n\
    \          ((= i (length diff))\n           (set! diff (make-array (length guess)\
    \ initial-element 0)))\n          ((= i (length diff))\n           (set! diff\
    \ (make-array (length guess) initial-element 0)))\n          ((= i (length diff))\n\
    \           (set! diff (make-array (length guess) initial-element 0)))\n     \
    \     ((= i (length diff))\n           (set! diff (make-array (length guess) initial-element\
    \ 0", "  (if (= (length game) (length guess))\n      (let ((diff (make-array (length\
    \ guess) 'int)))\n        (do ((i 0 (+ i 1))\n             (g (+ i 1))\n     \
    \        (gs (+ i 1)))\n          ((< i length) (set! diff (make-array (length\
    \ guess) 'int)))\n          ((< g length) (set! diff (make-array (length guess)\
    \ 'int)))\n          ((< gs length) (set! diff (make-array (length guess) 'int)))\n\
    \          ((< (< (car game) (car guess)) (car diff)) (set! diff (make-array (length\
    \ guess) 'int))\n          ((< (car game) (car diff)) (set! diff (make-array (length\
    \ guess) 'int))\n          ((< (car diff) (car game)) (set! diff (make-array (length\
    \ guess) 'int))\n          ((< (car diff) (car guess)) (set! diff (make-array\
    \ (length guess) 'int))\n          ((< g gs) (set! diff (make-array (length guess)\
    \ 'int))\n          ((< gs g) (set! diff (make-array (length guess) 'int))\n \
    \         ((< g g) (set! diff (make-array (length guess) 'int))\n          ((<\
    \ gs g) (set! diff (make-array (length guess) 'int))\n          ((< g gs) (set!\
    \ diff (make-array (length guess) 'int))\n          ((< gs gs) (set! diff (make-array\
    \ (length guess) 'int))\n          ((< g g) (set! diff (make-array (length guess)\
    \ 'int))\n          ((< gs gs) (set! diff (make-array (length guess) 'int))\n\
    \          ((< g gs) (set! diff (make-array (length guess) 'int))\n          ((<\
    \ gs g) (set! diff (make-array (length guess) 'int))\n          ((< g gs) (set!\
    \ diff (make-array (length guess) 'int))\n          ((< gs gs) (set! diff (make-array\
    \ (length guess) 'int))\n          ((< g g) (set! diff (make-array (length guess)\
    \ 'int))\n          ((< gs gs) (set! diff (make-array (length guess) ", "  (if\
    \ (= (length game) (length guess))\n      (let ((diff (make-array (length guess)\
    \ initial-element 0)))\n        (do ((i 0 (+ i 1))\n             (j (+ i 1))\n\
    \             (diff (make-array (length guess) initial-element 0)))\n        \
    \  ((< i j) (set! diff (make-array (length guess) initial-element 0)))\n     \
    \     ((< j length) (set! diff (make-array (length guess) initial-element 0)))\n\
    \          ((< i length) (set! diff (make-array (length guess) initial-element\
    \ 0)))\n          ((< i j) (set! diff (make-array (length guess) initial-element\
    \ 0)))\n          ((< j i) (set! diff (make-array (length guess) initial-element\
    \ 0)))\n          ((< i j) (set! diff (make-array (length guess) initial-element\
    \ 0)))\n          ((< j i) (set! diff (make-array (length guess) initial-element\
    \ 0)))\n          ((< i j) (set! diff (make-array (length guess) initial-element\
    \ 0)))\n          ((< j i) (set! diff (make-array (length guess) initial-element\
    \ 0)))\n          ((< i j) (set! diff (make-array (length guess) initial-element\
    \ 0)))\n          ((< j i) (set! diff (make-array (length guess) initial-element\
    \ 0)))\n          ((< i j) (set! diff (make-array (length guess) initial-element\
    \ 0)))\n          ((< j i) (set! diff (make-array (length guess) initial-element\
    \ 0)))\n          ((< i j) (set! diff (make-array (length guess) initial-element\
    \ 0)))\n          ((< j i) (set! diff (make-array (length guess) initial-element\
    \ 0)))\n          ((< i j) (set! diff (make-array (length guess) initial-element\
    \ 0)))\n          ((< j i) (set! diff (make-array (length guess) initial-element\
    \ 0)))\n          ((< i j) (set! diff (make-array (length guess) initial-element\
    \ 0)))\n          ((< j i) (set! diff (make-array (length guess) initial-element\
    \ 0)))\n          ((< i j) (set! diff (make-array (length guess) initial-element\
    \ 0)))\n          ((< j i) (set! diff (make-array (length guess) initial-element\
    \ 0)))\n          ((< i j) (set! diff (make-array (", "  (if (null? game)\n  \
    \    (if (null? guess)\n          (list 0)\n          (list 0))\n      (let ((diff\
    \ (- guess (car game))))\n        (if (= diff 0)\n            (list 0)\n     \
    \       (list (abs diff))))))\n", "  (if (= (length game) (length guess))\n  \
    \    (map (lambda (x y) (if (= x y) 0 abs (- x y))) game guess)\n      (map (lambda\
    \ (x y) (if (= x y) 0 abs (- x y))) guess game)))\n", "  (let loop ((games game)\
    \ (guesses guess) (result '()))\n    (cond ((null? games) (append result '()))\n\
    \          ((null? guesses) (append result '()))\n          ((equal? (first games)\
    \ (first guesses))\n           (loop (rest games) (rest guesses) (cons (- (first\
    \ games) (first guesses)) result)))\n          (else\n           (loop (rest games)\
    \ (rest guesses) (cons (abs (- (first games) (first guesses))) result))))))\n",
  "  (if (= (length game) (length guess))\n      (map \n         (lambda (i j)\n \
    \          (if (= i j)\n               (if (= (first game) (first guess))\n  \
    \                 (if (= (second game) (second guess))\n                     \
    \  (if (= (third game) (third guess))\n                           (if (= (fourth\
    \ game) (fourth guess))\n                               (if (= (fifth game) (fifth\
    \ guess))\n                                   (if (= (sixth game) (sixth guess))\n\
    \                                       (if (= (seventh game) (seventh guess))\n\
    \                                           (if (= (eigth game) (eigth guess))\n\
    \                                               (if (= (ninth game) (ninth guess))\n\
    \                                                   (if (= (tenth game) (tenth\
    \ guess))\n                                                       (if (= (eleventh\
    \ game) (eleventh guess))\n                                                  \
    \         (if (= (twelfth game) (twelfth guess))\n                           \
    \                                    (if (= (thirteenth game) (thirteenth guess))\n\
    \                                                                   (if (= (fourteenth\
    \ game) (fourteenth guess))\n                                                \
    \                         (if (= (fifteenth game) (fifteenth guess))\n       \
    \                                                                      (if (=\
    \ (sixteenth game) (sixteenth guess))\n                                      \
    \                                           (if (= (seventeenth game) (seventeenth\
    \ guess))\n                                                                  \
    \                   (if (= (eighteenth game) (eighteenth guess))\n           \
    \                                                                            \
    \  (if (= (nineteenth game) (nineteenth guess))\n                            \
    \                                                                 (if (= (tenteenth\
    \ game) (tenteenth guess))\n                                                 \
    \                                                (if (= (twenty-first game) (twenty-first\
    \ guess))\n                                                                  \
    \                                   (if (= (twenty-second game) (twenty-second\
    \ guess))\n                                                                  \
    \                                       (if (= (twenty-third game) (twenty-third\
    \ guess))\n                                                                  \
    \                                           (if (= (twenty-fourth game) (twenty-fourth\
    \ guess))\n                                                                  \
    \                                               (if (= (twenty-fifth game) (twenty-fifth\
    \ guess))\n                                                                  \
    \                                                   (if (= (twenty-sixth game)\
    \ (twenty-sixth guess))\n                                                    \
    \                                                                     (if (= (twenty-seventh\
    \ game) (twenty-seventh guess))\n                                            \
    \                                                                            \
    \     (if (= (twenty-eighth game) (twenty-eighth guess))\n                   \
    \                                                                            \
    \                                  (if (= (twenty-ninth ", "  (if (null? game)\n\
    \      (if (null? guess)\n          (list 0)\n          (list 0))\n      (if (equal?\
    \ (car game) (car guess))\n          (+ (car game) (car guess))\n          (+\
    \ (abs (- (car game) (car guess))) (car game))))))\n", "  (if (= (length game)\
    \ (length guess))\n      (let ((score (car game))\n            (guess-score (car\
    \ guess)))\n        (if (= guess-score score)\n            (list 0 0)\n      \
    \      (list (abs (- guess-score score))\n                  (abs (- score guess-score))))))\n",
  "  (let ((scores (make-array (length game) \n                            :element-type\
    \ 'int\n                            :initial-contents 0)))\n    (for ((i 0 (+\
    \ i 1))) (do ((j 0 (+ j 1))) (set! scores\n                                  \
    \        (+ scores\n                                           (- guess (car game))\n\
    \                                           (- scores (car game))))\n      (set!\
    \ scores (+ scores (car game)))))\n    scores))\n", "  (if (= (length game) (length\
    \ guess))\n      (let ((score (car game))\n            (guess-score (car guess)))\n\
    \        (if (= guess-score score)\n            (list 0 0)\n            (list\
    \ (abs (- guess-score score))))))\n</code>\n<|/ a |>\n<| c |>\nThanks for your\
    \ answer! I understand how you did it, but I still don't understand why my code\
    \ doesn't work. Could you please explain why my code doesn't work?\n<|/ c |>\n\
    <| c |>\nI added an explanation to the answer.\n<|/ c |>\n<| c |>\nThank you very\
    \ much for your explanation! I understand it now. :)\n<|/ c |>\n<| a dscore=1\
    \ |>\nThe problem is that the function compare is supposed to return a list of\
    \ numbers, not a list of lists. So the return value should be a list of numbers,\
    \ not a list of lists. \nThe function compare should look like this:\n<code>",
  "  (if (= (length game) (length guess))\n      (let ((score (car game))\n      \
    \      (guess (car guess)))\n        (if (= guess score)\n            (list 0\
    \ 0)\n            (list (abs (- guess score))\n                  (abs (- score\
    \ guess))))))\n</code>\n<|/ a tags=racket,scheme |>\n<| c |>\nThanks for the answer!\
    \ I understand what you're saying but I'm having trouble implementing it. I'm\
    \ new to Scheme and I'm having trouble understanding how to implement your code.\
    \ Could you please explain it a little bit more? Thanks!\n<|/ c |>\n<| c |>\n\
    I added some comments to my answer. Hope it helps.\n<|/ c |>\n<| c |>\nThanks\
    \ for the help! I understand it better now. One last question, how would I go\
    \ about implementing this in Racket? Thanks!\n<|/ c |>\n<| c |>\nI added a Racket-specific\
    \ solution. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for the help! I understand\
    \ it better now. One last question, how would I go about implementing this in\
    \ Racket? Thanks!\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  (define (compare game\
    \ guess)\n    (cond\n      [(null? game) (list guess)]\n      [(null? guess) (list\
    \ game)]\n      [(= (first game) (first guess)) (list 0)]\n      [else (cons (abs\
    \ (first game) (first guess)) (compare (rest game) (rest guess)))]\n    )\n  )\n\
    \  (compare game guess)\n)\n", "  (if (= (length game) (length guess))\n     \
    \ (let ((diff (make-array (length guess) initial-element-type 'int)))\n      \
    \  (do ((i 0 (+ i 1))\n             (game-index (+ i 1))\n             (guess-index\
    \ (+ i 1)))\n          ((< i guess-index) (set! diff (subarray diff 0 guess-index)))\n\
    \          ((< i game-index) (set! diff (subarray diff game-index guess-index)))\n\
    \          ((< i guess-index) (set! diff (subarray diff 0 guess-index)))\n   \
    \       ((< i game-index) (set! diff (subarray diff game-index guess-index)))\n\
    \          (set! diff (subarray diff 0 guess-index)))\n        (reverse diff))\n\
    \      (let ((diff (make-array (length guess) initial-element-type 'int)))\n \
    \       (do ((i 0 (+ i 1))\n             (game-index (+ i 1))\n             (guess-index\
    \ (+ i 1)))\n          ((< i guess-index) (set! diff (subarray diff 0 guess-index)))\n\
    \          ((< i game-index) (set! diff (subarray diff game-index guess-index)))\n\
    \          ((< i guess-index) (set! diff (subarray diff 0 guess-index)))\n   \
    \       ((< i game-index) (set! diff (subarray diff game-index guess-index)))\n\
    \          (set! diff (subarray diff 0 guess-index)))\n        (reverse diff))))\n",
  "  (if (= (length game) (length guess))\n      (let ((scores (make-array (length\
    \ guess) :initial-element 0)))\n        (do ((i 0 (+ i 1))\n             (j (+\
    \ i 1))\n             (score (car game)))\n            ((< i j) (set! scores (set!\
    \ scores (make-array (length guess) :initial-element 0))))\n            (set!\
    \ scores\n                  (assoc score\n                          (sub1 i)\n\
    \                          (sub1 j))\n                  (set! scores (assoc score\
    \ (sub1 i) (sub1 j))\n                          (set! scores (assoc score (sub1\
    \ j) (sub1 i))\n                                  (set! scores (assoc score (sub1\
    \ i) (sub1 j))\n                                          (set! scores (assoc\
    \ score (sub1 j) (sub1 i))\n                                                 \
    \ (set! scores (assoc score (sub1 i) (sub1 j))\n                             \
    \                             (set! scores (assoc score (sub1 j) (sub1 i))\n \
    \                                                                 (set! scores\
    \ (assoc score (sub1 i) (sub1 j))\n                                          \
    \                            (set! scores (assoc score (sub1 j) (sub1 i))\n  \
    \                                                                            (set!\
    \ scores (assoc score (sub1 j) (sub1 i))\n                                   \
    \                                                   (set! scores (assoc score\
    \ (sub1 i) (sub1 j))\n                                                       \
    \                                       (set! scores (assoc score (sub1 j) (sub1\
    \ i))\n                                                                      \
    \                                (set! scores (assoc score (sub1 i) (sub1 j))\n\
    \                                                                            \
    \                                  (set! scores (assoc score (sub1 j) (sub1 i))\n\
    \                                                                            \
    \                                          (set! scores (assoc score (sub1 i)\
    \ (sub1 j))\n                                                                \
    \                                                              (set! scores (assoc\
    \ score (sub1 j) (sub1 i))\n                                                 \
    \                                                                            \
    \             (set! scores (assoc score (sub1 i) (sub1 j))\n                 \
    \                                                                            \
    \                                                                     (set! scores\
    \ (assoc score (sub1 j) (sub1 i))\n                                          \
    \                                                                            \
    \                                                    (set! scores (assoc score\
    \ (sub1 i) (sub1 j))\n                                                       \
    \                                                                            \
    \                                               (set! scores (assoc score (sub1\
    \ j) (sub1 i))\n                                                             \
    \                                                                            \
    \                                                 (set! scores (assoc score (sub1\
    \ i) (sub1 j))\n                                                             \
    \                                                                            \
    \                                                     (set! scores (assoc score\
    \ (sub1 j) (sub1 i))\n                                                       \
    \                                                                            \
    \                                                                            \
    \                   ", "  (let loop ((game-scores game)\n             (guess-scores\
    \ guess))\n    (if (null? game-scores)\n        (reverse guess-scores)\n     \
    \   (let ((game-score (car game-scores))\n              (guess-score (car guess-scores)))\n\
    \          (if (= guess-score game-score)\n              (loop (cdr game-scores)\
    \ (cdr guess-scores))\n              (loop (cdr game-scores) guess-scores))))))\n",
  "  (if (= (length game) (length guess))\n      (let ((diff (make-array (length guess)\
    \ 'int)))\n        (do ((i 0 (+ i 1))\n             (j 0 (+ j 1)))\n         \
    \   ((or (= i j) (< i j))\n             (set! diff (- diff (- guess game))))\n\
    \          (set! diff (- diff (- guess game))))\n        diff)\n      (let ((diff\
    \ (make-array (length guess) 'int)))\n        (do ((i 0 (+ i 1))\n           \
    \  (j 0 (+ j 1)))\n            ((or (= i j) (< i j))\n             (set! diff\
    \ (- diff (- guess game))))\n          (set! diff (- diff (- guess game))))\n\
    \        diff)))\n", "  (if (null? game)\n      (if (null? guess)\n          (list\
    \ 0)\n          (list 0))\n      (let ((score (car game))\n            (guess\
    \ (car guess))\n            (diff (abs (- guess score))))\n        (if (= guess\
    \ score)\n            (list 0)\n            (cons diff (compare rest (cdr guess)))))))\n",
  "  (if (= (length game) (length guess))\n      (let ((scores (make-array (length\
    \ game) 'int))\n            (guesses (make-array (length guess) 'int)))\n    \
    \    (do ((i 0 (+ i 1))\n             (j 0 (+ j 1)))\n            ((< i j) (set!\
    \ guesses (vector-set! guesses j (- guess (car game))))\n                    (set!\
    \ scores (vector-set! scores j (- (car game) (car guesses))))\n              \
    \      (set! i (+ i 1))\n                    (set! j (+ j 1)))\n        (vector-set!\
    \ scores i (- (car guesses) (car game)))\n        scores))\n  (let ((scores (make-array\
    \ (length guess) 'int))\n        (guesses (make-array (length game) 'int)))\n\
    \    (do ((i 0 (+ i 1))\n         (j 0 (+ j 1)))\n        ((< i j) (set! guesses\
    \ (vector-set! guesses j (- guess (car game))))\n                (set! scores\
    \ (vector-set! scores j (- (car game) (car guesses))))\n                (set!\
    \ i (+ i 1))\n                (set! j (+ j 1)))\n    (vector-set! scores i (-\
    \ (car guesses) (car game)))\n    scores)))\n", "  (if (null? game)\n      (list\
    \ guess)\n      (let ((diff (- guess (car game))))\n        (if (= diff 0)\n \
    \           (list guess)\n            (cons diff (compare cdr game)))))) ; recurse\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
