name: HumanEval_41_car_race_collision
language: racket
prompt: "#lang racket\n\n;; Imagine a road that's a perfectly straight infinitely\
  \ long line.\n;; n cars are driving left to right;  simultaneously, a different\
  \ set of n cars\n;; are driving right to left.   The two sets of cars start out\
  \ being very far from\n;; each other.  All cars move in the same speed.  Two cars\
  \ are said to collide\n;; when a car that's moving left to right hits a car that's\
  \ moving right to left.\n;; However, the cars are infinitely sturdy and strong;\
  \ as a result, they continue moving\n;; in their trajectory as if they did not collide.\n\
  ;; This function outputs the number of such collisions.\n(define (car_race_collision\
  \ n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate car_race_collision))\n\
  \    (check-equal? (candidate 2) 4)\n    (check-equal? (candidate 3) 9)\n    (check-equal?\
  \ (candidate 4) 16)\n    (check-equal? (candidate 8) 64)\n    (check-equal? (candidate\
  \ 10) 100)\n))\n\n(test-humaneval)"
completions: ["  (let ((cars (make-array n '(list 'car))))\n    (define (collide a\
    \ b)\n      (< (car a) (car b)))\n    (define (collides a)\n      (cond ((null?\
    \ a) '())\n            ((collide (car a) (car a))\n             (cons (car a)\
    \ (car a)))\n            (else (cons (car a) (collides (cdr a)))))\n    (define\
    \ (collides-loop a)\n      (cond ((null? a) '())\n            ((collide (car a)\
    \ (car a))\n             (cons (car a) (car a)))\n            (else (cons (car\
    \ a) (collides-loop (cdr a)))))\n    (define (collides-loop-helper a b)\n    \
    \  (cond ((null? a) '())\n            ((collide (car a) (car b))\n           \
    \  (cons (car a) (car a)))\n            (else (cons (car a) (collides-loop-helper\
    \ (cdr a) b))))\n    (define (collides-loop-helper a b)\n      (cond ((null? a)\
    \ '())\n            ((collide (car a) (car b))\n             (cons (car a) (car\
    \ a)))\n            (else (cons (car a) (collides-loop-helper (cdr a) b))))\n\
    \    (define (collides-loop-helper a b)\n      (cond ((null? a) '())\n       \
    \     ((collide (car a) (car b))\n             (cons (car a) (car a)))\n     \
    \       (else (cons (car a) (collides-loop-helper (cdr a) b))))\n    (define (collides-loop-helper\
    \ a b)\n      (cond ((null? a) '())\n            ((collide (car a) (car b))\n\
    \             (cons (car a) (car a)))\n            (else (cons (car a) (collides-loop-helper\
    \ (cdr a) b))))\n    (define (collides-loop-helper a b)\n      (cond ((null? a)\
    \ '())\n            ((collide (car a) (car b))\n             (cons (car a) (car\
    \ a)))\n            (else (cons (car a) (collides-loop-helper (cdr a) b))))\n\
    \    (define (collide", "  (define (collide a b)\n    (cond ((< a b) (+ a b))\n\
    \          ((< b a) (+ b a))\n          (else 0)))\n  (define (collides a-list\
    \ b-list)\n    (cond ((null? a-list) 0)\n          ((null? b-list) 0)\n      \
    \    ((< (car a-list) (car b-list)) (+ 1 (collide (car a-list) (car b-list))))\n\
    \          (else (+ 1 (collides (cdr a-list) (cdr b-list))))))\n  (define (collides-list\
    \ a-list b-list)\n    (cond ((null? a-list) 0)\n          ((null? b-list) 0)\n\
    \          ((< (car a-list) (car b-list)) (+ 1 (collide (car a-list) (car b-list))))\n\
    \          (else (+ 1 (collides-list (cdr a-list) (cdr b-list))))))\n  (define\
    \ (collides-list-2 a-list b-list)\n    (cond ((null? a-list) 0)\n          ((null?\
    \ b-list) 0)\n          ((< (car a-list) (car b-list)) (+ 1 (collide (car a-list)\
    \ (car b-list))))\n          (else (+ 1 (collides-list-2 a-list (cdr b-list))))))\n\
    \  (define (collides-list-3 a-list b-list)\n    (cond ((null? a-list) 0)\n   \
    \       ((null? b-list) 0)\n          ((< (car a-list) (car b-list)) (+ 1 (collide\
    \ (car a-list) (car b-list))))\n          (else (+ 1 (collides-list-3 a-list (cdr\
    \ b-list))))))\n  (define (collides-list-4 a-list b-list)\n    (cond ((null? a-list)\
    \ 0)\n          ((null? b-list) 0)\n          ((< (car a-list) (car b-list)) (+\
    \ 1 (collide (car a-list) (car b-list))))\n          (else (+ 1 (collides-list-4\
    \ a-list (cdr b-list))))))\n  (define (collides-list-5 a-list b-list)\n    (cond\
    \ ((null? a-list) 0)\n          ((null? b-list) 0)\n          ((< (car a-list)\
    \ (car b-list)) (+ 1 (collide (car a-list) (car b-list))))\n          (", "  (define\
    \ (collide a b)\n    (< (abs (- a b)) n))\n  (define (collides a-list)\n    (cond\
    \ ((null? a-list) 0)\n          ((collide (car a-list) (car a-list))\n       \
    \    (+ 1 (car-race_collision (- n 1))))\n          (else (+ 1 (car-race_collision\
    \ (- n 1))\n                     (car-race_collision (- n 1))\n              \
    \       (car-race_collision (- n 1))\n                     (car-race_collision\
    \ (- n 1))\n                     (car-race_collision (- n 1))\n              \
    \       (car-race_collision (- n 1))\n                     (car-race_collision\
    \ (- n 1))\n                     (car-race_collision (- n 1))\n              \
    \       (car-race_collision (- n 1))\n                     (car-race_collision\
    \ (- n 1))\n                     (car-race_collision (- n 1))\n              \
    \       (car-race_collision (- n 1))\n                     (car-race_collision\
    \ (- n 1))\n                     (car-race_collision (- n 1))\n              \
    \       (car-race_collision (- n 1))\n                     (car-race_collision\
    \ (- n 1))\n                     (car-race_collision (- n 1))\n              \
    \       (car-race_collision (- n 1))\n                     (car-race_collision\
    \ (- n 1))\n                     (car-race_collision (- n 1))\n              \
    \       (car-race_collision (- n 1))\n                     (car-race_collision\
    \ (- n 1))\n                     (car-race_collision (- n 1))\n              \
    \       (car-race_collision (- n 1))\n                     (car-race_collision\
    \ (- n 1))\n                     (car-race_collision (- n 1))\n              \
    \       (car-race_collision (- n 1))\n                     (car-race_collision\
    \ (- n 1))\n                     (car-race_collision (- n 1))\n              \
    \       (car-race_collision (- n 1))\n                     (car-race_collision\
    \ (- n 1))\n                     (car-race_collision (- n 1))\n              \
    \       (car-race_collision (- n 1))\n                     (car-race_collision\
    \ (- n 1))\n                     (car-race_collision (- n 1))\n              \
    \       (car-race_collision (- n 1))\n                     (car-race_collision\
    \ (- n 1))\n                     (car-race_collision (- n 1))\n              \
    \       (car-race_collision (- n 1))\n                     (car-race_collision\
    \ (- n 1))\n                     (", "  (let ((collisions 0))\n    (dotimes (i\
    \ n)\n      (let ((car (make-instance 'car)))\n        (set! car.speed 10)\n \
    \       (set! car.x 0)\n        (set! car.y 0)\n        (set! car.direction 0)\n\
    \        (set! car.collided false)\n        (set! car.colliding-with '())\n  \
    \      (set! car.colliding-with-speed 0)\n        (set! car.colliding-with-x 0)\n\
    \        (set! car.colliding-with-y 0)\n        (set! car.colliding-with-direction\
    \ 0)\n        (set! car.colliding-with-collided false)\n        (set! car.colliding-with-colliding-with\
    \ '())\n        (set! car.colliding-with-colliding-with-speed 0)\n        (set!\
    \ car.colliding-with-colliding-with-x 0)\n        (set! car.colliding-with-colliding-with-y\
    \ 0)\n        (set! car.colliding-with-colliding-with-direction 0)\n        (set!\
    \ car.colliding-with-colliding-with-collided false)\n        (set! car.colliding-with-colliding-with-colliding-with\
    \ '())\n        (set! car.colliding-with-colliding-with-colliding-with-speed 0)\n\
    \        (set! car.colliding-with-colliding-with-colliding-with-x 0)\n       \
    \ (set! car.colliding-with-colliding-with-colliding-with-y 0)\n        (set! car.colliding-with-colliding-with-colliding-with-direction\
    \ 0)\n        (set! car.colliding-with-colliding-with-colliding-with-collided\
    \ false)\n        (set! car.colliding-with-colliding-with-colliding-with-colliding-with\
    \ '())\n        (set! car.colliding-with-colliding-with-colliding-with-colliding-with-speed\
    \ 0)\n        (set! car.colliding-with-colliding-with-colliding-with-colliding-with-x\
    \ 0)\n        (set! car.colliding-with-colliding-with-colliding-with-colliding-with-y\
    \ 0)\n        (set! car.colliding-with-colliding-with-colliding-with-colliding-with-direction\
    \ 0)\n        (set! car.colliding-with-colliding-with-colliding-with-colliding-with-collided\
    \ false)\n        (set! car.", "  (let ((collisions 0))\n    (for ((i n) (j n))\n\
    \      (if (= i j)\n          (set! collisions (+ collisions 1))\n          (set!\
    \ collisions (+ collisions 0))))))\n", "  (let ((cars (make-array n '(list 'car))))\n\
    \    (define (collide a b)\n      (< (car-speed a) (car-speed b))\n      (< (car-speed\
    \ b) (car-speed a))\n      (< (car-speed a) (car-speed b))\n      (< (car-speed\
    \ b) (car-speed a))\n      (< (car-speed a) (car-speed b))\n      (< (car-speed\
    \ b) (car-speed a))\n      (< (car-speed a) (car-speed b))\n      (< (car-speed\
    \ b) (car-speed a))\n      (< (car-speed a) (car-speed b))\n      (< (car-speed\
    \ b) (car-speed a)))\n    (define (collides i j)\n      (cond ((< i j) (and (not\
    \ (null? cars)) (not (null? (cdr cars)))))\n            ((< j i) (and (not (null?\
    \ (cdr cars))) (not (null? cars)))))\n      (cond ((and (< i j) (< j n))\n   \
    \          (and (not (null? cars)) (not (null? (cdr cars)))))\n            ((and\
    \ (< j i) (< i n))\n             (and (not (null? (cdr cars))) (not (null? cars)))))\n\
    \      (cond ((and (< i j) (< j n))\n             (and (not (null? (cdr cars)))\
    \ (not (null? (cdr cars)))))\n            ((and (< j i) (< i n))\n           \
    \  (and (not (null? (cdr cars))) (not (null? (cdr cars)))))\n            ((and\
    \ (< i j) (< j n))\n             (and (not (null? (cdr cars))) (not (null? (cdr\
    \ cars)))))\n            ((and (< j i) (< i n))\n             (and (not (null?\
    \ (cdr cars))) (not (null? (cdr cars)))))\n            ((and (< i j) (< j n))\n\
    \             (and (not (null? (cdr cars))) (not (null? (cdr cars)))))\n     \
    \       ((and (< j i) (< i n))\n             (and (not (null? (cdr cars))) (not\
    \ (null? (cdr cars)))))\n            ((and (< i j) (< j n))\n             (and\
    \ (not (null? (cdr cars))) (not (null? (cdr cars)))))\n            ((and (< j\
    \ i) (< i n))\n", "  (let ((cars (make-array n '(list 'car))))\n    (define (collide\
    \ a b)\n      (< (car a) (car b)))\n    (define (collides a)\n      (filter collide\
    \ a))\n    (define (collides-list a)\n      (map collides a))\n    (define (collides-list-all\
    \ a)\n      (map car (filter collides a)))\n    (define (collides-list-all a b)\n\
    \      (map car (filter collides a) (filter collides b)))\n    (define (collides-list-all\
    \ a b c)\n      (map car (filter collides a) (filter collides b) (filter collides\
    \ c)))\n    (define (collides-list-all a b c d)\n      (map car (filter collides\
    \ a) (filter collides b) (filter collides c) (filter collides d)))\n    (define\
    \ (collides-list-all a b c d e)\n      (map car (filter collides a) (filter collides\
    \ b) (filter collides c) (filter collides d) (filter collides e)))\n    (define\
    \ (collides-list-all a b c d e f)\n      (map car (filter collides a) (filter\
    \ collides b) (filter collides c) (filter collides d) (filter collides e) (filter\
    \ collides f)))\n    (define (collides-list-all a b c d e f g)\n      (map car\
    \ (filter collides a) (filter collides b) (filter collides c) (filter collides\
    \ d) (filter collides e) (filter collides f) (filter collides g)))\n    (define\
    \ (collides-list-all a b c d e f g h)\n      (map car (filter collides a) (filter\
    \ collides b) (filter collides c) (filter collides d) (filter collides e) (filter\
    \ collides f) (filter collides g) (filter collides h)))\n    (define (collides-list-all\
    \ a b c d e f g h i)\n      (map car (filter collides a) (filter collides b) (filter\
    \ collides c) (filter collides d) (filter collides e) (filter collides f) (filter\
    \ collides g) (filter collides h) (filter collides i)))\n    (define (collides-list-",
  "  (let ((cars (make-array n #:element-type 'car)))\n    (define (collision i j)\n\
    \      (cond ((= i j) 0)\n            ((< i j) (+ (car-speed (car cars i)) (car-speed\
    \ (car cars j))))\n            (else (+ (car-speed (car cars j)) (car-speed (car\
    \ cars i))))))\n    (let ((i (- n 1)))\n      (do ((j i (+ n 1)))\n          ((<\
    \ j n) (set! i (- i 1))\n            (set! j (- j 1))\n            (set! cars\
    \ (make-array n #:element-type 'car)))\n        (when (< i j)\n          (set!\
    \ cars (make-array n #:element-type 'car))\n          (set! i (- i 1))\n     \
    \     (set! j (- j 1))\n          (set! cars (make-array n #:element-type 'car)))\n\
    \      (set! cars (make-array n #:element-type 'car))\n      (do ((i i 1))\n \
    \         ((< i n) (set! i (- i 1))\n            (set! cars (make-array n #:element-type\
    \ 'car)))\n        (when (< j i)\n          (set! cars (make-array n #:element-type\
    \ 'car))\n          (set! j (- j 1))\n          (set! cars (make-array n #:element-type\
    \ 'car)))\n      (set! cars (make-array n #:element-type 'car))\n      (do ((i\
    \ i 1))\n          ((< i n) (set! i (- i 1))\n            (set! cars (make-array\
    \ n #:element-type 'car)))\n        (when (< j i)\n          (set! cars (make-array\
    \ n #:element-type 'car))\n          (set! j (- j 1))\n          (set! cars (make-array\
    \ n #:element-type 'car)))\n      (set! cars (make-array n #:element-type 'car))\n\
    \      (do ((j j 1))\n          ((< j n) (set! j (- j 1))\n            (set! cars\
    \ (make-array n #:element-type 'car)))\n        (when (< i j)\n          (set!\
    \ cars (make-array n #:element-type 'car))\n          (set! i (- i 1))\n", " \
    \ (let ((cars (make-array n '(list 'car))))\n    (define (collide a b)\n     \
    \ (< (car-speed a) (car-speed b))\n      (< (car-speed b) (car-speed a))\n   \
    \   (< (car-speed a) (car-speed b))\n      (< (car-speed b) (car-speed a)))\n\
    \    (define (collides i j)\n      (if (< i j)\n          (if (< i n)\n      \
    \        (if (< j n)\n                  (if (collide (cars i) (cars j))\n    \
    \                  (if (collide (cars j) (cars i))\n                         \
    \ (+ 1 (collides i (+ j 1))))))\n          (if (< j n)\n              (if (< i\
    \ n)\n                  (if (collide (cars j) (cars i))\n                    \
    \  (+ 1 (collides i (+ j 1))))))))\n    (if (< n 0)\n        (if (< n 1)\n   \
    \         (if (< n 2)\n                (if (< n 3)\n                    (if (<\
    \ n 4)\n                        (if (< n 5)\n                            (if (<\
    \ n 6)\n                                (if (< n 7)\n                        \
    \            (if (< n 8)\n                                        (if (< n 9)\n\
    \                                            (if (< n 10)\n                  \
    \                              (if (< n 11)\n                                \
    \                    (if (< n 12)\n                                          \
    \              (if (< n 13)\n                                                \
    \            (if (< n 14)\n                                                  \
    \              (if (< n 15)\n                                                \
    \                    (if (< n 16)\n                                          \
    \                              (if (< n 17)\n                                \
    \                                            (if (< n 18)\n                  \
    \                                                              (if (< n 19)\n\
    \                                                                            \
    \        (if (< n 20)\n                                                      \
    \                                  (if (< n 21)\n                            \
    \                                                                (if (< n 22)\n\
    \                                                                            \
    \                    (if (< n 23)\n                                          \
    \                                                          (if (< n 24)\n    \
    \                                                                            \
    \                        (if (< n 25)\n                                      \
    \                                                                      (if (<\
    \ n 26)\n                                                                    \
    \                                            (if (< n 27)\n                  \
    \                                                                            \
    \                      (if (< n 28)\n                                        \
    \                                                                            \
    \    (if (< n 29)\n                                                          \
    \                                                                  (if (< n 30)\n\
    \                                                                            \
    \                                                    (if (< n 31)\n          \
    \                                                                            \
    \                                              (if (< n 32)\n                \
    \                                                                            \
    \                                            (if (< n 33)\n                  \
    \                                                                            \
    \                                              (if (< n 34)\n                \
    \                                                                            \
    \                                                    (if (< n 35)\n          \
    \                                                                            \
    \                                                              (if (< n 36)\n\
    \                                                                            \
    \                                                                            (if\
    \ (< n 37)\n                                                                 \
    \                                                                            \
    \               (if (< n 38)\n                                               \
    \                                                                            \
    \                                     (if (< n 39)\n                         \
    \                                                                            \
    \                                                               (if (< n 40)\n",
  "  (let ((cars (make-array n '(list 'car))))\n    (dotimes (i n)\n      (set! cars\
    \ (assoc i cars))\n      (let ((car (car cars)))\n        (if (> (car car) (car\
    \ cars))\n            (set! cars (cdr cars))\n            (set! cars (cons car\
    \ cars))))))))\n", "  (let ((collisions 0))\n    (for ((i n) (j n))\n      (if\
    \ (= i j)\n          (set! collisions (+ collisions 1))\n          (set! collisions\
    \ (+ collisions 0))))))\n", "  (let ((cars (make-array (* n n) '(cons car))))\n\
    \    (dotimes (i n)\n      (dotimes (j n)\n        (set! cars (assoc cars (+ i\
    \ j) cars))\n        (set! cars (assoc cars (- i j) cars))))\n    (length cars)))\n",
  "  (let ((cars (make-array n '(list 'car))))\n    (define (collide i j)\n      (cond\
    \ ((< i j) (+ (car-x cars) (car-x cars))\n             (+ (car-y cars) (car-y\
    \ cars))\n             (+ (car-x cars) (car-y cars))\n             (+ (car-x cars)\
    \ (car-x cars))\n             (+ (car-y cars) (car-x cars))\n             (+ (car-y\
    \ cars) (car-y cars))\n             (+ (car-x cars) (car-x cars))\n          \
    \   (+ (car-x cars) (car-y cars))\n             (+ (car-y cars) (car-x cars))\n\
    \             (+ (car-y cars) (car-y cars))\n             (+ (car-x cars) (car-x\
    \ cars))\n             (+ (car-x cars) (car-y cars))\n             (+ (car-y cars)\
    \ (car-x cars))\n             (+ (car-y cars) (car-y cars))\n             (+ (car-x\
    \ cars) (car-x cars))\n             (+ (car-x cars) (car-y cars))\n          \
    \   (+ (car-y cars) (car-x cars))\n             (+ (car-y cars) (car-y cars))\n\
    \             (+ (car-x cars) (car-x cars))\n             (+ (car-x cars) (car-y\
    \ cars))\n             (+ (car-y cars) (car-x cars))\n             (+ (car-y cars)\
    \ (car-y cars))\n             (+ (car-x cars) (car-x cars))\n             (+ (car-x\
    \ cars) (car-y cars))\n             (+ (car-y cars) (car-x cars))\n          \
    \   (+ (car-y cars) (car-y cars))\n             (+ (car-x cars) (car-x cars))\n\
    \             (+ (car-x cars) (car-y cars))\n             (+ (car-y cars) (car-x\
    \ cars))\n             (+ (car-y cars) (car-y cars))\n             (+ (car-x cars)\
    \ (car-x cars))\n             (+ (car-x cars) (car-y cars))\n             (+ (car-y\
    \ cars) (car-x cars))\n             (+ (car-y cars) (car-y cars))\n          \
    \   (+ (car-x car", "  (let ((collisions 0))\n    (for ((i 0) (j n) (k n))\n \
    \     (if (= i j)\n          (set! collisions (+ collisions 1))\n          (set!\
    \ collisions (+ collisions 0)))))\n  collisions)\n", "  (let ([cars (make-array\
    \ (list n (make-array n #f #f)))])\n    (define (collide x y)\n      (if (= x\
    \ y)\n          0\n          (+ 1 (car-race (car x) (car y))))\n      (let ([x\
    \ (car x)])\n        (let ([y (if (< x n) (car y) (car x)])\n          (set! x\
    \ (car y))\n          (set! car (cdr x))\n          (set! car (cdr y))\n     \
    \     (set! car (cdr x))\n          (set! car (cdr y))\n          (set! car (cdr\
    \ x))\n          (set! car (cdr y))\n          (set! car (cdr x))\n          (set!\
    \ car (cdr y))\n          (set! car (cdr x))\n          (set! car (cdr y))\n \
    \         (set! car (cdr x))\n          (set! car (cdr y))\n          (set! car\
    \ (cdr x))\n          (set! car (cdr y))\n          (set! car (cdr x))\n     \
    \     (set! car (cdr y))\n          (set! car (cdr x))\n          (set! car (cdr\
    \ y))\n          (set! car (cdr x))\n          (set! car (cdr y))\n          (set!\
    \ car (cdr x))\n          (set! car (cdr y))\n          (set! car (cdr x))\n \
    \         (set! car (cdr y))\n          (set! car (cdr x))\n          (set! car\
    \ (cdr y))\n          (set! car (cdr x))\n          (set! car (cdr y))\n     \
    \     (set! car (cdr x))\n          (set! car (cdr y))\n          (set! car (cdr\
    \ x))\n          (set! car (cdr y))\n          (set! car (cdr x))\n          (set!\
    \ car (cdr y))\n          (set! car (cdr x))\n          (set! car (cdr y))\n \
    \         (set! car (cdr x))\n          (set! car (cdr y))\n          (set! car\
    \ (cdr x))\n          (set! car (cdr y))\n          (set! car (cdr x))\n     \
    \     (set! car (cdr y))\n          (", "  (define (collision x y)\n    (cond\
    \ ((and (< x 0) (< y 0))\n           (+ x y))\n          ((and (< x n) (< y n))\n\
    \           (+ x y))\n          ((and (< x n) (< y 0))\n           (+ x y))\n\
    \          ((and (< x 0) (< y n))\n           (+ x y))\n          (else\n    \
    \       (+ x y)))\n    (cond ((< x 0) (+ y 0))\n          ((< x n) (+ y n))\n\
    \          ((< x n) (+ y 0))\n          ((< x 0) (+ y n))\n          (else\n \
    \          (+ x y))))\n  (define (collide x y)\n    (cond ((and (< x 0) (< y 0))\n\
    \           (collision x y))\n          ((and (< x n) (< y n))\n           (collision\
    \ x y))\n          ((and (< x n) (< y 0))\n           (collision x y))\n     \
    \     ((and (< x 0) (< y n))\n           (collision x y))\n          (else\n \
    \          (collision x y))))\n  (define (collides xs ys)\n    (cond ((null? xs)\
    \ (null? ys))\n          ((and (< xs 0) (< ys 0))\n           (cond ((null? (cdr\
    \ xs)) (null? (cdr ys)))\n                 ((and (< (car xs) (car ys)) (< 0 (car\
    \ xs) (car ys)))\n                  (collides (cdr xs) (cdr ys))))\n         \
    \        ((and (< (car xs) (car ys)) (< 0 (car xs) (car ys)))\n              \
    \    (collides (cdr xs) (cdr ys))))\n                 ((and (< (car xs) (car ys))\
    \ (< 0 (car xs) (car ys)))\n                  (collides (cdr xs) (cdr ys))))\n\
    \                 ((and (< (car xs) (car ys)) (< 0 (car xs) (car ys)))\n     \
    \             (collides (cdr xs) (cdr ys))))\n                 ((and (< (car xs)\
    \ (car ys)) (< 0 (car xs) (car ys)))\n                  (collides (cdr xs) (cdr\
    \ ys))))\n                 ((and (< (car xs) (car ys)) (< 0 (car xs) (car ys)))\n\
    \                  (collides (cdr ", "  (define (collide a b)\n    (< (abs (-\
    \ (car-x a) (car-x b)) (car-x a))\n       (abs (- (car-y a) (car-y b)) (car-y\
    \ a))))\n  (define (collides a-list b-list)\n    (cond ((null? a-list) 0)\n  \
    \        ((null? b-list) 0)\n          ((and (< (car-x (car a-list)) (car-x (car\
    \ b-list))) \n               (< (car-y (car a-list)) (car-y (car b-list))))\n\
    \           (+ (car-race_collision (car a-list)) \n               (car-race_collision\
    \ (car b-list)))\n          (else (+ (car-race_collision (car a-list)) \n    \
    \               (car-race_collision (car b-list))\n                   (car-race_collision\
    \ (cdr a-list)) \n                   (car-race_collision (cdr b-list)))))\n  (define\
    \ (collides-list a-list b-list)\n    (cond ((null? a-list) 0)\n          ((null?\
    \ b-list) 0)\n          ((and (< (car-x (car a-list)) (car-x (car b-list))) \n\
    \               (< (car-y (car a-list)) (car-y (car b-list))))\n           (+\
    \ (car-race_collision (car a-list)) \n               (car-race_collision (car\
    \ b-list)))\n          (else (+ (car-race_collision (car a-list)) \n         \
    \          (car-race_collision (car b-list)) \n                   (car-race_collision\
    \ (cdr a-list)) \n                   (car-race_collision (cdr b-list)))))\n  (define\
    \ (collides-list-2 a-list b-list)\n    (cond ((null? a-list) 0)\n          ((null?\
    \ b-list) 0)\n          ((and (< (car-x (car a-list)) (car-x (car b-list))) \n\
    \               (< (car-y (car a-list)) (car-y (car b-list))))\n           (+\
    \ (car-race_collision (car a-list)) \n               (car-race_collision (car\
    \ b-list)))\n          (else (+ (car-race_collision (car a-list)) \n         \
    \          (car-race_collision (car b-list)) \n                   (car", "  (let\
    \ ([cars (make-array (* n n) '(list 'empty))])\n    (define (collide x y)\n  \
    \    (cond\n        ((< x y) 0)\n        ((< y n) 0)\n        ((< x n) (< y n)\
    \ (+ (car-speed (car x)) (car-speed (car y))))\n        (else (+ (car-speed (car\
    \ x)) (car-speed (car y)))))\n    (define (collides i j)\n      (cond\n      \
    \  ((< i j) 0)\n        ((< j n) 0)\n        ((< i n) (< j n) (+ (collide i j)\
    \ (collides (+ i 1) j)))\n        (else (+ (collide i j) (collides (+ i 1) j)))))\n\
    \    (define (collides i j)\n      (cond\n        ((< i j) 0)\n        ((< j n)\
    \ 0)\n        ((< i n) (< j n) (+ (collide i j) (collides (+ i 1) j)))\n     \
    \   (else (+ (collide i j) (collides (+ i 1) j)))))\n    (define (collides i j)\n\
    \      (cond\n        ((< i j) 0)\n        ((< j n) 0)\n        ((< i n) (< j\
    \ n) (+ (collide i j) (collides (+ i 1) j)))\n        (else (+ (collide i j) (collides\
    \ (+ i 1) j)))))\n    (define (collides i j)\n      (cond\n        ((< i j) 0)\n\
    \        ((< j n) 0)\n        ((< i n) (< j n) (+ (collide i j) (collides (+ i\
    \ 1) j)))\n        (else (+ (collide i j) (collides (+ i 1) j)))))\n    (define\
    \ (collides i j)\n      (cond\n        ((< i j) 0)\n        ((< j n) 0)\n    \
    \    ((< i n) (< j n) (+ (collide i j) (collides (+ i 1) j)))\n        (else (+\
    \ (collide i j) (collides (+ i 1) j)))))\n    (define (collides i j)\n      (cond\n\
    \        ((< i j) 0)\n        ((< j n) 0)\n        ((< i n) (< j n) (+ (collide\
    \ i j) (collides (+ i 1) j)))\n        (else (+ (collide ", "  (let ((cars (make-array\
    \ n #:element-type 'car)))\n    (define (collision i j)\n      (cond ((= i j)\
    \ (+ 1 (car-race (car cars) (car cars) (car cars) (car cars) (car cars))))\n \
    \           ((< i j) (+ 1 (car-race (car cars) (car cars) (car cars) (car cars)\
    \ (car cars))))\n            ((> i j) (+ 1 (car-race (car cars) (car cars) (car\
    \ cars) (car cars) (car cars))))\n            (else 0)))\n    (loop for i from\
    \ 0 to n-1 do\n          (loop for j from 0 to n-1 do\n                (set! cars\
    \ (cons car (cons car (cons car (cons car (cons car (cons car (cons car (cons\
    \ car (cons car (cons car (cons car (cons car (cons car (cons car (cons car (cons\
    \ car (cons car (cons car (cons car (cons car (cons car (cons car (cons car (cons\
    \ car (cons car (cons car (cons car (cons car (cons car (cons car (cons car (cons\
    \ car (cons car (cons car (cons car (cons car (cons car (cons car (cons car (cons\
    \ car (cons car (cons car (cons car (cons car (cons car (cons car (cons car (cons\
    \ car (cons car (cons car (cons car (cons car (cons car (cons car (cons car (cons\
    \ car (cons car (cons car (cons car (cons car (cons car (cons car (cons car (cons\
    \ car (cons car (cons car (cons car (cons car (cons car (cons car (cons car (cons\
    \ car (cons car (cons car (cons car (cons car (cons car (cons car (cons car (cons\
    \ car (cons car (cons car (cons car (cons car (cons car (cons car (cons car (cons\
    \ car (", "  (let ((cars (make-array (* n n) '(unsigned-byte 8))))\n    (dotimes\
    \ (i n)\n      (dotimes (j n)\n        (set! cars (+ cars (* i j)))\n        (set!\
    \ cars (+ cars (* j i))))\n    (let ((collisions 0))\n      (dotimes (i n)\n \
    \       (dotimes (j n)\n          (when (= (mod cars 2) 0)\n            (set!\
    \ collisions (+ collisions 1)))\n          (set! cars (- cars 1)))\n      (if\
    \ (= n 2)\n          collisions\n          (+ 1 (* n collisions))))))\n", "  (let\
    \ ([cars (make-array (list n (make-array (list n))))])\n    (define (collide x\
    \ y)\n      (< (car x) (car y))\n      (< (car y) (car x)))\n    (define (move\
    \ x y)\n      (set! x (car x) (set! y (car y)))\n      (set! x (+ x 1) (set! y\
    \ (- y 1)))\n      (set! x (- x 1) (set! y (+ y 1)))\n      (set! x (- x 1) (set!\
    \ y (- y 1)))\n      (set! x (+ x 1) (set! y (+ y 1)))\n      (set! x (+ x 1)\
    \ (set! y (- y 1)))\n      (set! x (- x 1) (set! y (+ y 1)))\n      (set! x (-\
    \ x 1) (set! y (- y 1)))\n      (set! x (+ x 1) (set! y (+ y 1)))\n      (set!\
    \ x (+ x 1) (set! y (- y 1)))\n      (set! x (- x 1) (set! y (+ y 1)))\n     \
    \ (set! x (- x 1) (set! y (- y 1)))\n      (set! x (+ x 1) (set! y (+ y 1)))\n\
    \      (set! x (+ x 1) (set! y (- y 1)))\n      (set! x (- x 1) (set! y (+ y 1)))\n\
    \      (set! x (- x 1) (set! y (- y 1)))\n      (set! x (+ x 1) (set! y (+ y 1)))\n\
    \      (set! x (+ x 1) (set! y (- y 1)))\n      (set! x (- x 1) (set! y (+ y 1)))\n\
    \      (set! x (- x 1) (set! y (- y 1)))\n      (set! x (+ x 1) (set! y (+ y 1)))\n\
    \      (set! x (+ x 1) (set! y (- y 1)))\n      (set! x (- x 1) (set! y (+ y 1)))\n\
    \      (set! x (- x 1) (set! y (- y 1)))\n      (set! x (+ x 1) (set! y (+ y 1)))\n\
    \      (set! x (+ x 1) (set! y (- y 1)))\n      (set! x (- x 1) (set! y (+ y 1)))\n\
    \      (set! x (- x 1) (set! y (- y 1)))\n      (set! x (+ x 1) (set", "  (let\
    \ ((cars (make-array n '(list 'car))))\n    (define (collide x y)\n      (< (car\
    \ x) (car y)) 0)\n    (define (collides x)\n      (cond ((null? x) 0)\n      \
    \      ((collide (car x) (car x)) (+ 1 (cars x)))\n            (else (+ 1 (cars\
    \ (cdr x))) (collides (cdr x))))\n    (define (collides-list x)\n      (cond ((null?\
    \ x) 0)\n            ((collide (car x) (car x)) (+ 1 (cars x)))\n            (else\
    \ (+ 1 (cars (cdr x))) (collides-list (cdr x))))\n    (define (collides-list-2\
    \ x)\n      (cond ((null? x) 0)\n            ((collide (car x) (car x)) (+ 1 (cars\
    \ x)))\n            (else (+ 1 (cars (cdr x))) (collides-list-2 x))))\n    (define\
    \ (collides-list-3 x)\n      (cond ((null? x) 0)\n            ((collide (car x)\
    \ (car x)) (+ 1 (cars x)))\n            (else (+ 1 (cars (cdr x))) (collides-list-3\
    \ x))))\n    (define (collides-list-4 x)\n      (cond ((null? x) 0)\n        \
    \    ((collide (car x) (car x)) (+ 1 (cars x)))\n            (else (+ 1 (cars\
    \ (cdr x))) (collides-list-4 x))))\n    (define (collides-list-5 x)\n      (cond\
    \ ((null? x) 0)\n            ((collide (car x) (car x)) (+ 1 (cars x)))\n    \
    \        (else (+ 1 (cars (cdr x))) (collides-list-5 x))))\n    (define (collides-list-6\
    \ x)\n      (cond ((null? x) 0)\n            ((collide (car x) (car x)) (+ 1 (cars\
    \ x)))\n            (else (+ 1 (cars (cdr x))) (collides-list-6 x))))\n    (define\
    \ (collides-list-7 x)\n      (cond ((null? x) 0)\n            ((collide (car x)\
    \ (car x)) (+ 1 (cars x)))\n            (else (+ 1 (cars (cdr x))) (collides-list-7\
    \ x))))\n    (define (collides-list-8 x)\n      (cond ((null? x) 0)\n        \
    \    ((collide ", "  (define (collide a b)\n    (< (abs (- a b)) n))\n  (define\
    \ (collides a)\n    (cond ((null? a) 0)\n          ((collide (car a) (car b))\n\
    \           (+ 1 (car-race_collision (- n 1))))\n          (else (+ 1 (car-race_collision\
    \ (- n 1))))))\n  (define (collides-list a)\n    (cond ((null? a) 0)\n       \
    \   ((collide (car a) (car b))\n           (+ 1 (car-race_collision (- n 1))))\n\
    \          (else (+ 1 (car-race_collision (- n 1))))\n          (else (+ 1 (car-race_collision\
    \ (- n 1)))))))\n", "  (let ((cars (make-array n '(list 'car))))\n    (dotimes\
    \ (i n)\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (asso", "  (define (collision car1 car2)\n    (cond\n      [(<\
    \ (car-speed car1) (car-speed car2)) 0]\n      [(> (car-speed car1) (car-speed\
    \ car2)) 1]\n      [else (+ (car-speed car1) (car-speed car2))]))\n  (define (colliding-cars\
    \ cars)\n    (cond\n      [(empty? cars) '()]\n      [(< (car-speed (car cars))\
    \ (car-speed (car cars))) (car cars)\n       (cons (car cars) (colliding-cars\
    \ (cdr cars)))]\n      [else (colliding-cars (cdr cars))]))\n  (define (colliding-cars-list\
    \ cars)\n    (cond\n      [(empty? cars) '()]\n      [(< (car-speed (car cars))\
    \ (car-speed (car cars))) (car cars)\n       (cons (car cars) (colliding-cars-list\
    \ (cdr cars)))]\n      [else (colliding-cars-list (cdr cars))]))\n  (define (colliding-cars-list\
    \ cars)\n    (cond\n      [(empty? cars) '()]\n      [(< (car-speed (car cars))\
    \ (car-speed (car cars))) (car cars)\n       (cons (car cars) (colliding-cars-list\
    \ (cdr cars)))]\n      [else (colliding-cars-list (cdr cars))]))\n  (define (colliding-cars-list\
    \ cars)\n    (cond\n      [(empty? cars) '()]\n      [(< (car-speed (car cars))\
    \ (car-speed (car cars))) (car cars)\n       (cons (car cars) (colliding-cars-list\
    \ (cdr cars)))]\n      [else (colliding-cars-list (cdr cars))]))\n  (define (colliding-cars-list\
    \ cars)\n    (cond\n      [(empty? cars) '()]\n      [(< (car-speed (car cars))\
    \ (car-speed (car cars))) (car cars)\n       (cons (car cars) (colliding-cars-list\
    \ (cdr cars)))]\n      [else (colliding-cars-list (cdr cars))]))\n  (define (colliding-cars-list\
    \ cars)\n    (cond\n      [(empty? cars) '()]\n      [(< (car-speed (c", "  (define\
    \ (collision car1 car2)\n    (cond ((and (< car1 car2) (< car2 car1))\n      \
    \     (+ car1 car2))\n          ((and (< car1 car2) (< car2 car1))\n         \
    \  (+ car2 car1))\n          ((and (< car1 car2) (< car2 car1))\n           (+\
    \ car1 car2))\n          ((and (< car1 car2) (< car2 car1))\n           (+ car2\
    \ car1))\n          (else\n           (+ car1 car2))))\n  (define (collisions\
    \ cars)\n    (cond ((null? cars)\n           0)\n          ((and (< (car cars)\
    \ (car (cdr cars)))\n              (< (car (car cars)) (car (cdr (car cars)))))\n\
    \           (+ 1 (collision (car cars) (car (cdr cars)))))\n          ((and (<\
    \ (car cars) (car (cdr cars)))\n              (< (car (car cars)) (car (cdr (car\
    \ cars)))))\n           (+ 1 (collision (car cars) (car (cdr (car cars))))))\n\
    \          ((and (< (car cars) (car (cdr cars)))\n              (< (car (car cars))\
    \ (car (cdr (car cars)))))\n           (+ 1 (collision (car cars) (car (cdr (car\
    \ cars))))))\n          ((and (< (car cars) (car (cdr cars)))\n              (<\
    \ (car (car cars)) (car (cdr (car cars)))))\n           (+ 1 (collision (car cars)\
    \ (car (cdr (car cars))))))\n          ((and (< (car cars) (car (cdr cars)))\n\
    \              (< (car (car cars)) (car (cdr (car cars)))))\n           (+ 1 (collision\
    \ (car cars) (car (cdr (car cars))))))\n          ((and (< (car cars) (car (cdr\
    \ cars)))\n              (< (car (car cars)) (car (cdr (car cars)))))\n      \
    \     (+ 1 (collision (car cars) (car (cdr (car cars))))))\n          ((and (<\
    \ (car cars) (car (cdr cars)))\n              (< (car (car cars)) (car (", " \
    \ (define (collide a b)\n    (< (abs (- a b)) n))\n  (define (collides a)\n  \
    \  (filter (lambda (b) (collide a b)) (car_list a)))\n  (define (collides-list\
    \ a)\n    (map (lambda (b) (collide a b)) (car_list a)))\n  (define (collides-list-map\
    \ a)\n    (map (lambda (b) (collide a b)) (car_list a)))\n  (define (collides-list-map-list\
    \ a)\n    (map (lambda (b) (collide a b)) (car_list a)))\n  (define (collides-list-map-list-map\
    \ a)\n    (map (lambda (b) (collide a b)) (car_list a)))\n  (define (collides-list-map-list-map-list\
    \ a)\n    (map (lambda (b) (collide a b)) (car_list a)))\n  (define (collides-list-map-list-map-list-map\
    \ a)\n    (map (lambda (b) (collide a b)) (car_list a)))\n  (define (collides-list-map-list-map-list-map-list\
    \ a)\n    (map (lambda (b) (collide a b)) (car_list a)))\n  (define (collides-list-map-list-map-list-map-list-map\
    \ a)\n    (map (lambda (b) (collide a b)) (car_list a)))\n  (define (collides-list-map-list-map-list-map-list-map-list\
    \ a)\n    (map (lambda (b) (collide a b)) (car_list a)))\n  (define (collides-list-map-list-map-list-map-list-map-list-map\
    \ a)\n    (map (lambda (b) (collide a b)) (car_list a)))\n  (define (collides-list-map-list-map-list-map-list-map-list-map-list\
    \ a)\n    (map (lambda (b) (collide a b)) (car_list a)))\n  (define (collides-list-map-list-map-list-map-list-map-list-map-list-map\
    \ a)\n    (map (lambda (b) (collide a b)) (car_list a)))\n  (define (collides-list-map-list-map-list-map-list-map-list-map-list-map-list\
    \ a)\n    (map (lambda (b) (collide a b)) (car_list a)))\n  (define (collides-list-map-list-map-list-map-list-map-list-map-list-map-list-map\
    \ a)\n    (map (lambda (b) (collide a b)) (car_list a)))\n  (define (collides-list-map-list-map-list-map-list-map-",
  "  (let ([cars (make-array (* n n) '(list 'empty))])\n    (define (collision i j)\n\
    \      (cond [(or (= i j) (< i n) (< j n))\n             (if (> (car cars) (car\
    \ cars))\n                 (car-race (car cars) (car cars) (car cars) (car cars))\n\
    \                 (car-race (car cars) (car cars) (car cars) (car cars)))]\n \
    \           [(or (= i j) (< i n) (< j n))\n             (if (> (car cars) (car\
    \ cars))\n                 (car-race (car cars) (car cars) (car cars) (car cars))\n\
    \                 (car-race (car cars) (car cars) (car cars) (car cars)))]\n \
    \           [else (if (> (car cars) (car cars))\n                     (car-race\
    \ (car cars) (car cars) (car cars) (car cars))\n                     (car-race\
    \ (car cars) (car cars) (car cars) (car cars)))]\n            [else (if (> (car\
    \ cars) (car cars))\n                     (car-race (car cars) (car cars) (car\
    \ cars) (car cars))\n                     (car-race (car cars) (car cars) (car\
    \ cars) (car cars)))]\n            [else (if (> (car cars) (car cars))\n     \
    \                (car-race (car cars) (car cars) (car cars) (car cars))\n    \
    \                 (car-race (car cars) (car cars) (car cars) (car cars)))]\n \
    \           [else (if (> (car cars) (car cars))\n                     (car-race\
    \ (car cars) (car cars) (car cars) (car cars))\n                     (car-race\
    \ (car cars) (car cars) (car cars) (car cars)))]\n            [else (if (> (car\
    \ cars) (car cars))\n                     (car-race (car cars) (car cars) (car\
    \ cars) (car cars))\n                     (car-race (car cars) (car cars) (car\
    \ cars) (car cars)))]\n            [else (if (> (car cars) (car cars))\n     \
    \                (car-race (car cars) (car cars) (car cars) (car cars))\n    \
    \                 (car-race (car ", "  (define (collide a b)\n    (< (abs (- (car\
    \ a) (car b))) (car a)))\n  (define (collides a)\n    (filter (lambda (b) (collide\
    \ a b)) (cars a)))\n  (define (collides-list a)\n    (map (lambda (b) (collide\
    \ a b)) (cars a)))\n  (define (collides-list-all a)\n    (map (lambda (b) (collide\
    \ a b)) (cars a)))\n  (define (collides-list-all a b)\n    (map (lambda (b) (collide\
    \ a b)) (cars a)))\n  (define (collides-list-all a b c)\n    (map (lambda (b)\
    \ (collide a b)) (cars a)))\n  (define (collides-list-all a b c d)\n    (map (lambda\
    \ (b) (collide a b)) (cars a)))\n  (define (collides-list-all a b c d e)\n   \
    \ (map (lambda (b) (collide a b)) (cars a)))\n  (define (collides-list-all a b\
    \ c d e f)\n    (map (lambda (b) (collide a b)) (cars a)))\n  (define (collides-list-all\
    \ a b c d e f g)\n    (map (lambda (b) (collide a b)) (cars a)))\n  (define (collides-list-all\
    \ a b c d e f g h)\n    (map (lambda (b) (collide a b)) (cars a)))\n  (define\
    \ (collides-list-all a b c d e f g h i)\n    (map (lambda (b) (collide a b)) (cars\
    \ a)))\n  (define (collides-list-all a b c d e f g h i j)\n    (map (lambda (b)\
    \ (collide a b)) (cars a)))\n  (define (collides-list-all a b c d e f g h i j\
    \ k)\n    (map (lambda (b) (collide a b)) (cars a)))\n  (define (collides-list-all\
    \ a b c d e f g h i j k l)\n    (map (lambda (b) (collide a b)) (cars a)))\n \
    \ (define (collides-list-all a b c d e f g h i j k l m)\n    (map (lambda (b)\
    \ (collide a b)) (cars a)))\n  (define (collides-", "  (define (collision x y)\n\
    \    (cond ((and (< x n) (< y n)) 0)\n          ((and (< y n) (< x n)) 0)\n  \
    \        ((and (< y n) (< x n) (< y n)) 0)\n          ((and (< x n) (< y n) (<\
    \ x n)) 0)\n          (else 1)))\n  (define (collisions xs ys)\n    (cond ((null?\
    \ xs) 0)\n          ((null? ys) 0)\n          ((collision (car xs) (car ys)) (+\
    \ 1 (collisions (cdr xs) (cdr ys))))\n          (else (collisions (cdr xs) (cdr\
    \ ys)))))\n  (define (collide x y)\n    (cond ((and (< x n) (< y n)) 0)\n    \
    \      ((and (< y n) (< x n)) 0)\n          ((and (< y n) (< x n) (< y n)) 0)\n\
    \          ((and (< x n) (< y n) (< x n)) 0)\n          (else 1)))\n  (define\
    \ (collides xs ys)\n    (cond ((null? xs) 0)\n          ((null? ys) 0)\n     \
    \     ((collide (car xs) (car ys)) (+ 1 (collides (cdr xs) (cdr ys))))\n     \
    \     (else (collides (cdr xs) (cdr ys)))))\n  (define (collides_all xs ys)\n\
    \    (cond ((null? xs) 0)\n          ((null? ys) 0)\n          ((and (< x n) (<\
    \ y n)) 0)\n          ((and (< y n) (< x n)) 0)\n          ((and (< y n) (< x\
    \ n) (< y n)) 0)\n          ((and (< x n) (< y n) (< x n)) 0)\n          (else\
    \ 1)))\n  (define (collides_all xs ys)\n    (cond ((null? xs) 0)\n          ((null?\
    \ ys) 0)\n          ((and (< x n) (< y n)) 0)\n          ((and (< y n) (< x n))\
    \ 0)\n          ((and (< y n) (< x n) (< y n)) 0)\n          ((and (< x n) (<\
    \ y n) (< x n)) 0)\n          (else 1)))\n  (define (collides_all xs ys)\n   \
    \ (cond ((null? xs) 0)\n          ", "  (let ([cars (make-array n #:initial-contents\
    \ '(#t #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f ", "  (define (collision car1\
    \ car2)\n    (cond\n      [(< car1 car2) 0]\n      [(< car2 car1) 1]\n      [(=\
    \ car1 car2) 2]\n      [(= car2 car1) 3]\n      [(> car1 car2) 4]\n      [(> car2\
    \ car1) 5]\n      [(= car1 car2) 6]\n      [(= car2 car1) 7]\n      [(> car1 car2)\
    \ 8]\n      [(> car2 car1) 9]\n      [(= car1 car2) 10]\n      [(= car2 car1)\
    \ 11]\n      [(> car1 car2) 12]\n      [(> car2 car1) 13]\n      [(= car1 car2)\
    \ 14]\n      [(= car2 car1) 15]\n      [(> car1 car2) 16]\n      [(> car2 car1)\
    \ 17]\n      [(= car1 car2) 18]\n      [(= car2 car1) 19]\n      [(> car1 car2)\
    \ 20]\n      [(> car2 car1) 21]\n      [(= car1 car2) 22]\n      [(= car2 car1)\
    \ 23]\n      [(> car1 car2) 24]\n      [(> car2 car1) 25]\n      [(= car1 car2)\
    \ 26]\n      [(= car2 car1) 27]\n      [(> car1 car2) 28]\n      [(> car2 car1)\
    \ 29]\n      [(= car1 car2) 30]\n      [(= car2 car1) 31]\n      [(> car1 car2)\
    \ 32]\n      [(> car2 car1) 33]\n      [(= car1 car2) 34]\n      [(= car2 car1)\
    \ 35]\n      [(> car1 car2) 36]\n      [(> car2 car1) 37]\n      [(= car1 car2)\
    \ 38]\n      [(= car2 car1) 39]\n      [(> car1 car2) 40]\n      [(> car2 car1)\
    \ 41]\n      [(= car1 car2) 42]\n      [(= car2 car1) 43]\n      [(> car1 car2)\
    \ 44]\n      [(> car2 car1) 45]\n      [(= car1 car2) 46]\n      [(= car2 car1)\
    \ 47]\n      [(> car1 car2) 48]\n      [(> car2 car1) 49]\n      [(= car1 car2)\
    \ 50]\n", "  (define (collision car1 car2)\n    (cond\n      [(and (< car1 car2)\
    \ (< car2 car1))\n       (+ 1 0)]\n      [(and (< car1 car2) (< car2 car1))\n\
    \       (+ 1 0)]\n      [else\n       (+ 1 0)]))\n  (define (collide car1 car2)\n\
    \    (cond\n      [(and (< car1 car2) (< car2 car1))\n       (+ 1 0)]\n      [(and\
    \ (< car1 car2) (< car2 car1))\n       (+ 1 0)]\n      [else\n       (+ 1 0)]))\n\
    \  (define (collide_list cars)\n    (cond\n      [(null? cars)\n       0]\n  \
    \    [(and (< cars cars) (< cars cars))\n       (+ 1 0)]\n      [else\n      \
    \ (+ 1 0)]))\n  (define (collide_list cars)\n    (cond\n      [(null? cars)\n\
    \       0]\n      [(and (< cars cars) (< cars cars))\n       (+ 1 0)]\n      [else\n\
    \       (+ 1 0)]))\n  (define (collide_list cars)\n    (cond\n      [(null? cars)\n\
    \       0]\n      [(and (< cars cars) (< cars cars))\n       (+ 1 0)]\n      [else\n\
    \       (+ 1 0)]))\n  (define (collide_list cars)\n    (cond\n      [(null? cars)\n\
    \       0]\n      [(and (< cars cars) (< cars cars))\n       (+ 1 0)]\n      [else\n\
    \       (+ 1 0)]))\n  (define (collide_list cars)\n    (cond\n      [(null? cars)\n\
    \       0]\n      [(and (< cars cars) (< cars cars))\n       (+ 1 0)]\n      [else\n\
    \       (+ 1 0)]))\n  (define (collide_list cars)\n    (cond\n      [(null? cars)\n\
    \       0]\n      [(and (< cars cars) (< cars cars))\n       (+ 1 0)]\n      [else\n\
    \       (+ 1 0)]))\n  (define (collide_list cars)\n    (cond\n      [(null? cars)\n\
    \       0]\n      [(and (< cars cars) (< cars cars))\n       (+ 1 0)]\n      [else\n\
    \       (+ 1 0)]))\n  (define (collide_list cars)\n    (cond\n      [(null? cars)\n\
    \       ", "  (define (collision x y)\n    (cond ((< x y) 0)\n          ((< y\
    \ n) 0)\n          ((< x n) 0)\n          ((< y n) 0)\n          (else 1)))\n\
    \  (define (collisions xs ys)\n    (cond ((null? xs) 0)\n          ((null? ys)\
    \ 0)\n          ((null? (cdr xs)) (collision (car xs) (car ys)))\n          ((null?\
    \ (cdr ys)) (collision (car xs) (car ys)))\n          ((null? (cdr (cons (car\
    \ xs) xs)) (cons (car ys) ys))\n           (collisions (cdr (cons (car xs) xs))\
    \ (cdr (cons (car ys) ys))))\n          (else (collisions (cdr xs) (cdr ys)))))\n\
    \  (define (collision-count xs ys)\n    (collisions xs ys))\n  (define (collides\
    \ xs ys)\n    (cond ((null? xs) 0)\n          ((null? ys) 0)\n          ((null?\
    \ (cdr xs)) (collision (car xs) (car ys)))\n          ((null? (cdr ys)) (collision\
    \ (car xs) (car ys)))\n          ((null? (cdr (cons (car xs) xs)) (cons (car ys)\
    \ ys))\n           (collisions (cdr (cons (car xs) xs)) (cdr (cons (car ys) ys))))\n\
    \          (else (collisions (cdr xs) (cdr ys)))))\n  (define (collides-count\
    \ xs ys)\n    (collides xs ys))\n  (define (collides-count xs ys)\n    (collides\
    \ xs ys))\n  (define (collides-count xs ys)\n    (collides xs ys))\n  (define\
    \ (collides-count xs ys)\n    (collides xs ys))\n  (define (collides-count xs\
    \ ys)\n    (collides xs ys))\n  (define (collides-count xs ys)\n    (collides\
    \ xs ys))\n  (define (collides-count xs ys)\n    (collides xs ys))\n  (define\
    \ (collides-count xs ys)\n    (collides xs ys))\n  (define ", "  (let ((cars (make-array\
    \ (* n n) '(unsigned-byte 8))))\n    (dotimes (i n)\n      (dotimes (j n)\n  \
    \      (set! cars (+ cars (* i j) cars))\n        (set! cars (+ cars (* j i) cars))\n\
    \        (set! cars (+ cars (* i j) cars))\n        (set! cars (+ cars (* j i)\
    \ cars))\n        (set! cars (+ cars (* i j) cars))\n        (set! cars (+ cars\
    \ (* j i) cars))\n        (set! cars (+ cars (* i j) cars))\n        (set! cars\
    \ (+ cars (* j i) cars))\n        (set! cars (+ cars (* i j) cars))\n        (set!\
    \ cars (+ cars (* j i) cars))\n        (set! cars (+ cars (* i j) cars))\n   \
    \     (set! cars (+ cars (* j i) cars))\n        (set! cars (+ cars (* i j) cars))\n\
    \        (set! cars (+ cars (* j i) cars))\n        (set! cars (+ cars (* i j)\
    \ cars))\n        (set! cars (+ cars (* j i) cars))\n        (set! cars (+ cars\
    \ (* i j) cars))\n        (set! cars (+ cars (* j i) cars))\n        (set! cars\
    \ (+ cars (* i j) cars))\n        (set! cars (+ cars (* j i) cars))\n        (set!\
    \ cars (+ cars (* i j) cars))\n        (set! cars (+ cars (* j i) cars))\n   \
    \     (set! cars (+ cars (* i j) cars))\n        (set! cars (+ cars (* j i) cars))\n\
    \        (set! cars (+ cars (* i j) cars))\n        (set! cars (+ cars (* j i)\
    \ cars))\n        (set! cars (+ cars (* i j) cars))\n        (set! cars (+ cars\
    \ (* j i) cars))\n        (set! cars (+ cars (* i j) cars))\n        (set! cars\
    \ (+ cars (* j i) cars))\n        (set! cars (+ cars (* i j) cars))\n        (set!\
    \ cars (+ cars (* j i) cars))\n        (set! cars (+ cars (* i j) cars))", " \
    \ (let ((cars (make-array n '(list 'car))))\n    (dotimes (i n)\n      (let ((car\
    \ cars i))\n        (set! car (make-instance 'car))\n        (set! car-speed 0)\n\
    \        (set! car-speed (- car-speed 1))\n        (set! car-speed (- car-speed\
    \ 1))\n        (set! car-speed (- car-speed 1))\n        (set! car-speed (- car-speed\
    \ 1))\n        (set! car-speed (- car-speed 1))\n        (set! car-speed (- car-speed\
    \ 1))\n        (set! car-speed (- car-speed 1))\n        (set! car-speed (- car-speed\
    \ 1))\n        (set! car-speed (- car-speed 1))\n        (set! car-speed (- car-speed\
    \ 1))\n        (set! car-speed (- car-speed 1))\n        (set! car-speed (- car-speed\
    \ 1))\n        (set! car-speed (- car-speed 1))\n        (set! car-speed (- car-speed\
    \ 1))\n        (set! car-speed (- car-speed 1))\n        (set! car-speed (- car-speed\
    \ 1))\n        (set! car-speed (- car-speed 1))\n        (set! car-speed (- car-speed\
    \ 1))\n        (set! car-speed (- car-speed 1))\n        (set! car-speed (- car-speed\
    \ 1))\n        (set! car-speed (- car-speed 1))\n        (set! car-speed (- car-speed\
    \ 1))\n        (set! car-speed (- car-speed 1))\n        (set! car-speed (- car-speed\
    \ 1))\n        (set! car-speed (- car-speed 1))\n        (set! car-speed (- car-speed\
    \ 1))\n        (set! car-speed (- car-speed 1))\n        (set! car-speed (- car-speed\
    \ 1))\n        (set! car-speed (- car-speed 1))\n        (set! car-speed (- car-speed\
    \ 1))\n        (set! car-speed (- car-speed 1))\n        (set! car-speed (- car-speed\
    \ 1))\n        (set! car-speed (- car-speed 1))\n        (set! car-speed (- car-speed\
    \ 1))\n        (set! car-speed (- car-speed 1))\n        (set! car-speed (", " \
    \ (let ((cars (make-array n '(list 'car))))\n    (define (collide a b)\n     \
    \ (< (car-speed a) (car-speed b))\n      (< (car-speed b) (car-speed a))\n   \
    \   (< (car-speed a) (car-speed b))\n      (< (car-speed b) (car-speed a))\n \
    \     (< (car-speed a) (car-speed b))\n      (< (car-speed b) (car-speed a))\n\
    \      (< (car-speed a) (car-speed b))\n      (< (car-speed b) (car-speed a)))\n\
    \    (define (collides a)\n      (cond ((null? a) 0)\n            ((collide (car\
    \ a) (car a)) (+ 1 (car-race (car a))))\n            (else (+ 1 (car-race (car\
    \ a))))))\n    (define (collides-all a)\n      (cond ((null? a) 0)\n         \
    \   ((collides a) (+ 1 (car-race (car a))))\n            (else (+ 1 (car-race\
    \ (car a))))))\n    (define (collides-all a b)\n      (cond ((null? a) 0)\n  \
    \          ((collides a) (+ 1 (car-race (car a))))\n            (else (+ 1 (car-race\
    \ (car a))))))\n    (define (collides-all a b c)\n      (cond ((null? a) 0)\n\
    \            ((collides a) (+ 1 (car-race (car a))))\n            (else (+ 1 (car-race\
    \ (car a))))))\n    (define (collides-all a b c d)\n      (cond ((null? a) 0)\n\
    \            ((collides a) (+ 1 (car-race (car a))))\n            (else (+ 1 (car-race\
    \ (car a))))))\n    (define (collides-all a b c d e)\n      (cond ((null? a) 0)\n\
    \            ((collides a) (+ 1 (car-race (car a))))\n            (else (+ 1 (car-race\
    \ (car a))))))\n    (define (collides-all a b c d e f)\n      (cond ((null? a)\
    \ 0)\n            ((collides a) (+ 1 (car-race (car a))))\n            (else (+\
    \ 1 (car-race (car a))))))\n", "  (let ((cars (make-array n '(list 'car))))\n\
    \    (dotimes (i n)\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (asso", "  (let ((cars (make-array n '(list 'car))))\n\
    \    (define (collide car cars)\n      (cond\n        ((null? cars) 0)\n     \
    \   ((eq? car cars) 1)\n        (else (+ 1 (collide (car cars) (cdr cars))))))\n\
    \    (let ((collisions 0))\n      (for ((i 0) (< i n))\n        (let ((collided\
    \ (collide (car cars) (car cars))))\n          (set! collisions (+ collisions\
    \ collided))\n          (set! cars (append (cdr cars) (car cars))))\n      (set!\
    \ collisions collisions))))\n", "  (define (collide a b)\n    (< (abs (- (car\
    \ a) (car b))) (car b)))\n  (define (collides a)\n    (filter (lambda (b) (collide\
    \ a b)) (cars a)))\n  (define (collides-all a)\n    (map (lambda (b) (collide\
    \ a b)) (cars a)))\n  (define (collides-all-pairs a)\n    (map (lambda (b) (collide\
    \ a b)) (cars a)))\n  (define (collides-all-pairs-all a)\n    (map (lambda (b)\
    \ (collide a b)) (cars a)))\n  (define (collides-all-pairs-all-all a)\n    (map\
    \ (lambda (b) (collide a b)) (cars a)))\n  (define (collides-all-pairs-all-all-all\
    \ a)\n    (map (lambda (b) (collide a b)) (cars a)))\n  (define (collides-all-pairs-all-all-all-all\
    \ a)\n    (map (lambda (b) (collide a b)) (cars a)))\n  (define (collides-all-pairs-all-all-all-all-all\
    \ a)\n    (map (lambda (b) (collide a b)) (cars a)))\n  (define (collides-all-pairs-all-all-all-all-all-a\
    \ a)\n    (map (lambda (b) (collide a b)) (cars a)))\n  (define (collides-all-pairs-all-all-all-all-all-all-a\
    \ a)\n    (map (lambda (b) (collide a b)) (cars a)))\n  (define (collides-all-pairs-all-all-all-all-all-all-all-a\
    \ a)\n    (map (lambda (b) (collide a b)) (cars a)))\n  (define (collides-all-pairs-all-all-all-all-all-all-all-a\
    \ a)\n    (map (lambda (b) (collide a b)) (cars a)))\n  (define (collides-all-pairs-all-all-all-all-all-all-all-all-a\
    \ a)\n    (map (lambda (b) (collide a b)) (cars a)))\n  (define (collides-all-pairs-all-all-all-all-all-all-all-all-all-a\
    \ a)\n    (map (lambda (b) (collide a b)) (cars a)))\n  (define (collides-all-pairs-all-all-all-all-all-all-all-all-all-a\
    \ a)\n    (map (lambda (b) (collide a b)) (cars a", "  (let ((cars (make-array\
    \ n #:element-type '(unsigned-byte 8))))\n    (dotimes (i n)\n      (set! cars\
    \ (make-array n #:element-type '(unsigned-byte 8)))\n      (set! cars (make-array\
    \ n #:element-type '(unsigned-byte 8)))\n      (set! cars (make-array n #:element-type\
    \ '(unsigned-byte 8)))\n      (set! cars (make-array n #:element-type '(unsigned-byte\
    \ 8)))\n      (set! cars (make-array n #:element-type '(unsigned-byte 8)))\n \
    \     (set! cars (make-array n #:element-type '(unsigned-byte 8)))\n      (set!\
    \ cars (make-array n #:element-type '(unsigned-byte 8)))\n      (set! cars (make-array\
    \ n #:element-type '(unsigned-byte 8)))\n      (set! cars (make-array n #:element-type\
    \ '(unsigned-byte 8)))\n      (set! cars (make-array n #:element-type '(unsigned-byte\
    \ 8)))\n      (set! cars (make-array n #:element-type '(unsigned-byte 8)))\n \
    \     (set! cars (make-array n #:element-type '(unsigned-byte 8)))\n      (set!\
    \ cars (make-array n #:element-type '(unsigned-byte 8)))\n      (set! cars (make-array\
    \ n #:element-type '(unsigned-byte 8)))\n      (set! cars (make-array n #:element-type\
    \ '(unsigned-byte 8)))\n      (set! cars (make-array n #:element-type '(unsigned-byte\
    \ 8)))\n      (set! cars (make-array n #:element-type '(unsigned-byte 8)))\n \
    \     (set! cars (make-array n #:element-type '(unsigned-byte 8)))\n      (set!\
    \ cars (make-array n #:element-type '(unsigned-byte 8)))\n      (set! cars (make-array\
    \ n #:element-type '(unsigned-byte 8)))\n      (set! cars (make-array n #:element-type\
    \ '(unsigned-byte 8)))\n      (set! cars (make-array n #:element-type '(unsigned-byte\
    \ 8)))\n      (set! cars (make-array n #:element-type '(unsigned-byte 8)))\n \
    \     (", "  (define (collide x y)\n    (cond ((< x y) 0)\n          ((< y n)\
    \ 0)\n          ((< x n) 0)\n          (else 1)))\n  (define (collides xs ys)\n\
    \    (cond ((null? xs) 0)\n          ((null? ys) 0)\n          ((< xs n) 0)\n\
    \          ((< ys n) 0)\n          ((< xs n) 0)\n          ((< ys n) 0)\n    \
    \      ((< xs n) 0)\n          ((< ys n) 0)\n          ((< xs n) 0)\n        \
    \  ((< ys n) 0)\n          ((< xs n) 0)\n          ((< ys n) 0)\n          ((<\
    \ xs n) 0)\n          ((< ys n) 0)\n          ((< xs n) 0)\n          ((< ys n)\
    \ 0)\n          ((< xs n) 0)\n          ((< ys n) 0)\n          ((< xs n) 0)\n\
    \          ((< ys n) 0)\n          ((< xs n) 0)\n          ((< ys n) 0)\n    \
    \      ((< xs n) 0)\n          ((< ys n) 0)\n          ((< xs n) 0)\n        \
    \  ((< ys n) 0)\n          ((< xs n) 0)\n          ((< ys n) 0)\n          ((<\
    \ xs n) 0)\n          ((< ys n) 0)\n          ((< xs n) 0)\n          ((< ys n)\
    \ 0)\n          ((< xs n) 0)\n          ((< ys n) 0)\n          ((< xs n) 0)\n\
    \          ((< ys n) 0)\n          ((< xs n) 0)\n          ((< ys n) 0)\n    \
    \      ((< xs n) 0)\n          ((< ys n) 0)\n          ((< xs n) 0)\n        \
    \  ((< ys n) 0)\n          ((< xs n) 0)\n          ((< ys n) 0)\n          ((<\
    \ xs n) 0)\n          ((< ys n) 0)\n          ((< xs n) 0)\n          ((< ys n)\
    \ 0)\n          ((< xs n) 0)\n          ((< ys n) 0)\n          ((< xs n) 0)\n\
    \          ((< y", "  (define (collide a b)\n    (< (abs (- a b)) n))\n  (define\
    \ (collides a)\n    (cond ((null? a) 0)\n          ((collide (car a) (car b))\n\
    \           (+ 1 (car-race_collision (- n 1))))\n          (else (+ 1 (car-race_collision\
    \ (- n 1))))))\n  (define (collides-list a)\n    (cond ((null? a) 0)\n       \
    \   ((collide (car a) (car b))\n           (+ 1 (car-race_collision (- n 1))))\n\
    \          (else (+ 1 (car-race_collision (- n 1))))\n          (else (+ 1 (car-race_collision\
    \ (- n 1)))))))\n", "  (define (collision x1 x2)\n    (cond\n      [(< x1 x2)\
    \ (+ n 1)]\n      [(> x1 x2) (+ n -1)]))\n  (define (collide x1 x2)\n    (cond\n\
    \      [(< x1 x2) (collision x1 x2)]\n      [(> x1 x2) (collision x2 x1)]))\n\
    \  (define (collides x1 x2)\n    (cond\n      [(< x1 x2) (collide x1 x2)]\n  \
    \    [(> x1 x2) (collide x2 x1)]))\n  (define (collides-list x1 x2)\n    (cond\n\
    \      [(< x1 x2) (cons x1 x2)]\n      [(> x1 x2) (cons x2 x1)]))\n  (define (collides-list-tail\
    \ x1 x2)\n    (cond\n      [(< x1 x2) (cons (cdr x1) x2)]\n      [(> x1 x2) (cons\
    \ (cdr x2) x1)]))\n  (define (collides-list-tails x1 x2)\n    (cond\n      [(<\
    \ x1 x2) (cons (cdr x1) (cons (cdr x2) (cons (car x2) (car x1))))]\n      [(>\
    \ x1 x2) (cons (cdr x2) (cons (cdr x1) (cons (car x1) (car x2))))]))\n  (define\
    \ (collides-list-tails-list x1 x2)\n    (cond\n      [(< x1 x2) (cons (cdr x1)\
    \ (cons (cdr x2) (cons (car x2) (cons (car x1) (cdr x1)))))]\n      [(> x1 x2)\
    \ (cons (cdr x2) (cons (cdr x1) (cons (car x1) (cons (car x2) (cdr x2))))))]))\n\
    \  (define (collides-list-tails-list-tail x1 x2)\n    (cond\n      [(< x1 x2)\
    \ (cons (cdr x1) (cons (cdr x2) (cons (car x2) (cons (car x1) (cdr (cdr x2))))))]\n\
    \      [(> x1 x2) (cons (cdr x2) (cons (cdr x1) (cons (car x1) (cons (car x2)\
    \ (cdr (cdr x1))))))]))\n  (define (collides-list-tails-list-tails x", "  (let\
    \ ((cars (make-array n '(list 'car))))\n    (define (collide i j)\n      (cond\
    \ ((< i j) (+ i 1))\n            ((< j i) (+ j 1))\n            (else (if (= (first\
    \ cars) (second cars))\n                      (+ 1 (car-race (sub1 i) (sub1 j)))\n\
    \                      (+ 1 (car-race (sub1 j) (sub1 i))))))\n    (let loop ((i\
    \ 0) (j 0))\n      (if (< i n)\n          (if (< j n)\n              (if (= i\
    \ j)\n                  (loop (+ i 1) (+ j 1))\n                  (loop (+ j 1)\
    \ (+ i 1)))\n              (loop (+ i 1) (+ j 1)))\n          (loop (+ i 1) (+\
    \ j 1))))\n    (loop (+ i 1) (+ j 1))))\n", "  (let ((cars (make-array n '(list\
    \ 'car))))\n    (dotimes (i n)\n      (set! cars (assoc i cars))\n      (let ((collided\
    \ (assoc i collided)))\n        (if (not (null? collided))\n            (set!\
    \ cars (cdr collided))\n            (set! cars (cons i cars)))))))\n", "  (let\
    \ ([cars (make-array (* n n) '(list '()))])\n    (define (collision i j)\n   \
    \   (cond [(= i j) (+ 1 (car-race (car cars) (car cars) (car cars) (car cars)))]\n\
    \            [(< i j) (+ 1 (collision (+ i 1) j))]\n            [else 0]))\n \
    \   (define (move i j)\n      (cond [(= i j) (+ 1 (car-race (car cars) (car cars)\
    \ (car cars) (car cars)))]\n            [(< i j) (+ 1 (move (+ i 1) j))]\n   \
    \         [else 0]))\n    (define (collide i j)\n      (cond [(= i j) (+ 1 (car-race\
    \ (car cars) (car cars) (car cars) (car cars)))]\n            [(< i j) (+ 1 (collide\
    \ (+ i 1) j))]\n            [else 0]))\n    (define (move i j)\n      (cond [(=\
    \ i j) (+ 1 (car-race (car cars) (car cars) (car cars) (car cars)))]\n       \
    \     [(< i j) (+ 1 (move (+ i 1) j))]\n            [else 0]))\n    (define (collide\
    \ i j)\n      (cond [(= i j) (+ 1 (car-race (car cars) (car cars) (car cars) (car\
    \ cars)))]\n            [(< i j) (+ 1 (collide (+ i 1) j))]\n            [else\
    \ 0]))\n    (define (move i j)\n      (cond [(= i j) (+ 1 (car-race (car cars)\
    \ (car cars) (car cars) (car cars)))]\n            [(< i j) (+ 1 (move (+ i 1)\
    \ j))]\n            [else 0]))\n    (define (collide i j)\n      (cond [(= i j)\
    \ (+ 1 (car-race (car cars) (car cars) (car cars) (car cars)))]\n            [(<\
    \ i j) (+ 1 (collide (+ i 1) j))]\n            [else 0]))\n    (define (move i\
    \ j)\n      (cond [(= i j) (+ 1 (car-race (car cars) (car cars) (car cars) (car\
    \ cars)))]\n            [(< i j) (+ 1 (move (+ i 1) j))]\n            [else 0]))\n\
    \    (define (collide i ", "  (let ([cars (make-array (* n n) '(list 'empty))])\n\
    \    (define (next-car)\n      (let ([car (car cars)])\n        (set! cars (cdr\
    \ cars))\n        car))\n    (define (collide? car next-car)\n      (< (car next-car)\
    \ (car car)))\n    (define (collide? car next-car)\n      (< (car next-car) (car\
    \ car)))\n    (define (collide? car next-car)\n      (< (car next-car) (car car)))\n\
    \    (define (collide? car next-car)\n      (< (car next-car) (car car)))\n  \
    \  (define (collide? car next-car)\n      (< (car next-car) (car car)))\n    (define\
    \ (collide? car next-car)\n      (< (car next-car) (car car)))\n    (define (collide?\
    \ car next-car)\n      (< (car next-car) (car car)))\n    (define (collide? car\
    \ next-car)\n      (< (car next-car) (car car)))\n    (define (collide? car next-car)\n\
    \      (< (car next-car) (car car)))\n    (define (collide? car next-car)\n  \
    \    (< (car next-car) (car car)))\n    (define (collide? car next-car)\n    \
    \  (< (car next-car) (car car)))\n    (define (collide? car next-car)\n      (<\
    \ (car next-car) (car car)))\n    (define (collide? car next-car)\n      (< (car\
    \ next-car) (car car)))\n    (define (collide? car next-car)\n      (< (car next-car)\
    \ (car car)))\n    (define (collide? car next-car)\n      (< (car next-car) (car\
    \ car)))\n    (define (collide? car next-car)\n      (< (car next-car) (car car)))\n\
    \    (define (collide? car next-car)\n      (< (car next-car) (car car)))\n  \
    \  (define (collide? car next-car)\n      (< (car next", "  (define (collides\
    \ car other-car)\n    (< (abs (car-x car)) (abs (other-car-x other-car))) \n \
    \   (< (abs (car-y car)) (abs (other-car-y other-car))) \n    (< (abs (car-x other-car))\
    \ (abs (car-x car))) \n    (< (abs (car-y other-car)) (abs (car-y car)))\n  )\n\
    \  (define (collides-list cars other-cars)\n    (cond ((null? other-cars) (cons\
    \ 0 (reverse (cars))))\n          ((null? cars) (cons 0 (reverse (other-cars))))\n\
    \          (else (let ((collides (car cars) (other-car (car other-cars))))\n \
    \                 (if (and (null? collides) (null? (cdr collides)))\n        \
    \              (cons 0 (reverse (cars))) (cons 0 (reverse (other-cars)))\n   \
    \                   (if (and (null? collides) (null? (cdr collides)))\n      \
    \                    (cons 0 (reverse (cars))) (cons 0 (reverse (other-cars)))\n\
    \                          (if (and (null? collides) (null? (cdr collides)))\n\
    \                              (cons 0 (reverse (cars))) (cons 0 (reverse (other-cars)))\n\
    \                              (if (and (null? collides) (null? (cdr collides)))\n\
    \                                  (cons 0 (reverse (cars))) (cons 0 (reverse\
    \ (other-cars)))\n                                  (if (and (null? collides)\
    \ (null? (cdr collides)))\n                                      (cons 0 (reverse\
    \ (cars))) (cons 0 (reverse (other-cars)))\n                                 \
    \     (if (and (null? collides) (null? (cdr collides)))\n                    \
    \                      (cons 0 (reverse (cars))) (cons 0 (reverse (other-cars)))\n\
    \                                          (if (and (null? collides) (null? (cdr\
    \ collides)))\n                                              (cons 0 (reverse\
    \ (cars))) (cons 0 (reverse (other-cars)))\n                                 \
    \             (if (and (null? collides) (null? (cdr collides)))\n            \
    \                                      (cons 0 (reverse (cars))) (cons 0 (reverse\
    \ (other-cars)))\n                                                  (if (and (null?\
    \ collides) (null? (cdr collides)))\n                                        \
    \              (cons 0 (reverse (cars))) (", "  (let ((cars (make-array n '(list\
    \ 'car))))\n    (define (collides car1 car2)\n      (< (car-speed car1) (car-speed\
    \ car2))\n      (< (car-speed car2) (car-speed car1))\n      (< (car-speed (car\
    \ car1)) (car-speed (car car2)))\n      (< (car-speed (car car2)) (car-speed (car\
    \ car1)))\n      (< (car-speed (car car1)) (car-speed (car car2)))\n      (< (car-speed\
    \ (car car2)) (car-speed (car car1)))\n      (< (car-speed (car car1)) (car-speed\
    \ (car car2)))\n      (< (car-speed (car car2)) (car-speed (car car1)))\n    \
    \  (< (car-speed (car car1)) (car-speed (car car2)))\n      (< (car-speed (car\
    \ car2)) (car-speed (car car1)))\n      (< (car-speed (car car1)) (car-speed (car\
    \ car2)))\n      (< (car-speed (car car2)) (car-speed (car car1)))\n      (< (car-speed\
    \ (car car1)) (car-speed (car car2)))\n      (< (car-speed (car car2)) (car-speed\
    \ (car car1)))\n      (< (car-speed (car car1)) (car-speed (car car2)))\n    \
    \  (< (car-speed (car car2)) (car-speed (car car1)))\n      (< (car-speed (car\
    \ car1)) (car-speed (car car2)))\n      (< (car-speed (car car2)) (car-speed (car\
    \ car1)))\n      (< (car-speed (car car1)) (car-speed (car car2)))\n      (< (car-speed\
    \ (car car2)) (car-speed (car car1)))\n      (< (car-speed (car car1)) (car-speed\
    \ (car car2)))\n      (< (car-speed (car car2)) (car-speed (car car1)))\n    \
    \  (< (car-speed (car car1)) (car-speed (car car2)))\n      (< (car-speed (car\
    \ car2)) (car-speed (car car1)))\n      (< (car-speed (car car1)) (car-speed (car\
    \ car2)))\n      (< (car-speed (car car2)) (car-speed (car car1)))\n      (< (car-speed\
    \ (car car1)) (car-speed (c", "  (let ((cars (make-array n '(list 'car))))\n \
    \   (dotimes (i n)\n      (set! cars (car-race (car cars) (car cars) (car cars))))\n\
    \    (length cars)))\n", "  (let ((cars (make-array n '(list 'car))))\n    (dotimes\
    \ (i n)\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (asso", "  (let ((cars (make-array n #:element-type 'car)))\n\
    \    (define (collide i j)\n      (if (= i j)\n          0\n          (if (> (car-x\
    \ cars) (car-x cars (+ i 1)))\n              (if (> (car-y cars) (car-y cars (+\
    \ i 1)))\n                  (if (> (car-x cars (+ j 1)) (- car-x cars (+ j 1)))\n\
    \                      (if (> (car-y cars (+ j 1)) (- car-y cars (+ j 1)))\n \
    \                         (+ 1 (collide (+ i 1) (+ j 1)))\n                  \
    \        (+ 1 (collide (+ i 1) (- j 1))))\n                      (+ 1 (collide\
    \ (+ i 1) (- j 1))))\n                  (+ 1 (collide (+ i 1) (+ j 1))))\n   \
    \           (+ 1 (collide (+ i 1) (- j 1))))\n          (+ 1 (collide (+ i 1)\
    \ (+ j 1)))))\n    (let loop ((i 0) (j 0))\n      (if (< i n)\n          (if (<\
    \ j n)\n              (if (> (car-x cars) (car-x cars (+ i 1)))\n            \
    \      (if (> (car-y cars) (car-y cars (+ i 1)))\n                      (if (>\
    \ (car-x cars (+ j 1)) (- car-x cars (+ j 1)))\n                          (if\
    \ (> (car-y cars (+ j 1)) (- car-y cars (+ j 1)))\n                          \
    \    (+ 1 (loop (+ i 1) (+ j 1)))\n                              (+ 1 (loop (+\
    \ i 1) (- j 1))))\n                          (+ 1 (loop (+ i 1) (- j 1))))\n \
    \                     (+ 1 (loop (+ i 1) (+ j 1))))\n                  (+ 1 (loop\
    \ (+ i 1) (- j 1))))\n              (+ 1 (loop (+ i 1) (+ j 1))))\n          (+\
    \ 1 (loop (+ i 1) (- j 1))))\n      (if (< i n)\n          (if (< j n)\n     \
    \         (if (> (car-x cars) (car-x cars (+ i 1)))\n                  (if (>\
    \ (car-y cars) (car-y cars (+ i 1)))\n                      (if (> (car-x cars\
    \ (+ j 1)) (- car-x cars (+ j 1)))\n                          (if (> (car-y cars\
    \ (+ j 1)) (", "  (let ((cars (make-array n '(list 'car))))\n    (define (collide\
    \ a b)\n      (< (car-x a) (car-x b))\n      (< (car-y a) (car-y b))\n      (<\
    \ (car-x b) (car-x a))\n      (< (car-y b) (car-y a)))\n    (define (collides\
    \ i j)\n      (cond ((or (< i n) (< j n)) 0)\n            ((and (< i 0) (< j 0))\
    \ 0)\n            (else (and (collide (car cars) (car cars)) (collide (car cars)\
    \ (car cars)))))\n    (define (collides-i i j)\n      (cond ((or (< i n) (< j\
    \ n)) 0)\n            ((and (< i 0) (< j 0)) 0)\n            (else (and (collides\
    \ i j) (collides i j))))\n    (define (collides-j i j)\n      (cond ((or (< i\
    \ n) (< j n)) 0)\n            ((and (< i 0) (< j 0)) 0)\n            (else (and\
    \ (collides i j) (collides i j))))\n    (define (collides-k i j)\n      (cond\
    \ ((or (< i n) (< j n)) 0)\n            ((and (< i 0) (< j 0)) 0)\n          \
    \  (else (and (collides i j) (collides i j))))\n    (define (collides-l i j)\n\
    \      (cond ((or (< i n) (< j n)) 0)\n            ((and (< i 0) (< j 0)) 0)\n\
    \            (else (and (collides i j) (collides i j))))\n    (define (collides-m\
    \ i j)\n      (cond ((or (< i n) (< j n)) 0)\n            ((and (< i 0) (< j 0))\
    \ 0)\n            (else (and (collides i j) (collides i j))))\n    (define (collides-n\
    \ i j)\n      (cond ((or (< i n) (< j n)) 0)\n            ((and (< i 0) (< j 0))\
    \ 0)\n            (else (and (collides i j) (collides i j))))\n    (define (collides-o\
    \ i j)\n      (cond ((or (< i n) (< j n)) 0)\n            ((and (< i 0) (< j 0))\
    \ 0)\n            (else (and (collides i j) (collide", "  (let ((cars (make-array\
    \ (* n n) '(lambda (i j) (+ i j)))))\n    (for ((i 0 (+ i n))\n          (j 0\
    \ (+ j n)))\n      (let ((car (cars i j)))\n        (if (< i j)\n            (let\
    \ ((other-car (cars j i)))\n              (if (= (car other-car) 0)\n        \
    \          (+ 1 (car-race_collision n)))\n                (+ 1 (car-race_collision\
    \ n))))))))\n", "  (define (collide a b)\n    (< (abs (- a b)) n))\n  (define\
    \ (collides a-list)\n    (if (null? a-list)\n        0\n        (+ (if (null?\
    \ (cdr a-list))\n              0\n              (if (and (> (car a-list) (car\
    \ b-list))\n                      (collide (car a-list) (car b-list)))\n     \
    \             1\n                  (if (and (< (car a-list) (car b-list))\n  \
    \                        (collide (car b-list) (car a-list)))\n              \
    \        1\n                      (if (collide (car a-list) (car b-list))\n  \
    \                        (collides (cdr a-list) (cons (car a-list) a-list))\n\
    \                          (collides (cdr b-list) (cons (car b-list) b-list))))))))\n\
    \  (if (< n 0)\n      0\n      (if (null? (cdr a-list))\n          0\n       \
    \   (if (and (> (car a-list) (car b-list))\n                  (collide (car a-list)\
    \ (car b-list)))\n              1\n              (if (and (< (car a-list) (car\
    \ b-list))\n                      (collide (car b-list) (car a-list)))\n     \
    \         1\n              (if (collide (car a-list) (car b-list))\n         \
    \         (collides (cdr a-list) (cons (car a-list) a-list))\n               \
    \   (collides (cdr b-list) (cons (car b-list) b-list)))))))\n  (car a-list))\n",
  "  (define (collide x y)\n    (cond\n      [(and (< x y) (car x)) (+ (car x) (car\
    \ y))]\n      [(and (> x y) (car x)) (+ (car x) (car y))]\n      [(and (< x y)\
    \ (car y)) (+ (car x) (car y))]\n      [(and (> x y) (car y)) (+ (car x) (car\
    \ y))]\n      [else 0]))\n  (define (collides xs ys)\n    (cond\n      [(empty?\
    \ xs) 0]\n      [(empty? ys) 0]\n      [(and (empty? xs) (empty? ys)) 0]\n   \
    \   [(and (< x (car xs)) (< y (car ys))) (+ (collide x y) (car (cdr xs)))]\n \
    \     [(and (> x (car xs)) (< y (car ys))) (+ (collide x y) (car (cdr ys)))]\n\
    \      [(and (< x (car ys)) (< y (car xs))) (+ (collide x y) (car (cdr xs)))]\n\
    \      [(and (> x (car ys)) (< y (car xs))) (+ (collide x y) (car (cdr ys)))]\n\
    \      [else (+ (collides (cdr xs) ys) (collides xs (cdr ys))))]))\n  (define\
    \ (collides-list xs ys)\n    (cond\n      [(empty? xs) '()]\n      [(empty? ys)\
    \ '()]\n      [(and (empty? xs) (empty? ys)) '()]\n      [(and (< x (car xs))\
    \ (< y (car ys))) (cons (+ (collide x y) (car (cdr xs))) '())]\n      [(and (>\
    \ x (car xs)) (< y (car ys))) (cons (+ (collide x y) (car (cdr ys))) '())]\n \
    \     [(and (< x (car ys)) (< y (car xs))) (cons (+ (collide x y) (car (cdr xs)))\
    \ '())]\n      [(and (> x (car ys)) (< y (car xs))) (cons (+ (collide x y) (car\
    \ (cdr ys))) '())]\n      [else (cons (+ (collides (cdr xs) ys) (collides x",
  "  (let ((cars (make-array n '(list 'car))))\n    (dotimes (i n)\n      (set! cars\
    \ (cdr cars))\n      (set! cars (make-array n '(list 'car)))\n      (set! cars\
    \ (make-array n '(list 'car)))\n      (set! cars (make-array n '(list 'car)))\n\
    \      (set! cars (make-array n '(list 'car)))\n      (set! cars (make-array n\
    \ '(list 'car)))\n      (set! cars (make-array n '(list 'car)))\n      (set! cars\
    \ (make-array n '(list 'car)))\n      (set! cars (make-array n '(list 'car)))\n\
    \      (set! cars (make-array n '(list 'car)))\n      (set! cars (make-array n\
    \ '(list 'car)))\n      (set! cars (make-array n '(list 'car)))\n      (set! cars\
    \ (make-array n '(list 'car)))\n      (set! cars (make-array n '(list 'car)))\n\
    \      (set! cars (make-array n '(list 'car)))\n      (set! cars (make-array n\
    \ '(list 'car)))\n      (set! cars (make-array n '(list 'car)))\n      (set! cars\
    \ (make-array n '(list 'car)))\n      (set! cars (make-array n '(list 'car)))\n\
    \      (set! cars (make-array n '(list 'car)))\n      (set! cars (make-array n\
    \ '(list 'car)))\n      (set! cars (make-array n '(list 'car)))\n      (set! cars\
    \ (make-array n '(list 'car)))\n      (set! cars (make-array n '(list 'car)))\n\
    \      (set! cars (make-array n '(list 'car)))\n      (set! cars (make-array n\
    \ '(list 'car)))\n      (set! cars (make-array n '(list 'car)))\n      (set! cars\
    \ (make-array n '(list 'car)))\n      (set! cars (make-array n '(list 'car)))\n\
    \      (set! cars (make-array n '(list 'car)))\n      (set! cars (make-array n\
    \ '(list 'car)))\n      (set! cars (make-array n '(list 'car)))\n      (set! cars\
    \ (make-array n '(list 'car)))\n", "  (let ((collisions 0))\n    (dotimes (i n)\n\
    \      (let ((car #:car (make-instance 'car)))\n        (set! car.speed 1)\n \
    \       (set! car.x 0)\n        (set! car.y 0)\n        (set! car.direction 0)\n\
    \        (set! car.collided false)\n        (set! car.colliding-to #f)\n     \
    \   (set! car.colliding-to car)\n        (set! car.colliding-to #f)\n        (set!\
    \ car.colliding-to #f)\n        (set! car.colliding-to #f)\n        (set! car.colliding-to\
    \ #f)\n        (set! car.colliding-to #f)\n        (set! car.colliding-to #f)\n\
    \        (set! car.colliding-to #f)\n        (set! car.colliding-to #f)\n    \
    \    (set! car.colliding-to #f)\n        (set! car.colliding-to #f)\n        (set!\
    \ car.colliding-to #f)\n        (set! car.colliding-to #f)\n        (set! car.colliding-to\
    \ #f)\n        (set! car.colliding-to #f)\n        (set! car.colliding-to #f)\n\
    \        (set! car.colliding-to #f)\n        (set! car.colliding-to #f)\n    \
    \    (set! car.colliding-to #f)\n        (set! car.colliding-to #f)\n        (set!\
    \ car.colliding-to #f)\n        (set! car.colliding-to #f)\n        (set! car.colliding-to\
    \ #f)\n        (set! car.colliding-to #f)\n        (set! car.colliding-to #f)\n\
    \        (set! car.colliding-to #f)\n        (set! car.colliding-to #f)\n    \
    \    (set! car.colliding-to #f)\n        (set! car.colliding-to #f)\n        (set!\
    \ car.colliding-to #f)\n        (set! car.colliding-to #f)\n        (set! car.colliding-to\
    \ #f)\n        (set! car.colliding-to #f)\n        (set! car.colliding-to #f)\n\
    \        (set! car.colliding-to #f)\n        (set! car.colliding-to ", "  (define\
    \ (collision car1 car2)\n    (cond\n      [(and (< car1 car2) (< car2 car1)) 0]\n\
    \      [(and (< car1 car2) (< car2 car2)) (+ n 1)]\n      [else (+ n 0)]))\n \
    \ (define (collide car1 car2)\n    (cond\n      [(and (< car1 car2) (< car2 car1))\
    \ 0]\n      [(and (< car1 car2) (< car2 car2)) (+ n 1)]\n      [else (+ n 0)]))\n\
    \  (define (collides cars)\n    (cond\n      [(null? cars) 0]\n      [(and (<\
    \ cars (car cars)) (< cars (cdr cars))) (+ n 1)]\n      [else (+ n 0)]))\n  (define\
    \ (collides-helper cars car)\n    (cond\n      [(null? cars) 0]\n      [(and (<\
    \ cars (car cars)) (< cars (cdr cars))) (+ n 1)]\n      [else (collides-helper\
    \ (cdr cars) car)]))\n  (define (collides-helper-helper cars car)\n    (cond\n\
    \      [(null? cars) 0]\n      [(and (< cars (car cars)) (< cars (cdr cars)))\
    \ (+ n 1)]\n      [else (collides-helper-helper (cdr cars) car)]))\n  (define\
    \ (collides-helper-helper-helper cars car)\n    (cond\n      [(null? cars) 0]\n\
    \      [(and (< cars (car cars)) (< cars (cdr cars))) (+ n 1)]\n      [else (collides-helper-helper-helper\
    \ (cdr cars) car)]))\n  (define (collides-helper-helper-helper-helper cars car)\n\
    \    (cond\n      [(null? cars) 0]\n      [(and (< cars (car cars)) (< cars (cdr\
    \ cars))) (+ n 1)]\n      [else (collides-helper-helper-helper-helper (cdr cars)\
    \ car)]))\n  (define (collides-helper-helper-helper-helper-helper cars car)\n\
    \    (cond\n      [(null? cars) 0]\n      [(and (< cars (car cars)) (< cars (cdr\
    \ cars))) (+ n 1)]\n      [else (collides-helper-helper-helper-helper-helper (cdr\
    \ cars) car)]))", "  (let ((cars (make-array n '(list 'car))))\n    (define (collide\
    \ a b)\n      (< (car-speed a) (car-speed b))\n      (< (car-speed b) (car-speed\
    \ a))\n      (< (car-speed a) (car-speed b))\n      (< (car-speed b) (car-speed\
    \ a))\n      (< (car-speed a) (car-speed b))\n      (< (car-speed b) (car-speed\
    \ a))\n      (< (car-speed a) (car-speed b))\n      (< (car-speed b) (car-speed\
    \ a))\n      (< (car-speed a) (car-speed b))\n      (< (car-speed b) (car-speed\
    \ a))\n      (< (car-speed a) (car-speed b))\n      (< (car-speed b) (car-speed\
    \ a))\n      (< (car-speed a) (car-speed b))\n      (< (car-speed b) (car-speed\
    \ a))\n      (< (car-speed a) (car-speed b))\n      (< (car-speed b) (car-speed\
    \ a))\n      (< (car-speed a) (car-speed b))\n      (< (car-speed b) (car-speed\
    \ a))\n      (< (car-speed a) (car-speed b))\n      (< (car-speed b) (car-speed\
    \ a))\n      (< (car-speed a) (car-speed b))\n      (< (car-speed b) (car-speed\
    \ a))\n      (< (car-speed a) (car-speed b))\n      (< (car-speed b) (car-speed\
    \ a))\n      (< (car-speed a) (car-speed b))\n      (< (car-speed b) (car-speed\
    \ a)))\n    (define (collides i j)\n      (cond ((< i j) (if (= i j) 1 0))\n \
    \           ((< i n) (if (= i n) 1 0))\n            ((< j n) (if (= j n) 1 0))\n\
    \            (else (if (and (< i j) (< j n)) (if (= i j) (if (= j n) 1 0)) 0)))\n\
    \      (if (and (< i n) (< j n)) (if (= i j) (if (= j n) 1 0)) 0)\n      (if (and\
    \ (< i n) (< j n)) (if (= i j) (if (= j n) 1 0)) 0)\n      (if (and (< i n) (<\
    \ j n)) (if (= i j", "  (define (collide a b)\n    (< (abs (- a b)) n))\n  (define\
    \ (collides a)\n    (cond ((null? a) 0)\n          ((collide (car a) (car b))\n\
    \           (+ 1 (car-race_collision (- n 1))))\n          (else (+ 1 (car-race_collision\
    \ (- n 1))) (collides (cdr a)))))\n  (collides (list n)))\n", "  (let ([cars (make-array\
    \ (+ n 1) (lambda (x) (+ x 1))\n                             (lambda (x) (+ x\
    \ 1))\n                             (lambda (x) (+ x 1)))])\n    (dotimes (i n)\n\
    \      (set! cars (make-array (+ n 1) (lambda (x) (+ x 1))\n                 \
    \              (lambda (x) (+ x 1))\n                               (lambda (x)\
    \ (+ x 1))))\n      (set! cars (make-array (+ n 1) (lambda (x) (+ x 1))\n    \
    \                           (lambda (x) (+ x 1))\n                           \
    \    (lambda (x) (+ x 1))))\n      (set! cars (make-array (+ n 1) (lambda (x)\
    \ (+ x 1))\n                               (lambda (x) (+ x 1))\n            \
    \                   (lambda (x) (+ x 1))))\n      (set! cars (make-array (+ n\
    \ 1) (lambda (x) (+ x 1))\n                               (lambda (x) (+ x 1))\n\
    \                               (lambda (x) (+ x 1))))\n      (set! cars (make-array\
    \ (+ n 1) (lambda (x) (+ x 1))\n                               (lambda (x) (+\
    \ x 1))\n                               (lambda (x) (+ x 1))))\n      (set! cars\
    \ (make-array (+ n 1) (lambda (x) (+ x 1))\n                               (lambda\
    \ (x) (+ x 1))\n                               (lambda (x) (+ x 1))))\n      (set!\
    \ cars (make-array (+ n 1) (lambda (x) (+ x 1))\n                            \
    \   (lambda (x) (+ x 1))\n                               (lambda (x) (+ x 1))))\n\
    \      (set! cars (make-array (+ n 1) (lambda (x) (+ x 1))\n                 \
    \              (lambda (x) (+ x 1))\n                               (lambda (x)\
    \ (+ x 1))))\n      (set! cars (make-array (+ n 1) (lambda (x) (+ x 1))\n    \
    \                           (lambda (x) (+ x 1))\n                           \
    \    (lambda (x) (+ x 1))))\n      (set! cars (make-array (+ n 1) (lambda (x)\
    \ (+ x 1))\n                               (lambda (x) (+ x 1))\n            \
    \                   (lambda (x) (+ x 1))))\n      (set! cars (make-array (+ n\
    \ 1) (lambda (x) (+ x 1))\n                               (lambda (x) (+ x 1))\n\
    \                               (lambda (x) (+ x 1))))\n      (set! cars (make-array\
    \ (+ n 1) (lambda (x) (+ x 1))\n                               (lambda (x) (+\
    \ x 1))\n                               (lambda (x) (+ x 1))))\n      (set! cars\
    \ (make-array (+ n 1) ", "  (let ((cars (make-array n #:element-type 'car)))\n\
    \    (define (collide i j)\n      (cond ((< i j) (+ i 1))\n            ((< j i)\
    \ (+ j 1))\n            (else (if (= (car cars i) (car cars j)) (+ i 1) (+ j 1)))))\n\
    \    (define (collides i j)\n      (cond ((< i j) (+ i 1))\n            ((< j\
    \ i) (+ j 1))\n            (else (if (= (car cars i) (car cars j)) (+ i 1) (+\
    \ j 1)))))\n    (define (collides-in i j)\n      (cond ((< i j) (+ i 1))\n   \
    \         ((< j i) (+ j 1))\n            (else (if (= (car cars i) (car cars j))\
    \ (+ i 1) (+ j 1)))))\n    (define (collides-in i j)\n      (cond ((< i j) (+\
    \ i 1))\n            ((< j i) (+ j 1))\n            (else (if (= (car cars i)\
    \ (car cars j)) (+ i 1) (+ j 1)))))\n    (define (collides-in i j)\n      (cond\
    \ ((< i j) (+ i 1))\n            ((< j i) (+ j 1))\n            (else (if (= (car\
    \ cars i) (car cars j)) (+ i 1) (+ j 1)))))\n    (define (collides-in i j)\n \
    \     (cond ((< i j) (+ i 1))\n            ((< j i) (+ j 1))\n            (else\
    \ (if (= (car cars i) (car cars j)) (+ i 1) (+ j 1)))))\n    (define (collides-in\
    \ i j)\n      (cond ((< i j) (+ i 1))\n            ((< j i) (+ j 1))\n       \
    \     (else (if (= (car cars i) (car cars j)) (+ i 1) (+ j 1)))))\n    (define\
    \ (collides-in i j)\n      (cond ((< i j) (+ i 1))\n            ((< j i) (+ j\
    \ 1))\n            (else (if (= (car cars i) (car cars j)) (+ i 1) (+ j 1)))))\n\
    \    (define (collides-in i j)\n      (cond ((< i j) (+ i 1))\n            ((<\
    \ j i) (+ j 1))\n            (else ", "  (define (collision car1 car2)\n    (cond\n\
    \      [(< car1 car2) 0]\n      [(> car1 car2) 1]\n      [else (+ collision (car1\
    \ car2) (car2 car1))]))\n  (define (collide car1 car2)\n    (cond\n      [(< car1\
    \ car2) 0]\n      [(> car1 car2) 1]\n      [else (+ collision (car1 car2) (car2\
    \ car1))]))\n  (define (collides cars)\n    (cond\n      [(< n cars) 0]\n    \
    \  [(> n cars) 1]\n      [else (+ (cars car1) (collides (cdr cars))))]))\n  (define\
    \ (collides-list cars)\n    (cond\n      [(< n cars) 0]\n      [(> n cars) 1]\n\
    \      [else (cons (cars car1) (collides-list (cdr cars))))]))\n  (define (collides-list-list\
    \ cars)\n    (cond\n      [(< n cars) 0]\n      [(> n cars) 1]\n      [else (cons\
    \ (cars car1) (cons (collides-list-list (cdr cars)) (cars car1)))]))\n  (define\
    \ (collides-list-list-list cars)\n    (cond\n      [(< n cars) 0]\n      [(> n\
    \ cars) 1]\n      [else (cons (cars car1) (cons (cons (collides-list-list-list\
    \ (cdr cars)) (cars car1)) (cars car1)))]))\n  (define (collides-list-list-list-list\
    \ cars)\n    (cond\n      [(< n cars) 0]\n      [(> n cars) 1]\n      [else (cons\
    \ (cars car1) (cons (cons (cons (collides-list-list-list-list (cdr cars)) (cars\
    \ car1)) (cars car1)) (cars car1)))]))\n  (define (collides-list-list-list-list-list\
    \ cars)\n    (cond\n      [(< n cars) 0]\n      [(> n cars) 1]\n      [else (cons\
    \ (cars car1) (cons (cons (cons (cons (collides-list-list-list-list-list (cdr\
    \ cars)) (cars car1)) (cars car1)) (cars car1)) (cars car1)))]))\n  (define (collides-list-list-list-list-list-list\
    \ cars)\n    (cond\n      [(< n cars) 0]\n      [(> ", "  (let ((cars (make-array\
    \ n '(list 'car))))\n    (define (collision i j)\n      (cond\n        ((= i j)\
    \ 0)\n        ((< i j) (+ (car-speed (car cars i)) (car-speed (car cars j)))\n\
    \        ((> i j) (+ (car-speed (car cars j)) (car-speed (car cars i)))\n    \
    \    (else (collision (+ i 1) (+ j 1)))))\n    (define (collide i j)\n      (cond\n\
    \        ((= i j) 0)\n        ((< i j) (collision (+ i 1) j)\n        ((> i j)\
    \ (collision i (+ j 1)))))\n    (define (collides i j)\n      (cond\n        ((=\
    \ i j) 0)\n        ((< i j) (collide i j)\n        ((> i j) (collide (+ i 1) j))))\n\
    \    (define (collides-in i j)\n      (cond\n        ((= i j) 0)\n        ((<\
    \ i j) (collides i j)\n        ((> i j) (collides (+ i 1) j))))\n    (define (collides-in\
    \ i j)\n      (cond\n        ((= i j) 0)\n        ((< i j) (collides i j)\n  \
    \      ((> i j) (collides (+ i 1) j))))\n    (define (collides-in i j)\n     \
    \ (cond\n        ((= i j) 0)\n        ((< i j) (collides i j)\n        ((> i j)\
    \ (collides (+ i 1) j))))\n    (define (collides-in i j)\n      (cond\n      \
    \  ((= i j) 0)\n        ((< i j) (collides i j)\n        ((> i j) (collides (+\
    \ i 1) j))))\n    (define (collides-in i j)\n      (cond\n        ((= i j) 0)\n\
    \        ((< i j) (collides i j)\n        ((> i j) (collides (+ i 1) j))))\n \
    \   (define (collides-in i j)\n      (cond\n        ((= i j) 0)\n        ((< i\
    \ j) (collides i j)\n        ((> i j) (collides (+ i 1) j))))\n    (define (collides-in\
    \ i j)\n      (cond\n        ((= i j) 0)\n        ((< i j) (collides ", "  (define\
    \ (collision x y)\n    (cond ((< x y) 0)\n          ((< y n) 0)\n          (else\
    \ (+ 1 (collision (- x 1) y))))))\n  (define (collides x y)\n    (cond ((< x y)\
    \ 0)\n          ((< y n) 0)\n          (else (collision x y))))\n  (define (collides-loop\
    \ x y)\n    (cond ((< x y) 0)\n          ((< y n) 0)\n          (else (collides-loop\
    \ (- x 1) y))))\n  (define (collides-loop-loop x y)\n    (cond ((< x y) 0)\n \
    \         ((< y n) 0)\n          (else (collides-loop-loop (- x 1) y))))\n  (define\
    \ (collides-loop-loop-loop x y)\n    (cond ((< x y) 0)\n          ((< y n) 0)\n\
    \          (else (collides-loop-loop-loop (- x 1) y))))\n  (define (collides-loop-loop-loop-loop\
    \ x y)\n    (cond ((< x y) 0)\n          ((< y n) 0)\n          (else (collides-loop-loop-loop-loop\
    \ (- x 1) y))))\n  (define (collides-loop-loop-loop-loop-loop x y)\n    (cond\
    \ ((< x y) 0)\n          ((< y n) 0)\n          (else (collides-loop-loop-loop-loop-loop\
    \ (- x 1) y))))\n  (define (collides-loop-loop-loop-loop-loop-loop x y)\n    (cond\
    \ ((< x y) 0)\n          ((< y n) 0)\n          (else (collides-loop-loop-loop-loop-loop-loop\
    \ (- x 1) y))))\n  (define (collides-loop-loop-loop-loop-loop-loop x y)\n    (cond\
    \ ((< x y) 0)\n          ((< y n) 0)\n          (else (collides-loop-loop-loop-loop-loop-loop\
    \ (- x 1) y))))\n  (define (collides-loop-loop-loop-loop-loop-loop-loop x y)\n\
    \    (cond ((< x y) 0)\n          ((< y n) 0)\n          (else (collides-loop-loop-loop-loop-loop-loop-loop\
    \ (- x ", "  (let ((cars (make-array n '(list 'car))))\n    (dotimes (i n)\n \
    \     (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (asso", "  (let ((cars (make-array n #:element-type 'car)))\n    (define\
    \ (collides car other-car)\n      (< (car-speed car) (car-speed other-car))\n\
    \      (< (car-speed other-car) (car-speed car))\n      (< (car-speed car) (car-speed\
    \ other-car))\n      (< (car-speed other-car) (car-speed car))\n      (< (car-speed\
    \ car) (car-speed other-car))\n      (< (car-speed other-car) (car-speed car))\n\
    \      (< (car-speed car) (car-speed other-car))\n      (< (car-speed other-car)\
    \ (car-speed car))\n      (< (car-speed car) (car-speed other-car))\n      (<\
    \ (car-speed other-car) (car-speed car))\n      (< (car-speed car) (car-speed\
    \ other-car))\n      (< (car-speed other-car) (car-speed car))\n      (< (car-speed\
    \ car) (car-speed other-car))\n      (< (car-speed other-car) (car-speed car))\n\
    \      (< (car-speed car) (car-speed other-car))\n      (< (car-speed other-car)\
    \ (car-speed car))\n      (< (car-speed car) (car-speed other-car))\n      (<\
    \ (car-speed other-car) (car-speed car))\n      (< (car-speed car) (car-speed\
    \ other-car))\n      (< (car-speed other-car) (car-speed car))\n      (< (car-speed\
    \ car) (car-speed other-car))\n      (< (car-speed other-car) (car-speed car))\n\
    \      (< (car-speed car) (car-speed other-car))\n      (< (car-speed other-car)\
    \ (car-speed car))\n      (< (car-speed car) (car-speed other-car))\n      (<\
    \ (car-speed other-car) (car-speed car))\n      (< (car-speed car) (car-speed\
    \ other-car))\n      (< (car-speed other-car) (car-speed car))\n      (< (car-speed\
    \ car) (car-speed other-car))\n      (< (car-speed other-car) (car-speed car))\n\
    \      (< (", "  (define (collide? a b)\n    (< (abs (- a b)) n))\n  (define (collides\
    \ a)\n    (filter (lambda (b) (not (collide? a b)))\n            (range n)))\n\
    \  (define (collides a)\n    (filter (lambda (b) (not (collide? a b)))\n     \
    \       (range n)))\n  (define (collides a)\n    (filter (lambda (b) (not (collide?\
    \ a b)))\n            (range n)))\n  (define (collides a)\n    (filter (lambda\
    \ (b) (not (collide? a b)))\n            (range n)))\n  (define (collides a)\n\
    \    (filter (lambda (b) (not (collide? a b)))\n            (range n)))\n  (define\
    \ (collides a)\n    (filter (lambda (b) (not (collide? a b)))\n            (range\
    \ n)))\n  (define (collides a)\n    (filter (lambda (b) (not (collide? a b)))\n\
    \            (range n)))\n  (define (collides a)\n    (filter (lambda (b) (not\
    \ (collide? a b)))\n            (range n)))\n  (define (collides a)\n    (filter\
    \ (lambda (b) (not (collide? a b)))\n            (range n)))\n  (define (collides\
    \ a)\n    (filter (lambda (b) (not (collide? a b)))\n            (range n)))\n\
    \  (define (collides a)\n    (filter (lambda (b) (not (collide? a b)))\n     \
    \       (range n)))\n  (define (collides a)\n    (filter (lambda (b) (not (collide?\
    \ a b)))\n            (range n)))\n  (define (collides a)\n    (filter (lambda\
    \ (b) (not (collide? a b)))\n            (range n)))\n  (define (collides a)\n\
    \    (filter (lambda (b) (not (collide? a b)))\n            (range n)))\n  (define\
    \ (collides a)\n    (filter (lambda (b) (not (collide? a b)))\n            (range\
    \ n)))\n  (define (collides a)\n    (filter (lambda (b) (not (collide? a b)))\n\
    \            (range n)))\n  (define (collides a)\n    (filter (lambda (b) (not\
    \ (collide? a b)))\n            (range n)))\n  (define (collides a)\n    (filter\
    \ (lambda (b) (not (colli", "  (let ((cars (make-array n '(list 'car))))\n   \
    \ (dotimes (i n)\n      (set! cars (car-race cars i))\n      (set! cars (car-race\
    \ (cars i) (i)))\n      (set! cars (car-race (cars i) (i))))\n    (length (car-race\
    \ (cars 0) (n)))))\n", "  (define (collision car1 car2)\n    (cond\n      [(<\
    \ (distance car1 car2) n) 0]\n      [(> (distance car1 car2) n) 1]\n      [else\
    \ (+ (collision car1 (cdr car2)) (collision car2 (cdr car1)))]))\n  (define (collide\
    \ car1 car2)\n    (cond\n      [(< (distance car1 car2) n) 0]\n      [(> (distance\
    \ car1 car2) n) 1]\n      [else (collision car1 car2)]))\n  (define (collides\
    \ cars)\n    (cond\n      [(empty? cars) 0]\n      [(collide (car cars) (car cars))\
    \ (+ 1 (collides (cdr cars)))]))\n  (collides (list cars)))\n", "  (let ((cars\
    \ (make-array n '(list 'car))))\n    (define (collide a b)\n      (< (car-speed\
    \ a) (car-speed b))\n      (< (car-speed b) (car-speed a))\n      (< (car-speed\
    \ a) (car-speed b))\n      (< (car-speed b) (car-speed a))\n      (< (car-speed\
    \ a) (car-speed b))\n      (< (car-speed b) (car-speed a))\n      (< (car-speed\
    \ a) (car-speed b))\n      (< (car-speed b) (car-speed a)))\n    (define (collides\
    \ a)\n      (let ((collided (empty-set)))\n        (do ((i 0 (+ i 1))\n      \
    \       (a (car a))\n             (b (cdr a)))\n          (if (or (null? b)\n\
    \                  (null? (cdr b)))\n              (if (and (not (member a collided))\n\
    \                      (collide a b))\n                  (cons a collided)\n \
    \                 (do ((j (+ i 1))\n                       (collided (cons a collided)))\n\
    \                    (if (or (null? j)\n                            (null? (cdr\
    \ j)))\n                        (if (and (not (member b collided))\n         \
    \                       (collide b j))\n                            (cons b collided)\n\
    \                            (do ((j (+ j 1))\n                              \
    \   (collided (cons b collided)))\n                              (if (or (null?\
    \ j)\n                                      (null? (cdr j)))\n               \
    \                   (if (and (not (member a collided))\n                     \
    \                     (collide a j))\n                                  (cons\
    \ a collided)\n                                  (do ((j (+ j 1))\n          \
    \                             (collided (cons b collided)))\n                \
    \                    (if (or (null? j)\n                                     \
    \        (null? (cdr j)))\n                                    (if (and (not (member\
    \ b collided))\n                                             (collide b j))\n\
    \                                    (cons b collided)\n                     \
    \               (do ((j (+ j 1))\n                                         (collided\
    \ (cons a collided)))\n                                      (if (or (null? j)\n\
    \                                              (null? (cdr j)))\n            \
    \                          (if (and (not (member a collided))\n              \
    \                                (collide a j))\n                            \
    \          (cons a collided)\n                                      (do ((j (+\
    \ j 1))\n                                           (collided (cons b collided)))\n\
    \                                        (if (or (", "  (define (collision x y)\n\
    \    (cond ((and (< x n) (< y n)) 0)\n          ((and (< y n) (< x n)) 0)\n  \
    \        ((and (< y n) (< x n) (< y n)) 0)\n          ((and (< x n) (< y n) (<\
    \ x n)) 0)\n          ((and (< x n) (< y n) (< x n) (< y n)) 0)\n          ((and\
    \ (< x n) (< y n) (< x n) (< y n) (< x n)) 0)\n          ((and (< x n) (< y n)\
    \ (< x n) (< y n) (< x n) (< y n)) 0)\n          ((and (< x n) (< y n) (< x n)\
    \ (< y n) (< x n) (< y n) (< x n)) 0)\n          ((and (< x n) (< y n) (< x n)\
    \ (< y n) (< x n) (< y n) (< x n) (< y n)) 0)\n          ((and (< x n) (< y n)\
    \ (< x n) (< y n) (< x n) (< y n) (< x n) (< y n) (< x n)) 0)\n          ((and\
    \ (< x n) (< y n) (< x n) (< y n) (< x n) (< y n) (< x n) (< y n) (< x n) (< y\
    \ n)) 0)\n          ((and (< x n) (< y n) (< x n) (< y n) (< x n) (< y n) (< x\
    \ n) (< y n) (< x n) (< y n) (< x n)) 0)\n          ((and (< x n) (< y n) (< x\
    \ n) (< y n) (< x n) (< y n) (< x n) (< y n) (< x n) (< y n) (< x n) (< y n))\
    \ 0)\n          ((and (< x n) (< y n) (< x n) (< y n) (< x n) (< y n) (< x n)\
    \ (< y n) (< x n) (< y n) (< x n) (< y n) (< x n)) 0)\n          ((and (< x n)\
    \ (< y n) (< x n) (< y n) (< x n) (< y n) (< x n) (< y n) (< x n) (< y n) (< x\
    \ n) (< y n) (< ", "  (let ((cars (make-array n '(list 'car))))\n    (dotimes\
    \ (i n)\n      (let ((c (car cars)))\n        (set! cars (cdr cars))\n       \
    \ (set! cars (cons c cars))\n        (set! cars (cons (car cars) cars))\n    \
    \    (set! cars (cons (car cars) cars))\n        (set! cars (cons (car cars) cars))\n\
    \        (set! cars (cons (car cars) cars))\n        (set! cars (cons (car cars)\
    \ cars))\n        (set! cars (cons (car cars) cars))\n        (set! cars (cons\
    \ (car cars) cars))\n        (set! cars (cons (car cars) cars))\n        (set!\
    \ cars (cons (car cars) cars))\n        (set! cars (cons (car cars) cars))\n \
    \       (set! cars (cons (car cars) cars))\n        (set! cars (cons (car cars)\
    \ cars))\n        (set! cars (cons (car cars) cars))\n        (set! cars (cons\
    \ (car cars) cars))\n        (set! cars (cons (car cars) cars))\n        (set!\
    \ cars (cons (car cars) cars))\n        (set! cars (cons (car cars) cars))\n \
    \       (set! cars (cons (car cars) cars))\n        (set! cars (cons (car cars)\
    \ cars))\n        (set! cars (cons (car cars) cars))\n        (set! cars (cons\
    \ (car cars) cars))\n        (set! cars (cons (car cars) cars))\n        (set!\
    \ cars (cons (car cars) cars))\n        (set! cars (cons (car cars) cars))\n \
    \       (set! cars (cons (car cars) cars))\n        (set! cars (cons (car cars)\
    \ cars))\n        (set! cars (cons (car cars) cars))\n        (set! cars (cons\
    \ (car cars) cars))\n        (set! cars (cons (car cars) cars))\n        (set!\
    \ cars (cons (car cars) cars))\n        (set! cars (cons (car cars) cars))\n \
    \       (set! cars (cons (car cars) cars))\n        (set! cars (cons (car cars) ",
  "  (let ([cars (make-array (* n n) '(list 'empty))])\n    (define (collide x y)\n\
    \      (cond\n        ((and (empty? x) (empty? y))\n         (length (cars x)))\n\
    \        ((and (empty? y) (empty? x))\n         (length (cars y)))\n        ((empty?\
    \ x) (empty? y))\n        ((empty? y) (empty? x))\n        ((< (car x) (car y))\n\
    \         (+ (car x) (car y)))\n        (else\n         (+ (car x) (car y))))\n\
    \    (let ([i (- n 1)])\n      (do ([i (+ i 1)])\n        ((< i n)\n         (do\
    \ ([j (- i 1)])\n           ((< j n)\n            (set! cars (set! cars (make-array\
    \ (* n n) '(list 'empty))\n                           (set! cars (set! cars (make-array\
    \ (* n n) '(list 'empty))\n                                         (set! cars\
    \ (make-array (* n n) '(list 'empty))\n                                      \
    \   (set! cars (make-array (* n n) '(list 'empty))\n                         \
    \                (set! cars (make-array (* n n) '(list 'empty))\n            \
    \                             (set! cars (make-array (* n n) '(list 'empty))\n\
    \                                         (set! cars (make-array (* n n) '(list\
    \ 'empty))\n                                         (set! cars (make-array (*\
    \ n n) '(list 'empty))\n                                         (set! cars (make-array\
    \ (* n n) '(list 'empty))\n                                         (set! cars\
    \ (make-array (* n n) '(list 'empty))\n                                      \
    \   (set! cars (make-array (* n n) '(list 'empty))\n                         \
    \                (set! cars (make-array (* n n) '(list 'empty))\n            \
    \                             (set! cars (make-array (* n n) '(list 'empty))\n\
    \                                         (set! cars (make-array (* n n) '(list\
    \ 'empty))\n                                         (set! cars (make-array (*\
    \ n n) '(list 'empty))\n                                         (set! cars (make-array\
    \ (* n n) '(list 'empty))\n                                         (set! cars\
    \ (make-array (* n n) '(list 'empty))\n                                      \
    \   (", "  (let ((cars (make-array n '(list 'car)))\n        (collisions '()))\n\
    \    (for ((i 0) (< n 0))\n      (let ((car (cars i)))\n        (if (< (car 0)\
    \ (car 1))\n            (set! collisions (cons i collisions))\n            (set!\
    \ cars (cdr cars))\n            (set! i (+ i 1))\n            (set! cars (cons\
    \ car cars))))\n      (set! n (- n 1))\n      (set! collisions (cons (car 0) collisions))))\n\
    \  (car collisions))\n", "  (define (collision x y)\n    (cond ((and (< x n) (<\
    \ y n)) 0)\n          ((and (< y n) (< x n)) 0)\n          ((and (< y n) (< x\
    \ n) (< y n)) 0)\n          ((and (< x n) (< y n) (< x n)) 0)\n          ((and\
    \ (< x n) (< y n) (< x n) (< y n)) 0)\n          ((and (< x n) (< y n) (< x n)\
    \ (< y n) (< x n)) 0)\n          ((and (< x n) (< y n) (< x n) (< y n) (< x n)\
    \ (< y n)) 0)\n          ((and (< x n) (< y n) (< x n) (< y n) (< x n) (< y n)\
    \ (< x n)) 0)\n          ((and (< x n) (< y n) (< x n) (< y n) (< x n) (< y n)\
    \ (< x n) (< y n)) 0)\n          ((and (< x n) (< y n) (< x n) (< y n) (< x n)\
    \ (< y n) (< x n) (< y n) (< x n)) 0)\n          ((and (< x n) (< y n) (< x n)\
    \ (< y n) (< x n) (< y n) (< x n) (< y n) (< x n) (< y n)) 0)\n          ((and\
    \ (< x n) (< y n) (< x n) (< y n) (< x n) (< y n) (< x n) (< y n) (< x n) (< y\
    \ n) (< x n)) 0)\n          ((and (< x n) (< y n) (< x n) (< y n) (< x n) (< y\
    \ n) (< x n) (< y n) (< x n) (< y n) (< x n) (< y n)) 0)\n          ((and (< x\
    \ n) (< y n) (< x n) (< y n) (< x n) (< y n) (< x n) (< y n) (< x n) (< y n) (<\
    \ x n) (< y n) (< x n)) 0)\n          ((and (< x n) (< y n) (< x n) (< y n) (<\
    \ x n) (< y n) (< x n) (< y n) (< x n) (< y n) (< x n) (< y n) (< ", "  (let ((cars\
    \ (make-array n '(list 'car))))\n    (define (collides car1 car2)\n      (< (car-x\
    \ car1) (car-x car2))\n      (< (car-y car1) (car-y car2))\n      (< (car-speed\
    \ car1) (car-speed car2))\n      (< (car-speed car1) (car-speed car2))\n     \
    \ (< (car-speed car1) (car-speed car2))\n      (< (car-speed car1) (car-speed\
    \ car2))\n      (< (car-speed car1) (car-speed car2))\n      (< (car-speed car1)\
    \ (car-speed car2))\n      (< (car-speed car1) (car-speed car2))\n      (< (car-speed\
    \ car1) (car-speed car2))\n      (< (car-speed car1) (car-speed car2))\n     \
    \ (< (car-speed car1) (car-speed car2))\n      (< (car-speed car1) (car-speed\
    \ car2))\n      (< (car-speed car1) (car-speed car2))\n      (< (car-speed car1)\
    \ (car-speed car2))\n      (< (car-speed car1) (car-speed car2))\n      (< (car-speed\
    \ car1) (car-speed car2))\n      (< (car-speed car1) (car-speed car2))\n     \
    \ (< (car-speed car1) (car-speed car2))\n      (< (car-speed car1) (car-speed\
    \ car2))\n      (< (car-speed car1) (car-speed car2))\n      (< (car-speed car1)\
    \ (car-speed car2))\n      (< (car-speed car1) (car-speed car2))\n      (< (car-speed\
    \ car1) (car-speed car2))\n      (< (car-speed car1) (car-speed car2))\n     \
    \ (< (car-speed car1) (car-speed car2))\n      (< (car-speed car1) (car-speed\
    \ car2))\n      (< (car-speed car1) (car-speed car2))\n      (< (car-speed car1)\
    \ (car-speed car2))\n      (< (car-speed car1) (car-speed car2))\n      (< (car-speed\
    \ car1) (car-speed car2))\n      (< (car-speed car1) (car-speed car2))\n     \
    \ (< (car-speed car1) (car-speed car2))\n      (< (car-speed car1) (car-speed\
    \ car2))\n      (< (car-speed car1) (car-", "  (let ((collisions 0))\n    (for\
    \ ((i n) (j n))\n      (if (= i j)\n          (set! collisions (+ collisions 1))\n\
    \          (set! collisions (+ collisions 0))))))\n", "  (let ((cars (make-array\
    \ (* n n) '(cons car))))\n    (define (collide x y)\n      (let ((x (car x))\n\
    \            (car (car y)))\n        (cond\n          [(< x y) 0]\n          [(<\
    \ y n) 0]\n          [else (+ 1 (car-race x y))]))\n    (let ((i (- n 1)))\n \
    \     (do ((i i 1))\n          ((< i n) (set! cars (make-array (* n n) '(cons\
    \ car))))\n          (do ((j i 1))\n              ((< j n) (set! cars (make-array\
    \ (* n n) '(cons car))))\n              (do ((k i 1))\n                  ((< k\
    \ n) (set! cars (make-array (* n n) '(cons car))))\n                  (do ((l\
    \ j 1))\n                      ((< l n) (set! cars (make-array (* n n) '(cons\
    \ car))))\n                      (do ((m k 1))\n                          ((<\
    \ m n) (set! cars (make-array (* n n) '(cons car))))\n                       \
    \   (do ((n l 1))\n                              ((< n n) (set! cars (make-array\
    \ (* n n) '(cons car))))\n                              (do ((o m 1))\n      \
    \                            ((< o n) (set! cars (make-array (* n n) '(cons car))))\n\
    \                                  (do ((p o 1))\n                           \
    \           ((< p n) (set! cars (make-array (* n n) '(cons car))))\n         \
    \                             (do ((q p 1))\n                                \
    \          ((< q n) (set! cars (make-array (* n n) '(cons car))))\n          \
    \                                (do ((s q 1))\n                             \
    \                 ((< s n) (set! cars (make-array (* n n) '(cons car))))\n   \
    \                                           (do ((t s 1))\n                  \
    \                                ((< t n) (set! cars (make-array (* n n) '(cons\
    \ car))))\n                                                  (do ((u t 1))\n \
    \                                                     ((< u n) (set! cars (make-array\
    \ (* n n) '(cons car))))\n                                                   \
    \   (do ((v u 1))\n                                                          ((<\
    \ v n) (set! cars (make-array (* n n) '(cons car))))", "  (let ((cars (make-array\
    \ (+ n 1) (list 'car))))\n    (dotimes (i n)\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc (- i 1) cars))\n      (set! cars (assoc (- i 2) cars))\n\
    \      (set! cars (assoc (- i 3) cars))\n      (set! cars (assoc (- i 4) cars))\n\
    \      (set! cars (assoc (- i 5) cars))\n      (set! cars (assoc (- i 6) cars))\n\
    \      (set! cars (assoc (- i 7) cars))\n      (set! cars (assoc (- i 8) cars))\n\
    \      (set! cars (assoc (- i 9) cars))\n      (set! cars (assoc (- i 10) cars))\n\
    \      (set! cars (assoc (- i 11) cars))\n      (set! cars (assoc (- i 12) cars))\n\
    \      (set! cars (assoc (- i 13) cars))\n      (set! cars (assoc (- i 14) cars))\n\
    \      (set! cars (assoc (- i 15) cars))\n      (set! cars (assoc (- i 16) cars))\n\
    \      (set! cars (assoc (- i 17) cars))\n      (set! cars (assoc (- i 18) cars))\n\
    \      (set! cars (assoc (- i 19) cars))\n      (set! cars (assoc (- i 20) cars))\n\
    \      (set! cars (assoc (- i 21) cars))\n      (set! cars (assoc (- i 22) cars))\n\
    \      (set! cars (assoc (- i 23) cars))\n      (set! cars (assoc (- i 24) cars))\n\
    \      (set! cars (assoc (- i 25) cars))\n      (set! cars (assoc (- i 26) cars))\n\
    \      (set! cars (assoc (- i 27) cars))\n      (set! cars (assoc (- i 28) cars))\n\
    \      (set! cars (assoc (- i 29) cars))\n      (set! cars (assoc (- i 30) cars))\n\
    \      (set! cars (assoc (- i 31) cars))\n      (set! cars (assoc (- i 32) cars))\n\
    \      (set! cars (asso", "  (define (collision x y)\n    (cond ((< x y) 0)\n\
    \          ((< y n) 0)\n          (else (+ 1 (collision (- x 1) (- y 1))))))\n\
    \  (collision 0 n))\n", "  (let ([cars (make-array (list n (make-array n #f #f)))])\n\
    \    (define (collide x y)\n      (cond ((or (= x y) (car x))\n             (cond\
    \ ((< y 0) (cond ((< x 0) (cond ((< y n) (set! cars ((+ x 1) y) (set! cars ((-\
    \ x 1) y))))\n                               (else (cond ((< x 0) (cond ((< y\
    \ n) (set! cars ((+ y 1) x) (set! cars ((- y 1) x))))\n                      \
    \                     (else (cond ((< x n) (set! cars ((+ x 1) y) (set! cars ((-\
    \ x 1) y))))\n                                                  (else (cond ((<\
    \ y n) (set! cars ((+ y 1) x) (set! cars ((- y 1) x))))\n                    \
    \                                      (else (cond ((< x n) (set! cars ((+ x 1)\
    \ y) (set! cars ((- x 1) y))))\n                                             \
    \                     (else (cond ((< y n) (set! cars ((+ y 1) x) (set! cars ((-\
    \ y 1) x))))\n                                                          (else\
    \ (cond ((< x n) (set! cars ((+ x 1) y) (set! cars ((- x 1) y))))\n          \
    \                                                        (else (cond ((< y n)\
    \ (set! cars ((+ y 1) x) (set! cars ((- y 1) x))))\n                         \
    \                                 (else (cond ((< x n) (set! cars ((+ x 1) y)\
    \ (set! cars ((- x 1) y))))\n                                                \
    \                  (else (cond ((< y n) (set! cars ((+ y 1) x) (set! cars ((-\
    \ y 1) x))))\n                                                          (else\
    \ (cond ((< x n) (set! cars ((+ x 1) y) (set! cars ((- x 1) y))))\n          \
    \                                                        (else (cond ((< y n)\
    \ (set! cars ((+ y 1) x) (set! cars ((- y 1) x))))\n                         \
    \                                 (else (cond ((< x n) (set! cars ((+ x 1) y)\
    \ (set! cars ((- x 1) y))))\n                                                \
    \                  (else (cond ((< y n) (set! cars ((+ y 1) x) (set! cars ((-\
    \ y 1) x))))\n                                                          (else\
    \ (cond ", "  (define (collision car1 car2)\n    (cond ((and (< car1 car2) (<\
    \ car2 car1))\n           (+ car1 car2))\n          ((and (< car1 car2) (< car2\
    \ car1))\n           (+ car2 car1))\n          ((and (< car1 car2) (< car2 car1))\n\
    \           (+ car1 car2))\n          (else\n           (+ car2 car1))))\n  (define\
    \ (collide car1 car2)\n    (cond ((and (< car1 car2) (< car2 car1))\n        \
    \   (+ car1 car2))\n          ((and (< car1 car2) (< car2 car1))\n           (+\
    \ car2 car1))\n          ((and (< car1 car2) (< car2 car1))\n           (+ car1\
    \ car2))\n          (else\n           (+ car2 car1))))\n  (define (collides cars)\n\
    \    (cond ((null? cars)\n           0)\n          ((and (< (car cars) (car (cdr\
    \ cars)))\n               (< (car cars) (car (cddr cars))))\n           (+ 1 (car\
    \ (car cars))))\n          ((and (< (car cars) (car (cdr cars)))\n           \
    \    (< (car cars) (car (cddr cars))))\n           (+ 1 (car (car cars))))\n \
    \         ((and (< (car cars) (car (cdr cars)))\n               (< (car cars)\
    \ (car (cddr cars))))\n           (+ 1 (car (car cars))))\n          (else\n \
    \          (+ 1 (car (car cars))))))\n  (define (collides_helper cars car)\n \
    \   (cond ((null? cars)\n           0)\n          ((and (< (car cars) (car (cdr\
    \ cars)))\n               (< (car cars) (car (cddr cars))))\n           (+ 1 (car\
    \ (car cars))))\n          ((and (< (car cars) (car (cdr cars)))\n           \
    \    (< (car cars) (car (cddr cars))))\n           (+ 1 (car (car cars))))\n \
    \         ((and (< (car cars) (car (cdr cars)))\n               (< (car cars)\
    \ (car (cddr cars))))\n           (+ 1 (car (car cars))))\n          (else\n \
    \          (+ 1 (car", "  (let ((cars (make-array n #:element-type '(unsigned-byte\
    \ 8))))\n    (dotimes (i n)\n      (set! cars (make-array n #:element-type '(unsigned-byte\
    \ 8)))\n      (set! cars (make-array n #:element-type '(unsigned-byte 8)))\n \
    \     (set! cars (make-array n #:element-type '(unsigned-byte 8)))\n      (set!\
    \ cars (make-array n #:element-type '(unsigned-byte 8)))\n      (set! cars (make-array\
    \ n #:element-type '(unsigned-byte 8)))\n      (set! cars (make-array n #:element-type\
    \ '(unsigned-byte 8)))\n      (set! cars (make-array n #:element-type '(unsigned-byte\
    \ 8)))\n      (set! cars (make-array n #:element-type '(unsigned-byte 8)))\n \
    \     (set! cars (make-array n #:element-type '(unsigned-byte 8)))\n      (set!\
    \ cars (make-array n #:element-type '(unsigned-byte 8)))\n      (set! cars (make-array\
    \ n #:element-type '(unsigned-byte 8)))\n      (set! cars (make-array n #:element-type\
    \ '(unsigned-byte 8)))\n      (set! cars (make-array n #:element-type '(unsigned-byte\
    \ 8)))\n      (set! cars (make-array n #:element-type '(unsigned-byte 8)))\n \
    \     (set! cars (make-array n #:element-type '(unsigned-byte 8)))\n      (set!\
    \ cars (make-array n #:element-type '(unsigned-byte 8)))\n      (set! cars (make-array\
    \ n #:element-type '(unsigned-byte 8)))\n      (set! cars (make-array n #:element-type\
    \ '(unsigned-byte 8)))\n      (set! cars (make-array n #:element-type '(unsigned-byte\
    \ 8)))\n      (set! cars (make-array n #:element-type '(unsigned-byte 8)))\n \
    \     (set! cars (make-array n #:element-type '(unsigned-byte 8)))\n      (set!\
    \ cars (make-array n #:element-type '(unsigned-byte 8)))\n      (set! cars (make-array\
    \ n #:element-type '(unsigned-byte 8)))\n      (", "  (let ((cars (make-array\
    \ n '(list 'car))))\n    (define (collide a b)\n      (< (car-speed a) (car-speed\
    \ b))\n      (< (car-speed b) (car-speed a))\n      (< (car-speed a) (car-speed\
    \ b))\n      (< (car-speed b) (car-speed a))\n      (< (car-speed a) (car-speed\
    \ b))\n      (< (car-speed b) (car-speed a))\n      (< (car-speed a) (car-speed\
    \ b))\n      (< (car-speed b) (car-speed a))\n      (< (car-speed a) (car-speed\
    \ b))\n      (< (car-speed b) (car-speed a))\n      (< (car-speed a) (car-speed\
    \ b))\n      (< (car-speed b) (car-speed a))\n      (< (car-speed a) (car-speed\
    \ b))\n      (< (car-speed b) (car-speed a))\n      (< (car-speed a) (car-speed\
    \ b))\n      (< (car-speed b) (car-speed a)))\n    (define (collides i j)\n  \
    \    (and (<= i j)\n           (not (and (<= (+ i 1) n)\n                    \
    \ (<= (+ j 1) n))))\n      (and (<= (+ i 1) n)\n           (<= (+ j 1) n)\n  \
    \         (not (and (<= i j)\n                     (<= (+ i 1) n)\n          \
    \           (<= (+ j 1) n))))\n      (and (<= i j)\n           (not (and (<= (+\
    \ i 1) n)\n                     (<= (+ j 1) n))))\n      (and (<= (+ i 1) n)\n\
    \           (<= (+ j 1) n)\n           (not (and (<= i j)\n                  \
    \   (<= (+ i 1) n)\n                     (<= (+ j 1) n))))\n      (and (<= i j)\n\
    \           (not (and (<= (+ i 1) n)\n                     (<= (+ j 1) n))))\n\
    \      (and (<= (+ i 1) n)\n           (<= (+ j 1) n)\n           (not (and (<=\
    \ i j)\n                     (<= (+ i 1) n)\n                     (<= (+ j 1)\
    \ n))))\n      (and (<= i j)\n           (not (and (<= (+ i 1) n)\n          \
    \           (<= (+ j 1) n))))\n      (and (<= (+ i 1) n)\n           (<= (+ j\
    \ 1) n)\n           (not (and (<= i j)\n                     (<= (+ i 1) n)\n\
    \                     (<= (+ j 1) n))))", "  (let ((cars (make-array n '(list\
    \ 'car))))\n    (dotimes (i n)\n      (set! cars (assoc i cars))\n      (let ((colliding\
    \ (assoc i cars)))\n        (if (null? colliding)\n            (set! cars (cons\
    \ i cars))\n            (set! cars (cons (car colliding) (cons (cdr colliding)\
    \ cars)))))))\n", "  (let ((cars (make-array n '(list 'car))))\n    (dotimes (i\
    \ n)\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n   \
    \   (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (asso", "  (let ((cars (make-array n '(list 'car))))\n    (define\
    \ (collide i j)\n      (cond ((= i j) 0)\n            ((> (car cars) (car cars\
    \ (+ i 1))) 0)\n            (else (< (car cars) (car cars (+ j 1))))\n       \
    \     (else (+ (car cars) (car cars (+ i 1))))))\n    (let ((collisions 0))\n\
    \      (for ((i 0) (j n) (k 0))\n        (if (and (= i j) (= k n))\n         \
    \   (set! collisions (+ collisions 1))\n            (set! cars (append cars (list\
    \ car (+ i 1))))\n            (set! collisions (+ collisions 0))\n           \
    \ (set! cars (append cars (list car (+ j 1))))\n            (set! collisions (+\
    \ collisions 0))\n            (set! cars (append cars (list car (+ k 1))))\n \
    \           (set! collisions (+ collisions 0))\n            (set! cars (append\
    \ cars (list car (+ i 1))))\n            (set! collisions (+ collisions 0))\n\
    \            (set! cars (append cars (list car (+ j 1))))\n            (set! collisions\
    \ (+ collisions 0))\n            (set! cars (append cars (list car (+ k 1))))\n\
    \            (set! collisions (+ collisions 0))\n            (set! cars (append\
    \ cars (list car (+ i 1))))\n            (set! collisions (+ collisions 0))\n\
    \            (set! cars (append cars (list car (+ j 1))))\n            (set! collisions\
    \ (+ collisions 0))\n            (set! cars (append cars (list car (+ k 1))))\n\
    \            (set! collisions (+ collisions 0))\n            (set! cars (append\
    \ cars (list car (+ i 1))))\n            (set! collisions (+ collisions 0))\n\
    \            (set! cars (append cars (list car (+ j 1))))\n            (set! collisions\
    \ (+ collisions 0))\n            (set! cars (append cars (list car (+ k 1))))\n\
    \            (set! collisions (+ collisions 0))\n            (set! cars (append\
    \ cars (list car (+ i 1))))\n            (set! collisions (+ collisions 0))\n\
    \            (set! cars (append cars (list car (+ j 1))))\n            (set! collisions\
    \ (+ collisions 0))\n            (set! cars (append cars (list car (+ k 1))))\n\
    \            (set! collisions (+ collisions ", "  (define (collide x y)\n    (if\
    \ (< x y)\n        (if (> (+ x y) n)\n            (if (> (- x y) n)\n        \
    \        (if (> (- y x) n)\n                    (if (> (+ y x) n)\n          \
    \              0\n                        (+ 1 (collide (- x y) y)))\n       \
    \             (+ 1 (collide x (- y x))))\n                (+ 1 (collide x (+ y\
    \ x))))\n        (+ 1 (collide (- x y) y))))\n  (collide 0 n))\n", "  (let ((cars\
    \ (make-array n #:element-type 'car)))\n    (dotimes (i n)\n      (set! cars (make-array\
    \ n #:element-type 'car))\n      (set! cars (make-array n #:element-type 'car))\n\
    \      (set! cars (make-array n #:element-type 'car))\n      (set! cars (make-array\
    \ n #:element-type 'car))\n      (set! cars (make-array n #:element-type 'car))\n\
    \      (set! cars (make-array n #:element-type 'car))\n      (set! cars (make-array\
    \ n #:element-type 'car))\n      (set! cars (make-array n #:element-type 'car))\n\
    \      (set! cars (make-array n #:element-type 'car))\n      (set! cars (make-array\
    \ n #:element-type 'car))\n      (set! cars (make-array n #:element-type 'car))\n\
    \      (set! cars (make-array n #:element-type 'car))\n      (set! cars (make-array\
    \ n #:element-type 'car))\n      (set! cars (make-array n #:element-type 'car))\n\
    \      (set! cars (make-array n #:element-type 'car))\n      (set! cars (make-array\
    \ n #:element-type 'car))\n      (set! cars (make-array n #:element-type 'car))\n\
    \      (set! cars (make-array n #:element-type 'car))\n      (set! cars (make-array\
    \ n #:element-type 'car))\n      (set! cars (make-array n #:element-type 'car))\n\
    \      (set! cars (make-array n #:element-type 'car))\n      (set! cars (make-array\
    \ n #:element-type 'car))\n      (set! cars (make-array n #:element-type 'car))\n\
    \      (set! cars (make-array n #:element-type 'car))\n      (set! cars (make-array\
    \ n #:element-type 'car))\n      (set! cars (make-array n #:element-type 'car))\n\
    \      (set! cars (make-array n #:element-type 'car))\n      (set! cars (make-array\
    \ n #:element-type 'car))\n      (set! cars (make-array n #:element-", "  (let\
    \ ((cars (make-array n '(list 'car))))\n    (define (collides car other-car)\n\
    \      (< (car-speed car) (car-speed other-car))\n      (< (car-speed other-car)\
    \ (car-speed car))\n      (< (car-speed car) (car-speed other-car))\n      (<\
    \ (car-speed other-car) (car-speed car))\n      (< (car-speed car) (car-speed\
    \ other-car))\n      (< (car-speed other-car) (car-speed car))\n      (< (car-speed\
    \ car) (car-speed other-car))\n      (< (car-speed other-car) (car-speed car))\n\
    \      (< (car-speed car) (car-speed other-car))\n      (< (car-speed other-car)\
    \ (car-speed car))\n      (< (car-speed car) (car-speed other-car))\n      (<\
    \ (car-speed other-car) (car-speed car))\n      (< (car-speed car) (car-speed\
    \ other-car))\n      (< (car-speed other-car) (car-speed car))\n      (< (car-speed\
    \ car) (car-speed other-car))\n      (< (car-speed other-car) (car-speed car))\n\
    \      (< (car-speed car) (car-speed other-car))\n      (< (car-speed other-car)\
    \ (car-speed car))\n      (< (car-speed car) (car-speed other-car))\n      (<\
    \ (car-speed other-car) (car-speed car))\n      (< (car-speed car) (car-speed\
    \ other-car))\n      (< (car-speed other-car) (car-speed car))\n      (< (car-speed\
    \ car) (car-speed other-car))\n      (< (car-speed other-car) (car-speed car))\n\
    \      (< (car-speed car) (car-speed other-car))\n      (< (car-speed other-car)\
    \ (car-speed car))\n      (< (car-speed car) (car-speed other-car))\n      (<\
    \ (car-speed other-car) (car-speed car))\n      (< (car-speed car) (car-speed\
    \ other-car))\n      (< (car-speed other-car) (car-speed car))\n      (< (car-",
  "  (let ((cars (make-array n '(list 'car))))\n    (dotimes (i n)\n      (set! cars\
    \ (assoc i cars))\n      (set! cars (assoc 0 (cars cars))))\n    (let ((collisions\
    \ (make-array n '(list 0))))\n      (dotimes (i n)\n        (let ((car cars i)\n\
    \              (other-car cars (+ i 1)))\n          (cond ((< (car car) (car other-car))\n\
    \                 (set! collisions (append collisions (list i))))\n          \
    \      ((> (car car) (car other-car))\n                 (set! collisions (append\
    \ collisions (list i))))\n                (else (set! collisions (append collisions\
    \ (list i))))))))\n    (length (sort collisions #'<))))\n", "  (let ((cars (make-array\
    \ n #:element-type 'car)))\n    (define (collision i j)\n      (cond\n       \
    \ ((= i j) 0)\n        ((< i j) (+ (car-speed (car cars)) (car-speed (car (cdr\
    \ cars)))))\n        (else (+ (car-speed (car cars)) (car-speed (car (car cars))))))\n\
    \    (let ((collisions (make-array n #:element-type 'int)))\n      (do ((i 0 (+\
    \ i 1))\n           (j (+ i 1) (+ j 1)))\n          ((< i n) (set! collisions\
    \ (vector-set! collisions (vector-ref collisions i) (collision i j))))\n     \
    \     ((< j n) (set! collisions (vector-set! collisions (vector-ref collisions\
    \ j) (collision i j))))\n          (set! collisions (vector-set! collisions (vector-ref\
    \ collisions i) (collision i j))))\n      (vector-ref collisions 0))))\n", " \
    \ (define (collision car1 car2)\n    (cond\n      [(< car1 car2) 0]\n      [(>\
    \ car1 car2) 1]\n      [else (+ 1 (collision car2 (- car1 car2)))]))\n  (define\
    \ (collide car1 car2)\n    (cond\n      [(< car1 car2) 0]\n      [(> car1 car2)\
    \ 1]\n      [else (+ 1 (collide car2 (- car1 car2)))]))\n  (define (collides cars)\n\
    \    (cond\n      [(null? cars) 0]\n      [(collide (car cars) (car cars)) (inc\
    \ (collides (cdr cars)))]\n      [else (inc (collides (cdr cars)))]))\n  (define\
    \ (collides-list cars)\n    (cond\n      [(null? cars) '()]\n      [(collide (car\
    \ cars) (car cars)) (cons (car cars) (collides-list (cdr cars)))]\n      [else\
    \ (cons (car cars) (collides-list (cdr cars)))]))\n  (define (collides-list-cons\
    \ cars car)\n    (cond\n      [(null? cars) (cons car cars)]\n      [(collide\
    \ (car cars) (car cars)) (cons car cars (cons car cars))]\n      [else (cons car\
    \ cars (cons car cars))]))\n  (define (collides-list-cons-list cars car)\n   \
    \ (cond\n      [(null? cars) (cons car cars)]\n      [(collide (car cars) (car\
    \ cars)) (cons car cars (cons car cars))]\n      [else (cons car cars (cons car\
    \ cars))]))\n  (define (collides-list-cons-list-cons cars car)\n    (cond\n  \
    \    [(null? cars) (cons car cars)]\n      [(collide (car cars) (car cars)) (cons\
    \ car cars (cons car cars))]\n      [else (cons car cars (cons car cars))]))\n\
    \  (define (collides-list-cons-list-cons-list cars car)\n    (cond\n      [(null?\
    \ cars) (cons car cars)]\n      [(collide (car cars) (car cars)) (cons car cars\
    \ (cons car ", "  (define (collision car1 car2)\n    (cond [(< (distance car1\
    \ car2) n) 0]\n          [(> (distance car1 car2) n) 1]\n          [else (collision\
    \ (cdr car1) (cdr car2))]))\n  (define (collide car1 car2)\n    (cond [(< (distance\
    \ car1 car2) n) 0]\n          [(> (distance car1 car2) n) 1]\n          [else\
    \ (collision car1 (cdr car2))]))\n  (define (collides cars)\n    (cond [(null?\
    \ cars) 0]\n          [(collide (car cars) (car cars)) (incf (car cars))]\n  \
    \        [else (incf (collides (cdr cars)))]))\n  (collides cars))\n", "  (let\
    \ ([cars (make-array n #:initial-contents '(#f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f ", "  (define (collide a b)\n    (< (abs (- a b)) n))\n  (cond ((<\
    \ n 0)\n         0)\n        ((< n (floor (/ n 2)))\n         (cond ((< n (floor\
    \ (/ n 4)))\n                (cond ((< n (floor (/ n 8)))\n                  \
    \    (cond ((< n (floor (/ n 16)))\n                            (cond ((< n (floor\
    \ (/ n 32)))\n                                  (cond ((< n (floor (/ n 64)))\n\
    \                                        (cond ((< n (floor (/ n 128)))\n    \
    \                                          (cond ((< n (floor (/ n 256)))\n  \
    \                                                  (cond ((< n (floor (/ n 512)))\n\
    \                                                          (cond ((< n (floor\
    \ (/ n 1024)))\n                                                             \
    \       (cond ((< n (floor (/ n 2048)))\n                                    \
    \                                        (cond ((< n (floor (/ n 4096)))\n   \
    \                                                                       (cond\
    \ ((< n (floor (/ n 8192)))\n                                                \
    \                                    (cond ((< n (floor (/ n 16384)))\n      \
    \                                                                            \
    \        (cond ((< n (floor (/ n 32768)))\n                                  \
    \                                                              (cond ((< n (floor\
    \ (/ n 65536)))\n                                                            \
    \                                          (cond ((< n (floor (/ n 131072)))\n\
    \                                                                            \
    \                                (cond ((< n (floor (/ n 262144)))\n         \
    \                                                                            \
    \                             (cond ((< n (floor (/ n 524288)))\n            \
    \                                                                            \
    \                                (cond ((< n (floor (/ n 1048576)))\n        \
    \                                                                            \
    \                                          (cond ((< n (floor (/ n 2097152)))\n\
    \                                                                            \
    \                                                        (cond ((< n (floor (/\
    \ n 4194304)))\n                                                             \
    \                                                                            \
    \   (cond ((< n (floor (/ n 8388608)))\n                                     \
    \                                                                            \
    \                                 (cond ((< n (floor (/ n 16777216)))\n      \
    \                                                                            \
    \                                                                       (cond\
    \ ((< n (floor (/ n 33554432)))\n                                            \
    \                                                                            \
    \                                      (cond ((< n (floor (/ n 67108864)))\n \
    \                                                                            \
    \                                                                            \
    \           (cond ((< n (floor (/ n 134217728)))\n                           \
    \                                                                            \
    \                                                                   (cond ((<\
    \ n (floor (/ n 268435456)))\n                                               \
    \                                                                            \
    \                                                     (cond ((< n (floor (/ n\
    \ 536", "  (let ((cars (make-array n '(list 'car))))\n    (dotimes (i n)\n   \
    \   (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (asso", "  (let ([cars (make-array (* n n) '(list '()))])\n    (define\
    \ (collision i j)\n      (if (= i j)\n          0\n          (if (> (car-x cars)\
    \ (car-x cars (+ i 1)))\n              (if (> (car-x cars (+ i 1)) (- j 1))\n\
    \                  (+ 1 (collision (+ i 1) (- j 1))))\n              (if (< (car-x\
    \ cars) (car-x cars (+ j 1)))\n                  (if (< (car-x cars (+ j 1)) (-\
    \ i 1))\n                      (+ 1 (collision (- i 1) (+ j 1)))))))\n    (let\
    \ ([i (- n 1)])\n      (let ([j (- n 1)])\n        (if (= i j)\n            (if\
    \ (= i 0)\n                (if (= j 0)\n                    0\n              \
    \      (+ 1 (collision i j)))\n                (+ 1 (collision i j)))\n      \
    \      (if (= j 0)\n                (if (= i 0)\n                    0\n     \
    \               (+ 1 (collision i j)))\n                (+ 1 (collision i j)))\n\
    \            (if (= i j)\n                (if (= i 0)\n                    (if\
    \ (= j 0)\n                        0\n                        (+ 1 (collision\
    \ i j)))\n                    (+ 1 (collision i j)))\n                (+ 1 (collision\
    \ i j)))\n            (if (= j 0)\n                (if (= i 0)\n             \
    \       (if (= j 0)\n                        0\n                        (+ 1 (collision\
    \ i j)))\n                    (+ 1 (collision i j)))\n                (+ 1 (collision\
    \ i j)))\n            (if (= i j)\n                (if (= i 0)\n             \
    \       (if (= j 0)\n                        0\n                        (+ 1 (collision\
    \ i j)))\n                    (+ 1 (collision i j)))\n                (+ 1 (collision\
    \ i j)))\n            (if (= j 0)\n                (if (= i 0)\n             \
    \       (if (= j 0)\n                        0\n                        (+ 1 (collision\
    \ i j)))\n                    (+ 1 (collision i j)))\n                (+ 1 (collision\
    \ i j)))\n            (if (= i j)\n                (if (= i 0)\n             \
    \       (if (= j 0)\n                        0\n                        (+ 1 (collision\
    \ i j)))\n                    (+ 1 (collision i j)))\n                (+ 1 (collision\
    \ i j)))\n            (if (= j 0)\n                (if (= i 0)\n             \
    \       (if (= j 0)\n                        0\n                        (+ 1 (collision\
    \ i j)))\n                    (+ 1 (collision i j)))\n                (+ 1 (",
  "  (define (collide a b)\n    (< (abs (- a b)) n))\n  (define (collides a)\n   \
    \ (cond ((null? a) 0)\n          ((collide (car a) (car b)) (+ 1 (collides (cdr\
    \ a))))\n          (else (collides (cdr a))))\n  (define (collides-list a)\n \
    \   (cond ((null? a) 0)\n          ((collide (car a) (car b)) (+ 1 (collides-list\
    \ (cdr a))))\n          (else (collides-list (cdr a))))\n  (define (collides-list-2\
    \ a)\n    (cond ((null? a) 0)\n          ((collide (car a) (car b)) (+ 1 (collides-list-2\
    \ (cdr a))))\n          (else (collides-list-2 (cdr a))))\n  (define (collides-list-3\
    \ a)\n    (cond ((null? a) 0)\n          ((collide (car a) (car b)) (+ 1 (collides-list-3\
    \ (cdr a))))\n          (else (collides-list-3 (cdr a))))\n  (define (collides-list-4\
    \ a)\n    (cond ((null? a) 0)\n          ((collide (car a) (car b)) (+ 1 (collides-list-4\
    \ (cdr a))))\n          (else (collides-list-4 (cdr a))))\n  (define (collides-list-5\
    \ a)\n    (cond ((null? a) 0)\n          ((collide (car a) (car b)) (+ 1 (collides-list-5\
    \ (cdr a))))\n          (else (collides-list-5 (cdr a))))\n  (define (collides-list-6\
    \ a)\n    (cond ((null? a) 0)\n          ((collide (car a) (car b)) (+ 1 (collides-list-6\
    \ (cdr a))))\n          (else (collides-list-6 (cdr a))))\n  (define (collides-list-7\
    \ a)\n    (cond ((null? a) 0)\n          ((collide (car a) (car b)) (+ 1 (collides-list-7\
    \ (cdr a))))\n          (else (collides-list-7 (cdr a))))\n  (define (collides-list-8\
    \ a)\n    (cond ((null? a) ", "  (let ((cars (make-array n '(list 'car))))\n \
    \   (dotimes (i n)\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ 0 (cars cars))))\n    (let ((collisions 0))\n      (dotimes (i (length cars))\n\
    \        (let ((car (car cars i)))\n          (if (> (car-x car) (car-x cars))\n\
    \              (set! collisions (+ collisions 1))\n              (set! collisions\
    \ (+ collisions 0))))))\n    collisions))\n", "  (let ([cars (make-array n #(vector\
    \ (make-vector n #x) (make-vector n #x))))\n        (car-speed (make-array n #(vector\
    \ (make-vector n #x) (make-vector n #x))))\n        (car-speed (make-array n #(vector\
    \ (make-vector n #x) (make-vector n #x))))\n        (car-speed (make-array n #(vector\
    \ (make-vector n #x) (make-vector n #x))))\n        (car-speed (make-array n #(vector\
    \ (make-vector n #x) (make-vector n #x))))\n        (car-speed (make-array n #(vector\
    \ (make-vector n #x) (make-vector n #x))))\n        (car-speed (make-array n #(vector\
    \ (make-vector n #x) (make-vector n #x))))\n        (car-speed (make-array n #(vector\
    \ (make-vector n #x) (make-vector n #x))))\n        (car-speed (make-array n #(vector\
    \ (make-vector n #x) (make-vector n #x))))\n        (car-speed (make-array n #(vector\
    \ (make-vector n #x) (make-vector n #x))))\n        (car-speed (make-array n #(vector\
    \ (make-vector n #x) (make-vector n #x))))\n        (car-speed (make-array n #(vector\
    \ (make-vector n #x) (make-vector n #x))))\n        (car-speed (make-array n #(vector\
    \ (make-vector n #x) (make-vector n #x))))\n        (car-speed (make-array n #(vector\
    \ (make-vector n #x) (make-vector n #x))))\n        (car-speed (make-array n #(vector\
    \ (make-vector n #x) (make-vector n #x))))\n        (car-speed (make-array n #(vector\
    \ (make-vector n #x) (make-vector n #x))))\n        (car-speed (make-array n #(vector\
    \ (make-vector n #x) (make-vector n #x))))\n        (car-speed (make-array n #(vector\
    \ (make-vector n #x) (make-vector n #x))))\n        (car-speed (make-array n #(vector\
    \ (make-vector n #x) (make-vector n #x))))\n        (car-speed (make-array n #(vector\
    \ (make-vector n #x) (", "  (let ((cars (make-array n '(list 'car)))\n       \
    \ (car-speed (make-array n '(list 'car)))\n        (collisions (make-array n '(list\
    \ 'car))))\n    (dotimes (i n)\n      (set! car-speed (car car-speed)\n      \
    \      (car cars)\n            (set! collisions (car-race (car cars) (car car-speed)))\n\
    \          (set! cars (cdr cars))\n          (set! car-speed (cdr car-speed))\n\
    \          (set! collisions (car-race (cdr cars) (cdr car-speed))))\n    (length\
    \ collisions)))\n", "  (let ((cars (make-array n '(list 'car)))\n        (collisions\
    \ (make-array n '(list 0))))\n    (dotimes (i n)\n      (let ((car (car cars)))\n\
    \        (set! car (car car))\n        (set! cars (cdr cars))\n        (set! collisions\
    \ (cdr collisions))\n        (set! collisions (cons (car collisions) collisions)))\n\
    \    (length collisions)))\n", "  (let ([cars (make-array (list n) '(list 'car))])\n\
    \    (define (collide i j)\n      (cond\n        ((< i j) (+ i j))\n        ((<\
    \ j i) (+ j i))\n        ((= i j) (+ i j))\n        (else (+ i j))))\n    (define\
    \ (collides i j)\n      (cond\n        ((< i j) (+ i j))\n        ((< j i) (+\
    \ j i))\n        ((= i j) (+ i j))\n        (else (+ i j))))\n    (define (collides-left\
    \ i j)\n      (cond\n        ((< i j) (+ i j))\n        ((< j i) (+ j i))\n  \
    \      ((= i j) (+ i j))\n        (else (+ i j))))\n    (define (collides-right\
    \ i j)\n      (cond\n        ((< i j) (+ i j))\n        ((< j i) (+ j i))\n  \
    \      ((= i j) (+ i j))\n        (else (+ i j))))\n    (define (collides-up i\
    \ j)\n      (cond\n        ((< i j) (+ i j))\n        ((< j i) (+ j i))\n    \
    \    ((= i j) (+ i j))\n        (else (+ i j))))\n    (define (collides-down i\
    \ j)\n      (cond\n        ((< i j) (+ i j))\n        ((< j i) (+ j i))\n    \
    \    ((= i j) (+ i j))\n        (else (+ i j))))\n    (define (collides-left i\
    \ j)\n      (cond\n        ((< i j) (+ i j))\n        ((< j i) (+ j i))\n    \
    \    ((= i j) (+ i j))\n        (else (+ i j))))\n    (define (collides-right\
    \ i j)\n      (cond\n        ((< i j) (+ i j))\n        ((< j i) (+ j i))\n  \
    \      ((= i j) (+ i j))\n        (else (+ i j))))\n    (define (collides-up i\
    \ j)\n      (cond\n        ((< i j) (+ i j))\n        ((< j i) (+ j i))\n    \
    \    ((= i j) (+ i j))\n        (else (+ i j))))\n    (define (collides-down i\
    \ j)\n      (cond\n        ((< i j) (", "  (define (collision car1 car2)\n   \
    \ (cond\n      [(< (distance car1 car2) n) 0]\n      [(> (distance car1 car2)\
    \ n) 1]\n      [else (+ (collision car1 (cdr car2)) (collision car2 (cdr car1)))]))\n\
    \  (define (collide_left car)\n    (cond\n      [(< (distance car car) n) 0]\n\
    \      [(> (distance car car) n) 1]\n      [else (+ (collide_left (cdr car)) (collide_left\
    \ (car cdr)))]))\n  (define (collide_right car)\n    (cond\n      [(< (distance\
    \ car car) n) 0]\n      [(> (distance car car) n) 1]\n      [else (+ (collide_right\
    \ (car cdr)) (collide_right (cdr car)))]))\n  (define (collide_all cars)\n   \
    \ (cond\n      [(< (length cars) n) 0]\n      [(> (length cars) n) 1]\n      [else\
    \ (+ (collide_all (cdr cars)) (collide_all (cdr cars)))]))\n  (collide_all (list\
    \ cars))\n  (collision cars (cdr cars)))\n", "  (let ((cars (make-array n '(list\
    \ 'car))))\n    (dotimes (i n)\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (asso", "  (define (collide a b)\n  \
    \  (< (abs (- a b)) n))\n  (define (collides a)\n    (filter collide (iterate\
    \ collide (- n))))\n  (define (collides a)\n    (filter collide (iterate collide\
    \ (- n))))\n  (define (collides a)\n    (filter collide (iterate collide (- n))))\n\
    \  (define (collides a)\n    (filter collide (iterate collide (- n))))\n  (define\
    \ (collides a)\n    (filter collide (iterate collide (- n))))\n  (define (collides\
    \ a)\n    (filter collide (iterate collide (- n))))\n  (define (collides a)\n\
    \    (filter collide (iterate collide (- n))))\n  (define (collides a)\n    (filter\
    \ collide (iterate collide (- n))))\n  (define (collides a)\n    (filter collide\
    \ (iterate collide (- n))))\n  (define (collides a)\n    (filter collide (iterate\
    \ collide (- n))))\n  (define (collides a)\n    (filter collide (iterate collide\
    \ (- n))))\n  (define (collides a)\n    (filter collide (iterate collide (- n))))\n\
    \  (define (collides a)\n    (filter collide (iterate collide (- n))))\n  (define\
    \ (collides a)\n    (filter collide (iterate collide (- n))))\n  (define (collides\
    \ a)\n    (filter collide (iterate collide (- n))))\n  (define (collides a)\n\
    \    (filter collide (iterate collide (- n))))\n  (define (collides a)\n    (filter\
    \ collide (iterate collide (- n))))\n  (define (collides a)\n    (filter collide\
    \ (iterate collide (- n))))\n  (define (collides a)\n    (filter collide (iterate\
    \ collide (- n))))\n  (define (collides a)\n    (filter collide (iterate collide\
    \ (- n))))\n  (define (collides a)\n    (filter collide (iterate collide (- n))))\n\
    \  (define (collides a)\n    (filter collide (iterate collide (- n))))\n  (define\
    \ (collides a)\n    (filter collide (iterate collide (- n))))\n  (define (collides\
    \ a)\n    (filter colli", "  (define (collide a b)\n    (< (abs (- a b)) n))\n\
    \  (define (collides a)\n    (filter (lambda (b) (collide a b)) (car_list a)))\n\
    \  (define (collides-list a)\n    (map (lambda (b) (collide a b)) (car_list a)))\n\
    \  (define (collides-list-length a)\n    (length (filter (lambda (b) (collide\
    \ a b)) (car_list a))))\n  (define (collides-list-length a)\n    (length (filter\
    \ (lambda (b) (collide a b)) (car_list a))))\n  (define (collides-list-length\
    \ a)\n    (length (filter (lambda (b) (collide a b)) (car_list a))))\n  (define\
    \ (collides-list-length a)\n    (length (filter (lambda (b) (collide a b)) (car_list\
    \ a))))\n  (define (collides-list-length a)\n    (length (filter (lambda (b) (collide\
    \ a b)) (car_list a))))\n  (define (collides-list-length a)\n    (length (filter\
    \ (lambda (b) (collide a b)) (car_list a))))\n  (define (collides-list-length\
    \ a)\n    (length (filter (lambda (b) (collide a b)) (car_list a))))\n  (define\
    \ (collides-list-length a)\n    (length (filter (lambda (b) (collide a b)) (car_list\
    \ a))))\n  (define (collides-list-length a)\n    (length (filter (lambda (b) (collide\
    \ a b)) (car_list a))))\n  (define (collides-list-length a)\n    (length (filter\
    \ (lambda (b) (collide a b)) (car_list a))))\n  (define (collides-list-length\
    \ a)\n    (length (filter (lambda (b) (collide a b)) (car_list a))))\n  (define\
    \ (collides-list-length a)\n    (length (filter (lambda (b) (collide a b)) (car_list\
    \ a))))\n  (define (collides-list-length a)\n    (length (filter (lambda (b) (collide\
    \ a b)) (car_list a))))\n  (define (collides-list-length a)\n    (length (filter\
    \ (lambda (b) (collide a b)) (car_list a))))\n  (define (collides-list-length\
    \ a)\n    (length (filter (lambda (b) (collide a b)) (car_list a))))\n  (define\
    \ (collides-list-length ", "  (define (collision car1 car2)\n    (cond\n     \
    \ [(and (< car1 car2) (< car2 car1)) 0]\n      [(and (< car1 car2) (< car2 car2))\
    \ (+ 1 collision)]\n      [else (+ collision (* n 2))]))\n  (define (collide car1\
    \ car2)\n    (cond\n      [(and (< car1 car2) (< car2 car1)) 0]\n      [(and (<\
    \ car1 car2) (< car2 car2)) (+ 1 collision)]\n      [else (+ collision (* n 2))]))\n\
    \  (define (collides cars)\n    (cond\n      [(null? cars) 0]\n      [(and (<\
    \ cars cars) (< cars cars)) (+ 1 collisions)]\n      [else (+ collisions (* n\
    \ 2))]))\n  (define (collides-list cars)\n    (cond\n      [(null? cars) 0]\n\
    \      [(and (< cars cars) (< cars cars)) (+ 1 collisions)]\n      [else (+ collisions\
    \ (* n 2))]))\n  (define (collides-list-2 cars)\n    (cond\n      [(null? cars)\
    \ 0]\n      [(and (< cars cars) (< cars cars)) (+ 1 collisions)]\n      [else\
    \ (+ collisions (* n 2))]))\n  (define (collides-list-3 cars)\n    (cond\n   \
    \   [(null? cars) 0]\n      [(and (< cars cars) (< cars cars)) (+ 1 collisions)]\n\
    \      [else (+ collisions (* n 2))]))\n  (define (collides-list-4 cars)\n   \
    \ (cond\n      [(null? cars) 0]\n      [(and (< cars cars) (< cars cars)) (+ 1\
    \ collisions)]\n      [else (+ collisions (* n 2))]))\n  (define (collides-list-5\
    \ cars)\n    (cond\n      [(null? cars) 0]\n      [(and (< cars cars) (< cars\
    \ cars)) (+ 1 collisions)]\n      [else (+ collisions (* n 2))]))\n  (define (collides-list-6\
    \ cars)\n    (cond\n      [(null? cars) 0]\n      [(and (< cars cars) (< cars\
    \ cars)) (+ 1 collisions)]\n      [else (+ collisions (* n 2))]))\n  (define (collides-list-7\
    \ cars)\n    (cond\n      [(null? cars) 0]\n      [(", "  (let ((cars (make-array\
    \ (+ n 1) '(cons n '(#f #f))))\n        (car-collisions (make-array (+ n 1) '(cons\
    \ n '(#f #f))))\n        (collisions (make-array (+ n 1) '(cons n '(#f #f))))\n\
    \        (collision-count 0))\n    (dotimes (i n)\n      (let ((car car-at (+\
    \ i 1)))\n        (set! cars (assoc car cars #:test 'equal))\n        (set! car-collisions\
    \ (assoc car car-collisions #:test 'equal))\n        (set! collisions (assoc car\
    \ collisions #:test 'equal))\n        (cond\n          ((null? cars) (set! collision-count\
    \ (+ collision-count 1)))\n          ((null? car-collisions) (set! collision-count\
    \ (+ collision-count 1)))\n          ((null? collisions) (set! collision-count\
    \ (+ collision-count 1)))\n          ((car-collisions (car car-collisions))\n\
    \           (set! collision-count (+ collision-count 1)))\n          (else (set!\
    \ collision-count (+ collision-count 0))))))))\n", "  (define (collide a b)\n\
    \    (< (abs (- a b)) n))\n  (define (collides a)\n    (filter (lambda (b) (collide\
    \ a b)) (car_list a)))\n  (define (collides-list a)\n    (map (lambda (b) (collide\
    \ a b)) (car_list a)))\n  (define (collides-list-map a)\n    (map (lambda (b)\
    \ (collide a b)) (car_list a)))\n  (define (collides-list-map-list a)\n    (map\
    \ (lambda (b) (collide a b)) (car_list a)))\n  (define (collides-list-map-list-map\
    \ a)\n    (map (lambda (b) (collide a b)) (car_list a)))\n  (define (collides-list-map-list-map-list\
    \ a)\n    (map (lambda (b) (collide a b)) (car_list a)))\n  (define (collides-list-map-list-map-list-map\
    \ a)\n    (map (lambda (b) (collide a b)) (car_list a)))\n  (define (collides-list-map-list-map-list-map-list\
    \ a)\n    (map (lambda (b) (collide a b)) (car_list a)))\n  (define (collides-list-map-list-map-list-map-list-map\
    \ a)\n    (map (lambda (b) (collide a b)) (car_list a)))\n  (define (collides-list-map-list-map-list-map-list-map-list\
    \ a)\n    (map (lambda (b) (collide a b)) (car_list a)))\n  (define (collides-list-map-list-map-list-map-list-map-list-map\
    \ a)\n    (map (lambda (b) (collide a b)) (car_list a)))\n  (define (collides-list-map-list-map-list-map-list-map-list-map-list\
    \ a)\n    (map (lambda (b) (collide a b)) (car_list a)))\n  (define (collides-list-map-list-map-list-map-list-map-list-map-list-map\
    \ a)\n    (map (lambda (b) (collide a b)) (car_list a)))\n  (define (collides-list-map-list-map-list-map-list-map-list-map-list-map-list\
    \ a)\n    (map (lambda (b) (collide a b)) (car_list a)))\n  (define (collides-list-map-list-map-list-map-list-map-list-map-list-map-list-map\
    \ a)\n    (map (lambda (b) (collide a b)) (car_list a)))\n  (define (collides-list-map-list-map-list-map-list-map-",
  "  (let ((cars (make-array (list n (make-array n '(list 'left 'right))))))\n   \
    \ (define (collision i j)\n      (let ((car cars)\n            (car-left car)\n\
    \            (car-right car)\n            (collision-left collision)\n       \
    \     (collision-right collision))\n        (if (< i j)\n            (let ((car-left\
    \ car-left car-right car-right))\n              (if (< i car-left)\n         \
    \         (collision-left i j)\n                  (collision-left car-left car-right\
    \ car-right))\n              (if (< j car-right)\n                  (collision-right\
    \ i j)\n                  (collision-right car-left car-right car-right))))\n\
    \          (let ((car-left car-left car-right car-right))\n            (if (<\
    \ i car-left)\n                (collision-left i j)\n                (collision-left\
    \ car-left car-right car-right))\n            (if (< j car-right)\n          \
    \      (collision-right i j)\n                (collision-right car-left car-right\
    \ car-right))))))\n    (define (move i j)\n      (let ((car cars)\n          \
    \  (car-left car)\n            (car-right car)\n            (collision-left collision)\n\
    \            (collision-right collision))\n        (if (< i j)\n            (let\
    \ ((car-left car-left car-right car-right))\n              (if (< i car-left)\n\
    \                  (collision-left i j)\n                  (collision-left car-left\
    \ car-right car-right))\n              (if (< j car-right)\n                 \
    \ (collision-right i j)\n                  (collision-right car-left car-right\
    \ car-right))\n              (set! car-left (cons (car car-left) (car car)))\n\
    \              (set! car-right (cons (car car-right) (car car))))\n          \
    \  (let ((car-left car-left car-right car-right))\n              (if (< i car-left)\n\
    \                  (collision-left i j)\n                  (collision-left car-left\
    \ car-right car-right))\n              (if (< j car-right)\n                 \
    \ (collision-right i j)\n                  (collision-right car-left car-right\
    \ car-right))\n              (set! car-left (cons (car car-left) (car car)))\n\
    \              (set! car-right ", "  (let ((cars (make-array n '(list 'car))))\n\
    \    (dotimes (i n)\n      (let ((car cars (- i 1)))\n        (set! car (make-instance\
    \ 'car))\n        (set! car-speed 0)\n        (set! car-speed (- car-speed 1))\n\
    \        (set! car-speed (- car-speed 1))\n        (set! car-speed (- car-speed\
    \ 1))\n        (set! car-speed (- car-speed 1))\n        (set! car-speed (- car-speed\
    \ 1))\n        (set! car-speed (- car-speed 1))\n        (set! car-speed (- car-speed\
    \ 1))\n        (set! car-speed (- car-speed 1))\n        (set! car-speed (- car-speed\
    \ 1))\n        (set! car-speed (- car-speed 1))\n        (set! car-speed (- car-speed\
    \ 1))\n        (set! car-speed (- car-speed 1))\n        (set! car-speed (- car-speed\
    \ 1))\n        (set! car-speed (- car-speed 1))\n        (set! car-speed (- car-speed\
    \ 1))\n        (set! car-speed (- car-speed 1))\n        (set! car-speed (- car-speed\
    \ 1))\n        (set! car-speed (- car-speed 1))\n        (set! car-speed (- car-speed\
    \ 1))\n        (set! car-speed (- car-speed 1))\n        (set! car-speed (- car-speed\
    \ 1))\n        (set! car-speed (- car-speed 1))\n        (set! car-speed (- car-speed\
    \ 1))\n        (set! car-speed (- car-speed 1))\n        (set! car-speed (- car-speed\
    \ 1))\n        (set! car-speed (- car-speed 1))\n        (set! car-speed (- car-speed\
    \ 1))\n        (set! car-speed (- car-speed 1))\n        (set! car-speed (- car-speed\
    \ 1))\n        (set! car-speed (- car-speed 1))\n        (set! car-speed (- car-speed\
    \ 1))\n        (set! car-speed (- car-speed 1))\n        (set! car-speed (- car-speed\
    \ 1))\n        (set! car-speed (- car-speed 1))\n        (set! car-speed (- car-speed\
    \ 1))\n        (set! car-", "  (let ((cars (make-array n '(lambda (i j) (cons\
    \ i j))))\n        (car-collisions (make-array n '(lambda (i j) (cons i j))))\n\
    \        (collisions (make-array n '(lambda (i j) (cons i j))))\n        (collision-count\
    \ 0))\n    (dotimes (i n)\n      (dotimes (j n)\n        (set! cars (assoc i cars))\n\
    \        (set! car-collisions (assoc i car-collisions))\n        (set! collisions\
    \ (assoc i collisions))\n        (set! collision-count (+ collision-count (+ collisions\
    \ (assoc j collisions))))\n        (set! cars (assoc j cars))\n        (set! car-collisions\
    \ (assoc j car-collisions))\n        (set! collisions (assoc j collisions))\n\
    \        (set! collision-count (+ collision-count (+ collisions (assoc i collisions))))\n\
    \        (set! cars (assoc i cars))\n        (set! car-collisions (assoc i car-collisions))\n\
    \        (set! collisions (assoc i collisions))\n        (set! collision-count\
    \ (+ collision-count (+ collisions (assoc j collisions))))\n        (set! cars\
    \ (assoc j cars))\n        (set! car-collisions (assoc j car-collisions))\n  \
    \      (set! collisions (assoc j collisions))\n        (set! collision-count (+\
    \ collision-count (+ collisions (assoc i collisions))))\n        (set! cars (assoc\
    \ i cars))\n        (set! car-collisions (assoc i car-collisions))\n        (set!\
    \ collisions (assoc i collisions))\n        (set! collision-count (+ collision-count\
    \ (+ collisions (assoc j collisions))))\n        (set! cars (assoc j cars))\n\
    \        (set! car-collisions (assoc j car-collisions))\n        (set! collisions\
    \ (assoc j collisions))\n        (set! collision-count (+ collision-count (+ collisions\
    \ (assoc i collisions))))\n        (set! cars (assoc i cars))\n        (set! car-collisions\
    \ (assoc i car-collisions))\n        (set! collisions (assoc i collisions))\n\
    \        (set! collision-count (+ collision-count (+ collisions (assoc j collisions))))\n\
    \        (set! cars (assoc j cars))\n        (set! car-collision", "  (let ((cars\
    \ (make-array n '(list 'car))))\n    (dotimes (i n)\n      (set! cars (assoc i\
    \ cars))\n      (let ((collided (assoc i collided)))\n        (if (not (null?\
    \ collided))\n            (set! cars (cdr collided))\n            (set! cars (cons\
    \ i cars)))))))\n", "  (let ((cars (make-array n '(lambda (x) (make-array n '(lambda\
    \ (y) (make-array n '(lambda (z) (make-array n '(lambda (x) (make-array n '(lambda\
    \ (y) (make-array n '(lambda (z) (make-array n '(lambda (x) (make-array n '(lambda\
    \ (y) (make-array n '(lambda (z) (make-array n '(lambda (x) (make-array n '(lambda\
    \ (y) (make-array n '(lambda (z) (make-array n '(lambda (x) (make-array n '(lambda\
    \ (y) (make-array n '(lambda (z) (make-array n '(lambda (x) (make-array n '(lambda\
    \ (y) (make-array n '(lambda (z) (make-array n '(lambda (x) (make-array n '(lambda\
    \ (y) (make-array n '(lambda (z) (make-array n '(lambda (x) (make-array n '(lambda\
    \ (y) (make-array n '(lambda (z) (make-array n '(lambda (x) (make-array n '(lambda\
    \ (y) (make-array n '(lambda (z) (make-array n '(lambda (x) (make-array n '(lambda\
    \ (y) (make-array n '(lambda (z) (make-array n '(lambda (x) (make-array n '(lambda\
    \ (y) (make-array n '(lambda (z) (make-array n '(lambda (x) (make-array n '(lambda\
    \ (y) (make-array n '(lambda (z) (make-array n '(lambda (x) (make-array n '(lambda\
    \ (y) (make-array n '(lambda (z) (make-array n '(lambda (x) (make-array n '(lambda\
    \ (y) (make-array n '(lambda (z) (make-array n '(lambda (x) (make-array n '(lambda\
    \ (y) (make-array n '(lambda (z) (make-array n '(lambda (x) (make-array n '(lambda\
    \ (y) (make-array n '(lambda (z) (make-array n '(lambda (x) (make-array n '(lambda\
    \ (y) (make-array n '(lambda (z) (make-array n '(lambda (x) (make-array n '(lambda\
    \ (y) (make-array n '(lambda (z) (make-array n '(lambda (x) (make-array n '(lambda\
    \ (y) (make-array n '(lambda (z) (make-array n '(lambda (x) (make-array n '(lambda\
    \ (y) (make-array n '(lambda (z) (make-array n '(lambda (x) (make-array n '(lambda\
    \ (y) (make-array n '(lambda (z) (make-array n ", "  (define (collide a b)\n \
    \   (cond\n      [(and (< a b) (< b n)) 0]\n      [(and (< b a) (< a n)) 0]\n\
    \      [else (+ 1 (car_race_collision (- n a) b))]))\n  (define (collides a)\n\
    \    (cond\n      [(< a n) 0]\n      [else (+ 1 (car_race_collision n a))]))\n\
    \  (define (collides a)\n    (cond\n      [(< a n) 0]\n      [else (+ 1 (car_race_collision\
    \ n a))]))\n  (define (collides a)\n    (cond\n      [(< a n) 0]\n      [else\
    \ (+ 1 (car_race_collision n a))]))\n  (define (collides a)\n    (cond\n     \
    \ [(< a n) 0]\n      [else (+ 1 (car_race_collision n a))]))\n  (define (collides\
    \ a)\n    (cond\n      [(< a n) 0]\n      [else (+ 1 (car_race_collision n a))]))\n\
    \  (define (collides a)\n    (cond\n      [(< a n) 0]\n      [else (+ 1 (car_race_collision\
    \ n a))]))\n  (define (collides a)\n    (cond\n      [(< a n) 0]\n      [else\
    \ (+ 1 (car_race_collision n a))]))\n  (define (collides a)\n    (cond\n     \
    \ [(< a n) 0]\n      [else (+ 1 (car_race_collision n a))]))\n  (define (collides\
    \ a)\n    (cond\n      [(< a n) 0]\n      [else (+ 1 (car_race_collision n a))]))\n\
    \  (define (collides a)\n    (cond\n      [(< a n) 0]\n      [else (+ 1 (car_race_collision\
    \ n a))]))\n  (define (collides a)\n    (cond\n      [(< a n) 0]\n      [else\
    \ (+ 1 (car_race_collision n a))]))\n  (define (collides a)\n    (cond\n     \
    \ [(< a n) 0]\n      [else (+ 1 (car_race_collision n a))]))\n  (define (collides\
    \ a)\n    (cond\n      [(< a n) 0]\n      [else (+ 1 (car_race_collision n a))]))\n\
    \  (define (collides a)\n    (cond\n      [(< a ", "  (let ((cars (make-array\
    \ n '(list 'car))))\n    (dotimes (i n)\n      (let ((car cars i))\n        (set!\
    \ car (make-instance 'car))\n        (set! car (make-instance 'car))\n       \
    \ (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n \
    \       (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance '",
  "  (define (collision car1 car2)\n    (cond\n      [(< car1 car2) 0]\n      [(>\
    \ car1 car2) 1]\n      [else (+ collision (car1 car2) (car2 car1))]))\n  (define\
    \ (collide car1 car2)\n    (cond\n      [(< car1 car2) 0]\n      [(> car1 car2)\
    \ 1]\n      [else (+ collision (car1 car2) (car2 car1))]))\n  (define (collides\
    \ cars)\n    (cond\n      [(null? cars) 0]\n      [(< cars 1) 0]\n      [(> cars\
    \ 1) 1]\n      [else (+ collides (cdr cars))]))\n  (define (collides_left cars)\n\
    \    (cond\n      [(null? cars) 0]\n      [(< cars 1) 0]\n      [(> cars 1) 1]\n\
    \      [else (+ collides (cars (- cars 1))))]))\n  (define (collides_right cars)\n\
    \    (cond\n      [(null? cars) 0]\n      [(< cars 1) 0]\n      [(> cars 1) 1]\n\
    \      [else (+ collides (cars (+ cars 1))))]))\n  (define (collides_left cars)\n\
    \    (cond\n      [(null? cars) 0]\n      [(< cars 1) 0]\n      [(> cars 1) 1]\n\
    \      [else (+ collides (cars (- cars 1))))]))\n  (define (collides_right cars)\n\
    \    (cond\n      [(null? cars) 0]\n      [(< cars 1) 0]\n      [(> cars 1) 1]\n\
    \      [else (+ collides (cars (+ cars 1))))]))\n  (define (collides_left cars)\n\
    \    (cond\n      [(null? cars) 0]\n      [(< cars 1) 0]\n      [(> cars 1) 1]\n\
    \      [else (+ collides (cars (- cars 1))))]))\n  (define (collides_right cars)\n\
    \    (cond\n      [(null? cars) 0]\n      [(< cars 1) 0]\n      [(> cars 1) 1]\n\
    \      [else (+ collides (cars (+ cars 1))))]))\n  (define (collides_left cars)\n\
    \    (cond\n      [(null? cars) 0]\n      [(< cars 1) 0]\n      [(> cars 1) 1]\n\
    \      [else (+ collides (cars (- cars ", "  (let ((cars (make-array n #:element-type\
    \ 'car)))\n    (define (collide x y)\n      (< (car-x x) (car-x y))\n      (<\
    \ (car-y x) (car-y y)))\n    (define (collides xs ys)\n      (cond ((null? xs)\
    \ #f)\n            ((null? ys) #f)\n            (else (and (collide (car-x xs)\
    \ (car-x ys))\n                      (collide (car-y xs) (car-y ys))))\n     \
    \       (else (collides (cdr xs) (cdr ys)))))\n    (define (collide-all xs ys)\n\
    \      (cond ((null? xs) #f)\n            ((null? ys) #f)\n            (else (and\
    \ (collides xs (cdr ys))\n                      (collides ys (cdr xs))))\n   \
    \         (else (collide-all (cdr xs) (cdr ys)))))\n    (define (collide-all xs\
    \ ys)\n      (cond ((null? xs) #f)\n            ((null? ys) #f)\n            (else\
    \ (and (collides xs (cdr ys))\n                      (collides ys (cdr xs))))\n\
    \            (else (collide-all (cdr xs) (cdr ys)))))\n    (define (collides xs\
    \ ys)\n      (cond ((null? xs) #f)\n            ((null? ys) #f)\n            (else\
    \ (and (collide (car-x xs) (car-x ys))\n                      (collide (car-y\
    \ xs) (car-y ys))))\n            (else (collides (cdr xs) (cdr ys)))))\n    (define\
    \ (collides xs ys)\n      (cond ((null? xs) #f)\n            ((null? ys) #f)\n\
    \            (else (and (collide (car-x xs) (car-x ys))\n                    \
    \  (collide (car-y xs) (car-y ys))))\n            (else (collides (cdr xs) (cdr\
    \ ys)))))\n    (define (collides xs ys)\n      (cond ((null? xs) #f)\n       \
    \     ((null? ys) #f)\n            (else (and (collide (car-x xs) (car-x ys))\n\
    \                      ", "  (let ((cars (make-array n '(list 'car))))\n    (define\
    \ (collide i j)\n      (cond\n        ((= i j) 0)\n        ((< i j) (+ (cars i)\
    \ (cars j)))\n        ((> i j) (+ (cars j) (cars i)))\n        (else (error \"\
    Invalid arguments\")))\n      (cond\n        ((< i j) (+ (cars i) (cars j)))\n\
    \        ((> i j) (+ (cars j) (cars i)))\n        (else (error \"Invalid arguments\"\
    )))\n      (cond\n        ((< i j) (+ (cars i) (cars j)))\n        ((> i j) (+\
    \ (cars j) (cars i)))\n        (else (error \"Invalid arguments\")))\n      (cond\n\
    \        ((< i j) (+ (cars i) (cars j)))\n        ((> i j) (+ (cars j) (cars i)))\n\
    \        (else (error \"Invalid arguments\")))\n      (cond\n        ((< i j)\
    \ (+ (cars i) (cars j)))\n        ((> i j) (+ (cars j) (cars i)))\n        (else\
    \ (error \"Invalid arguments\")))\n      (cond\n        ((< i j) (+ (cars i) (cars\
    \ j)))\n        ((> i j) (+ (cars j) (cars i)))\n        (else (error \"Invalid\
    \ arguments\")))\n      (cond\n        ((< i j) (+ (cars i) (cars j)))\n     \
    \   ((> i j) (+ (cars j) (cars i)))\n        (else (error \"Invalid arguments\"\
    )))\n      (cond\n        ((< i j) (+ (cars i) (cars j)))\n        ((> i j) (+\
    \ (cars j) (cars i)))\n        (else (error \"Invalid arguments\")))\n      (cond\n\
    \        ((< i j) (+ (cars i) (cars j)))\n        ((> i j) (+ (cars j) (cars i)))\n\
    \        (else (error \"Invalid arguments\")))\n      (cond\n        ((< i j)\
    \ (+ (cars i) (cars j)))\n        ((> i j) (+ (cars j) (cars i)))\n        (else\
    \ (error \"Invalid arguments\")))\n      (cond\n        ((< i j) (+ (cars i) (cars\
    \ j)))\n        ((", "  (let ((cars (make-array n '(list 'car))))\n    (dotimes\
    \ (i n)\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (asso", "  (let ((cars (make-array n '(lambda (x) (make-array\
    \ n '(lambda (y) (+ x y))))))\n        (car1 (car cars))\n        (car2 (car cars)))\n\
    \    (set! car1 (car cars))\n    (set! car2 (car cars))\n    (let loop ((i 0))\n\
    \      (if (< i n)\n          (loop (+ i 1))\n          (let ((x (car car1))\n\
    \                (y1 (car car2)))\n            (set! car1 (cdr car1))\n      \
    \      (set! car2 (cdr car2))\n            (if (> (+ x y) 0)\n               \
    \ (loop (+ i 1))\n                (+ i 0))))))\n", "  (define (collision car1\
    \ car2)\n    (cond [(and (< car1 car2) (< car2 car1))\n           0]\n       \
    \   [(and (< car1 car2) (< car2 car1))\n           (+ car1 car2)]\n          [else\n\
    \           (+ car2 car1)]))\n  (define (collides car1 car2)\n    (cond [(< car1\
    \ car2)\n           0]\n          [(< car1 car2)\n           (collision car1 car2)]\n\
    \          [else\n           (collision car1 car2)]))\n  (define (collides car1\
    \ car2)\n    (cond [(< car1 car2)\n           0]\n          [(< car1 car2)\n \
    \          (collision car1 car2)]\n          [else\n           (collision car1\
    \ car2)]))\n  (define (collides car1 car2)\n    (cond [(< car1 car2)\n       \
    \    0]\n          [(< car1 car2)\n           (collision car1 car2)]\n       \
    \   [else\n           (collision car1 car2)]))\n  (define (collides car1 car2)\n\
    \    (cond [(< car1 car2)\n           0]\n          [(< car1 car2)\n         \
    \  (collision car1 car2)]\n          [else\n           (collision car1 car2)]))\n\
    \  (define (collides car1 car2)\n    (cond [(< car1 car2)\n           0]\n   \
    \       [(< car1 car2)\n           (collision car1 car2)]\n          [else\n \
    \          (collision car1 car2)]))\n  (define (collides car1 car2)\n    (cond\
    \ [(< car1 car2)\n           0]\n          [(< car1 car2)\n           (collision\
    \ car1 car2)]\n          [else\n           (collision car1 car2)]))\n  (define\
    \ (collides car1 car2)\n    (cond [(< car1 car2)\n           0]\n          [(<\
    \ car1 car2)\n           (collision car1 car2)]\n          [else\n           (collision\
    \ car1 car2)]))\n  (define (collides car1 car2)\n    (cond [(< car1 car2)\n  \
    \         0]\n          [(< car1 car2)\n           (collision car1 car2)]\n  \
    \        [else\n           (collision car1 car2)]))\n  (define (collides car1\
    \ car2)\n    (cond [(< car1 car2)\n           0]\n", "  (let ([cars (make-array\
    \ n #:initial-contents '(#t #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f ", "  (let\
    \ ((cars (make-array (+ n 1) '(cons car car))))\n    (dotimes (i n)\n      (let\
    \ ((car cars))\n        (set! car (cdr car))\n        (set! cars (cons (car cars)\
    \ cars))\n        (set! cars (cons (car cars) cars))))))\n", "  (let ((cars (make-array\
    \ n '(list 'car))))\n    (dotimes (i n)\n      (set! cars (assoc i cars))\n  \
    \    (let ((colliding (assoc i cars)))\n        (if (null? colliding)\n      \
    \      (set! cars (cons i cars))\n            (set! cars (cons i cars))\n    \
    \        (set! cars (cons i cars))\n            (set! cars (cons i cars))\n  \
    \          (set! cars (cons i cars))\n            (set! cars (cons i cars))\n\
    \            (set! cars (cons i cars))\n            (set! cars (cons i cars))\n\
    \            (set! cars (cons i cars))\n            (set! cars (cons i cars))\n\
    \            (set! cars (cons i cars))\n            (set! cars (cons i cars))\n\
    \            (set! cars (cons i cars))\n            (set! cars (cons i cars))\n\
    \            (set! cars (cons i cars))\n            (set! cars (cons i cars))\n\
    \            (set! cars (cons i cars))\n            (set! cars (cons i cars))\n\
    \            (set! cars (cons i cars))\n            (set! cars (cons i cars))\n\
    \            (set! cars (cons i cars))\n            (set! cars (cons i cars))\n\
    \            (set! cars (cons i cars))\n            (set! cars (cons i cars))\n\
    \            (set! cars (cons i cars))\n            (set! cars (cons i cars))\n\
    \            (set! cars (cons i cars))\n            (set! cars (cons i cars))\n\
    \            (set! cars (cons i cars))\n            (set! cars (cons i cars))\n\
    \            (set! cars (cons i cars))\n            (set! cars (cons i cars))\n\
    \            (set! cars (cons i cars))\n            (set! cars (cons i cars))\n\
    \            (set! cars (cons i cars))\n            (set! cars (cons i cars))\n\
    \            (set! cars (cons i cars))\n            (set! cars (cons i cars))\n\
    \            (set! cars (cons i cars))\n            (set! cars (cons i cars))\n\
    \            (set! cars (cons i cars))\n            (set! cars (cons i ", "  (define\
    \ (collide x y)\n    (cond\n      [(< x y) 0]\n      [(> x y) 0]\n      [(< (-\
    \ x) y) 0]\n      [(> (- x) y) 0]\n      [(< (- x) (- (- y)))\n       (+ (- x)\
    \ (- (- y)))]\n      [(> (- x) (- (- y)))\n       (+ (- x) (- (- y)))]\n     \
    \ [(< (- x) (- y))\n       (+ (- x) (- y))]\n      [(> (- x) (- y))\n       (+\
    \ (- x) (- y))]\n      [else 1]))\n  (define (collides xs ys)\n    (cond\n   \
    \   [(null? xs) 0]\n      [(null? ys) 0]\n      [(< (car xs) (car ys)) (+ (car\
    \ xs) (collide (car xs) (car ys)))]\n      [(> (car xs) (car ys)) (+ (car xs)\
    \ (collide (car xs) (car ys)))]\n      [else (+ (collides (cdr xs) (cdr ys)) 1)]))\n\
    \  (define (collides-list xs ys)\n    (cond\n      [(null? xs) 0]\n      [(null?\
    \ ys) 0]\n      [(< (car xs) (car ys)) (+ (car xs) (collide (car xs) (car ys)))]\n\
    \      [(> (car xs) (car ys)) (+ (car xs) (collide (car xs) (car ys)))]\n    \
    \  [else (+ (collides-list (cdr xs) (cdr ys)) 1)]))\n  (define (collides-list-list\
    \ xs ys)\n    (cond\n      [(null? xs) 0]\n      [(null? ys) 0]\n      [(< (car\
    \ xs) (car ys)) (+ (car xs) (collide (car xs) (car ys)))]\n      [(> (car xs)\
    \ (car ys)) (+ (car xs) (collide (car xs) (car ys)))]\n      [else (+ (collides-list-list\
    \ (cdr xs) (cdr ys)) 1)]))\n  (define (collides-list-list-list xs ys)\n    (cond\n\
    \      [(null? xs) 0]\n      [(null? ys) 0]\n      [(< (car xs) (car ys)) (+ (car\
    \ xs) (", "  (let ((cars (make-array n #:element-type 'car)))\n    (define (collision\
    \ i j)\n      (if (< i j)\n          (if (> (car-x cars) (car-x cars (+ i 1)))\n\
    \              (if (> (car-y cars) (car-y cars (+ i 1)))\n                  (if\
    \ (> (car-x cars (+ j 1))\n                          (car-x cars (+ j 1)))\n \
    \                     (if (> (car-y cars (+ j 1))\n                          \
    \    (car-y cars (+ j 1)))\n                          (if (> (car-x cars (+ j\
    \ 1))\n                                  (car-x cars (+ j 1)))\n             \
    \                 (if (> (car-y cars (+ j 1))\n                              \
    \        (car-y cars (+ j 1)))\n                              (if (> (car-x cars\
    \ (+ j 1))\n                                      (car-x cars (+ j 1)))\n    \
    \                          (if (> (car-y cars (+ j 1))\n                     \
    \                 (car-y cars (+ j 1)))\n                              (if (>\
    \ (car-x cars (+ j 1))\n                                      (car-x cars (+ j\
    \ 1)))\n                              (if (> (car-y cars (+ j 1))\n          \
    \                            (car-y cars (+ j 1)))\n                         \
    \     (if (> (car-x cars (+ j 1))\n                                      (car-x\
    \ cars (+ j 1)))\n                              (if (> (car-y cars (+ j 1))\n\
    \                                      (car-y cars (+ j 1)))\n               \
    \               (if (> (car-x cars (+ j 1))\n                                \
    \      (car-x cars (+ j 1)))\n                              (if (> (car-y cars\
    \ (+ j 1))\n                                      (car-y cars (+ j 1)))\n    \
    \                          (if (> (car-x cars (+ j 1))\n                     \
    \                 (car-x cars (+ j 1)))\n                              (if (>\
    \ (car-y cars (+ j 1))\n                                      (car-y cars (+ j\
    \ 1)))\n                              (if (> (car-x cars (+ j 1))\n          \
    \                            (car-x cars (+ j 1)))\n                         \
    \     (if (> (car-y cars (+ j 1))\n                                      (car-y\
    \ cars (+ j 1)))\n                              (if (> (car-x cars (+ j 1))\n\
    \                                      (car-x cars (+ j 1)))\n               \
    \               (if (> (car-y cars (+ j 1))\n                                \
    \      (car-y cars (+ j 1)))\n                              (if (> (car-x cars\
    \ (+ j ", "  (define (collision car1 car2)\n    (cond\n      [(< car1 car2) 0]\n\
    \      [(> car1 car2) 1]\n      [(= car1 car2) 0]\n      [(> car2 car1) 1]\n \
    \     [(< car2 car1) 0]\n      [(= car1 car2) 0]\n      [(> car2 car1) 1]\n  \
    \    [(< car2 car1) 0]\n      [(= car1 car2) 0]\n      [(> car2 car1) 1]\n   \
    \   [(< car2 car1) 0]\n      [(= car1 car2) 0]\n      [(> car2 car1) 1]\n    \
    \  [(< car2 car1) 0]\n      [(= car1 car2) 0]\n      [(> car2 car1) 1]\n     \
    \ [(< car2 car1) 0]\n      [(= car1 car2) 0]\n      [(> car2 car1) 1]\n      [(<\
    \ car2 car1) 0]\n      [(= car1 car2) 0]\n      [(> car2 car1) 1]\n      [(< car2\
    \ car1) 0]\n      [(= car1 car2) 0]\n      [(> car2 car1) 1]\n      [(< car2 car1)\
    \ 0]\n      [(= car1 car2) 0]\n      [(> car2 car1) 1]\n      [(< car2 car1) 0]\n\
    \      [(= car1 car2) 0]\n      [(> car2 car1) 1]\n      [(< car2 car1) 0]\n \
    \     [(= car1 car2) 0]\n      [(> car2 car1) 1]\n      [(< car2 car1) 0]\n  \
    \    [(= car1 car2) 0]\n      [(> car2 car1) 1]\n      [(< car2 car1) 0]\n   \
    \   [(= car1 car2) 0]\n      [(> car2 car1) 1]\n      [(< car2 car1) 0]\n    \
    \  [(= car1 car2) 0]\n      [(> car2 car1) 1]\n      [(< car2 car1) 0]\n     \
    \ [(= car1 car2) 0]\n      [(> car2 car1) 1]\n      [(< car2 car1) 0]\n      [(=\
    \ car1 car2) 0]\n      [(> car2 car1) 1]\n      [(< car2 car1) 0]\n      [(= car1\
    \ car2) 0]\n      [(> car2 car1) 1]\n      [(< car2 car1) 0]\n      [(= car1 car2)\
    \ 0]\n      [(> car2 car1) 1]\n      [(< car", "  (let ((cars (make-array (* n\
    \ n) '(unsigned-byte 8))))\n    (dotimes (i n)\n      (dotimes (j n)\n       \
    \ (set! cars (+ cars (* i j) cars))\n        (set! cars (+ cars (* j i) cars))\n\
    \        (set! cars (+ cars (* i j) cars))\n        (set! cars (+ cars (* j i)\
    \ cars))\n        (set! cars (+ cars (* i j) cars))\n        (set! cars (+ cars\
    \ (* j i) cars))\n        (set! cars (+ cars (* i j) cars))\n        (set! cars\
    \ (+ cars (* j i) cars))\n        (set! cars (+ cars (* i j) cars))\n        (set!\
    \ cars (+ cars (* j i) cars))\n        (set! cars (+ cars (* i j) cars))\n   \
    \     (set! cars (+ cars (* j i) cars))\n        (set! cars (+ cars (* i j) cars))\n\
    \        (set! cars (+ cars (* j i) cars))\n        (set! cars (+ cars (* i j)\
    \ cars))\n        (set! cars (+ cars (* j i) cars))\n        (set! cars (+ cars\
    \ (* i j) cars))\n        (set! cars (+ cars (* j i) cars))\n        (set! cars\
    \ (+ cars (* i j) cars))\n        (set! cars (+ cars (* j i) cars))\n        (set!\
    \ cars (+ cars (* i j) cars))\n        (set! cars (+ cars (* j i) cars))\n   \
    \     (set! cars (+ cars (* i j) cars))\n        (set! cars (+ cars (* j i) cars))\n\
    \        (set! cars (+ cars (* i j) cars))\n        (set! cars (+ cars (* j i)\
    \ cars))\n        (set! cars (+ cars (* i j) cars))\n        (set! cars (+ cars\
    \ (* j i) cars))\n        (set! cars (+ cars (* i j) cars))\n        (set! cars\
    \ (+ cars (* j i) cars))\n        (set! cars (+ cars (* i j) cars))\n        (set!\
    \ cars (+ cars (* j i) cars))\n        (set! cars (+ cars (* i j) cars))", " \
    \ (let ((cars (make-array n #:element-type 'car)))\n    (define (collides i j)\n\
    \      (< (car-x cars) (car-x cars (+ i 1)))\n      (< (car-y cars) (car-y cars\
    \ (+ j 1))))\n    (define (collide? i j)\n      (< (car-x cars) (car-x cars (+\
    \ i 1)))\n      (< (car-y cars) (car-y cars (+ j 1))))\n    (define (collides\
    \ i j)\n      (< (car-x cars) (car-x cars (+ i 1)))\n      (< (car-y cars) (car-y\
    \ cars (+ j 1))))\n    (define (collide? i j)\n      (< (car-x cars) (car-x cars\
    \ (+ i 1)))\n      (< (car-y cars) (car-y cars (+ j 1))))\n    (define (collides\
    \ i j)\n      (< (car-x cars) (car-x cars (+ i 1)))\n      (< (car-y cars) (car-y\
    \ cars (+ j 1))))\n    (define (collide? i j)\n      (< (car-x cars) (car-x cars\
    \ (+ i 1)))\n      (< (car-y cars) (car-y cars (+ j 1))))\n    (define (collides\
    \ i j)\n      (< (car-x cars) (car-x cars (+ i 1)))\n      (< (car-y cars) (car-y\
    \ cars (+ j 1))))\n    (define (collide? i j)\n      (< (car-x cars) (car-x cars\
    \ (+ i 1)))\n      (< (car-y cars) (car-y cars (+ j 1))))\n    (define (collides\
    \ i j)\n      (< (car-x cars) (car-x cars (+ i 1)))\n      (< (car-y cars) (car-y\
    \ cars (+ j 1))))\n    (define (collide? i j)\n      (< (car-x cars) (car-x cars\
    \ (+ i 1)))\n      (< (car-y cars) (car-y cars (+ j 1))))\n    (define (collides\
    \ i j)\n      (< (car-x cars) (car-x cars (+ i 1)))\n      (< (car-y cars) (car-y\
    \ cars (+ j 1))))\n    (define (collide? i j)\n      (< (", "  (let ((cars (make-array\
    \ (+ n 1) '(list)))\n        (car-collisions (make-array (+ n 1) '(list)))\n \
    \       (collisions (make-array (+ n 1) '(list))))\n    (dotimes (i n)\n     \
    \ (set! cars (append cars (list (make-list '(0 0)))))\n      (set! car-collisions\
    \ (append car-collisions (list (make-list '(0 0)))))\n      (set! collisions (append\
    \ collisions (list (make-list '(0 0))))))\n    (dotimes (i n)\n      (let ((car\
    \ (car cars)))\n        (set! cars (append cars (cdr cars))))\n      (let ((car\
    \ (car car-collisions)))\n        (set! car-collisions (append car-collisions\
    \ (cdr car-collisions))))\n      (let ((car (car collisions)))\n        (set!\
    \ collisions (append collisions (cdr collisions))))\n      (let ((car (car collisions)))\n\
    \        (set! collisions (append collisions (cdr collisions))))\n      (let ((car\
    \ (car collisions)))\n        (set! collisions (append collisions (cdr collisions))))\n\
    \      (let ((car (car collisions)))\n        (set! collisions (append collisions\
    \ (cdr collisions))))\n      (let ((car (car collisions)))\n        (set! collisions\
    \ (append collisions (cdr collisions))))\n      (let ((car (car collisions)))\n\
    \        (set! collisions (append collisions (cdr collisions))))\n      (let ((car\
    \ (car collisions)))\n        (set! collisions (append collisions (cdr collisions))))\n\
    \      (let ((car (car collisions)))\n        (set! collisions (append collisions\
    \ (cdr collisions))))\n      (let ((car (car collisions)))\n        (set! collisions\
    \ (append collisions (cdr collisions))))\n      (let ((car (car collisions)))\n\
    \        (set! collisions (append collisions (cdr collisions))))\n      (let ((car\
    \ (car collisions)))\n        (set! collisions (append collisions (cdr collisions))))\n\
    \      (let ((car (car collisions)))\n        (set! collisions (append collisions\
    \ (cdr collisions))))\n      (let ((car (car collisions)))\n        (set! collisions\
    \ (append collisions (cdr collisions))))\n      (let ((car (car collisions)))\n\
    \        (set! collisions (append collisions (cdr collisions))))\n      (let ((car",
  "  (let ((collisions 0))\n    (for ((i n) (j n))\n      (if (and (< i j) (< i n))\n\
    \          (set! collisions (+ collisions 1))\n          (set! collisions (+ collisions\
    \ 0))))))\n", "  (let ((cars (make-array n '(list 'car))))\n    (dotimes (i n)\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (asso", "  (define (collide a b)\n    (< (abs (- a b)) n))\n  (cond ((<\
    \ n 0) 0)\n        ((< n 1) (+ 1 (car-race_collision (- n 1))))\n        (else\
    \ (+ 1 (car-race_collision (- n 1))))))\n  (car_race_collision n))\n", "  (define\
    \ (collision car1 car2)\n    (cond\n      [(< car1 car2) 0]\n      [(> car1 car2)\
    \ 1]\n      [else (+ 1 (collision (- car1 car2) car2))]))\n  (define (collide\
    \ car1 car2)\n    (cond\n      [(< car1 car2) 0]\n      [(> car1 car2) 1]\n  \
    \    [else (collision car1 (- car2 car1))]))\n  (define (collides cars)\n    (cond\n\
    \      [(null? cars) 0]\n      [(collide (car cars) (car cars)) (inc (collision\
    \ (car cars) (car cars)))]\n      [else (inc (collides (cdr cars)))]))\n  (define\
    \ (collides-list cars)\n    (cond\n      [(null? cars) '()]\n      [(collide (car\
    \ cars) (car cars)) (cons (car cars) (collides-list (cdr cars)))]\n      [else\
    \ (cons (car cars) (collides-list (cdr cars)))]))\n  (define (collides-list-list\
    \ cars)\n    (cond\n      [(null? cars) '()]\n      [(collide (car cars) (car\
    \ cars)) (cons (car cars) (cons (car cars) (collides-list-list (cdr cars))))]\n\
    \      [else (cons (car cars) (cons (car cars) (collides-list-list (cdr cars)))))]))\n\
    \  (define (collides-list-list-list cars)\n    (cond\n      [(null? cars) '()]\n\
    \      [(collide (car cars) (car cars)) (cons (car cars) (cons (car cars) (cons\
    \ (car cars) (collides-list-list-list (cdr cars))))))]\n      [else (cons (car\
    \ cars) (cons (car cars) (cons (car cars) (cons (car cars) (collides-list-list-list\
    \ (cdr cars))))))]))\n  (define (collides-list-list-list-list cars)\n    (cond\n\
    \      [(null? cars) '()]\n      [(collide (car cars) (car cars)) (cons (car cars)\
    \ (cons (car cars) (cons (car cars) (cons (car cars) (collides-list-list-list-list\
    \ (cdr cars))))))]\n      [", "  (let ([cars (make-array n #:initial-contents\
    \ '(#t #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f ", "  (let ((cars (make-array\
    \ n '(list 'car))))\n    (dotimes (i n)\n      (let ((car (car cars)))\n     \
    \   (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance ",
  "  (let ((cars (make-array n '(list 'car))))\n    (define (collides car cars)\n\
    \      (cond\n        ((null? cars) 0)\n        ((eq? (car cars) (car cars)) 1)\n\
    \        (else (+ 1 (collides (cdr car) (cdr cars))))))\n    (let ((collisions\
    \ (collides car (car cars))))\n      (set! collisions (- collisions 1))\n    \
    \  collisions)))\n", "  (define (collide a b)\n    (< (abs (- a b)) n))\n  (define\
    \ (collides a)\n    (filter collide a))\n  (define (collides b)\n    (filter collide\
    \ b))\n  (define (collides c d)\n    (filter collide c d))\n  (define (collides\
    \ e f)\n    (filter collide e f))\n  (define (collides g h)\n    (filter collide\
    \ g h))\n  (define (collides i j)\n    (filter collide i j))\n  (define (collides\
    \ k l)\n    (filter collide k l))\n  (define (collides m n)\n    (filter collide\
    \ m n))\n  (define (collides o p)\n    (filter collide o p))\n  (define (collides\
    \ q r)\n    (filter collide q r))\n  (define (collides s t)\n    (filter collide\
    \ s t))\n  (define (collides u v)\n    (filter collide u v))\n  (define (collides\
    \ w x)\n    (filter collide w x))\n  (define (collides y z)\n    (filter collide\
    \ y z))\n  (define (collides u v)\n    (filter collide u v))\n  (define (collides\
    \ w x)\n    (filter collide w x))\n  (define (collides y z)\n    (filter collide\
    \ y z))\n  (define (collides u v)\n    (filter collide u v))\n  (define (collides\
    \ w x)\n    (filter collide w x))\n  (define (collides y z)\n    (filter collide\
    \ y z))\n  (define (collides u v)\n    (filter collide u v))\n  (define (collides\
    \ w x)\n    (filter collide w x))\n  (define (collides y z)\n    (filter collide\
    \ y z))\n  (define (collides u v)\n    (filter collide u v))\n  (define (collides\
    \ w x)\n    (filter collide w x))\n  (define (collides y z)\n    (filter collide\
    \ y z))\n  (define (collides u v)\n    (filter collide u v))\n  (define (collides\
    \ w x)\n    (filter collide w x))\n  (define (collides y z)\n    (filter collide\
    \ y z))\n  (define (collides u v)\n    (filter collide u v))\n  (define (collides\
    \ w x)\n    (filter collide ", "  (let ((cars (make-array n '(list 'car))))\n\
    \    (dotimes (i n)\n      (set! cars (assoc i cars))\n      (let ((colliding-car\
    \ (car-race (car cars) (car cars))))\n        (if (null? colliding-car)\n    \
    \        (set! cars (cdr cars))\n            (set! cars (cons (car colliding-car)\
    \ (cdr cars)))))))\n", "  (let ((cars (make-array n '(list 'car))))\n    (dotimes\
    \ (i n)\n      (let ((car (car cars)))\n        (set! car (car car))\n       \
    \ (set! car (car-move car))\n        (set! cars (cdr cars))\n        (when (>\
    \ (car-x car) (car-x cars))\n          (set! car (car-move car))\n          (set!\
    \ cars (cdr cars))))\n      (when (> (car-x car) (car-x cars))\n        (set!\
    \ car (car-move car))\n        (set! cars (cdr cars))))\n    (length (filter (lambda\
    \ (car) (> (car-x car) (car-x cars))) cars))))\n", "  (define (collide a b)\n\
    \    (< (abs (- a b)) n))\n  (define (collides a)\n    (filter collide a))\n \
    \ (define (collides-list a)\n    (map (lambda (b) (collides b)) a))\n  (define\
    \ (collides-list-sorted a)\n    (sort (lambda (b) (collides b)) a))\n  (define\
    \ (collides-list-sorted-reverse a)\n    (sort (lambda (b) (- collides b)) a))\n\
    \  (define (collides-list-sorted-reverse a)\n    (sort (lambda (b) (- collides\
    \ b)) a))\n  (define (collides-list-sorted-reverse a)\n    (sort (lambda (b) (-\
    \ collides b)) a))\n  (define (collides-list-sorted-reverse a)\n    (sort (lambda\
    \ (b) (- collides b)) a))\n  (define (collides-list-sorted-reverse a)\n    (sort\
    \ (lambda (b) (- collides b)) a))\n  (define (collides-list-sorted-reverse a)\n\
    \    (sort (lambda (b) (- collides b)) a))\n  (define (collides-list-sorted-reverse\
    \ a)\n    (sort (lambda (b) (- collides b)) a))\n  (define (collides-list-sorted-reverse\
    \ a)\n    (sort (lambda (b) (- collides b)) a))\n  (define (collides-list-sorted-reverse\
    \ a)\n    (sort (lambda (b) (- collides b)) a))\n  (define (collides-list-sorted-reverse\
    \ a)\n    (sort (lambda (b) (- collides b)) a))\n  (define (collides-list-sorted-reverse\
    \ a)\n    (sort (lambda (b) (- collides b)) a))\n  (define (collides-list-sorted-reverse\
    \ a)\n    (sort (lambda (b) (- collides b)) a))\n  (define (collides-list-sorted-reverse\
    \ a)\n    (sort (lambda (b) (- collides b)) a))\n  (define (collides-list-sorted-reverse\
    \ a)\n    (sort (lambda (b) (- collides b)) a))\n  (define (collides-list-sorted-reverse\
    \ a)\n    (sort (lambda (b) (- collides b)) a))\n  (define (collides-list-sorted-reverse\
    \ a)\n    (sort (lambda (b) (- collides b)) a))\n  (define (collides-list-sorted-reverse\
    \ a)\n    (sort (lambda (b) (- ", "  (let ((cars (make-array (list n (list 'car)))\n\
    \        (collisions 0))\n    (define (collision i j)\n      (set! collisions\
    \ (+ collisions (- i j)))\n      (set! cars (append cars (list 'car (+ i j))))\n\
    \      (set! cars (append cars (list 'car (- i j))))\n      (set! cars (append\
    \ cars (list 'car (+ i j))))\n      (set! cars (append cars (list 'car (- i j))))\n\
    \      (set! cars (append cars (list 'car (+ i j))))\n      (set! cars (append\
    \ cars (list 'car (- i j))))\n      (set! cars (append cars (list 'car (+ i j))))\n\
    \      (set! cars (append cars (list 'car (- i j))))\n      (set! cars (append\
    \ cars (list 'car (+ i j))))\n      (set! cars (append cars (list 'car (- i j))))\n\
    \      (set! cars (append cars (list 'car (+ i j))))\n      (set! cars (append\
    \ cars (list 'car (- i j))))\n      (set! cars (append cars (list 'car (+ i j))))\n\
    \      (set! cars (append cars (list 'car (- i j))))\n      (set! cars (append\
    \ cars (list 'car (+ i j))))\n      (set! cars (append cars (list 'car (- i j))))\n\
    \      (set! cars (append cars (list 'car (+ i j))))\n      (set! cars (append\
    \ cars (list 'car (- i j))))\n      (set! cars (append cars (list 'car (+ i j))))\n\
    \      (set! cars (append cars (list 'car (- i j))))\n      (set! cars (append\
    \ cars (list 'car (+ i j))))\n      (set! cars (append cars (list 'car (- i j))))\n\
    \      (set! cars (append cars (list 'car (+ i j))))\n      (set! cars (append\
    \ cars (list 'car (- i j))))\n      (set! cars (append cars (list 'car (+ i j))))\n\
    \      (set! cars (append cars (list 'car (- i j))))\n      (set! cars (append\
    \ cars (list 'car (+ i j))))\n      (set! cars (append cars (list 'car", "  (define\
    \ (collide a b)\n    (< (abs (- a b)) n))\n  (define (collides a)\n    (filter\
    \ collide a))\n  (define (collides-list a)\n    (map (lambda (b) (collide a b))\
    \ a))\n  (define (collides-list-list a)\n    (map (lambda (b) (map (lambda (a)\
    \ (collide a b)) a)) a))\n  (define (collides-list-list-list a)\n    (map (lambda\
    \ (b) (map (lambda (a) (map (lambda (b) (collide a b)) a)) a)) a))\n  (define\
    \ (collides-list-list-list-list a)\n    (map (lambda (b) (map (lambda (a) (map\
    \ (lambda (b) (map (lambda (c) (collide a b)) a)) a)) a)) a))\n  (define (collides-list-list-list-list-list\
    \ a)\n    (map (lambda (b) (map (lambda (a) (map (lambda (b) (map (lambda (c)\
    \ (map (lambda (d) (collide a b)) a)) a)) a)) a)) a))\n  (define (collides-list-list-list-list-list\
    \ a)\n    (map (lambda (b) (map (lambda (a) (map (lambda (b) (map (lambda (c)\
    \ (map (lambda (d) (map (lambda (e) (collide a b)) a)) a)) a)) a)) a)) a))\n \
    \ (define (collides-list-list-list-list-list-list a)\n    (map (lambda (b) (map\
    \ (lambda (a) (map (lambda (b) (map (lambda (c) (map (lambda (d) (map (lambda\
    \ (e) (map (lambda (f) (collide a b)) a)) a)) a)) a)) a)) a)) a))\n  (define (collides-list-list-list-list-list-list\
    \ a)\n    (map (lambda (b) (map (lambda (a) (map (lambda (b) (map (lambda (c)\
    \ (map (lambda (d) (map (lambda (e) (map (lambda (f) (map (lambda (g) (collide\
    \ a b)) a)) a)) a)) a)) a)) a)) a))\n  (define (collides-list-list-list-list-list-list-list\
    \ a)\n    (map (lambda (b) (map (lambda (a) (map (lambda (b) (map (lambda (c)\
    \ (map (lambda (d) (map (lambda (e) (map (lambda (f) (map (lambda (g) (map (lambda\
    \ (h) (collide a b)) a)) a)) a)) a)) a)) a)) a)) a))\n  (define (colli", "  (let\
    \ ((cars (make-array n #:element-type 'car)))\n    (define (collide? car other-car)\n\
    \      (< (car-speed car) (car-speed other-car))\n    )\n    (define (collides\
    \ car other-car)\n      (cond ((< n 2)\n             (if (collide? car other-car)\n\
    \                 (cond ((< n 1)\n                        (set! cars (append (cars\
    \ car) (list other-car)))\n                          (set! cars (append (cars\
    \ other-car) (list car)))\n                          (set! n 0)\n            \
    \              (cars))\n                      (set! n 0)\n                   \
    \   (cars))\n               (set! n 0)\n               (cars))\n             (set!\
    \ n 0)\n             (cars))\n    (set! cars (append (cars car) (list car)))\n\
    \    (set! cars (append (cars car) (list car)))\n    (set! n 0)\n    (cars))\n\
    \  )\n)\n", "  (let ((cars (make-array n '(lambda (x) (make-array n '(lambda (y)\
    \ (+ x y)))))\n        (collisions 0))\n    (dotimes (i n)\n      (let ((car cars)\n\
    \            (car-x i)\n            (car-y i))\n        (dotimes (j n)\n     \
    \     (let ((other-car cars)\n                (other-car-x j)\n              \
    \  (other-car-y j))\n            (if (= i j)\n                (set! car (make-array\
    \ n '(lambda (x) (make-array n '(lambda (y) (+ x y)))))\n                    \
    \  (set! car-x i)\n                      (set! car-y i)\n                    \
    \  (set! other-car other-car)\n                      (set! other-car-x other-car-x)\n\
    \                      (set! other-car-y other-car-y))\n                (set!\
    \ car (make-array n '(lambda (x) (make-array n '(lambda (y) (+ x y)))))\n    \
    \                  (set! car-x i)\n                      (set! car-y i)\n    \
    \                  (set! other-car other-car)\n                      (set! other-car-x\
    \ other-car-x)\n                      (set! other-car-y other-car-y)\n       \
    \               (set! collisions (+ collisions 1))\n                      (set!\
    \ car (+ car other-car))\n                      (set! car-x car-x)\n         \
    \             (set! car-y car-y)\n                      (set! other-car other-car)\n\
    \                      (set! other-car-x other-car-x)\n                      (set!\
    \ other-car-y other-car-y)))))\n        (set! cars (+ car other-car)))))\n  collisions))\n",
  "  (let ((cars (make-array n '(list 'car))))\n    (dotimes (i n)\n      (set! cars\
    \ (assoc i cars))\n      (set! cars (assoc 0 (cars cars)))\n      (set! cars (assoc\
    \ 1 (cars cars)))\n      (set! cars (assoc 2 (cars cars)))\n      (set! cars (assoc\
    \ 3 (cars cars)))\n      (set! cars (assoc 4 (cars cars)))\n      (set! cars (assoc\
    \ 5 (cars cars)))\n      (set! cars (assoc 6 (cars cars)))\n      (set! cars (assoc\
    \ 7 (cars cars)))\n      (set! cars (assoc 8 (cars cars)))\n      (set! cars (assoc\
    \ 9 (cars cars)))\n      (set! cars (assoc 10 (cars cars)))\n      (set! cars\
    \ (assoc 11 (cars cars)))\n      (set! cars (assoc 12 (cars cars)))\n      (set!\
    \ cars (assoc 13 (cars cars)))\n      (set! cars (assoc 14 (cars cars)))\n   \
    \   (set! cars (assoc 15 (cars cars)))\n      (set! cars (assoc 16 (cars cars)))\n\
    \      (set! cars (assoc 17 (cars cars)))\n      (set! cars (assoc 18 (cars cars)))\n\
    \      (set! cars (assoc 19 (cars cars)))\n      (set! cars (assoc 20 (cars cars)))\n\
    \      (set! cars (assoc 21 (cars cars)))\n      (set! cars (assoc 22 (cars cars)))\n\
    \      (set! cars (assoc 23 (cars cars)))\n      (set! cars (assoc 24 (cars cars)))\n\
    \      (set! cars (assoc 25 (cars cars)))\n      (set! cars (assoc 26 (cars cars)))\n\
    \      (set! cars (assoc 27 (cars cars)))\n      (set! cars (assoc 28 (cars cars)))\n\
    \      (set! cars (assoc 29 (cars cars)))\n      (set! cars (assoc 30 (cars cars)))\n\
    \      (set! cars (assoc 31 (cars cars)))\n      (set! cars (assoc 32 (cars cars)))\n\
    \      (set! cars (assoc 33 (cars cars)))\n      (set! cars (assoc ", "  (let\
    \ ((cars (make-array n #:element-type '(unsigned-byte 8))))\n    (define (collision\
    \ i j)\n      (let ((car (cars i)))\n        (if (< j n)\n            (let ((car\
    \ (cars j)))\n              (if (< (car i) (car j))\n                  (set! cars\
    \ (set! cars (- i 1) cars))\n                  (set! cars (set! cars (- j 1) cars))\n\
    \                  (set! cars (+ i 1) cars))\n              (set! cars (+ j 1)\
    \ cars))\n          (set! cars (+ i 1) cars))\n      (set! cars (+ j 1) cars))\n\
    \    (set! cars (make-array n #:element-type '(unsigned-byte 8))\n           \
    \ (lambda () (cars 0))\n            (lambda (i j) (collision i j))))\n    (let\
    \ ((collisions (car-race n cars))\n          (collision (car-race n cars) (car-race\
    \ n cars)))\n      (if (= n 0)\n          (if (= (car collisions) (car collision))\n\
    \              (+ 1 (car-race n cars))\n              (+ 1 (car-race n cars)))\n\
    \          (+ 1 (car-race n cars)))))\n", "  (let ((cars (make-array (list n (make-array\
    \ n '(list 'car))))))\n    (set! cars (make-array (list n (make-array n '(list\
    \ 'car))))))\n    (let ((collisions 0))\n      (for ((i 0) (j n-1))\n        (let\
    \ ((car (cars i j)))\n          (if (> (car-x car) (car-x cars))\n           \
    \   (set! collisions (+ collisions 1))\n              (set! cars (set! cars (+\
    \ i 1) (+ j 1))\n                        (cars (+ i 1) (+ j 1))\n            \
    \            (car (cars i j))))))\n      (set! cars (make-array (list n (make-array\
    \ n '(list 'car))))))\n    collisions))\n", "  (let ((cars (make-array (list n\
    \ (list 'car)))\n        (collided (make-array (list n (list 'car))))\n      \
    \  (collisions (make-array (list n (list 'car))))\n        (collision-count 0))\n\
    \    (dotimes (i n)\n      (set! cars (make-array (list n (list 'car))))\n   \
    \   (dotimes (j n)\n        (set! cars (make-array (list n (list 'car))))\n  \
    \      (dotimes (k n)\n          (set! cars (make-array (list n (list 'car))))\n\
    \          (set! collisions (make-array (list n (list 'car))))\n          (set!\
    \ collisions (make-array (list n (list 'car))))\n          (set! collisions (make-array\
    \ (list n (list 'car))))\n          (set! collisions (make-array (list n (list\
    \ 'car))))\n          (set! collisions (make-array (list n (list 'car))))\n  \
    \        (set! collisions (make-array (list n (list 'car))))\n          (set!\
    \ collisions (make-array (list n (list 'car))))\n          (set! collisions (make-array\
    \ (list n (list 'car))))\n          (set! collisions (make-array (list n (list\
    \ 'car))))\n          (set! collisions (make-array (list n (list 'car))))\n  \
    \        (set! collisions (make-array (list n (list 'car))))\n          (set!\
    \ collisions (make-array (list n (list 'car))))\n          (set! collisions (make-array\
    \ (list n (list 'car))))\n          (set! collisions (make-array (list n (list\
    \ 'car))))\n          (set! collisions (make-array (list n (list 'car))))\n  \
    \        (set! collisions (make-array (list n (list 'car))))\n          (set!\
    \ collisions (make-array (list n (list 'car))))\n          (set! collisions (make-array\
    \ (list n (list 'car))))\n          (set! collisions (make-array (list n (list\
    \ 'car))))\n          (set! collisions (make-array (list n (list 'car))))\n  \
    \        (set! collisions (make-array (list n (list 'car))))\n          (set!\
    \ collisions (make-array (list n (list 'car))))\n          (set! collisions (make-array\
    \ (list n (list 'car))))\n", "  (let ((cars (make-array (list n (make-array n\
    \ '(list 'car))))))\n    (dotimes (i n)\n      (dotimes (j n)\n        (set! cars\
    \ (assoc i j cars))\n        (set! cars (assoc j i cars))))\n    (count (cars\
    \ 'car))))\n", "  (define (collide a b)\n    (< (abs (- a b)) n))\n  (define (collides\
    \ a)\n    (filter (lambda (b) (collide a b)) (cars a)))\n  (define (collides-list\
    \ a)\n    (map (lambda (b) (collide a b)) (cars a)))\n  (define (collides-list-length\
    \ a)\n    (length (filter (lambda (b) (collide a b)) (cars a))))\n  (define (collides-list-lengths\
    \ a)\n    (map (lambda (b) (collide a b)) (cars a)))\n  (define (collides-list-lengths-list\
    \ a)\n    (map (lambda (b) (collide a b)) (cars a)))\n  (define (collides-list-lengths-list-list\
    \ a)\n    (map (lambda (b) (collide a b)) (cars a)))\n  (define (collides-list-lengths-list-list-list\
    \ a)\n    (map (lambda (b) (collide a b)) (cars a)))\n  (define (collides-list-lengths-list-list-list-list\
    \ a)\n    (map (lambda (b) (collide a b)) (cars a)))\n  (define (collides-list-lengths-list-list-list-list-list\
    \ a)\n    (map (lambda (b) (collide a b)) (cars a)))\n  (define (collides-list-lengths-list-list-list-list-list-list\
    \ a)\n    (map (lambda (b) (collide a b)) (cars a)))\n  (define (collides-list-lengths-list-list-list-list-list-list\
    \ a)\n    (map (lambda (b) (collide a b)) (cars a)))\n  (define (collides-list-lengths-list-list-list-list-list-list-list\
    \ a)\n    (map (lambda (b) (collide a b)) (cars a)))\n  (define (collides-list-lengths-list-list-list-list-list-list-list-list\
    \ a)\n    (map (lambda (b) (collide a b)) (cars a)))\n  (define (collides-list-lengths-list-list-list-list-list-list-list-list-list\
    \ a)\n    (map (lambda (b) (collide a b)) (cars a)))\n  (define (collides-list-lengths-list-list-list-list-list-list-list-list-list\
    \ a)\n    (map (lambda (b) (collide a b)) (cars a)))\n  (define (collides-list-lengths-list-list-list-list-list-list-list-list-list ",
  "  (define (collision-counter a b)\n    (if (= a b)\n        0\n        (+ 1 (collision-counter\
    \ (cdr a) (cdr b))))\n    (collision-counter (cdr a) (cdr b)))\n  (define (collision-counter\
    \ a b)\n    (if (= a b)\n        0\n        (+ 1 (collision-counter (cdr a) (cdr\
    \ b))))\n  (define (collision-counter a b)\n    (if (= a b)\n        0\n     \
    \   (+ 1 (collision-counter (cdr a) (cdr b))))\n  (define (collision-counter a\
    \ b)\n    (if (= a b)\n        0\n        (+ 1 (collision-counter (cdr a) (cdr\
    \ b))))\n  (define (collision-counter a b)\n    (if (= a b)\n        0\n     \
    \   (+ 1 (collision-counter (cdr a) (cdr b))))\n  (define (collision-counter a\
    \ b)\n    (if (= a b)\n        0\n        (+ 1 (collision-counter (cdr a) (cdr\
    \ b))))\n  (define (collision-counter a b)\n    (if (= a b)\n        0\n     \
    \   (+ 1 (collision-counter (cdr a) (cdr b))))\n  (define (collision-counter a\
    \ b)\n    (if (= a b)\n        0\n        (+ 1 (collision-counter (cdr a) (cdr\
    \ b))))\n  (define (collision-counter a b)\n    (if (= a b)\n        0\n     \
    \   (+ 1 (collision-counter (cdr a) (cdr b))))\n  (define (collision-counter a\
    \ b)\n    (if (= a b)\n        0\n        (+ 1 (collision-counter (cdr a) (cdr\
    \ b))))\n  (define (collision-counter a b)\n    (if (= a b)\n        0\n     \
    \   (+ 1 (collision-counter (cdr a) (cdr b))))\n  (define (collision-counter a\
    \ b)\n    (if (= a b)\n        0\n        (+ 1 (collision-counter (cdr a) (cdr\
    \ b))))\n  (define (collision-counter a b)\n    (if (= a b)\n        0\n     \
    \   (+ 1 (collision-counter (cdr a) (cdr b))))\n  (define (collision-counter a\
    \ b)\n    (if (= a b)\n        0\n        (+ 1 (collision-counter (cdr a) (cdr\
    \ b))))\n  (define (collision-counter a ", "  (let ((cars (make-array n #:element-type\
    \ 'car)))\n    (define (collide a b)\n      (< (car-speed a) (car-speed b))\n\
    \      (< (car-speed b) (car-speed a))\n      (< (car-speed a) (car-speed b))\n\
    \      (< (car-speed b) (car-speed a)))\n    (define (collides i j)\n      (or\
    \ (and (< i j) (< j n))\n          (and (< i n) (< n j))\n          (and (< i\
    \ n) (< n j))\n          (and (< j n) (< n i))))\n    (define (collide? a b)\n\
    \      (and (< a b) (< b a)))\n    (define (collides i j)\n      (or (and (< i\
    \ j) (< j n))\n          (and (< i n) (< n j))\n          (and (< i n) (< n j))\n\
    \          (and (< j n) (< n i))))\n    (define (collide? a b)\n      (and (<\
    \ a b) (< b a)))\n    (define (collides i j)\n      (or (and (< i j) (< j n))\n\
    \          (and (< i n) (< n j))\n          (and (< i n) (< n j))\n          (and\
    \ (< j n) (< n i))))\n    (define (collide? a b)\n      (and (< a b) (< b a)))\n\
    \    (define (collides i j)\n      (or (and (< i j) (< j n))\n          (and (<\
    \ i n) (< n j))\n          (and (< i n) (< n j))\n          (and (< j n) (< n\
    \ i))))\n    (define (collide? a b)\n      (and (< a b) (< b a)))\n    (define\
    \ (collides i j)\n      (or (and (< i j) (< j n))\n          (and (< i n) (< n\
    \ j))\n          (and (< i n) (< n j))\n          (and (< j n) (< n i))))\n  \
    \  (define (collide? a b)\n      (and (< a b) (< b a)))\n    (define (collides\
    \ i j)\n      (or (and (< i j) (< j n))\n          (and (< i n) (< n j))\n   \
    \       (and (< i n) (< n j))\n          (and (< j n) (< n i", "  (define (collision\
    \ x y)\n    (cond ((< x y) 0)\n          ((< y n) 0)\n          (else (+ 1 (collision\
    \ (- x 1) (- y 1))))))\n  (collision 0 n))\n", "  (let ((cars (make-array n '(list\
    \ 'car))))\n    (define (collides car other-car)\n      (< (car-speed car) (car-speed\
    \ other-car))\n      (< (car-speed other-car) (car-speed car))\n      (< (car-speed\
    \ car) (car-speed other-car))\n      (< (car-speed other-car) (car-speed car))\n\
    \      (< (car-speed car) (car-speed other-car))\n      (< (car-speed other-car)\
    \ (car-speed car))\n      (< (car-speed car) (car-speed other-car))\n      (<\
    \ (car-speed other-car) (car-speed car))\n      (< (car-speed car) (car-speed\
    \ other-car))\n      (< (car-speed other-car) (car-speed car))\n      (< (car-speed\
    \ car) (car-speed other-car))\n      (< (car-speed other-car) (car-speed car))\n\
    \      (< (car-speed car) (car-speed other-car))\n      (< (car-speed other-car)\
    \ (car-speed car))\n      (< (car-speed car) (car-speed other-car))\n      (<\
    \ (car-speed other-car) (car-speed car))\n      (< (car-speed car) (car-speed\
    \ other-car))\n      (< (car-speed other-car) (car-speed car))\n      (< (car-speed\
    \ car) (car-speed other-car))\n      (< (car-speed other-car) (car-speed car))\n\
    \      (< (car-speed car) (car-speed other-car))\n      (< (car-speed other-car)\
    \ (car-speed car))\n      (< (car-speed car) (car-speed other-car))\n      (<\
    \ (car-speed other-car) (car-speed car))\n      (< (car-speed car) (car-speed\
    \ other-car))\n      (< (car-speed other-car) (car-speed car))\n      (< (car-speed\
    \ car) (car-speed other-car))\n      (< (car-speed other-car) (car-speed car))\n\
    \      (< (car-speed car) (car-speed other-car))\n      (< (car-speed other-car)\
    \ (car-speed car))\n      (< (car-", "  (define (collision car1 car2)\n    (cond\
    \ ((and (< car1 car2) (< car2 car1))\n           (+ car1 car2))\n          ((and\
    \ (< car1 car2) (< car2 car2))\n           (+ car2 car1))\n          ((and (<\
    \ car1 car2) (< car2 car1))\n           (+ car1 car2))\n          ((and (< car1\
    \ car2) (< car2 car1))\n           (+ car2 car1))\n          (else\n         \
    \  (+ car1 car2))))\n  (define (collide car1 car2)\n    (cond ((and (< car1 car2)\
    \ (< car2 car1))\n           (+ car1 car2))\n          ((and (< car1 car2) (<\
    \ car2 car2))\n           (+ car2 car1))\n          ((and (< car1 car2) (< car2\
    \ car1))\n           (+ car1 car2))\n          ((and (< car1 car2) (< car2 car1))\n\
    \           (+ car2 car1))\n          (else\n           (+ car1 car2))))\n  (define\
    \ (collides car1 car2)\n    (cond ((and (< car1 car2) (< car2 car1))\n       \
    \    (+ car1 car2))\n          ((and (< car1 car2) (< car2 car2))\n          \
    \ (+ car2 car1))\n          ((and (< car1 car2) (< car2 car1))\n           (+\
    \ car1 car2))\n          ((and (< car1 car2) (< car2 car1))\n           (+ car2\
    \ car1))\n          (else\n           (+ car1 car2))))\n  (define (collides car1\
    \ car2)\n    (cond ((and (< car1 car2) (< car2 car1))\n           (+ car1 car2))\n\
    \          ((and (< car1 car2) (< car2 car2))\n           (+ car2 car1))\n   \
    \       ((and (< car1 car2) (< car2 car1))\n           (+ car1 car2))\n      \
    \    ((and (< car1 car2) (< car2 car1))\n           (+ car2 car1))\n         \
    \ (else\n           (+ car1 car2))))\n  (define (collides car1 car2)\n    (cond\
    \ ((and (< car1 car2) (< car2 car1))\n           (+ car1 car2))\n          ((and\
    \ (< car1 car2) (< car2 car2))\n           (+ car2 car1))\n          ((and (<\
    \ car", "  (define (collision x y)\n    (cond ((and (< x n) (< y n)) 0)\n    \
    \      ((and (< y n) (< x n)) 0)\n          (else 1)))\n  (define (collide x y)\n\
    \    (cond ((and (< x n) (< y n)) 0)\n          ((and (< y n) (< x n)) 0)\n  \
    \        (else 1)))\n  (define (collides xs ys)\n    (cond ((null? xs) 0)\n  \
    \        ((null? ys) 0)\n          ((and (< xs (car xs)) (< ys (car ys))) 0)\n\
    \          ((and (< ys (car ys)) (< xs (car xs))) 0)\n          (else (+ 1 (car\
    \ (car xs)) (collide (car xs) (car ys))\n                           (car (car\
    \ ys)) (collide (car ys) (car xs))))))\n  (define (collides xs ys)\n    (cond\
    \ ((null? xs) 0)\n          ((null? ys) 0)\n          ((and (< xs (car xs)) (<\
    \ ys (car ys))) 0)\n          ((and (< ys (car ys)) (< xs (car xs))) 0)\n    \
    \      (else (+ 1 (car (car xs)) (collide (car xs) (car ys))\n               \
    \            (car (car ys)) (collide (car ys) (car xs))))))\n  (define (collides\
    \ xs ys)\n    (cond ((null? xs) 0)\n          ((null? ys) 0)\n          ((and\
    \ (< xs (car xs)) (< ys (car ys))) 0)\n          ((and (< ys (car ys)) (< xs (car\
    \ xs))) 0)\n          (else (+ 1 (car (car xs)) (collide (car xs) (car ys))\n\
    \                           (car (car ys)) (collide (car ys) (car xs))))))\n \
    \ (define (collides xs ys)\n    (cond ((null? xs) 0)\n          ((null? ys) 0)\n\
    \          ((and (< xs (car xs)) (< ys (car ys))) 0)\n          ((and (< ys (car\
    \ ys)) (< xs (car xs))) 0)\n          (else (+ 1 (car (car x", "  (let ((cars\
    \ (make-array (* n n) '(unsigned-byte 32))))\n    (dotimes (i n)\n      (dotimes\
    \ (j n)\n        (set! cars (+ cars (* i j)))\n        (set! cars (+ cars (* j\
    \ i)))\n        (set! cars (+ cars (* i j)))\n        (set! cars (+ cars (* j\
    \ i))))\n      (let ((collisions (car-race cars n)))\n        (if (= collisions\
    \ 0)\n            (+ 1 (* i j))\n            collisions)))))\n", "  (let ((cars\
    \ (make-array n '(list 'car))))\n    (define (collide a b)\n      (< (car-x a)\
    \ (car-x b))\n      (< (car-y a) (car-y b))\n      (< (car-x b) (car-x a))\n \
    \     (< (car-y b) (car-y a)))\n    (let ((collisions 0))\n      (for ((i 0) (<\
    \ i (- n 1)))\n        (let ((a (cars i))\n              (b (cars (+ i 1)))\n\
    \              (collided? false))\n          (if (or (< a 0) (< b 0))\n      \
    \        (set! collided? true)\n              (set! collisions (+ collisions 1)))\n\
    \          (set! i (+ i 1))\n          (when (and (not collided?) (collide a b))\n\
    \            (set! collided? false)))))\n    (set! cars nil)\n    collisions))\n",
  "  (define (collision car1 car2)\n    (cond\n      [(and (< car1 car2) (< car2 car1))\n\
    \       (+ n 1)]\n      [(and (< car1 car2) (> car2 car1))\n       (+ n 1)]\n\
    \      [(and (> car1 car2) (< car2 car1))\n       (+ n 1)]\n      [(and (> car1\
    \ car2) (> car2 car1))\n       (+ n 1)]))\n  (define (collisions cars)\n    (cond\n\
    \      [(null? cars)\n       0]\n      [(and (< (car cars) (car cars))\n     \
    \       (< (cdr cars) (cdr cars)))\n       (collision (car cars) (cdr cars))]\n\
    \      [(and (> (car cars) (car cars))\n            (> (cdr cars) (cdr cars)))\n\
    \       (collision (car cars) (cdr cars))]\n      [(and (< (car cars) (car cars))\n\
    \            (> (cdr cars) (cdr cars)))\n       (collision (car cars) (cdr cars))]\n\
    \      [(and (> (car cars) (car cars))\n            (< (cdr cars) (cdr cars)))\n\
    \       (collision (car cars) (cdr cars))]\n      [(and (> (car cars) (car cars))\n\
    \            (> (cdr cars) (cdr cars)))\n       (collision (car cars) (cdr cars))]\n\
    \      [(and (< (car cars) (car cars))\n            (< (cdr cars) (cdr cars)))\n\
    \       (collision (car cars) (cdr cars))]\n      [(and (> (car cars) (car cars))\n\
    \            (> (cdr cars) (cdr cars)))\n       (collision (car cars) (cdr cars))]\n\
    \      [(and (< (car cars) (car cars))\n            (> (cdr cars) (cdr cars)))\n\
    \       (collision (car cars) (cdr cars))]\n      [(and (> (car cars) (car cars))\n\
    \            (< (cdr cars) (cdr cars)))\n       (collision (car cars) (cdr cars))]\n\
    \      [(and (< (car cars) (car cars))\n            (> (cdr cars) (cdr cars)))\n\
    \       (collision (car cars) (cdr cars))]\n      [(and (> (car car", "  (define\
    \ (collision-check x y)\n    (cond ((and (< x n) (< y n))\n           (cond ((<\
    \ x 0) (< y 0))\n                 ((< x 0) (< y 1))\n                 ((< x 1)\
    \ (< y 0))\n                 ((< x 1) (< y 1))\n                 ((< x 2) (< y\
    \ 0))\n                 ((< x 2) (< y 1))\n                 ((< x 3) (< y 0))\n\
    \                 ((< x 3) (< y 1))\n                 ((< x 4) (< y 0))\n    \
    \             ((< x 4) (< y 1))\n                 ((< x 5) (< y 0))\n        \
    \         ((< x 5) (< y 1))\n                 ((< x 6) (< y 0))\n            \
    \     ((< x 6) (< y 1))\n                 ((< x 7) (< y 0))\n                \
    \ ((< x 7) (< y 1))\n                 ((< x 8) (< y 0))\n                 ((<\
    \ x 8) (< y 1))\n                 ((< x 9) (< y 0))\n                 ((< x 9)\
    \ (< y 1))\n                 ((< x 10) (< y 0))\n                 ((< x 10) (<\
    \ y 1))\n                 ((< x 11) (< y 0))\n                 ((< x 11) (< y\
    \ 1))\n                 ((< x 12) (< y 0))\n                 ((< x 12) (< y 1))\n\
    \                 ((< x 13) (< y 0))\n                 ((< x 13) (< y 1))\n  \
    \               ((< x 14) (< y 0))\n                 ((< x 14) (< y 1))\n    \
    \             ((< x 15) (< y 0))\n                 ((< x 15) (< y 1))\n      \
    \           ((< x 16) (< y 0))\n                 ((< x 16) (< y 1))\n        \
    \         ((< x 17) (< y 0))\n                 ((< x 17) (< y 1))\n          \
    \       ((< x 18) (< y 0))\n                 ((< x 18) (< y 1))\n            \
    \     ((< x 19) (< y 0))\n                 ((< x 19) (< y 1))\n              \
    \   ((< x 20) (< y 0))\n                 ((< x 20) (< y 1))\n                \
    \ ((< x 21) (< y 0))\n                 ((< x 21) (< y 1))\n                 ((<\
    \ x 22) (< y 0))\n                 ((< x 22) (< y 1))\n                 ((< x\
    \ 23) (< y 0))\n                 ((< x 23) (< y 1))\n                 ((< x 24)\
    \ (", "  (let ([cars (make-array (* n n) '(cons car car))])\n    (define (collide\
    \ i j)\n      (cond [(< i j) (+ i j)]\n            [(< j i) (+ j i)]\n       \
    \     [else 0]))\n    (define (collides i j)\n      (cond [(< i j) (+ i j)]\n\
    \            [(< j i) (+ j i)]\n            [else 0]))\n    (define (collides-in\
    \ i j k)\n      (cond [(< i j) (+ i j)]\n            [(< j i) (+ j i)]\n     \
    \       [else 0]))\n    (define (collides-in i j k)\n      (cond [(< i j) (+ i\
    \ j)]\n            [(< j i) (+ j i)]\n            [else 0]))\n    (define (collides-in\
    \ i j k)\n      (cond [(< i j) (+ i j)]\n            [(< j i) (+ j i)]\n     \
    \       [else 0]))\n    (define (collides-in i j k)\n      (cond [(< i j) (+ i\
    \ j)]\n            [(< j i) (+ j i)]\n            [else 0]))\n    (define (collides-in\
    \ i j k)\n      (cond [(< i j) (+ i j)]\n            [(< j i) (+ j i)]\n     \
    \       [else 0]))\n    (define (collides-in i j k)\n      (cond [(< i j) (+ i\
    \ j)]\n            [(< j i) (+ j i)]\n            [else 0]))\n    (define (collides-in\
    \ i j k)\n      (cond [(< i j) (+ i j)]\n            [(< j i) (+ j i)]\n     \
    \       [else 0]))\n    (define (collides-in i j k)\n      (cond [(< i j) (+ i\
    \ j)]\n            [(< j i) (+ j i)]\n            [else 0]))\n    (define (collides-in\
    \ i j k)\n      (cond [(< i j) (+ i j)]\n            [(< j i) (+ j i)]\n     \
    \       [else 0]))\n    (define (collides-in i j k)\n      (cond [(< i j) (+ i\
    \ j)]\n            [(< j i) (+ j i)]\n            [else 0]))\n    (define (collides-in\
    \ i j k)\n      (cond [(", "  (let ([cars (make-array n #:initial-contents '(#t\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f ", "  (let ((cars (make-array n '(list\
    \ 'car))))\n    (dotimes (i n)\n      (let ((car (car cars)))\n        (set! car\
    \ (make-instance 'car))\n        (set! car (make-instance 'car))\n        (set!\
    \ car (make-instance 'car))\n        (set! car (make-instance 'car))\n       \
    \ (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n \
    \       (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance ",
  "  (let ([cars (make-array n #:initial-contents '(#t #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f ", "  (let ((cars (make-array n '(list 'car))))\n    (dotimes\
    \ (i n)\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (asso", "  (define (collision car1 car2)\n    (cond\n      [(<\
    \ car1 car2) 0]\n      [(> car1 car2) 1]\n      [else (+ collision (car1 car2)\
    \ (car2 car1))]))\n  (define (collides car1 car2)\n    (cond\n      [(< car1 car2)\
    \ 0]\n      [(> car1 car2) 1]\n      [else (+ collides (car1 car2) (car2 car1))]))\n\
    \  (define (collides-left car1 car2)\n    (cond\n      [(< car1 car2) 0]\n   \
    \   [(> car1 car2) 1]\n      [else (+ collides-left (car1 car2) (car2 car1))]))\n\
    \  (define (collides-right car1 car2)\n    (cond\n      [(< car1 car2) 0]\n  \
    \    [(> car1 car2) 1]\n      [else (+ collides-right (car1 car2) (car2 car1))]))\n\
    \  (define (collides-both car1 car2)\n    (cond\n      [(< car1 car2) 0]\n   \
    \   [(> car1 car2) 1]\n      [else (+ collides-both (car1 car2) (car2 car1))]))\n\
    \  (define (collides-both-left car1 car2)\n    (cond\n      [(< car1 car2) 0]\n\
    \      [(> car1 car2) 1]\n      [else (+ collides-both-left (car1 car2) (car2\
    \ car1))]))\n  (define (collides-both-right car1 car2)\n    (cond\n      [(< car1\
    \ car2) 0]\n      [(> car1 car2) 1]\n      [else (+ collides-both-right (car1\
    \ car2) (car2 car1))]))\n  (define (collides-both-both car1 car2)\n    (cond\n\
    \      [(< car1 car2) 0]\n      [(> car1 car2) 1]\n      [else (+ collides-both-both\
    \ (car1 car2) (car2 car1))]))\n  (define (collides-both-both-left car1 car2)\n\
    \    (cond\n      [(< car1 car2) 0]\n      [(> car1 car2) 1]\n      [else (+ collides-both-both-left\
    \ (car1 car2) (car2 car1))]))\n  (define (collides-both-both-right car1 car2)\n\
    \    (cond\n      [(< car", "  (let ((cars (make-array n '(list 'car)))\n    \
    \    (collisions '()))\n    (dotimes (i n)\n      (let ((car cars i)\n       \
    \     (car-right (car cars i+1))\n            (car-left (car cars i-1)))\n   \
    \     (if (and (not (null? car-left car-right car))\n                 (not (member?\
    \ (car-left car) collisions)))\n            (set! collisions (cons (car-left car)\
    \ collisions))\n            (set! collisions (cons (car-right car) collisions))))\n\
    \    (length collisions)))\n", "  (let ((cars (make-array (+ n 1) (list 'car))))\n\
    \    (dotimes (i n)\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ 0 (cars cars))))\n    (length cars)))\n", "  (let ([cars (make-array n #:element-type\
    \ 'car)])\n    (define (collide x y)\n      (< (car-x x) (car-x y))\n      (<\
    \ (car-y x) (car-y y)))\n    (define (collides xs ys)\n      (cond ((null? xs)\
    \ #f)\n            ((null? ys) #f)\n            (else (and (collide (car-x xs)\
    \ (car-x ys))\n                      (collide (car-y xs) (car-y ys))))\n    (define\
    \ (collides-all xs ys)\n      (cond ((null? xs) #f)\n            ((null? ys) #f)\n\
    \            (else (and (collides xs (cdr ys))\n                      (collides\
    \ xs (cddr ys))))\n    (define (collides-all xs ys zs)\n      (cond ((null? xs)\
    \ #f)\n            ((null? ys) #f)\n            ((null? zs) #f)\n            (else\
    \ (and (collides xs (cdr ys) (cdr zs))\n                      (collides xs (cddr\
    \ ys) (cddr zs))))\n    (define (collides-all xs ys zs as)\n      (cond ((null?\
    \ xs) #f)\n            ((null? ys) #f)\n            ((null? zs) #f)\n        \
    \    ((null? as) #f)\n            (else (and (collides xs (cdr ys) (cdr zs) (cdr\
    \ as))\n                      (collides xs (cddr ys) (cddr zs) (cddr as))))\n\
    \    (define (collides-all xs ys zs as bs)\n      (cond ((null? xs) #f)\n    \
    \        ((null? ys) #f)\n            ((null? zs) #f)\n            ((null? as)\
    \ #f)\n            ((null? bs) #f)\n            (else (and (collides xs (cdr ys)\
    \ (cdr zs) (cdr as) (cdr bs))\n                      (collides xs (cddr ys) (cddr\
    \ zs) (cddr as) (cddr bs))))\n    (define (collides-all xs ys zs as bs cs)\n \
    \     (cond ((null? xs) #f)\n            ((", "  (let ((cars (make-array (+ n\
    \ 1) (list 'car))))\n    (dotimes (i n)\n      (set! cars (make-array (+ n 1)\
    \ (list 'car)))\n      (set! cars (make-array (+ n 1) (list 'car)))\n      (set!\
    \ cars (make-array (+ n 1) (list 'car)))\n      (set! cars (make-array (+ n 1)\
    \ (list 'car)))\n      (set! cars (make-array (+ n 1) (list 'car)))\n      (set!\
    \ cars (make-array (+ n 1) (list 'car)))\n      (set! cars (make-array (+ n 1)\
    \ (list 'car)))\n      (set! cars (make-array (+ n 1) (list 'car)))\n      (set!\
    \ cars (make-array (+ n 1) (list 'car)))\n      (set! cars (make-array (+ n 1)\
    \ (list 'car)))\n      (set! cars (make-array (+ n 1) (list 'car)))\n      (set!\
    \ cars (make-array (+ n 1) (list 'car)))\n      (set! cars (make-array (+ n 1)\
    \ (list 'car)))\n      (set! cars (make-array (+ n 1) (list 'car)))\n      (set!\
    \ cars (make-array (+ n 1) (list 'car)))\n      (set! cars (make-array (+ n 1)\
    \ (list 'car)))\n      (set! cars (make-array (+ n 1) (list 'car)))\n      (set!\
    \ cars (make-array (+ n 1) (list 'car)))\n      (set! cars (make-array (+ n 1)\
    \ (list 'car)))\n      (set! cars (make-array (+ n 1) (list 'car)))\n      (set!\
    \ cars (make-array (+ n 1) (list 'car)))\n      (set! cars (make-array (+ n 1)\
    \ (list 'car)))\n      (set! cars (make-array (+ n 1) (list 'car)))\n      (set!\
    \ cars (make-array (+ n 1) (list 'car)))\n      (set! cars (make-array (+ n 1)\
    \ (list 'car)))\n      (set! cars (make-array (+ n 1) (list 'car)))\n      (set!\
    \ cars (make-array (+ n 1) (list 'car)))\n      (set! cars (make-array (+ n 1)\
    \ (list 'car)))\n      (set! cars (make-array (+ n 1) (", "  (let ((cars (make-array\
    \ n #:element-type 'car)))\n    (define (collides car1 car2)\n      (< (car-speed\
    \ car1) (car-speed car2))\n      (< (car-speed car2) (car-speed car1))\n     \
    \ (< (car-speed car1) (car-speed car2))\n      (< (car-speed car2) (car-speed\
    \ car1))\n      (< (car-speed car1) (car-speed car2))\n      (< (car-speed car2)\
    \ (car-speed car1))\n      (< (car-speed car1) (car-speed car2))\n      (< (car-speed\
    \ car2) (car-speed car1))\n      (< (car-speed car1) (car-speed car2))\n     \
    \ (< (car-speed car2) (car-speed car1))\n      (< (car-speed car1) (car-speed\
    \ car2))\n      (< (car-speed car2) (car-speed car1))\n      (< (car-speed car1)\
    \ (car-speed car2))\n      (< (car-speed car2) (car-speed car1))\n      (< (car-speed\
    \ car1) (car-speed car2))\n      (< (car-speed car2) (car-speed car1))\n     \
    \ (< (car-speed car1) (car-speed car2))\n      (< (car-speed car2) (car-speed\
    \ car1))\n      (< (car-speed car1) (car-speed car2))\n      (< (car-speed car2)\
    \ (car-speed car1))\n      (< (car-speed car1) (car-speed car2))\n      (< (car-speed\
    \ car2) (car-speed car1))\n      (< (car-speed car1) (car-speed car2))\n     \
    \ (< (car-speed car2) (car-speed car1))\n      (< (car-speed car1) (car-speed\
    \ car2))\n      (< (car-speed car2) (car-speed car1))\n      (< (car-speed car1)\
    \ (car-speed car2))\n      (< (car-speed car2) (car-speed car1))\n      (< (car-speed\
    \ car1) (car-speed car2))\n      (< (car-speed car2) (car-speed car1))\n     \
    \ (< (car-speed car1) (car-speed car2))\n      (< (car-speed car2) (car-speed\
    \ car1))\n      (< (car-speed car1) (car-speed car2))\n      (< (car-speed car2)\
    \ (car-speed car1))\n      (< (car-speed car1) (c", "  (let ((cars (make-array\
    \ n '(list 'car))))\n    (dotimes (i n)\n      (set! cars (assoc i cars))\n  \
    \    (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set!\
    \ cars (assoc i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc\
    \ i cars))\n      (set! cars (assoc i cars))\n      (set! cars (assoc i cars))\n\
    \      (set! cars (assoc i cars))\n      (set! cars (asso", "  (let ((cars (make-array\
    \ n '(list 'car))))\n    (dotimes (i n)\n      (let ((car (car cars)))\n     \
    \   (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance 'car))\n\
    \        (set! car (make-instance 'car))\n        (set! car (make-instance ",
  "  (let ((collisions 0))\n    (for ((i n) (j n))\n      (if (= i j)\n          (set!\
    \ collisions (incar collisions))\n          (set! collisions (incar collisions))))))\n",
  "  (let ((cars (make-array n '(list 'car))))\n    (define (collide a b)\n      (<\
    \ (car a) (car b)))\n    (define (collides i j)\n      (cond ((or (< i j) (< j\
    \ n))\n             (cond ((< i n) (cons i cars))\n                   ((< j n)\
    \ (cons j cars))\n                   (else (cons i cars))))\n            (else\
    \ (cond ((< i j) (cons i cars))\n                       ((< j n) (cons j cars))\n\
    \                       (else (cons j cars))))))\n    (define (move a b)\n   \
    \   (cond ((< a b) (cons b cars))\n            (else (cons a cars))))\n    (define\
    \ (collide-pairs i j)\n      (cond ((or (< i j) (< j n))\n             (cond ((<\
    \ i n) (cons i cars))\n                   ((< j n) (cons j cars))\n          \
    \         (else (cons i cars))))\n            (else (cond ((< i j) (cons i cars))\n\
    \                       ((< j n) (cons j cars))\n                       (else\
    \ (cons j cars))))))\n    (define (collide-pairs i j)\n      (cond ((or (< i j)\
    \ (< j n))\n             (cond ((< i n) (cons i cars))\n                   ((<\
    \ j n) (cons j cars))\n                   (else (cons i cars))))\n           \
    \ (else (cond ((< i j) (cons i cars))\n                       ((< j n) (cons j\
    \ cars))\n                       (else (cons j cars))))))\n    (define (collide-pairs\
    \ i j)\n      (cond ((or (< i j) (< j n))\n             (cond ((< i n) (cons i\
    \ cars))\n                   ((< j n) (cons j cars))\n                   (else\
    \ (cons i cars))))\n            (else (cond ((< i j) (cons i cars))\n        \
    \               ((< j n) (cons j cars))\n                       (else (cons j\
    \ cars))))))\n    (define (collide-pairs i j)\n      (cond ((or (< i j) (< j n))\n\
    \             (cond ((< i n) (cons i cars))\n                   ((< ", "  (let\
    \ ((cars (make-array n '(list 'car))))\n    (dotimes (i n)\n      (set! cars (cdr\
    \ cars))\n      (set! cars (make-array n '(list 'car)))\n      (dotimes (j n)\n\
    \        (set! cars (cdr cars))\n        (set! cars (make-array n '(list 'car)))\n\
    \        (set! cars (make-array n '(list 'car)))\n        (set! cars (make-array\
    \ n '(list 'car)))\n        (set! cars (make-array n '(list 'car)))\n        (set!\
    \ cars (make-array n '(list 'car)))\n        (set! cars (make-array n '(list 'car)))\n\
    \        (set! cars (make-array n '(list 'car)))\n        (set! cars (make-array\
    \ n '(list 'car)))\n        (set! cars (make-array n '(list 'car)))\n        (set!\
    \ cars (make-array n '(list 'car)))\n        (set! cars (make-array n '(list 'car)))\n\
    \        (set! cars (make-array n '(list 'car)))\n        (set! cars (make-array\
    \ n '(list 'car)))\n        (set! cars (make-array n '(list 'car)))\n        (set!\
    \ cars (make-array n '(list 'car)))\n        (set! cars (make-array n '(list 'car)))\n\
    \        (set! cars (make-array n '(list 'car)))\n        (set! cars (make-array\
    \ n '(list 'car)))\n        (set! cars (make-array n '(list 'car)))\n        (set!\
    \ cars (make-array n '(list 'car)))\n        (set! cars (make-array n '(list 'car)))\n\
    \        (set! cars (make-array n '(list 'car)))\n        (set! cars (make-array\
    \ n '(list 'car)))\n        (set! cars (make-array n '(list 'car)))\n        (set!\
    \ cars (make-array n '(list 'car)))\n        (set! cars (make-array n '(list 'car)))\n\
    \        (set! cars (make-array n '(list 'car)))\n        (set! cars (make-array\
    \ n '(list 'car)))\n        (set! cars (make-array n '(list 'car)))\n        (set!\
    \ cars (make-array n '(list 'car", "  (define (collides car other-car)\n    (<\
    \ (abs (car-x car)) (abs (other-car-x other-car))) \n    (< (abs (car-y car))\
    \ (abs (other-car-y other-car))) \n    (< (abs (car-x other-car)) (abs (car-x\
    \ car))) \n    (< (abs (car-y other-car)) (abs (car-y car)))\n  )\n  (define (collides-list\
    \ cars other-cars)\n    (if (null? other-cars)\n        (cars)\n        (if (null?\
    \ cars)\n            (list '())\n            (if (null? (car cars))\n        \
    \        (list (car cars))\n                (if (null? (car other-cars))\n   \
    \                 (list (car other-cars))\n                    (if (null? (other-cars\
    \ cars))\n                        (list (other-cars cars))\n                 \
    \       (if (null? (other-cars other-cars))\n                            (list\
    \ (other-cars other-cars))\n                            (if (null? (collides car\
    \ other-car) (collides-list '() other-cars))))))))))\n  (define (collides-list\
    \ cars other-cars)\n    (if (null? other-cars)\n        (cars)\n        (if (null?\
    \ cars)\n            (list '())\n            (if (null? (car cars))\n        \
    \        (list (car cars))\n                (if (null? (car other-cars))\n   \
    \                 (list (car other-cars))\n                    (if (null? (other-cars\
    \ cars))\n                        (list (other-cars cars))\n                 \
    \       (if (null? (other-cars other-cars))\n                            (list\
    \ (other-cars other-cars))\n                            (if (null? (collides car\
    \ other-car) (collides-list '() other-cars))))))))))\n  (define (collides-list\
    \ cars other-cars)\n    (if (null? other-cars)\n        (cars)\n        (if (null?\
    \ cars)\n            (list '())\n            (if (null? (car cars))\n        \
    \        (list (car cars))\n                (if (null? (car other-cars))\n   \
    \                 (list (car other-cars))\n                    (if (null? (other-cars\
    \ cars))\n                        (list (other-cars cars))\n                 \
    \       (if (null? (other-cars other-cars))\n                            (list\
    \ (other-", "  (let ([cars (make-array n #:initial-contents '(#t #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f ", "  (let ((cars (make-array n '(list 'car))))\n\
    \    (dotimes (i n)\n      (set! cars (car-race (car cars) (car cars))))\n   \
    \ (length (filter (lambda (car cars)\n                     (or (car-collided (car\
    \ cars) (car cars))\n                         (car-collided (car cars) (car cars))))\n\
    \                 cars))))\n", "  (let ((cars (make-array n '(list 'car))))\n\
    \    (define (collide a b)\n      (< (car-x a) (car-x b))\n      (< (car-y a)\
    \ (car-y b))\n      (< (car-x b) (car-x a))\n      (< (car-y b) (car-y a)))\n\
    \    (define (collides a)\n      (cond ((null? a) 0)\n            ((collide (car\
    \ a) (car a))\n             (+ 1 (car-race_collision (cdr a))))\n            (else\
    \ (+ 1 (car-race_collision (cdr a))))))\n    (define (collides-all a)\n      (cond\
    \ ((null? a) 0)\n            ((collide (car a) (car a))\n             (+ 1 (car-race_collision\
    \ (cdr a))))\n            (else (+ 1 (car-race_collision (cdr a))))))\n    (define\
    \ (collides-all a b)\n      (cond ((null? a) 0)\n            ((collide (car a)\
    \ (car b))\n             (+ 1 (car-race_collision (cdr a))))\n            (else\
    \ (+ 1 (car-race_collision (cdr a))))))\n    (define (collides-all a b c)\n  \
    \    (cond ((null? a) 0)\n            ((collide (car a) (car b))\n           \
    \  (+ 1 (car-race_collision (cdr a))))\n            (else (+ 1 (car-race_collision\
    \ (cdr a))))))\n    (define (collides-all a b c d)\n      (cond ((null? a) 0)\n\
    \            ((collide (car a) (car b))\n             (+ 1 (car-race_collision\
    \ (cdr a))))\n            (else (+ 1 (car-race_collision (cdr a))))))\n    (define\
    \ (collides-all a b c d e)\n      (cond ((null? a) 0)\n            ((collide (car\
    \ a) (car b))\n             (+ 1 (car-race_collision (cdr a))))\n            (else\
    \ (+ 1 (car-race_collision (cdr a))))))\n    (define (collides-all a b c d e f)\n\
    \      (cond ((null? a) 0)\n            ((collide (car a) (car b))\n         \
    \    (+ 1 (car-race_collision (cdr a))))\n            (else (+ 1 (", "  (define\
    \ (collision car1 car2)\n    (cond\n      [(< car1 car2) 0]\n      [(< car2 car1)\
    \ 0]\n      [else (+ 1 (collision car1 (- car2 car1)))]))\n  (define (collisions\
    \ cars)\n    (cond\n      [(empty? cars) 0]\n      [(< (car-speed cars) 0) (collisions\
    \ (rest cars))]\n      [(collision (car-speed cars) (car-speed (car cars))) (incf\
    \ (collisions cars))]\n      [else (collisions (rest cars))]))\n  (collisions\
    \ cars))\n", "  (define (collision car1 car2)\n    (cond\n      [(and (< car1\
    \ car2) (< car2 car1))\n       (+ n 1)]\n      [(and (< car1 car2) (< car2 car2))\n\
    \       (+ n 1)]\n      [(and (< car1 car2) (< car2 car1))\n       (+ n 1)]\n\
    \      [else\n       (+ n 0)]))\n  (define (collide car1 car2)\n    (cond\n  \
    \    [(and (< car1 car2) (< car2 car1))\n       (collision car1 car2)]\n     \
    \ [(and (< car1 car2) (< car2 car2))\n       (collision car1 car2)]\n      [(and\
    \ (< car1 car2) (< car2 car1))\n       (collision car1 car2)]\n      [else\n \
    \      (collision car1 car2)]))\n  (define (collide_all cars)\n    (cond\n   \
    \   [(null? cars)\n       0]\n      [(and (< cars cars) (< cars cars))\n     \
    \  (+ n 0)]\n      [(and (< cars cars) (< cars cars))\n       (+ n 0)]\n     \
    \ [(and (< cars cars) (< cars cars))\n       (+ n 0)]\n      [else\n       (+\
    \ n (map (lambda (car) (collide car cars)) cars))]))\n  (define (collide_all cars)\n\
    \    (cond\n      [(null? cars)\n       0]\n      [(and (< cars cars) (< cars\
    \ cars))\n       (+ n 0)]\n      [(and (< cars cars) (< cars cars))\n       (+\
    \ n 0)]\n      [(and (< cars cars) (< cars cars))\n       (+ n 0)]\n      [else\n\
    \       (+ n (map (lambda (car) (collide car cars)) cars))]))\n  (define (collide_all\
    \ cars)\n    (cond\n      [(null? cars)\n       0]\n      [(and (< cars cars)\
    \ (< cars cars))\n       (+ n 0)]\n      [(and (< cars cars) (< cars cars))\n\
    \       (+ n 0)]\n      [(and (< cars cars) (< cars cars))\n       (+ n 0)]\n\
    \      [else\n       (+ n (map (lambda (car) (collide car cars)) cars))]))\n \
    \ (define (collide_all cars)\n", "  (let ((collisions 0))\n    (dotimes (i n)\n\
    \      (let ((car (make-instance 'car)))\n        (set! car.x 0)\n        (set!\
    \ car.y 0)\n        (set! car.speed 0)\n        (set! car.direction 0)\n     \
    \   (set! car.collided false)\n        (set! car.colliding-with '())\n       \
    \ (set! car.colliding-with-x 0)\n        (set! car.colliding-with-y 0)\n     \
    \   (set! car.colliding-with-speed 0)\n        (set! car.colliding-with-direction\
    \ 0)\n        (set! car.colliding-with-collided false)\n        (set! car.colliding-with-colliding-with\
    \ '())\n        (set! car.colliding-with-colliding-with-x 0)\n        (set! car.colliding-with-colliding-with-y\
    \ 0)\n        (set! car.colliding-with-colliding-with-speed 0)\n        (set!\
    \ car.colliding-with-colliding-with-direction 0)\n        (set! car.colliding-with-colliding-with-collided\
    \ false)\n        (set! car.colliding-with-colliding-with-colliding-with '())\n\
    \        (set! car.colliding-with-colliding-with-colliding-with-x 0)\n       \
    \ (set! car.colliding-with-colliding-with-colliding-with-y 0)\n        (set! car.colliding-with-colliding-with-colliding-with-speed\
    \ 0)\n        (set! car.colliding-with-colliding-with-colliding-with-direction\
    \ 0)\n        (set! car.colliding-with-colliding-with-colliding-with-collided\
    \ false)\n        (set! car.colliding-with-colliding-with-colliding-with-colliding-with\
    \ '())\n        (set! car.colliding-with-colliding-with-colliding-with-colliding-with-x\
    \ 0)\n        (set! car.colliding-with-colliding-with-colliding-with-colliding-with-y\
    \ 0)\n        (set! car.colliding-with-colliding-with-colliding-with-colliding-with-speed\
    \ 0)\n        (set! car.colliding-with-colliding-with-colliding-with-colliding-with-direction\
    \ 0)\n        (set! car.colliding-with-colliding-with-colliding-with-colliding-with-collided\
    \ false)\n        (set! car.", "  (define (collision x y)\n    (cond ((< x y)\
    \ 0)\n          ((< y n) 0)\n          (else 1)))\n  (define (collide_left x y)\n\
    \    (cond ((< x y) 0)\n          ((< y n) 0)\n          (else (collision x y))))\n\
    \  (define (collide_right x y)\n    (cond ((< x y) 0)\n          ((< y n) 0)\n\
    \          (else (collision x y))))\n  (define (collide_all x y)\n    (cond ((<\
    \ x y) 0)\n          ((< y n) 0)\n          (else (collision x y))))\n  (define\
    \ (collide_left x y)\n    (cond ((< x y) 0)\n          ((< y n) 0)\n         \
    \ (else (collision x y))))\n  (define (collide_right x y)\n    (cond ((< x y)\
    \ 0)\n          ((< y n) 0)\n          (else (collision x y))))\n  (define (collide_all\
    \ x y)\n    (cond ((< x y) 0)\n          ((< y n) 0)\n          (else (collision\
    \ x y))))\n  (define (collide_left x y)\n    (cond ((< x y) 0)\n          ((<\
    \ y n) 0)\n          (else (collision x y))))\n  (define (collide_right x y)\n\
    \    (cond ((< x y) 0)\n          ((< y n) 0)\n          (else (collision x y))))\n\
    \  (define (collide_all x y)\n    (cond ((< x y) 0)\n          ((< y n) 0)\n \
    \         (else (collision x y))))\n  (define (collide_left x y)\n    (cond ((<\
    \ x y) 0)\n          ((< y n) 0)\n          (else (collision x y))))\n  (define\
    \ (collide_right x y)\n    (cond ((< x y) 0)\n          ((< y n) 0)\n        \
    \  (else (collision x y))))\n  (define (collide_all x y)\n    (cond ((< x y) 0)\n\
    \          ((< y n) 0)\n          (else (collision x y))))\n  (define (collide_left\
    \ x y)\n    (cond ((< x y) 0)\n          ((< y n) 0)\n          (else (collision\
    \ x y))))\n  (define (collide_right x y)\n    (cond ((< ", "  (let ((cars (make-array\
    \ n '(list 'car))))\n    (define (collide a b)\n      (< (car-speed a) (car-speed\
    \ b))\n      (< (car-speed b) (car-speed a))\n      (< (car-speed a) (car-speed\
    \ b))\n      (< (car-speed b) (car-speed a))\n      (< (car-speed a) (car-speed\
    \ b))\n      (< (car-speed b) (car-speed a))\n      (< (car-speed a) (car-speed\
    \ b))\n      (< (car-speed b) (car-speed a)))\n    (define (collides a)\n    \
    \  (cond ((null? a) '())\n            ((and (not (null? (cdr a)))\n          \
    \        (and (not (null? (cdr (cdr a))))\n                      (and (not (null?\
    \ (cdr (cdr (cdr a))))\n                              (and (not (null? (cdr (cdr\
    \ (cdr (cdr a))))))\n                                      (and (not (null? (cdr\
    \ (cdr (cdr (cdr (cdr a))))))\n                                              (and\
    \ (not (null? (cdr (cdr (cdr (cdr (cdr (cdr a)))))))))\n                     \
    \             (and (not (null? (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr a))))))))))\n\
    \                                      (and (not (null? (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr a))))))))))\n                                              (and\
    \ (not (null? (cdr (cdr (cdr (cdr (cdr (cdr (cdr a)))))))))))))\n            \
    \          (and (not (null? (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr a))))))))))\n\
    \                              (and (not (null? (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr a))))))))))\n                                      (and (not\
    \ (null? (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr a))))))))))\n               \
    \                               (and (not (null? (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr a)))))))))))))\n", "  (let ((cars (make-array (list n (make-array (list\
    \ n))))))\n    (set! cars (make-array (list n (make-array (list n))))))\n  (define\
    \ (collision i j)\n    (let ((car (cars i j)))\n      (cond\n        ((null? car)\n\
    \         (cond\n           ((= i j) 0)\n           (else (+ 1 (collision (- i\
    \ 1) j))))\n         (else (collision (- i 1) (- j 1))))))\n  (let ((i 0))\n \
    \   (cond\n      ((< i n) (collision i n))\n      (else (+ 1 (collision i 1))))))\n",
  "  (let ((cars (make-array n '(list 'car))))\n    (define (collision i j)\n    \
    \  (cond\n        ((= i j) 0)\n        ((< (car cars) (car cars (+ i 1)))\n  \
    \       (+ (car cars (+ i 1)) (collision (+ i 1) j)))\n        ((> (car cars)\
    \ (car cars (+ j 1)))\n         (+ (car cars (+ j 1)) (collision i (+ j 1)))\n\
    \         1))\n    (let ((collisions (make-array n '(list 0))))\n      (do ((i\
    \ 0 (+ i 1))\n           (j (+ j 1))\n           (collision (+ i 1) (+ j 1)))\n\
    \          ((< i n) (set! collisions (append collisions (list collision))))\n\
    \          (set! collisions (append collisions (list collision))))\n      collisions))))\n",
  "  (let ((cars (make-array (+ n 1) (list 'car)))\n        (collisions (make-array\
    \ (+ n 1) (list 'int))))\n    (dotimes (i n)\n      (set! cars (make-array (+\
    \ n 1) (list 'car)))\n      (dotimes (j n)\n        (set! cars (make-array (+\
    \ n 1) (list 'car)))\n        (set! collisions (make-array (+ n 1) (list 0))))\n\
    \    (dotimes (i n)\n      (set! collisions (make-array (+ n 1) (list 0))))\n\
    \    (dotimes (i n)\n      (set! collisions (make-array (+ n 1) (list 0))))\n\
    \    (dotimes (i n)\n      (set! collisions (make-array (+ n 1) (list 0))))\n\
    \    (dotimes (i n)\n      (set! collisions (make-array (+ n 1) (list 0))))\n\
    \    (dotimes (i n)\n      (set! collisions (make-array (+ n 1) (list 0))))\n\
    \    (dotimes (i n)\n      (set! collisions (make-array (+ n 1) (list 0))))\n\
    \    (dotimes (i n)\n      (set! collisions (make-array (+ n 1) (list 0))))\n\
    \    (dotimes (i n)\n      (set! collisions (make-array (+ n 1) (list 0))))\n\
    \    (dotimes (i n)\n      (set! collisions (make-array (+ n 1) (list 0))))\n\
    \    (dotimes (i n)\n      (set! collisions (make-array (+ n 1) (list 0))))\n\
    \    (dotimes (i n)\n      (set! collisions (make-array (+ n 1) (list 0))))\n\
    \    (dotimes (i n)\n      (set! collisions (make-array (+ n 1) (list 0))))\n\
    \    (dotimes (i n)\n      (set! collisions (make-array (+ n 1) (list 0))))\n\
    \    (dotimes (i n)\n      (set! collisions (make-array (+ n 1) (list 0))))\n\
    \    (dotimes (i n)\n      (set! collisions (make-array (+ n 1) (list 0))))\n\
    \    (dotimes (i n)\n      (set! collisions (make-array (+ n 1) (list 0))))\n\
    \    (dotimes (i n)\n      (set! collisions (make-array (+ n 1) (list 0))))\n\
    \    (dotimes (i n)\n      (set! collisions (make-array (+ n 1) (list 0))))\n\
    \    (do", "  (define (collision x y)\n    (cond\n      [(< x y) 0]\n      [(>\
    \ x y) 1]\n      [else (+ 1 (collision (- x 1) y))]))\n  (define (collisions xs\
    \ ys)\n    (cond\n      [(null? xs) 0]\n      [(null? ys) 0]\n      [(< (car xs)\
    \ (car ys)) (collisions (cdr xs) (cdr ys))]\n      [else (+ 1 (collisions (cdr\
    \ xs) (cdr ys)))]))\n  (collisions ((list n) (list n)))\n)\n", "  (let ((cars\
    \ (make-array (+ n 1) (list 'car)))\n        (collisions (make-array (+ n 1) (list\
    \ 'int))))\n    (dotimes (i n)\n      (set! cars (cdr cars))\n      (set! collisions\
    \ (cdr collisions))\n      (set! cars (make-array (+ n 1) (list 'car)))\n    \
    \  (set! collisions (make-array (+ n 1) (list 'int))))\n    (dotimes (i n)\n \
    \     (set! cars (cdr cars))\n      (set! collisions (cdr collisions))\n     \
    \ (set! cars (make-array (+ n 1) (list 'car)))\n      (set! collisions (make-array\
    \ (+ n 1) (list 'int))))\n    (dotimes (i n)\n      (set! cars (cdr cars))\n \
    \     (set! collisions (cdr collisions))\n      (set! cars (make-array (+ n 1)\
    \ (list 'car)))\n      (set! collisions (make-array (+ n 1) (list 'int))))\n \
    \   (dotimes (i n)\n      (set! cars (cdr cars))\n      (set! collisions (cdr\
    \ collisions))\n      (set! cars (make-array (+ n 1) (list 'car)))\n      (set!\
    \ collisions (make-array (+ n 1) (list 'int))))\n    (dotimes (i n)\n      (set!\
    \ cars (cdr cars))\n      (set! collisions (cdr collisions))\n      (set! cars\
    \ (make-array (+ n 1) (list 'car)))\n      (set! collisions (make-array (+ n 1)\
    \ (list 'int))))\n    (dotimes (i n)\n      (set! cars (cdr cars))\n      (set!\
    \ collisions (cdr collisions))\n      (set! cars (make-array (+ n 1) (list 'car)))\n\
    \      (set! collisions (make-array (+ n 1) (list 'int))))\n    (dotimes (i n)\n\
    \      (set! cars (cdr cars))\n      (set! collisions (cdr collisions))\n    \
    \  (set! cars (make-array (+ n 1) (list 'car)))\n      (set! collisions (make-array\
    \ (+ n 1) (list 'int))))\n    (dotimes (i n)\n      (set! cars (cdr cars))\n \
    \     (set! collisions (cdr collisions))\n      (set! cars (make-array (+ n 1)\
    \ (list 'car)))\n      (set! collisions (make-array (+ ", "  (let ((cars (make-array\
    \ (list n (list 'car)))\n        (collisions 0))\n    (define (next-car)\n   \
    \   (let ((car (car cars)))\n        (set! cars (cdr cars))\n        (car car)))\n\
    \    (define (collide? car next-car)\n      (< (car next-car) (car car)))\n  \
    \  (define (collide? car next-car)\n      (< (car next-car) (car car)))\n    (define\
    \ (collide? car next-car)\n      (< (car next-car) (car car)))\n    (define (collide?\
    \ car next-car)\n      (< (car next-car) (car car)))\n    (define (collide? car\
    \ next-car)\n      (< (car next-car) (car car)))\n    (define (collide? car next-car)\n\
    \      (< (car next-car) (car car)))\n    (define (collide? car next-car)\n  \
    \    (< (car next-car) (car car)))\n    (define (collide? car next-car)\n    \
    \  (< (car next-car) (car car)))\n    (define (collide? car next-car)\n      (<\
    \ (car next-car) (car car)))\n    (define (collide? car next-car)\n      (< (car\
    \ next-car) (car car)))\n    (define (collide? car next-car)\n      (< (car next-car)\
    \ (car car)))\n    (define (collide? car next-car)\n      (< (car next-car) (car\
    \ car)))\n    (define (collide? car next-car)\n      (< (car next-car) (car car)))\n\
    \    (define (collide? car next-car)\n      (< (car next-car) (car car)))\n  \
    \  (define (collide? car next-car)\n      (< (car next-car) (car car)))\n    (define\
    \ (collide? car next-car)\n      (< (car next-car) (car car)))\n    (define (collide?\
    \ car next-car)\n      (< (car next-car) (car car)))\n    (define (collide? car\
    \ next-car)\n      (< (", "  (let ((cars (make-array (+ n 1) '(list 'car)))\n\
    \        (collisions (make-array (+ n 1) '(list 0))))\n    (dotimes (i n)\n  \
    \    (set! cars (cdr cars))\n      (set! collisions (cdr collisions))\n      (set!\
    \ collisions (car-race (car cars) (car collisions))))\n    (length collisions)))\n",
  "  (let ((cars (make-array n #:initial-contents #:element-type 'car)))\n    (define\
    \ (collide a b)\n      (< (car-x a) (car-x b))\n      (< (car-y a) (car-y b))\n\
    \      (< (car-x b) (car-x a))\n      (< (car-y b) (car-y a)))\n    (define (collides\
    \ i j)\n      (cond ((or (< i n) (< j n)) 0)\n            ((and (< i 0) (< j n))\
    \ 0)\n            (else (or (and (< i 0) (< j 0)) (car cars)\n               \
    \        (and (< i n) (< j n)) (car cars)\n                       (and (< i 0)\
    \ (< j 0)) (car cars)\n                       (and (< i n) (< j 0)) (car cars)\n\
    \                       (and (< i 0) (< j n)) (car cars)\n                   \
    \    (and (< i n) (< j 0)) (car cars)\n                       (and (< i 0) (<\
    \ j n)) (car cars)\n                       (and (< i n) (< j 0)) (car cars)\n\
    \                       (and (< i 0) (< j n)) (car cars)\n                   \
    \    (and (< i n) (< j 0)) (car cars)\n                       (and (< i 0) (<\
    \ j n)) (car cars)\n                       (and (< i n) (< j 0)) (car cars)\n\
    \                       (and (< i 0) (< j n)) (car cars)\n                   \
    \    (and (< i n) (< j 0)) (car cars)\n                       (and (< i 0) (<\
    \ j n)) (car cars)\n                       (and (< i n) (< j 0)) (car cars)\n\
    \                       (and (< i 0) (< j n)) (car cars)\n                   \
    \    (and (< i n) (< j 0)) (car cars)\n                       (and (< i 0) (<\
    \ j n)) (car cars)\n                       (and (< i n) (< j 0)) (car cars)\n\
    \                       (and (< i 0) (< j n)) (car cars)\n                   \
    \    (and (< i n) (< j 0)) (car cars)\n                       (and (< i 0) (<\
    \ j n)) (car cars)\n                       (and (< i n) (< j 0)) (car cars)\n\
    \                       (and (< i 0) (< j n)) (car cars)\n                   \
    \    (and ("]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
