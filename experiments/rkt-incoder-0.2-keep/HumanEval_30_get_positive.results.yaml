language: racket
name: HumanEval_30_get_positive
results:
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (>= x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1\
    \ -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9\
    \ 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list\
    \ -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp62m5dn24.rkt:17:4

    actual:     ''(5 3 2 3 3 9 0 123 1)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (>= x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1\
    \ -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9\
    \ 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list\
    \ -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpphk_5xgf.rkt:17:4

    actual:     ''(5 3 2 3 3 9 0 123 1)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (>= x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1\
    \ -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9\
    \ 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list\
    \ -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdpcrove2.rkt:17:4

    actual:     ''(5 3 2 3 3 9 0 123 1)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (>= x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1\
    \ -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9\
    \ 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list\
    \ -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7q3g3_2h.rkt:17:4

    actual:     ''(5 3 2 3 3 9 0 123 1)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (>= x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1\
    \ -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9\
    \ 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list\
    \ -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppajh3uby.rkt:17:4

    actual:     ''(5 3 2 3 3 9 0 123 1)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (>= x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1\
    \ -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9\
    \ 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list\
    \ -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpifbsgtnz.rkt:17:4

    actual:     ''(5 3 2 3 3 9 0 123 1)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (>= x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1\
    \ -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9\
    \ 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list\
    \ -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoh5pkiby.rkt:17:4

    actual:     ''(5 3 2 3 3 9 0 123 1)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (>= x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1\
    \ -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9\
    \ 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list\
    \ -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3ng05bcw.rkt:17:4

    actual:     ''(5 3 2 3 3 9 0 123 1)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (>= x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1\
    \ -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9\
    \ 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list\
    \ -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl2giap9p.rkt:17:4

    actual:     ''(5 3 2 3 3 9 0 123 1)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (>= x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1\
    \ -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9\
    \ 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list\
    \ -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpry6vuwe0.rkt:17:4

    actual:     ''(5 3 2 3 3 9 0 123 1)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (>= x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1\
    \ -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9\
    \ 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list\
    \ -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjjigoeif.rkt:17:4

    actual:     ''(5 3 2 3 3 9 0 123 1)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (>= x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1\
    \ -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9\
    \ 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list\
    \ -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprs5zrutx.rkt:17:4

    actual:     ''(5 3 2 3 3 9 0 123 1)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (>= x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1\
    \ -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9\
    \ 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list\
    \ -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpibb6l2l1.rkt:17:4

    actual:     ''(5 3 2 3 3 9 0 123 1)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (>= x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1\
    \ -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9\
    \ 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list\
    \ -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpclp1k8w6.rkt:17:4

    actual:     ''(5 3 2 3 3 9 0 123 1)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (>= x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1\
    \ -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9\
    \ 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list\
    \ -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3uk0gl7y.rkt:17:4

    actual:     ''(5 3 2 3 3 9 0 123 1)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (>= x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1\
    \ -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9\
    \ 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list\
    \ -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5qhikjut.rkt:17:4

    actual:     ''(5 3 2 3 3 9 0 123 1)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (>= x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1\
    \ -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9\
    \ 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list\
    \ -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2ppf5zg9.rkt:17:4

    actual:     ''(5 3 2 3 3 9 0 123 1)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (>= x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1\
    \ -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9\
    \ 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list\
    \ -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6cl6ykz5.rkt:17:4

    actual:     ''(5 3 2 3 3 9 0 123 1)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (>= x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1\
    \ -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9\
    \ 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list\
    \ -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyfyrbf7g.rkt:17:4

    actual:     ''(5 3 2 3 3 9 0 123 1)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (>= x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1\
    \ -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9\
    \ 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list\
    \ -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3vpmg8hy.rkt:17:4

    actual:     ''(5 3 2 3 3 9 0 123 1)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (>= x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1\
    \ -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9\
    \ 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list\
    \ -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkux5kqxo.rkt:17:4

    actual:     ''(5 3 2 3 3 9 0 123 1)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (>= x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1\
    \ -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9\
    \ 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list\
    \ -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mzg07dz.rkt:17:4

    actual:     ''(5 3 2 3 3 9 0 123 1)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (>= x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1\
    \ -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9\
    \ 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list\
    \ -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpggb9yydm.rkt:17:4

    actual:     ''(5 3 2 3 3 9 0 123 1)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (>= x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1\
    \ -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9\
    \ 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list\
    \ -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp59sl48r9.rkt:17:4

    actual:     ''(5 3 2 3 3 9 0 123 1)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (>= x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1\
    \ -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9\
    \ 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list\
    \ -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__74pyv9.rkt:17:4

    actual:     ''(5 3 2 3 3 9 0 123 1)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (>= x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1\
    \ -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9\
    \ 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list\
    \ -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjlr_j69j.rkt:17:4

    actual:     ''(5 3 2 3 3 9 0 123 1)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (>= x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1\
    \ -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9\
    \ 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list\
    \ -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr3s6y7nv.rkt:17:4

    actual:     ''(5 3 2 3 3 9 0 123 1)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (>= x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1\
    \ -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9\
    \ 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list\
    \ -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl_qfax4r.rkt:17:4

    actual:     ''(5 3 2 3 3 9 0 123 1)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (>= x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1\
    \ -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9\
    \ 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list\
    \ -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7_9sibnu.rkt:17:4

    actual:     ''(5 3 2 3 3 9 0 123 1)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n;; [2, 5, 6]\n;; >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n;; [5, 3, 2, 3, 9, 123, 1]\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
