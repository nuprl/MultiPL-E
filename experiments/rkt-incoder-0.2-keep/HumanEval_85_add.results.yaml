language: racket
name: HumanEval_85_add
results:
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpu37yq0pk.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpu37yq0pk.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpu37yq0pk.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpu37yq0pk.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyox1_i03.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyox1_i03.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyox1_i03.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyox1_i03.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcjlw7c6k.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcjlw7c6k.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcjlw7c6k.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcjlw7c6k.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcyidoyjx.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcyidoyjx.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcyidoyjx.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcyidoyjx.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphy3vvfwp.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphy3vvfwp.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphy3vvfwp.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphy3vvfwp.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpypenownt.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpypenownt.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpypenownt.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpypenownt.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpt2alsjyn.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpt2alsjyn.rkt:18:4

    actual:     9

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpt2alsjyn.rkt:19:4

    actual:     4

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpt2alsjyn.rkt:20:4

    actual:     8

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphxx3cycf.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphxx3cycf.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphxx3cycf.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphxx3cycf.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp846p_84c.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp846p_84c.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp846p_84c.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp846p_84c.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]\n  ))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4lbh85n6.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4lbh85n6.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4lbh85n6.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4lbh85n6.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]\n  ))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgt052fua.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgt052fua.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgt052fua.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgt052fua.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp4ekhtp1.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp4ekhtp1.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp4ekhtp1.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp4ekhtp1.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp026zhu8v.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp026zhu8v.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp026zhu8v.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp026zhu8v.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbdi2f__2.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbdi2f__2.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbdi2f__2.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbdi2f__2.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpna336g1d.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpna336g1d.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpna336g1d.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpna336g1d.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (if (null? lst)\n      '()\n      (cons (car lst)\n     \
    \       (add (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n \
    \   (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmz9mo8la.rkt:17:4

    actual:     ''(4 88)

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmz9mo8la.rkt:18:4

    actual:     ''(4 5 6 7 2 122)

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmz9mo8la.rkt:19:4

    actual:     ''(4 0 6 7)

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmz9mo8la.rkt:20:4

    actual:     ''(4 4 6 8)

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfu8v3t41.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfu8v3t41.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfu8v3t41.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfu8v3t41.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxxe3b1vy.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxxe3b1vy.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxxe3b1vy.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxxe3b1vy.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpna5ugcff.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpna5ugcff.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpna5ugcff.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpna5ugcff.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp87zud2sh.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp87zud2sh.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp87zud2sh.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp87zud2sh.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzb_zz00k.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzb_zz00k.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzb_zz00k.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzb_zz00k.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp96wzj3wu.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp96wzj3wu.rkt:18:4

    actual:     9

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp96wzj3wu.rkt:19:4

    actual:     4

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp96wzj3wu.rkt:20:4

    actual:     8

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpphab18f0.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpphab18f0.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpphab18f0.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpphab18f0.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdsl4jabf.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdsl4jabf.rkt:18:4

    actual:     9

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdsl4jabf.rkt:19:4

    actual:     4

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdsl4jabf.rkt:20:4

    actual:     8

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7wulueod.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7wulueod.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7wulueod.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7wulueod.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptyr7y96d.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptyr7y96d.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptyr7y96d.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptyr7y96d.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1pvnuphr.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1pvnuphr.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1pvnuphr.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1pvnuphr.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp36eytq2.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp36eytq2.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp36eytq2.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp36eytq2.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]\n  ))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnlw9zwf8.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnlw9zwf8.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnlw9zwf8.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnlw9zwf8.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpijxcyy6m.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpijxcyy6m.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpijxcyy6m.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpijxcyy6m.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj2wvsuh3.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj2wvsuh3.rkt:18:4

    actual:     9

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj2wvsuh3.rkt:19:4

    actual:     4

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj2wvsuh3.rkt:20:4

    actual:     8

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_y0dqikb.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_y0dqikb.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_y0dqikb.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_y0dqikb.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp91keez2e.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp91keez2e.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp91keez2e.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp91keez2e.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphyawsbi9.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphyawsbi9.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphyawsbi9.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphyawsbi9.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptv48gf2l.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptv48gf2l.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptv48gf2l.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptv48gf2l.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]\n  )\n)\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3zhx6yn7.rkt:19:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3zhx6yn7.rkt:20:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3zhx6yn7.rkt:21:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3zhx6yn7.rkt:22:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_hentrnj.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_hentrnj.rkt:18:4

    actual:     9

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_hentrnj.rkt:19:4

    actual:     4

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_hentrnj.rkt:20:4

    actual:     8

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7_0fn_30.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7_0fn_30.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7_0fn_30.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7_0fn_30.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3vy5kf10.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3vy5kf10.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3vy5kf10.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3vy5kf10.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpknmuni8b.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpknmuni8b.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpknmuni8b.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpknmuni8b.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95tzeuhy.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95tzeuhy.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95tzeuhy.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95tzeuhy.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9qsnab13.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9qsnab13.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9qsnab13.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9qsnab13.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]\n  ))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp977qdgog.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp977qdgog.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp977qdgog.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp977qdgog.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3lylfomi.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3lylfomi.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3lylfomi.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3lylfomi.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp64djxwty.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp64djxwty.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp64djxwty.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp64djxwty.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa78mkukl.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa78mkukl.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa78mkukl.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa78mkukl.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqxhqxki3.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqxhqxki3.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqxhqxki3.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqxhqxki3.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3ti2ws6y.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3ti2ws6y.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3ti2ws6y.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3ti2ws6y.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpulde8gcr.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpulde8gcr.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpulde8gcr.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpulde8gcr.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpg11sgbdh.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpg11sgbdh.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpg11sgbdh.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpg11sgbdh.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4e60zmh6.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4e60zmh6.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4e60zmh6.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4e60zmh6.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl65uqx36.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl65uqx36.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl65uqx36.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl65uqx36.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9tqurcbn.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9tqurcbn.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9tqurcbn.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9tqurcbn.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb83lqeqd.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb83lqeqd.rkt:18:4

    actual:     9

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb83lqeqd.rkt:19:4

    actual:     4

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb83lqeqd.rkt:20:4

    actual:     8

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8ainwn6l.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8ainwn6l.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8ainwn6l.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8ainwn6l.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp027ntxhq.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp027ntxhq.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp027ntxhq.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp027ntxhq.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvszg7kmm.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvszg7kmm.rkt:18:4

    actual:     9

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvszg7kmm.rkt:19:4

    actual:     4

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvszg7kmm.rkt:20:4

    actual:     8

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2pb0nd8s.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2pb0nd8s.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2pb0nd8s.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2pb0nd8s.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbykx1dam.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbykx1dam.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbykx1dam.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbykx1dam.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8auv5rug.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8auv5rug.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8auv5rug.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8auv5rug.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]\n  )\n)\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3sju2r1h.rkt:19:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3sju2r1h.rkt:20:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3sju2r1h.rkt:21:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3sju2r1h.rkt:22:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1m41s7xi.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1m41s7xi.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1m41s7xi.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1m41s7xi.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkd49zrev.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkd49zrev.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkd49zrev.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkd49zrev.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplrdi0_kg.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplrdi0_kg.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplrdi0_kg.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplrdi0_kg.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8lf14ps4.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8lf14ps4.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8lf14ps4.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8lf14ps4.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpux95jp7k.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpux95jp7k.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpux95jp7k.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpux95jp7k.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph48te9ch.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph48te9ch.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph48te9ch.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph48te9ch.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxfih1jhy.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxfih1jhy.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxfih1jhy.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxfih1jhy.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqg9eiovq.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqg9eiovq.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqg9eiovq.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqg9eiovq.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz6mwsm_p.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz6mwsm_p.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz6mwsm_p.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz6mwsm_p.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4txzq5gt.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4txzq5gt.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4txzq5gt.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4txzq5gt.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmposyg27uc.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmposyg27uc.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmposyg27uc.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmposyg27uc.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]\n  ))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb09tj5z8.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb09tj5z8.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb09tj5z8.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb09tj5z8.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6h_g8xk1.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6h_g8xk1.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6h_g8xk1.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6h_g8xk1.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]\n  )\n)\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyp0agisk.rkt:19:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyp0agisk.rkt:20:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyp0agisk.rkt:21:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyp0agisk.rkt:22:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcwecpfdn.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcwecpfdn.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcwecpfdn.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcwecpfdn.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4dg5tot3.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4dg5tot3.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4dg5tot3.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4dg5tot3.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9_c9i2ik.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9_c9i2ik.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9_c9i2ik.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9_c9i2ik.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpc5wazoq8.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpc5wazoq8.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpc5wazoq8.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpc5wazoq8.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzn5fh5aw.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzn5fh5aw.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzn5fh5aw.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzn5fh5aw.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7e562iue.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7e562iue.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7e562iue.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7e562iue.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgo6o7rjt.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgo6o7rjt.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgo6o7rjt.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgo6o7rjt.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]\n  ))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyq8nbp5s.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyq8nbp5s.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyq8nbp5s.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyq8nbp5s.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa63jkmu5.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa63jkmu5.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa63jkmu5.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa63jkmu5.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]\n  ))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy7o5c_gk.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy7o5c_gk.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy7o5c_gk.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy7o5c_gk.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpht_xb3g_.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpht_xb3g_.rkt:18:4

    actual:     9

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpht_xb3g_.rkt:19:4

    actual:     4

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpht_xb3g_.rkt:20:4

    actual:     8

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_2m36rjo.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_2m36rjo.rkt:18:4

    actual:     9

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_2m36rjo.rkt:19:4

    actual:     4

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_2m36rjo.rkt:20:4

    actual:     8

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp27mf4us7.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp27mf4us7.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp27mf4us7.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp27mf4us7.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpge3gstwt.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpge3gstwt.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpge3gstwt.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpge3gstwt.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_gxviyd.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_gxviyd.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_gxviyd.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_gxviyd.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_ecyajb8.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_ecyajb8.rkt:18:4

    actual:     9

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_ecyajb8.rkt:19:4

    actual:     4

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_ecyajb8.rkt:20:4

    actual:     8

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprgwf73lt.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprgwf73lt.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprgwf73lt.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprgwf73lt.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptl3olr8u.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptl3olr8u.rkt:18:4

    actual:     9

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptl3olr8u.rkt:19:4

    actual:     4

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptl3olr8u.rkt:20:4

    actual:     8

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd8h0v4g.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd8h0v4g.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd8h0v4g.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyd8h0v4g.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpinbrq0xb.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpinbrq0xb.rkt:18:4

    actual:     9

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpinbrq0xb.rkt:19:4

    actual:     4

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpinbrq0xb.rkt:20:4

    actual:     8

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfbgiil9_.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfbgiil9_.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfbgiil9_.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfbgiil9_.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp60bdtm8z.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp60bdtm8z.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp60bdtm8z.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp60bdtm8z.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpckalj_8c.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpckalj_8c.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpckalj_8c.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpckalj_8c.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6kr3swto.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6kr3swto.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6kr3swto.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6kr3swto.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppuwiowme.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppuwiowme.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppuwiowme.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppuwiowme.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr214wsvb.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr214wsvb.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr214wsvb.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr214wsvb.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpje90rfwr.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpje90rfwr.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpje90rfwr.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpje90rfwr.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpodixip07.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpodixip07.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpodixip07.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpodixip07.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6k9611az.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6k9611az.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6k9611az.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6k9611az.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]\n  ))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4ogo1yv0.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4ogo1yv0.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4ogo1yv0.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4ogo1yv0.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6tvrz239.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6tvrz239.rkt:18:4

    actual:     9

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6tvrz239.rkt:19:4

    actual:     4

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6tvrz239.rkt:20:4

    actual:     8

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7r3zo1tv.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7r3zo1tv.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7r3zo1tv.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7r3zo1tv.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8xta0wpc.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8xta0wpc.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8xta0wpc.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8xta0wpc.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwqjfi3i5.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwqjfi3i5.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwqjfi3i5.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwqjfi3i5.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv58lh2e4.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv58lh2e4.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv58lh2e4.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv58lh2e4.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb5l5m12e.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb5l5m12e.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb5l5m12e.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb5l5m12e.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgf5jf1ip.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgf5jf1ip.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgf5jf1ip.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgf5jf1ip.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl9fiqvul.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl9fiqvul.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl9fiqvul.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl9fiqvul.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjw995jp6.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjw995jp6.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjw995jp6.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjw995jp6.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvrqotq7u.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvrqotq7u.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvrqotq7u.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvrqotq7u.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]\n  ))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7ygv4m_z.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7ygv4m_z.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7ygv4m_z.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7ygv4m_z.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_e2d1qe.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_e2d1qe.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_e2d1qe.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_e2d1qe.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdj8rkhxh.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdj8rkhxh.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdj8rkhxh.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdj8rkhxh.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwt387zpz.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwt387zpz.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwt387zpz.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwt387zpz.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp0pdeili.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp0pdeili.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp0pdeili.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp0pdeili.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj0f8vld8.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj0f8vld8.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj0f8vld8.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj0f8vld8.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe0v7rr8c.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe0v7rr8c.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe0v7rr8c.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe0v7rr8c.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpha1ol7h0.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpha1ol7h0.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpha1ol7h0.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpha1ol7h0.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8z0348zv.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8z0348zv.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8z0348zv.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8z0348zv.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkir4qpkk.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkir4qpkk.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkir4qpkk.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkir4qpkk.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqfq17npo.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqfq17npo.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqfq17npo.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqfq17npo.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuopm_2e1.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuopm_2e1.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuopm_2e1.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuopm_2e1.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmbv6nik9.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmbv6nik9.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmbv6nik9.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmbv6nik9.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2jg0delq.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2jg0delq.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2jg0delq.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2jg0delq.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpisl6kiwd.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpisl6kiwd.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpisl6kiwd.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpisl6kiwd.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5i964g6e.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5i964g6e.rkt:18:4

    actual:     9

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5i964g6e.rkt:19:4

    actual:     4

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5i964g6e.rkt:20:4

    actual:     8

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (if (null? lst)\n      0\n      (+ (car lst)\n         (if\
    \ (even? (car lst))\n             (car lst)\n             (add (cdr lst))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n\
    \    (check-equal? (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list\
    \ 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal?\
    \ (candidate (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpybpuynv6.rkt:19:4

    actual:     8

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpybpuynv6.rkt:20:4

    actual:     8

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpybpuynv6.rkt:21:4

    actual:     8

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpybpuynv6.rkt:22:4

    actual:     8

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpysqah1gw.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpysqah1gw.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpysqah1gw.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpysqah1gw.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]\n  )\n)\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw9stj8lf.rkt:19:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw9stj8lf.rkt:20:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw9stj8lf.rkt:21:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw9stj8lf.rkt:22:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvn6dpcjt.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvn6dpcjt.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvn6dpcjt.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvn6dpcjt.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ei9ou6l.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ei9ou6l.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ei9ou6l.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9ei9ou6l.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm6kjhoov.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm6kjhoov.rkt:18:4

    actual:     9

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm6kjhoov.rkt:19:4

    actual:     4

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm6kjhoov.rkt:20:4

    actual:     8

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8ldue7h0.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8ldue7h0.rkt:18:4

    actual:     9

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8ldue7h0.rkt:19:4

    actual:     4

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8ldue7h0.rkt:20:4

    actual:     8

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpn352lk4v.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpn352lk4v.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpn352lk4v.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpn352lk4v.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpudl5amz_.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpudl5amz_.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpudl5amz_.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpudl5amz_.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]\n  ))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl1b7yv1v.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl1b7yv1v.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl1b7yv1v.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl1b7yv1v.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphzxk4rsm.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphzxk4rsm.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphzxk4rsm.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphzxk4rsm.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmtrdsopn.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmtrdsopn.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmtrdsopn.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmtrdsopn.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoge3ev61.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoge3ev61.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoge3ev61.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoge3ev61.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp771yatvq.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp771yatvq.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp771yatvq.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp771yatvq.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe7_0djfj.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe7_0djfj.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe7_0djfj.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe7_0djfj.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (if (null? lst)\n      0\n      (+ (car lst)\n         (if\
    \ (even? (car lst))\n             (add (cdr lst))\n             0))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpussvjxva.rkt:19:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpussvjxva.rkt:20:4

    actual:     9

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpussvjxva.rkt:21:4

    actual:     17

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpussvjxva.rkt:22:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuyd_sz57.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuyd_sz57.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuyd_sz57.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuyd_sz57.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_27y7iv7.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_27y7iv7.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_27y7iv7.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_27y7iv7.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp07p3ql17.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp07p3ql17.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp07p3ql17.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp07p3ql17.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (if (null? lst)\n      0\n      (+ (car lst)\n         (if\
    \ (even? (car lst))\n             (car lst)\n             (add (cdr lst))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n\
    \    (check-equal? (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list\
    \ 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal?\
    \ (candidate (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38nljvxs.rkt:19:4

    actual:     8

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38nljvxs.rkt:20:4

    actual:     8

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38nljvxs.rkt:21:4

    actual:     8

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38nljvxs.rkt:22:4

    actual:     8

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpd8ta3sgk.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpd8ta3sgk.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpd8ta3sgk.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpd8ta3sgk.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyomgem3w.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyomgem3w.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyomgem3w.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyomgem3w.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoked8yw3.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoked8yw3.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoked8yw3.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoked8yw3.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4glk4jnl.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4glk4jnl.rkt:18:4

    actual:     9

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4glk4jnl.rkt:19:4

    actual:     4

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4glk4jnl.rkt:20:4

    actual:     8

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_uvqp5fz.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_uvqp5fz.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_uvqp5fz.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_uvqp5fz.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp48j9mo84.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp48j9mo84.rkt:18:4

    actual:     9

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp48j9mo84.rkt:19:4

    actual:     4

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp48j9mo84.rkt:20:4

    actual:     8

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpklhk3r7s.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpklhk3r7s.rkt:18:4

    actual:     9

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpklhk3r7s.rkt:19:4

    actual:     4

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpklhk3r7s.rkt:20:4

    actual:     8

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnkr06e_w.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnkr06e_w.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnkr06e_w.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnkr06e_w.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmho4_bkd.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmho4_bkd.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmho4_bkd.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmho4_bkd.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprxadh3ap.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprxadh3ap.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprxadh3ap.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprxadh3ap.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpaf12qdxd.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpaf12qdxd.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpaf12qdxd.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpaf12qdxd.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8ojveam8.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8ojveam8.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8ojveam8.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8ojveam8.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa53jmt_c.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa53jmt_c.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa53jmt_c.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa53jmt_c.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv4uli0cj.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv4uli0cj.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv4uli0cj.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv4uli0cj.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuk9brwfz.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuk9brwfz.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuk9brwfz.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuk9brwfz.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpna8w3oag.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpna8w3oag.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpna8w3oag.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpna8w3oag.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8ysf1fab.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8ysf1fab.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8ysf1fab.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8ysf1fab.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvjasr0n1.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvjasr0n1.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvjasr0n1.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvjasr0n1.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq_iugktm.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq_iugktm.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq_iugktm.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq_iugktm.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppb3umw9v.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppb3umw9v.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppb3umw9v.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppb3umw9v.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5b49mexh.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5b49mexh.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5b49mexh.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5b49mexh.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjikcxe2n.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjikcxe2n.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjikcxe2n.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjikcxe2n.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgrzdcuob.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgrzdcuob.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgrzdcuob.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgrzdcuob.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq03kq8fd.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq03kq8fd.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq03kq8fd.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq03kq8fd.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_vdssy.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_vdssy.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_vdssy.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5e_vdssy.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr065tpo4.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr065tpo4.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr065tpo4.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr065tpo4.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp44x1fj2p.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp44x1fj2p.rkt:18:4

    actual:     9

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp44x1fj2p.rkt:19:4

    actual:     4

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp44x1fj2p.rkt:20:4

    actual:     8

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfdhl9pmd.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfdhl9pmd.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfdhl9pmd.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfdhl9pmd.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpps1r00c5.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpps1r00c5.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpps1r00c5.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpps1r00c5.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]\n  ))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8j49j54k.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8j49j54k.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8j49j54k.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8j49j54k.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyqbzbv9m.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyqbzbv9m.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyqbzbv9m.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyqbzbv9m.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpemjwkpkf.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpemjwkpkf.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpemjwkpkf.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpemjwkpkf.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpialbxr3k.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpialbxr3k.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpialbxr3k.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpialbxr3k.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpk7lnx7g7.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpk7lnx7g7.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpk7lnx7g7.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpk7lnx7g7.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2jleg6at.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2jleg6at.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2jleg6at.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2jleg6at.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7wwwzv6o.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7wwwzv6o.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7wwwzv6o.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7wwwzv6o.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpu5htgqr7.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpu5htgqr7.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpu5htgqr7.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpu5htgqr7.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsc776g6l.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsc776g6l.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsc776g6l.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsc776g6l.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuodth4l_.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuodth4l_.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuodth4l_.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuodth4l_.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (if (null? lst)\n      0\n      (+ (car lst)\n         (if\
    \ (even? (car lst))\n             (add (cdr lst))\n             0))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzwn2q86l.rkt:19:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzwn2q86l.rkt:20:4

    actual:     9

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzwn2q86l.rkt:21:4

    actual:     17

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzwn2q86l.rkt:22:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpijstw91w.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpijstw91w.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpijstw91w.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpijstw91w.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6e_y_k4c.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6e_y_k4c.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6e_y_k4c.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6e_y_k4c.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]\n  ))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps9nwh8zk.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps9nwh8zk.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps9nwh8zk.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps9nwh8zk.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]\n  ))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnfk4p8h2.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnfk4p8h2.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnfk4p8h2.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnfk4p8h2.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (second lst))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4cj4svsi.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4cj4svsi.rkt:18:4

    actual:     9

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4cj4svsi.rkt:19:4

    actual:     4

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4cj4svsi.rkt:20:4

    actual:     8

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjjinaepx.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjjinaepx.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjjinaepx.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjjinaepx.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw072lxms.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw072lxms.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw072lxms.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw072lxms.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdg1ps25x.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdg1ps25x.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdg1ps25x.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdg1ps25x.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptv7ayv8y.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptv7ayv8y.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptv7ayv8y.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptv7ayv8y.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
