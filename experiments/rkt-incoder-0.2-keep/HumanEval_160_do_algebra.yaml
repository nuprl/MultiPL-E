name: HumanEval_160_do_algebra
language: racket
prompt: "#lang racket\n\n;; Given two lists operator, and operand. The first list\
  \ has basic algebra operations, and \n;; the second list is a list of integers.\
  \ Use the two given lists to build the algebric \n;; expression and return the evaluation\
  \ of this expression.\n;; The basic algebra operations:\n;; Addition ( + ) \n;;\
  \ Subtraction ( - ) \n;; Multiplication ( * ) \n;; Floor division ( // ) \n;; Exponentiation\
  \ ( ** ) \n;; Example:\n;; operator['+', '*', '-']\n;; array = [2, 3, 4, 5]\n;;\
  \ result = 2 + 3 * 4 - 5\n;; => result = 9\n;; Note:\n;; The length of operator\
  \ list is equal to the length of operand list minus one.\n;; Operand is a list of\
  \ of non-negative integers.\n;; Operator list has at least one operator, and operand\
  \ list has at least two operands.\n(define (do_algebra operator operand)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate do_algebra))\n\
  \    (check-equal? (candidate (list \"**\" \"*\" \"+\") (list 2 3 4 5)) 37)\n  \
  \  (check-equal? (candidate (list \"+\" \"*\" \"-\") (list 2 3 4 5)) 9)\n    (check-equal?\
  \ (candidate (list \"//\" \"*\") (list 7 3 4)) 8)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? operand) (error \"Invalid operand\")] \n    [(empty?\
    \ operator) (error \"Invalid operator\")] \n    [else (+ (do_algebra (first operator)\
    \ operand) (do_algebra (rest operator) (rest operand)))]))\n", "  (cond\n    [(empty?\
    \ operand) 0]\n    [(equal? (car operand) operator) (+ (car operand) (do_algebra\
    \ (cdr operand) operand))]\n    [else (do_algebra (cdr operand) operand)]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n",
  "  (cond\n    [(empty? operator) operand]\n    [(empty? operand) operand]\n    [else\
    \ (cons (+ (first operand) (do_algebra (rest operator) (rest operand)))\n    \
    \            (do_algebra (first operator) operand))]))\n", "  (cond [(null? operand)\
    \ 0]\n        [(null? (cdr operand)) (+ 0 (do_algebra (car operator) operand))]\n\
    \        [else (+ 0 (do_algebra (car operator) (cons (car operand) (do_algebra\
    \ (cdr operator) (cdr operand))))]))\n", "  (cond\n    [(empty? operand) 0]\n\
    \    [(equal? (first operand) operator) (+ (do_algebra (rest operator) (rest operand)))]\n\
    \    [else (do_algebra (rest operator) operand)]))\n", "  (cond\n    [(empty?\
    \ operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra (rest operator)\
    \ (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n", " \
    \ (cond\n    [(empty? operand) 0]\n    [(empty? (rest operand)) (first operand)]\n\
    \    [else (+ (first operand) (do_algebra (rest operator) (rest operand)))]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand))\n                                        (do_algebra\
    \ (first operand) operand))]\n    [else (do_algebra (first operand) operand)]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(empty? (rest operand)) (first operand)]\n\
    \    [else (+ (first operand) (do_algebra (rest operator) (rest operand)))]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(empty? operator) 0]\n    [else (+ (do_algebra\
    \ (first operator) operand) (do_algebra (second operator) operand))]\n  )\n)\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n",
  "  (cond\n    [(empty? operand) (error \"Operand list is empty.\")]\n    [(empty?\
    \ operator) (error \"Operator list is empty.\")]\n    [(equal? (first operator)\
    \ '+) (+ (first operand) (first operand))]\n    [(equal? (first operator) '-)\
    \ (- (first operand) (first operand))]\n    [(equal? (first operator) '*') (*\
    \ (first operand) (first operand))]\n    [(equal? (first operator) '//') (/ (first\
    \ operand) (first operand))]\n    [(equal? (first operator) '**') (exp (first\
    \ operand) (first operand))]\n    [else (error \"Invalid operator.\")]))\n", " \
    \ (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (do_algebra\
    \ (rest operand) (first operand))]\n    [else (+ (do_algebra (rest operand) (first\
    \ operand)) (do_algebra (rest operand) (second operand)))]))\n", "  (cond\n  \
    \  [(empty? operand) 0]\n    [(empty? (rest operand)) (+ (first operand) (do_algebra\
    \ (first operand) (first operand)))]\n    [else (+ (first operand) (do_algebra\
    \ (first operand) (first operand)))]))\n", "  (cond\n    [(empty? operator) operand]\n\
    \    [(empty? operand) operand]\n    [(equal? (first operator) '-) (sub1 (first\
    \ operand))]\n    [(equal? (first operator) '*) (* (first operand) (first operand))]\n\
    \    [(equal? (first operator) '//) (floor (first operand))]\n    [(equal? (first\
    \ operator) '**) (pow (first operand) (first operand))]\n    [else (+ (do_algebra\
    \ (rest operator) (first operand))\n             (do_algebra (first operator)\
    \ (first operand)))]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal? (first\
    \ operand) operator) (+ (do_algebra (rest operator) (rest operand)))]\n    [else\
    \ (do_algebra (rest operator) (rest operand))]))\n", "  (cond\n    [(empty? operand)\
    \ 0]\n    [(equal? (first operand) operator) (+ (do_algebra (rest operator) (rest\
    \ operand)))]\n    [else (do_algebra (rest operator) operand)]))\n", "  (cond\n\
    \    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand))\n                                        (do_algebra\
    \ (first operand) operand))]\n    [else (do_algebra (first operand) operand)]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (do_algebra\
    \ (rest operand) (first operand))]\n    [else (+ (do_algebra (rest operand) (first\
    \ operand)) (do_algebra (rest operand) (second operand)))]))\n", "  (cond\n  \
    \  [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (first operand)\
    \ (do_algebra (rest operand) (rest operand)))]\n    [else (do_algebra (rest operand)\
    \ (rest operand))]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal? (first\
    \ operand) operator) (+ (do_algebra (rest operator) (rest operand)))]\n    [else\
    \ (do_algebra (rest operator) (rest operand))]))\n", "  (cond\n    [(empty? operand)\
    \ 0]\n    [(equal? (first operand) operator) (+ (do_algebra (rest operator) (rest\
    \ operand)))]\n    [else (do_algebra (rest operator) (rest operand))]))\n", " \
    \ (cond\n    [(empty? operand) (error \"Operand list is empty.\")]\n    [(empty?\
    \ operator) (error \"Operator list is empty.\")]\n    [else (cons (+ (first operand)\
    \ (do_algebra (rest operator) (rest operand)))\n               (do_algebra (first\
    \ operator) operand))]))\n", "  (cond\n    [(empty? operand) (error \"operand\
    \ list is empty\")]\n    [(empty? operator) (error \"operator list is empty\"\
    )]\n    [(equal? (first operator) '+) (+ (first operand) (do_algebra (rest operator)\
    \ (rest operand)))]\n    [(equal? (first operator) '-) (- (first operand) (do_algebra\
    \ (rest operator) (rest operand)))]\n    [(equal? (first operator) '*') (* (first\
    \ operand) (do_algebra (rest operator) (rest operand)))]\n    [(equal? (first\
    \ operator) '//') (floor (/ (first operand) (do_algebra (rest operator) (rest\
    \ operand))))]\n    [(equal? (first operator) '**') (exp (first operand) (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (error \"unknown operator\")]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (do_algebra\
    \ (rest operand) (first operand))]\n    [else (+ (do_algebra (rest operand) (first\
    \ operand)) (do_algebra (rest operand) (first operand)))]))\n", "  (cond\n   \
    \ [(empty? operand) 0]\n    [(equal? (first operand) operator) (do_algebra (rest\
    \ operator) (first operand) (rest operand))]\n    [else (+ (do_algebra (rest operator)\
    \ (first operand) (rest operand)) (do_algebra (first operator) (first operand)\
    \ (rest operand)))]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal? (first\
    \ operand) operator) (+ (do_algebra (rest operator) (rest operand)))]\n    [else\
    \ (do_algebra (rest operator) operand)]))\n", "  (cond\n    [(empty? operator)\
    \ operand]\n    [(empty? operand) operand]\n    [(equal? (first operator) '-)\
    \ (- operand)]\n    [(equal? (first operator) '*) (* (first operand) (second operand))]\n\
    \    [(equal? (first operator) '//) (/ operand operand)]\n    [(equal? (first\
    \ operator) '**) (pow (first operand) (second operand))]\n    [else (+ (do_algebra\
    \ (rest operator) (first operand)) (do_algebra (first operator) (second operand)))]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand))\n                                      (do_algebra\
    \ (first operand) operand))]\n    [else (do_algebra (first operand) operand)]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (car operand) '+) (+ (car operand)\
    \ (do_algebra (cdr operand) operand))]\n    [(equal? (car operand) '-) (- (car\
    \ operand) (do_algebra (cdr operand) operand))]\n    [(equal? (car operand) '*')\
    \ (* car car operand)]\n    [(equal? (car operand) '//') (/ car car operand)]\n\
    \    [(equal? (car operand) '**') (* car car operand)]\n    [else (error \"Invalid\
    \ operator\")]))\n", "  (cond\n    [(empty? operand) (error \"Operand list is\
    \ empty\")]\n    [(empty? operator) (error \"Operator list is empty\")]\n    [else\
    \ (cons (+ (first operand) (do_algebra (rest operator) (rest operand)))\n    \
    \          (do_algebra (first operator) (first operand)))]))\n", "  (cond [(empty?\
    \ operand) (error \"Operand list is empty.\")]\n        [(empty? operator) (error\
    \ \"Operator list is empty.\")]\n        [(equal? (first operator) '+) (+ operand)]\n\
    \        [(equal? (first operator) '-) (- operand)]\n        [(equal? (first operator)\
    \ '*) (* operand)]\n        [(equal? (first operator) '//) (/ operand)]\n    \
    \    [(equal? (first operator) '**) (* operand operand)])\n)\n", "  (cond\n  \
    \  [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (first operand)\
    \ (do_algebra (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator)\
    \ operand)]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand)\
    \ operator) (do_algebra (rest operand) (first operand))]\n    [else (+ (do_algebra\
    \ (rest operand) (first operand)) (do_algebra (rest operand) (first operand)))]))\n",
  "  (cond\n    [(empty? operand) (error 'empty-operand)]\n    [(empty? operator)\
    \ (error 'empty-operator)]\n    [(equal? (first operator) '+) (+ \n          \
    \                      (do_algebra (rest operator) (rest operand))\n         \
    \                       (first operand))]\n    [(equal? (first operator) '-) (-\
    \ \n                                (do_algebra (rest operator) (rest operand))\n\
    \                                (first operand))]\n    [(equal? (first operator)\
    \ '*') (* \n                                (do_algebra (rest operator) (rest\
    \ operand))\n                                (first operand))]\n    [(equal? (first\
    \ operator) '//') (/ \n                                (do_algebra (rest operator)\
    \ (rest operand))\n                                (first operand))]\n    [(equal?\
    \ (first operator) '**') (* \n                                (do_algebra (rest\
    \ operator) (rest operand))\n                                (first operand))]\n\
    \    [else (error 'unsupported-operator)]))\n", "  (cond\n    [(empty? operand)\
    \ 0]\n    [(empty? operator) 0]\n    [(equal? (first operator) '+) (+ (first operand)\
    \ (do_algebra (rest operator) (rest operand)))]\n    [(equal? (first operator)\
    \ '-) (- (first operand) (do_algebra (rest operator) (rest operand)))]\n    [(equal?\
    \ (first operator) '*') (* 1 (do_algebra (rest operator) (rest operand)))]\n \
    \   [(equal? (first operator) '//') (/ 1 (do_algebra (rest operator) (rest operand)))]\n\
    \    [(equal? (first operator) '**') (* 1 (do_algebra (rest operator) (rest operand)))]\n\
    \    [else (error \"Invalid operator\")]))\n", "  (cond\n    [(empty? operand)\
    \ 0]\n    [(equal? (first operand) operator) (+ (do_algebra (rest operator) (rest\
    \ operand)))]\n    [else (do_algebra (rest operator) operand)]))\n", "  (cond\n\
    \    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n",
  "  (cond\n    [(empty? operator) operand]\n    [(empty? operand) operand]\n    [(equal?\
    \ (first operator) '-) (sub1 (first operand))]\n    [(equal? (first operator)\
    \ '+) (+ (first operand) (first operand))]\n    [(equal? (first operator) '*')\
    \ (* 1 (first operand))]\n    [(equal? (first operator) '//') (floor 1 (first\
    \ operand))]\n    [(equal? (first operator) '**') (* 1 (first operand))]\n   \
    \ [else (do_algebra (rest operator) (first operand))]))\n", "  (cond\n    [(empty?\
    \ operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra (rest operator)\
    \ (rest operand))\n                                      (do_algebra (first operand)\
    \ operand))]\n    [else (do_algebra (first operand) operand)]))\n", "  (cond\n\
    \    [(empty? operand) 0]\n    [(equal? (first operand) operator) (do_algebra\
    \ (rest operator) (first operand))]\n    [else (do_algebra (rest operator) (first\
    \ operand))]))\n", "  (cond\n    [(empty? operator) operand]\n    [(empty? operand)\
    \ operand]\n    [(equal? (first operator) '-) (- operand)]\n    [(equal? (first\
    \ operator) '+) (+ operand)]\n    [(equal? (first operator) '*) (* operand)]\n\
    \    [(equal? (first operator) '//) (// operand)]\n    [(equal? (first operator)\
    \ '**) (** operand)]\n    [else (error \"Invalid operator\")]))\n", "  (cond\n\
    \    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n",
  "  (cond\n    [(empty? operator) operand]\n    [(empty? operand) operand]\n    [else\
    \ (cons (+ (first operand) (do_algebra (rest operator) (rest operand)))\n    \
    \          (do_algebra (first operator) (first operand)))]))\n", "  (cond [(null?\
    \ operand) 0]\n        [(null? (cdr operand)) (+ (car operand) (car operand))]\n\
    \        [else (+ (do_algebra (car operator) (cdr operand)) (do_algebra (car operator)\
    \ (cdr operand)))]))\n", "  (cond\n    [(empty? operand) (error \"Operand list\
    \ is empty\")]\n    [(empty? operator) (error \"Operator list is empty\")]\n \
    \   [else (cons (+ (first operand) (do_algebra (rest operator) (rest operand)))\n\
    \              (do_algebra (rest operator) (first operand)))]))\n", "  (cond\n\
    \    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) (rest\
    \ operand))]))\n", "  (cond\n    [(empty? operator) operand]\n    [(empty? operand)\
    \ (error 'do_algebra `(operator and operand are both empty))]))\n", "  (cond\n\
    \    [(empty? operator) operand]\n    [(empty? operand) operand]\n    [else (+\
    \ (do_algebra (first operator) (first operand))\n            (do_algebra (first\
    \ operator) (second operand)))]))\n", "  (cond [(null? operand) 0]\n        [(null?\
    \ (cdr operand)) (+ 0 (do_algebra (car operator) operand))]\n        [else (+\
    \ 0 (do_algebra (car operator) (cons (car operand) (do_algebra (cdr operator)\
    \ (cdr operand))))]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal? (car\
    \ operand) operator) (do_algebra (cdr operand) (cons (car operand) (do_algebra\
    \ (cdr operand) (cdr operand))))]\n    [else (do_algebra (cdr operand) (cons (car\
    \ operand) (do_algebra (cdr operand) (cdr operand))))]))\n", "  (cond\n    [(empty?\
    \ operator) operand]\n    [(empty? operand) operand]\n    [(equal? (first operator)\
    \ '+) (+ (first operand) (first operand))]\n    [(equal? (first operator) '-)\
    \ (- (first operand) (first operand))]\n    [(equal? (first operator) '*') (*\
    \ (first operand) (first operand))]\n    [(equal? (first operator) '//') (/ (first\
    \ operand) (first operand))]\n    [(equal? (first operator) '**') (exp (first\
    \ operand) (first operand))]\n    [else (error \"Invalid operator\")]))\n", " \
    \ (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n",
  "  (cond\n    [(empty? operator) operand]\n    [(empty? operand) operand]\n    [(equal?\
    \ (first operator) '-) (- operand)]\n    [(equal? (first operator) '+) (+ operand)]\n\
    \    [(equal? (first operator) '*) (* operand)]\n    [(equal? (first operator)\
    \ '//) (/ operand operand)]\n    [else (* operand operand)]))\n", "  (cond [(null?\
    \ operand) 0]\n        [(null? (cdr operand)) (+ (car operand) (do_algebra (car\
    \ operator) (cdr operand)))]\n        [else (+ (do_algebra (car operator) (cdr\
    \ operand)) (do_algebra (car operator) (cdr operand)))]))\n", "  (cond\n    [(empty?\
    \ operator) operand]\n    [(empty? operand) operand]\n    [(equal? (first operator)\
    \ '-) (- operand)]\n    [(equal? (first operator) '+) (+ operand)]\n    [(equal?\
    \ (first operator) '*) (* operand)]\n    [(equal? (first operator) '//) (/ operand\
    \ operand)]\n    [(equal? (first operator) '**) (* operand operand)]))\n", " \
    \ (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (do_algebra\
    \ (rest operand) (first operand))]\n    [else (+ (do_algebra (rest operand) (first\
    \ operand)) (do_algebra (rest operator) (first operand)))]))\n", "  (cond\n  \
    \  [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (first operand)\
    \ (do_algebra (rest operand) (rest operand)))]\n    [else (do_algebra (rest operator)\
    \ operand)]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand)\
    \ operator) (+ (do_algebra (rest operator) (rest operand)))]\n    [else (do_algebra\
    \ (rest operator) operand)]))\n", "  (cond [(null? operand) 0]\n        [(null?\
    \ (cdr operand)) (+ (car operand) (do_algebra (car operator) (cdr operand)))]\n\
    \        [else (+ (do_algebra (car operator) (cdr operand)) (do_algebra (car operator)\
    \ (cdr operand)))]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal? (first\
    \ operand) operator) (+ (do_algebra (rest operator) (rest operand)))]\n    [else\
    \ (do_algebra (rest operator) (rest operand))]))\n", "  (cond\n    [(empty? operand)\
    \ 0]\n    [(equal? (first operand) operator) (+ (do_algebra (rest operator) (rest\
    \ operand)))]\n    [else (do_algebra (rest operator) operand)]))\n", "  (cond\n\
    \    [(empty? operator) operand]\n    [(empty? operand) operand]\n    [else (cons\
    \ (+ (car operand) (do_algebra (cdr operator) (cdr operand)))\n              \
    \ (do_algebra (cdr operator) operand))]\n  ))\n", "  (cond\n    [(empty? operand)\
    \ 0]\n    [(equal? (first operand) operator) (+ (do_algebra (rest operator) (rest\
    \ operand)))]\n    [else (do_algebra (rest operator) operand)]))\n", "  (cond\n\
    \    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) (rest\
    \ operand))]))\n", "  (cond [(null? operand) 0]\n        [(null? (cdr operand))\
    \ (+ 0 (do_algebra (car operand) (cdr operand)))]\n        [else (+ (do_algebra\
    \ (car operand) (car operand)) (do_algebra operator (cdr operand)))]))\n", " \
    \ (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n",
  "  (cond\n    [(empty? operand) (error \"Operand list is empty.\")]\n    [(empty?\
    \ operator) (error \"Operator list is empty.\")]\n    [(equal? (first operator)\
    \ '+) (+ \n                                (do_algebra (rest operator) (rest operand)))]\n\
    \    [(equal? (first operator) '-) (- \n                                (do_algebra\
    \ (rest operator) (rest operand)))]\n    [(equal? (first operator) '*') (* \n\
    \                                (do_algebra (rest operator) (rest operand)))]\n\
    \    [(equal? (first operator) '//') (/ \n                                (do_algebra\
    \ (rest operator) (rest operand)))]\n    [(equal? (first operator) '**') (* \n\
    \                                (do_algebra (rest operator) (rest operand)))]\n\
    \    [else (error \"Invalid operator in operator list.\")]))\n", "  (cond\n  \
    \  [(empty? operator) operand]\n    [(empty? operand) operand]\n    [(equal? (first\
    \ operator) '-) (- operand)]\n    [(equal? (first operator) '+) (+ operand)]\n\
    \    [(equal? (first operator) '*') (* operand)]\n    [(equal? (first operator)\
    \ '//') (/ operand operand)]\n    [else (* operand operand)]))\n", "  (cond\n\
    \    [(empty? operator) operand]\n    [(empty? operand) operand]\n    [(equal?\
    \ (first operator) '-) (do_algebra (rest operator) (first operand))]\n    [(equal?\
    \ (first operator) '+) (do_algebra (rest operator) (first operand))]\n    [(equal?\
    \ (first operator) '*) (do_algebra (rest operator) (first operand))]\n    [(equal?\
    \ (first operator) '//) (do_algebra (rest operator) (first operand))]\n    [else\
    \ (do_algebra (rest operator) (first operand))]\n  ))\n", "  (cond\n    [(empty?\
    \ operand) 0]\n    [(empty? (rest operand)) (+ (first operand) (do_algebra (first\
    \ operator) (rest operand)))]\n    [else (+ (first operand) (do_algebra (first\
    \ operator) (rest operand)))]))\n", "  (cond [(null? operand) 0]\n        [(null?\
    \ (cdr operand)) (+ 0 (do_algebra (car operator) operand))]\n        [else (+\
    \ 0 (do_algebra (car operator) (cdr operand)))]))\n", "  (cond\n    [(empty? operand)\
    \ 0]\n    [(equal? (car operand) operator) (+ (car operand) (do_algebra operator\
    \ (cdr operand)))]\n    [else (do_algebra operator (cdr operand))]))\n", "  (cond\n\
    \    [(empty? operand) 0]\n    [(empty? operator) 0]\n    [else (+ (do_algebra\
    \ (first operator) (first operand))\n            (do_algebra (first operator)\
    \ (second operand)))]))\n", "  (cond [(null? operand) 0]\n        [(null? (cdr\
    \ operand)) (+ (car operand) (do_algebra (car operator) (cdr operand)))]\n   \
    \     [else (+ (do_algebra (car operator) (cdr operand)) (do_algebra (car operator)\
    \ (cdr operand)))]))\n", "  (cond [(null? operand) 0]\n        [(null? (cdr operand))\
    \ (+ (car operand) (car operand))]\n        [else (+ (do_algebra (car operand)\
    \ (cons (car operand) (cdr operand)))\n                 (do_algebra operator (cdr\
    \ operand)))))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand)\
    \ operator) (+ (do_algebra (rest operator) (rest operand)))]\n    [else (do_algebra\
    \ (rest operator) operand)]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal?\
    \ (first operand) operator) (+ (do_algebra (rest operator) (rest operand)))]\n\
    \    [else (do_algebra (rest operator) operand)]))\n", "  (cond\n    [(empty?\
    \ operator) operand]\n    [(empty? operand) operand]\n    [(equal? (first operator)\
    \ '-) (do_algebra (rest operator) (- operand))]\n    [(equal? (first operator)\
    \ '*) (* (first operand) (do_algebra (rest operator) (rest operand)))]\n    [(equal?\
    \ (first operator) '//) (floor (/ (first operand) (do_algebra (rest operator)\
    \ (rest operand))))]\n    [(equal? (first operator) '**) (do_algebra (rest operator)\
    \ (do_algebra (rest operator) (first operand))))]\n    [else (+ (do_algebra (rest\
    \ operator) (first operand)) (do_algebra (rest operator) (rest operand)))]))\n",
  "  (cond\n    [(empty? operator) operand]\n    [(empty? operand) operand]\n    [else\
    \ (+ (do_algebra (first operator) (first operand))\n            (do_algebra (first\
    \ operator) (second operand)))]))\n", "  (cond\n    [(empty? operand) 0]\n   \
    \ [(equal? (first operand) operator) (do_algebra (rest operand) (rest operand))]\n\
    \    [else (+ (do_algebra (first operand) (first operand)) (do_algebra (first\
    \ operand) (rest operand)))]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal?\
    \ (first operand) operator) (+ (do_algebra (rest operator) (rest operand)))]\n\
    \    [else (do_algebra (rest operator) operand)]))\n", "  (cond\n    [(empty?\
    \ operand) 0]\n    [(equal? (car operand) operator) (+ (car operand) (do_algebra\
    \ (cdr operand) operand))]\n    [else (do_algebra (cdr operand) operand)]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(empty? (rest operand)) (first operand)]\n\
    \    [else (+ (first operand) (do_algebra (rest operator) (rest operand)))]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (car operand) operator) (+ (car\
    \ operand) (do_algebra (cdr operand) operand))]\n    [else (do_algebra (cdr operand)\
    \ operand)]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand)\
    \ operator) (+ (do_algebra (rest operator) (rest operand)))]\n    [else (do_algebra\
    \ (rest operator) operand)]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal?\
    \ (first operand) operator) (+ (do_algebra (rest operator) (rest operand)))]\n\
    \    [else (do_algebra (rest operator) operand)]))\n", "  (cond\n    [(empty?\
    \ operand) (error \"Invalid operand.\")]\n    [(empty? operator) (error \"Invalid\
    \ operator.\")]\n    [else (cons (+ (first operand) (do_algebra (rest operator)\
    \ (rest operand)))\n               (do_algebra (first operator) operand))]))\n",
  "  (cond\n    [(empty? operator) (first operand)]\n    [(empty? operand) (first\
    \ operator)]\n    [else (+ (first operator) (do_algebra (rest operator) (rest\
    \ operand)))]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand)\
    \ operator) (+ (do_algebra (rest operator) (rest operand)))]\n    [else (do_algebra\
    \ (rest operator) operand)]))\n", "  (cond\n    [(empty? operand) 0]\n    [(empty?\
    \ (rest operand)) (first operand)]\n    [else (+ (first operand) (do_algebra (rest\
    \ operator) (rest operand)))]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal?\
    \ (first operand) operator) (+ (do_algebra (rest operator) (rest operand)))]\n\
    \    [else (do_algebra (rest operator) operand)]))\n", "  (cond\n    [(empty?\
    \ operand) (error \"Operand list is empty\")]\n    [(empty? operator) (error \"\
    Operator list is empty\")]\n    [(null? (rest operator)) (error \"Operator list\
    \ is empty\")]\n    [else (+ (do_algebra (rest operator) (first operand)) (do_algebra\
    \ (first operator) (rest operand)))]))\n", "  (cond\n    [(empty? operand) 0]\n\
    \    [(equal? (first operand) operator) (+ (do_algebra (rest operator) (rest operand)))]\n\
    \    [else (do_algebra (rest operator) operand)]))\n", "  (cond\n    [(empty?\
    \ operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra (rest operator)\
    \ (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n", " \
    \ (cond\n    [(empty? operator) (error \"Operator list is empty.\")]\n    [(empty?\
    \ operand) (error \"Operand list is empty.\")]\n    [(null? (rest operator)) (error\
    \ \"Operator list is empty.\")]\n    [(null? (rest operand)) (error \"Operand\
    \ list is empty.\")]\n    [else (+ \n             (do_algebra (rest operator)\
    \ (rest operand))\n             (do_algebra (first operator) (first operand)))]))\n",
  "  (cond\n    [(empty? operator) operand]\n    [(empty? operand) operand]\n    [else\
    \ (cons (+ (car operand) (do_algebra (cdr operator) (cdr operand)))\n        \
    \      (do_algebra (cdr operator) operand))]))\n", "  (cond [(null? operand) 0]\n\
    \        [(null? (cdr operand)) (+ (car operand) (car operand))]\n        [else\
    \ (+ (do_algebra (car operand) (cdr operand)) (do_algebra (car operator) (cdr\
    \ operator)))]))\n", "  (cond\n    [(empty? operand) 0]\n    [(empty? (rest operand))\
    \ (first operand)]\n    [else (+ (first operand) (do_algebra (rest operator) (rest\
    \ operand)))]))\n", "  (cond\n    [(empty? operand) 0]\n    [(empty? operator)\
    \ 0]\n    [(equal? (first operator) '+) (+ (first operand) (do_algebra (rest operator)\
    \ (rest operand)))]\n    [(equal? (first operator) '-) (- (first operand) (do_algebra\
    \ (rest operator) (rest operand)))]\n    [(equal? (first operator) '*') (* (first\
    \ operand) (do_algebra (rest operator) (rest operand)))]\n    [(equal? (first\
    \ operator) '//') (floor (/ (first operand) (do_algebra (rest operator) (rest\
    \ operand))))]\n    [(equal? (first operator) '**') (do_algebra (rest operator)\
    \ (rest operand))]\n    [else (error \"Unknown operator\")]))\n", "  (cond\n \
    \   [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n",
  "  (cond [(null? operand) 0]\n        [(null? (cdr operand)) (+ 0 (do_algebra (car\
    \ operator) operand))]\n        [else (+ 0 (do_algebra (car operator) (cdr operand)))]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (do_algebra\
    \ (rest operand) (first operand))]\n    [else (+ (do_algebra (rest operand) (first\
    \ operand)) (do_algebra (rest operand) (first operand)))]))\n", "  (cond\n   \
    \ [(empty? operator) operand]\n    [(empty? operand) operand]\n    [else (+ (do_algebra\
    \ (first operator) (first operand))\n            (do_algebra (first operator)\
    \ (second operand)))]))\n", "  (cond [(null? operand) 0]\n        [(null? (cdr\
    \ operand)) (+ (car operand) (do_algebra (car operator) (cdr operand)))]\n   \
    \     [else (+ (do_algebra (car operator) (cdr operand)) (do_algebra (car operator)\
    \ (cdr operand)))]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal? (first\
    \ operand) operator) (+ (first operand) (do_algebra (rest operand) (rest operand)))]\n\
    \    [else (do_algebra (rest operand) (rest operand))]))\n", "  (cond\n    [(empty?\
    \ operand) (error \"Invalid operand\")] \n    [(empty? operator) (error \"Invalid\
    \ operator\")] \n    [else (+ (do_algebra (first operator) (first operand)) (do_algebra\
    \ (first operator) (second operand)))]))\n", "  (cond\n    [(empty? operand) 0]\n\
    \    [(empty? (rest operand)) (+ (first operand) (do_algebra (first operand) (first\
    \ operand)))]\n    [else (+ (first operand) (do_algebra (first operand) (first\
    \ operand)))]))\n", "  (cond\n    [(empty? operand) 0]\n    [(empty? (rest operand))\
    \ (first operand)]\n    [else (+ (first operand) (do_algebra (rest operator) (rest\
    \ operand)))]))\n", "  (cond\n    [(empty? operand) 0]\n    [(empty? (rest operand))\
    \ (+ (first operand) (do_algebra (first operand) (first operand)))]\n    [else\
    \ (+ (first operand) (do_algebra (first operand) (first operand)))]))\n", "  (cond\n\
    \    [(empty? operator) operand]\n    [(empty? operand) operand]\n    [else (cons\
    \ (+ (first operand) (do_algebra (rest operator) (first operand)))\n         \
    \       (do_algebra (first operator) (second operand)))]))\n", "  (cond\n    [(empty?\
    \ operand) (error \"operand list is empty\")]\n    [(empty? operator) (error \"\
    operator list is empty\")]\n    [(equal? (first operator) '+) (+ (first operand)\
    \ (do_algebra (rest operator) (rest operand)))]\n    [(equal? (first operator)\
    \ '-) (- (first operand) (do_algebra (rest operator) (rest operand)))]\n    [(equal?\
    \ (first operator) '*') (* (first operand) (do_algebra (rest operator) (rest operand)))]\n\
    \    [(equal? (first operator) '//') (floor (/ (first operand) (do_algebra (rest\
    \ operator) (rest operand))))]\n    [(equal? (first operator) '**') (exp (first\
    \ operand) (do_algebra (rest operator) (rest operand)))]\n    [else (error \"\
    unknown operator\")]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal? (car\
    \ operand) operator) (+ (car operand) (do_algebra (cdr operand) operand))]\n \
    \   [else (do_algebra (cdr operand) operand)]))\n", "  (cond\n    [(empty? operand)\
    \ (error \"Invalid operand\")]\n    [(empty? operator) (error \"Invalid operator\"\
    )]\n    [else (cons (+ (car operand) (car (cdr operand))) (do_algebra (cdr operator)\
    \ (cdr operand)))]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal? (first\
    \ operand) operator) (+ (do_algebra (rest operator) (rest operand)))]\n    [else\
    \ (do_algebra (rest operator) operand)]))\n", "  (cond\n    [(empty? operand)\
    \ 0]\n    [(empty? (rest operand)) (+ (first operand) (do_algebra operator (rest\
    \ operand)))]\n    [else (+ (first operand) (do_algebra operator (rest operand)))]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(empty? (rest operand)) (first operand)]\n\
    \    [else (+ (first operand) (do_algebra (rest operator) (rest operand)))]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (first\
    \ operand) (do_algebra (rest operand) (rest operand)))]\n    [else (do_algebra\
    \ (rest operator) operand)]))\n", "  (cond\n    [(empty? operator) operand]\n\
    \    [(empty? operand) operand]\n    [(equal? (car operator) '+) (+ (car operand)\
    \ (do_algebra (cdr operator) (cdr operand)))]\n    [(equal? (car operator) '-)\
    \ (- (car operand) (do_algebra (cdr operator) (cdr operand)))]\n    [(equal? (car\
    \ operator) '*') (* 2 (do_algebra (cdr operator) (cdr operand)))]\n    [(equal?\
    \ (car operator) '//') (/ 2 (do_algebra (cdr operator) (cdr operand)))]\n    [(equal?\
    \ (car operator) '**') (* 2 (do_algebra (cdr operator) (cdr operand)))]\n    [else\
    \ (error \"Invalid operator\")]))\n", "  (cond\n    [(empty? operator) operand]\n\
    \    [(empty? operand) operand]\n    [(equal? (first operator) '-) (do_algebra\
    \ (rest operator) (first operand))]\n    [(equal? (first operator) '+) (do_algebra\
    \ (rest operator) (first operand))]\n    [(equal? (first operator) '*) (do_algebra\
    \ (rest operator) (first operand))]\n    [(equal? (first operator) '//) (do_algebra\
    \ (rest operator) (first operand))]\n    [else (do_algebra (rest operator) (first\
    \ operand))]\n  )\n)\n", "  (cond\n    [(empty? operand) 0]\n    [(equal? (first\
    \ operand) operator) (+ (do_algebra (rest operator) (rest operand)))]\n    [else\
    \ (do_algebra (rest operator) (rest operand))]))\n", "  (cond\n    [(empty? operand)\
    \ 0]\n    [(empty? operator) 0]\n    [(equal? (first operator) '+) (+ (first operand)\
    \ (do_algebra (rest operator) (rest operand)))]\n    [(equal? (first operator)\
    \ '-) (- (first operand) (do_algebra (rest operator) (rest operand)))]\n    [(equal?\
    \ (first operator) '*') (* (first operand) (do_algebra (rest operator) (rest operand)))]\n\
    \    [(equal? (first operator) '//') (/ (first operand) (do_algebra (rest operator)\
    \ (rest operand)))]\n    [(equal? (first operator) '**') (exp (first operand)\
    \ (do_algebra (rest operator) (rest operand)))]\n    [else (error \"Unknown operator\"\
    )]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal? (car operand) operator)\
    \ (+ (car operand) (do_algebra (cdr operand) operand))]\n    [else (do_algebra\
    \ (cdr operand) operand)]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal?\
    \ (first operand) operator) (+ (do_algebra (rest operator) (rest operand)))]\n\
    \    [else (do_algebra (rest operator) operand)]))\n", "  (cond\n    [(empty?\
    \ operator) operand]\n    [(empty? operand) operand]\n    [else (+ (do_algebra\
    \ (first operator) operand) (do_algebra (second operator) operand))]\n  )\n)\n",
  "  (cond\n    [(empty? operator) operand]\n    [(empty? operand) operand]\n    [(equal?\
    \ (first operator) '+) (+ (first operand) (do_algebra (rest operator) (rest operand)))]\n\
    \    [(equal? (first operator) '-) (- (first operand) (do_algebra (rest operator)\
    \ (rest operand)))]\n    [(equal? (first operator) '*') (* (first operand) (do_algebra\
    \ (rest operator) (rest operand)))]\n    [(equal? (first operator) '//') (floor\
    \ (/ (first operand) (do_algebra (rest operator) (rest operand))))]\n    [(equal?\
    \ (first operator) '**') (exp (first operand) (do_algebra (rest operator) (rest\
    \ operand)))]\n    [else (error \"Invalid operator\")]))\n", "  (cond\n    [(empty?\
    \ operand) 0]\n    [(equal? (first operand) operator) (do_algebra (rest operand)\
    \ (first operand))]\n    [else (+ (do_algebra (rest operand) (first operand))\
    \ (do_algebra (rest operand) (first operand)))]))\n", "  (cond\n    [(empty? operator)\
    \ operand]\n    [(empty? operand) operand]\n    [(equal? (first operator) '-)\
    \ (sub1 (first operand) (first operand))]\n    [(equal? (first operator) '+) (+\
    \ (first operand) (first operand))]\n    [(equal? (first operator) '*') (* operand)]\n\
    \    [(equal? (first operator) '//') (floor operand)]\n    [(equal? (first operator)\
    \ '**') (exp (first operand))]\n    [else (do_algebra (rest operator) (first operand))]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (first\
    \ operand) (do_algebra (rest operand) (rest operand)))]\n    [else (do_algebra\
    \ (rest operand) operand)]))\n", "  (cond\n    [(empty? operand) 0]\n    [(empty?\
    \ (rest operand)) (+ (first operand) (do_algebra operator (rest operand)))]\n\
    \    [else (+ (first operand) (do_algebra operator (rest operand)))]))\n", " \
    \ (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) (rest\
    \ operand))]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal? (car operand)\
    \ operator) (do_algebra (cdr operand) (+ (car operand) (do_algebra (car operand)\
    \ (cdr operand))))]\n    [else (do_algebra (car operand) (do_algebra (car operand)\
    \ (cdr operand)))]))\n", "  (cond\n    [(empty? operand) (error \"Operand list\
    \ cannot be empty\")]\n    [(empty? operator) (error \"Operator list cannot be\
    \ empty\")]\n    [else (cons (+ (first operand) (do_algebra operator (rest operand)))\n\
    \               (do_algebra operator (rest operand)))]))\n", "  (cond\n    [(empty?\
    \ operand) 0]\n    [(empty? operator) 0]\n    [(equal? (first operator) '+) (+\
    \ (first operand) (do_algebra (rest operator) (rest operand)))]\n    [(equal?\
    \ (first operator) '-) (- (first operand) (do_algebra (rest operator) (rest operand)))]\n\
    \    [(equal? (first operator) '*') (* (first operand) (do_algebra (rest operator)\
    \ (rest operand)))]\n    [(equal? (first operator) '//') (/ (first operand) (do_algebra\
    \ (rest operator) (rest operand)))]\n    [(equal? (first operator) '**') (exp\
    \ (first operand) (do_algebra (rest operator) (rest operand)))]\n    [else (error\
    \ \"Invalid operator\")]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal?\
    \ (first operand) operator) (+ (do_algebra (rest operator) (rest operand)))]\n\
    \    [else (do_algebra (rest operator) (rest operand))]))\n", "  (cond\n    [(empty?\
    \ operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra (rest operator)\
    \ (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n", " \
    \ (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n",
  "  (cond\n    [(empty? operand) (error \"Operand list is empty.\")]\n    [(empty?\
    \ (rest operand)) (error \"Operator list is empty.\")]\n    [else (cons (+ (first\
    \ operand) (do_algebra (rest operator) (rest operand)))\n              (do_algebra\
    \ (first operator) (first operand)))]))\n", "  (cond\n    [(empty? operator) operand]\n\
    \    [(empty? operand) operand]\n    [(equal? (first operator) '-) (- operand)]\n\
    \    [(equal? (first operator) '*) (* (first operand) (second operand))]\n   \
    \ [(equal? (first operator) '//) (/ (first operand) (second operand))]\n    [else\
    \ (+ (do_algebra (rest operator) (first operand)) (do_algebra (first operator)\
    \ (second operand)))]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal? (first\
    \ operand) operator) (+ (first operand) (do_algebra (rest operand) (rest operand)))]\n\
    \    [else (do_algebra (rest operand) (rest operand))]))\n", "  (cond\n    [(empty?\
    \ operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra (rest operator)\
    \ (rest operand)))]\n    [else (do_algebra (rest operator) (rest operand))]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (first\
    \ operand) (do_algebra (rest operand) (rest operand)))]\n    [else (do_algebra\
    \ (rest operand) operand)]))\n", "  (cond\n    [(empty? operand) (error \"Operand\
    \ list is empty\")]\n    [(empty? operator) (error \"Operator list is empty\"\
    )]\n    [(equal? (first operator) '+) (+ operand)]\n    [(equal? (first operator)\
    \ '-) (- operand)]\n    [(equal? (first operator) '*) (* operand)]\n    [(equal?\
    \ (first operator) '//) (/ operand operand)]\n    [(equal? (first operator) '**)\
    \ (* operand operand)]))\n", "  (cond\n    [(empty? operator) operand]\n    [(empty?\
    \ operand) operand]\n    [(equal? (car operator) '+) (+ (car operand) (do_algebra\
    \ (cdr operator) (cdr operand)))]\n    [(equal? (car operator) '-) (- (car operand)\
    \ (do_algebra (cdr operator) (cdr operand)))]\n    [(equal? (car operator) '*')\
    \ (* (car operand) (do_algebra (cdr operator) (cdr operand)))]\n    [(equal? (car\
    \ operator) '//') (floor (/ (car operand) (do_algebra (cdr operator) (cdr operand))))]\n\
    \    [(equal? (car operator) '**') (do_algebra (cdr operator) (cdr operand))]\n\
    \    [else (error \"Unknown operator\")]))\n", "  (cond\n    [(empty? operator)\
    \ operand]\n    [(empty? operand) operand]\n    [else (cons (+ (car operand) (do_algebra\
    \ (cdr operator) (cdr operand)))\n               (do_algebra (cdr operator) operand))]))\n",
  "  (cond\n    [(empty? operator) operand]\n    [(empty? operand) operand]\n    [(equal?\
    \ (first operator) '-) (do_algebra (rest operator) (sub1 operand))]\n    [(equal?\
    \ (first operator) '*) (* (first operand) (do_algebra (rest operator) (sub1 operand)))]\n\
    \    [(equal? (first operator) '//) (floor (do_algebra (rest operator) (sub1 operand)))]\n\
    \    [(equal? (first operator) '**) (do_algebra (rest operator) (sub1 operand))]\n\
    \    [else (+ (do_algebra (rest operator) (first operand)) (do_algebra (rest operator)\
    \ (sub1 operand)))]))\n", "  (cond\n    [(empty? operand) (error \"Operand list\
    \ cannot be empty\")]\n    [(empty? operator) (error \"Operator list cannot be\
    \ empty\")]\n    [(null? (rest operator)) (error \"Operator list cannot be empty\"\
    )]\n    [(null? (rest operand)) (error \"Operand list cannot be empty\")]\n  \
    \  [else (cons (+ (first operand) (do_algebra (rest operator) (rest operand)))\n\
    \               (do_algebra (rest operator) (first operand)))]))\n", "  (cond\n\
    \    [(empty? operand) 0]\n    [(equal? (car operand) operator) (+ (do_algebra\
    \ (cdr operand) operand))]\n    [else (do_algebra (cdr operand) (cons (car operand)\
    \ (do_algebra operator operand)))]))\n", "  (cond\n    [(empty? operand) 0]\n\
    \    [(equal? (first operand) operator) (+ (do_algebra (rest operator) (rest operand)))]\n\
    \    [else (do_algebra (rest operator) operand)]))\n", "  (cond\n    [(empty?\
    \ operand) 0]\n    [(equal? (first operand) operator) (+ (first operand) (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) (rest\
    \ operand))]))\n", "  (cond\n    [(empty? operand) (error 'empty-operand)]\n \
    \   [(empty? operator) (error 'empty-operator)]\n    [else (cons (+ (car operand)\
    \ (car (cdr operand))\n                  (do_algebra (cdr operator) (cdr operand)))\n\
    \              (do_algebra (cdr operator) (cdr operand)))]))\n", "  (cond\n  \
    \  [(empty? operator) operand]\n    [(empty? operand) (error '(operator operand\
    \ \"operand\"))]\n    [else (cons (first operator) (do_algebra (rest operator)\
    \ (first operand)))]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal? (car\
    \ operand) operator) (do_algebra (cdr operand) (+ 1 operand))]\n    [else (do_algebra\
    \ (cdr operand) (* operand (car operand)))]))\n", "  (cond\n    [(empty? operand)\
    \ 0]\n    [(empty? operator) 0]\n    [(equal? (first operator) '+) (+ (first operand)\
    \ (do_algebra (rest operator) (rest operand)))]\n    [(equal? (first operator)\
    \ '-) (- (first operand) (do_algebra (rest operator) (rest operand)))]\n    [(equal?\
    \ (first operator) '*') (* (first operand) (do_algebra (rest operator) (rest operand)))]\n\
    \    [(equal? (first operator) '//') (floor (/ (first operand) (do_algebra (rest\
    \ operator) (rest operand))))]\n    [(equal? (first operator) '**') (exp (first\
    \ operand) (do_algebra (rest operator) (rest operand)))]\n    [else (error \"\
    Invalid operator\")]))\n", "  (cond\n    [(empty? operand) 0]\n    [(empty? operator)\
    \ 0]\n    [(equal? (car operator) '+) (+ (car operand) (do_algebra (cdr operator)\
    \ (cdr operand)))]\n    [(equal? (car operator) '-) (- (car operand) (do_algebra\
    \ (cdr operator) (cdr operand)))]\n    [(equal? (car operator) '*') (* 2 (do_algebra\
    \ (cdr operator) (cdr operand)))]\n    [(equal? (car operator) '//') (/ 2 (do_algebra\
    \ (cdr operator) (cdr operand)))]\n    [(equal? (car operator) '**') (* 2 (do_algebra\
    \ (cdr operator) (cdr operand)))]\n    [else (error \"Unknown operator\")]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) (rest\
    \ operand))]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand)\
    \ operator) (+ (do_algebra (rest operator) (rest operand)))]\n    [else (do_algebra\
    \ (rest operator) (rest operand))]))\n", "  (cond\n    [(empty? operator) operand]\n\
    \    [(empty? operand) operand]\n    [(equal? (first operator) '-) (- operand)]\n\
    \    [(equal? (first operator) '+) (+ operand)]\n    [(equal? (first operator)\
    \ '*) (* operand)]\n    [(equal? (first operator) '//) (/ operand operand)]\n\
    \    [(equal? (first operator) '**) (* operand operand)]))\n", "  (cond\n    [(empty?\
    \ operand) (error \"Operand list is empty\")]\n    [(empty? operator) (error \"\
    Operator list is empty\")]\n    [else (cons (+ (first operand) (do_algebra (rest\
    \ operator) (rest operand)))\n               (do_algebra (first operator) operand))]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(empty? operator) 0]\n    [else (+ (do_algebra\
    \ (first operator) (first operand)) (do_algebra (rest operator) (rest operand)))]))\n",
  "  (cond\n    [(empty? operand) (error \"operand list cannot be empty\")]\n    [(empty?\
    \ operator) (error \"operator list cannot be empty\")]\n    [else (cons (+ (first\
    \ operand) (do_algebra (rest operator) (rest operand)))\n               (do_algebra\
    \ (rest operator) operand))]))\n", "  (cond [(null? operand) 0]\n        [(null?\
    \ (cdr operand)) (+ (car operand) (car operand))]\n        [else (+ (do_algebra\
    \ (car operand) (cdr operand)) (do_algebra (car operator) (cdr operator)))]))\n",
  "  (cond\n    [(empty? operator) operand]\n    [(empty? operand) operand]\n    [else\
    \ (+ (do_algebra (first operator) (first operand))\n            (do_algebra (first\
    \ operator) (second operand)))]))\n", "  (cond\n    [(empty? operand) 0]\n   \
    \ [(equal? (first operand) operator) (+ (do_algebra (rest operator) (rest operand)))]\n\
    \    [else (do_algebra (rest operator) operand)]))\n", "  (cond\n    [(empty?\
    \ operand) 0]\n    [(equal? (first operand) operator) (do_algebra (rest operand)\
    \ (first operand))]\n    [else (+ (do_algebra (rest operand) (first operand))\
    \ (do_algebra (rest operand) (first operand)))]))\n", "  (cond\n    [(empty? operand)\
    \ 0]\n    [(empty? operator) 0]\n    [(equal? (first operator) '-) (- 0 (first\
    \ operand))]\n    [(equal? (first operator) '+) (+ (first operand) (first operand))]\n\
    \    [(equal? (first operator) '*') (* 0 (first operand))]\n    [(equal? (first\
    \ operator) '//') (/ 0 (first operand))]\n    [else (+ 0 (do_algebra (rest operator)\
    \ (first operand)))]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal? (first\
    \ operand) operator) (+ (do_algebra (rest operator) (rest operand)))]\n    [else\
    \ (do_algebra (rest operator) (rest operand))]))\n", "  (cond\n    [(empty? operand)\
    \ 0]\n    [(empty? operator) 0]\n    [(equal? (first operator) '-) (- 0 (first\
    \ operand))]\n    [(equal? (first operator) '+) (+ (first operand) (first operand))]\n\
    \    [(equal? (first operator) '*') (* 0 (first operand))]\n    [(equal? (first\
    \ operator) '//') (/ 0 (first operand))]\n    [else (+ 0 (do_algebra (rest operator)\
    \ (first operand)))]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal? (first\
    \ operand) operator) (+ (do_algebra (rest operator) (rest operand)))]\n    [else\
    \ (do_algebra (rest operator) operand)]))\n", "  (cond\n    [(empty? operator)\
    \ operand]\n    [(empty? operand) operand]\n    [else (+ (do_algebra (first operator)\
    \ operand) (do_algebra (second operator) operand))]\n  )\n)\n", "  (cond\n   \
    \ [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(empty? (rest operand)) (first operand)]\n\
    \    [else (+ (first operand) (do_algebra (rest operator) (rest operand)))]))\n",
  "  (cond [(null? operand) 0]\n        [(null? (cdr operand)) (+ (car operand) (car\
    \ operand))]\n        [else (+ (car operand) (do_algebra (car operator) (cdr operand)))]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(empty? (rest operand)) (first operand)]\n\
    \    [else (+ (first operand) (do_algebra (rest operator) (rest operand)))]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(empty? (rest operand)) (+ (first operand)\
    \ (do_algebra (first operand) (rest operand)))]\n    [else (+ (first operand)\
    \ (do_algebra (first operand) (rest operand)))]))\n", "  (cond\n    [(empty? operand)\
    \ 0]\n    [(equal? (car operand) operator) (+ (do_algebra (cdr operand) operand))]\n\
    \    [else (do_algebra (cdr operand) (cons (car operand) (do_algebra operator\
    \ operand)))]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand)\
    \ operator) (+ (do_algebra (rest operator) (rest operand)))]\n    [else (do_algebra\
    \ (rest operator) operand)]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal?\
    \ (first operand) operator) (+ (first operand) (do_algebra (rest operand) (rest\
    \ operand)))]\n    [else (do_algebra (rest operand) (rest operand))]))\n", " \
    \ (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) operand)]))\n",
  "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand) operator) (+ (do_algebra\
    \ (rest operator) (rest operand)))]\n    [else (do_algebra (rest operator) (rest\
    \ operand))]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal? (first operand)\
    \ operator) (+ (do_algebra (rest operator) (rest operand)))]\n    [else (do_algebra\
    \ (rest operator) operand)]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal?\
    \ (car operand) operator) (+ (car operand) (do_algebra (cdr operand) operand))]\n\
    \    [else (do_algebra (cdr operand) operand)]))\n", "  (cond\n    [(empty? operand)\
    \ 0]\n    [(equal? (first operand) operator) (+ (do_algebra (rest operator) (rest\
    \ operand)))]\n    [else (do_algebra (rest operator) (rest operand))]))\n", " \
    \ (cond\n    [(empty? operand) (error \"Operand list is empty.\")]\n    [(empty?\
    \ operator) (error \"Operator list is empty.\")]\n    [else (cons (+ (first operand)\
    \ (do_algebra (rest operator) (rest operand)))\n              (do_algebra (rest\
    \ operator) (first operand)))]))\n", "  (cond\n    [(empty? operand) 0]\n    [(equal?\
    \ (first operand) operator) (+ (do_algebra (rest operator) (rest operand)))]\n\
    \    [else (do_algebra (rest operator) operand)]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
