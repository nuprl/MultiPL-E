name: HumanEval_105_by_length
language: racket
prompt: "#lang racket\n\n;; Given an array of integers, sort the integers that are\
  \ between 1 and 9 inclusive,\n;; reverse the resulting array, and then replace each\
  \ digit by its corresponding name from\n;; \"One\", \"Two\", \"Three\", \"Four\"\
  , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n;; For example:\n;; arr =\
  \ [2, 1, 1, 4, 5, 8, 2, 3]   \n;; -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n;; ->\
  \ reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n;; return [\"Eight\", \"Five\", \"Four\"\
  , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n;; If the array is empty, return\
  \ an empty array:\n;; arr = []\n;; return []\n;; If the array has any strange number\
  \ ignore it:\n;; arr = [1, -1 , 55] \n;; -> sort arr -> [-1, 1, 55]\n;; -> reverse\
  \ arr -> [55, 1, -1]\n;; return = ['One']\n(define (by_length arr)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate by_length))\n\
  \    (check-equal? (candidate (list 2 1 1 4 5 8 2 3)) (list \"Eight\" \"Five\" \"\
  Four\" \"Three\" \"Two\" \"Two\" \"One\" \"One\"))\n    (check-equal? (candidate\
  \ (list )) (list ))\n    (check-equal? (candidate (list 1 -1 55)) (list \"One\"\
  ))\n    (check-equal? (candidate (list 1 -1 3 2)) (list \"Three\" \"Two\" \"One\"\
  ))\n    (check-equal? (candidate (list 9 4 8)) (list \"Nine\" \"Eight\" \"Four\"\
  ))\n))\n\n(test-humaneval)"
completions: ["  (if (null? arr)\n      '()\n      (append (sort (filter odd? (map\
    \ number? (range 1 9))) <)\n              (reverse (sort (filter even? (map number?\
    \ (range 1 9))) >))\n              (map string? (range 1 9))))))\n</code>\n<|/\
    \ a tags=racket,scheme |>\n<| a dscore=0 |>\n<code>", "  (if (null? arr)\n   \
    \   '()\n      (append (sort (filter (lambda (x) (<= x 9)) arr))\n           \
    \   (reverse (sort (filter (lambda (x) (not (<= x 9)) arr)))))\n  )\n)\n", " \
    \ (if (null? arr)\n      '()\n      (append (sort (filter (lambda (x) (<= x 9))\
    \ arr))\n              (reverse (sort (filter (lambda (x) (not (<= x 9)) arr)))))\n\
    \  )\n)\n", "  (if (null? arr)\n      '()\n      (append (sort (filter (lambda\
    \ (x) (<= x 9)) arr))\n              (reverse (sort (filter (lambda (x) (not (<=\
    \ x 9)) arr)))))\n  )\n)\n", "  (if (null? arr)\n      '()\n      (append (sort\
    \ (map number->name arr))\n              (reverse (sort (map number->name arr))))))\n",
  "  (if (null? arr)\n      '()\n      (append (sort (filter odd? (map number? (filter\
    \ between? arr 1 9)))) \n              (reverse (sort (filter even? (map number?\
    \ (filter between? arr 1 9))))) \n              (map by_length (filter number?\
    \ (map between? arr 1 9)))))\n", "  (if (empty? arr)\n      '()\n      (let ([head\
    \ (first arr)])\n        (if (> head 9)\n            (append (by_length (rest\
    \ arr))\n                    (list (by_digit head \"One\")\n                 \
    \         (by_digit head \"Two\")\n                          (by_digit head \"\
    Three\")\n                          (by_digit head \"Four\")\n               \
    \           (by_digit head \"Five\")\n                          (by_digit head\
    \ \"Six\")\n                          (by_digit head \"Seven\")\n            \
    \              (by_digit head \"Eight\")\n                          (by_digit\
    \ head \"Nine\"))\n            (append (by_length (rest arr))\n              \
    \      (list (by_digit head \"One\")\n                          (by_digit head\
    \ \"Two\")\n                          (by_digit head \"Three\")\n            \
    \              (by_digit head \"Four\")\n                          (by_digit head\
    \ \"Five\")\n                          (by_digit head \"Six\")\n             \
    \             (by_digit head \"Seven\")\n                          (by_digit head\
    \ \"Eight\")\n                          (by_digit head \"Nine\"))))))))\n", " \
    \ (if (empty? arr)\n      '()\n      (append (sort (filter odd? (map length arr)))\
    \ (reverse (sort (filter even? (map length arr)))))\n  )\n)\n", "  (if (null?\
    \ arr)\n      '()\n      (append (sort (filter #(<= (length %) 9) arr))\n    \
    \          (reverse (sort (filter #(>= (length %) 9) arr))\n                 \
    \      (map #(cond [(< % 9) \"One\"]\n                                   [(= %\
    \ 9) \"Two\"]\n                                   [(> % 9) \"Three\"]\n      \
    \                             [(= % 9) \"Four\"]\n                           \
    \        [(> % 9) \"Five\"]\n                                   [(= % 9) \"Six\"\
    ]\n                                   [(= % 9) \"Seven\"]\n                  \
    \                 [(= % 9) \"Eight\"]\n                                   [(=\
    \ % 9) \"Nine\"]\n                                   [else \"?\"]))))\n", "  (if\
    \ (null? arr)\n      '()\n      (append (sort (filter #(<= (length %) 9) arr))\n\
    \              (reverse (sort (filter #(>= (length %) 1) arr))\n             \
    \         (map #(cond [(= (length %) 9) \"Nine\"]\n                          \
    \       [(= (length %) 1) \"One\"]\n                                 [(= (length\
    \ %) 2) \"Two\"]\n                                 [(= (length %) 3) \"Three\"\
    ]\n                                 [(= (length %) 4) \"Four\"]\n            \
    \                     [(= (length %) 5) \"Five\"]\n                          \
    \       [(= (length %) 6) \"Six\"]\n                                 [(= (length\
    \ %) 7) \"Seven\"]\n                                 [(= (length %) 8) \"Eight\"\
    ]\n                                 [(= (length %) 9) \"Nine\"]\n            \
    \                     [else (cond [(= (length %) 1) \"One\"]\n               \
    \                            [(= (length %) 2) \"Two\"]\n                    \
    \                       [(= (length %) 3) \"Three\"]\n                       \
    \                    [(= (length %) 4) \"Four\"]\n                           \
    \                [(= (length %) 5) \"Five\"]\n                               \
    \            [(= (length %) 6) \"Six\"]\n                                    \
    \       [(= (length %) 7) \"Seven\"]\n                                       \
    \    [(= (length %) 8) \"Eight\"]\n                                          \
    \ [(= (length %) 9) \"Nine\"]\n                                           [else\
    \ (cond [(= (length %) 1) \"One\"]\n                                         \
    \             [(= (length %) 2) \"Two\"]\n                                   \
    \                   [(= (length %) 3) \"Three\"]\n                           \
    \                           [(= (length %) 4) \"Four\"]\n                    \
    \                                  [(= (length %) 5) \"Five\"]\n             \
    \                                         [(= (length %) 6) \"Six\"]\n       \
    \                                               [(= (length %) 7) \"Seven\"]\n\
    \                                                      [(= (length %) 8) \"Eight\"\
    ]\n                                                      [(= (length %) 9) \"\
    Nine\"]\n                                                      [else (cond [(=\
    \ (length %) 1) \"One\"]\n                                                   \
    \             [(= (length %) 2) \"Two\"]\n                                   \
    \                             [(= (length %) 3) \"Three\"]\n                 \
    \                                               [(= (length %) 4) \"Four\"]\n\
    \                                                                [(= (length %)\
    \ 5) \"Five\"]\n                                                             \
    \   [(= (length %) 6) \"Six\"]\n                                             \
    \                   [(= (length %) 7) \"Seven\"]\n                           \
    \                                     [(= (length %) ", "  (sort arr (lambda (x)\
    \ (<= (length x) 9)))\n  (reverse arr)\n  (map #(cond [(< x 9) (cons \"One\" (reverse\
    \ (substring \"One\" 0 x)))]\n             [(< x 8) (cons \"Two\" (reverse (substring\
    \ \"Two\" 0 x)))]\n             [(< x 7) (cons \"Three\" (reverse (substring \"\
    Three\" 0 x)))]\n             [(< x 6) (cons \"Four\" (reverse (substring \"Four\"\
    \ 0 x)))]\n             [(< x 5) (cons \"Five\" (reverse (substring \"Five\" 0\
    \ x)))]\n             [(< x 4) (cons \"Six\" (reverse (substring \"Six\" 0 x)))]\n\
    \             [(< x 3) (cons \"Seven\" (reverse (substring \"Seven\" 0 x)))]\n\
    \             [(< x 2) (cons \"Eight\" (reverse (substring \"Eight\" 0 x)))]\n\
    \             [(< x 1) (cons \"Nine\" (reverse (substring \"Nine\" 0 x)))]\n \
    \            [(> x 1) (cons \"One\" (reverse (substring \"One\" 0 x)))]\n    \
    \         [(> x 0) (cons \"Zero\" (reverse (substring \"Zero\" 0 x)))]\n     \
    \        [else (cons \"Zero\" (reverse (substring \"Zero\" 0 x)))]\n         \
    \    )\n       arr))\n", "  (if (null? arr)\n      '()\n      (append (sort (filter\
    \ (lambda (x) (<= (length x) 9)) arr))\n              (reverse (sort (filter (lambda\
    \ (x) (not (<= (length x) 9)) arr)))))\n  )\n)\n", "  (if (empty? arr)\n     \
    \ '()\n      (append (sort (filter odd? (map length arr))) (reverse (sort (filter\
    \ even? (map length arr)))))\n  )\n)\n", '  (sort arr (lambda (x y) (< (length
    x) 9) (< (length y) 9))))', "  (sort arr (lambda (x y)\n              (< (length\
    \ x) 9) (< (length y) 9))\n          (lambda (x y)\n              (if (= (length\
    \ x) 9) (list 'One) (list 'Two))\n              (if (= (length y) 9) (list 'Three)\
    \ (list 'Four))\n              (if (= (length x) 9) (list 'Five) (list 'Six))\n\
    \              (if (= (length y) 9) (list 'Seven) (list 'Eight))\n           \
    \   (if (= (length x) 9) (list 'Nine) (list 'Ten)))))\n", "  (if (empty? arr)\n\
    \      '()\n      (append (sort (filter odd? (map number? (filter between? arr\
    \ 1 9)))))\n              (reverse (sort (filter even? (map number? (filter between?\
    \ arr 1 9)))))\n              (append (sort (filter odd? (map number? (filter\
    \ between? arr 1 9)))))\n              (reverse (sort (filter even? (map number?\
    \ (filter between? arr 1 9)))))\n              (append (sort (filter odd? (map\
    \ number? (filter between? arr 1 9)))))\n              (reverse (sort (filter\
    \ even? (map number? (filter between? arr 1 9)))))\n              (append (sort\
    \ (filter odd? (map number? (filter between? arr 1 9)))))\n              (reverse\
    \ (sort (filter even? (map number? (filter between? arr 1 9)))))\n           \
    \   (append (sort (filter odd? (map number? (filter between? arr 1 9)))))\n  \
    \            (reverse (sort (filter even? (map number? (filter between? arr 1\
    \ 9)))))\n              (append (sort (filter odd? (map number? (filter between?\
    \ arr 1 9)))))\n              (reverse (sort (filter even? (map number? (filter\
    \ between? arr 1 9)))))\n              (append (sort (filter odd? (map number?\
    \ (filter between? arr 1 9)))))\n              (reverse (sort (filter even? (map\
    \ number? (filter between? arr 1 9)))))\n              (append (sort (filter odd?\
    \ (map number? (filter between? arr 1 9)))))\n              (reverse (sort (filter\
    \ even? (map number? (filter between? arr 1 9)))))\n              (append (sort\
    \ (filter odd? (map number? (filter between? arr 1 9)))))\n              (reverse\
    \ (sort (filter even? (map number? (filter between? arr 1 9)))))\n           \
    \   (append (sort (filter odd? (map number? (filter between? arr 1 9)))))\n  \
    \            (reverse (sort (filter even? (map number? (filter between? arr 1\
    \ 9)))))\n              (append (sort (filter odd? (map number? (filter between?\
    \ arr 1 9)))))\n              (reverse (sort (filter even? (map number? (filter\
    \ between? arr 1 9)))))\n              (append (sort (filter odd? (map number?\
    \ (filter between? arr 1 9))", "  (sort arr (lambda (x y) (< (length x) (length\
    \ y)))\n         (reverse arr)))\n", "  (if (null? arr)\n      '()\n      (append\
    \ (sort (filter odd? (map number? (filter between? arr 1 9))))\n             \
    \ (reverse (sort (filter even? (map number? (filter between? arr 1 9))))\n   \
    \           (map by_digit (map by_name arr))))))\n", '  (sort arr (lambda (x y)
    (< (length x) 9) (< (length y) 9))))', "  (if (null? arr)\n      '()\n      (append\
    \ (sort (filter #(< % 9) arr))\n              (reverse (sort (filter #(> % 9)\
    \ arr))\n              (map (lambda (x) (cond ((= x 1) \"One\")\n            \
    \                        ((= x 2) \"Two\")\n                                 \
    \   ((= x 3) \"Three\")\n                                    ((= x 4) \"Four\"\
    )\n                                    ((= x 5) \"Five\")\n                  \
    \                  ((= x 6) \"Six\")\n                                    ((=\
    \ x 7) \"Seven\")\n                                    ((= x 8) \"Eight\")\n \
    \                                   ((= x 9) \"Nine\")\n                     \
    \               (else \"???\")) arr))))\n", "  (if (null? arr)\n      '()\n  \
    \    (append (sort (filter (lambda (x) (<= x 9)) arr))\n              (reverse\
    \ (sort (filter (lambda (x) (not (<= x 9)) arr)))))\n  )\n", "  (sort arr (lambda\
    \ (x) (<= (length x) 9)))\n  (reverse arr)\n  (map (lambda (x) (cond ((= (length\
    \ x) 9) (cons \"One\" x))\n                          ((= (length x) 8) \n    \
    \                       (cons \"Two\" x))\n                          ((= (length\
    \ x) 7) \n                           (cons \"Three\" x))\n                   \
    \       ((= (length x) 6) \n                           (cons \"Four\" x))\n  \
    \                        ((= (length x) 5) \n                           (cons\
    \ \"Five\" x))\n                          ((= (length x) 4) \n               \
    \            (cons \"Six\" x))\n                          ((= (length x) 3) \n\
    \                           (cons \"Seven\" x))\n                          ((=\
    \ (length x) 2) \n                           (cons \"Eight\" x))\n           \
    \               ((= (length x) 1) \n                           (cons \"Nine\"\
    \ x))\n                          (else x))) arr))\n", "  (if (null? arr)\n   \
    \   '()\n      (append (sort (map number->name arr))\n              (reverse (sort\
    \ (map number->name arr))))))\n", "  (if (null? arr)\n      '()\n      (append\
    \ (sort (filter odd? (map number? (filter between? arr 1 9))))\n             \
    \ (reverse (sort (filter even? (map number? (filter between? arr 1 9))))\n   \
    \           (map by_digit (map by_name arr))))))\n", "  (if (empty? arr)\n   \
    \   '()\n      (append (sort (filter odd? (map number? (filter between? arr 1\
    \ 9))))\n              (reverse (sort (filter even? (map number? (filter between?\
    \ arr 1 9))))\n              (map (lambda (x) (cond ((number? x) x)\n        \
    \                            ((between? x 1 9) (cond ((eq? x 1) \"One\")\n   \
    \                                                       ((eq? x 2) \"Two\")\n\
    \                                                          ((eq? x 3) \"Three\"\
    )\n                                                          ((eq? x 4) \"Four\"\
    )\n                                                          ((eq? x 5) \"Five\"\
    )\n                                                          ((eq? x 6) \"Six\"\
    )\n                                                          ((eq? x 7) \"Seven\"\
    )\n                                                          ((eq? x 8) \"Eight\"\
    )\n                                                          ((eq? x 9) \"Nine\"\
    )\n                                                          (else (error \"Unexpected\
    \ number in by_length: ~a\" x))))))))\n", "  (if (null? arr)\n      '()\n    \
    \  (append (sort (filter odd? (map number? (filter between? arr 1 9))))\n    \
    \          (reverse (sort (filter even? (map number? (filter between? arr 1 9))))\n\
    \              (map by_digit\n                   (map by_name\n              \
    \         (map by_length\n                             (filter by_digit\n    \
    \                                 (filter by_name\n                          \
    \               (filter by_length\n                                          \
    \     (filter odd? (map number? (filter between? arr 1 9))))))))))))\n", "  (if\
    \ (null? arr)\n      '()\n      (append (sort (filter #(<= (length %) 9) (map\
    \ number arr)))\n              (reverse (sort (filter #(>= (length %) 9) (map\
    \ number arr)))))\n  )\n)\n", "  (sort arr (lambda (x y)\n             (< (length\
    \ x) 9) (< (length y) 9))))", "  (if (null? arr)\n      '()\n      (append (sort\
    \ (filter #(<= (length %) 9) (map number->string arr))) \n              (reverse\
    \ (sort (filter #(>= (length %) 1) (map number->string arr))) \n             \
    \ (map number->string arr))))\n", "  (if (empty? arr)\n      '()\n      (append\
    \ (sort (filter odd? (map length arr))) (reverse (sort (filter even? (map length\
    \ arr)))))\n  )\n)\n", "  (if (empty? arr)\n      '()\n      (append (sort (sub1\
    \ arr))\n              (reverse (sub1 arr))\n              (map (lambda (x) (cond\
    \ ((< x 9) (cons x (by_length (sub1 arr))))\n                                \
    \      ((> x 9) (cons (- x 9) (by_length (sub1 arr))))\n                     \
    \                 (else (cons (- x 9) (cons x \"One\"))))))))\n", "  (if (null?\
    \ arr)\n      '()\n      (append (sort (filter (lambda (x) (<= (length arr) 9))\
    \ arr))\n              (reverse (sort (filter (lambda (x) (not (<= (length arr)\
    \ 9)) arr)))))\n  )\n)\n", "  (if (null? arr)\n      '()\n      (append (sort\
    \ (filter #(<= (length %) 9) (take arr %)) #:key (lambda (x) (+ x 9))) \n    \
    \          (reverse (sort (filter #(<= (length %) 9) (take arr %)) #:key (lambda\
    \ (x) (- x 9))) \n              (map (lambda (x) (cond ((= (length x) 9) \"Nine\"\
    )\n                                    ((= (length x) 8) \"Eight\")\n        \
    \                            ((= (length x) 7) \"Seven\")\n                  \
    \                  ((= (length x) 6) \"Six\")\n                              \
    \      ((= (length x) 5) \"Five\")\n                                    ((= (length\
    \ x) 4) \"Four\")\n                                    ((= (length x) 3) \"Three\"\
    )\n                                    ((= (length x) 2) \"Two\")\n          \
    \                          ((= (length x) 1) \"One\")\n                      \
    \              (else x))) arr))))\n", "  (if (empty? arr)\n      '()\n      (append\
    \ (sort (sub1 arr))\n              (reverse (sub1 arr))\n              (map #(cond\
    \ [(< % 9) \"One\"]\n                          [(< % 9) \"Two\"]\n           \
    \               [(< % 9) \"Three\"]\n                          [(< % 9) \"Four\"\
    ]\n                          [(< % 9) \"Five\"]\n                          [(<\
    \ % 9) \"Six\"]\n                          [(< % 9) \"Seven\"]\n             \
    \             [(< % 9) \"Eight\"]\n                          [(< % 9) \"Nine\"\
    ]\n                          [(< % 9) \"Ten\"]\n                          [(<\
    \ % 9) \"Eleven\"]\n                          [(< % 9) \"Twelve\"]\n         \
    \                 [(< % 9) \"Thirteen\"]\n                          [(< % 9) \"\
    Fourteen\"]\n                          [(< % 9) \"Fifteen\"]\n               \
    \           [(< % 9) \"Sixteen\"]\n                          [(< % 9) \"Seventeen\"\
    ]\n                          [(< % 9) \"Eighteen\"]\n                        \
    \  [(< % 9) \"Nineteen\"]\n                          [(< % 9) \"Twenty\"]\n  \
    \                        [(< % 9) \"Twenty-one\"]\n                          [(<\
    \ % 9) \"Twenty-two\"]\n                          [(< % 9) \"Twenty-three\"]\n\
    \                          [(< % 9) \"Twenty-four\"]\n                       \
    \   [(< % 9) \"Twenty-five\"]\n                          [(< % 9) \"Twenty-six\"\
    ]\n                          [(< % 9) \"Twenty-seven\"]\n                    \
    \      [(< % 9) \"Twenty-eight\"]\n                          [(< % 9) \"Twenty-nine\"\
    ]\n                          [(< % 9) \"Thirty\"]\n                          [(<\
    \ % 9) \"Thirty-one\"]\n                          [(< % 9) \"Thirty-two\"]\n \
    \                         [(< % 9) \"Thirty-three\"]\n                       \
    \   [(< % 9) \"Thirty-four\"]\n                          [(< % 9) \"Thirty-five\"\
    ]\n                          [(< % 9) \"Thirty-six\"]\n                      \
    \    [(< % 9) \"Thirty-seven\"]\n                          [(< % 9) \"Thirty-eight\"\
    ]\n                          [(< % 9) \"Thirty-nine\"]\n                     \
    \     [(< % 9) \"Forty\"]\n                          [(< % 9) \"Forty-one\"]\n\
    \                          [(< % 9) \"Forty-two\"]\n                         \
    \ [(< % 9) \"Forty-three", "  (if (empty? arr)\n      '()\n      (append (sort\
    \ (sub1 arr))\n              (reverse (sub1 arr))\n              (map #(cond [(<\
    \ % 9) (cons \"One\" (reverse (sub1 arr)))]\n                          [(< % 9)\
    \ (cons \"Two\" (reverse (sub1 arr)))]\n                          [(< % 9) (cons\
    \ \"Three\" (reverse (sub1 arr)))]\n                          [(< % 9) (cons \"\
    Four\" (reverse (sub1 arr)))]\n                          [(< % 9) (cons \"Five\"\
    \ (reverse (sub1 arr)))]\n                          [(< % 9) (cons \"Six\" (reverse\
    \ (sub1 arr)))]\n                          [(< % 9) (cons \"Seven\" (reverse (sub1\
    \ arr)))]\n                          [(< % 9) (cons \"Eight\" (reverse (sub1 arr)))]\n\
    \                          [(< % 9) (cons \"Nine\" (reverse (sub1 arr)))]\n  \
    \                        [(< % 9) (cons (reverse (sub1 arr)) (cons \"One\"))]\n\
    \                          [(< % 9) (cons (reverse (sub1 arr)) (cons \"Two\"))]\n\
    \                          [(< % 9) (cons (reverse (sub1 arr)) (cons \"Three\"\
    ))]\n                          [(< % 9) (cons (reverse (sub1 arr)) (cons \"Four\"\
    ))]\n                          [(< % 9) (cons (reverse (sub1 arr)) (cons \"Five\"\
    ))]\n                          [(< % 9) (cons (reverse (sub1 arr)) (cons \"Six\"\
    ))]\n                          [(< % 9) (cons (reverse (sub1 arr)) (cons \"Seven\"\
    ))]\n                          [(< % 9) (cons (reverse (sub1 arr)) (cons \"Eight\"\
    ))]\n                          [(< % 9) (cons (reverse (sub1 arr)) (cons \"Nine\"\
    ))]\n                          [(< % 9) (cons (reverse (sub1 arr)) (cons (reverse\
    \ (sub1 arr))))]\n                          [(< % 9) (cons (reverse (sub1 arr))\
    \ (cons (reverse (sub1 arr))))]\n                          [(< % 9) (cons (reverse\
    \ (sub1 arr)) (cons (reverse (sub1 arr))))]\n                          [(< % 9)\
    \ (cons (reverse (sub1 arr)) (cons (reverse (sub1 arr))))]\n                 \
    \         [(< % 9) (cons (", "  (if (null? arr)\n      '()\n      (append (sort\
    \ (filter #(<= (length %) 9) arr))\n              (reverse (sort (filter #(>=\
    \ (length %) 1) arr))\n                      (map #(cond [(= (length %) 1) \"\
    One\"]\n                                  [(= (length %) 2) \"Two\"]\n       \
    \                           [(= (length %) 3) \"Three\"]\n                   \
    \               [(= (length %) 4) \"Four\"]\n                                \
    \  [(= (length %) 5) \"Five\"]\n                                  [(= (length\
    \ %) 6) \"Six\"]\n                                  [(= (length %) 7) \"Seven\"\
    ]\n                                  [(= (length %) 8) \"Eight\"]\n          \
    \                        [(= (length %) 9) \"Nine\"]\n                       \
    \           [else (cond [(= (length %) 1) \"One\"]\n                         \
    \                  [(= (length %) 2) \"Two\"]\n                              \
    \             [(= (length %) 3) \"Three\"]\n                                 \
    \          [(= (length %) 4) \"Four\"]\n                                     \
    \      [(= (length %) 5) \"Five\"]\n                                         \
    \  [(= (length %) 6) \"Six\"]\n                                           [(=\
    \ (length %) 7) \"Seven\"]\n                                           [(= (length\
    \ %) 8) \"Eight\"]\n                                           [(= (length %)\
    \ 9) \"Nine\"]\n                                           [else (cond [(= (length\
    \ %) 1) \"One\"]\n                                                   [(= (length\
    \ %) 2) \"Two\"]\n                                                   [(= (length\
    \ %) 3) \"Three\"]\n                                                   [(= (length\
    \ %) 4) \"Four\"]\n                                                   [(= (length\
    \ %) 5) \"Five\"]\n                                                   [(= (length\
    \ %) 6) \"Six\"]\n                                                   [(= (length\
    \ %) 7) \"Seven\"]\n                                                   [(= (length\
    \ %) 8) \"Eight\"]\n                                                   [(= (length\
    \ %) 9) \"Nine\"]\n                                                   [else (cond\
    \ [(= (length %) 1) \"One\"]\n                                               \
    \             [(= (length %) 2) \"Two\"]\n                                   \
    \                         [(= (length %) 3) \"Three\"]\n                     \
    \                                       [(= (length %) 4) \"Four\"]\n        \
    \                                                    [(= (length %) 5) \"Five\"\
    ]\n                                                            [(= (length %)\
    \ 6) \"Six\"]\n                                                            [(=\
    \ (length %) 7) \"Seven\"]\n                                                 \
    \           [(= (length %) 8) \"Eight\"]\n                                   \
    \                         [(= (length %) ", "  (if (null? arr)\n      '()\n  \
    \    (append (sort (filter #(<= (length %) 9) arr))\n              (reverse (sort\
    \ (filter #(>= (length %) 1) arr))\n                       (map #(cond [(<= (length\
    \ %) 9) \"One\"]\n                                  [(>= (length %) 1) \"Two\"\
    ]\n                                  [(<= (length %) 9) \"Three\"]\n         \
    \                         [(>= (length %) 1) \"Four\"]\n                     \
    \             [(<= (length %) 9) \"Five\"]\n                                 \
    \ [(>= (length %) 1) \"Six\"]\n                                  [(<= (length\
    \ %) 9) \"Seven\"]\n                                  [(>= (length %) 1) \"Eight\"\
    ]\n                                  [(<= (length %) 9) \"Nine\"]\n          \
    \                        [(>= (length %) 1) \"Ten\"]\n                       \
    \           [(<= (length %) 9) \"Eleven\"]\n                                 \
    \ [(>= (length %) 1) \"Twelve\"]\n                                  [(<= (length\
    \ %) 9) \"Thirteen\"]\n                                  [(>= (length %) 1) \"\
    Fourteen\"]\n                                  [(<= (length %) 9) \"Fifteen\"\
    ]\n                                  [(>= (length %) 1) \"Sixteen\"]\n       \
    \                           [(<= (length %) 9) \"Seventeen\"]\n              \
    \                    [(>= (length %) 1) \"Eighteen\"]\n                      \
    \            [(<= (length %) 9) \"Nineteen\"]\n                              \
    \    [(>= (length %) 1) \"Twenty\"]\n                                  [(<= (length\
    \ %) 9) \"Twenty-one\"]\n                                  [(>= (length %) 1)\
    \ \"Twenty-two\"]\n                                  [(<= (length %) 9) \"Twenty-three\"\
    ]\n                                  [(>= (length %) 1) \"Twenty-four\"]\n   \
    \                               [(<= (length %) 9) \"Twenty-five\"]\n        \
    \                          [(>= (length %) 1) \"Twenty-six\"]\n              \
    \                    [(<= (length %) 9) \"Twenty-seven\"]\n                  \
    \                [(>= (length %) 1) \"Twenty-eight\"]\n                      \
    \            [(<= (length %) 9) \"Twenty-nine\"]\n                           \
    \       [(>= (length %) 1) \"Thirty\"]\n                                  [(<=\
    \ (length %) 9) \"Thirty-one\"]\n                                  [(>= (length\
    \ %) 1) \"Thirty-two\"]\n                                  [(<= (length %) 9)\
    \ \"Thirty-three\"]\n                                  [(", "  (if (empty? arr)\n\
    \      '()\n      (append (sort (sub1 arr))\n              (reverse (sub1 arr))\n\
    \              (map (lambda (x) (cond ((= x 1) 'One)\n                       \
    \               ((= x 2) 'Two)\n                                      ((= x 3)\
    \ 'Three)\n                                      ((= x 4) 'Four)\n           \
    \                           ((= x 5) 'Five)\n                                \
    \      ((= x 6) 'Six) \n                                      ((= x 7) 'Seven)\n\
    \                                      ((= x 8) 'Eight)\n                    \
    \                  ((= x 9) 'Nine)\n                                      (else\
    \ '???'))))))\n", "  (sort arr (lambda (x) (< (length x) 9)))\n  (reverse arr)\n\
    \  (map (lambda (x) (cond [(= (length x) 9) \"Nine\"]\n                      \
    \    [(= (length x) 8) \"Eight\"]\n                          [(= (length x) 7)\
    \ \"Seven\"]\n                          [(= (length x) 6) \"Six\"]\n         \
    \                 [(= (length x) 5) \"Five\"]\n                          [(= (length\
    \ x) 4) \"Four\"]\n                          [(= (length x) 3) \"Three\"]\n  \
    \                        [(= (length x) 2) \"Two\"]\n                        \
    \  [(= (length x) 1) \"One\"]\n                          [else x]))\n        arr))\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nHere's a solution using recursion:\n\
    <code>", "  (cond\n    [(empty? arr) empty]\n    [(= (length arr) 1) (cons \"\
    One\" arr)]\n    [(= (length arr) 2) (cons \"Two\" arr)]\n    [(= (length arr)\
    \ 3) (cons \"Three\" arr)]\n    [(= (length arr) 4) (cons \"Four\" arr)]\n   \
    \ [(= (length arr) 5) (cons \"Five\" arr)]\n    [(= (length arr) 6) (cons \"Six\"\
    \ arr)]\n    [(= (length arr) 7) (cons \"Seven\" arr)]\n    [(= (length arr) 8)\
    \ (cons \"Eight\" arr)]\n    [(= (length arr) 9) (cons \"Nine\" arr)]\n    [else\
    \ (cons (name (car arr)) (by_length (cdr arr)))]))\n", "  (sort arr (lambda (x\
    \ y)\n              (< (length x) 9) (< (length y) 9))))", "  (cond\n    [(empty?\
    \ arr) empty]\n    [(number? (car arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) empty))]\n    [else (by_length (cdr arr))]))\n", "  (if (null? arr)\n\
    \      '()\n      (append (sort (filter #(<= (length %) 9) arr))\n           \
    \   (reverse (sort (filter #(> 9 %) arr))\n                       (map #(cond\
    \ [(<= (length %) 9) (cons \"One\" %)]\n                                  [(>\
    \ 9 %) (cons \"Two\" %)]\n                                  [(<= (length %) 9)\
    \ (cons \"Three\" %)]\n                                  [(> 9 %) (cons \"Four\"\
    \ %)]\n                                  [(<= (length %) 9) (cons \"Five\" %)]\n\
    \                                  [(> 9 %) (cons \"Six\" %)]\n              \
    \                    [(<= (length %) 9) (cons \"Seven\" %)]\n                \
    \                  [(> 9 %) (cons \"Eight\" %)]\n                            \
    \      [(<= (length %) 9) (cons \"Nine\" %)]\n                               \
    \   [(> 9 %) (cons \"Ten\" %)]\n                                  [(<= (length\
    \ %) 9) (cons \"Eleven\" %)]\n                                  [(> 9 %) (cons\
    \ \"Twelve\" %)]\n                                  [(<= (length %) 9) (cons \"\
    Thirteen\" %)]\n                                  [(> 9 %) (cons \"Fourteen\"\
    \ %)]\n                                  [(<= (length %) 9) (cons \"Fifteen\"\
    \ %)]\n                                  [(> 9 %) (cons \"Sixteen\" %)]\n    \
    \                              [(<= (length %) 9) (cons \"Seventeen\" %)]\n  \
    \                                [(> 9 %) (cons \"Eighteen\" %)]\n           \
    \                       [(<= (length %) 9) (cons \"Nineteen\" %)]\n          \
    \                        [(> 9 %) (cons \"Twenty\" %)]\n                     \
    \             [(<= (length %) 9) (cons \"Twenty one\" %)]\n                  \
    \                [(> 9 %) (cons \"Twenty two\" %)]\n                         \
    \         [(<= (length %) 9) (cons \"Twenty three\" %)]\n                    \
    \              [(> 9 %) (cons \"Twenty four\" %)]\n                          \
    \        [(<= (length %) 9) (cons \"Twenty five\" %)]\n                      \
    \            [(> 9 %) (cons \"Twenty six\" %)]\n                             \
    \     [(<= (length %) 9) (cons \"Twenty seven\" %)]\n                        \
    \          [(> 9 %) (cons \"Twenty eight\" %)]\n                             \
    \     [(<= (length %) 9", "  (if (null? arr)\n      '()\n      (append (sort (filter\
    \ odd? (map length arr))) (reverse (sort (filter even? (map length arr)))))\n\
    \  )\n)\n", "  (sort arr (lambda (x y) (< (length x) (length y)))\n         (lambda\
    \ (x y) (< (length x) (length y))))\n  (sort arr (lambda (x y) (< (length x) (length\
    \ y)))\n         (lambda (x y) (< (length x) (length y))))\n  (map #(cond [(<\
    \ x 9) (cons \"Nine\" (reverse (list x)))]\n              [(< x 8) (cons \"Eight\"\
    \ (reverse (list x)))]\n              [(< x 7) (cons \"Seven\" (reverse (list\
    \ x)))]\n              [(< x 6) (cons \"Six\" (reverse (list x)))]\n         \
    \     [(< x 5) (cons \"Five\" (reverse (list x)))]\n              [(< x 4) (cons\
    \ \"Four\" (reverse (list x)))]\n              [(< x 3) (cons \"Three\" (reverse\
    \ (list x)))]\n              [(< x 2) (cons \"Two\" (reverse (list x)))]\n   \
    \           [(< x 1) (cons \"One\" (reverse (list x)))]\n              [(< x 0)\
    \ (cons \"Zero\" (reverse (list x)))]\n              [(> x 9) (cons \"Nine\" (reverse\
    \ (list x)))]\n              [(> x 8) (cons \"Eight\" (reverse (list x)))]\n \
    \             [(> x 7) (cons \"Seven\" (reverse (list x)))]\n              [(>\
    \ x 6) (cons \"Six\" (reverse (list x)))]\n              [(> x 5) (cons \"Five\"\
    \ (reverse (list x)))]\n              [(> x 4) (cons \"Four\" (reverse (list x)))]\n\
    \              [(> x 3) (cons \"Three\" (reverse (list x)))]\n              [(>\
    \ x 2) (cons \"Two\" (reverse (list x)))]\n              [(> x 1) (cons \"One\"\
    \ (reverse (list x)))]\n              [(> x 0) (cons \"Zero\" (reverse (list x)))]\n\
    \              [(< x 9) (cons \"Nine\" (reverse (list x)))]\n              [(<\
    \ x 8) (cons \"Eight\" (reverse (list x)))]\n              [(< x 7) (cons \"Seven\"\
    \ (reverse (list x)))]\n              [(< x 6) (cons \"Six\" (reverse (list x)))]",
  "  (if (empty? arr)\n      '()\n      (append (sort (filter #(<= (length %) 9) arr))\n\
    \              (reverse (sort (filter #(>= (length %) 1) arr))\n             \
    \          (map #(cond [(= (length %) 9) \"Nine\"]\n                         \
    \          [(= (length %) 1) \"One\"]\n                                   [(=\
    \ (length %) 2) \"Two\"]\n                                   [(= (length %) 3)\
    \ \"Three\"]\n                                   [(= (length %) 4) \"Four\"]\n\
    \                                   [(= (length %) 5) \"Five\"]\n            \
    \                       [(= (length %) 6) \"Six\"]\n                         \
    \          [(= (length %) 7) \"Seven\"]\n                                   [(=\
    \ (length %) 8) \"Eight\"]\n                                   [(= (length %)\
    \ 9) \"Nine\"]\n                                   [else (cond [(= (length %)\
    \ 1) \"One\"]\n                                             [(= (length %) 2)\
    \ \"Two\"]\n                                             [(= (length %) 3) \"\
    Three\"]\n                                             [(= (length %) 4) \"Four\"\
    ]\n                                             [(= (length %) 5) \"Five\"]\n\
    \                                             [(= (length %) 6) \"Six\"]\n   \
    \                                          [(= (length %) 7) \"Seven\"]\n    \
    \                                         [(= (length %) 8) \"Eight\"]\n     \
    \                                        [(= (length %) 9) \"Nine\"]\n       \
    \                                      [else (cond [(= (length %) 2) \"Two\"]\n\
    \                                                       [(= (length %) 3) \"Three\"\
    ]\n                                                       [(= (length %) 4) \"\
    Four\"]\n                                                       [(= (length %)\
    \ 5) \"Five\"]\n                                                       [(= (length\
    \ %) 6) \"Six\"]\n                                                       [(= (length\
    \ %) 7) \"Seven\"]\n                                                       [(=\
    \ (length %) 8) \"Eight\"]\n                                                 \
    \      [(= (length %) 9) \"Nine\"]\n                                         \
    \              [else (cond [(= (length %) 3) \"Three\"]\n                    \
    \                                            [(= (length %) 4) \"Four\"]\n   \
    \                                                             [(= (length %) 5)\
    \ \"Five\"]\n                                                                [(=\
    \ (length %) 6) \"Six\"]\n                                                   \
    \             [(= (length %) 7) \"Seven\"]\n                                 \
    \                               [(= (length %) 8) \"Eight\"]\n               \
    \                                                 [(= (length %) 9) \"Nine\"]\n\
    \                                                                [else (cond [(=\
    \ (length %) 4) \"Four\"]\n", "  (if (empty? arr)\n      '()\n      (append (reverse\n\
    \                 (sort arr\n                         (lambda (x y) (< (length\
    \ x) 9) (< (length y) 9))\n                         (lambda (x y) (= (length x)\
    \ 9) (= (length y) 9))\n                         (lambda (x y) (= (length x) 9)\
    \ (= (length y) 9))\n                         (lambda (x y) (= (length x) 9) (=\
    \ (length y) 9))\n                         (lambda (x y) (= (length x) 9) (= (length\
    \ y) 9))\n                         (lambda (x y) (= (length x) 9) (= (length y)\
    \ 9))\n                         (lambda (x y) (= (length x) 9) (= (length y) 9))\n\
    \                         (lambda (x y) (= (length x) 9) (= (length y) 9))\n \
    \                        (lambda (x y) (= (length x) 9) (= (length y) 9))\n  \
    \                       (lambda (x y) (= (length x) 9) (= (length y) 9))\n   \
    \                      (lambda (x y) (= (length x) 9) (= (length y) 9))\n    \
    \                     (lambda (x y) (= (length x) 9) (= (length y) 9))\n     \
    \                    (lambda (x y) (= (length x) 9) (= (length y) 9))\n      \
    \                   (lambda (x y) (= (length x) 9) (= (length y) 9))\n       \
    \                  (lambda (x y) (= (length x) 9) (= (length y) 9))\n        \
    \                 (lambda (x y) (= (length x) 9) (= (length y) 9))\n         \
    \                (lambda (x y) (= (length x) 9) (= (length y) 9))\n          \
    \               (lambda (x y) (= (length x) 9) (= (length y) 9))\n           \
    \              (lambda (x y) (= (length x) 9) (= (length y) 9))\n            \
    \             (lambda (x y) (= (length x) 9) (= (length y) 9))\n             \
    \            (lambda (x y) (= (length x) 9) (= (length y) 9))\n              \
    \           (lambda (x y) (= (length x) 9) (= (length y) 9))\n               \
    \          (lambda (x y) (= (length x) 9) (= (length y) 9))\n                \
    \         (lambda (x y) (= (length x) 9) (= (length y) 9))\n                 \
    \        (lambda (x y) (= (length x) 9) (= (length ", "  (if (empty? arr)\n  \
    \    '()\n      (append (sort (sub1 arr))\n              (reverse (sub1 arr))\n\
    \              (map (lambda (x) (cond [(< x 9) (cons \"Nine\" (reverse (sub1 x)))]\n\
    \                                     [(< x 8) (cons \"Eight\" (reverse (sub1\
    \ x)))]\n                                     [(< x 7) (cons \"Seven\" (reverse\
    \ (sub1 x)))]\n                                     [(< x 6) (cons \"Six\" (reverse\
    \ (sub1 x)))]\n                                     [(< x 5) (cons \"Five\" (reverse\
    \ (sub1 x)))]\n                                     [(< x 4) (cons \"Four\" (reverse\
    \ (sub1 x)))]\n                                     [(< x 3) (cons \"Three\" (reverse\
    \ (sub1 x)))]\n                                     [(< x 2) (cons \"Two\" (reverse\
    \ (sub1 x)))]\n                                     [(< x 1) (cons \"One\" (reverse\
    \ (sub1 x)))]\n                                     [(< x 0) (cons \"Zero\" (reverse\
    \ (sub1 x)))]\n                                     [else (cons \"Zero\" (reverse\
    \ (sub1 x)))])))\n              (cons (first arr) (cons (second arr) (cons (third\
    \ (arr)) (cons (fourth (arr)) (cons (fifth (arr)) (cons (sixth (arr)) (cons (seventh\
    \ (arr)) (cons (eighth (arr)) (cons (ninth (arr)) (cons (tenth (arr)) (cons (eleventh\
    \ (arr)) (cons (twelfth (arr)) (cons (thirteenth (arr)) (cons (fourteenth (arr))\
    \ (cons (fifteenth (arr)) (cons (sixteenth (arr)) (cons (seventeenth (arr)) (cons\
    \ (eighteenth (arr)) (cons (nineteenth (arr)) (cons (twentieth (arr)) (cons (twenty-first\
    \ (arr)) (cons (twenty-second (arr)) (cons (twenty-third (arr)) (cons (twenty-fourth\
    \ (arr)) (cons (twenty-fifth (arr)) (cons (twenty-sixth (arr)) (cons (twenty-seventh\
    \ (arr)) (cons (twenty-eighth (arr)) (cons (twenty-", "  (if (null? arr)\n   \
    \   '()\n      (append (sort (filter #(<= (length %) 9) (map number->string arr)))\
    \ \n              (reverse (sort (filter #(>= (length %) 1) (map number->string\
    \ arr))) \n              (map number->string arr))))\n", "  (if (null? arr)\n\
    \      '()\n      (append (sort (filter odd? (map length arr))) (reverse (sort\
    \ (filter even? (map length arr))))\n               (map (lambda (x) (cond [(<\
    \ x 9) (cons \"Nine\" (reverse (map length arr)))]\n                         \
    \              [(< x 8) (cons \"Eight\" (reverse (map length arr)))]\n       \
    \                                [(< x 7) (cons \"Seven\" (reverse (map length\
    \ arr)))]\n                                       [(< x 6) (cons \"Six\" (reverse\
    \ (map length arr)))]\n                                       [(< x 5) (cons \"\
    Five\" (reverse (map length arr)))]\n                                       [(<\
    \ x 4) (cons \"Four\" (reverse (map length arr)))]\n                         \
    \              [(< x 3) (cons \"Three\" (reverse (map length arr)))]\n       \
    \                                [(< x 2) (cons \"Two\" (reverse (map length arr)))]\n\
    \                                       [(< x 1) (cons \"One\" (reverse (map length\
    \ arr)))]\n                                       [else (cons \"Zero\" (reverse\
    \ (map length arr)))])))))\n", "  (if (null? arr)\n      '()\n      (append (sort\
    \ (map number->name arr))\n              (reverse (sort (map number->name arr))))))\n",
  "  (if (null? arr)\n      '()\n      (append (sort (filter odd? (map number? (filter\
    \ between? arr 1 9))))\n              (reverse (sort (filter even? (map number?\
    \ (filter between? arr 1 9))))\n              (map by_digit (map by_name arr))))))\n",
  "  (if (null? arr)\n      '()\n      (append (sort (filter #(< 1 (mod % 10)) arr))\n\
    \              (reverse (sort (filter #(>= 1 (mod % 10)) arr))\n             \
    \ (map (lambda (x) (cond ((= x 1) \"One\")\n                                 \
    \   ((= x 2) \"Two\")\n                                    ((= x 3) \"Three\"\
    )\n                                    ((= x 4) \"Four\")\n                  \
    \                  ((= x 5) \"Five\")\n                                    ((=\
    \ x 6) \"Six\")\n                                    ((= x 7) \"Seven\")\n   \
    \                                 ((= x 8) \"Eight\")\n                      \
    \              ((= x 9) \"Nine\")\n                                    (else \"\
    ???\")) arr))))\n", '  (sort arr (lambda (x y) (< (length x) 9) (< (length y)
    9))))', "  (if (null? arr)\n      '()\n      (append (sort (filter odd? (map length\
    \ arr))) (reverse (sort (filter even? (map length arr)))))\n  )\n)\n", "  (if\
    \ (null? arr)\n      '()\n      (append (sort (filter (lambda (x) (<= x 9)) arr))\n\
    \              (reverse (sort (filter (lambda (x) (not (<= x 9)) arr)))))\n  )\n\
    )\n", "  (sort arr (lambda (x y) (< (length x) (length y))))\n  (reverse arr)\n\
    \  (map (lambda (x) (cond ((= (length x) 1) \"One\")\n                       \
    \   ((= (length x) 2) \"Two\")\n                          ((= (length x) 3) \"\
    Three\")\n                          ((= (length x) 4) \"Four\")\n            \
    \              ((= (length x) 5) \"Five\")\n                          ((= (length\
    \ x) 6) \"Six\")\n                          ((= (length x) 7) \"Seven\")\n   \
    \                       ((= (length x) 8) \"Eight\")\n                       \
    \   ((= (length x) 9) \"Nine\")\n                          (else \"???\")) arr))\n",
  '  (sort arr (lambda (x y) (< (length x) 9) (< (length y) 9))))', "  (sort arr (lambda\
    \ (x) (<= (length x) 9)))\n  (sort (reverse arr) (lambda (x) (<= (length x) 9)))\n\
    \  (map (lambda (x) (cond [(= (length x) 9) (cons \"Nine\" x)]\n             \
    \              [(= (length x) 8) (cons \"Eight\" x)]\n                       \
    \    [(= (length x) 7) (cons \"Seven\" x)]\n                           [(= (length\
    \ x) 6) (cons \"Six\" x)]\n                           [(= (length x) 5) (cons\
    \ \"Five\" x)]\n                           [(= (length x) 4) (cons \"Four\" x)]\n\
    \                           [(= (length x) 3) (cons \"Three\" x)]\n          \
    \                 [(= (length x) 2) (cons \"Two\" x)]\n                      \
    \     [(= (length x) 1) (cons \"One\" x)]\n                           [else x]))\n\
    \        (sort arr (lambda (x) (<= (length x) 9))))\n</code>\n<|/ a tags=racket,scheme\
    \ |>\n<| c |>\nThis doesn't work. Try it with `arr = [1, -1, 55]`.\n<|/ c |>\n\
    <| c |>\n: I didn't notice that requirement. Fixed now.\n<|/ c |>\n<| a tags=racket,scheme\
    \ |>\nHere's a solution using Racket's built-in sort and map functions:\n<code>",
  "  (if (null? arr)\n      '()\n      (append (sort (sub1 arr))\n              (reverse\
    \ (sub1 arr))\n              (map #(cond [(< % 10) \"One\"]\n                \
    \          [(< % 10) \"Two\"]\n                          [(< % 10) \"Three\"]\n\
    \                          [(< % 10) \"Four\"]\n                          [(<\
    \ % 10) \"Five\"]\n                          [(< % 10) \"Six\"]\n            \
    \              [(< % 10) \"Seven\"]\n                          [(< % 10) \"Eight\"\
    ]\n                          [(< % 10) \"Nine\"]\n                          [(>\
    \ % 10) \"Ten\"]\n                          [(> % 10) \"Eleven\"]\n          \
    \                [(> % 10) \"Twelve\"]\n                          [(> % 10) \"\
    Thirteen\"]\n                          [(> % 10) \"Fourteen\"]\n             \
    \             [(> % 10) \"Fifteen\"]\n                          [(> % 10) \"Sixteen\"\
    ]\n                          [(> % 10) \"Seventeen\"]\n                      \
    \    [(> % 10) \"Eighteen\"]\n                          [(> % 10) \"Nineteen\"\
    ]\n                          [(= % 10) \"Twenty\"]\n                         \
    \ [(= % 10) \"Twenty-one\"]\n                          [(= % 10) \"Twenty-two\"\
    ]\n                          [(= % 10) \"Twenty-three\"]\n                   \
    \       [(= % 10) \"Twenty-four\"]\n                          [(= % 10) \"Twenty-five\"\
    ]\n                          [(= % 10) \"Twenty-six\"]\n                     \
    \     [(= % 10) \"Twenty-seven\"]\n                          [(= % 10) \"Twenty-eight\"\
    ]\n                          [(= % 10) \"Twenty-nine\"]\n                    \
    \      [(= % 10) \"Thirty\"]\n                          [(= % 10) \"Thirty-one\"\
    ]\n                          [(= % 10) \"Thirty-two\"]\n                     \
    \     [(= % 10) \"Thirty-three\"]\n                          [(= % 10) \"Thirty-four\"\
    ]\n                          [(= % 10) \"Thirty-five\"]\n                    \
    \      [(= % 10) \"Thirty-six\"]\n                          [(= % 10) \"Thirty-seven\"\
    ]\n                          [(= % 10) \"Thirty-eight\"]\n                   \
    \       [(= % 10) \"Thirty-nine\"]\n                          [(= % 10) \"Forty\"\
    ]\n                          [(= % 10) \"Forty-one\"]\n                      \
    \    [(= % 10) \"Forty-two\"]\n                          [(= % 10) \"Forty-three",
  "  (cond\n    [(empty? arr) empty]\n    [(number? (first arr)) (cons (by_length\
    \ (rest arr)) (cons (first arr) empty))]\n    [else (cons (by_length (rest arr))\
    \ (cons (first arr) empty))]\n  ))\n", "  (cond\n    [(empty? arr) empty]\n  \
    \  [(number? (first arr)) (cons (by_length_helper (rest arr) by_length_helper\
    \ (first arr)) empty)]\n    [else (cons (by_length_helper (rest arr) by_length_helper\
    \ (first arr)) (by_length_helper (rest arr) by_length_helper (first arr)))]))\n",
  "  (if (empty? arr)\n      '()\n      (append (sort (map number->name arr))\n  \
    \            (reverse (sort (map number->name arr)))))\n  )\n", "  (sort arr (lambda\
    \ (x) (<= (length x) 9)))\n  (sort (reverse arr) (lambda (x) (<= (length x) 9)))\n\
    \  (map (lambda (x) (if (= (length x) 9) (cons \"One\" x) x)) arr)\n)\n", "  (if\
    \ (null? arr)\n      '()\n      (append (sort (sub1 arr))\n              (reverse\
    \ (sub1 arr))\n              (map (lambda (x) (cond ((= x 1) \"One\")\n      \
    \                                ((= x 2) \"Two\")\n                         \
    \             ((= x 3) \"Three\")\n                                      ((= x\
    \ 4) \"Four\")\n                                      ((= x 5) \"Five\")\n   \
    \                                   ((= x 6) \"Six\")\n                      \
    \                ((= x 7) \"Seven\")\n                                      ((=\
    \ x 8) \"Eight\")\n                                      ((= x 9) \"Nine\")\n\
    \                                      (else \"???\"))))))\n", "  (if (null? arr)\n\
    \      '()\n      (append (sort (filter (lambda (x) (<= x 9)) arr))\n        \
    \      (reverse (sort (filter (lambda (x) (not (<= x 9)) arr)))))\n  )\n)\n",
  "  (if (null? arr)\n      '()\n      (append (sort (filter (lambda (x) (<= (length\
    \ x) 9)) arr))\n              (reverse (sort (filter (lambda (x) (not (<= (length\
    \ x) 9)) arr)))))\n  )\n)\n", "  (cond\n    [(empty? arr) empty]\n    [(= (length\
    \ arr) 1) (cons \"One\" empty)]\n    [(= (length arr) 2) (cons \"Two\" empty)]\n\
    \    [(= (length arr) 3) (cons \"Three\" empty)]\n    [(= (length arr) 4) (cons\
    \ \"Four\" empty)]\n    [(= (length arr) 5) (cons \"Five\" empty)]\n    [(= (length\
    \ arr) 6) (cons \"Six\" empty)]\n    [(= (length arr) 7) (cons \"Seven\" empty)]\n\
    \    [(= (length arr) 8) (cons \"Eight\" empty)]\n    [(= (length arr) 9) (cons\
    \ \"Nine\" empty)]\n    [else (cons (number->string (car arr)) (by_length (cdr\
    \ arr)))]))\n", "  (if (null? arr)\n      '()\n      (append (sort (filter #(<=\
    \ (length %) 9) (take arr (length arr))))\n              (reverse (sort (filter\
    \ #(>= (length %) 9) (take arr (length arr))))\n              (map #(cond ((<\
    \ % 9) \"One\")\n                          ((> % 9) \"Two\")\n               \
    \           ((= % 9) \"Three\")\n                          ((>= % 9) \"Four\"\
    )\n                          ((<= % 9) \"Five\")\n                          ((=\
    \ % 9) \"Six\")\n                          ((>= % 9) \"Seven\")\n            \
    \              ((<= % 9) \"Eight\")\n                          ((= % 9) \"Nine\"\
    )\n                          (else \"???\")) arr))))\n", "  (sort arr (lambda\
    \ (x) (<= x 9)))\n  (reverse arr)\n  (map #(cond [(= x 1) \"One\"]\n         \
    \    [(= x 2) \"Two\"]\n             [(= x 3) \"Three\"]\n             [(= x 4)\
    \ \"Four\"]\n             [(= x 5) \"Five\"]\n             [(= x 6) \"Six\"]\n\
    \             [(= x 7) \"Seven\"]\n             [(= x 8) \"Eight\"]\n        \
    \     [(= x 9) \"Nine\"]\n             [else (cond [(= x 0) \"Zero\"]\n      \
    \                   [else (cond [(= x 1) \"One\"]\n                          \
    \         [(= x 2) \"Two\"]\n                                   [(= x 3) \"Three\"\
    ]\n                                   [(= x 4) \"Four\"]\n                   \
    \                [(= x 5) \"Five\"]\n                                   [(= x\
    \ 6) \"Six\"]\n                                   [(= x 7) \"Seven\"]\n      \
    \                             [(= x 8) \"Eight\"]\n                          \
    \         [(= x 9) \"Nine\"]\n                                   [else (cond [(=\
    \ x 0) \"Zero\"]\n                                             [else (cond [(=\
    \ x 1) \"One\"]\n                                                       [(= x\
    \ 2) \"Two\"]\n                                                       [(= x 3)\
    \ \"Three\"]\n                                                       [(= x 4)\
    \ \"Four\"]\n                                                       [(= x 5) \"\
    Five\"]\n                                                       [(= x 6) \"Six\"\
    ]\n                                                       [(= x 7) \"Seven\"]\n\
    \                                                       [(= x 8) \"Eight\"]\n\
    \                                                       [(= x 9) \"Nine\"]\n \
    \                                                      [else (cond [(= x 0) \"\
    Zero\"]\n                                                                 [else\
    \ (cond [(= x 1) \"One\"]\n                                                  \
    \                         [(= x 2) \"Two\"]\n                                \
    \                                           [(= x 3) \"Three\"]\n            \
    \                                                               [(= x 4) \"Four\"\
    ]\n                                                                          \
    \ [(= x 5) \"Five\"]\n                                                       \
    \                    [(= x 6) \"Six\"]\n                                     \
    \                                      [(= x 7) \"Seven\"]\n                 \
    \                                                          [(= x 8) \"Eight\"\
    ]\n                                                                          \
    \ [(= x 9) \"Nine\"]\n                                                       \
    \                    [else \"???\")])])])])\n  ))\n", "  (if (empty? arr)\n  \
    \    '()\n      (append (sort (sub1 arr)) (reverse (sub1 arr)))))\n", "  (if (empty?\
    \ arr)\n      '()\n      (append (sort (filter (lambda (x) (<= x 9)) arr))\n \
    \             (reverse (sort (filter (lambda (x) (not (<= x 9)) arr)))))\n  )\n\
    )\n", "  (if (null? arr)\n      '()\n      (append (sort (filter #(<= (length\
    \ %) 9) arr))\n              (reverse (sort (filter #(>= (length %) 1) arr))\n\
    \                       (map #(cond [(= (length %) 9) \"Nine\"]\n            \
    \                       [(= (length %) 1) \"One\"]\n                         \
    \          [(= (length %) 2) \"Two\"]\n                                   [(=\
    \ (length %) 3) \"Three\"]\n                                   [(= (length %)\
    \ 4) \"Four\"]\n                                   [(= (length %) 5) \"Five\"\
    ]\n                                   [(= (length %) 6) \"Six\"]\n           \
    \                        [(= (length %) 7) \"Seven\"]\n                      \
    \             [(= (length %) 8) \"Eight\"]\n                                 \
    \  [(= (length %) 9) \"Nine\"]\n                                   [else (cond\
    \ [(= (length %) 1) \"One\"]\n                                             [(=\
    \ (length %) 2) \"Two\"]\n                                             [(= (length\
    \ %) 3) \"Three\"]\n                                             [(= (length %)\
    \ 4) \"Four\"]\n                                             [(= (length %) 5)\
    \ \"Five\"]\n                                             [(= (length %) 6) \"\
    Six\"]\n                                             [(= (length %) 7) \"Seven\"\
    ]\n                                             [(= (length %) 8) \"Eight\"]\n\
    \                                             [(= (length %) 9) \"Nine\"]\n  \
    \                                           [else (cond [(= (length %) 2) \"Two\"\
    ]\n                                                       [(= (length %) 3) \"\
    Three\"]\n                                                       [(= (length %)\
    \ 4) \"Four\"]\n                                                       [(= (length\
    \ %) 5) \"Five\"]\n                                                       [(=\
    \ (length %) 6) \"Six\"]\n                                                   \
    \    [(= (length %) 7) \"Seven\"]\n                                          \
    \             [(= (length %) 8) \"Eight\"]\n                                 \
    \                      [(= (length %) 9) \"Nine\"]\n                         \
    \                              [else (cond [(= (length %) 3) \"Three\"]\n    \
    \                                                            [(= (length %) 4)\
    \ \"Four\"]\n                                                                [(=\
    \ (length %) 5) \"Five\"]\n                                                  \
    \              [(= (length %) 6) \"Six\"]\n                                  \
    \                              [(= (length %) 7) \"Seven\"]\n                \
    \                                                [(= (length %) 8) \"Eight\"]\n\
    \                                                                [(= (length %)\
    \ 9) \"Nine\"]\n                                                             \
    \   [else (cond [(= (length %) 4) \"Four\"]\n", "  (if (null? arr)\n      '()\n\
    \      (append (sort (filter odd? (map length arr))) (reverse (sort (filter even?\
    \ (map length arr)))))\n  )\n)\n", "  (if (null? arr)\n      '()\n      (append\
    \ (sort (filter (lambda (x) (>= x 9) (< x 1))\n                           (reverse\
    \ arr))\n                   (map by_length \n                        (filter (lambda\
    \ (x) (= x 9)) \n                               (reverse arr))))))\n", "  (if\
    \ (empty? arr)\n      '()\n      (append (sort (filter #(<= (length %) 9) arr))\n\
    \              (reverse (filter #(<= (length %) 9) arr))\n              (map #(cond\
    \ [(<= (length %) 9) (cond [(= (length %) 9) (cond [(= (length %) 1) \"One\"]\n\
    \                                                                       [(= (length\
    \ %) 2) \"Two\"]\n                                                           \
    \            [(= (length %) 3) \"Three\"]\n                                  \
    \                                     [(= (length %) 4) \"Four\"]\n          \
    \                                                             [(= (length %) 5)\
    \ \"Five\"]\n                                                                \
    \       [(= (length %) 6) \"Six\"]\n                                         \
    \                              [(= (length %) 7) \"Seven\"]\n                \
    \                                                       [(= (length %) 8) \"Eight\"\
    ]\n                                                                       [(=\
    \ (length %) 9) \"Nine\"]\n                                                  \
    \                     [else (cond [(= (length %) 1) \"One\"]\n               \
    \                                                            [(= (length %) 2)\
    \ \"Two\"]\n                                                                 \
    \          [(= (length %) 3) \"Three\"]\n                                    \
    \                                       [(= (length %) 4) \"Four\"]\n        \
    \                                                                   [(= (length\
    \ %) 5) \"Five\"]\n                                                          \
    \                 [(= (length %) 6) \"Six\"]\n                               \
    \                                            [(= (length %) 7) \"Seven\"]\n  \
    \                                                                         [(=\
    \ (length %) 8) \"Eight\"]\n                                                 \
    \                          [(= (length %) 9) \"Nine\"]\n                     \
    \                                                      [else (cond [(= (length\
    \ %) 1) \"One\"]\n                                                           \
    \                        [(= (length %) 2) \"Two\"]\n                        \
    \                                                           [(= (length %) 3)\
    \ \"Three\"]\n                                                               \
    \                    [(= (length %) 4) \"Four\"]\n                           \
    \                                                        [(= (length %) 5) \"\
    Five\"]\n                                                                    \
    \               [(= (length %) 6) \"Six\"]\n                                 \
    \                                                  [(= (length %) 7) \"Seven\"\
    ]\n                                                                          \
    \         [(= (length %) 8) \"Eight\"]\n                                     \
    \                                              [(= (length %) 9) \"Nine\"]\n \
    \                                                                            \
    \      [else (cond [(= (length %) 1) \"One\"]\n                              \
    \                                                             [(= (length %) 2)\
    \ \"Two\"]\n                                                                 \
    \                          [(= (length %) 3) \"Three\"]\n                    \
    \                                                                       [(= (length\
    \ %) 4) \"Four\"]\n                                                          \
    \                                 [(= (length %) 5) \"", "  (if (null? arr)\n\
    \      '()\n      (append (sort (filter #(<= (length %) 9) (map number arr)))\
    \ \n              (reverse (sort (filter #(>= (length %) 9) (map number arr)))\
    \ \n               (map name arr))))\n", "  (if (empty? arr)\n      '()\n    \
    \  (append (sort (filter [number? number?] arr))\n              (reverse (filter\
    \ [number? number?] arr))\n              (map (lambda (x) (cond [(= (mod x 10)\
    \ 0) (cons (string->symbol (string->string x)) 'One)\n                       \
    \                   [(= (mod x 10) 1) (cons (string->symbol (string->string x))\
    \ 'Two)\n                                          [(= (mod x 10) 2) (cons (string->symbol\
    \ (string->string x)) 'Three)\n                                          [(= (mod\
    \ x 10) 3) (cons (string->symbol (string->string x)) 'Four)\n                \
    \                          [(= (mod x 10) 4) (cons (string->symbol (string->string\
    \ x)) 'Five)\n                                          [(= (mod x 10) 5) (cons\
    \ (string->symbol (string->string x)) 'Six)\n                                \
    \          [(= (mod x 10) 6) (cons (string->symbol (string->string x)) 'Seven)\n\
    \                                          [(= (mod x 10) 7) (cons (string->symbol\
    \ (string->string x)) 'Eight)\n                                          [(= (mod\
    \ x 10) 8) (cons (string->symbol (string->string x)) 'Nine)])))))\n", "  (if (empty?\
    \ arr)\n      '()\n      (let ([sorted (sort arr)])\n        (reverse sorted)\n\
    \        (map #(cond [(< % 9) 'One]\n                   [(< % 9) 'Two]\n     \
    \              [(< % 9) 'Three]\n                   [(< % 9) 'Four]\n        \
    \           [(< % 9) 'Five]\n                   [(< % 9) 'Six]\n             \
    \      [(< % 9) 'Seven]\n                   [(< % 9) 'Eight]\n               \
    \    [(< % 9) 'Nine]\n                   [(< % 9) 'Ten]\n                   [(<\
    \ % 9) 'Eleven]\n                   [(< % 9) 'Twelve]\n                   [(<\
    \ % 9) 'Thirteen]\n                   [(< % 9) 'Fourteen]\n                  \
    \ [(< % 9) 'Fifteen]\n                   [(< % 9) 'Sixteen]\n                \
    \   [(< % 9) 'Seventeen]\n                   [(< % 9) 'Eighteen]\n           \
    \        [(< % 9) 'Nineteen]\n                   [(< % 9) 'Twenty]\n         \
    \          [(< % 9) 'Twenty-one]\n                   [(< % 9) 'Twenty-two]\n \
    \                  [(< % 9) 'Twenty-three]\n                   [(< % 9) 'Twenty-four]\n\
    \                   [(< % 9) 'Twenty-five]\n                   [(< % 9) 'Twenty-six]\n\
    \                   [(< % 9) 'Twenty-seven]\n                   [(< % 9) 'Twenty-eight]\n\
    \                   [(< % 9) 'Twenty-nine]\n                   [(< % 9) 'Thirty]\n\
    \                   [(< % 9) 'Thirty-one]\n                   [(< % 9) 'Thirty-two]\n\
    \                   [(< % 9) 'Thirty-three]\n                   [(< % 9) 'Thirty-four]\n\
    \                   [(< % 9) 'Thirty-five]\n                   [(< % 9) 'Thirty-six]\n\
    \                   [(< % 9) 'Thirty-seven]\n                   [(< % 9) 'Thirty-eight]\n\
    \                   [(< % 9) 'Thirty-nine]\n                   [(< % 9) 'Forty]\n\
    \                   ", "  (if (null? arr)\n      '()\n      (append (sort (filter\
    \ #(<= (length %) 9) (map number arr))) (reverse (sort (filter #(>= (length %)\
    \ 1) (map number arr)))))\n  )\n)\n", "  (if (null? arr)\n      '()\n      (append\
    \ (sort (filter #(<= (length %) 9) (filter #(<= (length %) 1) arr))\n        \
    \           (reverse (sort (filter #(<= (length %) 9) (filter #(<= (length %)\
    \ 1) arr)))\n                   (map #(cond [(<= (length %) 9) \"One\"]\n    \
    \                           [(<= (length %) 1) \"Two\"]\n                    \
    \           [(<= (length %) 2) \"Three\"]\n                               [(<=\
    \ (length %) 3) \"Four\"]\n                               [(<= (length %) 4) \"\
    Five\"]\n                               [(<= (length %) 5) \"Six\"]\n        \
    \                       [(<= (length %) 6) \"Seven\"]\n                      \
    \         [(<= (length %) 7) \"Eight\"]\n                               [(<= (length\
    \ %) 8) \"Nine\"]\n                               [else (cond [(<= (length %)\
    \ 9) \"One\"]\n                                         [(<= (length %) 1) \"\
    Two\"]\n                                         [(<= (length %) 2) \"Three\"\
    ]\n                                         [(<= (length %) 3) \"Four\"]\n   \
    \                                      [(<= (length %) 4) \"Five\"]\n        \
    \                                 [(<= (length %) 5) \"Six\"]\n              \
    \                           [(<= (length %) 6) \"Seven\"]\n                  \
    \                       [(<= (length %) 7) \"Eight\"]\n                      \
    \                   [(<= (length %) 8) \"Nine\"]\n                           \
    \              [else (cond [(<= (length %) 9) \"One\"]\n                     \
    \                              [(<= (length %) 1) \"Two\"]\n                 \
    \                                  [(<= (length %) 2) \"Three\"]\n           \
    \                                        [(<= (length %) 3) \"Four\"]\n      \
    \                                             [(<= (length %) 4) \"Five\"]\n \
    \                                                  [(<= (length %) 5) \"Six\"\
    ]\n                                                   [(<= (length %) 6) \"Seven\"\
    ]\n                                                   [(<= (length %) 7) \"Eight\"\
    ]\n                                                   [(<= (length %) 8) \"Nine\"\
    ]\n                                                   [else \"Error\"])])\n  \
    \                 (by_length (filter #(<= (length %) 9) (filter #(<= (length %)\
    \ 1) arr))))))\n", "  (if (null? arr)\n      '()\n      (append (sort (filter\
    \ #(<= (length %) 9) arr))\n              (reverse (sort (filter #(>= (length\
    \ %) 1) arr))\n                       (map #(cond [(= (length %) 1) \"One\"]\n\
    \                                   [(= (length %) 2) \"Two\"]\n             \
    \                      [(= (length %) 3) \"Three\"]\n                        \
    \           [(= (length %) 4) \"Four\"]\n                                   [(=\
    \ (length %) 5) \"Five\"]\n                                   [(= (length %) 6)\
    \ \"Six\"]\n                                   [(= (length %) 7) \"Seven\"]\n\
    \                                   [(= (length %) 8) \"Eight\"]\n           \
    \                        [(= (length %) 9) \"Nine\"]\n                       \
    \            [else (cond [(= (length %) 1) (cond [(= (length %) 2) \"One\"]\n\
    \                                                                        [(= (length\
    \ %) 3) \"Two\"]\n                                                           \
    \             [(= (length %) 4) \"Three\"]\n                                 \
    \                                       [(= (length %) 5) \"Four\"]\n        \
    \                                                                [(= (length %)\
    \ 6) \"Five\"]\n                                                             \
    \           [(= (length %) 7) \"Six\"]\n                                     \
    \                                   [(= (length %) 8) \"Seven\"]\n           \
    \                                                             [(= (length %) 9)\
    \ \"Eight\"]\n                                                               \
    \         [else (cond [(= (length %) 2) \"Two\"]\n                           \
    \                                                       [(= (length %) 3) \"Three\"\
    ]\n                                                                          \
    \        [(= (length %) 4) \"Four\"]\n                                       \
    \                                           [(= (length %) 5) \"Five\"]\n    \
    \                                                                            \
    \  [(= (length %) 6) \"Six\"]\n                                              \
    \                                    [(= (length %) 7) \"Seven\"]\n          \
    \                                                                        [(= (length\
    \ %) 8) \"Eight\"]\n                                                         \
    \                         [(= (length %) 9) \"Nine\"]\n                      \
    \                                                            [else (cond [(= (length\
    \ %) 3) \"Three\"]\n                                                         \
    \                                   [(= (length %) 4) \"Four\"]\n            \
    \                                                                            \
    \    [(= (length %) 5) \"Five\"]\n                                           \
    \                                                 [(= (length %) 6) \"Six\"]\n\
    \                                                                            \
    \                [(= (length %) 7) \"Seven\"]\n                              \
    \                                                              [(= (length %)\
    \ 8) \"Eight\"]\n                                                            \
    \                                [(= (length %) 9) \"Nine\"]\n               \
    \                                                                            \
    \ [else (cond [(= (length ", "  (if (null? arr)\n      '()\n      (append (sort\
    \ (map number->name arr))\n              (reverse (sort (map number->name arr))))))\n",
  "  (if (null? arr)\n      '()\n      (append (sort (filter odd? (map number? (filter\
    \ between? arr 1 9))))\n              (reverse (sort (filter even? (map number?\
    \ (filter between? arr 1 9))))\n              (map by_digit (map by_name arr))))))\n",
  "  (if (null? arr)\n      '()\n      (append (sort (filter odd? (map number? (filter\
    \ between? arr 1 9)))))\n          (reverse (sort (filter even? (map number? (filter\
    \ between? arr 1 9)))))\n          (append (sort (filter odd? (map number? (filter\
    \ between? arr 1 9)))))\n          (reverse (sort (filter even? (map number? (filter\
    \ between? arr 1 9)))))\n          (append (sort (filter odd? (map number? (filter\
    \ between? arr 1 9)))))\n          (reverse (sort (filter even? (map number? (filter\
    \ between? arr 1 9)))))\n          (append (sort (filter odd? (map number? (filter\
    \ between? arr 1 9)))))\n          (reverse (sort (filter even? (map number? (filter\
    \ between? arr 1 9)))))\n          (append (sort (filter odd? (map number? (filter\
    \ between? arr 1 9)))))\n          (reverse (sort (filter even? (map number? (filter\
    \ between? arr 1 9)))))\n          (append (sort (filter odd? (map number? (filter\
    \ between? arr 1 9)))))\n          (reverse (sort (filter even? (map number? (filter\
    \ between? arr 1 9)))))\n          (append (sort (filter odd? (map number? (filter\
    \ between? arr 1 9)))))\n          (reverse (sort (filter even? (map number? (filter\
    \ between? arr 1 9)))))\n          (append (sort (filter odd? (map number? (filter\
    \ between? arr 1 9)))))\n          (reverse (sort (filter even? (map number? (filter\
    \ between? arr 1 9)))))\n          (append (sort (filter odd? (map number? (filter\
    \ between? arr 1 9)))))\n          (reverse (sort (filter even? (map number? (filter\
    \ between? arr 1 9)))))\n          (append (sort (filter odd? (map number? (filter\
    \ between? arr 1 9)))))\n          (reverse (sort (filter even? (map number? (filter\
    \ between? arr 1 9)))))\n          (append (sort (filter odd? (map number? (filter\
    \ between? arr 1 9)))))\n          (reverse (sort (filter even? (map number? (filter\
    \ between? arr 1 9)))))\n          (append (sort (filter odd? (map number? (filter\
    \ between? arr 1 9))", "  (if (null? arr)\n      '()\n      (append (sort (filter\
    \ odd? (map number? (filter between? arr 1 9))))\n              (reverse (sort\
    \ (filter even? (map number? (filter between? arr 1 9))))\n              (map\
    \ by_digit (map by_name arr))))))\n", "  (cond\n    [(empty? arr) empty]\n   \
    \ [(= (length arr) 1) (cons (car arr) (by_length (cdr arr)))]\n    [else (cons\
    \ (by_length (filter (lambda (x) (<= x 9)) (cdr arr)))\n              (by_length\
    \ (filter (lambda (x) (> x 9)) (cdr arr))))]))\n", "  (cond\n    [(empty? arr)\
    \ empty]\n    [(number? (car arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) empty))]\n    [else (by_length (cdr arr))]))\n", "  (if (null? arr)\n\
    \      '()\n      (append (sort (filter odd? (map number->string arr)))\n    \
    \          (reverse (sort (filter even? (map number->string arr))))\n        \
    \      (map string->number (map string->string '(\"One\" \"Two\" \"Three\" \"\
    Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\"))))))\n", "  (if (null? arr)\n\
    \      '()\n      (append (sort (filter #(<= (length %) 9) arr))\n           \
    \   (reverse (sort (filter #(>= (length %) 9) arr))\n                       (map\
    \ #(cond [(= (length %) 9) \"Nine\"]\n                                   [(= (length\
    \ %) 8) \"Eight\"]\n                                   [(= (length %) 7) \"Seven\"\
    ]\n                                   [(= (length %) 6) \"Six\"]\n           \
    \                        [(= (length %) 5) \"Five\"]\n                       \
    \            [(= (length %) 4) \"Four\"]\n                                   [(=\
    \ (length %) 3) \"Three\"]\n                                   [(= (length %)\
    \ 2) \"Two\"]\n                                   [(= (length %) 1) \"One\"]\n\
    \                                   [else (cond [(= (length %) 9) \"Nine\"]\n\
    \                                           [(= (length %) 8) \"Eight\"]\n   \
    \                                        [(= (length %) 7) \"Seven\"]\n      \
    \                                     [(= (length %) 6) \"Six\"]\n           \
    \                                [(= (length %) 5) \"Five\"]\n               \
    \                            [(= (length %) 4) \"Four\"]\n                   \
    \                        [(= (length %) 3) \"Three\"]\n                      \
    \                     [(= (length %) 2) \"Two\"]\n                           \
    \                [(= (length %) 1) \"One\"]\n                                \
    \           [else (cond [(= (length %) 9) \"Nine\"]\n                        \
    \                           [(= (length %) 8) \"Eight\"]\n                   \
    \                                [(= (length %) 7) \"Seven\"]\n              \
    \                                     [(= (length %) 6) \"Six\"]\n           \
    \                                        [(= (length %) 5) \"Five\"]\n       \
    \                                            [(= (length %) 4) \"Four\"]\n   \
    \                                                [(= (length %) 3) \"Three\"]\n\
    \                                                   [(= (length %) 2) \"Two\"\
    ]\n                                                   [(= (length %) 1) \"One\"\
    ]\n                                                   [else (cond [(= (length\
    \ %) 9) \"Nine\"]\n                                                          \
    \ [(= (length %) 8) \"Eight\"]\n                                             \
    \              [(= (length %) 7) \"Seven\"]\n                                \
    \                           [(= (length %) 6) \"Six\"]\n                     \
    \                                      [(= (length %) 5) \"Five\"]\n         \
    \                                                  [(= (length %) 4) \"Four\"\
    ]\n                                                           [(= (length %) 3)\
    \ \"Three\"]\n                                                           [(= (length\
    \ %) 2) \"Two\"]\n                                                           [(=\
    \ (length ", "  (sort arr (lambda (x y) (< (length x) (length y))))\n  (sort arr\
    \ (lambda (x y) (< (length x) (length y))))\n  (map #(cond [(< x 9) (cons \"Nine\"\
    \ (reverse (list x)))]\n             [(< x 8) (reverse (list x))]\n          \
    \   [(< x 7) (reverse (list x))]\n             [(< x 6) (reverse (list x))]\n\
    \             [(< x 5) (reverse (list x))]\n             [(< x 4) (reverse (list\
    \ x))]\n             [(< x 3) (reverse (list x))]\n             [(< x 2) (reverse\
    \ (list x))]\n             [(< x 1) (reverse (list x))]\n             [(< x 0)\
    \ (reverse (list x))]\n             [else (cons \"One\" (reverse (list x)))])))\n\
    </code>\n<|/ a |>\n<| a tags=racket,scheme |>\n<code>", "  (if (null? arr)\n \
    \     '()\n      (append (sort (filter odd? (map number? (filter between? arr\
    \ 1 9))))\n              (reverse (sort (filter even? (map number? (filter between?\
    \ arr 1 9))))\n              (map by_digit (map by_name arr))))))\n", "  (if (null?\
    \ arr)\n      '()\n      (append (sort (filter odd? (map number? (range 1 9)))\
    \ <)\n              (reverse (sort (filter even? (map number? (range 1 9))) >))\n\
    \              (map by_digit (map by_name arr))))) \n", "  (if (null? arr)\n \
    \     '()\n      (append (sort (filter odd? (map length arr))) (sort (reverse\
    \ (filter even? (map length arr)))))\n      (append (by_length (filter odd? (map\
    \ length arr))) (by_length (filter even? (map length arr)))))\n)\n", "  (if (null?\
    \ arr)\n      '()\n      (append (sort (filter (lambda (x) (<= x 9)) arr))\n \
    \             (reverse (sort (filter (lambda (x) (not (<= x 9)) arr)))))\n  )\n\
    )\n", "  (cond\n    [(empty? arr) empty]\n    [(= (length arr) 1) (cons \"One\"\
    \ arr)]\n    [(= (length arr) 2) (cons \"Two\" arr)]\n    [(= (length arr) 3)\
    \ (cons \"Three\" arr)]\n    [(= (length arr) 4) (cons \"Four\" arr)]\n    [(=\
    \ (length arr) 5) (cons \"Five\" arr)]\n    [(= (length arr) 6) (cons \"Six\"\
    \ arr)]\n    [(= (length arr) 7) (cons \"Seven\" arr)]\n    [(= (length arr) 8)\
    \ (cons \"Eight\" arr)]\n    [(= (length arr) 9) (cons \"Nine\" arr)]\n    [else\
    \ (cons (by_length (filter (lambda (x) (< x 9)) arr)) (cons (by_length (filter\
    \ (lambda (x) (> x 1)) arr)) (cons (by_length (filter (lambda (x) (= x 0)) arr))\
    \ (cons (by_length (filter (lambda (x) (= x 1)) arr)) (cons (by_length (filter\
    \ (lambda (x) (= x 2)) arr)) (cons (by_length (filter (lambda (x) (= x 3)) arr))\
    \ (cons (by_length (filter (lambda (x) (= x 4)) arr)) (cons (by_length (filter\
    \ (lambda (x) (= x 5)) arr)) (cons (by_length (filter (lambda (x) (= x 6)) arr))\
    \ (cons (by_length (filter (lambda (x) (= x 7)) arr)) (cons (by_length (filter\
    \ (lambda (x) (= x 8)) arr)) (cons (by_length (filter (lambda (x) (= x 9)) arr))\
    \ (cons (by_length (filter (lambda (x) (= x 10)) arr)) (cons (by_length (filter\
    \ (lambda (x) (= x 11)) arr)) (cons (by_length (filter (lambda (x) (= x 12)) arr))\
    \ (cons (by_length (filter (lambda (x) (= x 13)) arr)) (cons (by_length (filter\
    \ (lambda (x) (= x 14)) arr)) (cons (by_length (filter (lambda (x) (= x 15)) arr))\
    \ (cons (by_length (filter (lambda (x) (= x 16)) arr)) (cons (by_length (filter\
    \ (lambda (x) (= x 17)) arr)) (cons (by_length (filter (lambda (x) (= ", '  (sort
    arr (lambda (x y) (< (length x) 9) (< (length y) 9))))', "  (if (null? arr)\n\
    \      '()\n      (append (sort (filter #(<= (length %) 9) arr))\n           \
    \   (reverse (sort (filter #(>= (length %) 1) arr))\n                       (map\
    \ #(cond [(< % 10) \"One\"]\n                                   [(< % 10) \"Two\"\
    ]\n                                   [(< % 10) \"Three\"]\n                 \
    \                  [(< % 10) \"Four\"]\n                                   [(<\
    \ % 10) \"Five\"]\n                                   [(< % 10) \"Six\"]\n   \
    \                                [(< % 10) \"Seven\"]\n                      \
    \             [(< % 10) \"Eight\"]\n                                   [(< % 10)\
    \ \"Nine\"]\n                                   [else \"Other\"]) arr))))\n",
  "  (if (null? arr)\n      '()\n      (append (sort (filter #(< 1 (length %)) arr))\n\
    \              (reverse (sort (filter #(> 9 (length %)) arr))\n              (map\
    \ (lambda (x) (cond ((= (length x) 1) \"One\")\n                             \
    \           ((= (length x) 2) \"Two\")\n                                     \
    \   ((= (length x) 3) \"Three\")\n                                        ((=\
    \ (length x) 4) \"Four\")\n                                        ((= (length\
    \ x) 5) \"Five\")\n                                        ((= (length x) 6) \"\
    Six\")\n                                        ((= (length x) 7) \"Seven\")\n\
    \                                        ((= (length x) 8) \"Eight\")\n      \
    \                                  ((= (length x) 9) \"Nine\")\n             \
    \                           (else \"???\")) x))))\n", "  (sort arr (lambda (x\
    \ y) (< (length x) (length y)))\n         (lambda (x y) (> (length x) (length\
    \ y)))\n         (lambda (x y) (= (length x) (length y))))\n  (map #(cond ((<\
    \ x 9) (cons \"One\" x))\n              ((< x 8) (cons \"Two\" x))\n         \
    \     ((< x 7) (cons \"Three\" x))\n              ((< x 6) (cons \"Four\" x))\n\
    \              ((< x 5) (cons \"Five\" x))\n              ((< x 4) (cons \"Six\"\
    \ x))\n              ((< x 3) (cons \"Seven\" x))\n              ((< x 2) (cons\
    \ \"Eight\" x))\n              ((< x 1) (cons \"Nine\" x))\n              (else\
    \ (cons x (cons \"One\" x)))))\n  )\n", "  (sort arr (lambda (x) (<= (length x)\
    \ 9)))\n  (reverse arr)\n  (map (lambda (x) (cond ((<= (length x) 9) (cons (cons\
    \ x (cons \"One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\"\
    \ \"Nine\"))))\n                        ((<= (length x) 8) (cons (cons x (cons\
    \ \"Ten\" \"Eleven\" \"Twelve\" \"Thirteen\" \"Fourteen\" \"Fifteen\" \"Sixteen\"\
    \ \"Seventeen\" \"Eighteen\" \"Nineteen\"))))\n                        ((<= (length\
    \ x) 7) (cons (cons x (cons \"Twenty\" \"Thirty\" \"Forty\" \"Fifty\" \"Sixty\"\
    \ \"Seventy\" \"Eighty\" \"Ninety\"))))\n                        ((<= (length\
    \ x) 6) (cons (cons x (cons \"Thirty\" \"Forty\" \"Fifty\" \"Sixty\" \"Seventy\"\
    \ \"Eighty\" \"Ninety\"))))\n                        ((<= (length x) 5) (cons\
    \ (cons x (cons \"Forty\" \"Fifty\" \"Sixty\" \"Seventy\" \"Eighty\" \"Ninety\"\
    ))))\n                        ((<= (length x) 4) (cons (cons x (cons \"Fifty\"\
    \ \"Sixty\" \"Seventy\" \"Eighty\" \"Ninety\"))))\n                        ((<=\
    \ (length x) 3) (cons (cons x (cons \"Sixty\" \"Seventy\" \"Eighty\" \"Ninety\"\
    ))))\n                        ((<= (length x) 2) (cons (cons x (cons \"Seventy\"\
    \ \"Eighty\" \"Ninety\"))))\n                        ((<= (length x) 1) (cons\
    \ (cons x (cons \"Eighty\" \"Ninety\"))))\n                        (else (cons\
    \ x (cons \"Zero\"))))))\n</code>\n<|/ a tags=racket,scheme |>\n<| c |>\nThis\
    \ doesn't work. Try it with `(by-length [1 2 3 4 5 6 7 8 9])`.\n<|/ c |>\n<| c\
    \ |>\nI fixed the bug, thanks for pointing it out. Now it works.\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>", "  (if (null? arr)\n      '()\n      (append (sort (filter\
    \ (lambda (x) (<= x 9)) arr))\n              (reverse (sort (filter (lambda (x)\
    \ (not (<= x 9)) arr))))\n              (map (lambda (x) (cond [(= x 1) \"One\"\
    ]\n                                        [(= x 2) \"Two\"]\n               \
    \                         [(= x 3) \"Three\"]\n                              \
    \          [(= x 4) \"Four\"]\n                                        [(= x 5)\
    \ \"Five\"]\n                                        [(= x 6) \"Six\"]\n     \
    \                                   [(= x 7) \"Seven\"]\n                    \
    \                    [(= x 8) \"Eight\"]\n                                   \
    \     [(= x 9) \"Nine\"]\n                                        [else (cond\
    \ [(= x 0) \"Zero\"]\n                                                  [(= x\
    \ 1) \"One\"]\n                                                  [(= x 2) \"Two\"\
    ]\n                                                  [(= x 3) \"Three\"]\n   \
    \                                               [(= x 4) \"Four\"]\n         \
    \                                         [(= x 5) \"Five\"]\n               \
    \                                   [(= x 6) \"Six\"]\n                      \
    \                            [(= x 7) \"Seven\"]\n                           \
    \                       [(= x 8) \"Eight\"]\n                                \
    \                  [(= x 9) \"Nine\"]\n                                      \
    \            [else (cond [(= x 0) \"Zero\"]\n                                \
    \                            [(= x 1) \"One\"]\n                             \
    \                               [(= x 2) \"Two\"]\n                          \
    \                                  [(= x 3) \"Three\"]\n                     \
    \                                       [(= x 4) \"Four\"]\n                 \
    \                                           [(= x 5) \"Five\"]\n             \
    \                                               [(= x 6) \"Six\"]\n          \
    \                                                  [(= x 7) \"Seven\"]\n     \
    \                                                       [(= x 8) \"Eight\"]\n\
    \                                                            [(= x 9) \"Nine\"\
    ]\n                                                            [else (cond [(=\
    \ x 0) \"Zero\"]\n                                                           \
    \         [(= x 1) \"One\"]\n                                                \
    \                    [(= x 2) \"Two\"]\n                                     \
    \                               [(= x 3) \"Three\"]\n                        \
    \                                            [(= x 4) \"Four\"]\n            \
    \                                                        [(= x 5) \"Five\"]\n\
    \                                                                    [(= x 6)\
    \ \"Six\"]\n                                                                 \
    \   [(= x 7) \"Seven\"]\n                                                    \
    \                [(= x 8) \"Eight\"]\n                                       \
    \                             [(= x 9) \"Nine\"]\n                           \
    \                                         [else (cond [(= x 0) \"Zero\"]\n   \
    \                                                                           [(=\
    \ x 1) \"One\"]\n                                                            \
    \                  [(= x 2) \"Two\"]\n                                       \
    \                                       [(= x 3) \"Three\"]\n                \
    \                                                              [(= x 4) \"Four\"\
    ]\n                                                                          \
    \    [(= x 5) \"Fi", "  (if (empty? arr)\n      '()\n      (append (sort (filter\
    \ odd? (map number->string arr))) (reverse (sort (filter even? (map number->string\
    \ arr)))))\n  )\n)\n", "  (sort arr (lambda (x y) (<= (length x) (length y))))\n\
    \  (reverse arr)\n  (map #(cond [(< x 9) (cons \"One\" (reverse (substring \"\
    One\" 0 x)))]\n             [(< x 8) (cons \"Two\" (reverse (substring \"Two\"\
    \ 0 x)))]\n             [(< x 7) (cons \"Three\" (reverse (substring \"Three\"\
    \ 0 x)))]\n             [(< x 6) (cons \"Four\" (reverse (substring \"Four\" 0\
    \ x)))]\n             [(< x 5) (cons \"Five\" (reverse (substring \"Five\" 0 x)))]\n\
    \             [(< x 4) (cons \"Six\" (reverse (substring \"Six\" 0 x)))]\n   \
    \          [(< x 3) (cons \"Seven\" (reverse (substring \"Seven\" 0 x)))]\n  \
    \           [(< x 2) (cons \"Eight\" (reverse (substring \"Eight\" 0 x)))]\n \
    \            [(< x 1) (cons \"Nine\" (reverse (substring \"Nine\" 0 x)))]\n  \
    \           [(> x 9) (cons \"One\" (reverse (substring \"One\" 0 x)))]\n     \
    \        [(> x 8) (cons \"Two\" (reverse (substring \"Two\" 0 x)))]\n        \
    \     [(> x 7) (cons \"Three\" (reverse (substring \"Three\" 0 x)))]\n       \
    \      [(> x 6) (cons \"Four\" (reverse (substring \"Four\" 0 x)))]\n        \
    \     [(> x 5) (cons \"Five\" (reverse (substring \"Five\" 0 x)))]\n         \
    \    [(> x 4) (cons \"Six\" (reverse (substring \"Six\" 0 x)))]\n            \
    \ [(> x 3) (cons \"Seven\" (reverse (substring \"Seven\" 0 x)))]\n           \
    \  [(> x 2) (cons \"Eight\" (reverse (substring \"Eight\" 0 x)))]\n          \
    \   [(> x 1) (cons \"Nine\" (reverse (substring \"Nine\" 0 x)))]\n           \
    \  [else (cons \"Zero\" (reverse (substring \"Zero\" 0 x)))]))\n", "  (if (null?\
    \ arr)\n      '()\n      (append (sort (filter odd? (map length arr))) (reverse\
    \ (sort (filter even? (map length arr)))))\n  )\n)\n", "  (if (null? arr)\n  \
    \    '()\n      (append (sort (filter #(<= (length %) 9) (take arr (length arr))))\n\
    \              (reverse (sort (filter #(>= (length %) 1) (take arr (length arr))))\n\
    \              (map #(cond [(= (length %) 9) \"Nine\"]\n                     \
    \      [(= (length %) 8) \"Eight\"]\n                           [(= (length %)\
    \ 7) \"Seven\"]\n                           [(= (length %) 6) \"Six\"]\n     \
    \                      [(= (length %) 5) \"Five\"]\n                         \
    \  [(= (length %) 4) \"Four\"]\n                           [(= (length %) 3) \"\
    Three\"]\n                           [(= (length %) 2) \"Two\"]\n            \
    \               [(= (length %) 1) \"One\"]\n                           [else (cond\
    \ [(= (length %) 0) \"Zero\"]\n                                      [(= (length\
    \ %) 1) \"One\"]\n                                      [(= (length %) 2) \"Two\"\
    ]\n                                      [(= (length %) 3) \"Three\"]\n      \
    \                                [(= (length %) 4) \"Four\"]\n               \
    \                       [(= (length %) 5) \"Five\"]\n                        \
    \              [(= (length %) 6) \"Six\"]\n                                  \
    \    [(= (length %) 7) \"Seven\"]\n                                      [(= (length\
    \ %) 8) \"Eight\"]\n                                      [(= (length %) 9) \"\
    Nine\"]\n                                      [else (cond [(= (length %) 0) \"\
    Zero\"]\n                                                [(= (length %) 1) \"\
    One\"]\n                                                [(= (length %) 2) \"Two\"\
    ]\n                                                [(= (length %) 3) \"Three\"\
    ]\n                                                [(= (length %) 4) \"Four\"\
    ]\n                                                [(= (length %) 5) \"Five\"\
    ]\n                                                [(= (length %) 6) \"Six\"]\n\
    \                                                [(= (length %) 7) \"Seven\"]\n\
    \                                                [(= (length %) 8) \"Eight\"]\n\
    \                                                [(= (length %) 9) \"Nine\"]\n\
    \                                                [else (cond [(= (length %) 0)\
    \ \"Zero\"]\n                                                          [(= (length\
    \ %) 1) \"One\"]\n                                                          [(=\
    \ (length %) 2) \"Two\"]\n                                                   \
    \       [(= (length %) 3) \"Three\"]\n                                       \
    \                   [(= (length %) 4) \"Four\"]\n                            \
    \                              [(= (length %) 5) \"Five\"]\n                 \
    \                                         ", "  (if (null? arr)\n      '()\n \
    \     (append (sort (filter #(<= (length %) 9) (filter #(<= (length %) 1) arr))\n\
    \                   (reverse (sort (filter #(<= (length %) 9) (filter #(<= (length\
    \ %) 1) arr)))\n                   (map #(cond [(<= (length %) 9) \"One\"]\n \
    \                              [(<= (length %) 1) \"Two\"]\n                 \
    \              [(<= (length %) 2) \"Three\"]\n                               [(<=\
    \ (length %) 3) \"Four\"]\n                               [(<= (length %) 4) \"\
    Five\"]\n                               [(<= (length %) 5) \"Six\"]\n        \
    \                       [(<= (length %) 6) \"Seven\"]\n                      \
    \         [(<= (length %) 7) \"Eight\"]\n                               [(<= (length\
    \ %) 8) \"Nine\"]\n                               [(<= (length %) 9) \"Ten\"]\n\
    \                               [(<= (length %) 10) \"Eleven\"]\n            \
    \                   [(<= (length %) 11) \"Twelve\"]\n                        \
    \       [(<= (length %) 12) \"Thirteen\"]\n                               [(<=\
    \ (length %) 13) \"Fourteen\"]\n                               [(<= (length %)\
    \ 14) \"Fifteen\"]\n                               [(<= (length %) 15) \"Sixteen\"\
    ]\n                               [(<= (length %) 16) \"Seventeen\"]\n       \
    \                        [(<= (length %) 17) \"Eighteen\"]\n                 \
    \              [(<= (length %) 18) \"Nineteen\"]\n                           \
    \    [(<= (length %) 19) \"Twenty\"]\n                               [(<= (length\
    \ %) 20) \"Twenty One\"]\n                               [(<= (length %) 21) \"\
    Twenty Two\"]\n                               [(<= (length %) 22) \"Twenty Three\"\
    ]\n                               [(<= (length %) 23) \"Twenty Four\"]\n     \
    \                          [(<= (length %) 24) \"Twenty Five\"]\n            \
    \                   [(<= (length %) 25) \"Twenty Six\"]\n                    \
    \           [(<= (length %) 26) \"Twenty Seven\"]\n                          \
    \     [(<= (length %) 27) \"Twenty Eight\"]\n                               [(<=\
    \ (length %) 28) \"Twenty Nine\"]\n                               [(<= (length\
    \ %) 29) \"Thirty\"]\n                               [(<= (length %) 30) \"Thirty\
    \ One\"]\n                               [(<= (length %) 31) \"Thirty Two", " \
    \ (if (null? arr)\n      '()\n      (append (sort (filter odd? (map number->string\
    \ arr))) (reverse (sort (filter even? (map number->string arr)))))\n  )\n)\n",
  "  (if (null? arr)\n      '()\n      (append (sort (filter odd? (map length arr)))\
    \ (reverse (sort (filter even? (map length arr)))))\n  )\n)\n", "  (if (null?\
    \ arr)\n      '()\n      (append (sort (filter odd? (map number? (filter between?\
    \ arr 1 9)))))\n          (reverse (sort (filter odd? (map number? (filter between?\
    \ arr 1 9)))))\n          (append (sort (filter odd? (map number? (filter between?\
    \ arr 1 9)))))\n          (reverse (sort (filter odd? (map number? (filter between?\
    \ arr 1 9)))))\n          (append (sort (filter odd? (map number? (filter between?\
    \ arr 1 9)))))\n          (reverse (sort (filter odd? (map number? (filter between?\
    \ arr 1 9)))))\n          (append (sort (filter odd? (map number? (filter between?\
    \ arr 1 9)))))\n          (reverse (sort (filter odd? (map number? (filter between?\
    \ arr 1 9)))))\n          (append (sort (filter odd? (map number? (filter between?\
    \ arr 1 9)))))\n          (reverse (sort (filter odd? (map number? (filter between?\
    \ arr 1 9)))))\n          (append (sort (filter odd? (map number? (filter between?\
    \ arr 1 9)))))\n          (reverse (sort (filter odd? (map number? (filter between?\
    \ arr 1 9)))))\n          (append (sort (filter odd? (map number? (filter between?\
    \ arr 1 9)))))\n          (reverse (sort (filter odd? (map number? (filter between?\
    \ arr 1 9)))))\n          (append (sort (filter odd? (map number? (filter between?\
    \ arr 1 9)))))\n          (reverse (sort (filter odd? (map number? (filter between?\
    \ arr 1 9)))))\n          (append (sort (filter odd? (map number? (filter between?\
    \ arr 1 9)))))\n          (reverse (sort (filter odd? (map number? (filter between?\
    \ arr 1 9)))))\n          (append (sort (filter odd? (map number? (filter between?\
    \ arr 1 9)))))\n          (reverse (sort (filter odd? (map number? (filter between?\
    \ arr 1 9)))))\n          (append (sort (filter odd? (map number? (filter between?\
    \ arr 1 9)))))\n          (reverse (sort (filter odd? (map number? (filter between?\
    \ arr 1 9)))))\n          (append (sort (filter odd? (map number? (filter between?\
    \ arr 1 9))", "  (if (null? arr)\n      '()\n      (append (sort (filter odd?\
    \ (map length arr))) (sort (filter even? (map length arr))) (reverse (map name\
    \ arr)))))\n", "  (if (null? arr)\n      '()\n      (append (sort (filter #(<=\
    \ (length %) 9) (take arr (length arr))))\n              (reverse (filter #(<=\
    \ (length %) 9) (take arr (length arr))))\n              (map #(cond ((<= (length\
    \ %) 9) (cons \"One\" %))\n                        ((<= (length %) 9) (cons \"\
    Two\" %))\n                        ((<= (length %) 9) (cons \"Three\" %))\n  \
    \                      ((<= (length %) 9) (cons \"Four\" %))\n               \
    \         ((<= (length %) 9) (cons \"Five\" %))\n                        ((<=\
    \ (length %) 9) (cons \"Six\" %))\n                        ((<= (length %) 9)\
    \ (cons \"Seven\" %))\n                        ((<= (length %) 9) (cons \"Eight\"\
    \ %))\n                        ((<= (length %) 9) (cons \"Nine\" %))\n       \
    \                 (else (cons \"?\" %)))))\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0\
    \ |>\n<code>", "  (if (null? arr)\n      '()\n      (append (sort (filter #(<\
    \ 1 (length %)) arr))\n              (reverse (sort (filter #(> 1 (length %))\
    \ arr))\n              (map (lambda (x) (cond ((= (length x) 9) \"Nine\")\n  \
    \                                    ((= (length x) 8) \"Eight\")\n          \
    \                            ((= (length x) 7) \"Seven\")\n                  \
    \                    ((= (length x) 6) \"Six\")\n                            \
    \          ((= (length x) 5) \"Five\")\n                                     \
    \ ((= (length x) 4) \"Four\")\n                                      ((= (length\
    \ x) 3) \"Three\")\n                                      ((= (length x) 2) \"\
    Two\")\n                                      ((= (length x) 1) \"One\")\n   \
    \                                   (else \"???\")) arr))))\n", '  (sort arr (lambda
    (x y) (< (length x) 9) (< (length y) 9))))', "  (cond\n    [(empty? arr) empty]\n\
    \    [(number? (car arr)) (cons (by_length arr) (sort (reverse arr)))]\n    [else\
    \ (by_length (cdr arr))]))\n", "  (if (null? arr)\n      '()\n      (append (reverse\
    \ (sort arr))\n              (map (lambda (x y) (cond [(< x 9) (cons \"Nine\"\
    \ (reverse (cons x (reverse (cons y '()))))])\n                              \
    \  [(< x 9) (cons \"Nine\" (reverse (cons x (reverse (cons y '())))) ])\n    \
    \                            [(< x 9) (cons \"Nine\" (reverse (cons x (reverse\
    \ (cons y '())))) ])\n                                [(< x 9) (cons \"Nine\"\
    \ (reverse (cons x (reverse (cons y '())))) ])\n                             \
    \   [(< x 9) (cons \"Nine\" (reverse (cons x (reverse (cons y '())))) ])\n   \
    \                             [(< x 9) (cons \"Nine\" (reverse (cons x (reverse\
    \ (cons y '())))) ])\n                                [(< x 9) (cons \"Nine\"\
    \ (reverse (cons x (reverse (cons y '())))) ])\n                             \
    \   [(< x 9) (cons \"Nine\" (reverse (cons x (reverse (cons y '())))) ])\n   \
    \                             [(< x 9) (cons \"Nine\" (reverse (cons x (reverse\
    \ (cons y '())))) ])\n                                [(< x 9) (cons \"Nine\"\
    \ (reverse (cons x (reverse (cons y '())))) ])\n                             \
    \   [(< x 9) (cons \"Nine\" (reverse (cons x (reverse (cons y '())))) ])\n   \
    \                             [(< x 9) (cons \"Nine\" (reverse (cons x (reverse\
    \ (cons y '())))) ])\n                                [(< x 9) (cons \"Nine\"\
    \ (reverse (cons x (reverse (cons y '())))) ])\n                             \
    \   [(< x 9) (cons \"Nine\" (reverse (cons x (reverse (cons y '())))) ])\n   \
    \                             [(< x 9) (cons \"Nine\" (reverse (cons x (reverse\
    \ (cons y '())))) ])\n                                [(< x 9) (cons \"Nine\"\
    \ (reverse (cons x (reverse (cons y '())))) ])\n                             \
    \   [(< x 9) (cons \"Nine\" (reverse (cons x (reverse (con", "  (if (null? arr)\n\
    \      '()\n      (append (sort (filter odd? (map number? (filter between? arr\
    \ 1 9))))\n              (reverse (sort (filter even? (map number? (filter between?\
    \ arr 1 9))))\n              (map by_digit (map by_name arr)))))\n", "  (sort\
    \ arr (lambda (x) (<= (length x) 9)))\n  (sort (reverse arr) (lambda (x) (<= (length\
    \ x) 9)))\n  (map (lambda (x) (cond [(= (length x) 9) 'One]\n                \
    \           [(= (length x) 8) 'Two]\n                           [(= (length x)\
    \ 7) 'Three]\n                           [(= (length x) 6) 'Four]\n          \
    \                 [(= (length x) 5) 'Five]\n                           [(= (length\
    \ x) 4) 'Six]\n                           [(= (length x) 3) 'Seven]\n        \
    \                   [(= (length x) 2) 'Eight]\n                           [(=\
    \ (length x) 1) 'Nine]\n                           [else x]))\n        arr))\n",
  "  (if (null? arr)\n      '()\n      (append (sort (filter #(<= (length %) 9) (filter\
    \ #(<= (length %) 1) arr))\n                    (lambda (x) (- x 9))\n       \
    \             (lambda (x) (- x 1))\n                    (lambda (x) (- x 1))\n\
    \                    (lambda (x) (- x 1))\n                    (lambda (x) (-\
    \ x 1))\n                    (lambda (x) (- x 1))\n                    (lambda\
    \ (x) (- x 1))\n                    (lambda (x) (- x 1))\n                   \
    \ (lambda (x) (- x 1))\n                    (lambda (x) (- x 1))\n           \
    \         (lambda (x) (- x 1))\n                    (lambda (x) (- x 1))\n   \
    \                 (lambda (x) (- x 1))\n                    (lambda (x) (- x 1))\n\
    \                    (lambda (x) (- x 1))\n                    (lambda (x) (-\
    \ x 1))\n                    (lambda (x) (- x 1))\n                    (lambda\
    \ (x) (- x 1))\n                    (lambda (x) (- x 1))\n                   \
    \ (lambda (x) (- x 1))\n                    (lambda (x) (- x 1))\n           \
    \         (lambda (x) (- x 1))\n                    (lambda (x) (- x 1))\n   \
    \                 (lambda (x) (- x 1))\n                    (lambda (x) (- x 1))\n\
    \                    (lambda (x) (- x 1))\n                    (lambda (x) (-\
    \ x 1))\n                    (lambda (x) (- x 1))\n                    (lambda\
    \ (x) (- x 1))\n                    (lambda (x) (- x 1))\n                   \
    \ (lambda (x) (- x 1))\n                    (lambda (x) (- x 1))\n           \
    \         (lambda (x) (- x 1))\n                    (lambda (x) (- x 1))\n   \
    \                 (lambda (x) (- x 1))\n                    (lambda (x) (- x 1))\n\
    \                    (lambda (x) (- x 1))\n                    (lambda (x) (-\
    \ x 1))\n                    (lambda (x) (- x 1))\n                    (lambda\
    \ (x) (- x 1))\n                    (lambda (x) (- x 1))\n                   \
    \ (lambda (x) (- x 1))\n                    (lambda (x) (- x 1))\n           \
    \         (lambda (x) (- x 1))\n                    (lambda (x) (- x 1))\n   \
    \                 (lambda (x) (- x 1))\n                    (lambda (x) (- x 1))\n\
    \                    (lambda (x) (- x 1))\n                    (lambda (x) (-\
    \ x 1))\n                    (lambda (x) (- x 1))\n                    (lambda\
    \ (x) (- x 1))\n                    (lambda (x) (- x 1))\n                   \
    \ (lambda (x) (- x 1))\n                    (lambda (x) (- x 1))\n           \
    \         (lambda (x) (- x 1))\n                    (lambda (x) (- x 1))\n   \
    \                 (lambda (x) (- x 1))\n                    (lambda (x) (- x 1))\n\
    \                    (lambda (x) (- x 1))\n                    (lambda (x", " \
    \ (if (empty? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (cons (by_length (cdr arr))\n                  (by_length (cdr\
    \ arr)))\n            (cons (by_name (head (cdr arr)))\n                  (by_length\
    \ (cdr arr)))))))\n", "  (sort arr (lambda (x) (< (length x) 9)))\n  (reverse\
    \ arr)\n  (map (lambda (x) (cond [(= (length x) 9) (cons \"Nine\" x)]\n      \
    \                   [(= (length x) 8) (cons \"Eight\" x)]\n                  \
    \       [(= (length x) 7) (cons \"Seven\" x)]\n                         [(= (length\
    \ x) 6) (cons \"Six\" x)]\n                         [(= (length x) 5) (cons \"\
    Five\" x)]\n                         [(= (length x) 4) (cons \"Four\" x)]\n  \
    \                       [(= (length x) 3) (cons \"Three\" x)]\n              \
    \           [(= (length x) 2) (cons \"Two\" x)]\n                         [(=\
    \ (length x) 1) (cons \"One\" x)]\n                         [else x]))))\n", " \
    \ (if (null? arr)\n      '()\n      (append (sort (filter #(<= (length %) 9) (take\
    \ arr (length arr))))\n              (reverse (sort (filter #(>= (length %) 1)\
    \ (take arr (length arr))))\n              (map #(cond [(= (length %) 9) \"Nine\"\
    ]\n                          [(= (length %) 8) \"Eight\"]\n                  \
    \        [(= (length %) 7) \"Seven\"]\n                          [(= (length %)\
    \ 6) \"Six\"]\n                          [(= (length %) 5) \"Five\"]\n       \
    \                   [(= (length %) 4) \"Four\"]\n                          [(=\
    \ (length %) 3) \"Three\"]\n                          [(= (length %) 2) \"Two\"\
    ]\n                          [(= (length %) 1) \"One\"]\n                    \
    \      [(= (length %) 0) \"\"]\n                          [else (take arr (length\
    \ arr))])))))\n", "  (if (null? arr)\n      '()\n      (append (sort (filter odd?\
    \ (map number? (range 1 9)))) (reverse (sort (filter even? (map number? (range\
    \ 1 9))))) (map by_length (map string->number (map string->string arr))))))\n",
  "  (if (null? arr)\n      '()\n      (append (sort (filter #(<= (length %) 9) arr))\n\
    \              (reverse (sort (filter #(> length %) arr))\n                  \
    \     (map (lambda (x) (cond [(= (length x) 9) \"Nine\"]\n                   \
    \                           [(= (length x) 8) \"Eight\"]\n                   \
    \                           [(= (length x) 7) \"Seven\"]\n                   \
    \                           [(= (length x) 6) \"Six\"]\n                     \
    \                         [(= (length x) 5) \"Five\"]\n                      \
    \                        [(= (length x) 4) \"Four\"]\n                       \
    \                       [(= (length x) 3) \"Three\"]\n                       \
    \                       [(= (length x) 2) \"Two\"]\n                         \
    \                     [(= (length x) 1) \"One\"]\n                           \
    \                   [else \"???\"])\n                       (sort (filter #(<\
    \ length %) arr))))))\n", "  (if (null? arr)\n      '()\n      (append (sort (filter\
    \ odd? (map number? (filter between? arr 1 9)))))\n              (reverse (sort\
    \ (filter even? (map number? (filter between? arr 1 9)))))\n              (map\
    \ by_length (filter odd? (map number? (filter between? arr 1 9)))))\n  )\n", " \
    \ (sort arr (lambda (x y) (< (length x) (length y))))\n  (sort arr (lambda (x\
    \ y) (> (length x) (length y))))\n  (map #(cond [(< x 9) (cons \"One\" (reverse\
    \ (list x)))]\n             [(< x 8) (cons \"Two\" (reverse (list x)))]\n    \
    \         [(< x 7) (cons \"Three\" (reverse (list x)))]\n             [(< x 6)\
    \ (cons \"Four\" (reverse (list x)))]\n             [(< x 5) (cons \"Five\" (reverse\
    \ (list x)))]\n             [(< x 4) (cons \"Six\" (reverse (list x)))]\n    \
    \         [(< x 3) (cons \"Seven\" (reverse (list x)))]\n             [(< x 2)\
    \ (cons \"Eight\" (reverse (list x)))]\n             [(< x 1) (cons \"Nine\" (reverse\
    \ (list x)))]\n             [else (cons \"Zero\" (reverse (list x)))]))\n)\n",
  "  (if (null? arr)\n      '()\n      (append (sort (filter #(< 1 (mod % 10)) arr))\n\
    \              (reverse (sort (filter #(>= 1 (mod % 10)) arr))\n             \
    \ (map #(cond [(< 1 (mod % 10)) \"One\"]\n                          [(>= 1 (mod\
    \ % 10)) \"Two\"]\n                          [(>= 2 (mod % 10)) \"Three\"]\n \
    \                         [(>= 3 (mod % 10)) \"Four\"]\n                     \
    \     [(>= 4 (mod % 10)) \"Five\"]\n                          [(>= 5 (mod % 10))\
    \ \"Six\"]\n                          [(>= 6 (mod % 10)) \"Seven\"]\n        \
    \                  [(>= 7 (mod % 10)) \"Eight\"]\n                          [(>=\
    \ 8 (mod % 10)) \"Nine\"]\n                          [(>= 9 (mod % 10)) \"Ten\"\
    ]\n                          [(>= 10 (mod % 10)) \"Eleven\"]\n               \
    \           [(>= 11 (mod % 10)) \"Twelve\"]\n                          [(>= 12\
    \ (mod % 10)) \"Thirteen\"]\n                          [(>= 13 (mod % 10)) \"\
    Fourteen\"]\n                          [(>= 14 (mod % 10)) \"Fifteen\"]\n    \
    \                      [(>= 15 (mod % 10)) \"Sixteen\"]\n                    \
    \      [(>= 16 (mod % 10)) \"Seventeen\"]\n                          [(>= 17 (mod\
    \ % 10)) \"Eighteen\"]\n                          [(>= 18 (mod % 10)) \"Nineteen\"\
    ]\n                          [(>= 19 (mod % 10)) \"Twenty\"]\n               \
    \           [(>= 20 (mod % 10)) \"Twenty One\"]\n                          [(>=\
    \ 21 (mod % 10)) \"Twenty Two\"]\n                          [(>= 22 (mod % 10))\
    \ \"Twenty Three\"]\n                          [(>= 23 (mod % 10)) \"Twenty Four\"\
    ]\n                          [(>= 24 (mod % 10)) \"Twenty Five\"]\n          \
    \                [(>= 25 (mod % 10)) \"Twenty Six\"]\n                       \
    \   [(>= 26 (mod % 10)) \"Twenty Seven\"]\n                          [(>= 27 (mod\
    \ % 10)) \"Twenty Eight\"]\n                          [(>= 28 (mod % 10)) \"Twenty\
    \ Nine\"]\n                          [(>= 29 (mod % 10)) \"Thirty\"]\n       \
    \                   [(>= 30 (mod % 10)) \"Thirty One\"]\n                    \
    \      [(>= 31 (mod ", "  (if (null? arr)\n      '()\n      (append (sort (filter\
    \ odd? (map number? (filter between? arr 1 9))))\n              (reverse (sort\
    \ (filter even? (map number? (filter between? arr 1 9))))\n              (map\
    \ name arr))))\n", "  (if (null? arr)\n      '()\n      (append (sort (filter\
    \ #(<= (length %) 9) arr))\n              (reverse (sort (filter #(>= (length\
    \ %) 1) arr))\n                       (map #(cond [(= (length %) 9) \"Nine\"]\n\
    \                                   [(= (length %) 1) \"One\"]\n             \
    \                      [(= (length %) 2) \"Two\"]\n                          \
    \         [(= (length %) 3) \"Three\"]\n                                   [(=\
    \ (length %) 4) \"Four\"]\n                                   [(= (length %) 5)\
    \ \"Five\"]\n                                   [(= (length %) 6) \"Six\"]\n \
    \                                  [(= (length %) 7) \"Seven\"]\n            \
    \                       [(= (length %) 8) \"Eight\"]\n                       \
    \            [(= (length %) 9) \"Nine\"]\n                                   [else\
    \ (cond [(= (length %) 1) \"One\"]\n                                         \
    \    [(= (length %) 2) \"Two\"]\n                                            \
    \ [(= (length %) 3) \"Three\"]\n                                             [(=\
    \ (length %) 4) \"Four\"]\n                                             [(= (length\
    \ %) 5) \"Five\"]\n                                             [(= (length %)\
    \ 6) \"Six\"]\n                                             [(= (length %) 7)\
    \ \"Seven\"]\n                                             [(= (length %) 8) \"\
    Eight\"]\n                                             [(= (length %) 9) \"Nine\"\
    ]\n                                             [else (cond [(= (length %) 1)\
    \ \"One\"]\n                                                       [(= (length\
    \ %) 2) \"Two\"]\n                                                       [(= (length\
    \ %) 3) \"Three\"]\n                                                       [(=\
    \ (length %) 4) \"Four\"]\n                                                  \
    \     [(= (length %) 5) \"Five\"]\n                                          \
    \             [(= (length %) 6) \"Six\"]\n                                   \
    \                    [(= (length %) 7) \"Seven\"]\n                          \
    \                             [(= (length %) 8) \"Eight\"]\n                 \
    \                                      [(= (length %) 9) \"Nine\"]\n         \
    \                                              [else (cond [(= (length %) 1) \"\
    One\"]\n                                                                [(= (length\
    \ %) 2) \"Two\"]\n                                                           \
    \     [(= (length %) 3) \"Three\"]\n                                         \
    \                       [(= (length %) 4) \"Four\"]\n                        \
    \                                        [(= (length %) 5) \"Five\"]\n       \
    \                                                         [(= (length %) 6) \"\
    Six\"]\n                                                                [(= (length\
    \ %) 7) \"Seven\"]\n                                                         \
    \       [(= (length %) ", "  (if (empty? arr)\n      '()\n      (append (sort\
    \ (filter odd? (map number? (filter between? arr 1 9))))\n              (reverse\
    \ (sort (filter even? (map number? (filter between? arr 1 9))))\n            \
    \  (map by_digit (map by_name arr))))))\n", "  (if (null? arr)\n      '()\n  \
    \    (append (sort (filter odd? (map number? (range 1 9))) <)\n              (reverse\
    \ (sort (filter even? (map number? (range 1 9))) >))\n              (map by_length\
    \ (filter number? (map string? (reverse arr)))))))\n", "  (if (null? arr)\n  \
    \    '()\n      (append (sort (filter odd? (map length arr))) (sort (filter even?\
    \ (map length arr))) (sort (reverse (map length arr))) (map name arr))))\n", " \
    \ (if (null? arr)\n      '()\n      (append (sort (filter #(< 1 (length %)) arr))\n\
    \              (reverse (sort (filter #(> 1 (length %)) arr))\n              (map\
    \ #(cond [(< 1 (length %)) \"One\"]\n                            [(> 1 (length\
    \ %)) \"Two\"]\n                            [(= 1 (length %)) \"Three\"]\n   \
    \                         [(= 2 (length %)) \"Four\"]\n                      \
    \      [(= 3 (length %)) \"Five\"]\n                            [(= 4 (length\
    \ %)) \"Six\"]\n                            [(= 5 (length %)) \"Seven\"]\n   \
    \                         [(= 6 (length %)) \"Eight\"]\n                     \
    \       [(= 7 (length %)) \"Nine\"]\n                            [(= 8 (length\
    \ %)) \"Ten\"]\n                            [(= 9 (length %)) \"Eleven\"]\n  \
    \                          [(= 10 (length %)) \"Twelve\"]\n                  \
    \          [(= 11 (length %)) \"Thirteen\"]\n                            [(= 12\
    \ (length %)) \"Fourteen\"]\n                            [(= 13 (length %)) \"\
    Fifteen\"]\n                            [(= 14 (length %)) \"Sixteen\"]\n    \
    \                        [(= 15 (length %)) \"Seventeen\"]\n                 \
    \           [(= 16 (length %)) \"Eighteen\"]\n                            [(=\
    \ 17 (length %)) \"Nineteen\"]\n                            [(= 18 (length %))\
    \ \"Twenty\"]\n                            [(= 19 (length %)) \"Twenty-one\"]\n\
    \                            [(= 20 (length %)) \"Twenty-two\"]\n            \
    \                [(= 21 (length %)) \"Twenty-three\"]\n                      \
    \      [(= 22 (length %)) \"Twenty-four\"]\n                            [(= 23\
    \ (length %)) \"Twenty-five\"]\n                            [(= 24 (length %))\
    \ \"Twenty-six\"]\n                            [(= 25 (length %)) \"Twenty-seven\"\
    ]\n                            [(= 26 (length %)) \"Twenty-eight\"]\n        \
    \                    [(= 27 (length %)) \"Twenty-nine\"]\n                   \
    \         [(= 28 (length %)) \"Thirty\"]\n                            [(= 29 (length\
    \ %)) \"Thirty-one\"]\n                            [(= 30 (length %)) \"Thirty-two\"\
    ]\n                            [(= 31 (length %)) \"Thirty-three\"]\n        \
    \                    [(= 32 (length %)) \"Thir", "  (if (null? arr)\n      '()\n\
    \      (append (sort (filter odd? (map number? (filter between? arr 1 9)))) \n\
    \              (reverse (sort (filter even? (map number? (filter between? arr\
    \ 1 9))))) \n              (map by_digit (map by_name arr))))) \n", "  (if (empty?\
    \ arr)\n      '()\n      (append (sort (filter #(< % 9) (filter #(< % 1) arr)))\
    \ (reverse (sort (filter #(> % 9) (filter #(> % 1) arr))))))\n", "  (cond\n  \
    \  [(empty? arr) empty]\n    [(= (length arr) 1) (cons \"One\" empty)]\n    [(=\
    \ (length arr) 2) (cons \"Two\" empty)]\n    [(= (length arr) 3) (cons \"Three\"\
    \ empty)]\n    [(= (length arr) 4) (cons \"Four\" empty)]\n    [(= (length arr)\
    \ 5) (cons \"Five\" empty)]\n    [(= (length arr) 6) (cons \"Six\" empty)]\n \
    \   [(= (length arr) 7) (cons \"Seven\" empty)]\n    [(= (length arr) 8) (cons\
    \ \"Eight\" empty)]\n    [(= (length arr) 9) (cons \"Nine\" empty)]\n    [else\
    \ (cons (nth arr (- 9 n)) (by_length (rest arr)))]))\n", "  (if (null? arr)\n\
    \      '()\n      (append (sort (filter #(<= (length %) 9) (filter #(<= (length\
    \ %) 1) arr))\n                   (reverse (sort (filter #(<= (length %) 9) (filter\
    \ #(<= (length %) 1) arr))))\n              (map #(cond ((<= (length %) 9) \"\
    One\")\n                        ((<= (length %) 1) \"Two\")\n                \
    \        (else (substring (string %) 0 1)) \"Three\")\n              (map #(cond\
    \ ((<= (length %) 9) \"Four\")\n                        ((<= (length %) 1) \"\
    Five\")\n                        (else (substring (string %) 0 1)) \"Six\")\n\
    \              (map #(cond ((<= (length %) 9) \"Seven\")\n                   \
    \     ((<= (length %) 1) \"Eight\")\n                        (else (substring\
    \ (string %) 0 1)) \"Nine\")\n              (map #(cond ((<= (length %) 9) \"\
    Nine\")\n                        (else (substring (string %) 0 1)) \"Ten\")\n\
    \              (map #(cond ((<= (length %) 9) \"Ten\")\n                     \
    \   (else (substring (string %) 0 1)) \"Eleven\")\n              (map #(cond ((<=\
    \ (length %) 9) \"Twelve\")\n                        (else (substring (string\
    \ %) 0 1)) \"Thirteen\")\n              (map #(cond ((<= (length %) 9) \"Fourteen\"\
    )\n                        (else (substring (string %) 0 1)) \"Fifteen\")\n  \
    \            (map #(cond ((<= (length %) 9) \"Fifteen\")\n                   \
    \     (else (substring (string %) 0 1)) \"Sixteen\")\n              (map #(cond\
    \ ((<= (length %) 9) \"Seventeen\")\n                        (else (substring\
    \ (string %) 0 1)) \"Eighteen\")\n              (map #(cond ((<= (length %) 9)\
    \ \"Nineteen\")\n                        (else (substring (string %) 0 1)) \"\
    Twenty\")\n              (map #(cond ((<= (length %) 9) \"Twenty\")\n        \
    \                (else (substring (string %) 0 1)) \"Twenty\")))))\n", "  (cond\n\
    \    [(empty? arr) empty]\n    [(number? (first arr)) (cons (by_length arr) (sort\
    \ (reverse (first arr))))]\n    [else (cons (by_length arr) (sort (reverse (first\
    \ arr))))]))\n", "  (if (empty? arr)\n      '()\n      (append (reverse (sort\
    \ arr))\n               (map (lambda (x) (cond [(< x 9) (cons \"Nine\" (reverse\
    \ (sub1 x)))]\n                                     [(< x 8) (cons \"Eight\" (reverse\
    \ (sub1 x)))]\n                                     [(< x 7) (cons \"Seven\" (reverse\
    \ (sub1 x)))]\n                                     [(< x 6) (cons \"Six\" (reverse\
    \ (sub1 x)))]\n                                     [(< x 5) (cons \"Five\" (reverse\
    \ (sub1 x)))]\n                                     [(< x 4) (cons \"Four\" (reverse\
    \ (sub1 x)))]\n                                     [(< x 3) (cons \"Three\" (reverse\
    \ (sub1 x)))]\n                                     [(< x 2) (cons \"Two\" (reverse\
    \ (sub1 x)))]\n                                     [(< x 1) (cons \"One\" (reverse\
    \ (sub1 x)))]\n                                     [(> x 1) (cons \"One\" (reverse\
    \ (sub1 x)))]\n                                     [(> x 2) (cons \"Two\" (reverse\
    \ (sub1 x)))]\n                                     [(> x 3) (cons \"Three\" (reverse\
    \ (sub1 x)))]\n                                     [(> x 4) (cons \"Four\" (reverse\
    \ (sub1 x)))]\n                                     [(> x 5) (cons \"Five\" (reverse\
    \ (sub1 x)))]\n                                     [(> x 6) (cons \"Six\" (reverse\
    \ (sub1 x)))]\n                                     [(> x 7) (cons \"Seven\" (reverse\
    \ (sub1 x)))]\n                                     [(> x 8) (cons \"Eight\" (reverse\
    \ (sub1 x)))]\n                                     [(> x 9) (cons \"Nine\" (reverse\
    \ (sub1 x)))]\n                                     [(> x 0) (cons \"Zero\" (reverse\
    \ (sub1 x)))]\n                                     [(> x -1) (cons \"MinusOne\"\
    \ (reverse (sub1 x)))]\n                                     [(> x -2) (cons \"\
    MinusTwo\" (reverse (sub1 x)))]\n                                     [(> x -3)\
    \ (cons \"MinusThree\" (reverse (sub1 x)))]\n                                \
    \     [(> x -4) (cons \"MinusFour\" (reverse (sub1 x)))]\n                   \
    \                  [(> x -5) (cons \"MinusFive\" (reverse (sub1 x)))]\n      \
    \                               [(> x -6) (cons \"Min", "  (cond\n    [(empty?\
    \ arr) empty]\n    [(number? (car arr)) (cons (by_length (cdr arr)) (by_length\
    \ (cdr arr)))]\n    [else (cons (by_length (cdr arr)) (by_length (cdr arr)))]))\n",
  "  (if (null? arr)\n      '()\n      (append (sort (filter odd? (map length arr)))\
    \ (sort (filter even? (map length arr))) (reverse (map name arr)))))\n", "  (if\
    \ (empty? arr)\n      '()\n      (append (reverse (sort arr))\n              (map\
    \ (lambda (x) (cond [(< x 9) (cons \"Nine\" (reverse (sub1 x)))]\n           \
    \                          [(< x 8) (cons \"Eight\" (reverse (sub1 x)))]\n   \
    \                                  [(< x 7) (cons \"Seven\" (reverse (sub1 x)))]\n\
    \                                     [(< x 6) (cons \"Six\" (reverse (sub1 x)))]\n\
    \                                     [(< x 5) (cons \"Five\" (reverse (sub1 x)))]\n\
    \                                     [(< x 4) (cons \"Four\" (reverse (sub1 x)))]\n\
    \                                     [(< x 3) (cons \"Three\" (reverse (sub1\
    \ x)))]\n                                     [(< x 2) (cons \"Two\" (reverse\
    \ (sub1 x)))]\n                                     [(< x 1) (cons \"One\" (reverse\
    \ (sub1 x)))]\n                                     [(> x 1) (cons \"One\" (reverse\
    \ (sub1 x)))]\n                                     [(> x 2) (cons \"Two\" (reverse\
    \ (sub1 x)))]\n                                     [(> x 3) (cons \"Three\" (reverse\
    \ (sub1 x)))]\n                                     [(> x 4) (cons \"Four\" (reverse\
    \ (sub1 x)))]\n                                     [(> x 5) (cons \"Five\" (reverse\
    \ (sub1 x)))]\n                                     [(> x 6) (cons \"Six\" (reverse\
    \ (sub1 x)))]\n                                     [(> x 7) (cons \"Seven\" (reverse\
    \ (sub1 x)))]\n                                     [(> x 8) (cons \"Eight\" (reverse\
    \ (sub1 x)))]\n                                     [(> x 9) (cons \"Nine\" (reverse\
    \ (sub1 x)))]\n                                     [else (cons \"?\" (reverse\
    \ (sub1 x)))])\n                   arr)))\n", '  (sort arr (lambda (x y) (< (length
    x) 9) (< (length y) 9))))', "  (if (null? arr)\n      '()\n      (append (reverse\n\
    \                 (map (lambda (x) (if (<= x 9) (cons x \"One\") (cons x \"Two\"\
    )))\n                       (range 1 10))\n                 (map (lambda (x) (if\
    \ (<= x 9) (cons x \"Ten\") (cons x \"Eleven\")))\n                       (range\
    \ 1 10))\n                 (map (lambda (x) (if (<= x 9) (cons x \"Twelve\") (cons\
    \ x \"Thirteen\")))\n                       (range 1 10))\n                 (map\
    \ (lambda (x) (if (<= x 9) (cons x \"Fourteen\") (cons x \"Fifteen\")))\n    \
    \                   (range 1 10))\n                 (map (lambda (x) (if (<= x\
    \ 9) (cons x \"Sixteen\") (cons x \"Seventeen\")))\n                       (range\
    \ 1 10))\n                 (map (lambda (x) (if (<= x 9) (cons x \"Eighteen\"\
    ) (cons x \"Nineteen\")))\n                       (range 1 10))\n            \
    \     (map (lambda (x) (if (<= x 9) (cons x \"Nineteen\") (cons x \"Nine\")))\n\
    \                       (range 1 10))\n                 (map (lambda (x) (if (<=\
    \ x 9) (cons x \"Twenty\") (cons x \"Twentyone\")))\n                       (range\
    \ 1 10))\n                 (map (lambda (x) (if (<= x 9) (cons x \"Twentytwo\"\
    ) (cons x \"Twentythree\")))\n                       (range 1 10))\n         \
    \        (map (lambda (x) (if (<= x 9) (cons x \"Twentyfour\") (cons x \"Twentyfive\"\
    )))\n                       (range 1 10))\n                 (map (lambda (x) (if\
    \ (<= x 9) (cons x \"Twentysix\") (cons x \"Twentyseven\")))\n               \
    \        (range 1 10))\n                 (map (lambda (x) (if (<= x 9) (cons x\
    \ \"Twentyeight\") (cons x \"Twentynine\")))\n                       (range 1\
    \ 10))\n                 (map (lambda (x) (if (<= x 9) (cons x \"Thirty\") (cons\
    \ x \"Thirtyone\")))\n                       (range 1 10))\n                 (map\
    \ (lambda (x) (if (<= x 9) (cons x \"Thirtytwo\") (cons x \"Thirtythree\")))\n\
    \                       (range 1 10))\n                 (map (lambda (x) (if (<=\
    \ x 9) (cons x \"Thirtyfour\") (cons x \"Thirtyfive\")))\n                   \
    \    (range 1 10))\n                 (map", "  (if (null? arr)\n      '()\n  \
    \    (append (sort (filter #(<= (length %) 9) (filter #(<= (length %) 1) arr))\n\
    \                   (reverse (filter #(<= (length %) 9) (filter #(<= (length %)\
    \ 1) arr)))\n                   (map #(cond [(<= (length %) 9) (cond [(<= (length\
    \ %) 1) \"One\"]\n                                                   [(<= (length\
    \ %) 2) \"Two\"]\n                                                   [(<= (length\
    \ %) 3) \"Three\"]\n                                                   [(<= (length\
    \ %) 4) \"Four\"]\n                                                   [(<= (length\
    \ %) 5) \"Five\"]\n                                                   [(<= (length\
    \ %) 6) \"Six\"]\n                                                   [(<= (length\
    \ %) 7) \"Seven\"]\n                                                   [(<= (length\
    \ %) 8) \"Eight\"]\n                                                   [(<= (length\
    \ %) 9) \"Nine\"]\n                                                   [else (cond\
    \ [(<= (length %) 1) \"One\"]\n                                              \
    \           [(<= (length %) 2) \"Two\"]\n                                    \
    \                     [(<= (length %) 3) \"Three\"]\n                        \
    \                                 [(<= (length %) 4) \"Four\"]\n             \
    \                                            [(<= (length %) 5) \"Five\"]\n  \
    \                                                       [(<= (length %) 6) \"\
    Six\"]\n                                                         [(<= (length\
    \ %) 7) \"Seven\"]\n                                                         [(<=\
    \ (length %) 8) \"Eight\"]\n                                                 \
    \        [(<= (length %) 9) \"Nine\"]\n                                      \
    \                   [else (cond [(<= (length %) 1) \"One\"]\n                \
    \                                               [(<= (length %) 2) \"Two\"]\n\
    \                                                               [(<= (length %)\
    \ 3) \"Three\"]\n                                                            \
    \   [(<= (length %) 4) \"Four\"]\n                                           \
    \                    [(<= (length %) 5) \"Five\"]\n                          \
    \                                     [(<= (length %) 6) \"Six\"]\n          \
    \                                                     [(<= (length %) 7) \"Seven\"\
    ]\n                                                               [(<= (length\
    \ %) 8) \"Eight\"]\n                                                         \
    \      [(<= (length %) 9) \"Nine\"]\n                                        \
    \                       [else (cond [(<= (length %) 1) \"One\"]\n            \
    \                                                         [(<= (length %) 2) \"\
    Two\"]\n                                                                     [(<=\
    \ (length %) 3) \"Three\"]\n                                                 \
    \                    [(<= (length %) 4) \"Four\"]\n                          \
    \                                           [(<= (length %) 5) \"Five\"]\n   \
    \                                                                  [(<= (length\
    \ %) 6) \"Six\"]\n                                ", "  (sort arr (lambda (x)\
    \ (<= (length x) 9)))\n  (reverse arr)\n  (map (lambda (x) (cond [(= (length x)\
    \ 9) (cons \"One\" x)]\n                            [(= (length x) 8) (cons \"\
    Two\" x)]\n                            [(= (length x) 7) (cons \"Three\" x)]\n\
    \                            [(= (length x) 6) (cons \"Four\" x)]\n          \
    \                  [(= (length x) 5) (cons \"Five\" x)]\n                    \
    \        [(= (length x) 4) (cons \"Six\" x)]\n                            [(=\
    \ (length x) 3) (cons \"Seven\" x)]\n                            [(= (length x)\
    \ 2) (cons \"Eight\" x)]\n                            [(= (length x) 1) (cons\
    \ \"Nine\" x)]\n                            [else (cons \"?\" x)]))\n        \
    \ arr))\n</code>\n<|/ a tags=racket,scheme |>\n<| a dscore=0 |>\n<code>", "  (if\
    \ (empty? arr)\n      '()\n      (let ([sorted (sort arr (lambda (x y) (< x 9)\
    \ (< y 9)))])\n        (reverse sorted)\n        (map (lambda (x) (cond [(< x\
    \ 1) \"One\"]\n                                 [(< x 2) \"Two\"]\n          \
    \                       [(< x 3) \"Three\"]\n                                \
    \ [(< x 4) \"Four\"]\n                                 [(< x 5) \"Five\"]\n  \
    \                               [(< x 6) \"Six\"]\n                          \
    \       [(< x 7) \"Seven\"]\n                                 [(< x 8) \"Eight\"\
    ]\n                                 [(< x 9) \"Nine\"]\n                     \
    \            [else \"?\"])\n              sorted))))\n", "  (if (null? arr)\n\
    \      '()\n      (append (sort (filter #(<= (length %) 9) (take arr (length arr))))\n\
    \              (reverse (sort (filter #(>= (length %) 1) (take arr (length arr))))\n\
    \              (map #(cond [(<= (length %) 9) (cons \"One\" %)]\n            \
    \               [(>= (length %) 1) (cons \"Two\" %)]\n                       \
    \    [(<= (length %) 9) (cons \"Three\" %)]\n                           [(>= (length\
    \ %) 1) (cons \"Four\" %)]\n                           [(<= (length %) 9) (cons\
    \ \"Five\" %)]\n                           [(>= (length %) 1) (cons \"Six\" %)]\n\
    \                           [(<= (length %) 9) (cons \"Seven\" %)]\n         \
    \                  [(>= (length %) 1) (cons \"Eight\" %)]\n                  \
    \         [(<= (length %) 9) (cons \"Nine\" %)]\n                           [(>=\
    \ (length %) 1) (cons \"Ten\" %)]\n                           [(<= (length %)\
    \ 9) (cons \"Eleven\" %)]\n                           [(>= (length %) 1) (cons\
    \ \"Twelve\" %)]\n                           [(<= (length %) 9) (cons \"Thirteen\"\
    \ %)]\n                           [(>= (length %) 1) (cons \"Fourteen\" %)]\n\
    \                           [(<= (length %) 9) (cons \"Fifteen\" %)]\n       \
    \                    [(>= (length %) 1) (cons \"Sixteen\" %)]\n              \
    \             [(<= (length %) 9) (cons \"Seventeen\" %)]\n                   \
    \        [(>= (length %) 1) (cons \"Eighteen\" %)]\n                         \
    \  [(<= (length %) 9) (cons \"Nineteen\" %)]\n                           [(>=\
    \ (length %) 1) (cons \"Twenty\" %)]\n                           [(<= (length\
    \ %) 9) (cons \"Twentyone\" %)]\n                           [(>= (length %) 1)\
    \ (cons \"Twentytwo\" %)]\n                           [(<= (length %) 9) (cons\
    \ \"Twentythree\" %)]\n                           [(>= (length %) 1) (cons \"\
    Twentyfour\" %)]\n                           [(<= (length %) 9) (cons \"Twentyfive\"\
    \ %)]\n                           [(>= (length %) 1) (cons \"Twentysi", "  (sort\
    \ arr (lambda (x) (<= (length x) 9)))\n  (reverse arr)\n  (map (lambda (x) (cond\
    \ ((= (length x) 9) (cond ((= x 1) \"One\")\n                                \
    \          ((= x 2) \"Two\")\n                                          ((= x\
    \ 3) \"Three\")\n                                          ((= x 4) \"Four\")\n\
    \                                          ((= x 5) \"Five\")\n              \
    \                            ((= x 6) \"Six\")\n                             \
    \             ((= x 7) \"Seven\")\n                                          ((=\
    \ x 8) \"Eight\")\n                                          ((= x 9) \"Nine\"\
    ))\n                                 (else x)))\n       arr))\n", "  (if (empty?\
    \ arr)\n      '()\n      (append (sort (filter (lambda (x) (>= x 9) (< x 1))\n\
    \                             (reverse arr)))\n              (map (lambda (x)\
    \ (cond ((= x 1) \"One\")\n                                    ((= x 2) \"Two\"\
    )\n                                    ((= x 3) \"Three\")\n                 \
    \                   ((= x 4) \"Four\")\n                                    ((=\
    \ x 5) \"Five\")\n                                    ((= x 6) \"Six\")\n    \
    \                                ((= x 7) \"Seven\")\n                       \
    \             ((= x 8) \"Eight\")\n                                    ((= x 9)\
    \ \"Nine\")\n                                    (else \"?\"))))))\n", "  (if\
    \ (empty? arr)\n      '()\n      (append (sort (map number->name arr))\n     \
    \         (reverse (sort (map number->name arr))))))\n", "  (if (null? arr)\n\
    \      '()\n      (append (sort (filter (lambda (x) (<= x 9)) arr))\n        \
    \      (reverse (sort (filter (lambda (x) (not (<= x 9)) arr)))))\n  )\n)\n",
  "  (if (null? arr)\n      '()\n      (append (sort (filter #(<= (length %) 9) arr))\n\
    \              (reverse (sort (filter #(>= (length %) 1) arr))\n             \
    \          (map #(cond [(= (length %) 9) \"Nine\"]\n                         \
    \          [(= (length %) 8) \"Eight\"]\n                                   [(=\
    \ (length %) 7) \"Seven\"]\n                                   [(= (length %)\
    \ 6) \"Six\"]\n                                   [(= (length %) 5) \"Five\"]\n\
    \                                   [(= (length %) 4) \"Four\"]\n            \
    \                       [(= (length %) 3) \"Three\"]\n                       \
    \            [(= (length %) 2) \"Two\"]\n                                   [(=\
    \ (length %) 1) \"One\"]\n                                   [else (cond [(= (length\
    \ %) 9) \"Nine\"]\n                                           [(= (length %) 8)\
    \ \"Eight\"]\n                                           [(= (length %) 7) \"\
    Seven\"]\n                                           [(= (length %) 6) \"Six\"\
    ]\n                                           [(= (length %) 5) \"Five\"]\n  \
    \                                         [(= (length %) 4) \"Four\"]\n      \
    \                                     [(= (length %) 3) \"Three\"]\n         \
    \                                  [(= (length %) 2) \"Two\"]\n              \
    \                             [(= (length %) 1) \"One\"]\n                   \
    \                        [else (cond [(= (length %) 9) \"Nine\"]\n           \
    \                                        [(= (length %) 8) \"Eight\"]\n      \
    \                                             [(= (length %) 7) \"Seven\"]\n \
    \                                                  [(= (length %) 6) \"Six\"]\n\
    \                                                   [(= (length %) 5) \"Five\"\
    ]\n                                                   [(= (length %) 4) \"Four\"\
    ]\n                                                   [(= (length %) 3) \"Three\"\
    ]\n                                                   [(= (length %) 2) \"Two\"\
    ]\n                                                   [(= (length %) 1) \"One\"\
    ]\n                                                   [else (cond [(= (length\
    \ %) 9) \"Nine\"]\n                                                          \
    \ [(= (length %) 8) \"Eight\"]\n                                             \
    \              [(= (length %) 7) \"Seven\"]\n                                \
    \                           [(= (length %) 6) \"Six\"]\n                     \
    \                                      [(= (length %) 5) \"Five\"]\n         \
    \                                                  [(= (length %) 4) \"Four\"\
    ]\n                                                           [(= (length %) 3)\
    \ \"Three\"]\n                                                           [(= (length\
    \ %) 2) \"Two\"]\n                                                           [(=\
    \ (length %", "  (if (empty? arr)\n      '()\n      (append (sort (filter odd?\
    \ (map length arr))) (reverse (sort (filter even? (map length arr)))))\n  )\n\
    )\n", "  (sort arr (lambda (x) (<= (length x) 9)))\n  (reverse arr)\n  (map (lambda\
    \ (x) (cond [(= (length x) 9) (cons \"Nine\" x)]\n                          [(=\
    \ (length x) 8) \"Eight\"]\n                          [(= (length x) 7) \"Seven\"\
    ]\n                          [(= (length x) 6) \"Six\"]\n                    \
    \      [(= (length x) 5) \"Five\"]\n                          [(= (length x) 4)\
    \ \"Four\"]\n                          [(= (length x) 3) \"Three\"]\n        \
    \                  [(= (length x) 2) \"Two\"]\n                          [(= (length\
    \ x) 1) \"One\"]\n                          [else x]))))\n", "  (if (null? arr)\n\
    \      '()\n      (append (sort (sub1 arr))\n              (reverse (sub1 arr))\n\
    \              (map (lambda (x) (cond ((< x 9) (cons (cons \"One\" x) '()))\n\
    \                                    ((< x 8) (cons (cons \"Two\" x) '()))\n \
    \                                   ((< x 7) (cons (cons \"Three\" x) '()))\n\
    \                                    ((< x 6) (cons (cons \"Four\" x) '()))\n\
    \                                    ((< x 5) (cons (cons \"Five\" x) '()))\n\
    \                                    ((< x 4) (cons (cons \"Six\" x) '()))\n \
    \                                   ((< x 3) (cons (cons \"Seven\" x) '()))\n\
    \                                    ((< x 2) (cons (cons \"Eight\" x) '()))\n\
    \                                    ((< x 1) (cons (cons \"Nine\" x) '()))\n\
    \                                    (else (cons x '())))))\n              (by_length\
    \ (sub1 arr))))\n", "  (if (null? arr)\n      '()\n      (append (sort (filter\
    \ odd? (map number? (range 1 9))) <)\n              (reverse (sort (filter even?\
    \ (map number? (range 1 9))) >))\n              (map (lambda (x) (cond ((= x 1)\
    \ \"One\")\n                                    ((= x 2) \"Two\")\n          \
    \                          ((= x 3) \"Three\")\n                             \
    \       ((= x 4) \"Four\")\n                                    ((= x 5) \"Five\"\
    )\n                                    ((= x 6) \"Six\")\n                   \
    \                 ((= x 7) \"Seven\")\n                                    ((=\
    \ x 8) \"Eight\")\n                                    ((= x 9) \"Nine\")\n  \
    \                                  (else \"???\")) arr))))\n", "  (sort arr (lambda\
    \ (x) (<= (length x) 9)))\n  (reverse arr)\n  (map #(cond [(<= (length x) 9) (cons\
    \ \"One\" (reverse (substring arr (- x 1) x)))]\n             [(<= (length x)\
    \ 8) (cons \"Two\" (reverse (substring arr (- x 1) x)))]\n             [(<= (length\
    \ x) 7) (cons \"Three\" (reverse (substring arr (- x 1) x)))]\n             [(<=\
    \ (length x) 6) (cons \"Four\" (reverse (substring arr (- x 1) x)))]\n       \
    \      [(<= (length x) 5) (cons \"Five\" (reverse (substring arr (- x 1) x)))]\n\
    \             [(<= (length x) 4) (cons \"Six\" (reverse (substring arr (- x 1)\
    \ x)))]\n             [(<= (length x) 3) (cons \"Seven\" (reverse (substring arr\
    \ (- x 1) x)))]\n             [(<= (length x) 2) (cons \"Eight\" (reverse (substring\
    \ arr (- x 1) x)))]\n             [(<= (length x) 1) (cons \"Nine\" (reverse (substring\
    \ arr (- x 1) x)))]\n             [else (cons \"?\" (reverse (substring arr (-\
    \ x 1) x)))]))\n)\n", "  (if (null? arr)\n      '()\n      (append (sort (filter\
    \ odd? (map number? (filter between? arr 1 9)))) \n              (reverse (sort\
    \ (filter even? (map number? (filter between? arr 1 9))))\n              (map\
    \ by_digit (map by_name arr))))))\n", "  (if (null? arr)\n      '()\n      (append\
    \ (sort (filter #(<= (length %) 9) arr))\n              (reverse (sort (filter\
    \ #(>= (length %) 1) arr))\n                       (map #(cond [(= (length %)\
    \ 9) \"Nine\"]\n                                   [(= (length %) 8) \"Eight\"\
    ]\n                                   [(= (length %) 7) \"Seven\"]\n         \
    \                          [(= (length %) 6) \"Six\"]\n                      \
    \             [(= (length %) 5) \"Five\"]\n                                  \
    \ [(= (length %) 4) \"Four\"]\n                                   [(= (length\
    \ %) 3) \"Three\"]\n                                   [(= (length %) 2) \"Two\"\
    ]\n                                   [(= (length %) 1) \"One\"]\n           \
    \                        [else (cond [(= (length %) 9) \"Nine\"]\n           \
    \                                [(= (length %) 8) \"Eight\"]\n              \
    \                             [(= (length %) 7) \"Seven\"]\n                 \
    \                          [(= (length %) 6) \"Six\"]\n                      \
    \                     [(= (length %) 5) \"Five\"]\n                          \
    \                 [(= (length %) 4) \"Four\"]\n                              \
    \             [(= (length %) 3) \"Three\"]\n                                 \
    \          [(= (length %) 2) \"Two\"]\n                                      \
    \     [(= (length %) 1) \"One\"]\n                                           [else\
    \ (cond [(= (length %) 9) \"Nine\"]\n                                        \
    \           [(= (length %) 8) \"Eight\"]\n                                   \
    \                [(= (length %) 7) \"Seven\"]\n                              \
    \                     [(= (length %) 6) \"Six\"]\n                           \
    \                        [(= (length %) 5) \"Five\"]\n                       \
    \                            [(= (length %) 4) \"Four\"]\n                   \
    \                                [(= (length %) 3) \"Three\"]\n              \
    \                                     [(= (length %) 2) \"Two\"]\n           \
    \                                        [(= (length %) 1) \"One\"]\n        \
    \                                           [else (cond [(= (length %) 9) \"Nine\"\
    ]\n                                                           [(= (length %) 8)\
    \ \"Eight\"]\n                                                           [(= (length\
    \ %) 7) \"Seven\"]\n                                                         \
    \  [(= (length %) 6) \"Six\"]\n                                              \
    \             [(= (length %) 5) \"Five\"]\n                                  \
    \                         [(= (length %) 4) \"Four\"]\n                      \
    \                                     [(= (length %) 3) \"Three\"]\n         \
    \                                                  [(= (length %) 2) \"Two\"]\n\
    \                                                           [(= (length %", " \
    \ (if (empty? arr)\n      '()\n      (append (sort (filter odd? (map number? (filter\
    \ between? arr 1 9)))))\n          (reverse (sort (filter even? (map number? (filter\
    \ between? arr 1 9)))))\n          (append (sort (filter odd? (map number? (filter\
    \ between? arr 1 9)))))\n          (reverse (sort (filter even? (map number? (filter\
    \ between? arr 1 9)))))\n          (append (sort (filter odd? (map number? (filter\
    \ between? arr 1 9)))))\n          (reverse (sort (filter even? (map number? (filter\
    \ between? arr 1 9)))))\n          (append (sort (filter odd? (map number? (filter\
    \ between? arr 1 9)))))\n          (reverse (sort (filter even? (map number? (filter\
    \ between? arr 1 9)))))\n          (append (sort (filter odd? (map number? (filter\
    \ between? arr 1 9)))))\n          (reverse (sort (filter even? (map number? (filter\
    \ between? arr 1 9)))))\n          (append (sort (filter odd? (map number? (filter\
    \ between? arr 1 9)))))\n          (reverse (sort (filter even? (map number? (filter\
    \ between? arr 1 9)))))\n          (append (sort (filter odd? (map number? (filter\
    \ between? arr 1 9)))))\n          (reverse (sort (filter even? (map number? (filter\
    \ between? arr 1 9)))))\n          (append (sort (filter odd? (map number? (filter\
    \ between? arr 1 9)))))\n          (reverse (sort (filter even? (map number? (filter\
    \ between? arr 1 9)))))\n          (append (sort (filter odd? (map number? (filter\
    \ between? arr 1 9)))))\n          (reverse (sort (filter even? (map number? (filter\
    \ between? arr 1 9)))))\n          (append (sort (filter odd? (map number? (filter\
    \ between? arr 1 9)))))\n          (reverse (sort (filter even? (map number? (filter\
    \ between? arr 1 9)))))\n          (append (sort (filter odd? (map number? (filter\
    \ between? arr 1 9)))))\n          (reverse (sort (filter even? (map number? (filter\
    \ between? arr 1 9)))))\n          (append (sort (filter odd? (map number? (filter\
    \ between? arr 1 9))", "  (if (null? arr)\n      '()\n      (append (sort (filter\
    \ (lambda (x) (<= x 9)) arr))\n              (reverse (sort (filter (lambda (x)\
    \ (not (<= x 9)) arr)))))\n  )\n)\n", "  (if (null? arr)\n      '()\n      (append\
    \ (reverse (sort arr))\n               (map (\u03BB (x) (cond [(< x 9) (cons \"\
    Nine\" (reverse (sub1 x)))]\n                                   [(< x 8) (cons\
    \ \"Eight\" (reverse (sub1 x)))]\n                                   [(< x 7)\
    \ (cons \"Seven\" (reverse (sub1 x)))]\n                                   [(<\
    \ x 6) (cons \"Six\" (reverse (sub1 x)))]\n                                  \
    \ [(< x 5) (cons \"Five\" (reverse (sub1 x)))]\n                             \
    \      [(< x 4) (cons \"Four\" (reverse (sub1 x)))]\n                        \
    \           [(< x 3) (cons \"Three\" (reverse (sub1 x)))]\n                  \
    \                 [(< x 2) (cons \"Two\" (reverse (sub1 x)))]\n              \
    \                     [(< x 1) (cons \"One\" (reverse (sub1 x)))]\n          \
    \                         [(> x 1) (cons \"One\" (reverse (sub1 x)))]\n      \
    \                             [(> x 2) (cons \"Two\" (reverse (sub1 x)))]\n  \
    \                                 [(> x 3) (cons \"Three\" (reverse (sub1 x)))]\n\
    \                                   [(> x 4) (cons \"Four\" (reverse (sub1 x)))]\n\
    \                                   [(> x 5) (cons \"Five\" (reverse (sub1 x)))]\n\
    \                                   [(> x 6) (cons \"Six\" (reverse (sub1 x)))]\n\
    \                                   [(> x 7) (cons \"Seven\" (reverse (sub1 x)))]\n\
    \                                   [(> x 8) (cons \"Eight\" (reverse (sub1 x)))]\n\
    \                                   [(> x 9) (cons \"Nine\" (reverse (sub1 x)))]\n\
    \                                   [else (cons \"?\" (reverse (sub1 x)))])))\n\
    \               (by_length (rest arr))))\n", "  (cond\n    [(empty? arr) empty]\n\
    \    [(= (length arr) 1) (cons \"One\" empty)]\n    [(= (length arr) 2) (cons\
    \ \"Two\" empty)]\n    [(= (length arr) 3) (cons \"Three\" empty)]\n    [(= (length\
    \ arr) 4) (cons \"Four\" empty)]\n    [(= (length arr) 5) (cons \"Five\" empty)]\n\
    \    [(= (length arr) 6) (cons \"Six\" empty)]\n    [(= (length arr) 7) (cons\
    \ \"Seven\" empty)]\n    [(= (length arr) 8) (cons \"Eight\" empty)]\n    [(=\
    \ (length arr) 9) (cons \"Nine\" empty)]\n    [else (cons (number->string (car\
    \ arr)) (by_length (cdr arr)))]))\n", "  (if (null? arr)\n      '()\n      (append\
    \ (sort (filter odd? (map number? (range 1 9))) <)\n              (reverse (sort\
    \ (filter even? (map number? (range 1 9))) >))\n              (map (lambda (x)\
    \ (cond ((= x 1) \"One\")\n                                      ((= x 2) \"Two\"\
    )\n                                      ((= x 3) \"Three\")\n               \
    \                       ((= x 4) \"Four\")\n                                 \
    \     ((= x 5) \"Five\")\n                                      ((= x 6) \"Six\"\
    )\n                                      ((= x 7) \"Seven\")\n               \
    \                       ((= x 8) \"Eight\")\n                                \
    \      ((= x 9) \"Nine\")\n                                      (else \"???\"\
    )) arr))))\n", "  (if (empty? arr)\n      '()\n      (append (sort (filter (lambda\
    \ (x) (<= x 9)) arr))\n              (reverse (sort (filter (lambda (x) (not (<=\
    \ x 9)) arr)))))\n  )\n)\n", "  (if (null? arr)\n      '()\n      (append (sort\
    \ (filter #(<= (length %) 9) arr))\n              (reverse (sort (filter #(>=\
    \ (length %) 1) arr))\n                       (map #(cond [(= (length %) 1) \"\
    One\"]\n                                   [(= (length %) 2) \"Two\"]\n      \
    \                             [(= (length %) 3) \"Three\"]\n                 \
    \                  [(= (length %) 4) \"Four\"]\n                             \
    \      [(= (length %) 5) \"Five\"]\n                                   [(= (length\
    \ %) 6) \"Six\"]\n                                   [(= (length %) 7) \"Seven\"\
    ]\n                                   [(= (length %) 8) \"Eight\"]\n         \
    \                          [(= (length %) 9) \"Nine\"]\n                     \
    \              [else (cond [(= (length %) 1) \"One\"]\n                      \
    \                        [(= (length %) 2) \"Two\"]\n                        \
    \                      [(= (length %) 3) \"Three\"]\n                        \
    \                      [(= (length %) 4) \"Four\"]\n                         \
    \                     [(= (length %) 5) \"Five\"]\n                          \
    \                    [(= (length %) 6) \"Six\"]\n                            \
    \                  [(= (length %) 7) \"Seven\"]\n                            \
    \                  [(= (length %) 8) \"Eight\"]\n                            \
    \                  [(= (length %) 9) \"Nine\"]\n                             \
    \                 [else (cond [(= (length %) 1) \"One\"]\n                   \
    \                                     [(= (length %) 2) \"Two\"]\n           \
    \                                             [(= (length %) 3) \"Three\"]\n \
    \                                                       [(= (length %) 4) \"Four\"\
    ]\n                                                        [(= (length %) 5) \"\
    Five\"]\n                                                        [(= (length %)\
    \ 6) \"Six\"]\n                                                        [(= (length\
    \ %) 7) \"Seven\"]\n                                                        [(=\
    \ (length %) 8) \"Eight\"]\n                                                 \
    \       [(= (length %) 9) \"Nine\"]\n                                        \
    \                [else (cond [(= (length %) 1) \"One\"]\n                    \
    \                                            [(= (length %) 2) \"Two\"]\n    \
    \                                                            [(= (length %) 3)\
    \ \"Three\"]\n                                                               \
    \ [(= (length %) 4) \"Four\"]\n                                              \
    \                  [(= (length %) 5) \"Five\"]\n                             \
    \                                   [(= (length %) 6) \"Six\"]\n             \
    \                                                   [(= (length %) 7) \"Seven\"\
    ]\n                                                                [(= (length\
    \ %) 8) \"Eight\"]\n                                                         \
    \       [(= (length %) ", "  (if (null? arr)\n      '()\n      (append (sort (map\
    \ number->name arr))\n              (reverse (sort (map number->name arr)))))\n\
    )\n", "  (if (empty? arr)\n      '()\n      (append (reverse\n               \
    \  (map (lambda (x) (if (<= x 9) (cons x (cons \"One\" '())) (cons x (cons \"\
    Two\" '())))\n                       (range 1 10))\n                   (reverse\
    \ arr)))))\n", "  (if (null? arr)\n      '()\n      (append (sort (filter odd?\
    \ (map number? (filter <= 9 arr)))) (reverse (sort (filter <= 9 arr))) (map by_length\
    \ arr))))\n", "  (if (null? arr)\n      '()\n      (append (sort (filter #(<=\
    \ (length %) 9) (take arr (length arr))))\n              (reverse (sort (filter\
    \ #(>= (length %) 1) (take arr (length arr)))))\n              (map #(cond [(=\
    \ (length %) 9) \"Nine\"]\n                          [(= (length %) 1) \"One\"\
    ]\n                          [(= (length %) 2) \"Two\"]\n                    \
    \      [(= (length %) 3) \"Three\"]\n                          [(= (length %)\
    \ 4) \"Four\"]\n                          [(= (length %) 5) \"Five\"]\n      \
    \                    [(= (length %) 6) \"Six\"]\n                          [(=\
    \ (length %) 7) \"Seven\"]\n                          [(= (length %) 8) \"Eight\"\
    ]\n                          [(= (length %) 9) \"Nine\"]\n                   \
    \       [else (cond [(= (length %) 1) \"One\"]\n                             \
    \        [(= (length %) 2) \"Two\"]\n                                     [(=\
    \ (length %) 3) \"Three\"]\n                                     [(= (length %)\
    \ 4) \"Four\"]\n                                     [(= (length %) 5) \"Five\"\
    ]\n                                     [(= (length %) 6) \"Six\"]\n         \
    \                            [(= (length %) 7) \"Seven\"]\n                  \
    \                   [(= (length %) 8) \"Eight\"]\n                           \
    \          [(= (length %) 9) \"Nine\"]\n                                     [else\
    \ (cond [(= (length %) 1) \"One\"]\n                                         \
    \      [(= (length %) 2) \"Two\"]\n                                          \
    \     [(= (length %) 3) \"Three\"]\n                                         \
    \      [(= (length %) 4) \"Four\"]\n                                         \
    \      [(= (length %) 5) \"Five\"]\n                                         \
    \      [(= (length %) 6) \"Six\"]\n                                          \
    \     [(= (length %) 7) \"Seven\"]\n                                         \
    \      [(= (length %) 8) \"Eight\"]\n                                        \
    \       [(= (length %) 9) \"Nine\"]\n                                        \
    \       [else (cond [(= (length %) 1) \"One\"]\n                             \
    \                            [(= (length %) 2) \"Two\"]\n                    \
    \                                     [(= (length %) 3) \"Three\"]\n         \
    \                                                [(= (length %) 4) \"Four\"]\n\
    \                                                         [(= (length %) 5) \"\
    Five\"]\n                                                         [(= (length\
    \ %) 6) \"Six\"]\n                                                         [(=\
    \ (length %) 7) \"Se", "  (cond\n    [(empty? arr) empty]\n    [(number? (first\
    \ arr)) (cons (by_length_helper (rest arr)) (by_length_helper (rest arr)))]\n\
    \    [else (cons (by_length_helper (rest arr)) (by_length_helper (rest arr)))]))\n",
  "  (sort arr (lambda (x) (<= (length x) 9)))\n  (reverse arr)\n  (map (lambda (x)\
    \ (cond [(= (length x) 9) x]\n                          [(= (length x) 8) \"Nine\"\
    ]\n                          [(= (length x) 7) \"Seven\"]\n                  \
    \        [(= (length x) 6) \"Six\"]\n                          [(= (length x)\
    \ 5) \"Five\"]\n                          [(= (length x) 4) \"Four\"]\n      \
    \                    [(= (length x) 3) \"Three\"]\n                          [(=\
    \ (length x) 2) \"Two\"]\n                          [(= (length x) 1) \"One\"\
    ]\n                          [else x]))\n       arr))\n", "  (if (null? arr)\n\
    \      '()\n      (append (sort (filter (lambda (x) (<= x 9)) arr))\n        \
    \      (reverse (sort (filter (lambda (x) (not (<= x 9)) arr)))))\n  )\n)\n",
  "  (sort arr (lambda (x y) (< (length x) (length y)))\n         (reverse arr)))\n",
  "  (if (empty? arr)\n      '()\n      (append (sort (sub1 arr))\n              (reverse\
    \ (sub1 arr))\n              (map (lambda (x) (cond ((<= x 9) (cons x (by_name\
    \ x)))\n                                       (else (cons x (by_name x))))\n\
    \                     (by_name arr))))))\n", "  (if (null? arr)\n      '()\n \
    \     (append (sort (filter odd? (map number? (filter between? arr 1 9)))) \n\
    \              (reverse (sort (filter even? (map number? (filter between? arr\
    \ 1 9))))) \n              (map by_digit (map by_name arr))))) \n", "  (cond\n\
    \    [(empty? arr) empty]\n    [(number? (car arr)) (cons (by_length (cdr arr))\
    \ (cons (by_length (cdr arr)) empty))]\n    [else (by_length (cdr arr))]))\n",
  "  (if (null? arr)\n      '()\n      (append (sort (filter odd? (map number->string\
    \ arr))) (reverse (sort (filter even? (map number->string arr)))))\n  )\n)\n",
  "  (if (null? arr)\n      '()\n      (append (sort (filter #(<= (length %) 9) (take\
    \ arr %)) #:key (lambda (%) (- % 9))) #:reverse (map #(cond [(= (length %) 9)\
    \ \"One\"]\n                                                                 \
    \             [(= (length %) 8) \"Two\"]\n                                   \
    \                                           [(= (length %) 7) \"Three\"]\n   \
    \                                                                           [(=\
    \ (length %) 6) \"Four\"]\n                                                  \
    \                            [(= (length %) 5) \"Five\"]\n                   \
    \                                                           [(= (length %) 4)\
    \ \"Six\"]\n                                                                 \
    \             [(= (length %) 3) \"Seven\"]\n                                 \
    \                                             [(= (length %) 2) \"Eight\"]\n \
    \                                                                            \
    \ [(= (length %) 1) \"Nine\"]\n                                              \
    \                                [else \"?\"]\n                              \
    \                                                (take arr %)))))\n", "  (if (null?\
    \ arr)\n      '()\n      (append (sort (filter odd? (map length arr))) (reverse\
    \ (sort (filter even? (map length arr))))\n               (map (lambda (x) (cond\
    \ [(< x 9) (cons \"Nine\" (reverse (substring x 0 1)))]\n                    \
    \                  [(< x 8) (cons \"Eight\" (reverse (substring x 0 1)))]\n  \
    \                                    [(< x 7) (cons \"Seven\" (reverse (substring\
    \ x 0 1)))]\n                                      [(< x 6) (cons \"Six\" (reverse\
    \ (substring x 0 1)))]\n                                      [(< x 5) (cons \"\
    Five\" (reverse (substring x 0 1)))]\n                                      [(<\
    \ x 4) (cons \"Four\" (reverse (substring x 0 1)))]\n                        \
    \              [(< x 3) (cons \"Three\" (reverse (substring x 0 1)))]\n      \
    \                                [(< x 2) (cons \"Two\" (reverse (substring x\
    \ 0 1)))]\n                                      [(< x 1) (cons \"One\" (reverse\
    \ (substring x 0 1)))]\n                                      [(< x 0) (cons \"\
    Zero\" (reverse (substring x 0 1)))]\n                                      [else\
    \ (cons \"Zero\" (reverse (substring x 0 1)))])))))\n", "  (if (null? arr)\n \
    \     '()\n      (append (sort (map number->string arr))\n              (reverse\
    \ (map number->string arr))\n              (map string->number \"One\" \"Two\"\
    \ \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\"))))\n", " \
    \ (cond\n    [(empty? arr) empty]\n    [(number? (first arr)) (cons (by_length_helper\
    \ (rest arr) 'One) (cons (by_length_helper (rest arr) 'Two) (cons (by_length_helper\
    \ (rest arr) 'Three) (cons (by_length_helper (rest arr) 'Four) (cons (by_length_helper\
    \ (rest arr) 'Five) (cons (by_length_helper (rest arr) 'Six) (cons (by_length_helper\
    \ (rest arr) 'Seven) (cons (by_length_helper (rest arr) 'Eight) (cons (by_length_helper\
    \ (rest arr) 'Nine) empty))))))]))\n", "  (if (null? arr)\n      '()\n      (append\
    \ (sort (filter #(<= (length %) 9) (take arr %))) (reverse (filter #(<= (length\
    \ %) 9) (drop arr %))) (by_length (drop arr 9))))\n  )\n", "  (if (empty? arr)\n\
    \      '()\n      (append (reverse\n                 (sort (map number->string\
    \ arr))\n                 (map string->number \n                       (map string->number\
    \ \n                             (map string->number \n                      \
    \             (map string->number \n                                        (map\
    \ string->number \n                                          (map string->number\
    \ \n                                              (map string->number \n     \
    \                                             (map string->number \n         \
    \                                             (map string->number \n         \
    \                                                 (map string->number \n     \
    \                                                         (map string->number\
    \ \n                                                                  (map string->number\
    \ \n                                                                    (map string->number\
    \ \n                                                                        (map\
    \ string->number \n                                                          \
    \                  (map string->number \n                                    \
    \                                            (map string->number \n          \
    \                                                                          (map\
    \ string->number \n                                                          \
    \                              arr))))))))))))))))\n", "  (sort arr (lambda (x\
    \ y) (< (length x) (length y)))\n         (reverse arr)))\n", "  (if (null? arr)\n\
    \      '()\n      (append (sort (filter #(<= (length %) 9) (filter #(<= (length\
    \ %) 1) arr))\n                   (reverse (sort (filter #(>= (length %) 1) arr))))\n\
    \              (map #(cond ((<= (length %) 9) \"One\")\n                     \
    \     ((<= (length %) 1) \"Two\")\n                          ((<= (length %) 2)\
    \ \"Three\")\n                          ((<= (length %) 3) \"Four\")\n       \
    \                   ((<= (length %) 4) \"Five\")\n                          ((<=\
    \ (length %) 5) \"Six\")\n                          ((<= (length %) 6) \"Seven\"\
    )\n                          ((<= (length %) 7) \"Eight\")\n                 \
    \         ((<= (length %) 8) \"Nine\")\n                          ((>= (length\
    \ %) 9) \"Ten\")\n                          ((>= (length %) 1) \"Eleven\")\n \
    \                         ((>= (length %) 2) \"Twelve\")\n                   \
    \       ((>= (length %) 3) \"Thirteen\")\n                          ((>= (length\
    \ %) 4) \"Fourteen\")\n                          ((>= (length %) 5) \"Fifteen\"\
    )\n                          ((>= (length %) 6) \"Sixteen\")\n               \
    \           ((>= (length %) 7) \"Seventeen\")\n                          ((>=\
    \ (length %) 8) \"Eighteen\")\n                          ((>= (length %) 9) \"\
    Nineteen\")\n                          ((>= (length %) 10) \"Twenty\")\n     \
    \                     ((>= (length %) 11) \"Thirty\")\n                      \
    \    ((>= (length %) 12) \"Forty\")\n                          ((>= (length %)\
    \ 13) \"Fifty\")\n                          ((>= (length %) 14) \"Sixty\")\n \
    \                         ((>= (length %) 15) \"Seventy\")\n                 \
    \         ((>= (length %) 16) \"Eighty\")\n                          ((>= (length\
    \ %) 17) \"Ninety\")\n                          ((>= (length %) 18) \"Twenty-one\"\
    )\n                          ((>= (length %) 19) \"Twenty-two\")\n           \
    \               ((>= (length %) 20) \"Twenty-three\")\n                      \
    \    ((>= (length %) 21) \"Twenty-four\")\n                          ((>= (length\
    \ %) 22) \"Twenty-five\")\n                          ((>= (length %) 23) \"Twenty-six\"\
    )\n                          ((>= (", "  (if (empty? arr)\n      '()\n      (append\
    \ (sort (sub1 arr))\n              (reverse (sub1 arr))\n              (map #(cond\
    \ [(< % 9) (cons \"One\" (replace % 9))]\n                          [(< % 9) (cons\
    \ \"Two\" (replace % 9))]\n                          [(< % 9) (cons \"Three\"\
    \ (replace % 9))]\n                          [(< % 9) (cons \"Four\" (replace\
    \ % 9))]\n                          [(< % 9) (cons \"Five\" (replace % 9))]\n\
    \                          [(< % 9) (cons \"Six\" (replace % 9))]\n          \
    \                [(< % 9) (cons \"Seven\" (replace % 9))]\n                  \
    \        [(< % 9) (cons \"Eight\" (replace % 9))]\n                          [(<\
    \ % 9) (cons \"Nine\" (replace % 9))]\n                          [(< % 9) (cons\
    \ \"Ten\" (replace % 9))]\n                          [(< % 9) (cons \"Eleven\"\
    \ (replace % 9))]\n                          [(< % 9) (cons \"Twelve\" (replace\
    \ % 9))]\n                          [(< % 9) (cons \"Thirteen\" (replace % 9))]\n\
    \                          [(< % 9) (cons \"Fourteen\" (replace % 9))]\n     \
    \                     [(< % 9) (cons \"Fifteen\" (replace % 9))]\n           \
    \               [(< % 9) (cons \"Sixteen\" (replace % 9))]\n                 \
    \         [(< % 9) (cons \"Seventeen\" (replace % 9))]\n                     \
    \     [(< % 9) (cons \"Eighteen\" (replace % 9))]\n                          [(<\
    \ % 9) (cons \"Nineteen\" (replace % 9))]\n                          [(< % 9)\
    \ (cons \"Twenty\" (replace % 9))]\n                          [(< % 9) (cons \"\
    Twenty-one\" (replace % 9))]\n                          [(< % 9) (cons \"Twenty-two\"\
    \ (replace % 9))]\n                          [(< % 9) (cons \"Twenty-three\" (replace\
    \ % 9))]\n                          [(< % 9) (cons \"Twenty-four\" (replace %\
    \ 9))]\n                          [(< % 9) (cons \"Twenty-five\" (replace % 9))]\n\
    \                          [(< % 9) (cons \"Twenty-six\" (replace % 9))]\n   \
    \                       [(< % 9) (cons \"Twenty-seven\" (replace % 9))]\n    \
    \                      ", "  (if (null? arr)\n      '()\n      (append (sort (filter\
    \ odd? (map length arr))) (sort (filter even? (map length arr))) (reverse (map\
    \ name arr))))\n  )\n", "  (if (empty? arr)\n      '()\n      (append (sort (map\
    \ number->name arr))\n              (reverse (sort (map number->name arr)))))\n\
    \  )\n", "  (sort arr (lambda (x y) (< (length x) (length y)))\n         (lambda\
    \ (x y) (< (length x) (length y)))\n         (lambda (x y) (< (length x) (length\
    \ y)))\n         (lambda (x y) (< (length x) (length y)))\n         (lambda (x\
    \ y) (< (length x) (length y)))\n         (lambda (x y) (< (length x) (length\
    \ y)))\n         (lambda (x y) (< (length x) (length y)))\n         (lambda (x\
    \ y) (< (length x) (length y)))\n         (lambda (x y) (< (length x) (length\
    \ y)))\n         (lambda (x y) (< (length x) (length y)))\n         (lambda (x\
    \ y) (< (length x) (length y)))\n         (lambda (x y) (< (length x) (length\
    \ y)))\n         (lambda (x y) (< (length x) (length y)))\n         (lambda (x\
    \ y) (< (length x) (length y)))\n         (lambda (x y) (< (length x) (length\
    \ y)))\n         (lambda (x y) (< (length x) (length y)))\n         (lambda (x\
    \ y) (< (length x) (length y)))\n         (lambda (x y) (< (length x) (length\
    \ y)))\n         (lambda (x y) (< (length x) (length y)))\n         (lambda (x\
    \ y) (< (length x) (length y)))\n         (lambda (x y) (< (length x) (length\
    \ y)))\n         (lambda (x y) (< (length x) (length y)))\n         (lambda (x\
    \ y) (< (length x) (length y)))\n         (lambda (x y) (< (length x) (length\
    \ y)))\n         (lambda (x y) (< (length x) (length y)))\n         (lambda (x\
    \ y) (< (length x) (length y)))\n         (lambda (x y) (< (length x) (length\
    \ y)))\n         (lambda (x y) (< (length x) (length y)))\n         (lambda (x\
    \ y) (< (length x) (length y)))\n         (lambda (x y) (< (length x) (length\
    \ y)))\n         (lambda (x y) (< (length x) (length y)))\n         (lambda (x\
    \ y) (< (length x) (length y)))\n         (lambda (x y) (< (length x) (length\
    \ y)))\n         (lambda (x y) (< (length x) (length y)))\n         (lambda (x\
    \ y) (< (length x) (length y)))\n         (lambda (x y) (< (length x) (length\
    \ y)))\n         (lambda (x y", "  (if (null? arr)\n      '()\n      (append (sort\
    \ (filter odd? (map number? (filter between? arr 1 9))))\n              (reverse\
    \ (sort (filter even? (map number? (filter between? arr 1 9))))\n            \
    \  (map by_digit (map by_name arr))))))\n", "  (cond\n    [(empty? arr) empty]\n\
    \    [(number? (first arr)) (cons (by_length_helper arr) (sort (reverse (first\
    \ arr))))]\n    [else (by_length_helper arr)]))\n", "  (sort arr (lambda (x y)\
    \ (<= (length x) (length y)))\n        (lambda (x y) (<= (length x) (length y)))\n\
    \        (lambda (x y) (<= (length x) (length y))))\n  (map #(cond [(< x 9) (cons\
    \ \"One\" (reverse (list x)))]\n              [(< x 8) (cons \"Two\" (reverse\
    \ (list x)))]\n              [(< x 7) (cons \"Three\" (reverse (list x)))]\n \
    \             [(< x 6) (cons \"Four\" (reverse (list x)))]\n              [(<\
    \ x 5) (cons \"Five\" (reverse (list x)))]\n              [(< x 4) (cons \"Six\"\
    \ (reverse (list x)))]\n              [(< x 3) (cons \"Seven\" (reverse (list\
    \ x)))]\n              [(< x 2) (cons \"Eight\" (reverse (list x)))]\n       \
    \       [(< x 1) (cons \"Nine\" (reverse (list x)))]\n              [(> x 9) (cons\
    \ \"One\" (reverse (list x)))]\n              [(> x 8) (cons \"Two\" (reverse\
    \ (list x)))]\n              [(> x 7) (cons \"Three\" (reverse (list x)))]\n \
    \             [(> x 6) (cons \"Four\" (reverse (list x)))]\n              [(>\
    \ x 5) (cons \"Five\" (reverse (list x)))]\n              [(> x 4) (cons \"Six\"\
    \ (reverse (list x)))]\n              [(> x 3) (cons \"Seven\" (reverse (list\
    \ x)))]\n              [(> x 2) (cons \"Eight\" (reverse (list x)))]\n       \
    \       [(> x 1) (cons \"Nine\" (reverse (list x)))]\n              [else (cons\
    \ \"One\" (reverse (list x)))]))\n</code>\n<|/ a tags=racket,scheme |>\n<| c |>\n\
    I like your solution, but I wonder why you used `length` instead of `length?`\n\
    <|/ c |>\n<| c |>\nI used `length` because I thought it would be more efficient\
    \ than `length?` since `length?` would have to traverse the list to find the length.\
    \ `length` would only have to do that once.\n<|/ c |>\n<| c |>\nI see. Thanks\
    \ for your answer!\n", "  (cond\n    [(empty? arr) empty]\n    [(= (length arr)\
    \ 1) (cons \"One\" arr)]\n    [(= (length arr) 2) (cons \"Two\" arr)]\n    [(=\
    \ (length arr) 3) (cons \"Three\" arr)]\n    [(= (length arr) 4) (cons \"Four\"\
    \ arr)]\n    [(= (length arr) 5) (cons \"Five\" arr)]\n    [(= (length arr) 6)\
    \ (cons \"Six\" arr)]\n    [(= (length arr) 7) (cons \"Seven\" arr)]\n    [(=\
    \ (length arr) 8) (cons \"Eight\" arr)]\n    [(= (length arr) 9) (cons \"Nine\"\
    \ arr)]\n    [else (cons (string->number (string->string (car arr))) (by_length\
    \ (cdr arr)))]))\n", "  (if (null? arr)\n      '()\n      (append (sort (filter\
    \ odd? (map number? (filter between? arr 1 9))))\n              (reverse (sort\
    \ (filter even? (map number? (filter between? arr 1 9))))\n              (map\
    \ name arr))))\n", "  (if (null? arr)\n      '()\n      (append (sort (filter\
    \ #(<= (length %) 9) (map number->string arr))) \n              (reverse (sort\
    \ (filter #(<= (length %) 9) (map number->string arr))))\n              (map number->string\
    \ arr))))\n", "  (if (null? arr)\n      '()\n      (append (sort (filter #(<=\
    \ (length %) 9) arr))\n              (reverse (sort (filter #(>= (length %) 1)\
    \ arr))\n                       (map #(cond [(< % 10) \"One\"]\n             \
    \                      [(< % 10) \"Two\"]\n                                  \
    \ [(< % 10) \"Three\"]\n                                   [(< % 10) \"Four\"\
    ]\n                                   [(< % 10) \"Five\"]\n                  \
    \                 [(< % 10) \"Six\"]\n                                   [(< %\
    \ 10) \"Seven\"]\n                                   [(< % 10) \"Eight\"]\n  \
    \                                 [(< % 10) \"Nine\"]\n                      \
    \             [else \"?\"]) arr))))\n", "  (if (null? arr)\n      '()\n      (append\
    \ (sort (filter (lambda (x) (<= (length x) 9)) arr))\n              (reverse (sort\
    \ (filter (lambda (x) (not (<= (length x) 9)) arr)))))\n  )\n)\n", "  (sort arr\
    \ (lambda (x) (<= (length x) 9)))\n  (sort arr (lambda (x) (>= (length x) 9)))\n\
    \  (map #(cond [(< x 1) \"One\"]\n              [(< x 2) \"Two\"]\n          \
    \    [(< x 3) \"Three\"]\n              [(< x 4) \"Four\"]\n              [(<\
    \ x 5) \"Five\"]\n              [(< x 6) \"Six\"]\n              [(< x 7) \"Seven\"\
    ]\n              [(< x 8) \"Eight\"]\n              [(< x 9) \"Nine\"]\n     \
    \         [else (substring \"One\" 0 x)]) arr))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
