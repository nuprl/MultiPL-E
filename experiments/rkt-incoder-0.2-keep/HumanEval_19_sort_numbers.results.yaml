name: HumanEval_19_sort_numbers
language: racket
results:
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ \"\"]\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6ssolpe0.rkt:28:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6ssolpe0.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"three\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6ssolpe0.rkt:30:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"three\
    \ five nine\"\n--------------------\n--------------------\nERROR\nname:      \
    \ check-equal?\nlocation:   /tmp/tmp6ssolpe0.rkt:31:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"five zero four seven nine\
    \ eight\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6ssolpe0.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"six five four three two one zero\"\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([number-chars (string->list\
    \ numbers)])\n    (sort number-chars <)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwalncuy8.rkt:17:4\n\
    actual:     '()\nexpected:   \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwalncuy8.rkt:18:4\n\n<: contract\
    \ violation\n  expected: real?\n  given: #\\h\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwalncuy8.rkt:19:4\n\n<: contract\
    \ violation\n  expected: real?\n  given: #\\h\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwalncuy8.rkt:20:4\n\n<: contract\
    \ violation\n  expected: real?\n  given: #\\i\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwalncuy8.rkt:21:4\n\n<: contract\
    \ violation\n  expected: real?\n  given: #\\i\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([number-list '()])\n  \
    \  (loop for [n numbers]\n          collect (if (number? n)\n                \
    \      (cons n number-list)\n                      (number-list n)))\n    (apply\
    \ append (sort number-list <))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp2hbqof18.rkt:10:5: loop: unbound identifier\n  in: loop\n  location...:\n\
    \   /tmp/tmp2hbqof18.rkt:10:5\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (if (empty? numbers)\n      '()\n\
    \      (append (sort_numbers (substring numbers 0 (string-length numbers)))\n\
    \              (cons (substring numbers 1 (string-length numbers))\n         \
    \           (sort_numbers (substring numbers (string-length numbers) (string-length\
    \ numbers))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal?\
    \ (candidate \"three\") \"three\")\n    (check-equal? (candidate \"three five\
    \ nine\") \"three five nine\")\n    (check-equal? (candidate \"five zero four\
    \ seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpl3mx_8sn.rkt:8:0: read-syntax: expected a `)` to close `(`\n  possible\
    \ cause: indentation suggests a missing `)` before line 15\n  context...:\n  \
    \ /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([numbers-split (split-string\
    \ numbers \"\\\\s+\")])\n    (cond\n      [(empty? numbers-split) numbers-split]\n\
    \      [(number? (first numbers-split)) (cons (first numbers-split) (sort_numbers\
    \ (rest numbers-split)))]\n      [else (cons (first numbers-split) (sort_numbers\
    \ (rest numbers-split)))])))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpskyw_g02.rkt:9:24: split-string: unbound identifier\n  in: split-string\n\
    \  location...:\n   /tmp/tmpskyw_g02.rkt:9:24\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([number-chars (string->list\
    \ (numbers))])\n    (sort number-chars >)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphvgi7sil.rkt:17:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmphvgi7sil.rkt:18:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: \"three\"\n--------------------\n--------------------\nERROR\nname: \
    \      check-equal?\nlocation:   /tmp/tmphvgi7sil.rkt:19:4\n\napplication: not\
    \ a procedure;\n expected a procedure that can be applied to arguments\n  given:\
    \ \"three five nine\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmphvgi7sil.rkt:20:4\n\napplication: not\
    \ a procedure;\n expected a procedure that can be applied to arguments\n  given:\
    \ \"five zero four seven nine eight\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphvgi7sil.rkt:21:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: \"six five four three two one zero\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([numbers (split-string\
    \ (string numbers) #\\Space)])\n    (cond\n      [(empty? numbers) 'zero]\n  \
    \    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n      [(equal?\
    \ (first numbers) 'one) (sort_numbers (rest numbers))]\n      [(equal? (first\
    \ numbers) 'two) (sort_numbers (rest numbers))]\n      [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n      [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n      [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n      [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \      [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n     \
    \ [(equal? (first numbers) 'eight) (sort_numbers (rest numbers))]\n      [(equal?\
    \ (first numbers) 'nine) (sort_numbers (rest numbers))]\n      [else (cons (first\
    \ numbers) (sort_numbers (rest numbers)))])))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate\
    \ \"\") \"\")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal?\
    \ (candidate \"three five nine\") \"three five nine\")\n    (check-equal? (candidate\
    \ \"five zero four seven nine eight\") \"zero four five seven eight nine\")\n\
    \    (check-equal? (candidate \"six five four three two one zero\") \"zero one\
    \ two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpz2p57o20.rkt:9:18: split-string: unbound identifier\n  in: split-string\n\
    \  location...:\n   /tmp/tmpz2p57o20.rkt:9:18\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (if (null? numbers)\n      '()\n\
    \      (append (sort_numbers (substring numbers 0 (string-length numbers)))\n\
    \              (cons (substring numbers 1 (string-length numbers))\n         \
    \           (sort_numbers (substring numbers (string-length numbers) (string-length\
    \ numbers))))))\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"three\"\
    ) \"three\")\n    (check-equal? (candidate \"three five nine\") \"three five nine\"\
    )\n    (check-equal? (candidate \"five zero four seven nine eight\") \"zero four\
    \ five seven eight nine\")\n    (check-equal? (candidate \"six five four three\
    \ two one zero\") \"zero one two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpigoins1u.rkt:8:0: read-syntax: expected a `)` to close `(`\n  possible\
    \ cause: indentation suggests a missing `)` before line 14\n  context...:\n  \
    \ /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ \"\"]\n    [(equal? (first numbers) \"zero\") (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) \"one\") (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) \"two\") (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) \"three\") (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ \"four\") (sort_numbers (rest numbers))]\n    [(equal? (first numbers) \"five\"\
    ) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) \"six\") (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) \"seven\") (sort_numbers (rest\
    \ numbers))]\n    [(equal? (first numbers) \"eight\") (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) \"nine\") (sort_numbers (rest numbers))]\n    [else\
    \ (cons (first numbers) (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n    (check-equal?\
    \ (candidate \"\") \"\")\n    (check-equal? (candidate \"three\") \"three\")\n\
    \    (check-equal? (candidate \"three five nine\") \"three five nine\")\n    (check-equal?\
    \ (candidate \"five zero four seven nine eight\") \"zero four five seven eight\
    \ nine\")\n    (check-equal? (candidate \"six five four three two one zero\")\
    \ \"zero one two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl0lr8ix7.rkt:28:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpl0lr8ix7.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"three\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpl0lr8ix7.rkt:30:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"three\
    \ five nine\"\n--------------------\n--------------------\nERROR\nname:      \
    \ check-equal?\nlocation:   /tmp/tmpl0lr8ix7.rkt:31:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"five zero four seven nine\
    \ eight\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpl0lr8ix7.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"six five four three two one zero\"\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([number-chars (string->list\
    \ (numbers))])\n    (sort number-chars >)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb4fxvbxd.rkt:17:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpb4fxvbxd.rkt:18:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: \"three\"\n--------------------\n--------------------\nERROR\nname: \
    \      check-equal?\nlocation:   /tmp/tmpb4fxvbxd.rkt:19:4\n\napplication: not\
    \ a procedure;\n expected a procedure that can be applied to arguments\n  given:\
    \ \"three five nine\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpb4fxvbxd.rkt:20:4\n\napplication: not\
    \ a procedure;\n expected a procedure that can be applied to arguments\n  given:\
    \ \"five zero four seven nine eight\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpb4fxvbxd.rkt:21:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: \"six five four three two one zero\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n  \
    \  [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpsypixsze.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([number-list '()])\n  \
    \  (loop for number in numbers\n          for i from 0 to (length numbers)\n \
    \         collect (cond [(number-list-empty? number-list) (cons number number-list)]\n\
    \                      [(number-list-contains-number? number number-list) (cons\
    \ number number-list)]\n                      [else (cons number number-list)])))\n\
    \  ;; number-list now contains all numbers in sorted order\n  (string-append (number-list-reverse\
    \ number-list) \" \"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\")\n\
    \    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpscs2jhly.rkt:10:5: loop: unbound identifier\n  in: loop\n  location...:\n\
    \   /tmp/tmpscs2jhly.rkt:10:5\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) 'zero]\n    [(equal? (first numbers)\
    \ 'one) 'one]\n    [(equal? (first numbers) 'two) 'two]\n    [(equal? (first numbers)\
    \ 'three) 'three]\n    [(equal? (first numbers) 'four) 'four]\n    [(equal? (first\
    \ numbers) 'five) 'five]\n    [(equal? (first numbers) 'six) 'six]\n    [(equal?\
    \ (first numbers) 'seven) 'seven]\n    [(equal? (first numbers) 'eight) 'eight]\n\
    \    [(equal? (first numbers) 'nine) 'nine]\n    [else (cons (first numbers) (sort_numbers\
    \ (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\")\n\
    \    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpeui1lw1w.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([numbers-to-sort (number-list\
    \ numbers)])\n    (sort numbers-to-sort <)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate\
    \ \"\") \"\")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal?\
    \ (candidate \"three five nine\") \"three five nine\")\n    (check-equal? (candidate\
    \ \"five zero four seven nine eight\") \"zero four five seven eight nine\")\n\
    \    (check-equal? (candidate \"six five four three two one zero\") \"zero one\
    \ two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpay3zcrl5.rkt:9:26: number-list: unbound identifier\n  in: number-list\n\
    \  location...:\n   /tmp/tmpay3zcrl5.rkt:9:26\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([numbers (string->list\
    \ numbers)\n         numbers-sorted (sort numbers '<)])\n    (string->list numbers-sorted)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"three\"\
    ) \"three\")\n    (check-equal? (candidate \"three five nine\") \"three five nine\"\
    )\n    (check-equal? (candidate \"five zero four seven nine eight\") \"zero four\
    \ five seven eight nine\")\n    (check-equal? (candidate \"six five four three\
    \ two one zero\") \"zero one two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpeb8gn83j.rkt:9:8: let: bad syntax (not an identifier and expression\
    \ for a binding)\n  at: (numbers (string->list numbers) numbers-sorted (sort numbers\
    \ (quote <)))\n  in: (let ((numbers (string->list numbers) numbers-sorted (sort\
    \ numbers (quote <)))) (string->list numbers-sorted))\n  location...:\n   /tmp/tmpeb8gn83j.rkt:9:8\n\
    \  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/private/qq-and-or.rkt:101:61:\
    \ loop\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/private/qq-and-or.rkt:50:20:\
    \ go\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([number-chars (string->list\
    \ numbers)]\n        [number-char-indices (list->vector (map (lambda (c) (vector-ref\
    \ number-chars c)) number-chars))]\n        [number-char-lengths (vector-length\
    \ (vector-ref number-chars 0))])\n    (let ([number-char-indices (sort number-char-indices\
    \ <))]\n      (let ([number-char-lengths (vector-ref number-chars 0)])\n     \
    \   (let ([numbers (make-vector number-char-lengths #f)])\n          (vector-set!\
    \ numbers 0 0)\n          (loop for i from 0 to (vector-length number-char-indices)\n\
    \            for j from 0 to (vector-length numbers)\n              when (< (vector-ref\
    \ number-char-indices i) j)\n                do (vector-set! numbers j (vector-ref\
    \ numbers j))\n                do (vector-set! numbers j (+ (vector-ref numbers\
    \ j) 1))\n              when (> (vector-ref number-char-indices i) j)\n      \
    \          do (vector-set! numbers j (- (vector-ref numbers j) 1))\n         \
    \       do (vector-set! numbers j (+ (vector-ref numbers j) 1))\n            \
    \  when (= i j)\n                do (vector-set! numbers j (vector-ref numbers\
    \ j))\n                do (vector-set! numbers j (+ (vector-ref numbers j) 1))\n\
    \              when (= (vector-ref number-char-indices i) j)\n               \
    \ do (vector-set! numbers j (- (vector-ref numbers j) 1))\n                do\
    \ (vector-set! numbers j (+ (vector-ref numbers j) 1))\n              when (=\
    \ (vector-ref number-char-indices i) j)\n                do (vector-set! numbers\
    \ j (+ (vector-ref numbers j) 1))\n                do (vector-set! numbers j (+\
    \ (vector-ref numbers j) 1))\n              when (= (vector-ref number-char-indices\
    \ i) j)\n                do (vector-set! numbers j (- (vector-ref numbers j) 1))\n\
    \                do (vector-set! numbers j (+ (vector-ref numbers j) 1))\n   \
    \           when (= (vector-ref number-char-indices i) j)\n                do\
    \ (vector-set! numbers j (+ (vector-ref numbers j) 1))\n                do (vector-set!\
    \ numbers j (+ (\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal?\
    \ (candidate \"three\") \"three\")\n    (check-equal? (candidate \"three five\
    \ nine\") \"three five nine\")\n    (check-equal? (candidate \"five zero four\
    \ seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpxum87lue.rkt:12:59: read-syntax: missing `]` to close preceding\
    \ `[`, found instead `)`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ \"\"]\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo_g0fy0s.rkt:28:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpo_g0fy0s.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"three\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo_g0fy0s.rkt:30:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"three\
    \ five nine\"\n--------------------\n--------------------\nERROR\nname:      \
    \ check-equal?\nlocation:   /tmp/tmpo_g0fy0s.rkt:31:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"five zero four seven nine\
    \ eight\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpo_g0fy0s.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"six five four three two one zero\"\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n  \
    \  [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpbhqd5ted.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n  \
    \  [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpobjn_agn.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ \"\"]\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprzmprsdv.rkt:28:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprzmprsdv.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"three\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprzmprsdv.rkt:30:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"three\
    \ five nine\"\n--------------------\n--------------------\nERROR\nname:      \
    \ check-equal?\nlocation:   /tmp/tmprzmprsdv.rkt:31:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"five zero four seven nine\
    \ eight\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprzmprsdv.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"six five four three two one zero\"\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n  \
    \  [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp4r5x5m4j.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (if (empty? numbers)\n      '()\n\
    \      (append (sort_numbers (substring numbers 0 -1))\n              (cons (substring\
    \ numbers -1)\n                    (sort_numbers (substring numbers (string-length\
    \ numbers))))))\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal?\
    \ (candidate \"three\") \"three\")\n    (check-equal? (candidate \"three five\
    \ nine\") \"three five nine\")\n    (check-equal? (candidate \"five zero four\
    \ seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmujkbqf9.rkt:21:4\n\
    \nsubstring: contract violation\n  expected: exact-nonnegative-integer?\n  given:\
    \ -1\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpmujkbqf9.rkt:22:4\n\nsubstring: contract violation\n  expected:\
    \ exact-nonnegative-integer?\n  given: -1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmujkbqf9.rkt:23:4\n\nsubstring:\
    \ contract violation\n  expected: exact-nonnegative-integer?\n  given: -1\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmujkbqf9.rkt:24:4\n\
    \nsubstring: contract violation\n  expected: exact-nonnegative-integer?\n  given:\
    \ -1\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpmujkbqf9.rkt:25:4\n\nsubstring: contract violation\n  expected:\
    \ exact-nonnegative-integer?\n  given: -1\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([number-list '()])\n  \
    \  (loop for [n numbers]\n          collect (cond [(number? n) (cons n number-list)]\n\
    \                      [(string=? (number->string n) 'zero) (cons 'zero number-list)]\n\
    \                      [(string=? (number->string n) 'one) (cons 'one number-list)]\n\
    \                      [(string=? (number->string n) 'two) (cons 'two number-list)]\n\
    \                      [(string=? (number->string n) 'three) (cons 'three number-list)]\n\
    \                      [(string=? (number->string n) 'four) (cons 'four number-list)]\n\
    \                      [(string=? (number->string n) 'five) (cons 'five number-list)]\n\
    \                      [(string=? (number->string n) 'six) (cons 'six number-list)]\n\
    \                      [(string=? (number->string n) 'seven) (cons 'seven number-list)]\n\
    \                      [(string=? (number->string n) 'eight) (cons 'eight number-list)]\n\
    \                      [(string=? (number->string n) 'nine) (cons 'nine number-list)]\n\
    \                      [else (cons n number-list)])))\n    (string-append (sort\
    \ number-list <) \" \"))\n</code>\n<|/ a |>\n<| a tags=racket,scheme |>\nHere's\
    \ a solution that uses only built-in procedures and no helper functions:\n<code>\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"three\"\
    ) \"three\")\n    (check-equal? (candidate \"three five nine\") \"three five nine\"\
    )\n    (check-equal? (candidate \"five zero four seven nine eight\") \"zero four\
    \ five seven eight nine\")\n    (check-equal? (candidate \"six five four three\
    \ two one zero\") \"zero one two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpwlm2vy51.rkt:27:28: only: misuse of unit import keyword\n  in:\
    \ only\n  location...:\n   /tmp/tmpwlm2vy51.rkt:27:28\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/wrap-modbeg.rkt:46:4\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ \"\"]\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmjbwqb_3.rkt:28:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpmjbwqb_3.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"three\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmjbwqb_3.rkt:30:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"three\
    \ five nine\"\n--------------------\n--------------------\nERROR\nname:      \
    \ check-equal?\nlocation:   /tmp/tmpmjbwqb_3.rkt:31:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"five zero four seven nine\
    \ eight\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpmjbwqb_3.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"six five four three two one zero\"\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (if (null? numbers)\n      '()\n\
    \      (append (sort_numbers (substring numbers 0 -1))\n              (cons (substring\
    \ numbers -1)\n                    (sort_numbers (substring numbers (string-length\
    \ numbers) -1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal?\
    \ (candidate \"three\") \"three\")\n    (check-equal? (candidate \"three five\
    \ nine\") \"three five nine\")\n    (check-equal? (candidate \"five zero four\
    \ seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp039kjxah.rkt:20:4\n\
    \nsubstring: contract violation\n  expected: exact-nonnegative-integer?\n  given:\
    \ -1\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp039kjxah.rkt:21:4\n\nsubstring: contract violation\n  expected:\
    \ exact-nonnegative-integer?\n  given: -1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp039kjxah.rkt:22:4\n\nsubstring:\
    \ contract violation\n  expected: exact-nonnegative-integer?\n  given: -1\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp039kjxah.rkt:23:4\n\
    \nsubstring: contract violation\n  expected: exact-nonnegative-integer?\n  given:\
    \ -1\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp039kjxah.rkt:24:4\n\nsubstring: contract violation\n  expected:\
    \ exact-nonnegative-integer?\n  given: -1\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) 'zero]\n    [(equal? (first numbers)\
    \ 'one) 'one]\n    [(equal? (first numbers) 'two) 'two]\n    [(equal? (first numbers)\
    \ 'three) 'three]\n    [(equal? (first numbers) 'four) 'four]\n    [(equal? (first\
    \ numbers) 'five) 'five]\n    [(equal? (first numbers) 'six) 'six]\n    [(equal?\
    \ (first numbers) 'seven) 'seven]\n    [(equal? (first numbers) 'eight) 'eight]\n\
    \    [(equal? (first numbers) 'nine) 'nine]\n    [else (cons (first numbers) (sort_numbers\
    \ (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\")\n\
    \    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpvhu8qtj0.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n  \
    \  [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpiftoon8_.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) 'zero]\n    [(equal? (first numbers)\
    \ 'one) 'one]\n    [(equal? (first numbers) 'two) 'two]\n    [(equal? (first numbers)\
    \ 'three) 'three]\n    [(equal? (first numbers) 'four) 'four]\n    [(equal? (first\
    \ numbers) 'five) 'five]\n    [(equal? (first numbers) 'six) 'six]\n    [(equal?\
    \ (first numbers) 'seven) 'seven]\n    [(equal? (first numbers) 'eight) 'eight]\n\
    \    [(equal? (first numbers) 'nine) 'nine]\n    [else (cons (first numbers) (sort_numbers\
    \ (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\")\n\
    \    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpbmbj8gut.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ \"\"]\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtlit7o_.rkt:28:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpjtlit7o_.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"three\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtlit7o_.rkt:30:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"three\
    \ five nine\"\n--------------------\n--------------------\nERROR\nname:      \
    \ check-equal?\nlocation:   /tmp/tmpjtlit7o_.rkt:31:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"five zero four seven nine\
    \ eight\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpjtlit7o_.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"six five four three two one zero\"\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (if (empty? numbers)\n      '()\n\
    \      (append (sort_numbers (substring numbers 0 -1))\n              (cons (car\
    \ numbers)\n                    (sort_numbers (substring numbers (+ 0 (string-length\
    \ numbers))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal?\
    \ (candidate \"three\") \"three\")\n    (check-equal? (candidate \"three five\
    \ nine\") \"three five nine\")\n    (check-equal? (candidate \"five zero four\
    \ seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp2lp4anq.rkt:20:4\n\
    \nsubstring: contract violation\n  expected: exact-nonnegative-integer?\n  given:\
    \ -1\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp2lp4anq.rkt:21:4\n\nsubstring: contract violation\n  expected:\
    \ exact-nonnegative-integer?\n  given: -1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp2lp4anq.rkt:22:4\n\nsubstring:\
    \ contract violation\n  expected: exact-nonnegative-integer?\n  given: -1\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp2lp4anq.rkt:23:4\n\
    \nsubstring: contract violation\n  expected: exact-nonnegative-integer?\n  given:\
    \ -1\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp2lp4anq.rkt:24:4\n\nsubstring: contract violation\n  expected:\
    \ exact-nonnegative-integer?\n  given: -1\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([numbers-list (string->list\
    \ numbers)])\n    (sort numbers-list <)\n    (string->list numbers))\n  )\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"three\"\
    ) \"three\")\n    (check-equal? (candidate \"three five nine\") \"three five nine\"\
    )\n    (check-equal? (candidate \"five zero four seven nine eight\") \"zero four\
    \ five seven eight nine\")\n    (check-equal? (candidate \"six five four three\
    \ two one zero\") \"zero one two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw_tt2t8_.rkt:19:4\n\
    actual:     '()\nexpected:   \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw_tt2t8_.rkt:20:4\n\n<: contract\
    \ violation\n  expected: real?\n  given: #\\h\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw_tt2t8_.rkt:21:4\n\n<: contract\
    \ violation\n  expected: real?\n  given: #\\h\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw_tt2t8_.rkt:22:4\n\n<: contract\
    \ violation\n  expected: real?\n  given: #\\i\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw_tt2t8_.rkt:23:4\n\n<: contract\
    \ violation\n  expected: real?\n  given: #\\i\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) 'zero]\n    [(equal? (first numbers)\
    \ 'one) 'one]\n    [(equal? (first numbers) 'two) 'two]\n    [(equal? (first numbers)\
    \ 'three) 'three]\n    [(equal? (first numbers) 'four) 'four]\n    [(equal? (first\
    \ numbers) 'five) 'five]\n    [(equal? (first numbers) 'six) 'six]\n    [(equal?\
    \ (first numbers) 'seven) 'seven]\n    [(equal? (first numbers) 'eight) 'eight]\n\
    \    [(equal? (first numbers) 'nine) 'nine]\n    [else (cons (first numbers) (sort_numbers\
    \ (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\")\n\
    \    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp038hibm1.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) 'zero]\n    [(equal? (first numbers)\
    \ 'one) 'one]\n    [(equal? (first numbers) 'two) 'two]\n    [(equal? (first numbers)\
    \ 'three) 'three]\n    [(equal? (first numbers) 'four) 'four]\n    [(equal? (first\
    \ numbers) 'five) 'five]\n    [(equal? (first numbers) 'six) 'six]\n    [(equal?\
    \ (first numbers) 'seven) 'seven]\n    [(equal? (first numbers) 'eight) 'eight]\n\
    \    [(equal? (first numbers) 'nine) 'nine]\n    [else (cons (first numbers) (sort_numbers\
    \ (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\")\n\
    \    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp_t4zpng9.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([nums (split-string numbers)])\n\
    \    (sort nums <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal?\
    \ (candidate \"three\") \"three\")\n    (check-equal? (candidate \"three five\
    \ nine\") \"three five nine\")\n    (check-equal? (candidate \"five zero four\
    \ seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp4wz2vjy0.rkt:9:15: split-string: unbound identifier\n  in: split-string\n\
    \  location...:\n   /tmp/tmp4wz2vjy0.rkt:9:15\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([numbers-list (split-string\
    \ numbers)])\n    (sort numbers-list <)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp25di36n_.rkt:9:23: split-string: unbound identifier\n  in: split-string\n\
    \  location...:\n   /tmp/tmp25di36n_.rkt:9:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n  \
    \  [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpsxda_yw9.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([numbers (string->list\
    \ numbers)])\n    (sort numbers <)\n    (string->list numbers)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n    (check-equal?\
    \ (candidate \"\") \"\")\n    (check-equal? (candidate \"three\") \"three\")\n\
    \    (check-equal? (candidate \"three five nine\") \"three five nine\")\n    (check-equal?\
    \ (candidate \"five zero four seven nine eight\") \"zero four five seven eight\
    \ nine\")\n    (check-equal? (candidate \"six five four three two one zero\")\
    \ \"zero one two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwo7a__v.rkt:18:4\n\
    \nstring->list: contract violation\n  expected: string?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwo7a__v.rkt:19:4\n\
    \n<: contract violation\n  expected: real?\n  given: #\\h\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwo7a__v.rkt:20:4\n\
    \n<: contract violation\n  expected: real?\n  given: #\\h\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwo7a__v.rkt:21:4\n\
    \n<: contract violation\n  expected: real?\n  given: #\\i\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwo7a__v.rkt:22:4\n\
    \n<: contract violation\n  expected: real?\n  given: #\\i\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([numbers (split-string\
    \ (string numbers) #\" \")])\n    (cond\n      [(empty? numbers) \"\"]\n     \
    \ [(equal? (first numbers) \"zero\") (sort_numbers (rest numbers))]\n      [(equal?\
    \ (first numbers) \"one\") (sort_numbers (rest numbers))]\n      [(equal? (first\
    \ numbers) \"two\") (sort_numbers (rest numbers))]\n      [(equal? (first numbers)\
    \ \"three\") (sort_numbers (rest numbers))]\n      [(equal? (first numbers) \"\
    four\") (sort_numbers (rest numbers))]\n      [(equal? (first numbers) \"five\"\
    ) (sort_numbers (rest numbers))]\n      [(equal? (first numbers) \"six\") (sort_numbers\
    \ (rest numbers))]\n      [(equal? (first numbers) \"seven\") (sort_numbers (rest\
    \ numbers))]\n      [(equal? (first numbers) \"eight\") (sort_numbers (rest numbers))]\n\
    \      [(equal? (first numbers) \"nine\") (sort_numbers (rest numbers))]\n   \
    \   [else (cons (first numbers) (sort_numbers (rest numbers)))])))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"three\"\
    ) \"three\")\n    (check-equal? (candidate \"three five nine\") \"three five nine\"\
    )\n    (check-equal? (candidate \"five zero four seven nine eight\") \"zero four\
    \ five seven eight nine\")\n    (check-equal? (candidate \"six five four three\
    \ two one zero\") \"zero one two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpib34rw8n.rkt:9:18: split-string: unbound identifier\n  in: split-string\n\
    \  location...:\n   /tmp/tmpib34rw8n.rkt:9:18\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([numbers (split-string\
    \ numbers)\n         number-length (length numbers)\n         number-array (make-array\
    \ number-length :initial-contents '())])\n    (do ([i 0 (+ i number-length)]\n\
    \         [number numbers (+ i number-length)]\n         [number-array (subseq\
    \ number-array i number-length)])\n        ((< i number-length)\n         (set!\
    \ number-array (append number-array (list number))))\n    (reverse number-array)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"three\"\
    ) \"three\")\n    (check-equal? (candidate \"three five nine\") \"three five nine\"\
    )\n    (check-equal? (candidate \"five zero four seven nine eight\") \"zero four\
    \ five seven eight nine\")\n    (check-equal? (candidate \"six five four three\
    \ two one zero\") \"zero one two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp_oroknt7.rkt:8:0: read-syntax: expected a `)` to close `(`\n  possible\
    \ cause: indentation suggests a missing `)` before line 19\n  context...:\n  \
    \ /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n  \
    \  [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp18l5n6h2.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (define (helper numbers current-number)\n\
    \    (cond\n      [(empty? numbers) current-number]\n      [(equal? (first numbers)\
    \ current-number) \n       (helper (rest numbers) (first numbers))]\n      [else\
    \ \n       (helper (rest numbers) (first numbers))]))\n  (helper numbers 0))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"three\"\
    ) \"three\")\n    (check-equal? (candidate \"three five nine\") \"three five nine\"\
    )\n    (check-equal? (candidate \"five zero four seven nine eight\") \"zero four\
    \ five seven eight nine\")\n    (check-equal? (candidate \"six five four three\
    \ two one zero\") \"zero one two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf5qga421.rkt:23:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpf5qga421.rkt:24:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"three\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpf5qga421.rkt:25:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"three\
    \ five nine\"\n--------------------\n--------------------\nERROR\nname:      \
    \ check-equal?\nlocation:   /tmp/tmpf5qga421.rkt:26:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"five zero four seven nine\
    \ eight\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpf5qga421.rkt:27:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"six five four three two one zero\"\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n  \
    \  [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpyyygtc5k.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ \"\"]\n    [(equal? (first numbers) \"zero\") (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) \"one\") (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) \"two\") (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) \"three\") (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ \"four\") (sort_numbers (rest numbers))]\n    [(equal? (first numbers) \"five\"\
    ) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) \"six\") (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) \"seven\") (sort_numbers (rest\
    \ numbers))]\n    [(equal? (first numbers) \"eight\") (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) \"nine\") (sort_numbers (rest numbers))]\n    [else\
    \ (cons (first numbers) (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n    (check-equal?\
    \ (candidate \"\") \"\")\n    (check-equal? (candidate \"three\") \"three\")\n\
    \    (check-equal? (candidate \"three five nine\") \"three five nine\")\n    (check-equal?\
    \ (candidate \"five zero four seven nine eight\") \"zero four five seven eight\
    \ nine\")\n    (check-equal? (candidate \"six five four three two one zero\")\
    \ \"zero one two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1phkzpiu.rkt:28:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1phkzpiu.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"three\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1phkzpiu.rkt:30:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"three\
    \ five nine\"\n--------------------\n--------------------\nERROR\nname:      \
    \ check-equal?\nlocation:   /tmp/tmp1phkzpiu.rkt:31:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"five zero four seven nine\
    \ eight\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1phkzpiu.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"six five four three two one zero\"\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ \"\"]\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkkpudpd2.rkt:28:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpkkpudpd2.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"three\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkkpudpd2.rkt:30:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"three\
    \ five nine\"\n--------------------\n--------------------\nERROR\nname:      \
    \ check-equal?\nlocation:   /tmp/tmpkkpudpd2.rkt:31:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"five zero four seven nine\
    \ eight\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpkkpudpd2.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"six five four three two one zero\"\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n  \
    \  [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpfe9pidpc.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (if (empty? numbers)\n      '()\n\
    \      (append (sort_numbers (substring numbers 0 -1))\n              (cons (car\
    \ numbers)\n                    (sort_numbers (substring numbers (+ 0 (string-length\
    \ numbers))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal?\
    \ (candidate \"three\") \"three\")\n    (check-equal? (candidate \"three five\
    \ nine\") \"three five nine\")\n    (check-equal? (candidate \"five zero four\
    \ seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyw5sa8q_.rkt:20:4\n\
    \nsubstring: contract violation\n  expected: exact-nonnegative-integer?\n  given:\
    \ -1\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpyw5sa8q_.rkt:21:4\n\nsubstring: contract violation\n  expected:\
    \ exact-nonnegative-integer?\n  given: -1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyw5sa8q_.rkt:22:4\n\nsubstring:\
    \ contract violation\n  expected: exact-nonnegative-integer?\n  given: -1\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyw5sa8q_.rkt:23:4\n\
    \nsubstring: contract violation\n  expected: exact-nonnegative-integer?\n  given:\
    \ -1\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpyw5sa8q_.rkt:24:4\n\nsubstring: contract violation\n  expected:\
    \ exact-nonnegative-integer?\n  given: -1\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n  \
    \  [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp6cw_i5xn.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([numbers (split-string\
    \ numbers)])\n    (sort numbers (lambda (a b) (< (string-to-number a) (string-to-number\
    \ b)))))\n  (string-join numbers))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp68upamd_.rkt:9:18: split-string: unbound identifier\n  in: split-string\n\
    \  location...:\n   /tmp/tmp68upamd_.rkt:9:18\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n  \
    \  [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp5y0be1a_.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n  \
    \  [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp8rj__75x.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ((numbers-sorted (make-array\
    \ (length numbers) #:element-type 'string)))\n    (let loop ((i 0) (j 0))\n  \
    \    (if (< i j)\n          (set! numbers-sorted (append numbers-sorted (list\
    \ numbers (substring numbers (+ i 1) (+ j 1)))))\n          (loop (+ i 1) (+ j\
    \ 1)))))\n    (reverse numbers-sorted)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpd_24hl4j.rkt:14:29: read-syntax: unexpected `)`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (if (empty? numbers)\n      '()\n\
    \      (append (sort_numbers (substring numbers 0 (string-length numbers)))\n\
    \              (list (substring numbers (string-length numbers) 1)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"three\"\
    ) \"three\")\n    (check-equal? (candidate \"three five nine\") \"three five nine\"\
    )\n    (check-equal? (candidate \"five zero four seven nine eight\") \"zero four\
    \ five seven eight nine\")\n    (check-equal? (candidate \"six five four three\
    \ two one zero\") \"zero one two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n  \
    \  [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpqjh7tor8.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([number-list '()])\n  \
    \  (loop for [n numbers]\n          collect (cond [(number? n) (cons n number-list)]\n\
    \                      [(char=? (car n) '-') (cons n (reverse number-list))]\n\
    \                      [else (cons n (number-list '()))]))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n    (check-equal?\
    \ (candidate \"\") \"\")\n    (check-equal? (candidate \"three\") \"three\")\n\
    \    (check-equal? (candidate \"three five nine\") \"three five nine\")\n    (check-equal?\
    \ (candidate \"five zero four seven nine eight\") \"zero four five seven eight\
    \ nine\")\n    (check-equal? (candidate \"six five four three two one zero\")\
    \ \"zero one two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp7piqz5jy.rkt:12:42: read-syntax: unexpected `)`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n  \
    \  [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpq112ny50.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n  \
    \  [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp5dfm8adu.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n  \
    \  [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpb38rwyht.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (define (helper numbers count)\n\
    \    (cond\n      [(empty? numbers) numbers]\n      [(equal? (first numbers) 'zero)\
    \ (cons (first numbers) (helper (rest numbers) (+ count 1)))]\n      [(equal?\
    \ (first numbers) 'one) (cons (first numbers) (helper (rest numbers) (+ count\
    \ 1)))]\n      [(equal? (first numbers) 'two) (cons (first numbers) (helper (rest\
    \ numbers) (+ count 1)))]\n      [(equal? (first numbers) 'three) (cons (first\
    \ numbers) (helper (rest numbers) (+ count 1)))]\n      [(equal? (first numbers)\
    \ 'four) (cons (first numbers) (helper (rest numbers) (+ count 1)))]\n      [(equal?\
    \ (first numbers) 'five) (cons (first numbers) (helper (rest numbers) (+ count\
    \ 1)))]\n      [(equal? (first numbers) 'six) (cons (first numbers) (helper (rest\
    \ numbers) (+ count 1)))]\n      [(equal? (first numbers) 'seven) (cons (first\
    \ numbers) (helper (rest numbers) (+ count 1)))]\n      [(equal? (first numbers)\
    \ 'eight) (cons (first numbers) (helper (rest numbers) (+ count 1)))]\n      [(equal?\
    \ (first numbers) 'nine) (cons (first numbers) (helper (rest numbers) (+ count\
    \ 1)))]\n      [else (cons (first numbers) (helper (rest numbers) (+ count 1)))]))\n\
    \  (helper numbers 0))\n</code>\n<|/ a tags=racket,scheme |>\n<| a tags=racket,scheme\
    \ |>\n<code>\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ sort_numbers))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal?\
    \ (candidate \"three\") \"three\")\n    (check-equal? (candidate \"three five\
    \ nine\") \"three five nine\")\n    (check-equal? (candidate \"five zero four\
    \ seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpkcc_chij.rkt:24:0: </code>: unbound identifier\n  in: </code>\n\
    \  location...:\n   /tmp/tmpkcc_chij.rkt:24:0\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([nums (split-string numbers)])\n\
    \    (cond\n      [(empty? nums) '']\n      [(equal? (first nums) 'zero) (sort_numbers\
    \ (rest nums))]\n      [(equal? (first nums) 'one) (sort_numbers (rest nums))]\n\
    \      [(equal? (first nums) 'two) (sort_numbers (rest nums))]\n      [(equal?\
    \ (first nums) 'three) (sort_numbers (rest nums))]\n      [(equal? (first nums)\
    \ 'four) (sort_numbers (rest nums))]\n      [(equal? (first nums) 'five) (sort_numbers\
    \ (rest nums))]\n      [(equal? (first nums) 'six) (sort_numbers (rest nums))]\n\
    \      [(equal? (first nums) 'seven) (sort_numbers (rest nums))]\n      [(equal?\
    \ (first nums) 'eight) (sort_numbers (rest nums))]\n      [(equal? (first nums)\
    \ 'nine) (sort_numbers (rest nums))]\n      [else (cons (first nums) (sort_numbers\
    \ (rest nums)))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal?\
    \ (candidate \"three\") \"three\")\n    (check-equal? (candidate \"three five\
    \ nine\") \"three five nine\")\n    (check-equal? (candidate \"five zero four\
    \ seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpbzwxe3rb.rkt:11:23: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) 'zero ']\n    [(equal? (first numbers)\
    \ 'one) 'one ']\n    [(equal? (first numbers) 'two) 'two ']\n    [(equal? (first\
    \ numbers) 'three) 'three ']\n    [(equal? (first numbers) 'four) 'four ']\n \
    \   [(equal? (first numbers) 'five) 'five ']\n    [(equal? (first numbers) 'six)\
    \ 'six ']\n    [(equal? (first numbers) 'seven) 'seven ']\n    [(equal? (first\
    \ numbers) 'eight) 'eight ']\n    [(equal? (first numbers) 'nine) 'nine ']\n \
    \   [else (cons (first numbers) (sort_numbers (rest numbers)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"three\"\
    ) \"three\")\n    (check-equal? (candidate \"three five nine\") \"three five nine\"\
    )\n    (check-equal? (candidate \"five zero four seven nine eight\") \"zero four\
    \ five seven eight nine\")\n    (check-equal? (candidate \"six five four three\
    \ two one zero\") \"zero one two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpritsfuld.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ \"\"]\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4t0uq31j.rkt:28:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp4t0uq31j.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"three\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4t0uq31j.rkt:30:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"three\
    \ five nine\"\n--------------------\n--------------------\nERROR\nname:      \
    \ check-equal?\nlocation:   /tmp/tmp4t0uq31j.rkt:31:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"five zero four seven nine\
    \ eight\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp4t0uq31j.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"six five four three two one zero\"\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n  \
    \  [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpwj65dwub.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n  \
    \  [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp26v1g72y.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ \"\"]\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbj4msy_5.rkt:28:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbj4msy_5.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"three\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbj4msy_5.rkt:30:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"three\
    \ five nine\"\n--------------------\n--------------------\nERROR\nname:      \
    \ check-equal?\nlocation:   /tmp/tmpbj4msy_5.rkt:31:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"five zero four seven nine\
    \ eight\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbj4msy_5.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"six five four three two one zero\"\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ \"\"]\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkk4z63e1.rkt:28:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpkk4z63e1.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"three\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkk4z63e1.rkt:30:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"three\
    \ five nine\"\n--------------------\n--------------------\nERROR\nname:      \
    \ check-equal?\nlocation:   /tmp/tmpkk4z63e1.rkt:31:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"five zero four seven nine\
    \ eight\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpkk4z63e1.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"six five four three two one zero\"\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ \"\"]\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdyqhutmd.rkt:28:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpdyqhutmd.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"three\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdyqhutmd.rkt:30:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"three\
    \ five nine\"\n--------------------\n--------------------\nERROR\nname:      \
    \ check-equal?\nlocation:   /tmp/tmpdyqhutmd.rkt:31:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"five zero four seven nine\
    \ eight\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpdyqhutmd.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"six five four three two one zero\"\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n  \
    \  [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpjzmi983k.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (define (helper numbers sorted)\n\
    \    (if (null? numbers)\n        sorted\n        (helper (cdr numbers)\n    \
    \            (cons (car numbers)\n                      (if (< (car numbers) (car\
    \ sorted))\n                          sorted\n                          (cons\
    \ (car numbers) sorted))))))\n  (helper numbers nil))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n    (check-equal?\
    \ (candidate \"\") \"\")\n    (check-equal? (candidate \"three\") \"three\")\n\
    \    (check-equal? (candidate \"three five nine\") \"three five nine\")\n    (check-equal?\
    \ (candidate \"five zero four seven nine eight\") \"zero four five seven eight\
    \ nine\")\n    (check-equal? (candidate \"six five four three two one zero\")\
    \ \"zero one two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpgq_eatov.rkt:17:18: nil: unbound identifier\n  in: nil\n  location...:\n\
    \   /tmp/tmpgq_eatov.rkt:17:18\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ((numbers (string->list\
    \ numbers)))\n    (sort numbers (lambda (a b) (< (string->number a) (string->number\
    \ b)))))\n  (apply string-join (map string->string numbers))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n    (check-equal?\
    \ (candidate \"\") \"\")\n    (check-equal? (candidate \"three\") \"three\")\n\
    \    (check-equal? (candidate \"three five nine\") \"three five nine\")\n    (check-equal?\
    \ (candidate \"five zero four seven nine eight\") \"zero four five seven eight\
    \ nine\")\n    (check-equal? (candidate \"six five four three two one zero\")\
    \ \"zero one two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpclh4hkw9.rkt:11:51: read-syntax: unexpected `)`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (define (helper n acc)\n    (cond\n\
    \      [(empty? n) acc]\n      [(equal? (first n) 'zero) (helper n (cons (first\
    \ n) acc))]\n      [(equal? (first n) 'one) (helper n (cons (first n) acc))]\n\
    \      [(equal? (first n) 'two) (helper n (cons (first n) acc))]\n      [(equal?\
    \ (first n) 'three) (helper n (cons (first n) acc))]\n      [(equal? (first n)\
    \ 'four) (helper n (cons (first n) acc))]\n      [(equal? (first n) 'five) (helper\
    \ n (cons (first n) acc))]\n      [(equal? (first n) 'six) (helper n (cons (first\
    \ n) acc))]\n      [(equal? (first n) 'seven) (helper n (cons (first n) acc))]\n\
    \      [(equal? (first n) 'eight) (helper n (cons (first n) acc))]\n      [(equal?\
    \ (first n) 'nine) (helper n (cons (first n) acc))]\n      [else (helper n (cons\
    \ (first n) acc))]))\n  (helper numbers empty))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate\
    \ \"\") \"\")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal?\
    \ (candidate \"three five nine\") \"three five nine\")\n    (check-equal? (candidate\
    \ \"five zero four seven nine eight\") \"zero four five seven eight nine\")\n\
    \    (check-equal? (candidate \"six five four three two one zero\") \"zero one\
    \ two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp98dd1843.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp98dd1843.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"three\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp98dd1843.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"three\
    \ five nine\"\n--------------------\n--------------------\nERROR\nname:      \
    \ check-equal?\nlocation:   /tmp/tmp98dd1843.rkt:33:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"five zero four seven nine\
    \ eight\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp98dd1843.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"six five four three two one zero\"\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([number-list '()])\n  \
    \  (cond\n      [(empty? numbers) number-list]\n      [(number? (first numbers))\
    \ (cons (first numbers) number-list)]\n      [else (cons (first numbers)\n   \
    \               (sort_numbers (rest numbers)))])))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate\
    \ \"\") \"\")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal?\
    \ (candidate \"three five nine\") \"three five nine\")\n    (check-equal? (candidate\
    \ \"five zero four seven nine eight\") \"zero four five seven eight nine\")\n\
    \    (check-equal? (candidate \"six five four three two one zero\") \"zero one\
    \ two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeoe7x1a9.rkt:21:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpeoe7x1a9.rkt:22:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"three\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpeoe7x1a9.rkt:23:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"three\
    \ five nine\"\n--------------------\n--------------------\nERROR\nname:      \
    \ check-equal?\nlocation:   /tmp/tmpeoe7x1a9.rkt:24:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"five zero four seven nine\
    \ eight\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpeoe7x1a9.rkt:25:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"six five four three two one zero\"\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([number-list '()])\n  \
    \  (loop for [n numbers]\n          collect (cond [(number? n) (cons n number-list)]\n\
    \                      [else (cons n number-list)])))\n  (apply append number-list))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"three\"\
    ) \"three\")\n    (check-equal? (candidate \"three five nine\") \"three five nine\"\
    )\n    (check-equal? (candidate \"five zero four seven nine eight\") \"zero four\
    \ five seven eight nine\")\n    (check-equal? (candidate \"six five four three\
    \ two one zero\") \"zero one two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmprf_3rx_f.rkt:10:5: loop: unbound identifier\n  in: loop\n  location...:\n\
    \   /tmp/tmprf_3rx_f.rkt:10:5\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n  \
    \  [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp7nk9wh0r.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) 'zero]\n    [(equal? (first numbers)\
    \ 'one) 'one]\n    [(equal? (first numbers) 'two) 'two]\n    [(equal? (first numbers)\
    \ 'three) 'three]\n    [(equal? (first numbers) 'four) 'four]\n    [(equal? (first\
    \ numbers) 'five) 'five]\n    [(equal? (first numbers) 'six) 'six]\n    [(equal?\
    \ (first numbers) 'seven) 'seven]\n    [(equal? (first numbers) 'eight) 'eight]\n\
    \    [(equal? (first numbers) 'nine) 'nine]\n    [else (cons (first numbers) (sort_numbers\
    \ (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\")\n\
    \    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpbr2utl1q.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (if (empty? numbers)\n      '()\n\
    \      (append (sort_numbers (substring numbers 0 -1))\n              (cons (car\
    \ numbers)\n                    (sort_numbers (substring numbers (+ 0 (string-length\
    \ numbers))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal?\
    \ (candidate \"three\") \"three\")\n    (check-equal? (candidate \"three five\
    \ nine\") \"three five nine\")\n    (check-equal? (candidate \"five zero four\
    \ seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgzg2bvpe.rkt:20:4\n\
    \nsubstring: contract violation\n  expected: exact-nonnegative-integer?\n  given:\
    \ -1\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgzg2bvpe.rkt:21:4\n\nsubstring: contract violation\n  expected:\
    \ exact-nonnegative-integer?\n  given: -1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgzg2bvpe.rkt:22:4\n\nsubstring:\
    \ contract violation\n  expected: exact-nonnegative-integer?\n  given: -1\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgzg2bvpe.rkt:23:4\n\
    \nsubstring: contract violation\n  expected: exact-nonnegative-integer?\n  given:\
    \ -1\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgzg2bvpe.rkt:24:4\n\nsubstring: contract violation\n  expected:\
    \ exact-nonnegative-integer?\n  given: -1\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n  \
    \  [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpgdrrs39a.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([number-list '()])\n  \
    \  (loop for [n numbers]\n          collect (cond [(number? (string->number n))\
    \ (cons n (number-list))]\n                      [(number? (string->number n))\
    \ (number-list n)]\n                      [else (number-list '())]))\n    (string-append\
    \ (sort number-list <)\n                  (sort (sort number-list <) <))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"three\"\
    ) \"three\")\n    (check-equal? (candidate \"three five nine\") \"three five nine\"\
    )\n    (check-equal? (candidate \"five zero four seven nine eight\") \"zero four\
    \ five seven eight nine\")\n    (check-equal? (candidate \"six five four three\
    \ two one zero\") \"zero one two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpao4bym1g.rkt:10:5: loop: unbound identifier\n  in: loop\n  location...:\n\
    \   /tmp/tmpao4bym1g.rkt:10:5\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) 'zero]\n    [(equal? (first numbers)\
    \ 'one) 'one]\n    [(equal? (first numbers) 'two) 'two]\n    [(equal? (first numbers)\
    \ 'three) 'three]\n    [(equal? (first numbers) 'four) 'four]\n    [(equal? (first\
    \ numbers) 'five) 'five]\n    [(equal? (first numbers) 'six) 'six]\n    [(equal?\
    \ (first numbers) 'seven) 'seven]\n    [(equal? (first numbers) 'eight) 'eight]\n\
    \    [(equal? (first numbers) 'nine) 'nine]\n    [else (cons (first numbers) (sort_numbers\
    \ (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\")\n\
    \    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmppe2751ud.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) 'zero]\n    [(equal? (first numbers)\
    \ 'one) 'one]\n    [(equal? (first numbers) 'two) 'two]\n    [(equal? (first numbers)\
    \ 'three) 'three]\n    [(equal? (first numbers) 'four) 'four]\n    [(equal? (first\
    \ numbers) 'five) 'five]\n    [(equal? (first numbers) 'six) 'six]\n    [(equal?\
    \ (first numbers) 'seven) 'seven]\n    [(equal? (first numbers) 'eight) 'eight]\n\
    \    [(equal? (first numbers) 'nine) 'nine]\n    [else (cons (first numbers) (sort_numbers\
    \ (rest numbers))) ]\n  ))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpp49y_z48.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (if (null? numbers)\n      '()\n\
    \      (append (sort_numbers (substring numbers 0 -1))\n              (cons (car\
    \ numbers)\n                    (sort_numbers (substring numbers (+ 0 (string-length\
    \ numbers))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal?\
    \ (candidate \"three\") \"three\")\n    (check-equal? (candidate \"three five\
    \ nine\") \"three five nine\")\n    (check-equal? (candidate \"five zero four\
    \ seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppd_cjeof.rkt:20:4\n\
    \nsubstring: contract violation\n  expected: exact-nonnegative-integer?\n  given:\
    \ -1\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppd_cjeof.rkt:21:4\n\nsubstring: contract violation\n  expected:\
    \ exact-nonnegative-integer?\n  given: -1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppd_cjeof.rkt:22:4\n\nsubstring:\
    \ contract violation\n  expected: exact-nonnegative-integer?\n  given: -1\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppd_cjeof.rkt:23:4\n\
    \nsubstring: contract violation\n  expected: exact-nonnegative-integer?\n  given:\
    \ -1\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppd_cjeof.rkt:24:4\n\nsubstring: contract violation\n  expected:\
    \ exact-nonnegative-integer?\n  given: -1\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ \"\"]\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy7hteq3l.rkt:28:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpy7hteq3l.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"three\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpy7hteq3l.rkt:30:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"three\
    \ five nine\"\n--------------------\n--------------------\nERROR\nname:      \
    \ check-equal?\nlocation:   /tmp/tmpy7hteq3l.rkt:31:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"five zero four seven nine\
    \ eight\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpy7hteq3l.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"six five four three two one zero\"\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (define (helper numbers current-number\
    \ current-index)\n    (cond\n      [(empty? numbers) numbers]\n      [(equal?\
    \ current-number 'zero) (cons current-number (helper numbers (cdr numbers) (+\
    \ current-index 1)))]\n      [(equal? current-number 'one) (cons current-number\
    \ (helper numbers (cdr numbers) (+ current-index 1)))]\n      [(equal? current-number\
    \ 'two) (cons current-number (helper numbers (cdr numbers) (+ current-index 1)))]\n\
    \      [(equal? current-number 'three) (cons current-number (helper numbers (cdr\
    \ numbers) (+ current-index 1)))]\n      [(equal? current-number 'four) (cons\
    \ current-number (helper numbers (cdr numbers) (+ current-index 1)))]\n      [(equal?\
    \ current-number 'five) (cons current-number (helper numbers (cdr numbers) (+\
    \ current-index 1)))]\n      [(equal? current-number 'six) (cons current-number\
    \ (helper numbers (cdr numbers) (+ current-index 1)))]\n      [(equal? current-number\
    \ 'seven) (cons current-number (helper numbers (cdr numbers) (+ current-index\
    \ 1)))]\n      [(equal? current-number 'eight) (cons current-number (helper numbers\
    \ (cdr numbers) (+ current-index 1)))]\n      [(equal? current-number 'nine) (cons\
    \ current-number (helper numbers (cdr numbers) (+ current-index 1)))]\n      [else\
    \ (cons current-number (helper numbers (cdr numbers) (+ current-index 1)))]))\n\
    \  (helper numbers numbers 0))\n</code>\n<|/ a dscore=0 |>\n<| a tags=racket,scheme\
    \ |>\n<code>\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ sort_numbers))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal?\
    \ (candidate \"three\") \"three\")\n    (check-equal? (candidate \"three five\
    \ nine\") \"three five nine\")\n    (check-equal? (candidate \"five zero four\
    \ seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpn2bobg40.rkt:24:0: </code>: unbound identifier\n  in: </code>\n\
    \  location...:\n   /tmp/tmpn2bobg40.rkt:24:0\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([number-list '()])\n  \
    \  (loop for [n numbers]\n          collect (cond [(number? n) (cons n number-list)]\n\
    \                      [else (cons n number-list)])))\n  (sort_numbers-helper\
    \ number-list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal?\
    \ (candidate \"three\") \"three\")\n    (check-equal? (candidate \"three five\
    \ nine\") \"three five nine\")\n    (check-equal? (candidate \"five zero four\
    \ seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp5khofnvf.rkt:10:5: loop: unbound identifier\n  in: loop\n  location...:\n\
    \   /tmp/tmp5khofnvf.rkt:10:5\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([numbers (string->list\
    \ numbers)])\n    (sort numbers (lambda (a b) (< (string->number a) (string->number\
    \ b)))))\n  (string->list numbers))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdfll81du.rkt:18:4\n\
    actual:     '()\nexpected:   \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdfll81du.rkt:19:4\n\nstring->number:\
    \ contract violation\n  expected: string?\n  given: #\\h\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdfll81du.rkt:20:4\n\
    \nstring->number: contract violation\n  expected: string?\n  given: #\\h\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdfll81du.rkt:21:4\n\
    \nstring->number: contract violation\n  expected: string?\n  given: #\\i\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdfll81du.rkt:22:4\n\
    \nstring->number: contract violation\n  expected: string?\n  given: #\\i\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (if (null? numbers)\n      '()\n\
    \      (append (sort_numbers (substring numbers 0 (string-length numbers))) (cons\
    \ (substring numbers 0 (string-length numbers)) '()))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n    (check-equal?\
    \ (candidate \"\") \"\")\n    (check-equal? (candidate \"three\") \"three\")\n\
    \    (check-equal? (candidate \"three five nine\") \"three five nine\")\n    (check-equal?\
    \ (candidate \"five zero four seven nine eight\") \"zero four five seven eight\
    \ nine\")\n    (check-equal? (candidate \"six five four three two one zero\")\
    \ \"zero one two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n  \
    \  [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpi0y_nxkn.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (if (null? numbers)\n      '()\n\
    \      (append (sort_numbers (substring numbers 0 -1))\n              (list (substring\
    \ numbers -1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal?\
    \ (candidate \"three\") \"three\")\n    (check-equal? (candidate \"three five\
    \ nine\") \"three five nine\")\n    (check-equal? (candidate \"five zero four\
    \ seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpgxewjig1.rkt:12:46: read-syntax: unexpected `)`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ \"\"]\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpshetcza6.rkt:28:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpshetcza6.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"three\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpshetcza6.rkt:30:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"three\
    \ five nine\"\n--------------------\n--------------------\nERROR\nname:      \
    \ check-equal?\nlocation:   /tmp/tmpshetcza6.rkt:31:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"five zero four seven nine\
    \ eight\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpshetcza6.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"six five four three two one zero\"\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([numbers (string->list\
    \ numbers)])\n    (sort numbers (lambda (a b) (< (string->number a) (string->number\
    \ b)))))\n  (apply string-append numbers)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpwv1wcnb2.rkt:11:32: read-syntax: unexpected `)`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (if (empty? numbers)\n      '()\n\
    \      (append (sort_numbers (substring numbers 0 (string-length numbers)))\n\
    \              (cons (substring numbers (string-length numbers) 1)\n         \
    \           (sort_numbers (substring numbers (string-length numbers) (string-length\
    \ numbers))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal?\
    \ (candidate \"three\") \"three\")\n    (check-equal? (candidate \"three five\
    \ nine\") \"three five nine\")\n    (check-equal? (candidate \"five zero four\
    \ seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpwx5ko878.rkt:8:0: read-syntax: expected a `)` to close `(`\n  possible\
    \ cause: indentation suggests a missing `)` before line 15\n  context...:\n  \
    \ /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([numbers (split-string\
    \ (trim numbers) #\\space)])\n    (cond\n      [(empty? numbers) 'zero]\n    \
    \  [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n      [(equal?\
    \ (first numbers) 'one) (sort_numbers (rest numbers))]\n      [(equal? (first\
    \ numbers) 'two) (sort_numbers (rest numbers))]\n      [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n      [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n      [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n      [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \      [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n     \
    \ [(equal? (first numbers) 'eight) (sort_numbers (rest numbers))]\n      [(equal?\
    \ (first numbers) 'nine) (sort_numbers (rest numbers))]\n      [else (cons (first\
    \ numbers) (sort_numbers (rest numbers)))])))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate\
    \ \"\") \"\")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal?\
    \ (candidate \"three five nine\") \"three five nine\")\n    (check-equal? (candidate\
    \ \"five zero four seven nine eight\") \"zero four five seven eight nine\")\n\
    \    (check-equal? (candidate \"six five four three two one zero\") \"zero one\
    \ two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp_sab8w90.rkt:9:18: split-string: unbound identifier\n  in: split-string\n\
    \  location...:\n   /tmp/tmp_sab8w90.rkt:9:18\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n  \
    \  [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpxaffrtyb.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([numbers (string->list\
    \ numbers)])\n    (sort numbers (lambda (a b) (< (string->number a) (string->number\
    \ b)))))\n  (string->list numbers))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4i1l37y4.rkt:18:4\n\
    actual:     '()\nexpected:   \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4i1l37y4.rkt:19:4\n\nstring->number:\
    \ contract violation\n  expected: string?\n  given: #\\h\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4i1l37y4.rkt:20:4\n\
    \nstring->number: contract violation\n  expected: string?\n  given: #\\h\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4i1l37y4.rkt:21:4\n\
    \nstring->number: contract violation\n  expected: string?\n  given: #\\i\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4i1l37y4.rkt:22:4\n\
    \nstring->number: contract violation\n  expected: string?\n  given: #\\i\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([number-chars (string->list\
    \ numbers)])\n    (sort number-chars <)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcnfibima.rkt:17:4\n\
    actual:     '()\nexpected:   \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcnfibima.rkt:18:4\n\n<: contract\
    \ violation\n  expected: real?\n  given: #\\h\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcnfibima.rkt:19:4\n\n<: contract\
    \ violation\n  expected: real?\n  given: #\\h\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcnfibima.rkt:20:4\n\n<: contract\
    \ violation\n  expected: real?\n  given: #\\i\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcnfibima.rkt:21:4\n\n<: contract\
    \ violation\n  expected: real?\n  given: #\\i\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n  \
    \  [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp_or5mdb0.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n  \
    \  [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp6df812bk.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n  \
    \  [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpwthk19oi.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n  \
    \  [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpqtr7w5tf.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([numbers-list (split-string\
    \ numbers)])\n    (sort numbers-list <)\n    (join numbers-list \" \")))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"three\"\
    ) \"three\")\n    (check-equal? (candidate \"three five nine\") \"three five nine\"\
    )\n    (check-equal? (candidate \"five zero four seven nine eight\") \"zero four\
    \ five seven eight nine\")\n    (check-equal? (candidate \"six five four three\
    \ two one zero\") \"zero one two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpkhe_6e0i.rkt:9:23: split-string: unbound identifier\n  in: split-string\n\
    \  location...:\n   /tmp/tmpkhe_6e0i.rkt:9:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([numbers-list (string->list\
    \ numbers)])\n    (sort numbers-list <)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpud2nqwji.rkt:17:4\n\
    actual:     '()\nexpected:   \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpud2nqwji.rkt:18:4\n\n<: contract\
    \ violation\n  expected: real?\n  given: #\\h\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpud2nqwji.rkt:19:4\n\n<: contract\
    \ violation\n  expected: real?\n  given: #\\h\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpud2nqwji.rkt:20:4\n\n<: contract\
    \ violation\n  expected: real?\n  given: #\\i\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpud2nqwji.rkt:21:4\n\n<: contract\
    \ violation\n  expected: real?\n  given: #\\i\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([numbers (split-string\
    \ numbers)])\n    (if (null? numbers)\n        '()\n        (append (sort_numbers\
    \ (cdr numbers))\n                (list (car numbers))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n    (check-equal?\
    \ (candidate \"\") \"\")\n    (check-equal? (candidate \"three\") \"three\")\n\
    \    (check-equal? (candidate \"three five nine\") \"three five nine\")\n    (check-equal?\
    \ (candidate \"five zero four seven nine eight\") \"zero four five seven eight\
    \ nine\")\n    (check-equal? (candidate \"six five four three two one zero\")\
    \ \"zero one two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp1at_viii.rkt:9:18: split-string: unbound identifier\n  in: split-string\n\
    \  location...:\n   /tmp/tmp1at_viii.rkt:9:18\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([number-list '()])\n  \
    \  (cond\n      [(empty? numbers) number-list]\n      [(number? (first numbers))\
    \ (cons (first numbers) number-list)]\n      [else (cons (first numbers)\n   \
    \               (sort_numbers (rest numbers)))])))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate\
    \ \"\") \"\")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal?\
    \ (candidate \"three five nine\") \"three five nine\")\n    (check-equal? (candidate\
    \ \"five zero four seven nine eight\") \"zero four five seven eight nine\")\n\
    \    (check-equal? (candidate \"six five four three two one zero\") \"zero one\
    \ two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe7gvtnbv.rkt:21:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpe7gvtnbv.rkt:22:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"three\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpe7gvtnbv.rkt:23:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"three\
    \ five nine\"\n--------------------\n--------------------\nERROR\nname:      \
    \ check-equal?\nlocation:   /tmp/tmpe7gvtnbv.rkt:24:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"five zero four seven nine\
    \ eight\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpe7gvtnbv.rkt:25:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"six five four three two one zero\"\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n  \
    \  [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpspfqk8x4.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n  \
    \  [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpi_g_zbfv.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([numbers (string->list\
    \ numbers)])\n    (sort numbers (lambda (a b) (< (string->number a) (string->number\
    \ b))))\n    (string->list numbers)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpibioxc53.rkt:18:4\n\
    \nstring->list: contract violation\n  expected: string?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpibioxc53.rkt:19:4\n\
    \nstring->number: contract violation\n  expected: string?\n  given: #\\h\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpibioxc53.rkt:20:4\n\
    \nstring->number: contract violation\n  expected: string?\n  given: #\\h\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpibioxc53.rkt:21:4\n\
    \nstring->number: contract violation\n  expected: string?\n  given: #\\i\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpibioxc53.rkt:22:4\n\
    \nstring->number: contract violation\n  expected: string?\n  given: #\\i\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n  \
    \  [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpf5q072rx.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (if (empty? numbers)\n      '()\n\
    \      (append (sort_numbers (substring numbers 0 -1))\n              (cons (car\
    \ numbers)\n                    (sort_numbers (substring numbers (+ 0 (string-length\
    \ numbers))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal?\
    \ (candidate \"three\") \"three\")\n    (check-equal? (candidate \"three five\
    \ nine\") \"three five nine\")\n    (check-equal? (candidate \"five zero four\
    \ seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw2e_3vts.rkt:20:4\n\
    \nsubstring: contract violation\n  expected: exact-nonnegative-integer?\n  given:\
    \ -1\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw2e_3vts.rkt:21:4\n\nsubstring: contract violation\n  expected:\
    \ exact-nonnegative-integer?\n  given: -1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw2e_3vts.rkt:22:4\n\nsubstring:\
    \ contract violation\n  expected: exact-nonnegative-integer?\n  given: -1\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw2e_3vts.rkt:23:4\n\
    \nsubstring: contract violation\n  expected: exact-nonnegative-integer?\n  given:\
    \ -1\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw2e_3vts.rkt:24:4\n\nsubstring: contract violation\n  expected:\
    \ exact-nonnegative-integer?\n  given: -1\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([number-list '()])\n  \
    \  (loop for [n numbers]\n          collect (if (number? n)\n                \
    \      (cons n (number-list number-list))\n                      (number-list\
    \ number-list))\n          into number-list\n          finally (return number-list))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"three\"\
    ) \"three\")\n    (check-equal? (candidate \"three five nine\") \"three five nine\"\
    )\n    (check-equal? (candidate \"five zero four seven nine eight\") \"zero four\
    \ five seven eight nine\")\n    (check-equal? (candidate \"six five four three\
    \ two one zero\") \"zero one two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp47k81vx4.rkt:10:5: loop: unbound identifier\n  in: loop\n  location...:\n\
    \   /tmp/tmp47k81vx4.rkt:10:5\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([numbers (split-string\
    \ numbers #\\space)])\n    (sort (map number->number numbers) <)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"three\"\
    ) \"three\")\n    (check-equal? (candidate \"three five nine\") \"three five nine\"\
    )\n    (check-equal? (candidate \"five zero four seven nine eight\") \"zero four\
    \ five seven eight nine\")\n    (check-equal? (candidate \"six five four three\
    \ two one zero\") \"zero one two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmprhrjvkrd.rkt:9:18: split-string: unbound identifier\n  in: split-string\n\
    \  location...:\n   /tmp/tmprhrjvkrd.rkt:9:18\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (define (helper numbers sorted)\n\
    \    (cond\n      [(empty? numbers) sorted]\n      [(equal? (first numbers) 'zero)\
    \ (helper numbers (append sorted 'zero))]\n      [(equal? (first numbers) 'one)\
    \ (helper numbers (append sorted 'one))]\n      [(equal? (first numbers) 'two)\
    \ (helper numbers (append sorted 'two))]\n      [(equal? (first numbers) 'three)\
    \ (helper numbers (append sorted 'three))]\n      [(equal? (first numbers) 'four)\
    \ (helper numbers (append sorted 'four))]\n      [(equal? (first numbers) 'five)\
    \ (helper numbers (append sorted 'five))]\n      [(equal? (first numbers) 'six)\
    \ (helper numbers (append sorted 'six))]\n      [(equal? (first numbers) 'seven)\
    \ (helper numbers (append sorted 'seven))]\n      [(equal? (first numbers) 'eight)\
    \ (helper numbers (append sorted 'eight))]\n      [(equal? (first numbers) 'nine)\
    \ (helper numbers (append sorted 'nine))]\n      [else (helper numbers (append\
    \ sorted (first numbers)))]\n      ))\n  (helper numbers empty))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n    (check-equal?\
    \ (candidate \"\") \"\")\n    (check-equal? (candidate \"three\") \"three\")\n\
    \    (check-equal? (candidate \"three five nine\") \"three five nine\")\n    (check-equal?\
    \ (candidate \"five zero four seven nine eight\") \"zero four five seven eight\
    \ nine\")\n    (check-equal? (candidate \"six five four three two one zero\")\
    \ \"zero one two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbaxrvsm2.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbaxrvsm2.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"three\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbaxrvsm2.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"three\
    \ five nine\"\n--------------------\n--------------------\nERROR\nname:      \
    \ check-equal?\nlocation:   /tmp/tmpbaxrvsm2.rkt:34:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"five zero four seven nine\
    \ eight\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbaxrvsm2.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"six five four three two one zero\"\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([numbers (split-string\
    \ numbers)])\n    (sort numbers (lambda (a b) (< (string-to-number a) (string-to-number\
    \ b))))\n    (string-join numbers)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpnu13ggg9.rkt:9:18: split-string: unbound identifier\n  in: split-string\n\
    \  location...:\n   /tmp/tmpnu13ggg9.rkt:9:18\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([numbers-list (split-string\
    \ (numbers) #\\Space)])\n    (cond\n      [(empty? numbers-list) numbers]\n  \
    \    [(number? (first numbers-list)) (cons (first numbers-list) (sort_numbers\
    \ (rest numbers-list)))]\n      [else (cons (first numbers-list) (sort_numbers\
    \ (rest numbers-list)))])))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpks_4kgby.rkt:9:23: split-string: unbound identifier\n  in: split-string\n\
    \  location...:\n   /tmp/tmpks_4kgby.rkt:9:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([number-list '()])\n  \
    \  (for ([i (string-split numbers)])\n      (cond [(number? (car i))\n       \
    \      (cond [(number? (cadr i))\n                    (cond [(number? (caddr i))\n\
    \                          (cond [(number? (cadddr i))\n                     \
    \             (cond [(number? (cadddrdr i))\n                                \
    \        (cond [(number? (cadddrdrdr i))\n                                   \
    \           (cond [(number? (cadddrdrdrdr i))\n                              \
    \                        (cond [(number? (cadddrdrdrdrdr i))\n               \
    \                                               (cond [(number? (cadddrdrdrdrdrdr\
    \ i))\n                                                                    (cond\
    \ [(number? (cadddrdrdrdrdrdrdr i))\n                                        \
    \                                  (cond [(number? (cadddrdrdrdrdrdrdrdr i))\n\
    \                                                                            \
    \      (cond [(number? (cadddrdrdrdrdrdrdrdrdr i))\n                         \
    \                                                                 (cond [(number?\
    \ (cadddrdrdrdrdrdrdrdrdrdr i))\n                                            \
    \                                                      (cond [(number? (cadddrdrdrdrdrdrdrdrdrdrdr\
    \ i))\n                                                                      \
    \                                    (cond [(number? (cadddrdrdrdrdrdrdrdrdrdrdrdr\
    \ i))\n                                                                      \
    \                                            (cond [(number? (cadddrdrdrdrdrdrdrdrdrdrdrdrdr\
    \ i))\n                                                                      \
    \                                                  (cond [(number? (cadddrdrdrdrdrdrdrdrdrdrdrdrdr\
    \ i))\n                                                                      \
    \                                                        (cond [(number? (cadddrdrdrdrdrdrdrdrdrdrdrdrdrdr\
    \ i))\n                                                                      \
    \                                                                            (cond\
    \ [(number? (cadddrdrdrdrdrdrdrdrdrdrdrdrdrdrdr i))\n                        \
    \                                                                            \
    \                                                      (cond [(number? (cadddrdrdrdrdrdrdrdrdrdrdrdrdrdrdrdrdr\
    \ i))\n                                                                      \
    \                                                                            \
    \                (cond [(number? (cadddrdrdrdrdrdrdrdrdrdrdrdrdrdrdrdrdrdr i))\n\
    \                                                                            \
    \                                                                            \
    \                  (cond [(number? (cadddrdrdrdrdrdrdrdrdrdrdrdrdrdrdrdrdrdrdrdrdr\
    \ i))\n                                                                      \
    \                                                                            \
    \                                (cond [(number? (cadddrdrdrdrdrdrdrdrdrdrdrdrdrdrdrdrdrdr\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"three\"\
    ) \"three\")\n    (check-equal? (candidate \"three five nine\") \"three five nine\"\
    )\n    (check-equal? (candidate \"five zero four seven nine eight\") \"zero four\
    \ five seven eight nine\")\n    (check-equal? (candidate \"six five four three\
    \ two one zero\") \"zero one two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp1o3bt1_z.rkt:33:194: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 34\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ \"\"]\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmvazf50u.rkt:28:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpmvazf50u.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"three\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmvazf50u.rkt:30:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"three\
    \ five nine\"\n--------------------\n--------------------\nERROR\nname:      \
    \ check-equal?\nlocation:   /tmp/tmpmvazf50u.rkt:31:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"five zero four seven nine\
    \ eight\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpmvazf50u.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"six five four three two one zero\"\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([numbers-split (split-string\
    \ numbers (string->list \" \"))])\n    (cond\n      [(empty? numbers-split) numbers]\n\
    \      [(number->string->number numbers-split) numbers]\n      [else (append (sort_numbers\
    \ (number->string->number (first numbers-split))) (sort_numbers (rest numbers-split))]))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"three\"\
    ) \"three\")\n    (check-equal? (candidate \"three five nine\") \"three five nine\"\
    )\n    (check-equal? (candidate \"five zero four seven nine eight\") \"zero four\
    \ five seven eight nine\")\n    (check-equal? (candidate \"six five four three\
    \ two one zero\") \"zero one two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpas4jf1c2.rkt:13:117: read-syntax: missing `)` to close preceding\
    \ `(`, found instead `]`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([number-list '()\n    \
    \      number-string '()])\n    (if (empty? numbers)\n        number-string\n\
    \        (let ([number (first numbers)])\n          (if (number? number)\n   \
    \           (cond [(< number 9) (append number-string (list number))]\n      \
    \              [else (append number-string (list number))])\n              (append\
    \ number-string (list number)))))\n        (append number-string (list 'zero)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"three\"\
    ) \"three\")\n    (check-equal? (candidate \"three five nine\") \"three five nine\"\
    )\n    (check-equal? (candidate \"five zero four seven nine eight\") \"zero four\
    \ five seven eight nine\")\n    (check-equal? (candidate \"six five four three\
    \ two one zero\") \"zero one two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpzugnur4h.rkt:18:45: read-syntax: unexpected `)`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([number-list '()])\n  \
    \  (loop for [n numbers]\n          collect (cond [(number? n) (cons n number-list)]\n\
    \                      [else (cons n number-list)])))\n  (sort_numbers-helper\
    \ number-list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal?\
    \ (candidate \"three\") \"three\")\n    (check-equal? (candidate \"three five\
    \ nine\") \"three five nine\")\n    (check-equal? (candidate \"five zero four\
    \ seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpyyk1fngq.rkt:10:5: loop: unbound identifier\n  in: loop\n  location...:\n\
    \   /tmp/tmpyyk1fngq.rkt:10:5\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n  \
    \  [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpzycw5cwk.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([numbers (split-string\
    \ numbers)])\n    (sort numbers\n          (lambda (a b)\n            (< (string-to-number\
    \ a) (string-to-number b)))))\n  (string-join numbers))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n    (check-equal?\
    \ (candidate \"\") \"\")\n    (check-equal? (candidate \"three\") \"three\")\n\
    \    (check-equal? (candidate \"three five nine\") \"three five nine\")\n    (check-equal?\
    \ (candidate \"five zero four seven nine eight\") \"zero four five seven eight\
    \ nine\")\n    (check-equal? (candidate \"six five four three two one zero\")\
    \ \"zero one two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp2rdcdo7_.rkt:9:18: split-string: unbound identifier\n  in: split-string\n\
    \  location...:\n   /tmp/tmp2rdcdo7_.rkt:9:18\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ \"\"]\n    [(equal? (first numbers) \"zero\") (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) \"one\") (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) \"two\") (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) \"three\") (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ \"four\") (sort_numbers (rest numbers))]\n    [(equal? (first numbers) \"five\"\
    ) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) \"six\") (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) \"seven\") (sort_numbers (rest\
    \ numbers))]\n    [(equal? (first numbers) \"eight\") (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) \"nine\") (sort_numbers (rest numbers))]\n    [else\
    \ (cons (first numbers) (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n    (check-equal?\
    \ (candidate \"\") \"\")\n    (check-equal? (candidate \"three\") \"three\")\n\
    \    (check-equal? (candidate \"three five nine\") \"three five nine\")\n    (check-equal?\
    \ (candidate \"five zero four seven nine eight\") \"zero four five seven eight\
    \ nine\")\n    (check-equal? (candidate \"six five four three two one zero\")\
    \ \"zero one two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps001k9al.rkt:28:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmps001k9al.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"three\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmps001k9al.rkt:30:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"three\
    \ five nine\"\n--------------------\n--------------------\nERROR\nname:      \
    \ check-equal?\nlocation:   /tmp/tmps001k9al.rkt:31:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"five zero four seven nine\
    \ eight\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmps001k9al.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"six five four three two one zero\"\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ \"\"]\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2kfx9df.rkt:28:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpv2kfx9df.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"three\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2kfx9df.rkt:30:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"three\
    \ five nine\"\n--------------------\n--------------------\nERROR\nname:      \
    \ check-equal?\nlocation:   /tmp/tmpv2kfx9df.rkt:31:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"five zero four seven nine\
    \ eight\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpv2kfx9df.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"six five four three two one zero\"\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n  \
    \  [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpzksxzjrk.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ \"\"]\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptb1gbu76.rkt:28:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmptb1gbu76.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"three\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmptb1gbu76.rkt:30:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"three\
    \ five nine\"\n--------------------\n--------------------\nERROR\nname:      \
    \ check-equal?\nlocation:   /tmp/tmptb1gbu76.rkt:31:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"five zero four seven nine\
    \ eight\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmptb1gbu76.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"six five four three two one zero\"\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n  \
    \  [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpkllj5vti.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ \"\"]\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpix_84a3_.rkt:28:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpix_84a3_.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"three\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpix_84a3_.rkt:30:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"three\
    \ five nine\"\n--------------------\n--------------------\nERROR\nname:      \
    \ check-equal?\nlocation:   /tmp/tmpix_84a3_.rkt:31:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"five zero four seven nine\
    \ eight\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpix_84a3_.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"six five four three two one zero\"\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (if (empty? numbers)\n      '()\n\
    \      (append (sort_numbers (substring numbers 0 (string-length numbers)))\n\
    \              (cons (substring numbers (string-length numbers) 1)\n         \
    \           (sort_numbers (substring numbers (string-length numbers) (string-length\
    \ numbers))))))\n</code>\n<|/ a tags=racket,scheme |>\n<| c |>\nI like your solution,\
    \ however it only works for numbers in the range 0 to 9. How would you modify\
    \ it to work for numbers in the range 0 to nine?\n<|/ c |>\n<| c |>\nI added a\
    \ solution that works for numbers 0 to 9 and 0 to nine.\n<|/ c |>\n<| c |>\nThank\
    \ you for your answer. I was able to modify it so that it works for numbers 0\
    \ to nine. I am still trying to figure out how to make it work for numbers 0 to\
    \ 9. I am new to racket and I am having trouble understanding how to use recursion.\n\
    <|/ c |>\n<| c |>\nI added a solution that works for numbers 0 to 9 and 0 to nine.\n\
    <|/ c |>\n<| c |>\nThank you for your help. I really appreciate it.\n<|/ c |>\n\
    <| a dscore=1 |>\nHere's a solution that works for numbers 0 to nine:\n<code>\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"three\"\
    ) \"three\")\n    (check-equal? (candidate \"three five nine\") \"three five nine\"\
    )\n    (check-equal? (candidate \"five zero four seven nine eight\") \"zero four\
    \ five seven eight nine\")\n    (check-equal? (candidate \"six five four three\
    \ two one zero\") \"zero one two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpwv_0snuu.rkt:8:0: read-syntax: expected a `)` to close `(`\n  possible\
    \ cause: indentation suggests a missing `)` before line 14\n  context...:\n  \
    \ /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([numbers (split-string\
    \ numbers)]\n        [sorted (sort numbers (< numbers))])\n    (string-append\
    \ (first sorted) (last sorted))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpkfxl1pqj.rkt:9:18: split-string: unbound identifier\n  in: split-string\n\
    \  location...:\n   /tmp/tmpkfxl1pqj.rkt:9:18\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([nums (split-string (string\
    \ numbers) #\" \")])\n    (cond\n      [(empty? nums) 'zero]\n      [(equal? (first\
    \ nums) 'zero) (sort_numbers (rest nums))]\n      [(equal? (first nums) 'one)\
    \ (sort_numbers (rest nums))]\n      [(equal? (first nums) 'two) (sort_numbers\
    \ (rest nums))]\n      [(equal? (first nums) 'three) (sort_numbers (rest nums))]\n\
    \      [(equal? (first nums) 'four) (sort_numbers (rest nums))]\n      [(equal?\
    \ (first nums) 'five) (sort_numbers (rest nums))]\n      [(equal? (first nums)\
    \ 'six) (sort_numbers (rest nums))]\n      [(equal? (first nums) 'seven) (sort_numbers\
    \ (rest nums))]\n      [(equal? (first nums) 'eight) (sort_numbers (rest nums))]\n\
    \      [(equal? (first nums) 'nine) (sort_numbers (rest nums))]\n      [else (cons\
    \ (first nums) (sort_numbers (rest nums)))])))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate\
    \ \"\") \"\")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal?\
    \ (candidate \"three five nine\") \"three five nine\")\n    (check-equal? (candidate\
    \ \"five zero four seven nine eight\") \"zero four five seven eight nine\")\n\
    \    (check-equal? (candidate \"six five four three two one zero\") \"zero one\
    \ two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp1p2mdl2w.rkt:9:15: split-string: unbound identifier\n  in: split-string\n\
    \  location...:\n   /tmp/tmp1p2mdl2w.rkt:9:15\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (define (helper numbers sorted)\n\
    \    (if (null? numbers)\n        sorted\n        (helper (cdr numbers) (cons\
    \ (car numbers) sorted)))))\n  (helper numbers empty))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n    (check-equal?\
    \ (candidate \"\") \"\")\n    (check-equal? (candidate \"three\") \"three\")\n\
    \    (check-equal? (candidate \"three five nine\") \"three five nine\")\n    (check-equal?\
    \ (candidate \"five zero four seven nine eight\") \"zero four five seven eight\
    \ nine\")\n    (check-equal? (candidate \"six five four three two one zero\")\
    \ \"zero one two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp5yxp5hjp.rkt:13:24: read-syntax: unexpected `)`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ \"\"]\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6tb0k5io.rkt:28:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6tb0k5io.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"three\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6tb0k5io.rkt:30:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"three\
    \ five nine\"\n--------------------\n--------------------\nERROR\nname:      \
    \ check-equal?\nlocation:   /tmp/tmp6tb0k5io.rkt:31:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"five zero four seven nine\
    \ eight\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6tb0k5io.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"six five four three two one zero\"\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([number-list '()])\n  \
    \  (if (empty? numbers)\n        number-list\n        (append (sort_numbers (rest\
    \ numbers))\n                (list (first numbers))\n                (sort_numbers\
    \ (rest numbers))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\")\n\
    \    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiwjdxzsg.rkt:21:4\n\
    \nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpiwjdxzsg.rkt:22:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"three\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpiwjdxzsg.rkt:23:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"three\
    \ five nine\"\n--------------------\n--------------------\nERROR\nname:      \
    \ check-equal?\nlocation:   /tmp/tmpiwjdxzsg.rkt:24:4\n\nrest: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"five zero four seven nine\
    \ eight\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpiwjdxzsg.rkt:25:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"six five four three two one zero\"\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n  \
    \  [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpe289nvsd.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([number-list '()])\n  \
    \  (loop for [n numbers]\n          collect (cond [(number? n) (cons n number-list)]\n\
    \                      [(string=? (number->string n) 'zero) (cons n number-list)]\n\
    \                      [(string=? (number->string n) 'one) (cons n number-list)]\n\
    \                      [(string=? (number->string n) 'two) (cons n number-list)]\n\
    \                      [(string=? (number->string n) 'three) (cons n number-list)]\n\
    \                      [(string=? (number->string n) 'four) (cons n number-list)]\n\
    \                      [(string=? (number->string n) 'five) (cons n number-list)]\n\
    \                      [(string=? (number->string n) 'six) (cons n number-list)]\n\
    \                      [(string=? (number->string n) 'seven) (cons n number-list)]\n\
    \                      [(string=? (number->string n) 'eight) (cons n number-list)]\n\
    \                      [(string=? (number->string n) 'nine) (cons n number-list)]\n\
    \                      [else (cons n number-list)])))\n    (string-append (sort\
    \ number-list <))\n    (string-append (sort number-list >))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n    (check-equal?\
    \ (candidate \"\") \"\")\n    (check-equal? (candidate \"three\") \"three\")\n\
    \    (check-equal? (candidate \"three five nine\") \"three five nine\")\n    (check-equal?\
    \ (candidate \"five zero four seven nine eight\") \"zero four five seven eight\
    \ nine\")\n    (check-equal? (candidate \"six five four three two one zero\")\
    \ \"zero one two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpn6glvx3c.rkt:24:41: read-syntax: unexpected `)`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([numbers (string->list\
    \ numbers)])\n    (sort numbers (lambda (a b) (< (string->number a) (string->number\
    \ b)))))\n  (list-ref numbers 0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp89b9jt84.rkt:18:4\n\
    \nlist-ref: index reaches a non-pair\n  index: 0\n  in: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp89b9jt84.rkt:19:4\n\
    \nstring->number: contract violation\n  expected: string?\n  given: #\\h\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp89b9jt84.rkt:20:4\n\
    \nstring->number: contract violation\n  expected: string?\n  given: #\\h\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp89b9jt84.rkt:21:4\n\
    \nstring->number: contract violation\n  expected: string?\n  given: #\\i\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp89b9jt84.rkt:22:4\n\
    \nstring->number: contract violation\n  expected: string?\n  given: #\\i\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([numbers (string->list\
    \ numbers)\n         numbers-sorted (sort numbers '<)])\n    (string->list numbers-sorted)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"three\"\
    ) \"three\")\n    (check-equal? (candidate \"three five nine\") \"three five nine\"\
    )\n    (check-equal? (candidate \"five zero four seven nine eight\") \"zero four\
    \ five seven eight nine\")\n    (check-equal? (candidate \"six five four three\
    \ two one zero\") \"zero one two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp_753565d.rkt:9:8: let: bad syntax (not an identifier and expression\
    \ for a binding)\n  at: (numbers (string->list numbers) numbers-sorted (sort numbers\
    \ (quote <)))\n  in: (let ((numbers (string->list numbers) numbers-sorted (sort\
    \ numbers (quote <)))) (string->list numbers-sorted))\n  location...:\n   /tmp/tmp_753565d.rkt:9:8\n\
    \  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/private/qq-and-or.rkt:101:61:\
    \ loop\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/private/qq-and-or.rkt:50:20:\
    \ go\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n  \
    \  [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp_id49gs9.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([numbers-list (split-string\
    \ numbers)])\n    (if (null? numbers-list)\n        '()\n        (append (sort_numbers\
    \ (cdr numbers-list)) (list (car numbers-list))))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n    (check-equal?\
    \ (candidate \"\") \"\")\n    (check-equal? (candidate \"three\") \"three\")\n\
    \    (check-equal? (candidate \"three five nine\") \"three five nine\")\n    (check-equal?\
    \ (candidate \"five zero four seven nine eight\") \"zero four five seven eight\
    \ nine\")\n    (check-equal? (candidate \"six five four three two one zero\")\
    \ \"zero one two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp7ru3a906.rkt:9:23: split-string: unbound identifier\n  in: split-string\n\
    \  location...:\n   /tmp/tmp7ru3a906.rkt:9:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (define (helper numbers sorted)\n\
    \    (cond\n      [(empty? numbers) sorted]\n      [(equal? (first numbers) 'zero)\
    \ (helper numbers (append sorted 'zero))]\n      [(equal? (first numbers) 'one)\
    \ (helper numbers (append sorted 'one))]\n      [(equal? (first numbers) 'two)\
    \ (helper numbers (append sorted 'two))]\n      [(equal? (first numbers) 'three)\
    \ (helper numbers (append sorted 'three))]\n      [(equal? (first numbers) 'four)\
    \ (helper numbers (append sorted 'four))]\n      [(equal? (first numbers) 'five)\
    \ (helper numbers (append sorted 'five))]\n      [(equal? (first numbers) 'six)\
    \ (helper numbers (append sorted 'six))]\n      [(equal? (first numbers) 'seven)\
    \ (helper numbers (append sorted 'seven))]\n      [(equal? (first numbers) 'eight)\
    \ (helper numbers (append sorted 'eight))]\n      [(equal? (first numbers) 'nine)\
    \ (helper numbers (append sorted 'nine))]\n      [else (helper numbers (append\
    \ sorted (first numbers)))]\n    )\n  )\n  (helper numbers empty)\n)\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"three\"\
    ) \"three\")\n    (check-equal? (candidate \"three five nine\") \"three five nine\"\
    )\n    (check-equal? (candidate \"five zero four seven nine eight\") \"zero four\
    \ five seven eight nine\")\n    (check-equal? (candidate \"six five four three\
    \ two one zero\") \"zero one two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiegwfiyk.rkt:33:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpiegwfiyk.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"three\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpiegwfiyk.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"three\
    \ five nine\"\n--------------------\n--------------------\nERROR\nname:      \
    \ check-equal?\nlocation:   /tmp/tmpiegwfiyk.rkt:36:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"five zero four seven nine\
    \ eight\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpiegwfiyk.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"six five four three two one zero\"\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n  \
    \  [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmphro3kg1_.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([numbers (split-string\
    \ numbers)])\n    (if (empty? numbers)\n        '()\n        (append (sort_numbers\
    \ (first numbers)) (sort_numbers (rest numbers))))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n    (check-equal?\
    \ (candidate \"\") \"\")\n    (check-equal? (candidate \"three\") \"three\")\n\
    \    (check-equal? (candidate \"three five nine\") \"three five nine\")\n    (check-equal?\
    \ (candidate \"five zero four seven nine eight\") \"zero four five seven eight\
    \ nine\")\n    (check-equal? (candidate \"six five four three two one zero\")\
    \ \"zero one two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpaowogugn.rkt:9:18: split-string: unbound identifier\n  in: split-string\n\
    \  location...:\n   /tmp/tmpaowogugn.rkt:9:18\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) 'zero]\n    [(equal? (first numbers)\
    \ 'one) 'one]\n    [(equal? (first numbers) 'two) 'two]\n    [(equal? (first numbers)\
    \ 'three) 'three]\n    [(equal? (first numbers) 'four) 'four]\n    [(equal? (first\
    \ numbers) 'five) 'five]\n    [(equal? (first numbers) 'six) 'six]\n    [(equal?\
    \ (first numbers) 'seven) 'seven]\n    [(equal? (first numbers) 'eight) 'eight]\n\
    \    [(equal? (first numbers) 'nine) 'nine]\n    [else (cons (first numbers) (sort_numbers\
    \ (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\")\n\
    \    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpbkmewi_w.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (if (empty? numbers)\n      '()\n\
    \      (append (sort_numbers (substring numbers 0 -1))\n              (cons (car\
    \ numbers)\n                    (sort_numbers (substring numbers (+ 0 (string-length\
    \ numbers))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal?\
    \ (candidate \"three\") \"three\")\n    (check-equal? (candidate \"three five\
    \ nine\") \"three five nine\")\n    (check-equal? (candidate \"five zero four\
    \ seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpry03p_j0.rkt:20:4\n\
    \nsubstring: contract violation\n  expected: exact-nonnegative-integer?\n  given:\
    \ -1\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpry03p_j0.rkt:21:4\n\nsubstring: contract violation\n  expected:\
    \ exact-nonnegative-integer?\n  given: -1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpry03p_j0.rkt:22:4\n\nsubstring:\
    \ contract violation\n  expected: exact-nonnegative-integer?\n  given: -1\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpry03p_j0.rkt:23:4\n\
    \nsubstring: contract violation\n  expected: exact-nonnegative-integer?\n  given:\
    \ -1\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpry03p_j0.rkt:24:4\n\nsubstring: contract violation\n  expected:\
    \ exact-nonnegative-integer?\n  given: -1\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([numbers (split-string\
    \ numbers)])\n    (cond\n      [(empty? numbers) '']\n      [(equal? (first numbers)\
    \ 'zero) (sort_numbers (rest numbers))]\n      [(equal? (first numbers) 'one)\
    \ (sort_numbers (rest numbers))]\n      [(equal? (first numbers) 'two) (sort_numbers\
    \ (rest numbers))]\n      [(equal? (first numbers) 'three) (sort_numbers (rest\
    \ numbers))]\n      [(equal? (first numbers) 'four) (sort_numbers (rest numbers))]\n\
    \      [(equal? (first numbers) 'five) (sort_numbers (rest numbers))]\n      [(equal?\
    \ (first numbers) 'six) (sort_numbers (rest numbers))]\n      [(equal? (first\
    \ numbers) 'seven) (sort_numbers (rest numbers))]\n      [(equal? (first numbers)\
    \ 'eight) (sort_numbers (rest numbers))]\n      [(equal? (first numbers) 'nine)\
    \ (sort_numbers (rest numbers))]\n      [else (cons (first numbers) (sort_numbers\
    \ (rest numbers)))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\")\n\
    \    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp0kwrzb7i.rkt:11:26: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ \"\"]\n    [(equal? (first numbers) \"zero\") (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) \"one\") (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) \"two\") (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) \"three\") (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ \"four\") (sort_numbers (rest numbers))]\n    [(equal? (first numbers) \"five\"\
    ) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) \"six\") (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) \"seven\") (sort_numbers (rest\
    \ numbers))]\n    [(equal? (first numbers) \"eight\") (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) \"nine\") (sort_numbers (rest numbers))]\n    [else\
    \ (cons (first numbers) (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n    (check-equal?\
    \ (candidate \"\") \"\")\n    (check-equal? (candidate \"three\") \"three\")\n\
    \    (check-equal? (candidate \"three five nine\") \"three five nine\")\n    (check-equal?\
    \ (candidate \"five zero four seven nine eight\") \"zero four five seven eight\
    \ nine\")\n    (check-equal? (candidate \"six five four three two one zero\")\
    \ \"zero one two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50t_14ej.rkt:28:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp50t_14ej.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"three\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp50t_14ej.rkt:30:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"three\
    \ five nine\"\n--------------------\n--------------------\nERROR\nname:      \
    \ check-equal?\nlocation:   /tmp/tmp50t_14ej.rkt:31:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"five zero four seven nine\
    \ eight\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp50t_14ej.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"six five four three two one zero\"\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([number-list '()])\n  \
    \  (loop for [n numbers]\n          collect (cond [(number? n) (cons n number-list)]\n\
    \                      [(string=? (string=? n 'zero) (string=? n 'one) (string=?\
    \ n 'two) (string=? n 'three) (string=? n 'four) (string=? n 'five) (string=?\
    \ n 'six) (string=? n 'seven) (string=? n 'eight) (string=? n 'nine) (number-list\
    \ '())]\n                      [else (number-list '(number->string n)))])))\n\
    </code>\n<|/ a tags=racket,scheme |>\n<| a dscore=0 |>\n<code>\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n    (check-equal?\
    \ (candidate \"\") \"\")\n    (check-equal? (candidate \"three\") \"three\")\n\
    \    (check-equal? (candidate \"three five nine\") \"three five nine\")\n    (check-equal?\
    \ (candidate \"five zero four seven nine eight\") \"zero four five seven eight\
    \ nine\")\n    (check-equal? (candidate \"six five four three two one zero\")\
    \ \"zero one two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpc00wxdhh.rkt:12:240: read-syntax: missing `)` to close preceding\
    \ `(`, found instead `]`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ((numbers (string->list\
    \ numbers)))\n    (sort (lambda (x y) (< (string->number x) (string->number y)))\
    \ numbers)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ sort_numbers))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal?\
    \ (candidate \"three\") \"three\")\n    (check-equal? (candidate \"three five\
    \ nine\") \"three five nine\")\n    (check-equal? (candidate \"five zero four\
    \ seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2ih111pt.rkt:17:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:...tmp/tmp2ih111pt.rkt:10:10>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp2ih111pt.rkt:18:4\n\nsort: contract violation\n  expected:\
    \ list?\n  given: #<procedure:...tmp/tmp2ih111pt.rkt:10:10>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2ih111pt.rkt:19:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:...tmp/tmp2ih111pt.rkt:10:10>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp2ih111pt.rkt:20:4\n\nsort: contract violation\n  expected:\
    \ list?\n  given: #<procedure:...tmp/tmp2ih111pt.rkt:10:10>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2ih111pt.rkt:21:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:...tmp/tmp2ih111pt.rkt:10:10>\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ \"\"]\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxlaijcyt.rkt:28:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpxlaijcyt.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"three\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxlaijcyt.rkt:30:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"three\
    \ five nine\"\n--------------------\n--------------------\nERROR\nname:      \
    \ check-equal?\nlocation:   /tmp/tmpxlaijcyt.rkt:31:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"five zero four seven nine\
    \ eight\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpxlaijcyt.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"six five four three two one zero\"\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ \"\"]\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpre81hiqs.rkt:28:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpre81hiqs.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"three\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpre81hiqs.rkt:30:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"three\
    \ five nine\"\n--------------------\n--------------------\nERROR\nname:      \
    \ check-equal?\nlocation:   /tmp/tmpre81hiqs.rkt:31:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"five zero four seven nine\
    \ eight\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpre81hiqs.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"six five four three two one zero\"\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) 'zero]\n    [(equal? (first numbers)\
    \ 'one) 'one]\n    [(equal? (first numbers) 'two) 'two]\n    [(equal? (first numbers)\
    \ 'three) 'three]\n    [(equal? (first numbers) 'four) 'four]\n    [(equal? (first\
    \ numbers) 'five) 'five]\n    [(equal? (first numbers) 'six) 'six]\n    [(equal?\
    \ (first numbers) 'seven) 'seven]\n    [(equal? (first numbers) 'eight) 'eight]\n\
    \    [(equal? (first numbers) 'nine) 'nine]\n    [else (cons (first numbers) (sort_numbers\
    \ (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\")\n\
    \    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp_cjo5iec.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ((numbers (string->list\
    \ numbers)))\n    (sort numbers (lambda (x y) (< (string->number x) (string->number\
    \ y))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ sort_numbers))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal?\
    \ (candidate \"three\") \"three\")\n    (check-equal? (candidate \"three five\
    \ nine\") \"three five nine\")\n    (check-equal? (candidate \"five zero four\
    \ seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmp5b2kse.rkt:17:4\n\
    actual:     '()\nexpected:   \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmp5b2kse.rkt:18:4\n\nstring->number:\
    \ contract violation\n  expected: string?\n  given: #\\h\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmp5b2kse.rkt:19:4\n\
    \nstring->number: contract violation\n  expected: string?\n  given: #\\h\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmp5b2kse.rkt:20:4\n\
    \nstring->number: contract violation\n  expected: string?\n  given: #\\i\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmp5b2kse.rkt:21:4\n\
    \nstring->number: contract violation\n  expected: string?\n  given: #\\i\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ \"\"]\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp71meyuk1.rkt:28:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp71meyuk1.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"three\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp71meyuk1.rkt:30:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"three\
    \ five nine\"\n--------------------\n--------------------\nERROR\nname:      \
    \ check-equal?\nlocation:   /tmp/tmp71meyuk1.rkt:31:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"five zero four seven nine\
    \ eight\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp71meyuk1.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"six five four three two one zero\"\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([numbers (string->list\
    \ numbers)])\n    (sort numbers\n          (lambda (a b)\n            (< (string->number\
    \ a) (string->number b)))))\n  (string->list numbers))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n    (check-equal?\
    \ (candidate \"\") \"\")\n    (check-equal? (candidate \"three\") \"three\")\n\
    \    (check-equal? (candidate \"three five nine\") \"three five nine\")\n    (check-equal?\
    \ (candidate \"five zero four seven nine eight\") \"zero four five seven eight\
    \ nine\")\n    (check-equal? (candidate \"six five four three two one zero\")\
    \ \"zero one two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4la73hky.rkt:20:4\n\
    actual:     '()\nexpected:   \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4la73hky.rkt:21:4\n\nstring->number:\
    \ contract violation\n  expected: string?\n  given: #\\h\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4la73hky.rkt:22:4\n\
    \nstring->number: contract violation\n  expected: string?\n  given: #\\h\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4la73hky.rkt:23:4\n\
    \nstring->number: contract violation\n  expected: string?\n  given: #\\i\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4la73hky.rkt:24:4\n\
    \nstring->number: contract violation\n  expected: string?\n  given: #\\i\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n  \
    \  [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpgnsez2w8.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ((numbers (string->list\
    \ numbers)))\n    (sort numbers (lambda (a b) (< (string->number a) (string->number\
    \ b)))))\n  (apply string-join (map number->string numbers))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n    (check-equal?\
    \ (candidate \"\") \"\")\n    (check-equal? (candidate \"three\") \"three\")\n\
    \    (check-equal? (candidate \"three five nine\") \"three five nine\")\n    (check-equal?\
    \ (candidate \"five zero four seven nine eight\") \"zero four five seven eight\
    \ nine\")\n    (check-equal? (candidate \"six five four three two one zero\")\
    \ \"zero one two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmprccuh30k.rkt:11:51: read-syntax: unexpected `)`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ((numbers-in-string numbers))\n\
    \    (string->list numbers-in-string)\n    (sort numbers-in-string <)\n    (string->list\
    \ numbers-in-string)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\")\n\
    \    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphi484dzo.rkt:19:4\n\
    \nsort: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphi484dzo.rkt:20:4\n\
    \nsort: contract violation\n  expected: list?\n  given: \"three\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphi484dzo.rkt:21:4\n\
    \nsort: contract violation\n  expected: list?\n  given: \"three five nine\"\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmphi484dzo.rkt:22:4\n\nsort: contract violation\n  expected:\
    \ list?\n  given: \"five zero four seven nine eight\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphi484dzo.rkt:23:4\n\
    \nsort: contract violation\n  expected: list?\n  given: \"six five four three\
    \ two one zero\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ((numbers (string->list\
    \ numbers)))\n    (sort numbers (lambda (a b) (< (string->number a) (string->number\
    \ b)))))\n  (list->string numbers))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt1_tfs5f.rkt:18:4\n\
    \nlist->string: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt1_tfs5f.rkt:19:4\n\
    \nstring->number: contract violation\n  expected: string?\n  given: #\\h\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt1_tfs5f.rkt:20:4\n\
    \nstring->number: contract violation\n  expected: string?\n  given: #\\h\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt1_tfs5f.rkt:21:4\n\
    \nstring->number: contract violation\n  expected: string?\n  given: #\\i\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt1_tfs5f.rkt:22:4\n\
    \nstring->number: contract violation\n  expected: string?\n  given: #\\i\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n  \
    \  [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpp5_u420s.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n  \
    \  [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpi27eoowc.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n  \
    \  [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmplhizl3ey.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ \"\"]\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp92ku2b6q.rkt:28:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp92ku2b6q.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"three\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp92ku2b6q.rkt:30:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"three\
    \ five nine\"\n--------------------\n--------------------\nERROR\nname:      \
    \ check-equal?\nlocation:   /tmp/tmp92ku2b6q.rkt:31:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"five zero four seven nine\
    \ eight\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp92ku2b6q.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"six five four three two one zero\"\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n  \
    \  [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpl_ozlfje.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n  \
    \  [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp1bnuubhy.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n  \
    \  [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpf99dwivq.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([number-list '()])\n  \
    \  (loop for [n numbers]\n          collect (cond [(number? n) (cons n number-list)]\n\
    \                      [else (cons n number-list)])))\n  (sort number-list <))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"three\"\
    ) \"three\")\n    (check-equal? (candidate \"three five nine\") \"three five nine\"\
    )\n    (check-equal? (candidate \"five zero four seven nine eight\") \"zero four\
    \ five seven eight nine\")\n    (check-equal? (candidate \"six five four three\
    \ two one zero\") \"zero one two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpfh5wba9f.rkt:10:5: loop: unbound identifier\n  in: loop\n  location...:\n\
    \   /tmp/tmpfh5wba9f.rkt:10:5\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([numbers (split-string\
    \ numbers)\n         numbers-sorted (sort numbers)])\n    (string-append (first\
    \ numbers-sorted) (last numbers-sorted))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpo9corali.rkt:9:8: let: bad syntax (not an identifier and expression\
    \ for a binding)\n  at: (numbers (split-string numbers) numbers-sorted (sort numbers))\n\
    \  in: (let ((numbers (split-string numbers) numbers-sorted (sort numbers))) (string-append\
    \ (first numbers-sorted) (last numbers-sorted)))\n  location...:\n   /tmp/tmpo9corali.rkt:9:8\n\
    \  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/private/qq-and-or.rkt:101:61:\
    \ loop\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/private/qq-and-or.rkt:50:20:\
    \ go\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (if (empty? numbers)\n      '()\n\
    \      (append (sort_numbers (substring numbers 0 -1))\n              (cons (car\
    \ numbers)\n                    (sort_numbers (substring numbers (+ 0 (string-length\
    \ numbers))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal?\
    \ (candidate \"three\") \"three\")\n    (check-equal? (candidate \"three five\
    \ nine\") \"three five nine\")\n    (check-equal? (candidate \"five zero four\
    \ seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwp6vibfo.rkt:20:4\n\
    \nsubstring: contract violation\n  expected: exact-nonnegative-integer?\n  given:\
    \ -1\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpwp6vibfo.rkt:21:4\n\nsubstring: contract violation\n  expected:\
    \ exact-nonnegative-integer?\n  given: -1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwp6vibfo.rkt:22:4\n\nsubstring:\
    \ contract violation\n  expected: exact-nonnegative-integer?\n  given: -1\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwp6vibfo.rkt:23:4\n\
    \nsubstring: contract violation\n  expected: exact-nonnegative-integer?\n  given:\
    \ -1\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpwp6vibfo.rkt:24:4\n\nsubstring: contract violation\n  expected:\
    \ exact-nonnegative-integer?\n  given: -1\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n  \
    \  [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpi39nfn4d.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n  \
    \  [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpu120ude3.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) 'zero]\n    [(equal? (first numbers)\
    \ 'one) 'one]\n    [(equal? (first numbers) 'two) 'two]\n    [(equal? (first numbers)\
    \ 'three) 'three]\n    [(equal? (first numbers) 'four) 'four]\n    [(equal? (first\
    \ numbers) 'five) 'five]\n    [(equal? (first numbers) 'six) 'six]\n    [(equal?\
    \ (first numbers) 'seven) 'seven]\n    [(equal? (first numbers) 'eight) 'eight]\n\
    \    [(equal? (first numbers) 'nine) 'nine]\n    [else (cons (first numbers) (sort_numbers\
    \ (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\")\n\
    \    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpi4x60xt2.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([numbers (string->list\
    \ numbers)])\n    (if (null? numbers)\n        '()\n        (append (sort (map\
    \ number->number numbers)) numbers))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmphbmr35xi.rkt:12:27: number->number: unbound identifier\n  in: number->number\n\
    \  location...:\n   /tmp/tmphbmr35xi.rkt:12:27\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n  \
    \  [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp9u0235v8.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([nums (split-string (numbers)\
    \ #\" \")])\n    (cond\n      [(empty? nums) '']\n      [(equal? (first nums)\
    \ 'zero) (sort_numbers (rest nums))]\n      [(equal? (first nums) 'one) (sort_numbers\
    \ (rest nums))]\n      [(equal? (first nums) 'two) (sort_numbers (rest nums))]\n\
    \      [(equal? (first nums) 'three) (sort_numbers (rest nums))]\n      [(equal?\
    \ (first nums) 'four) (sort_numbers (rest nums))]\n      [(equal? (first nums)\
    \ 'five) (sort_numbers (rest nums))]\n      [(equal? (first nums) 'six) (sort_numbers\
    \ (rest nums))]\n      [(equal? (first nums) 'seven) (sort_numbers (rest nums))]\n\
    \      [(equal? (first nums) 'eight) (sort_numbers (rest nums))]\n      [(equal?\
    \ (first nums) 'nine) (sort_numbers (rest nums))]\n      [else (cons (first nums)\
    \ (sort_numbers (rest nums)))])))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmphbgv32ty.rkt:11:23: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n  \
    \  [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpn88_05be.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ \"\"]\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2o9qvkbg.rkt:28:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp2o9qvkbg.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"three\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2o9qvkbg.rkt:30:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"three\
    \ five nine\"\n--------------------\n--------------------\nERROR\nname:      \
    \ check-equal?\nlocation:   /tmp/tmp2o9qvkbg.rkt:31:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"five zero four seven nine\
    \ eight\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp2o9qvkbg.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"six five four three two one zero\"\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (if (empty? numbers)\n      '()\n\
    \      (append (sort_numbers (substring numbers 0 (string-length numbers)))\n\
    \              (list (substring numbers (string-length numbers) 1)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"three\"\
    ) \"three\")\n    (check-equal? (candidate \"three five nine\") \"three five nine\"\
    )\n    (check-equal? (candidate \"five zero four seven nine eight\") \"zero four\
    \ five seven eight nine\")\n    (check-equal? (candidate \"six five four three\
    \ two one zero\") \"zero one two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([numbers (string->list\
    \ numbers)])\n    (sort numbers <)\n    (string->list numbers)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n    (check-equal?\
    \ (candidate \"\") \"\")\n    (check-equal? (candidate \"three\") \"three\")\n\
    \    (check-equal? (candidate \"three five nine\") \"three five nine\")\n    (check-equal?\
    \ (candidate \"five zero four seven nine eight\") \"zero four five seven eight\
    \ nine\")\n    (check-equal? (candidate \"six five four three two one zero\")\
    \ \"zero one two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpek4_2i5g.rkt:18:4\n\
    \nstring->list: contract violation\n  expected: string?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpek4_2i5g.rkt:19:4\n\
    \n<: contract violation\n  expected: real?\n  given: #\\h\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpek4_2i5g.rkt:20:4\n\
    \n<: contract violation\n  expected: real?\n  given: #\\h\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpek4_2i5g.rkt:21:4\n\
    \n<: contract violation\n  expected: real?\n  given: #\\i\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpek4_2i5g.rkt:22:4\n\
    \n<: contract violation\n  expected: real?\n  given: #\\i\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ \"\"]\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl_sjuu76.rkt:28:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpl_sjuu76.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"three\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpl_sjuu76.rkt:30:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"three\
    \ five nine\"\n--------------------\n--------------------\nERROR\nname:      \
    \ check-equal?\nlocation:   /tmp/tmpl_sjuu76.rkt:31:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"five zero four seven nine\
    \ eight\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpl_sjuu76.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"six five four three two one zero\"\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([number-list '()])\n  \
    \  (loop for number in numbers\n          for i from 0 to (length numbers)\n \
    \         collect (cond [(number-list-empty? number-list) (cons number number-list)]\n\
    \                      [(number-list-empty? (cdr number-list)) (cons number number-list)]\n\
    \                      [else (cons (car number-list) (cdr number-list))]))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"three\"\
    ) \"three\")\n    (check-equal? (candidate \"three five nine\") \"three five nine\"\
    )\n    (check-equal? (candidate \"five zero four seven nine eight\") \"zero four\
    \ five seven eight nine\")\n    (check-equal? (candidate \"six five four three\
    \ two one zero\") \"zero one two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmppyzek1t1.rkt:10:5: loop: unbound identifier\n  in: loop\n  location...:\n\
    \   /tmp/tmppyzek1t1.rkt:10:5\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([number-chars (string->list\
    \ numbers)])\n    (sort number-chars <)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnxi3f0ah.rkt:17:4\n\
    actual:     '()\nexpected:   \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpnxi3f0ah.rkt:18:4\n\n<: contract\
    \ violation\n  expected: real?\n  given: #\\h\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpnxi3f0ah.rkt:19:4\n\n<: contract\
    \ violation\n  expected: real?\n  given: #\\h\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpnxi3f0ah.rkt:20:4\n\n<: contract\
    \ violation\n  expected: real?\n  given: #\\i\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpnxi3f0ah.rkt:21:4\n\n<: contract\
    \ violation\n  expected: real?\n  given: #\\i\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([numbers (split-string\
    \ numbers)])\n    (if (empty? numbers)\n        '()\n        (append (sort_numbers\
    \ (sort numbers (< numbers))) numbers))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp6kagff3r.rkt:9:18: split-string: unbound identifier\n  in: split-string\n\
    \  location...:\n   /tmp/tmp6kagff3r.rkt:9:18\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n  \
    \  [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpdjjyphjr.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([numbers-list (string->list\
    \ numbers)])\n    (sort numbers-list <)\n    (string-join (map number->string\
    \ numbers-list))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal?\
    \ (candidate \"three\") \"three\")\n    (check-equal? (candidate \"three five\
    \ nine\") \"three five nine\")\n    (check-equal? (candidate \"five zero four\
    \ seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvo3xbiiu.rkt:19:4\n\
    \n<: contract violation\n  expected: real?\n  given: #\\h\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvo3xbiiu.rkt:20:4\n\
    \n<: contract violation\n  expected: real?\n  given: #\\h\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvo3xbiiu.rkt:21:4\n\
    \n<: contract violation\n  expected: real?\n  given: #\\i\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvo3xbiiu.rkt:22:4\n\
    \n<: contract violation\n  expected: real?\n  given: #\\i\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([number-chars (string->list\
    \ numbers)])\n    (sort number-chars >)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpaqak1kts.rkt:17:4\n\
    actual:     '()\nexpected:   \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpaqak1kts.rkt:18:4\n\n>: contract\
    \ violation\n  expected: real?\n  given: #\\t\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpaqak1kts.rkt:19:4\n\n>: contract\
    \ violation\n  expected: real?\n  given: #\\t\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpaqak1kts.rkt:20:4\n\n>: contract\
    \ violation\n  expected: real?\n  given: #\\f\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpaqak1kts.rkt:21:4\n\n>: contract\
    \ violation\n  expected: real?\n  given: #\\s\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([number-list '()])\n  \
    \  (loop for [n numbers]\n          collect (cond [(number? n) (cons n number-list)]\n\
    \                      [(string=? (number->string n) 'zero) (cons n number-list)]\n\
    \                      [(string=? (number->string n) 'one) (cons n number-list)]\n\
    \                      [(string=? (number->string n) 'two) (cons n number-list)]\n\
    \                      [(string=? (number->string n) 'three) (cons n number-list)]\n\
    \                      [(string=? (number->string n) 'four) (cons n number-list)]\n\
    \                      [(string=? (number->string n) 'five) (cons n number-list)]\n\
    \                      [(string=? (number->string n) 'six) (cons n number-list)]\n\
    \                      [(string=? (number->string n) 'seven) (cons n number-list)]\n\
    \                      [(string=? (number->string n) 'eight) (cons n number-list)]\n\
    \                      [(string=? (number->string n) 'nine) (cons n number-list)]\n\
    \                      [else (cons n number-list)])))\n    (string->number number-list)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"three\"\
    ) \"three\")\n    (check-equal? (candidate \"three five nine\") \"three five nine\"\
    )\n    (check-equal? (candidate \"five zero four seven nine eight\") \"zero four\
    \ five seven eight nine\")\n    (check-equal? (candidate \"six five four three\
    \ two one zero\") \"zero one two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpue9qar7r.rkt:23:33: read-syntax: unexpected `)`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([number-chars (string->list\
    \ numbers)])\n    (sort number-chars (lambda (a b) (< (string->number a) (string->number\
    \ b)))))\n  (string->list numbers))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj0pzxo2j.rkt:18:4\n\
    actual:     '()\nexpected:   \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpj0pzxo2j.rkt:19:4\n\nstring->number:\
    \ contract violation\n  expected: string?\n  given: #\\h\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj0pzxo2j.rkt:20:4\n\
    \nstring->number: contract violation\n  expected: string?\n  given: #\\h\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj0pzxo2j.rkt:21:4\n\
    \nstring->number: contract violation\n  expected: string?\n  given: #\\i\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj0pzxo2j.rkt:22:4\n\
    \nstring->number: contract violation\n  expected: string?\n  given: #\\i\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([numbers (string->list\
    \ numbers)\n         numbers-sorted (sort numbers '<)])\n    (string->list numbers-sorted)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"three\"\
    ) \"three\")\n    (check-equal? (candidate \"three five nine\") \"three five nine\"\
    )\n    (check-equal? (candidate \"five zero four seven nine eight\") \"zero four\
    \ five seven eight nine\")\n    (check-equal? (candidate \"six five four three\
    \ two one zero\") \"zero one two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpra94cf_0.rkt:9:8: let: bad syntax (not an identifier and expression\
    \ for a binding)\n  at: (numbers (string->list numbers) numbers-sorted (sort numbers\
    \ (quote <)))\n  in: (let ((numbers (string->list numbers) numbers-sorted (sort\
    \ numbers (quote <)))) (string->list numbers-sorted))\n  location...:\n   /tmp/tmpra94cf_0.rkt:9:8\n\
    \  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/private/qq-and-or.rkt:101:61:\
    \ loop\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/private/qq-and-or.rkt:50:20:\
    \ go\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ \"\"]\n    [(equal? (first numbers) \"zero\") \"zero\"]\n    [(equal? (first\
    \ numbers) \"one\") \"one\"]\n    [(equal? (first numbers) \"two\") \"two\"]\n\
    \    [(equal? (first numbers) \"three\") \"three\"]\n    [(equal? (first numbers)\
    \ \"four\") \"four\"]\n    [(equal? (first numbers) \"five\") \"five\"]\n    [(equal?\
    \ (first numbers) \"six\") \"six\"]\n    [(equal? (first numbers) \"seven\") \"\
    seven\"]\n    [(equal? (first numbers) \"eight\") \"eight\"]\n    [(equal? (first\
    \ numbers) \"nine\") \"nine\"]\n    [else (cons (first numbers) (sort_numbers\
    \ (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\")\n\
    \    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_x0btqnn.rkt:28:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_x0btqnn.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"three\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_x0btqnn.rkt:30:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"three\
    \ five nine\"\n--------------------\n--------------------\nERROR\nname:      \
    \ check-equal?\nlocation:   /tmp/tmp_x0btqnn.rkt:31:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"five zero four seven nine\
    \ eight\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_x0btqnn.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"six five four three two one zero\"\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (if (null? numbers)\n      '()\n\
    \      (append (sort_numbers (substring numbers 0 -1))\n              (cons (car\
    \ numbers) (sort_numbers (substring numbers (+ 0 (string-length numbers))))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"three\"\
    ) \"three\")\n    (check-equal? (candidate \"three five nine\") \"three five nine\"\
    )\n    (check-equal? (candidate \"five zero four seven nine eight\") \"zero four\
    \ five seven eight nine\")\n    (check-equal? (candidate \"six five four three\
    \ two one zero\") \"zero one two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpauy0nc8_.rkt:19:4\n\
    \nsubstring: contract violation\n  expected: exact-nonnegative-integer?\n  given:\
    \ -1\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpauy0nc8_.rkt:20:4\n\nsubstring: contract violation\n  expected:\
    \ exact-nonnegative-integer?\n  given: -1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpauy0nc8_.rkt:21:4\n\nsubstring:\
    \ contract violation\n  expected: exact-nonnegative-integer?\n  given: -1\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpauy0nc8_.rkt:22:4\n\
    \nsubstring: contract violation\n  expected: exact-nonnegative-integer?\n  given:\
    \ -1\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpauy0nc8_.rkt:23:4\n\nsubstring: contract violation\n  expected:\
    \ exact-nonnegative-integer?\n  given: -1\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ \"\"]\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu_q80g6v.rkt:28:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpu_q80g6v.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"three\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpu_q80g6v.rkt:30:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"three\
    \ five nine\"\n--------------------\n--------------------\nERROR\nname:      \
    \ check-equal?\nlocation:   /tmp/tmpu_q80g6v.rkt:31:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"five zero four seven nine\
    \ eight\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpu_q80g6v.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"six five four three two one zero\"\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) 'zero]\n    [(equal? (first numbers)\
    \ 'one) 'one]\n    [(equal? (first numbers) 'two) 'two]\n    [(equal? (first numbers)\
    \ 'three) 'three]\n    [(equal? (first numbers) 'four) 'four]\n    [(equal? (first\
    \ numbers) 'five) 'five]\n    [(equal? (first numbers) 'six) 'six]\n    [(equal?\
    \ (first numbers) 'seven) 'seven]\n    [(equal? (first numbers) 'eight) 'eight]\n\
    \    [(equal? (first numbers) 'nine) 'nine]\n    [else (cons (first numbers) (sort_numbers\
    \ (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\")\n\
    \    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmprqoot_cn.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ \"\"]\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcz08oo0k.rkt:28:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpcz08oo0k.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"three\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcz08oo0k.rkt:30:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"three\
    \ five nine\"\n--------------------\n--------------------\nERROR\nname:      \
    \ check-equal?\nlocation:   /tmp/tmpcz08oo0k.rkt:31:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"five zero four seven nine\
    \ eight\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpcz08oo0k.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"six five four three two one zero\"\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (if (empty? numbers)\n      '()\n\
    \      (append (sort_numbers (substring numbers 0 (string-length numbers)))\n\
    \              (cons (substring numbers 1 (string-length numbers))\n         \
    \           (sort_numbers (substring numbers (string-length numbers) (string-length\
    \ numbers))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal?\
    \ (candidate \"three\") \"three\")\n    (check-equal? (candidate \"three five\
    \ nine\") \"three five nine\")\n    (check-equal? (candidate \"five zero four\
    \ seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpfrv1arbj.rkt:8:0: read-syntax: expected a `)` to close `(`\n  possible\
    \ cause: indentation suggests a missing `)` before line 15\n  context...:\n  \
    \ /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n  \
    \  [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpxgh3io3q.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([number-list '()])\n  \
    \  (loop for number in numbers\n          for i from 0\n          for j from (length\
    \ number-list)\n          when (equal? (substring number i j) number)\n      \
    \    collect (cons number number-list))\n    (string-append (sort number-list\
    \ <) \" \"))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal?\
    \ (candidate \"three\") \"three\")\n    (check-equal? (candidate \"three five\
    \ nine\") \"three five nine\")\n    (check-equal? (candidate \"five zero four\
    \ seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpvqlntotg.rkt:15:46: read-syntax: unexpected `)`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([numbers (string->list\
    \ numbers)])\n    (sort numbers <)\n    (string->list numbers)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n    (check-equal?\
    \ (candidate \"\") \"\")\n    (check-equal? (candidate \"three\") \"three\")\n\
    \    (check-equal? (candidate \"three five nine\") \"three five nine\")\n    (check-equal?\
    \ (candidate \"five zero four seven nine eight\") \"zero four five seven eight\
    \ nine\")\n    (check-equal? (candidate \"six five four three two one zero\")\
    \ \"zero one two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbj_o43_c.rkt:18:4\n\
    \nstring->list: contract violation\n  expected: string?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbj_o43_c.rkt:19:4\n\
    \n<: contract violation\n  expected: real?\n  given: #\\h\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbj_o43_c.rkt:20:4\n\
    \n<: contract violation\n  expected: real?\n  given: #\\h\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbj_o43_c.rkt:21:4\n\
    \n<: contract violation\n  expected: real?\n  given: #\\i\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbj_o43_c.rkt:22:4\n\
    \n<: contract violation\n  expected: real?\n  given: #\\i\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) 'zero]\n    [(equal? (first numbers)\
    \ 'one) 'one]\n    [(equal? (first numbers) 'two) 'two]\n    [(equal? (first numbers)\
    \ 'three) 'three]\n    [(equal? (first numbers) 'four) 'four]\n    [(equal? (first\
    \ numbers) 'five) 'five]\n    [(equal? (first numbers) 'six) 'six]\n    [(equal?\
    \ (first numbers) 'seven) 'seven]\n    [(equal? (first numbers) 'eight) 'eight]\n\
    \    [(equal? (first numbers) 'nine) 'nine]\n    [else (cons (first numbers) (sort_numbers\
    \ (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\")\n\
    \    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpfbn3_ckt.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) (sort_numbers (rest numbers))]\n  \
    \  [(equal? (first numbers) 'one) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'two) (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ 'three) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'four)\
    \ (sort_numbers (rest numbers))]\n    [(equal? (first numbers) 'five) (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) 'six) (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) 'seven) (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) 'eight) (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) 'nine) (sort_numbers (rest numbers))]\n    [else (cons (first numbers)\
    \ (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp448bv79w.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ '']\n    [(equal? (first numbers) 'zero) 'zero]\n    [(equal? (first numbers)\
    \ 'one) 'one]\n    [(equal? (first numbers) 'two) 'two]\n    [(equal? (first numbers)\
    \ 'three) 'three]\n    [(equal? (first numbers) 'four) 'four]\n    [(equal? (first\
    \ numbers) 'five) 'five]\n    [(equal? (first numbers) 'six) 'six]\n    [(equal?\
    \ (first numbers) 'seven) 'seven]\n    [(equal? (first numbers) 'eight) 'eight]\n\
    \    [(equal? (first numbers) 'nine) 'nine]\n    [else (cons (first numbers) (sort_numbers\
    \ (rest numbers)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\")\n\
    \    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpknnpy7x3.rkt:10:24: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (cond\n    [(empty? numbers)\
    \ \"\"]\n    [(equal? (first numbers) \"zero\") (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) \"one\") (sort_numbers (rest numbers))]\n    [(equal?\
    \ (first numbers) \"two\") (sort_numbers (rest numbers))]\n    [(equal? (first\
    \ numbers) \"three\") (sort_numbers (rest numbers))]\n    [(equal? (first numbers)\
    \ \"four\") (sort_numbers (rest numbers))]\n    [(equal? (first numbers) \"five\"\
    ) (sort_numbers (rest numbers))]\n    [(equal? (first numbers) \"six\") (sort_numbers\
    \ (rest numbers))]\n    [(equal? (first numbers) \"seven\") (sort_numbers (rest\
    \ numbers))]\n    [(equal? (first numbers) \"eight\") (sort_numbers (rest numbers))]\n\
    \    [(equal? (first numbers) \"nine\") (sort_numbers (rest numbers))]\n    [else\
    \ (cons (first numbers) (sort_numbers (rest numbers)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n    (check-equal?\
    \ (candidate \"\") \"\")\n    (check-equal? (candidate \"three\") \"three\")\n\
    \    (check-equal? (candidate \"three five nine\") \"three five nine\")\n    (check-equal?\
    \ (candidate \"five zero four seven nine eight\") \"zero four five seven eight\
    \ nine\")\n    (check-equal? (candidate \"six five four three two one zero\")\
    \ \"zero one two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoabd0aed.rkt:28:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpoabd0aed.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"three\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpoabd0aed.rkt:30:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"three\
    \ five nine\"\n--------------------\n--------------------\nERROR\nname:      \
    \ check-equal?\nlocation:   /tmp/tmpoabd0aed.rkt:31:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"five zero four seven nine\
    \ eight\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpoabd0aed.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"six five four three two one zero\"\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> sort_numbers('three one five')\n;; 'one\
    \ three five'\n(define (sort_numbers numbers)\n  (let ([number-list '()])\n  \
    \  (loop for [n numbers]\n          collect (cond [(number? n) (cons n number-list)]\n\
    \                      [(string=? (number->string n) \"zero\") (cons \"zero\"\
    \ number-list)]\n                      [(string=? (number->string n) \"one\")\
    \ (cons \"one\" number-list)]\n                      [(string=? (number->string\
    \ n) \"two\") (cons \"two\" number-list)]\n                      [(string=? (number->string\
    \ n) \"three\") (cons \"three\" number-list)]\n                      [(string=?\
    \ (number->string n) \"four\") (cons \"four\" number-list)]\n                \
    \      [(string=? (number->string n) \"five\") (cons \"five\" number-list)]\n\
    \                      [(string=? (number->string n) \"six\") (cons \"six\" number-list)]\n\
    \                      [(string=? (number->string n) \"seven\") (cons \"seven\"\
    \ number-list)]\n                      [(string=? (number->string n) \"eight\"\
    ) (cons \"eight\" number-list)]\n                      [(string=? (number->string\
    \ n) \"nine\") (cons \"nine\" number-list)]\n                      [else (cons\
    \ n number-list)])))\n    (string-append (sort number-list <))\n    (reverse number-list)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"three\"\
    ) \"three\")\n    (check-equal? (candidate \"three five nine\") \"three five nine\"\
    )\n    (check-equal? (candidate \"five zero four seven nine eight\") \"zero four\
    \ five seven eight nine\")\n    (check-equal? (candidate \"six five four three\
    \ two one zero\") \"zero one two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpza2gre5r.rkt:24:26: read-syntax: unexpected `)`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
