name: HumanEval_147_get_max_triples
language: racket
prompt: "#lang racket\n\n;; You are given a positive integer n. You have to create\
  \ an integer array a of length n.\n;; For each i (1 \u2264 i \u2264 n), the value\
  \ of a[i] = i * i - i + 1.\n;; Return the number of triples (a[i], a[j], a[k]) of\
  \ a where i < j < k, \n;; and a[i] + a[j] + a[k] is a multiple of 3.\n;; Example\
  \ :\n;; Input: n = 5\n;; Output: 1\n;; Explanation: \n;; a = [1, 3, 7, 13, 21]\n\
  ;; The only valid triple is (1, 7, 13).\n(define (get_max_triples n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_max_triples))\n\
  \    (check-equal? (candidate 5) 1)\n    (check-equal? (candidate 6) 4)\n    (check-equal?\
  \ (candidate 10) 36)\n    (check-equal? (candidate 100) 53361)\n))\n\n(test-humaneval)"
completions: ["  (define (helper i j k)\n    (if (< i j)\n        (if (< k i)\n  \
    \          (if (< k j)\n                (if (= (+ (* i i) (* j j)) (* k k))\n\
    \                    (+ 1 (helper (+ i 1) (+ j 1) k))\n                    (+\
    \ 1 (helper (+ i 1) (+ j 1) (+ k k))))\n                (+ 1 (helper (+ i 1) (+\
    \ j 1) (+ k k))))\n            (+ 1 (helper (+ i 1) (+ j 1) k)))\n        (+ 1\
    \ (helper (+ i 1) j k))))\n  (if (< n 0)\n      0\n      (helper (+ 1 n) 0 0)))\n",
  "  (define (helper i j k)\n    (cond ((= i j) (+ i j k))\n          ((= i k) (+\
    \ i j k))\n          ((= j k) (+ i j k))\n          (else (helper (+ i j) (+ j\
    \ k) k))))\n  (helper 1 2 n))\n", "  (define (helper i j k)\n    (cond\n     \
    \ [(= i j) 0]\n      [(= i k) 0]\n      [(= j k) 0]\n      [else (+ (* i (* i\
    \ i j)) (* j (* j j k)) (* k (* k k k)))]))\n  (cond\n    [(= n 0) 0]\n    [(=\
    \ n 1) 1]\n    [else (+ (helper (- n 1) 0 0) (helper (- n 1) 1 0))]))\n", "  (let\
    \ loop ((a (ref (make-array n)))\n             (i 1))\n    (if (< i n)\n     \
    \   (loop (ref (make-array n)) (+ i 1))\n        (if (= (+ i 1) n)\n         \
    \   (+ 1 (loop (ref (make-array n)) (+ i 1)))\n            (loop (ref (make-array\
    \ n)) (+ i 1))))))\n", "  (define (helper i j k)\n    (cond\n      [(= i j) 0]\n\
    \      [(= i k) 0]\n      [(= j k) 0]\n      [else (+ (* i i j) (* j j k) (* k\
    \ k k))]\n      ))\n  (cond\n    [(= n 0) 0]\n    [else (helper (- n 1) (- n 1)\
    \ (- n 1))]))\n", "  (define (helper i j k)\n    (cond\n      [(= i j) 0]\n  \
    \    [(= i k) 0]\n      [(= j k) 0]\n      [(= i k) (+ 1 (helper (+ i 1) j k))]))\n\
    \  (helper 1 2 n))\n", "  (define (helper i j k)\n    (cond\n      [(< i j) (+\
    \ i (+ j k))] \n      [(< j k) (+ j (+ i k))] \n      [else (+ i (+ j k))]\n \
    \   )\n  )\n  (cond\n    [(< n 0) 0]\n    [else (helper (+ 1 n) 0 0)]\n  )\n)\n",
  "  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) k)]\n\
    \      [(< j k) (if (= (+ i j) k) (+ i j) k)]\n      [(< k i) (if (= (+ i j) k)\
    \ (+ i j) k)]\n      [else (if (= (+ i j) k) (+ i j) k)]))\n  (cond\n    [(= n\
    \ 0) 0]\n    [else (+ 1 (helper (- n 1) 0 0))]))\n", "  (define (helper i j k)\n\
    \    (cond\n      [(= i j) (+ i j k)]\n      [(= i k) (+ i j k)]\n      [(= j\
    \ k) (+ i j k)]\n      [(= i k) (helper i (- j k) k)]\n      [(= j k) (helper\
    \ i (- j k) k)]\n      [(= i j) (helper i (- j k) k)]\n      [(= j k) (helper\
    \ i (- j k) k)]\n      [(= i j) (helper i (- j k) k)]\n      [(= j k) (helper\
    \ i (- j k) k)]\n      [(= i j) (helper i (- j k) k)]\n      [(= j k) (helper\
    \ i (- j k) k)]\n      [(= i j) (helper i (- j k) k)]\n      [(= j k) (helper\
    \ i (- j k) k)]\n      [(= i j) (helper i (- j k) k)]\n      [(= j k) (helper\
    \ i (- j k) k)]\n      [(= i j) (helper i (- j k) k)]\n      [(= j k) (helper\
    \ i (- j k) k)]\n      [(= i j) (helper i (- j k) k)]\n      [(= j k) (helper\
    \ i (- j k) k)]\n      [(= i j) (helper i (- j k) k)]\n      [(= j k) (helper\
    \ i (- j k) k)]\n      [(= i j) (helper i (- j k) k)]\n      [(= j k) (helper\
    \ i (- j k) k)]\n      [(= i j) (helper i (- j k) k)]\n      [(= j k) (helper\
    \ i (- j k) k)]\n      [(= i j) (helper i (- j k) k)]\n      [(= j k) (helper\
    \ i (- j k) k)]\n      [(= i j) (helper i (- j k) k)]\n      [(= j k) (helper\
    \ i (- j k) k)]\n      [(= i j) (helper i (- j k) k)]\n      [(= j k) (helper\
    \ i (- j k) k)]\n      [(= i j) (helper i (- j k) k)]\n      [(= j k) (helper\
    \ i (- j k) k)]\n      [(= i j) (helper i (- j k) k)]\n", "  (define (helper i\
    \ j k)\n    (cond\n      [(= i j) (+ i j k)]\n      [(= i k) (+ i j k)]\n    \
    \  [(= j k) (+ i j k)]\n      [else (helper (+ i j) (+ j k) (+ k i))]))\n  (cond\n\
    \    [(= n 0) 0]\n    [else (helper (+ n 1) 0 0)]))\n", "  (define (helper i j\
    \ k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k) (helper\
    \ (+ i 1) k (+ j 1))) (helper (+ i 1) j k))] \n      [(< j k) (if (= (+ j k) k)\
    \ (+ 1 (helper (+ j 1) i k) (helper (+ j 1) k (+ i 1))) (helper (+ j 1) i k))]\
    \ \n      [(< k i) (if (= (+ k i) k) (+ 1 (helper (+ k 1) i j) (helper (+ k 1)\
    \ j (+ i 1))) (helper (+ k 1) i j))] \n      [(= i j) (if (= (+ i j) k) (+ 1 (helper\
    \ (+ i 1) j k) (helper (+ i 1) k (+ j 1))) (helper (+ i 1) j k))] \n      [(=\
    \ j k) (if (= (+ j k) k) (+ 1 (helper (+ j 1) i k) (helper (+ j 1) k (+ i 1)))\
    \ (helper (+ j 1) i k))] \n      [(= k i) (if (= (+ k i) k) (+ 1 (helper (+ k\
    \ 1) i j) (helper (+ k 1) j (+ i 1))) (helper (+ k 1) i j))] \n      [else 0]))\n\
    \  (helper 1 2 n))\n", "  (define (helper a i j k)\n    (cond\n      [(= i j)\
    \ 0]\n      [(= i k) (+ 1 (helper (+ a i) i (+ j 1) k))]\n      [(= j k) (+ 1\
    \ (helper (+ a i) i (+ j 1) k))]\n      [else (+ 1 (helper (+ a i) i (+ j 1) k))]))\n\
    \  (helper '() 1 2 n))\n", "  (let loop ((i 1) (a #(list 1 3 7 13 21)))\n    (if\
    \ (< i n)\n        (loop (+ i 1) a)\n        (+ 1 (loop (+ i 1) (cons (* i i i)\
    \ a))))))\n", "  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i\
    \ j) k) (+ 1 (helper (+ i 1) j k)) 0)]\n      [(< j k) (if (= (+ j k) k) (+ 1\
    \ (helper i (+ j 1) k)) 0)]\n      [(< k n) (if (= (+ i j) (+ j k)) (+ 1 (helper\
    \ (+ i 1) (+ j 1) k)) 0)]\n      [else 0]))\n  (helper 1 1 1))\n", "  (define\
    \ (helper i j k)\n    (cond\n      [(= i j) (+ i j k)]\n      [(= i k) (+ i j\
    \ k)]\n      [(= j k) (+ i j k)]\n      [else (helper (+ i j) (+ j k) k)]))\n\
    \  (cond\n    [(= n 0) 0]\n    [else (helper (+ n 1) 0 0)]))\n", "  (let loop\
    \ ((a #(list 1 3 7 13 21))\n             (i 1))\n    (cond\n      [(= i n) (length\
    \ a)]\n      [(= (modulo i (- a 0)) 3)\n       (loop (append a (list i)) (+ i\
    \ 1))]\n      [else (loop a (+ i 1))])))\n", "  (define (helper i j k)\n    (cond\n\
    \      [(< i j) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k\
    \ (+ j 1))) (helper (+ i 1) j k))] \n      [(< j k) (if (= (+ i j) k) (+ 1 (helper\
    \ (+ i 1) k (+ j 1)) (helper (+ i 1) j (+ k 1))) (helper (+ i 1) k (+ j 1)))]\n\
    \      [(< k i) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j (+ k 1)) (helper (+ i\
    \ 1) k (+ j 1))) (helper (+ i 1) j (+ k 1)))]\n      [else 0]))\n  (if (= n 0)\
    \ 0\n    (+ 1 (helper (+ n 1) 0 0) (helper (+ n 1) 0 0))))\n", "  (define (helper\
    \ i j k)\n    (cond\n      [(= i j) (+ k 1)]\n      [(= i k) (+ j 1)]\n      [(=\
    \ j k) (+ i 1)]\n      [else (helper (+ i 1) (+ j 1) (+ k 1))]))\n  (define (helper\
    \ i j k)\n    (cond\n      [(= i j) (+ k 1)]\n      [(= i k) (+ j 1)]\n      [(=\
    \ j k) (+ i 1)]\n      [else (helper (+ i 1) (+ j 1) (+ k 1))]))\n  (define (helper\
    \ i j k)\n    (cond\n      [(= i j) (+ k 1)]\n      [(= i k) (+ j 1)]\n      [(=\
    \ j k) (+ i 1)]\n      [else (helper (+ i 1) (+ j 1) (+ k 1))]))\n  (define (helper\
    \ i j k)\n    (cond\n      [(= i j) (+ k 1)]\n      [(= i k) (+ j 1)]\n      [(=\
    \ j k) (+ i 1)]\n      [else (helper (+ i 1) (+ j 1) (+ k 1))]))\n  (define (helper\
    \ i j k)\n    (cond\n      [(= i j) (+ k 1)]\n      [(= i k) (+ j 1)]\n      [(=\
    \ j k) (+ i 1)]\n      [else (helper (+ i 1) (+ j 1) (+ k 1))]))\n  (define (helper\
    \ i j k)\n    (cond\n      [(= i j) (+ k 1)]\n      [(= i k) (+ j 1)]\n      [(=\
    \ j k) (+ i 1)]\n      [else (helper (+ i 1) (+ j 1) (+ k 1))]))\n  (define (helper\
    \ i j k)\n    (cond\n      [(= i j) (+ k 1)]\n      [(= i k) (+ j 1)]\n      [(=\
    \ j k) (+ i 1)]\n      [else (helper (+ i 1) (+ j 1) (+ k 1))]))\n  (define (helper\
    \ i j k)\n    (cond\n      [(= i j) (+ k 1)]\n      [(= i k) (+ j 1)]\n      [(=\
    \ j k) (+ i 1)]\n      [else (helper (+ i 1) (+ j 1) (+ k 1))]))\n  (define (helper\
    \ i j k)\n    (cond\n      [(= i j) (+ k 1)]\n      [(= i k) (+ j 1)]\n      [(=\
    \ j k) (+ i 1)]", "  (define (helper a i j k)\n    (cond\n      [(= i j) (+ 1\
    \ (* a 3))]\n      [(= i k) (+ 1 (* a 3))]\n      [else (+ 1 (helper (+ a i) (i)\
    \ (+ j 1) (+ k 1)))]))\n  (helper '(1 2 3 4 5) 0 1 2))\n", "  (define (helper\
    \ i j k)\n    (if (< i j)\n        (if (< k n)\n            (if (= (+ i j k) 3)\n\
    \                (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j 1 k)))\n   \
    \             0))\n        0))\n  (helper 1 2 3))\n", "  (define (helper i j k)\n\
    \    (cond\n      [(= i j) (+ i j k)]\n      [(= i k) (+ i j k)]\n      [(= j\
    \ k) (+ i j k)]\n      [else (helper (+ i j) (+ j k) k)]))\n  (helper 1 2 3))\n",
  "  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ 1 (helper\
    \ (+ i 1) j k) (helper (+ i 1) k (+ j 1))) (+ 1 (helper (+ i 1) j (+ k 1))))]\n\
    \      [(< j k) (if (= (+ j k) i) (+ 1 (helper (+ j 1) i k) (helper (+ j 1) k\
    \ (+ i 1))) (+ 1 (helper (+ j 1) i (+ k 1))))]\n      [(< k i) (if (= (+ k i)\
    \ j) (+ 1 (helper (+ k 1) i j) (helper (+ k 1) j (+ i 1))) (+ 1 (helper (+ k 1)\
    \ i (+ j 1))))]\n      [else 0]))\n  (if (= n 0)\n      0\n      (+ 1 (helper\
    \ (+ n 1) 0 0) (helper (+ n 1) 0 0) (helper (+ n 1) 0 0))))\n", "  (define (helper\
    \ i j k)\n    (cond ((= i j) (+ i j k))\n          ((= i k) (+ i j k))\n     \
    \     ((= j k) (+ i j k))\n          (else (helper (+ i j) (+ j k) (+ k i))))\n\
    \  (helper 1 2 3))\n", "  (let loop ((a #(list 1 3 7 13 21))\n             (i\
    \ 1))\n    (cond\n      [(= i n) 0]\n      [(= (first a) (* i i i i)) (+ 1 (loop\
    \ (rest a) (+ i 1)))]\n      [else (loop (rest a) (+ i 1))]))))\n", "  (define\
    \ (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ 1 (helper (+\
    \ i 1) j k)) 0)]\n      [(< j k) (if (= (+ j k) k) (+ 1 (helper i (+ j 1) k))\
    \ 0)]\n      [(< k k) (if (= (+ k k) k) (+ 1 (helper i (+ k 1) k)) 0)]\n     \
    \ [else 0]))\n  (if (= n 0) 0\n      (+ 1 (helper (- n 1) 0 0))))\n", "  (define\
    \ (helper i j k)\n    (cond\n      [(= i j) (+ i j k)]\n      [(= i k) (+ i j\
    \ k)]\n      [(= j k) (+ i j k)]\n      [else (helper (+ i j) (+ j k) k)]))\n\
    \  (cond\n    [(= n 0) 0]\n    [else (helper (+ 1 n) 1 n)]))\n", "  (let loop\
    \ ((i 1)\n             (a (ref (make-array n :initial-element 0)))\n         \
    \    (count 0))\n    (cond\n      [(< i n) count]\n      [(= i n) (loop (+ i 1)\
    \ (+ a i) (+ count 1))]\n      [else (loop (+ i 1) (+ a i) (+ count (loop (+ i\
    \ 1) (+ a i) (+ count 1))))]))\n  (ref a))\n", "  (define (helper i j k)\n   \
    \ (cond\n      [(< i j) (+ i (+ j k))] \n      [(< j k) (+ j (+ i k))] \n    \
    \  [else (+ i (+ j k))]\n    )\n  )\n  (cond\n    [(= n 0) 0]\n    [else (+ (helper\
    \ 1 0 0)\n             (helper 0 1 0)\n             (helper 0 0 1))]\n  )\n)\n",
  "  (define (helper i j k)\n    (cond ((= i j) 0)\n          ((= i k) 0)\n      \
    \    ((= j k) 0)\n          ((= (+ i j) (+ i k)) 0)\n          ((= (+ i j) (+\
    \ k k)) 0)\n          ((= (+ k j) (+ i k)) 0)\n          ((= (+ k j) (+ k k))\
    \ 0)\n          ((= (+ i j) (+ k j)) 0)\n          ((= (+ i k) (+ k k)) 0)\n \
    \         ((= (+ k j) (+ i k)) 0)\n          ((= (+ k k) (+ i j)) 0)\n       \
    \   ((= (+ i j) (+ j k)) 0)\n          ((= (+ i k) (+ j k)) 0)\n          ((=\
    \ (+ j k) (+ i j)) 0)\n          ((= (+ j k) (+ k j)) 0)\n          ((= (+ k j)\
    \ (+ k k)) 0)\n          ((= (+ k k) (+ j k)) 0)\n          ((= (+ j k) (+ j k))\
    \ 0)\n          ((= (+ k j) (+ k j)) 0)\n          ((= (+ k k) (+ k k)) 0)\n \
    \         ((= (+ k k) (+ j k)) 0)\n          ((= (+ k k) (+ k k)) 0)\n       \
    \   ((= (+ j k) (+ j k)) 0)\n          ((= (+ k j) (+ k j)) 0)\n          ((=\
    \ (+ k k) (+ k k)) 0)\n          ((= (+ k k) (+ j k)) 0)\n          ((= (+ k k)\
    \ (+ k k)) 0)\n          ((= (+ j k) (+ j k)) 0)\n          ((= (+ k j) (+ k j))\
    \ 0)\n          ((= (+ k k) (+ k k)) 0)\n          ((= (+ k k) (+ j k)) 0)\n \
    \         ((= (+ k k) (+ k k)) 0)\n          ((= (+ j k) (+ j k)) 0)\n       \
    \   ((= (+ k j) (+ k j)) 0)\n          ((= (+ k k) (+ k k)) 0)\n          ((=\
    \ (+ k k) (+ j k)) 0)\n          ((= (+ k k) (+ k k)) 0)\n          ((", "  (define\
    \ (helper i j k)\n    (cond\n      [(= i j) 0]\n      [(= i k) 0]\n      [(= j\
    \ k) (+ 1 (helper (+ i 1) j k))]\n      [(= i k) (+ 1 (helper (+ i 1) (+ j 1)\
    \ k))]\n      [(= j k) (+ 1 (helper (+ j 1) i k))]\n      [(= i k) (+ 1 (helper\
    \ (+ i 1) (+ j 1) (+ k 1)))]\n      [(= j k) (+ 1 (helper (+ j 1) i (+ k 1)))]\n\
    \      [(= i k) (+ 1 (helper (+ i 1) (+ j 1) (+ k 1)))]\n      [(= j k) (+ 1 (helper\
    \ (+ j 1) i (+ k 1)))]\n      [(= i k) (+ 1 (helper (+ i 1) (+ j 1) (+ k 1)))]\n\
    \      [(= j k) (+ 1 (helper (+ j 1) i (+ k 1)))]\n      [(= i k) (+ 1 (helper\
    \ (+ i 1) (+ j 1) (+ k 1)))]\n      [(= j k) (+ 1 (helper (+ j 1) i (+ k 1)))]\n\
    \      [(= i k) (+ 1 (helper (+ i 1) (+ j 1) (+ k 1)))]\n      [(= j k) (+ 1 (helper\
    \ (+ j 1) i (+ k 1)))]\n      [(= i k) (+ 1 (helper (+ i 1) (+ j 1) (+ k 1)))]\n\
    \      [(= j k) (+ 1 (helper (+ j 1) i (+ k 1)))]\n      [(= i k) (+ 1 (helper\
    \ (+ i 1) (+ j 1) (+ k 1)))]\n      [(= j k) (+ 1 (helper (+ j 1) i (+ k 1)))]\n\
    \      [(= i k) (+ 1 (helper (+ i 1) (+ j 1) (+ k 1)))]\n      [(= j k) (+ 1 (helper\
    \ (+ j 1) i (+ k 1)))]\n      [(= i k) (+ 1 (helper (+ i 1) (+ j 1) (+ k 1)))]\n\
    \      [(= j k) (+ 1 (helper (+ j 1) i (+ k 1)))]\n      [(= i k) (+ 1 (helper\
    \ (+ i 1) (+ j 1) (+ k 1)))]\n      [(= j k) (+ 1 (helper (+ j 1) i (+ k 1)))]\n\
    \      [(= i k) (+ 1 (helper (+ ", "  (define (helper i j k)\n    (cond\n    \
    \  [(= i j) (+ i j k)]\n      [(= i k) (+ i j k)]\n      [(= j k) (+ i j k)]\n\
    \      [else (helper (+ i j) (+ j k) k)]))\n  (cond\n    [(= n 0) 0]\n    [else\
    \ (helper (+ n 1) 0 0)]))\n", "  (define (helper i j k)\n    (cond\n      [(<\
    \ i j) (if (= (+ i j) k)\n                  (+ 1 (helper (+ i 1) j k))\n     \
    \             (+ 1 (helper (+ i 1) k (+ j k))))]\n      [(< j k) (if (= (+ j k)\
    \ n)\n                  (+ 1 (helper (+ j 1) i k))\n                  (+ 1 (helper\
    \ (+ j 1) k (+ i k))))]\n      [(= i j) (if (= (+ i j) k)\n                  (+\
    \ 1 (helper (+ i 1) j k))\n                  (+ 1 (helper (+ i 1) k (+ j k))))]\n\
    \      [else 0]))\n  (helper (+ n 1) 0 0))\n", "  (define (helper i j k)\n   \
    \ (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) 0)]\n      [(< j k) (if (= (+\
    \ j k) k) (+ j k) 0)]\n      [(= i j) (if (= (+ i j) k) (+ i j) 0)]\n      [(=\
    \ j k) (if (= (+ j k) k) (+ j k) 0)]\n      [(= i j) (if (= (+ i j) k) (+ i j)\
    \ 0)]\n      [(= j k) (if (= (+ j k) k) (+ j k) 0)]\n      [(= i j) (if (= (+\
    \ i j) k) (+ i j) 0)]\n      [(= j k) (if (= (+ j k) k) (+ j k) 0)]\n      [(=\
    \ i j) (if (= (+ i j) k) (+ i j) 0)]\n      [(= j k) (if (= (+ j k) k) (+ j k)\
    \ 0)]\n      [(= i j) (if (= (+ i j) k) (+ i j) 0)]\n      [(= j k) (if (= (+\
    \ j k) k) (+ j k) 0)]\n      [(= i j) (if (= (+ i j) k) (+ i j) 0)]\n      [(=\
    \ j k) (if (= (+ j k) k) (+ j k) 0)]\n      [(= i j) (if (= (+ i j) k) (+ i j)\
    \ 0)]\n      [(= j k) (if (= (+ j k) k) (+ j k) 0)]\n      [(= i j) (if (= (+\
    \ i j) k) (+ i j) 0)]\n      [(= j k) (if (= (+ j k) k) (+ j k) 0)]\n      [(=\
    \ i j) (if (= (+ i j) k) (+ i j) 0)]\n      [(= j k) (if (= (+ j k) k) (+ j k)\
    \ 0)]\n      [(= i j) (if (= (+ i j) k) (+ i j) 0)]\n      [(= j k) (if (= (+\
    \ j k) k) (+ j k) 0)]\n      [(= i j) (if (= (+ i j) k) (+ i ", "  (define (helper\
    \ i j k)\n    (if (< i j)\n        (if (< j k)\n            (if (= (+ i j k) 3)\n\
    \                (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j 1)))\n     \
    \           (+ 1 (helper (+ i 1) j (+ k 1)) helper (+ i k) 1))\n            (if\
    \ (= (+ i j k) 3)\n                (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k\
    \ (+ j 1)))\n                (+ 1 (helper (+ i 1) j (+ k 1)) helper (+ i k) 1))))\n\
    \  (if (< n 0)\n      0\n      (+ 1 (helper (+ n 1) 0 0) (helper (+ n 1) 0 0)\
    \ (helper (+ n 1) 0 0)))) ; #lang racket\n", "  (let loop ((a (nth (range n) 0))\n\
    \             (i 0)\n             (j 0)\n             (k 0))\n    (cond\n    \
    \  [(= i n) (+ 1 (length a))]\n      [(= j n) (+ 1 (length a))]\n      [(= k n)\
    \ (+ 1 (length a))]\n      [(= (+ i j k) n) (+ 1 (length a))]\n      [(= (+ i\
    \ j k) 0) (+ 1 (length a))]\n      [(= (+ i j k) 1) (+ 1 (length a))]\n      [(=\
    \ (+ i j k) 2) (+ 1 (length a))]\n      [(= (+ i j k) 3) (+ 1 (length a))]\n \
    \     [(= (+ i j k) 4) (+ 1 (length a))]\n      [(= (+ i j k) 5) (+ 1 (length\
    \ a))]\n      [(= (+ i j k) 6) (+ 1 (length a))]\n      [(= (+ i j k) 7) (+ 1\
    \ (length a))]\n      [(= (+ i j k) 8) (+ 1 (length a))]\n      [(= (+ i j k)\
    \ 9) (+ 1 (length a))]\n      [(= (+ i j k) 10) (+ 1 (length a))]\n      [(= (+\
    \ i j k) 11) (+ 1 (length a))]\n      [(= (+ i j k) 12) (+ 1 (length a))]\n  \
    \    [(= (+ i j k) 13) (+ 1 (length a))]\n      [(= (+ i j k) 14) (+ 1 (length\
    \ a))]\n      [(= (+ i j k) 15) (+ 1 (length a))]\n      [(= (+ i j k) 16) (+\
    \ 1 (length a))]\n      [(= (+ i j k) 17) (+ 1 (length a))]\n      [(= (+ i j\
    \ k) 18) (+ 1 (length a))]\n      [(= (+ i j k) 19) (+ 1 (length a))]\n      [(=\
    \ (+ i j k) 20) (+ 1 (length a))]\n      [(= (+ i j k) 21) (+ 1 (length a))]\n\
    \      [(= (+ i j k) 22) (+ 1 (length a))]\n      [(= (+ i j k) 23) (+ 1 (length\
    \ a))]\n      [(= (+ i j k) 24) (+ 1 (length a))]\n      [(= (", "  (define (helper\
    \ i j k)\n    (cond\n      [(< i j) (+ 0 (helper (+ i 1) j k))] \n      [(< j\
    \ k) (+ 0 (helper (+ i 1) (+ j 1) k))] \n      [else (+ 0 (helper (+ i 1) (+ j\
    \ 1) (+ k 1)))]))\n  (helper 1 2 n))\n", "  (define (helper i j k)\n    (cond\n\
    \      [(< i j) (if (= (+ i j) k) (+ i j) 0)]\n      [(< j k) (if (= (+ i j) k)\
    \ (+ i j) 0)]\n      [(< k i) (if (= (+ i j) k) (+ i j) 0)]\n      [else (+ 1\
    \ (helper (+ i 1) (+ j 1) k))]))\n  (if (= n 0) 0\n      (+ 1 (helper (+ 1 1)\
    \ (+ 1 1) (+ 1 1)))))\n", "  (define (helper i j k)\n    (if (< i j)\n       \
    \ (if (< k n)\n            (if (= (+ i j k) 3)\n                (+ 1 (helper (+\
    \ i 1) j k) (helper (+ i 1) k (+ j 1 k)))\n                0))\n        0))\n\
    \  (helper (+ 1 n) 1 1))\n", "  (define (helper i j k)\n    (cond\n      [(< i\
    \ j) (if (= (+ i j) k) 0 (+ i j))]\n      [(< j k) (if (= (+ i j) k) 0 (+ i j))]\n\
    \      [(< k i) (if (= (+ i j) k) 0 (+ i j))]\n      [else (+ 1 (helper (+ i 1)\
    \ (+ j 1) (+ k 1)))]))\n  (helper 1 2 n))\n", "  (define (helper a i j k)\n  \
    \  (cond\n      [(= i j) (+ 1 (* i k))]\n      [(= i k) (+ 1 (* j k))]\n     \
    \ [else (+ 1 (helper (+ a i) j k) (helper (+ a j) i k) (helper (+ a k) i j))]))\n\
    \  (helper '(1 2 3 4 5) 0 1 2))\n", "  (let loop ((a #(list 1 3 7 13 21))\n  \
    \           (i 1))\n    (cond ((= i n) 0)\n          ((= (length a) i) 0)\n  \
    \        ((= (modulo (+ a i) 3) 0) (+ 1 (loop (rest a) (+ i 1))))\n          (else\
    \ (loop (rest a) (+ i 1))))))\n", "  (define (helper a i j k)\n    (cond\n   \
    \   [(< i j) (+ 1 (helper (+ a i) i k (+ k j)))]\n      [(< j k) (+ 1 (helper\
    \ (+ a i) i (+ k j) k))]))\n  (helper '() 1 2 3))\n", "  (define (helper i j k)\n\
    \    (cond ((= i j) (+ 1 (* i i k)))\n          ((= i k) (+ 1 (* j j k)))\n  \
    \        ((= j k) (+ 1 (* i j k)))\n          (else (+ 1 (* i j k))))\n    (helper\
    \ i j k))\n  (helper 1 2 3))\n", "  (define (helper a i j k)\n    (cond\n    \
    \  [(= i j) (+ 1 (helper (+ a i) i k k) (helper (+ a j) j k k))]\n      [(= i\
    \ k) (+ 1 (helper (+ a i) i j k) (helper (+ a j) j k k))]\n      [(= j k) (+ 1\
    \ (helper (+ a i) i j k) (helper (+ a j) j k k))]\n      [(= i k) (+ 1 (helper\
    \ (+ a i) i j k) (helper (+ a j) j k k))]\n      [(= j k) (+ 1 (helper (+ a i)\
    \ i j k) (helper (+ a j) j k k))]\n      [(= i j) (+ 1 (helper (+ a i) i k k)\
    \ (helper (+ a j) j k k))]\n      [(= i k) (+ 1 (helper (+ a i) i j k) (helper\
    \ (+ a j) j k k))]\n      [(= j k) (+ 1 (helper (+ a i) i j k) (helper (+ a j)\
    \ j k k))]\n      [(= i j) (+ 1 (helper (+ a i) i k k) (helper (+ a j) j k k))]\n\
    \      [(= i k) (+ 1 (helper (+ a i) i j k) (helper (+ a j) j k k))]\n      [(=\
    \ j k) (+ 1 (helper (+ a i) i j k) (helper (+ a j) j k k))]\n      [(= i j) (+\
    \ 1 (helper (+ a i) i k k) (helper (+ a j) j k k))]\n      [(= i k) (+ 1 (helper\
    \ (+ a i) i j k) (helper (+ a j) j k k))]\n      [(= j k) (+ 1 (helper (+ a i)\
    \ i j k) (helper (+ a j) j k k))]\n      [(= i j) (+ 1 (helper (+ a i) i k k)\
    \ (helper (+ a j) j k k))]\n      [(= i k) (+ 1 (helper (+ a i) i j k) (helper\
    \ (+ a j) j k k))]\n      [(= j k) (+ 1 (helper (+ a i) i j k) (helper (+ a j)\
    \ j k k))]\n      [(= i j) (+ 1 (helper (+ a i) i k k) (helper (+ a j) j ", " \
    \ (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ 1 (helper\
    \ (+ i 1) j k) (helper (+ i 1) k (+ j 1))) (+ 1 (helper (+ i 1) j k) (helper (+\
    \ i 1) k (+ j 1))))]\n      [(< j k) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j\
    \ (+ k 1)) (helper (+ i 1) k (+ j 1))) (+ 1 (helper (+ i 1) j (+ k 1)) (helper\
    \ (+ i 1) k (+ j 1))))]\n      [(< k i) (if (= (+ i j) k) (+ 1 (helper (+ i 1)\
    \ j (+ k 1)) (helper (+ i 1) k (+ j 1))) (+ 1 (helper (+ i 1) j (+ k 1)) (helper\
    \ (+ i 1) k (+ j 1))))]\n      [else 0]))\n  (if (= n 0) 0\n      (+ 1 (helper\
    \ (+ n 1) 0 0) (helper (+ n 1) 0 0) (helper (+ n 1) 0 0))))\n", "  (define (helper\
    \ a i j k)\n    (cond\n      [(< i j) (+ 1 (helper (+ a i) i k (+ k 1)))]\n  \
    \    [(< j k) (+ 1 (helper (+ a i) j (+ k 1) k))]\n      [(= i j) (+ 1 (helper\
    \ (+ a i) i (+ k 1) k))]\n      [(= j k) (+ 1 (helper (+ a i) j (+ k 1) (+ k 1)))]\n\
    \      [(= i k) (+ 1 (helper (+ a i) i (+ k 1) (+ k 1)))]\n      [(= j k) (+ 1\
    \ (helper (+ a i) j (+ k 1) (+ k 1)))]\n      [(= i j) (+ 1 (helper (+ a i) i\
    \ (+ k 1) (+ k 1)))]\n      [(= j k) (+ 1 (helper (+ a i) j (+ k 1) (+ k 1)))]\n\
    \      [(= i k) (+ 1 (helper (+ a i) i (+ k 1) (+ k 1)))]\n      [(= j k) (+ 1\
    \ (helper (+ a i) j (+ k 1) (+ k 1)))]\n      [(= i j) (+ 1 (helper (+ a i) i\
    \ (+ k 1) (+ k 1)))]\n      [(= j k) (+ 1 (helper (+ a i) j (+ k 1) (+ k 1)))]\n\
    \      [(= i k) (+ 1 (helper (+ a i) i (+ k 1) (+ k 1)))]\n      [(= j k) (+ 1\
    \ (helper (+ a i) j (+ k 1) (+ k 1)))]\n      [(= i j) (+ 1 (helper (+ a i) i\
    \ (+ k 1) (+ k 1)))]\n      [(= j k) (+ 1 (helper (+ a i) j (+ k 1) (+ k 1)))]\n\
    \      [(= i k) (+ 1 (helper (+ a i) i (+ k 1) (+ k 1)))]\n      [(= j k) (+ 1\
    \ (helper (+ a i) j (+ k 1) (+ k 1)))]\n      [(= i j) (+ 1 (helper (+ a i) i\
    \ (+ k 1) (+ k 1)))]\n      [(= j k) (+ 1 (helper (+ a i) j (+ k 1) (+ k 1)))]\n\
    \      [(= i k) (+ 1 (helper (+ a i) i (+ k 1) (+ k 1)))]\n      [(= j k) (+ 1\
    \ (helper (+ a i) j (", "  (define (helper i j k)\n    (cond\n      [(< i j) (helper\
    \ (+ i 1) j k)] \n      [(< j k) (helper (+ i 1) (+ j 1) k)]\n      [(< i k) (helper\
    \ (+ i 1) (+ j 1) (+ k 1))]\n      [(= i j) (helper (+ i 1) (+ j 1) k)]\n    \
    \  [(= j k) (helper (+ i 1) j k)]\n      [(= i k) (helper (+ i 1) (+ j 1) (+ k\
    \ 1))]\n      [(= i j) (helper (+ i 1) (+ j 1) k)]\n      [(= j k) (helper (+\
    \ i 1) (+ j 1) k)]\n      [(= i k) (helper (+ i 1) (+ j 1) (+ k 1))]\n      [(=\
    \ i j) (helper (+ i 1) (+ j 1) k)]\n      [(= j k) (helper (+ i 1) (+ j 1) k)]\n\
    \      [(= i k) (helper (+ i 1) (+ j 1) (+ k 1))]\n      [(= i j) (helper (+ i\
    \ 1) (+ j 1) k)]\n      [(= j k) (helper (+ i 1) (+ j 1) k)]\n      [(= i k) (helper\
    \ (+ i 1) (+ j 1) (+ k 1))]\n      [(= i j) (helper (+ i 1) (+ j 1) k)]\n    \
    \  [(= j k) (helper (+ i 1) (+ j 1) k)]\n      [(= i k) (helper (+ i 1) (+ j 1)\
    \ (+ k 1))]\n      [(= i j) (helper (+ i 1) (+ j 1) k)]\n      [(= j k) (helper\
    \ (+ i 1) (+ j 1) k)]\n      [(= i k) (helper (+ i 1) (+ j 1) (+ k 1))]\n    \
    \  [(= i j) (helper (+ i 1) (+ j 1) k)]\n      [(= j k) (helper (+ i 1) (+ j 1)\
    \ k)]\n      [(= i k) (helper (+ i 1) (+ j 1) (+ k 1))]\n      [(= i j) (helper\
    \ (+ i 1) (+ j 1) k)]\n      [(= j k) (helper (+ i 1) (+ j 1) k)]\n      [(= i\
    \ k) (helper (+ i 1) (+ j 1) ", "  (define (helper i j k)\n    (cond ((= i j)\
    \ (+ i j k))\n          ((= i k) (+ i j k))\n          ((= j k) (+ i j k))\n \
    \         (else (helper (+ i j) (+ j k) k))))\n  (define (helper i j k)\n    (cond\
    \ ((= i j) (+ i j k))\n          ((= i k) (+ i j k))\n          ((= j k) (+ i\
    \ j k))\n          (else (helper (+ i j) (+ j k) k))))\n  (define (helper i j\
    \ k)\n    (cond ((= i j) (+ i j k))\n          ((= i k) (+ i j k))\n         \
    \ ((= j k) (+ i j k))\n          (else (helper (+ i j) (+ j k) k))))\n  (define\
    \ (helper i j k)\n    (cond ((= i j) (+ i j k))\n          ((= i k) (+ i j k))\n\
    \          ((= j k) (+ i j k))\n          (else (helper (+ i j) (+ j k) k))))\n\
    \  (define (helper i j k)\n    (cond ((= i j) (+ i j k))\n          ((= i k) (+\
    \ i j k))\n          ((= j k) (+ i j k))\n          (else (helper (+ i j) (+ j\
    \ k) k))))\n  (define (helper i j k)\n    (cond ((= i j) (+ i j k))\n        \
    \  ((= i k) (+ i j k))\n          ((= j k) (+ i j k))\n          (else (helper\
    \ (+ i j) (+ j k) k))))\n  (define (helper i j k)\n    (cond ((= i j) (+ i j k))\n\
    \          ((= i k) (+ i j k))\n          ((= j k) (+ i j k))\n          (else\
    \ (helper (+ i j) (+ j k) k))))\n  (define (helper i j k)\n    (cond ((= i j)\
    \ (+ i j k))\n          ((= i k) (+ i j k))\n          ((= j k) (+ i j k))\n \
    \         (else (helper (+ i j) (+ j k) k))))\n  (define (helper i j k)\n    (cond\
    \ ((= i j) (+ i j k))\n          ((= i k) (+ i j k))\n", "  (define (helper i\
    \ j k)\n    (cond\n      [(= i j) (+ i k k)]\n      [(= i k) (+ i j k)]\n    \
    \  [(= j k) (+ i j k)]\n      [else (+ i j k)]))\n  (cond\n    [(= n 0) 0]\n \
    \   [else (helper (- n 1) (- n 1) (- n 1))]))\n", "  (define (helper i j k)\n\
    \    (cond ((= i j) 0)\n          ((= i k) 0)\n          ((= j k) 0)\n       \
    \   ((= (+ i j) (+ i k)) 0)\n          ((= (+ i j) (+ k k)) 0)\n          ((=\
    \ (+ k j) (+ i k)) 0)\n          ((= (+ k j) (+ k k)) 0)\n          ((= (+ i j)\
    \ (+ k k)) 0)\n          ((= (+ k j) (+ i k)) 0)\n          ((= (+ k j) (+ k k))\
    \ 0)\n          ((= (+ i k) (+ i j)) 0)\n          ((= (+ i k) (+ k j)) 0)\n \
    \         ((= (+ k k) (+ i j)) 0)\n          ((= (+ k k) (+ k j)) 0)\n       \
    \   ((= (+ i k) (+ k j)) 0)\n          ((= (+ i k) (+ i j)) 0)\n          ((=\
    \ (+ k k) (+ i j)) 0)\n          ((= (+ k k) (+ k j)) 0)\n          ((= (+ i j)\
    \ (+ i k)) 0)\n          ((= (+ i j) (+ k k)) 0)\n          ((= (+ k j) (+ i k))\
    \ 0)\n          ((= (+ k j) (+ k k)) 0)\n          ((= (+ i k) (+ k k)) 0)\n \
    \         ((= (+ k k) (+ i k)) 0)\n          ((= (+ k k) (+ k k)) 0)\n       \
    \   ((= (+ i j) (+ i k)) 0)\n          ((= (+ i j) (+ k k)) 0)\n          ((=\
    \ (+ k j) (+ i k)) 0)\n          ((= (+ k j) (+ k k)) 0)\n          ((= (+ i k)\
    \ (+ k k)) 0)\n          ((= (+ k k) (+ i k)) 0)\n          ((= (+ k k) (+ k k))\
    \ 0)\n          ((= (+ i j) (+ i k)) 0)\n          ((= (+ i j) (+ k k)) 0)\n \
    \         ((= (+ k j) (+ i k)) 0)\n          ((= (+ k j) (+ k k)) 0)\n       \
    \   ((= (+ i k) (+ k k)) 0)\n          ((", "  (define (helper i j k)\n    (cond\
    \ ((= i j) (+ i j k))\n          ((= i k) (+ i j k))\n          ((= j k) (+ i\
    \ j k))\n          (else (helper (+ i j) (+ j k) (+ k i))))\n  (if (= n 0)\n \
    \     0\n      (helper (+ n) (+ n) (+ n))))\n", "  (define (helper i j k)\n  \
    \  (cond\n      [(= i j) (+ 1 k)]\n      [(= i k) (+ 1 j)]\n      [(= j k) (+\
    \ 1 i)]\n      [else (helper (+ i 1) (+ j 1) (+ k 1))]))\n  (helper 1 2 3))\n",
  "  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ 1 (helper\
    \ (+ i 1) j k)) 0)]\n      [(< j k) (if (= (+ i j) k) (+ 1 (helper (+ i 1) k (+\
    \ j 1))) 0)]\n      [(< k i) (if (= (+ i j) k) (+ 1 (helper (+ i k) j 1)) 0)]\n\
    \      [else (+ 1 (helper (+ i k) j k))]\n    )\n  )\n  (helper 1 2 n)\n)\n",
  "  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ 1 (helper\
    \ (+ i 1) j k) (helper (+ i 1) k (+ j 1))) (+ 1 (helper (+ i 1) j k)))]\n    \
    \  [(< j k) (if (= (+ i j) k) (+ 1 (helper (+ i 1) k (+ j 1)) (helper (+ i 1)\
    \ j (+ k 1))) (+ 1 (helper (+ i 1) k (+ j 1))))]\n      [(< k i) (if (= (+ i j)\
    \ k) (+ 1 (helper (+ i 1) j (+ k 1)) (helper (+ i 1) k (+ j 1))) (+ 1 (helper\
    \ (+ i 1) j (+ k 1))))]\n      [else 0]))\n  (helper 1 2 n))\n", "  (let loop\
    \ ((a (ref (make-array n '(3 integer))))\n             (i 1))\n    (if (< i n)\n\
    \        (loop (ref (copy-array a i)) (+ i 1))\n        (loop (ref (copy-array\
    \ a i)) (+ i 1))\n        (loop (ref (copy-array a i)) (+ i 1))\n        (loop\
    \ (ref (copy-array a i)) (+ i 1))\n        (loop (ref (copy-array a i)) (+ i 1))\n\
    \        (loop (ref (copy-array a i)) (+ i 1))\n        (loop (ref (copy-array\
    \ a i)) (+ i 1))\n        (loop (ref (copy-array a i)) (+ i 1))\n        (loop\
    \ (ref (copy-array a i)) (+ i 1))\n        (loop (ref (copy-array a i)) (+ i 1))\n\
    \        (loop (ref (copy-array a i)) (+ i 1))\n        (loop (ref (copy-array\
    \ a i)) (+ i 1))\n        (loop (ref (copy-array a i)) (+ i 1))\n        (loop\
    \ (ref (copy-array a i)) (+ i 1))\n        (loop (ref (copy-array a i)) (+ i 1))\n\
    \        (loop (ref (copy-array a i)) (+ i 1))\n        (loop (ref (copy-array\
    \ a i)) (+ i 1))\n        (loop (ref (copy-array a i)) (+ i 1))\n        (loop\
    \ (ref (copy-array a i)) (+ i 1))\n        (loop (ref (copy-array a i)) (+ i 1))\n\
    \        (loop (ref (copy-array a i)) (+ i 1))\n        (loop (ref (copy-array\
    \ a i)) (+ i 1))\n        (loop (ref (copy-array a i)) (+ i 1))\n        (loop\
    \ (ref (copy-array a i)) (+ i 1))\n        (loop (ref (copy-array a i)) (+ i 1))\n\
    \        (loop (ref (copy-array a i)) (+ i 1))\n        (loop (ref (copy-array\
    \ a i)) (+ i 1))\n        (loop (ref (copy-array a i)) (+ i 1))\n        (loop\
    \ (ref (copy-array a i)) (+ i 1))\n        (loop (ref (copy-array a i)) (+ i 1))\n\
    \        (loop (ref ", "  (define (helper i j k)\n    (cond\n      [(= i j) (+\
    \ 1 k)]\n      [(= i k) (+ 1 j)]\n      [(= j k) (+ 1 i)]\n      [else (helper\
    \ i (+ 1 j) (+ 1 k))]))\n  (helper 1 2 3))\n", "  (define (helper i j k)\n   \
    \ (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) k)]\n      [(< j k) (if (= (+\
    \ i j) k) (+ i j) k)]\n      [(< i k) (if (= (+ i j) k) (+ i j) k)]\n      [else\
    \ (if (= (+ i j) k) (+ i j) k)]))\n  (cond\n    [(= n 0) 0]\n    [else (+ 1 (helper\
    \ 1 (+ n 1) 0))]))\n", "  (define (helper i j k)\n    (cond\n      [(< i j) (if\
    \ (= (+ i j) k) (+ 1 (helper (+ i 1) j k) (helper (+ j 1) i k) (helper (+ k 1)\
    \ i j)))]\n      [(= i j) (+ 1 (helper (+ i 1) j k) (helper (+ j 1) i k) (helper\
    \ (+ k 1) i j))]\n      [else 0]))\n  (if (= n 0) 0\n      (+ 1 (helper (+ n 1)\
    \ 0 0) (helper (+ n 1) 0 0) (helper (+ n 1) 0 0))))\n", "  (define (helper i j\
    \ k)\n    (cond\n      [(= i j) (+ 1 (* i i k))] \n      [(= i k) (+ 1 (* i j\
    \ k))] \n      [else (+ 1 (* i j k))]))\n  (cond\n    [(= n 0) 0]\n    [else (helper\
    \ (- n 1) 0 0)]))\n", "  (define (helper i j k)\n    (cond\n      [(< i j) (if\
    \ (= (+ i j) k) (+ i j) (+ i j))]\n      [(< j k) (if (= (+ i j) k) (+ i j) (+\
    \ i j))]\n      [(< i k) (if (= (+ i j) k) (+ i j) (+ i j))]\n      [else (if\
    \ (= (+ i j) k) (+ i j) (+ i j))]))\n  (cond\n    [(< n 0) 0]\n    [else (+ 1\
    \ (apply (lambda (i j k) (helper (+ i 1) (+ j 1) k)) (range (- n 1) (+ n 1))))]))\n",
  "  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) 0 (+ i j))]\n\
    \      [(< j k) (if (= (+ j k) k) 0 (+ j k))]\n      [(< k i) (if (= (+ k i) k)\
    \ 0 (+ k i))]\n      [else (+ 1 (helper (+ i 1) (+ j 1) (+ k 1)))]))\n  (if (=\
    \ n 0)\n      0\n      (+ 1 (helper (+ 1 1) (+ 1 1) (+ 1 1)))))\n", "  (define\
    \ (helper i j k)\n    (cond\n      [(= i j) (+ i j k)]\n      [(= i k) (+ i j\
    \ k)]\n      [(= j k) (+ i j k)]\n      [else (helper (+ i j) (+ j k) k)]))\n\
    \  (helper 1 2 n))\n", "  (let loop ((i 1)\n             (a #(for/list ((j i)\
    \ (in-range i)) (* j j)))\n             (count 0))\n    (if (< i n)\n        (loop\
    \ (+ i 1) (conj a (* i i i)) (+ count 1))\n        count)))\n", "  (define (helper\
    \ i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k)\
    \ (helper (+ i 1) k (+ j k)))\n                  (if (= (+ i k) k) (+ 1 (helper\
    \ (+ i 1) k (+ j k)) (helper (+ i 1) j k)))]\n      [(< j k) (if (= (+ i j) k)\
    \ (+ 1 (helper (+ i 1) j (+ k k)) (helper (+ i 1) k (+ j k)))]\n      [(< k i)\
    \ (if (= (+ i j) k) (+ 1 (helper (+ i 1) j (+ k k)) (helper (+ i 1) k (+ j k)))]\n\
    \      [else 0]))\n  (if (= n 0) 0\n      (+ 1 (helper (+ n 1) 0 0) (helper (+\
    \ n 1) 0 0)))) ; #lang racket\n", "  (define (helper i j k)\n    (cond\n     \
    \ [(< i j) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j\
    \ k)))\n                  (if (= (+ i k) k) (+ 1 (helper (+ i 1) j k) (helper\
    \ (+ i 1) k (+ j k)))\n                  (if (= (+ j k) k) (+ 1 (helper (+ i 1)\
    \ j k) (helper (+ i 1) k (+ j k)))\n                  (if (= (+ i k) k) (+ 1 (helper\
    \ (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n                  (if (= (+ j k) k)\
    \ (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n                  (if\
    \ (= (+ i k) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n      \
    \            (if (= (+ j k) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+\
    \ j k)))\n                  (if (= (+ i k) k) (+ 1 (helper (+ i 1) j k) (helper\
    \ (+ i 1) k (+ j k)))\n                  (if (= (+ j k) k) (+ 1 (helper (+ i 1)\
    \ j k) (helper (+ i 1) k (+ j k)))\n                  (if (= (+ i k) k) (+ 1 (helper\
    \ (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n                  (if (= (+ j k) k)\
    \ (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n                  (if\
    \ (= (+ i k) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n      \
    \            (if (= (+ j k) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+\
    \ j k)))\n                  (if (= (+ i k) k) (+ 1 (helper (+ i 1) j k) (helper\
    \ (+ i 1) k (+ j k)))\n                  (if (= (+ j k) k) (+ 1 (helper (+ i 1)\
    \ j k) (helper (+ i 1) k (+ j k)))\n                  (", "  (define (helper i\
    \ j k)\n    (cond\n      [(= i j) (+ i j k)]\n      [(= i k) (+ i j k)]\n    \
    \  [(= j k) (+ i j k)]\n      [else (helper (+ i j) (+ j k) k)]))\n  (helper 1\
    \ 2 3))\n", "  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j)\
    \ k) 0 (+ i j))]\n      [(< j k) (if (= (+ i j) k) 0 (+ i j))]\n      [(< k i)\
    \ (if (= (+ i j) k) 0 (+ i j))]\n      [else (+ i j k)]))\n  (cond\n    [(< n\
    \ 0) 0]\n    [else (helper 1 (+ n 1) (+ n 1))]))\n", "  (define (helper i j k)\n\
    \    (cond\n      [(< i j) (helper (+ i 1) j k)] \n      [(< j k) (helper (+ i\
    \ 1) (+ j 1) k)]\n      [(< i k) (helper (+ i 1) (+ j 1) (+ k 1))]\n      [else\
    \ (+ 1 (helper (+ i 1) (+ j 1) (+ k 1)))]))\n  (helper 1 2 n))\n", "  (define\
    \ (helper i j k)\n    (cond\n      [(= i j) 0]\n      [(= i k) 0]\n      [(= j\
    \ k) 0]\n      [else (+ 1 (helper (+ i 1) (+ j 1) k) (helper (+ i 1) j k) (helper\
    \ i (+ j 1) k))]\n    )\n  )\n  (helper 1 1 n)\n)\n", "  (define (helper i j k)\n\
    \    (cond\n      [(< i j) (if (= (+ i j) k) 0 (+ i j))]\n      [(< j k) (if (=\
    \ (+ j k) k) 0 (+ j k))]\n      [(< k i) (if (= (+ k i) k) 0 (+ k i))]\n     \
    \ [else (+ i j k)]))\n  (cond\n    [(< n 0) 0]\n    [else (+ 1 (helper 1 (+ n\
    \ 1) (+ n 1)))]))\n", "  (define (helper i j k)\n    (cond\n      [(= i j) (+\
    \ i j k)]\n      [(= i k) (+ i j k)]\n      [(= j k) (+ i j k)]\n      [else (helper\
    \ (+ i j) (+ j k) k)]))\n  (cond\n    [(= n 0) 0]\n    [else (helper (+ 1 n) (+\
    \ 1 n) n)]))\n", "  (define (helper i j k)\n    (cond\n      [(= i j) (+ i j k)]\n\
    \      [(= i k) (+ i j k)]\n      [(= j k) (+ i j k)]\n      [else (helper (+\
    \ i j) (+ j k) (+ k i))]))\n  (helper 1 2 3))\n", "  (define (helper i j k)\n\
    \    (if (< i j)\n        (if (< k i)\n            (if (< k j)\n             \
    \   (if (= (+ (* i i) (* j j)) (* k k))\n                    (+ 1 (helper (+ i\
    \ 1) (+ j 1) k))\n                    (+ 1 (helper (+ i 1) (+ j 1) (+ k k))))\n\
    \                (+ 1 (helper (+ i 1) j k)))\n            (+ 1 (helper (+ i 1)\
    \ j k)))\n        (+ 1 (helper (+ i 1) i k))))\n  (if (< n 0)\n      0\n     \
    \ (helper (- n 1) 0 0)))\n", "  (define (helper i j k)\n    (cond\n      [(= i\
    \ j) (+ i j k)]\n      [(= i k) (+ i j k)]\n      [(= j k) (+ i j k)]\n      [(=\
    \ i k) (helper i (+ j k) k)]\n      [(= j k) (helper i (+ j k) k)]\n      [(=\
    \ i j) (helper i (+ j k) k)]\n      [(= i k) (helper i (+ j k) k)]\n      [(=\
    \ j k) (helper i (+ j k) k)]\n      [(= i j) (helper i (+ j k) k)]\n      [(=\
    \ i k) (helper i (+ j k) k)]\n      [(= j k) (helper i (+ j k) k)]\n      [(=\
    \ i j) (helper i (+ j k) k)]\n      [(= i k) (helper i (+ j k) k)]\n      [(=\
    \ j k) (helper i (+ j k) k)]\n      [(= i j) (helper i (+ j k) k)]\n      [(=\
    \ i k) (helper i (+ j k) k)]\n      [(= j k) (helper i (+ j k) k)]\n      [(=\
    \ i j) (helper i (+ j k) k)]\n      [(= i k) (helper i (+ j k) k)]\n      [(=\
    \ j k) (helper i (+ j k) k)]\n      [(= i j) (helper i (+ j k) k)]\n      [(=\
    \ i k) (helper i (+ j k) k)]\n      [(= j k) (helper i (+ j k) k)]\n      [(=\
    \ i j) (helper i (+ j k) k)]\n      [(= i k) (helper i (+ j k) k)]\n      [(=\
    \ j k) (helper i (+ j k) k)]\n      [(= i j) (helper i (+ j k) k)]\n      [(=\
    \ i k) (helper i (+ j k) k)]\n      [(= j k) (helper i (+ j k) k)]\n      [(=\
    \ i j) (helper i (+ j k) k)]\n      [(= i k) (helper i (+ j k) k)]\n      [(=\
    \ j k) (helper i (+ j k) k)]\n      [(= i j) (helper i (+ j k) k)]\n      [(=\
    \ i k) (helper i (+ j k) k)]\n", "  (define (helper i j k)\n    (if (< i j)\n\
    \        (if (< k i)\n            (if (< k j)\n                (if (= (+ (* i\
    \ i) (* j j) (* k k)) 3)\n                    (+ 1 (helper (+ i 1) (+ j 1) k))\n\
    \                    (+ 1 (helper (+ i 1) (+ j 1) (+ k k))))\n               \
    \ (+ 1 (helper (+ i 1) (+ j 1) (+ k k))))\n            (+ 1 (helper (+ i 1) (+\
    \ j 1) k)))\n        (+ 1 (helper (+ i 1) j k))))\n  (if (< n 0)\n      0\n  \
    \    (helper (+ 1 n) 1 n)))\n", "  (define (helper a i j k)\n    (cond\n     \
    \ [(< i j) (if (= (+ i k) 3) (+ 1 (helper (+ i 1) j k) 0))]\n      [(< j k) (if\
    \ (= (+ j k) 3) (+ 1 (helper a i (+ j 1) k) 0))]\n      [(= i j) (if (= (+ i k)\
    \ 3) (+ 1 (helper a i (+ j 1) k) 0))]\n      [else (+ 1 (helper a i (+ j 1) k)\
    \ 0)]))\n  (if (= n 0) 0\n      (helper (list 1) 0 1 n)))\n", "  (let ([a (make-array\
    \ (list n) (lambda (i) (* i i i i))))]\n    (define (helper i j k)\n      (cond\
    \ [(< i j) (helper (+ i 1) j k)]\n            [(< j k) (helper (+ j 1) i k)]\n\
    \            [(< k i) (helper (+ k 1) i j)]\n            [else (+ 1 (helper (+\
    \ i 1) (+ j 1) (+ k 1))))]))\n    (helper 1 1 n)))\n", "  (define (helper i j\
    \ k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) 0)]\n      [(< j k)\
    \ (if (= (+ i j) k) (+ i j) 0)]\n      [else (if (= (+ i j) k) (+ i j) 0)]))\n\
    \  (cond\n    [(= n 0) 0]\n    [else (+ (helper (- n 1) (- n 1) (- n 1)) (helper\
    \ (- n 1) (- n 1) (- n 2))) (helper (- n 1) (- n 1) (- n 3))]))\n", "  (define\
    \ (helper i j k)\n    (cond\n      [(= i j) 0]\n      [(= i k) 0]\n      [(= j\
    \ k) (+ 1 (helper (+ i 1) j k))]\n      [else (+ 1 (helper (+ i 1) (+ j 1) k))]\n\
    \    )\n  )\n  (helper 1 2 n))\n", "  (define (helper i j k)\n    (cond\n    \
    \  [(= i j) (+ 1 k)]\n      [(= i k) (+ 1 j)]\n      [(= j k) (+ 1 i)]\n     \
    \ [(= i j) (helper i k k)]\n      [(= i k) (helper i j k)]\n      [(= j k) (helper\
    \ j i k)]\n      [(= i j) (helper i k j)]\n      [(= i k) (helper i j j)]\n  \
    \    [(= j k) (helper j i j)]\n      [else (helper i j k)]\n    )\n  )\n  (define\
    \ (helper i j k)\n    (cond\n      [(= i j) (+ 1 k)]\n      [(= i k) (+ 1 j)]\n\
    \      [(= j k) (+ 1 i)]\n      [(= i j) (helper i k k)]\n      [(= i k) (helper\
    \ i j k)]\n      [(= j k) (helper j i k)]\n      [(= i j) (helper i k j)]\n  \
    \    [(= i k) (helper i j j)]\n      [(= j k) (helper j i j)]\n      [else (helper\
    \ i j k)]\n    )\n  )\n  (define (helper i j k)\n    (cond\n      [(= i j) (+\
    \ 1 k)]\n      [(= i k) (+ 1 j)]\n      [(= j k) (+ 1 i)]\n      [(= i j) (helper\
    \ i k k)]\n      [(= i k) (helper i j k)]\n      [(= j k) (helper j i k)]\n  \
    \    [(= i j) (helper i k j)]\n      [(= i k) (helper i j j)]\n      [(= j k)\
    \ (helper j i j)]\n      [else (helper i j k)]\n    )\n  )\n  (define (helper\
    \ i j k)\n    (cond\n      [(= i j) (+ 1 k)]\n      [(= i k) (+ 1 j)]\n      [(=\
    \ j k) (+ 1 i)]\n      [(= i j) (helper i k k)]\n      [(= i k) (helper i j k)]\n\
    \      [(= j k) (helper j i k)]\n      [(= i j) (helper i k j)]\n      [(= i k)\
    \ (helper i j j)]\n      [(= j k) (helper j i j)]\n      [else (helper i j k)]\n",
  "  (define (helper a i j k)\n    (cond\n      [(= i j) (+ 1 (helper (+ a i) i (+\
    \ j k) k))] \n      [(= i k) (+ 1 (helper (+ a i) i (+ j k) k))] \n      [else\
    \ (+ 1 (helper (+ a i) i (+ j k) k))]))\n  (helper '(1 2 3 4 5) 1 2 3))\n", " \
    \ (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) 0 1)]\n\
    \      [(< j k) (if (= (+ j k) k) 0 1)]\n      [else (if (= (+ i j) (+ j k)) 0\
    \ 1)]\n    )\n  )\n  (define (helper i j k)\n    (cond\n      [(< i j) (if (=\
    \ (+ i j) k) 0 1)]\n      [(< j k) (if (= (+ j k) k) 0 1)]\n      [else (if (=\
    \ (+ i j) (+ j k)) 0 1)]\n    )\n  )\n  (define (helper i j k)\n    (cond\n  \
    \    [(< i j) (if (= (+ i j) k) 0 1)]\n      [(< j k) (if (= (+ j k) k) 0 1)]\n\
    \      [else (if (= (+ i j) (+ j k)) 0 1)]\n    )\n  )\n  (define (helper i j\
    \ k)\n    (cond\n      [(< i j) (if (= (+ i j) k) 0 1)]\n      [(< j k) (if (=\
    \ (+ j k) k) 0 1)]\n      [else (if (= (+ i j) (+ j k)) 0 1)]\n    )\n  )\n  (define\
    \ (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) 0 1)]\n      [(<\
    \ j k) (if (= (+ j k) k) 0 1)]\n      [else (if (= (+ i j) (+ j k)) 0 1)]\n  \
    \  )\n  )\n  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j)\
    \ k) 0 1)]\n      [(< j k) (if (= (+ j k) k) 0 1)]\n      [else (if (= (+ i j)\
    \ (+ j k)) 0 1)]\n    )\n  )\n  (define (helper i j k)\n    (cond\n      [(< i\
    \ j) (if (= (+ i j) k) 0 1)]\n      [(< j k) (if (= (+ j k) k) 0 1)]\n      [else\
    \ (if (= (+ i j) (+ j k)) 0 1)]\n    )\n  )\n  (define (helper i j k)\n    (cond\n\
    \      [(< i j) (if (= (+ i j) k) 0 1)]\n      [(< j k) (if (", "  (define (helper\
    \ i j k)\n    (cond ((= i j) (+ i j k))\n          ((= i k) (+ i j k))\n     \
    \     ((= j k) (+ i j k))\n          (else (helper (+ i j) (+ j k) (+ k i))))\n\
    \  (helper 1 2 3))\n", "  (define (helper a i j k)\n    (cond\n      [(< i j)\
    \ (+ 1 (helper (+ a i) i k k) (helper (+ a j) j k k) (helper (+ a k) i j k))])\n\
    \  (cond\n    [(= i j) (+ 1 (helper a i k k) (helper a j k k) (helper a i j k))])\n\
    \  (cond\n    [(= i k) (+ 1 (helper a i j k) (helper a j k k) (helper a i k j))])\n\
    \  (cond\n    [(= j k) (+ 1 (helper a i j k) (helper a i k k) (helper a j k j))])\n\
    \  (cond\n    [(= i k) (+ 1 (helper a i j k) (helper a j k k) (helper a i k j))]))",
  "  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) (+\
    \ i j))]\n      [(< j k) (if (= (+ i j) k) (+ i j) (+ i j))]\n      [(< k i) (if\
    \ (= (+ i j) k) (+ i j) (+ i j))]\n      [else (if (= (+ i j) k) (+ i j) (+ i\
    \ j))]))\n  (cond\n    [(< n 0) 0]\n    [else (+ 1 (helper 1 (+ n 1) (+ n 1)))]))\n",
  "  (define (helper i j k)\n    (cond\n      [(= i j) (+ k k)]\n      [(= i k) (+\
    \ k k)]\n      [(= j k) (+ k k)]\n      [else (helper (+ i 1) (+ j 1) (+ k 1))]))\n\
    \  (cond\n    [(= n 0) 0]\n    [else (helper (+ n 1) (+ n 1) (+ n 1))]))\n", " \
    \ (define (helper i j k)\n    (cond\n      [(= i j) (+ i j k)]\n      [(= i k)\
    \ (+ i j k)]\n      [(= j k) (+ i j k)]\n      [else (helper (+ i j) (+ j k) k)]))\n\
    \  (define (helper i j k)\n    (cond\n      [(= i j) (+ i j k)]\n      [(= i k)\
    \ (+ i j k)]\n      [(= j k) (+ i j k)]\n      [else (helper (+ i j) (+ j k) k)]))\n\
    \  (define (helper i j k)\n    (cond\n      [(= i j) (+ i j k)]\n      [(= i k)\
    \ (+ i j k)]\n      [(= j k) (+ i j k)]\n      [else (helper (+ i j) (+ j k) k)]))\n\
    \  (define (helper i j k)\n    (cond\n      [(= i j) (+ i j k)]\n      [(= i k)\
    \ (+ i j k)]\n      [(= j k) (+ i j k)]\n      [else (helper (+ i j) (+ j k) k)]))\n\
    \  (define (helper i j k)\n    (cond\n      [(= i j) (+ i j k)]\n      [(= i k)\
    \ (+ i j k)]\n      [(= j k) (+ i j k)]\n      [else (helper (+ i j) (+ j k) k)]))\n\
    \  (define (helper i j k)\n    (cond\n      [(= i j) (+ i j k)]\n      [(= i k)\
    \ (+ i j k)]\n      [(= j k) (+ i j k)]\n      [else (helper (+ i j) (+ j k) k)]))\n\
    \  (define (helper i j k)\n    (cond\n      [(= i j) (+ i j k)]\n      [(= i k)\
    \ (+ i j k)]\n      [(= j k) (+ i j k)]\n      [else (helper (+ i j) (+ j k) k)]))\n\
    \  (define (helper i j k)\n    (cond\n      [(= i j) (+ i j k)]\n      [(= i k)\
    \ (+ i j k)]\n      [(= j k) (+ i j k)]\n      [else (helper (+ i j) (+ j k) k)]))\n\
    \  (define (helper i j k)\n", "  (define (helper i j k)\n    (cond\n      [(=\
    \ i j) (+ i j k)]\n      [(= i k) (+ i j k)]\n      [(= j k) (+ i j k)]\n    \
    \  [(= i k) (helper i (+ j k) k)]\n      [(= j k) (helper i (+ j k) k)]\n    \
    \  [(= i j) (helper i (+ j k) k)]\n      [(= j k) (helper i (+ j k) k)]\n    \
    \  [(= i k) (helper i (+ j k) k)]\n      [(= j k) (helper i (+ j k) k)]\n    \
    \  [(= i j) (helper i (+ j k) k)]\n      [(= j k) (helper i (+ j k) k)]\n    \
    \  [(= i k) (helper i (+ j k) k)]\n      [(= j k) (helper i (+ j k) k)]\n    \
    \  [(= i j) (helper i (+ j k) k)]\n      [(= j k) (helper i (+ j k) k)]\n    \
    \  [(= i k) (helper i (+ j k) k)]\n      [(= j k) (helper i (+ j k) k)]\n    \
    \  [(= i j) (helper i (+ j k) k)]\n      [(= j k) (helper i (+ j k) k)]\n    \
    \  [(= i k) (helper i (+ j k) k)]\n      [(= j k) (helper i (+ j k) k)]\n    \
    \  [(= i j) (helper i (+ j k) k)]\n      [(= j k) (helper i (+ j k) k)]\n    \
    \  [(= i k) (helper i (+ j k) k)]\n      [(= j k) (helper i (+ j k) k)]\n    \
    \  [(= i j) (helper i (+ j k) k)]\n      [(= j k) (helper i (+ j k) k)]\n    \
    \  [(= i k) (helper i (+ j k) k)]\n      [(= j k) (helper i (+ j k) k)]\n    \
    \  [(= i j) (helper i (+ j k) k)]\n      [(= j k) (helper i (+ j k) k)]\n    \
    \  [(= i k) (helper i (+ j k) k)]\n      [(= j k) (helper i (+ j k) k)]\n    \
    \  [(= i j) (helper i (+ j k) k)]\n", "  (define (helper i j k)\n    (cond\n \
    \     [(< i j) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+\
    \ j k)))\n                   (if (= (+ i j) k) (+ 1 (helper (+ i 1) k (+ j k))\
    \ (helper (+ i 1) j k)))]\n      [(< j k) (if (= (+ i j) k) (+ 1 (helper (+ i\
    \ 1) j k) (helper (+ i 1) k (+ j k)))\n                   (if (= (+ i j) k) (+\
    \ 1 (helper (+ i 1) k (+ j k)) (helper (+ i 1) j k)))]\n      [(< i k) (if (=\
    \ (+ i j) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n         \
    \          (if (= (+ i j) k) (+ 1 (helper (+ i 1) k (+ j k)) (helper (+ i 1) j\
    \ k)))]\n      [else 0]))\n  (if (= n 0) 0\n      (helper (+ 1 1) 0 n)))\n", " \
    \ (define (helper i j k)\n    (cond\n      [(< i j) (helper (+ i 1) j k)]\n  \
    \    [(< j k) (helper (+ i 1) (+ j 1) k)]\n      [(< i k) (helper (+ i 1) (+ j\
    \ 1) (+ k 1))]\n      [else (+ 1 (helper (+ i 1) (+ j 1) (+ k 1)))]))\n  (helper\
    \ 1 n n))\n", "  (define (helper i j k)\n    (if (< i j)\n        (if (< j k)\n\
    \            (if (= (+ i j k) 3)\n                (+ 1 (helper (+ i 1) j k) (helper\
    \ (+ i 1) k (+ j 1)))\n                0))\n        0))\n  (if (= n 0)\n     \
    \ 0\n      (helper (+ 1 1) 1 n)))\n", "  (define (helper i j k)\n    (cond\n \
    \     [(< i j) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+\
    \ j k)))\n                  (helper (+ i 1) j k))]\n      [(< j k) (if (= (+ j\
    \ k) k) (+ 1 (helper (+ j 1) i k) (helper (+ j 1) k (+ i k)))\n              \
    \    (helper (+ j 1) i k))]\n      [(< k i) (if (= (+ k i) k) (+ 1 (helper (+\
    \ k 1) j k) (helper (+ k 1) k (+ j k)))\n                  (helper (+ k 1) j k))]\n\
    \      [else 0]))\n  (if (= n 0) 0\n      (+ 1 (helper (+ n 1) 0 0) (helper (+\
    \ n 1) 0 0))))\n", "  (define (helper i j k)\n    (cond\n      [(= i j) (+ i j\
    \ k)]\n      [(= i k) (+ i j k)]\n      [(= j k) (+ i j k)]\n      [(= i k) (helper\
    \ i (- j k) k)]\n      [(= j k) (helper i (- j k) k)]\n      [(= i j) (helper\
    \ i (- j k) k)]\n      [(= j k) (helper i (- j k) k)]\n      [(= i j) (helper\
    \ i (- j k) k)]\n      [(= j k) (helper i (- j k) k)]\n      [(= i j) (helper\
    \ i (- j k) k)]\n      [(= j k) (helper i (- j k) k)]\n      [(= i j) (helper\
    \ i (- j k) k)]\n      [(= j k) (helper i (- j k) k)]\n      [(= i j) (helper\
    \ i (- j k) k)]\n      [(= j k) (helper i (- j k) k)]\n      [(= i j) (helper\
    \ i (- j k) k)]\n      [(= j k) (helper i (- j k) k)]\n      [(= i j) (helper\
    \ i (- j k) k)]\n      [(= j k) (helper i (- j k) k)]\n      [(= i j) (helper\
    \ i (- j k) k)]\n      [(= j k) (helper i (- j k) k)]\n      [(= i j) (helper\
    \ i (- j k) k)]\n      [(= j k) (helper i (- j k) k)]\n      [(= i j) (helper\
    \ i (- j k) k)]\n      [(= j k) (helper i (- j k) k)]\n      [(= i j) (helper\
    \ i (- j k) k)]\n      [(= j k) (helper i (- j k) k)]\n      [(= i j) (helper\
    \ i (- j k) k)]\n      [(= j k) (helper i (- j k) k)]\n      [(= i j) (helper\
    \ i (- j k) k)]\n      [(= j k) (helper i (- j k) k)]\n      [(= i j) (helper\
    \ i (- j k) k)]\n      [(= j k) (helper i (- j k) k)]\n      [(= i j) (helper\
    \ i (- j k) k)]\n", "  (define (helper i j k)\n    (cond\n      [(= i j) (+ i\
    \ j k)]\n      [(= i k) (+ i j k)]\n      [(= j k) (+ i j k)]\n      [else (helper\
    \ (+ i j) (+ j k) k)]))\n  (helper 1 2 n))\n", "  (define (helper i j k)\n   \
    \ (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) 0)]\n      [(< j k) (if (= (+\
    \ i j) k) (+ i j) 0)]\n      [else (if (= (+ i j) k) (+ i j) 0)]))\n  (cond\n\
    \    [(< n 1) 0]\n    [else (+ 1 (helper 1 (+ n 1) (+ n 1)))]))\n", "  (define\
    \ (helper a i j k)\n    (cond\n      [(= i j) (+ 1 (* i i k))] \n      [(= i k)\
    \ (+ 1 (* i j k))] \n      [else (+ 1 (* a i j))]))\n  (define (helper a i j k)\n\
    \    (cond\n      [(= i j) (+ 1 (* i i k))] \n      [(= i k) (+ 1 (* i j k))]\
    \ \n      [else (+ 1 (* a i j))]))\n  (define (helper a i j k)\n    (cond\n  \
    \    [(= i j) (+ 1 (* i i k))] \n      [(= i k) (+ 1 (* i j k))] \n      [else\
    \ (+ 1 (* a i j))]))\n  (define (helper a i j k)\n    (cond\n      [(= i j) (+\
    \ 1 (* i i k))] \n      [(= i k) (+ 1 (* i j k))] \n      [else (+ 1 (* a i j))]))\n\
    \  (define (helper a i j k)\n    (cond\n      [(= i j) (+ 1 (* i i k))] \n   \
    \   [(= i k) (+ 1 (* i j k))] \n      [else (+ 1 (* a i j))]))\n  (define (helper\
    \ a i j k)\n    (cond\n      [(= i j) (+ 1 (* i i k))] \n      [(= i k) (+ 1 (*\
    \ i j k))] \n      [else (+ 1 (* a i j))]))\n  (define (helper a i j k)\n    (cond\n\
    \      [(= i j) (+ 1 (* i i k))] \n      [(= i k) (+ 1 (* i j k))] \n      [else\
    \ (+ 1 (* a i j))]))\n  (define (helper a i j k)\n    (cond\n      [(= i j) (+\
    \ 1 (* i i k))] \n      [(= i k) (+ 1 (* i j k))] \n      [else (+ 1 (* a i j))]))\n\
    \  (define (helper a i j k)\n    (cond\n      [(= i j) (+ 1 (* i i k))] \n   \
    \   [(= i k) (+ 1 (* i j k))] \n      [else (+ 1 (* a i j))]))\n  (define (helper\
    \ a i j k)\n    (cond\n      [(= i j) (+ 1 (* i i k))] \n      [(= i k) (+ 1 (*\
    \ i j k))] \n      [else (+ 1", "  (define (helper i j k)\n    (cond\n      [(<\
    \ i j) (+ 0 (helper (+ i 1) j k))] \n      [(< j k) (+ 0 (helper (+ i 1) (+ j\
    \ 1) k))] \n      [else (+ 0 (helper (+ i 1) (+ j 1) (+ k 1)))]))\n  (cond\n \
    \   [(< n 0) 0]\n    [else (helper (+ 0 1) (+ 0 1) (+ 0 1))]))\n", "  (define\
    \ (helper a i j k)\n    (cond\n      [(= i j) (+ a k)]\n      [(= i k) (+ a j)]\n\
    \      [(= j k) (+ a i)]\n      [else (helper (+ a i) i (+ j k) k)]\n    )\n \
    \ )\n  (define (helper2 a i j k)\n    (cond\n      [(= i j) (+ a k)]\n      [(=\
    \ i k) (+ a j)]\n      [(= j k) (+ a i)]\n      [else (helper2 (+ a i) i (+ j\
    \ k) k)]\n    )\n  )\n  (define (helper3 a i j k)\n    (cond\n      [(= i j) (+\
    \ a k)]\n      [(= i k) (+ a j)]\n      [(= j k) (+ a i)]\n      [else (helper3\
    \ (+ a i) i (+ j k) k)]\n    )\n  )\n  (define (helper4 a i j k)\n    (cond\n\
    \      [(= i j) (+ a k)]\n      [(= i k) (+ a j)]\n      [(= j k) (+ a i)]\n \
    \     [else (helper4 (+ a i) i (+ j k) k)]\n    )\n  )\n  (define (helper5 a i\
    \ j k)\n    (cond\n      [(= i j) (+ a k)]\n      [(= i k) (+ a j)]\n      [(=\
    \ j k) (+ a i)]\n      [else (helper5 (+ a i) i (+ j k) k)]\n    )\n  )\n  (define\
    \ (helper6 a i j k)\n    (cond\n      [(= i j) (+ a k)]\n      [(= i k) (+ a j)]\n\
    \      [(= j k) (+ a i)]\n      [else (helper6 (+ a i) i (+ j k) k)]\n    )\n\
    \  )\n  (define (helper7 a i j k)\n    (cond\n      [(= i j) (+ a k)]\n      [(=\
    \ i k) (+ a j)]\n      [(= j k) (+ a i)]\n      [else (helper7 (+ a i) i (+ j\
    \ k) k)]\n    )\n  )\n  (define (helper8 a i j k)\n    (cond\n      [(= i j) (+\
    \ a k)]\n      [(= i k) (+ a j)]\n      [(= j k) (+ a i)]\n      [", "  (define\
    \ (helper i j k)\n    (cond\n      [(= i j) (+ 1 k)]\n      [(= i k) (+ 1 j)]\n\
    \      [(= j k) (+ 1 i)]\n      [else (helper (+ i 1) (+ j 1) (+ k 1))]))\n  (helper\
    \ 1 2 3))\n", "  (define (helper i j k)\n    (cond\n      [(= i j) (+ i j k)]\n\
    \      [(= i k) (+ i j k)]\n      [(= j k) (+ i j k)]\n      [else (helper (+\
    \ i j) (+ j k) k)]))\n  (cond\n    [(= n 0) 0]\n    [else (helper (+ 1 n) (+ 1\
    \ n) n)]))\n", "  (define (helper i j k)\n    (cond\n      [(= i j) (+ i j k)]\n\
    \      [(= i k) (+ i j k)]\n      [else (helper (+ i k) (+ j k) k)]))\n  (cond\n\
    \    [(= n 0) 0]\n    [else (helper (+ 1 n) 0 0)]))\n", "  (define (helper i j\
    \ k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k)) 0)]\n\
    \      [(< j k) (if (= (+ j k) k) (+ 1 (helper (+ j 1) j k)) 0)]\n      [(= i\
    \ j) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k)) 0)]\n      [(= j k) (if (= (+\
    \ j k) k) (+ 1 (helper (+ j 1) j k)) 0)]\n      [(= i j) (if (= (+ i j) k) (+\
    \ 1 (helper (+ i 1) j k)) 0)]\n      [(= j k) (if (= (+ j k) k) (+ 1 (helper (+\
    \ j 1) j k)) 0)]\n      [(= i j) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k))\
    \ 0)]\n      [(= j k) (if (= (+ j k) k) (+ 1 (helper (+ j 1) j k)) 0)]\n     \
    \ [(= i j) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k)) 0)]\n      [(= j k) (if\
    \ (= (+ j k) k) (+ 1 (helper (+ j 1) j k)) 0)]\n      [(= i j) (if (= (+ i j)\
    \ k) (+ 1 (helper (+ i 1) j k)) 0)]\n      [(= j k) (if (= (+ j k) k) (+ 1 (helper\
    \ (+ j 1) j k)) 0)]\n      [(= i j) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k))\
    \ 0)]\n      [(= j k) (if (= (+ j k) k) (+ 1 (helper (+ j 1) j k)) 0)]\n     \
    \ [(= i j) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k)) 0)]\n      [(= j k) (if\
    \ (= (+ j k) k) (+ 1 (helper (+ j 1) j k)) 0)]\n      [(= i j) (if (= (+ i j)\
    \ k) (+ 1 (helper (+ i 1) j k)) 0)]\n      [(= j k) (if (= (+ j k) k) (+ 1 (helper\
    \ (+ j 1) j k)) ", "  (define (helper i j k)\n    (if (< i j)\n        (if (<\
    \ k n)\n            (if (= (+ i j k) 3)\n                (+ 1 (helper i k (+ j\
    \ 1 k)))\n                0))\n        0))\n  (helper 1 2 n))\n", "  (define (helper\
    \ i j k)\n    (cond\n      [(< i j) (+ i (+ j k))] \n      [(< j k) (+ j (+ i\
    \ k))] \n      [else (+ i (+ j k))]\n      ))\n  (cond\n    [(= n 0) 0]\n    [else\
    \ (helper (- n 1) (- n 1) (- n 1))]\n    ))\n", "  (define (helper i j k)\n  \
    \  (cond ((= i j) (+ i k k))\n          ((= i k) (+ i j k))\n          ((= j k)\
    \ (+ i j k))\n          (else (helper i (+ i j) k))))\n  (define (helper i j k)\n\
    \    (cond ((= i j) (+ i k k))\n          ((= i k) (+ i j k))\n          ((= j\
    \ k) (+ i j k))\n          (else (helper i (+ i j) k))))\n  (define (helper i\
    \ j k)\n    (cond ((= i j) (+ i k k))\n          ((= i k) (+ i j k))\n       \
    \   ((= j k) (+ i j k))\n          (else (helper i (+ i j) k))))\n  (define (helper\
    \ i j k)\n    (cond ((= i j) (+ i k k))\n          ((= i k) (+ i j k))\n     \
    \     ((= j k) (+ i j k))\n          (else (helper i (+ i j) k))))\n  (define\
    \ (helper i j k)\n    (cond ((= i j) (+ i k k))\n          ((= i k) (+ i j k))\n\
    \          ((= j k) (+ i j k))\n          (else (helper i (+ i j) k))))\n  (define\
    \ (helper i j k)\n    (cond ((= i j) (+ i k k))\n          ((= i k) (+ i j k))\n\
    \          ((= j k) (+ i j k))\n          (else (helper i (+ i j) k))))\n  (define\
    \ (helper i j k)\n    (cond ((= i j) (+ i k k))\n          ((= i k) (+ i j k))\n\
    \          ((= j k) (+ i j k))\n          (else (helper i (+ i j) k))))\n  (define\
    \ (helper i j k)\n    (cond ((= i j) (+ i k k))\n          ((= i k) (+ i j k))\n\
    \          ((= j k) (+ i j k))\n          (else (helper i (+ i j) k))))\n  (define\
    \ (helper i j k)\n    (cond ((= i j) (+ i k k))\n          ((= i k) (+ i j k))\n\
    \          ((= j k) (+ i j k))\n          (else (helper i (+ i j) k))))\n  (define\
    \ (helper i j k)\n", "  (define (helper i j k)\n    (cond\n      [(< i j) (helper\
    \ (+ i 1) j k)]\n      [(< j k) (helper (+ i 1) (+ j 1) k)]\n      [(< k n) (helper\
    \ (+ i 1) (+ j 1) (+ k 1))]\n      [else (+ 1 (helper (+ i 1) (+ j 1) (+ k 1)))]))\n\
    \  (helper 1 1 1))\n", "  (define (helper i j k)\n    (cond\n      [(= i j) (+\
    \ i j k)]\n      [(= i k) (+ i j k)]\n      [(= j k) (+ i j k)]\n      [else (helper\
    \ (+ i j) (+ j k) k)]))\n  (cond\n    [(= n 0) 0]\n    [else (helper (+ 1 n) (+\
    \ n n) n)]))\n", "  (define (helper i j k)\n    (if (< i j)\n        (if (< k\
    \ n)\n            (if (= (+ i j k) 3)\n                (+ 1 (helper (+ i 1) j\
    \ k) (helper (+ i 1) (+ j 1) k) (helper (+ i 1) (+ j 1) (+ k 1)))\n          \
    \      (+ 1 (helper (+ i 1) j (+ k 1)) (helper (+ i 1) (+ j 1) k) (helper (+ i\
    \ 1) (+ j 1) (+ k 1))))\n            (+ 1 (helper (+ i 1) j k) (helper (+ i 1)\
    \ (+ j 1) k) (helper (+ i 1) (+ j 1) (+ k 1)))))\n    (if (= i j)\n        (+\
    \ 1 (helper (+ i 1) j k) (helper (+ i 1) (+ j 1) k) (helper (+ i 1) (+ j 1) (+\
    \ k 1)))))\n  (helper 1 2 n))\n", "  (define (helper i j k)\n    (cond\n     \
    \ [(< i j) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k)) 0)]\n      [(< j k) (if\
    \ (= (+ j k) n) (+ 1 (helper (+ j 1) i k)) 0)]\n      [else (+ 1 (helper (+ i\
    \ 1) j k) (helper (+ j 1) i k) (helper (+ k 1) i j))]))\n  (helper 1 1 1))\n",
  "  (define (helper a i j k)\n    (cond\n      [(< i j) (+ 1 (helper (+ a i) i k\
    \ (+ a k)))]\n      [(< j k) (+ 1 (helper (+ a j) k (+ a k)))]\n      [(= i j)\
    \ (+ 1 (helper (+ a i) k (+ a j)))]\n      [(= j k) (+ 1 (helper (+ a j) i (+\
    \ a k)))]\n      [(= i k) (+ 1 (helper (+ a i) j (+ a k)))]\n      [(= k j) (+\
    \ 1 (helper (+ a k) i (+ a j)))]\n      [(= k i) (+ 1 (helper (+ a k) j (+ a i)))]\n\
    \      [else 0]))\n  (helper (list 1) 1 n n))\n", "  (define (helper i j k)\n\
    \    (cond\n      [(= i j) (+ i j k)]\n      [(= i k) (+ i j k)]\n      [(= j\
    \ k) (+ i j k)]\n      [(= i k) (helper i (- j k) k)]\n      [(= j k) (helper\
    \ i (- j k) k)]\n      [(= i j) (helper i (- j k) k)]\n      [(= j k) (helper\
    \ i (- j k) k)]\n      [(= i j) (helper i (- j k) k)]\n      [(= j k) (helper\
    \ i (- j k) k)]\n      [(= i j) (helper i (- j k) k)]\n      [(= j k) (helper\
    \ i (- j k) k)]\n      [(= i j) (helper i (- j k) k)]\n      [(= j k) (helper\
    \ i (- j k) k)]\n      [(= i j) (helper i (- j k) k)]\n      [(= j k) (helper\
    \ i (- j k) k)]\n      [(= i j) (helper i (- j k) k)]\n      [(= j k) (helper\
    \ i (- j k) k)]\n      [(= i j) (helper i (- j k) k)]\n      [(= j k) (helper\
    \ i (- j k) k)]\n      [(= i j) (helper i (- j k) k)]\n      [(= j k) (helper\
    \ i (- j k) k)]\n      [(= i j) (helper i (- j k) k)]\n      [(= j k) (helper\
    \ i (- j k) k)]\n      [(= i j) (helper i (- j k) k)]\n      [(= j k) (helper\
    \ i (- j k) k)]\n      [(= i j) (helper i (- j k) k)]\n      [(= j k) (helper\
    \ i (- j k) k)]\n      [(= i j) (helper i (- j k) k)]\n      [(= j k) (helper\
    \ i (- j k) k)]\n      [(= i j) (helper i (- j k) k)]\n      [(= j k) (helper\
    \ i (- j k) k)]\n      [(= i j) (helper i (- j k) k)]\n      [(= j k) (helper\
    \ i (- j k) k)]\n      [(= i j) (helper i (- j k) k)]\n", "  (define (helper i\
    \ j k)\n    (cond\n      [(< i j) (if (= (+ i j) k)\n                   (+ 1 (helper\
    \ (+ i 1) j k))\n                   (+ 1 (helper (+ i 1) k (+ j k))))]\n     \
    \ [(< j k) (if (= (+ i j) k)\n                   (+ 1 (helper (+ i k) j k))\n\
    \                   (+ 1 (helper (+ i k) k (+ j k))))]\n      [(< k i) (if (=\
    \ (+ i j) k)\n                   (+ 1 (helper (+ i k) j k))\n                \
    \   (+ 1 (helper (+ i k) k (+ j k))))]\n      [else 0]))\n  (if (= n 0)\n    \
    \  0\n      (+ 1 (helper (+ 1 1) 0 0))))\n", "  (define (helper i j k)\n    (cond\n\
    \      [(= i j) (+ 1 (* i i k))]\n      [(= i k) (+ 1 (* j j k))]\n      [(= j\
    \ k) (+ 1 (* i j k))]\n      [else (+ 1 (* i j k))]))\n  (cond\n    [(= n 0) 0]\n\
    \    [else (+ 1 (* (helper (- n 1) 0 0) (helper (- n 1) 1 0) (helper (- n 1) 2\
    \ 0)))]))\n", "  (define (helper i j k)\n    (cond ((= i j) (+ 1 (* i k)))\n \
    \         ((= j k) (+ 1 (* j k)))\n          ((= i k) (+ 1 (* i j))))\n  (define\
    \ (helper i j k)\n    (cond ((= i j) (+ 1 (* i k)))\n          ((= j k) (+ 1 (*\
    \ j k)))\n          ((= i k) (+ 1 (* i j))))\n  (define (helper i j k)\n    (cond\
    \ ((= i j) (+ 1 (* i k)))\n          ((= j k) (+ 1 (* j k)))\n          ((= i\
    \ k) (+ 1 (* i j))))\n  (define (helper i j k)\n    (cond ((= i j) (+ 1 (* i k)))\n\
    \          ((= j k) (+ 1 (* j k)))\n          ((= i k) (+ 1 (* i j))))\n  (define\
    \ (helper i j k)\n    (cond ((= i j) (+ 1 (* i k)))\n          ((= j k) (+ 1 (*\
    \ j k)))\n          ((= i k) (+ 1 (* i j))))\n  (define (helper i j k)\n    (cond\
    \ ((= i j) (+ 1 (* i k)))\n          ((= j k) (+ 1 (* j k)))\n          ((= i\
    \ k) (+ 1 (* i j))))\n  (define (helper i j k)\n    (cond ((= i j) (+ 1 (* i k)))\n\
    \          ((= j k) (+ 1 (* j k)))\n          ((= i k) (+ 1 (* i j))))\n  (define\
    \ (helper i j k)\n    (cond ((= i j) (+ 1 (* i k)))\n          ((= j k) (+ 1 (*\
    \ j k)))\n          ((= i k) (+ 1 (* i j))))\n  (define (helper i j k)\n    (cond\
    \ ((= i j) (+ 1 (* i k)))\n          ((= j k) (+ 1 (* j k)))\n          ((= i\
    \ k) (+ 1 (* i j))))\n  (define (helper i j k)\n    (cond ((= i j) (+ 1 (* i k)))\n\
    \          ((= j k) (+ 1 (* j k)))\n          ((= i k) (+ 1 (* i j))))\n  (define\
    \ (helper i j k)\n    (cond ((= i j) (+ 1 (* i k)))", "  (define (helper i j k)\n\
    \    (cond ((= i j) (+ 1 (* i k)))\n          ((= j k) (+ 1 (* j k)))\n      \
    \    ((= i k) (+ 1 (* i j))))\n    (if (= i j)\n        (helper (+ i 1) j k)\n\
    \        (helper (+ i 1) (+ j 1) k))))\n  (if (= n 0)\n      0\n      (+ 1 (helper\
    \ (- n 1) 0 0))))\n", "  (define (helper i j k)\n    (cond\n      [(= i j) (+\
    \ i j k)]\n      [(= i k) (+ i j k)]\n      [(= j k) (+ i j k)]\n      [else (helper\
    \ (+ i j) (+ j k) k)]))\n  (helper 1 2 3))\n", "  (define (helper a i j k)\n \
    \   (cond\n      [(< i j) (+ 1 (helper (+ a i) i (+ j 1) k))] \n      [(< j k)\
    \ (+ 1 (helper (+ a i) i (+ j k) k))] \n      [(< k i) (+ 1 (helper (+ a i) i\
    \ (+ j k) k))] \n      [else (+ 1 (helper (+ a i) i (+ j k) k))]\n      ))\n \
    \ (helper '() 1 n n))\n", "  (define (helper i j k)\n    (cond\n      [(= i j)\
    \ (+ i j k)]\n      [(= i k) (+ i j k)]\n      [else (helper (+ i k) (+ j k) k)]))\n\
    \  (cond\n    [(= n 0) 0]\n    [else (helper (- n 1) 0 0)]))\n", "  (let loop\
    \ ((i 1) (a #(list 1)))\n    (if (< i n)\n        (loop (+ i 1) (cons a i))\n\
    \        (if (= (+ i (+ i 1)) (+ a (+ i 1)))\n            (+ 1 (loop (+ i 1) a))\n\
    \            (loop (+ i 1) a))))))\n", "  (let loop ((a (ref (make-array n)))\n\
    \             (i 1))\n    (cond\n      [(< i n) 0]\n      [(= i n) 1]\n      [(=\
    \ (ref a) (ref (make-array n)))\n       (loop (ref (make-array n)) (+ i 1))]\n\
    \      [else (loop (ref a) (+ i 1))]\n    )\n  )\n)\n", "  (define (helper i j\
    \ k)\n    (cond\n      [(< i j) (if (= (+ i j) k)\n                  (+ 1 (helper\
    \ (+ i 1) j k))\n                  (+ 1 (helper (+ i 1) k (+ j k))))]\n      [(<\
    \ j k) (if (= (+ i j) k)\n                  (+ 1 (helper (+ i k) j (+ j k)))\n\
    \                  (+ 1 (helper (+ i k) k (+ j k))))]\n      [(< k i) (if (= (+\
    \ i j) k)\n                  (+ 1 (helper (+ i k) j (+ j k)))\n              \
    \    (+ 1 (helper (+ i k) k (+ j k))))]\n      [else 0]))\n  (if (= n 0)\n   \
    \   0\n      (+ 1 (helper (+ 1 1) 0 0))))\n", "  (let loop ((i 1)\n          \
    \   (a (ref (make-array n)))\n             (trip (ref 0)))\n    (cond\n      [(=\
    \ i n) trip]\n      [(= (ref (sub1 a)) (ref 0)) (incf trip)]\n      [(= (ref (sub1\
    \ a)) (ref (sub1 a)))\n       (loop (+ i 1) (sub1 a) (+ trip (* 3 a)))]\n    \
    \  [(= (ref (sub1 a)) (ref (sub1 a) (sub1 a)))\n       (loop (+ i 1) (sub1 a)\
    \ (+ trip (* 3 a)))]\n      [(= (ref (sub1 a)) (ref (sub1 a) (sub1 a) (sub1 a)))\n\
    \       (loop (+ i 1) (sub1 a) (+ trip (* 3 a)))]\n      [(= (ref (sub1 a)) (ref\
    \ (sub1 a) (sub1 a) (sub1 a) (sub1 a)))\n       (loop (+ i 1) (sub1 a) (+ trip\
    \ (* 3 a)))]\n      [(= (ref (sub1 a)) (ref (sub1 a) (sub1 a) (sub1 a) (sub1 a)\
    \ (sub1 a)))\n       (loop (+ i 1) (sub1 a) (+ trip (* 3 a)))]\n      [(= (ref\
    \ (sub1 a)) (ref (sub1 a) (sub1 a) (sub1 a) (sub1 a) (sub1 a) (sub1 a)))\n   \
    \    (loop (+ i 1) (sub1 a) (+ trip (* 3 a)))]\n      [(= (ref (sub1 a)) (ref\
    \ (sub1 a) (sub1 a) (sub1 a) (sub1 a) (sub1 a) (sub1 a) (sub1 a)))\n       (loop\
    \ (+ i 1) (sub1 a) (+ trip (* 3 a)))]\n      [(= (ref (sub1 a)) (ref (sub1 a)\
    \ (sub1 a) (sub1 a) (sub1 a) (sub1 a) (sub1 a) (sub1 a) (sub1 a)))\n       (loop\
    \ (+ i 1) (sub1 a) (+ trip (* 3 a)))]\n      [(= (ref (sub1 a)) (ref (sub1 a)\
    \ (sub1 a) (sub1 a) (sub1 a) (sub1 a) (sub1 a) (sub1 a", "  (define (helper a\
    \ i j k)\n    (cond\n      [(< i j) (+ 1 (helper (+ a i) i (+ j 1) k))] \n   \
    \   [(< j k) (+ 1 (helper (+ a i) i (+ j k) k))] \n      [(< k i) (+ 1 (helper\
    \ (+ a i) i (+ j k) k))] \n      [else (+ 1 (helper (+ a i) i (+ j k) k))]))\n\
    \  (helper (list 1 2 3 4 5) 0 1 2))\n", "  (define (helper i j k)\n    (cond\n\
    \      [(= i j) (+ i j k)]\n      [(= i k) (+ i j k)]\n      [(= j k) (+ i j k)]\n\
    \      [else (helper (+ i j) (+ j k) k)]))\n  (helper 1 2 n))\n", "  (define (helper\
    \ a i j k)\n    (cond\n      [(= i j) (+ a k)]\n      [(= i k) (+ a j)]\n    \
    \  [(= j k) (+ a i)]\n      [else (helper (+ a i) i (+ j 1) (+ k 1))]))\n  (helper\
    \ 0 1 2 n))\n", "  (define (helper i j k)\n    (cond\n      [(= i j) (+ i j k)]\n\
    \      [(= i k) (+ i j k)]\n      [(= j k) (+ i j k)]\n      [(= i k) (helper\
    \ i (- j k) k)]\n      [(= j k) (helper i (- j k) k)]\n      [(= i j) (helper\
    \ i (- k j) k)]\n      [(= j k) (helper i (- k j) k)]\n      [(= i j) (helper\
    \ i (- k j) k)]\n      [(= j k) (helper i (- k j) k)]\n      [(= i j) (helper\
    \ i (- j k) k)]\n      [(= j k) (helper i (- j k) k)]\n      [(= i j) (helper\
    \ i (- j k) k)]\n      [(= j k) (helper i (- j k) k)]\n      [(= i j) (helper\
    \ i (- j k) k)]\n      [(= j k) (helper i (- j k) k)]\n      [(= i j) (helper\
    \ i (- j k) k)]\n      [(= j k) (helper i (- j k) k)]\n      [(= i j) (helper\
    \ i (- j k) k)]\n      [(= j k) (helper i (- j k) k)]\n      [(= i j) (helper\
    \ i (- j k) k)]\n      [(= j k) (helper i (- j k) k)]\n      [(= i j) (helper\
    \ i (- j k) k)]\n      [(= j k) (helper i (- j k) k)]\n      [(= i j) (helper\
    \ i (- j k) k)]\n      [(= j k) (helper i (- j k) k)]\n      [(= i j) (helper\
    \ i (- j k) k)]\n      [(= j k) (helper i (- j k) k)]\n      [(= i j) (helper\
    \ i (- j k) k)]\n      [(= j k) (helper i (- j k) k)]\n      [(= i j) (helper\
    \ i (- j k) k)]\n      [(= j k) (helper i (- j k) k)]\n      [(= i j) (helper\
    \ i (- j k) k)]\n      [(= j k) (helper i (- j k) k)]\n      [(= i j) (helper\
    \ i (- j k) k)]\n", "  (define (helper i j k)\n    (cond ((= i j) (+ 1 (* i k)))\n\
    \          ((= j k) (+ 1 (* j k)))\n          (else (+ 1 (* i j) (* j k))))\n\
    \  (if (= n 0)\n      0\n      (+ 1 (helper (- n 1) (- n 1) (- n 1)))))\n", " \
    \ (define (helper i j k)\n    (cond\n      [(< i j) (helper (+ i 1) j k)]\n  \
    \    [(< j k) (helper (+ i 1) (+ j 1) k)]\n      [(< i k) (helper (+ i 1) (+ j\
    \ 1) (+ k 1))]\n      [else (+ i (+ j (+ k 1)))]))\n  (cond\n    [(< n 0) 0]\n\
    \    [else (helper (+ n 1) 0 0)]))\n", "  (define (helper i j k)\n    (cond\n\
    \      [(= i j) (+ 1 k)]\n      [(= i k) (+ 1 j)]\n      [(= j k) (+ 1 i)]\n \
    \     [else (helper i (+ 1 j) (+ 1 k))]))\n  (cond\n    [(= n 0) 0]\n    [else\
    \ (helper 1 2 3)]))\n", "  (define (helper i j k)\n    (cond\n      [(= i j) (+\
    \ i j k)]\n      [(= i k) (+ i j k)]\n      [(= j k) (+ i j k)]\n      [else (helper\
    \ (+ i j) (+ j k) k)]))\n  (helper 1 2 n))\n", "  (let loop ((a #(list 1 3 7 13\
    \ 21))\n             (i 1))\n    (if (< i n)\n        (loop (append a i) (i +\
    \ 1))\n        (loop a (+ i 1)))))\n", "  (let loop ((a #(list 1 3 7 13 21 ))\n\
    \             (i 1))\n    (if (< i n)\n        (loop (append a (list i)) (+ i\
    \ 1))\n        (loop a (+ i 1)))))\n", "  (define (helper i j k)\n    (cond\n\
    \      [(= i j) (+ i j k)]\n      [(= i k) (+ i j k)]\n      [(= j k) (+ i j k)]\n\
    \      [else (helper (+ i j) (+ j k) k)]))\n  (cond\n    [(= n 0) 0]\n    [else\
    \ (helper (+ 1 n) (+ 1 n) (+ 1 n))]))\n", "  (define (helper i j k)\n    (cond\n\
    \      [(< i j) (if (= (+ i j) k) (+ i j) (+ i j))] \n      [(< j k) (if (= (+\
    \ i j) k) (+ i j) (+ i j))] \n      [(< k i) (if (= (+ i j) k) (+ i j) (+ i j))]\
    \ \n      [else (if (= (+ i j) k) (+ i j) (+ i j))]))\n  (define (helper i j k)\n\
    \    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) (+ i j))] \n      [(< j k)\
    \ (if (= (+ i j) k) (+ i j) (+ i j))] \n      [(< k i) (if (= (+ i j) k) (+ i\
    \ j) (+ i j))] \n      [else (if (= (+ i j) k) (+ i j) (+ i j))]))\n  (define\
    \ (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) (+ i j))]\
    \ \n      [(< j k) (if (= (+ i j) k) (+ i j) (+ i j))] \n      [(< k i) (if (=\
    \ (+ i j) k) (+ i j) (+ i j))] \n      [else (if (= (+ i j) k) (+ i j) (+ i j))]))\n\
    \  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j)\
    \ (+ i j))] \n      [(< j k) (if (= (+ i j) k) (+ i j) (+ i j))] \n      [(< k\
    \ i) (if (= (+ i j) k) (+ i j) (+ i j))] \n      [else (if (= (+ i j) k) (+ i\
    \ j) (+ i j))]))\n  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+\
    \ i j) k) (+ i j) (+ i j))] \n      [(< j k) (if (= (+ i j) k) (+ i j) (+ i j))]\
    \ \n      [(< k i) (if (= (+ i j) k) (+ i j) (", "  (let ((a (ref (make-array\
    \ n :initial-element 0)))\n        (count 0))\n    (do ((i 1 (+ i 1)))\n     \
    \   ((< i n) (set! count 0))\n      (do ((j i (+ j 1)))\n          ((< j n) (set!\
    \ count 0))\n        (do ((k j (+ k 1)))\n            ((< k n) (set! count 0))\n\
    \          (when (= (+ count (* i j k)) 3)\n            (set! count (+ count 1)))\n\
    \        (set! i (+ i 1))\n        (set! j (+ j 1))\n        (set! k (+ k 1))\n\
    \        (set! a (set! a (set! a (set! a (+ a (* i j k)) (* i j k)) (* i j k))))\n\
    \      (when (= (+ count (* i j k)) 3)\n        (set! count (+ count 1)))\n  \
    \  (set! count (+ count 1))\n    (set! count (- count 1))))\n", "  (define (helper\
    \ i j k)\n    (cond ((= i j) (+ 1 (* i k)))\n          ((= i k) (+ 1 (* j k)))\n\
    \          ((= j k) (+ 1 (* i j))))\n    (if (= i j)\n        (helper (+ i 1)\
    \ j k)\n        (helper (+ i 1) (+ j 1) k))))\n  (if (= n 0)\n      0\n      (+\
    \ 1 (helper (- n 1) 0 0))))\n", "  (define (helper i j k)\n    (cond ((= i j)\
    \ (+ i j k))\n          ((= i k) (+ i j k))\n          ((= j k) (+ i j k))\n \
    \         (else (helper (+ i j) (+ j k) (+ k i))))\n  (if (= n 0)\n      0\n \
    \     (helper (- n) (- n) (- n))))\n", "  (define (helper i j k)\n    (cond\n\
    \      [(= i j) (+ 1 k)]\n      [(= i k) (+ 1 j)]\n      [(= j k) (+ 1 i)]\n \
    \     [else (helper i (+ 1 j) (+ 1 k))]))\n  (helper 1 2 3))\n", "  (let loop\
    \ ((i 1) (a #(list 1)))\n    (if (< i n)\n        (loop (+ i 1) (cons a i))\n\
    \        (+ 1 (loop (+ i 1) a))))))\n", "  (define (helper i j k)\n    (cond\n\
    \      [(< i j) (helper (+ i 1) j k)] \n      [(< j k) (helper (+ j 1) i k)]\n\
    \      [(< k i) (helper (+ k 1) j i)]\n      [else (+ i j k)]))\n  (helper 1 1\
    \ n))\n", "  (define (helper i j k)\n    (cond\n      [(< i j) (+ 0 (helper (+\
    \ i 1) j k))]\n      [(< j k) (+ 0 (helper (+ i 1) (+ j 1) k))]\n      [(< i k)\
    \ (+ 0 (helper (+ i 1) (+ j 1) (+ k 1)))]\n      [else (+ 0 (helper (+ i 1) (+\
    \ j 1) (+ k 1)))]))\n  (helper 1 1 n))\n", "  (define (helper i j k)\n    (cond\n\
    \      [(= i j) (+ i j k)]\n      [(= i k) (+ i j k)]\n      [(= j k) (+ i j k)]\n\
    \      [else (helper (+ i j) (+ j k) k)]))\n  (cond\n    [(= n 0) 0]\n    [else\
    \ (helper (+ n 1) 0 0)]))\n", "  (define (helper i j k)\n    (cond ((= i j) (+\
    \ 1 (* i i k)))\n          ((= j k) (+ 1 (* j j k)))\n          ((= i k) (+ 1\
    \ (* i j k)))\n          (else (+ 1 (* i j k))))\n    (helper i j k))\n  (helper\
    \ 1 2 3))\n", "  (define (helper i j k)\n    (cond\n      [(= i j) (+ i j k)]\n\
    \      [(= i k) (+ i j k)]\n      [(= j k) (+ i j k)]\n      [else (helper (+\
    \ i j) (+ j k) k)]))\n  (cond\n    [(= n 0) 0]\n    [else (helper (+ n 1) 0 0)]))\n",
  "  (define (helper i j k)\n    (cond\n      [(= i j) (+ i j k)]\n      [(= i k)\
    \ (+ i j k)]\n      [(= j k) (+ i j k)]\n      [(= i k) (helper i (+ j k) k)]\n\
    \      [(= j k) (helper i (+ j k) k)]\n      [(= i j) (helper i (+ j k) k)]\n\
    \      [(= j k) (helper i (+ j k) k)]\n      [(= i j) (helper i (+ j k) k)]\n\
    \      [(= j k) (helper i (+ j k) k)]\n      [(= i j) (helper i (+ j k) k)]\n\
    \      [(= j k) (helper i (+ j k) k)]\n      [(= i j) (helper i (+ j k) k)]\n\
    \      [(= j k) (helper i (+ j k) k)]\n      [(= i j) (helper i (+ j k) k)]\n\
    \      [(= j k) (helper i (+ j k) k)]\n      [(= i j) (helper i (+ j k) k)]\n\
    \      [(= j k) (helper i (+ j k) k)]\n      [(= i j) (helper i (+ j k) k)]\n\
    \      [(= j k) (helper i (+ j k) k)]\n      [(= i j) (helper i (+ j k) k)]\n\
    \      [(= j k) (helper i (+ j k) k)]\n      [(= i j) (helper i (+ j k) k)]\n\
    \      [(= j k) (helper i (+ j k) k)]\n      [(= i j) (helper i (+ j k) k)]\n\
    \      [(= j k) (helper i (+ j k) k)]\n      [(= i j) (helper i (+ j k) k)]\n\
    \      [(= j k) (helper i (+ j k) k)]\n      [(= i j) (helper i (+ j k) k)]\n\
    \      [(= j k) (helper i (+ j k) k)]\n      [(= i j) (helper i (+ j k) k)]\n\
    \      [(= j k) (helper i (+ j k) k)]\n      [(= i j) (helper i (+ j k) k)]\n\
    \      [(= j k) (helper i (+ j k) k)]\n      [(= i j) (helper i (+ j k) k)]\n",
  "  (define (helper i j k)\n    (cond\n      [(= i j) (+ i j k)]\n      [(= i k)\
    \ (+ i j k)]\n      [(= j k) (+ i j k)]\n      [else (helper (+ i j) (+ j k) k)]))\n\
    \  (cond\n    [(= n 0) 0]\n    [else (helper (+ 1 n) 0 0)]))\n", "  (define (helper\
    \ i j k)\n    (cond\n      [(= i j) (+ 1 (* i k))]\n      [(= i k) (+ 1 (* j k))]\n\
    \      [else (+ 1 (helper (+ i 1) j k) (helper (+ j 1) i k) (helper (+ k 1) i\
    \ j))]))\n  (helper 1 1 n))\n", "  (define (helper i j k)\n    (cond\n      [(=\
    \ i j) (+ i j k)]\n      [(= i k) (+ i j k)]\n      [else (helper (+ i j) (+ i\
    \ k) (+ j k))]))\n  (cond\n    [(= n 0) 0]\n    [else (helper (+ n 1) 0 0)]))\n",
  "  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ 1 (helper\
    \ (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n                       (helper (+\
    \ i 1) j k))]\n      [(< j k) (if (= (+ i j) k) (+ 1 (helper (+ i 1) k (+ j k))\
    \ (helper (+ i 1) j k)))\n                       (helper (+ i 1) j k)]\n     \
    \ [(< k i) (if (= (+ i j) k) (+ 1 (helper (+ i k) j k) (helper (+ i k) k (+ j\
    \ k)))\n                       (helper (+ i k) j k)]\n      [else 0]))\n  (if\
    \ (= n 0) 0\n      (+ 1 (helper (+ 1 1) 0 0) (helper (+ 1 1) 0 0))))\n", "  (define\
    \ (helper i j k)\n    (cond\n      [(= i j) 0]\n      [(= i k) 0]\n      [(= j\
    \ k) 0]\n      [else (+ (* i i j) (* j j k) (* k k k))]\n    )\n  )\n  (define\
    \ (helper i j k)\n    (cond\n      [(= i j) 0]\n      [(= i k) 0]\n      [(= j\
    \ k) 0]\n      [else (+ (* i i j) (* j j k) (* k k k))]\n    )\n  )\n  (define\
    \ (helper i j k)\n    (cond\n      [(= i j) 0]\n      [(= i k) 0]\n      [(= j\
    \ k) 0]\n      [else (+ (* i i j) (* j j k) (* k k k))]\n    )\n  )\n  (define\
    \ (helper i j k)\n    (cond\n      [(= i j) 0]\n      [(= i k) 0]\n      [(= j\
    \ k) 0]\n      [else (+ (* i i j) (* j j k) (* k k k))]\n    )\n  )\n  (define\
    \ (helper i j k)\n    (cond\n      [(= i j) 0]\n      [(= i k) 0]\n      [(= j\
    \ k) 0]\n      [else (+ (* i i j) (* j j k) (* k k k))]\n    )\n  )\n  (define\
    \ (helper i j k)\n    (cond\n      [(= i j) 0]\n      [(= i k) 0]\n      [(= j\
    \ k) 0]\n      [else (+ (* i i j) (* j j k) (* k k k))]\n    )\n  )\n  (define\
    \ (helper i j k)\n    (cond\n      [(= i j) 0]\n      [(= i k) 0]\n      [(= j\
    \ k) 0]\n      [else (+ (* i i j) (* j j k) (* k k k))]\n    )\n  )\n  (define\
    \ (helper i j k)\n    (cond\n      [(= i j) 0]\n      [(= i k) 0]\n      [(= j\
    \ k) 0]\n      [else (+ (* i i j) (* j j k) (* k k k))]\n    )\n  )\n  (define\
    \ (helper i j k)\n    (cond\n      [(= i j) 0]\n      [(= i k) 0]\n      [(= j\
    \ k) 0]\n      [else (+ (* ", "  (define (helper i j k)\n    (cond\n      [(<\
    \ i j) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n\
    \                  (if (= (+ i k) k) (+ 1 (helper (+ i 1) k (+ j k)) (helper (+\
    \ i 1) j k)))]\n      [(< j k) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k) (helper\
    \ (+ i 1) k (+ j k)))\n                  (if (= (+ i k) k) (+ 1 (helper (+ i 1)\
    \ k (+ j k)) (helper (+ i 1) j k)))]\n      [(< k i) (if (= (+ i j) k) (+ 1 (helper\
    \ (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n                  (if (= (+ i k) k)\
    \ (+ 1 (helper (+ i 1) k (+ j k)) (helper (+ i 1) j k)))]\n      [else 0]))\n\
    \  (if (= n 0)\n      0\n      (+ 1 (helper (- n 1) 0 0) (helper (- n 1) 0 0))))\n",
  "  (define (helper i j k)\n    (cond ((= i j) (+ i j k))\n          ((= i k) (+\
    \ i j k))\n          ((= j k) (+ i j k))\n          (else (helper (+ i j) (+ j\
    \ k) (+ k i)))))\n  (define (helper i j k)\n    (cond ((= i j) (+ i j k))\n  \
    \        ((= i k) (+ i j k))\n          ((= j k) (+ i j k))\n          (else (helper\
    \ (+ i j) (+ j k) (+ k i)))))\n  (define (helper i j k)\n    (cond ((= i j) (+\
    \ i j k))\n          ((= i k) (+ i j k))\n          ((= j k) (+ i j k))\n    \
    \      (else (helper (+ i j) (+ j k) (+ k i)))))\n  (define (helper i j k)\n \
    \   (cond ((= i j) (+ i j k))\n          ((= i k) (+ i j k))\n          ((= j\
    \ k) (+ i j k))\n          (else (helper (+ i j) (+ j k) (+ k i)))))\n  (define\
    \ (helper i j k)\n    (cond ((= i j) (+ i j k))\n          ((= i k) (+ i j k))\n\
    \          ((= j k) (+ i j k))\n          (else (helper (+ i j) (+ j k) (+ k i)))))\n\
    \  (define (helper i j k)\n    (cond ((= i j) (+ i j k))\n          ((= i k) (+\
    \ i j k))\n          ((= j k) (+ i j k))\n          (else (helper (+ i j) (+ j\
    \ k) (+ k i)))))\n  (define (helper i j k)\n    (cond ((= i j) (+ i j k))\n  \
    \        ((= i k) (+ i j k))\n          ((= j k) (+ i j k))\n          (else (helper\
    \ (+ i j) (+ j k) (+ k i)))))\n  (define (helper i j k)\n    (cond ((= i j) (+\
    \ i j k))\n          ((= i k) (+ i j k))\n          ((= j k) (+ i j k))\n    \
    \      (else (helper (+ i j) (+ j k) (+ k i)))))\n  (define (helper i j k)\n \
    \   (cond ((= i j) (", "  (let loop ((i 1)\n             (a #(1 3 7 13 21)))\n\
    \    (cond\n      [(= i n) 0]\n      [(= (modulo a[i] 3) 0) (+ 1 (loop (+ i 1)\
    \ (+ a i)))]\n      [else (loop (+ i 1) (+ a i))]))))\n", "  (define (helper i\
    \ j k)\n    (if (< i j)\n        (if (< k i)\n            (if (< k j)\n      \
    \          (if (= (+ (* i i) (* j j) (* k k)) 3)\n                    (+ 1 (helper\
    \ i k (+ k j)))\n                    (+ 1 (helper (+ i k) j k)))\n           \
    \     (+ 1 (helper (+ i j) k (+ k j))))\n        (+ 1 (helper (+ i j) j k))))\n\
    \  (helper 1 n 1))\n", "  (define (helper i j k)\n    (cond\n      [(< i j) (if\
    \ (= (+ i j) k) (+ 1 (helper (+ i 1) j k)) 0)]\n      [(< j k) (if (= (+ i j)\
    \ k) (+ 1 (helper (+ i 1) j (- k 1))) 0)]\n      [(< k i) (if (= (+ i j) k) (+\
    \ 1 (helper (+ i 1) k (- j 1))) 0)]\n      [else (+ 1 (helper (+ i 1) j (+ k 1)))]))\n\
    \  (helper 1 1 n))\n", "  (define (helper i j k)\n    (cond\n      [(< i j) (if\
    \ (= (+ i j) k)\n                  (+ 1 (helper (+ i 1) j k))\n              \
    \    (+ 1 (helper (+ i 1) k (+ j k))))]\n      [(< j k) (if (= (+ j k) n)\n  \
    \                (+ 1 (helper (+ j 1) i k))\n                  (+ 1 (helper (+\
    \ j 1) k (+ i k))))]\n      [(< k n) (if (= (+ k n) n)\n                  (+ 1\
    \ (helper (+ k 1) i (+ j k)))\n                  (+ 1 (helper (+ k 1) j (+ i k))))]\n\
    \      [else 0]))\n  (helper 1 1 1))\n", "  (define (helper i j k)\n    (cond\n\
    \      [(< i j) (if (= (+ i j) k)\n                  (+ 1 (helper (+ i 1) j k))\n\
    \                  (+ 1 (helper (+ i 1) k (+ j k))))]\n      [(< j k) (if (= (+\
    \ j k) n)\n                  (+ 1 (helper (+ j 1) i k))\n                  (+\
    \ 1 (helper (+ j 1) k (+ i k))))]\n      [(< k n) (if (= (+ k n) n)\n        \
    \          (+ 1 (helper (+ k 1) i (+ j k)))\n                  (+ 1 (helper (+\
    \ k 1) j (+ i k))))]\n      [else 0]))\n  (helper 1 1 1))\n", "  (define (helper\
    \ i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) 0 (+ i j))]\n      [(< j\
    \ k) (if (= (+ j k) k) 0 (+ j k))]\n      [(< k i) (if (= (+ k i) k) 0 (+ k i))]\n\
    \      [else (if (= (+ i j) (+ k k)) 0 (+ i j))]))\n  (define (helper i j k)\n\
    \    (cond\n      [(< i j) (if (= (+ i j) k) 0 (+ i j))]\n      [(< j k) (if (=\
    \ (+ j k) k) 0 (+ j k))]\n      [(< k i) (if (= (+ k i) k) 0 (+ k i))]\n     \
    \ [else (if (= (+ i j) (+ k k)) 0 (+ i j))]))\n  (define (helper i j k)\n    (cond\n\
    \      [(< i j) (if (= (+ i j) k) 0 (+ i j))]\n      [(< j k) (if (= (+ j k) k)\
    \ 0 (+ j k))]\n      [(< k i) (if (= (+ k i) k) 0 (+ k i))]\n      [else (if (=\
    \ (+ i j) (+ k k)) 0 (+ i j))]))\n  (define (helper i j k)\n    (cond\n      [(<\
    \ i j) (if (= (+ i j) k) 0 (+ i j))]\n      [(< j k) (if (= (+ j k) k) 0 (+ j\
    \ k))]\n      [(< k i) (if (= (+ k i) k) 0 (+ k i))]\n      [else (if (= (+ i\
    \ j) (+ k k)) 0 (+ i j))]))\n  (define (helper i j k)\n    (cond\n      [(< i\
    \ j) (if (= (+ i j) k) 0 (+ i j))]\n      [(< j k) (if (= (+ j k) k) 0 (+ j k))]\n\
    \      [(< k i) (if (= (+ k i) k) 0 (+ k i))]\n      [else (if (= (+ i j) (+ k\
    \ k)) 0 (+ i j))]))\n  (define (helper i j k)\n    (cond\n      [(< i j) (if (=\
    \ (+ i j) k) 0 (+ i j))]\n      [(< j k) (if (= (+ ", "  (define (helper i j k)\n\
    \    (cond\n      [(< i j) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k) (helper\
    \ (+ i 1) k (+ j k)))\n                   (if (= (+ i k) k) (+ 1 (helper (+ i\
    \ 1) j k) (helper (+ i 1) k (+ j k)))\n                   (if (= (+ j k) k) (+\
    \ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n                   (if (=\
    \ (+ i k) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n         \
    \          (if (= (+ j k) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j\
    \ k)))\n                   (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k) (helper\
    \ (+ i 1) k (+ j k)))\n                   (if (= (+ i k) k) (+ 1 (helper (+ i\
    \ 1) j k) (helper (+ i 1) k (+ j k)))\n                   (if (= (+ j k) k) (+\
    \ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n                   (if (=\
    \ (+ i j) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n         \
    \          (if (= (+ i k) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j\
    \ k)))\n                   (if (= (+ j k) k) (+ 1 (helper (+ i 1) j k) (helper\
    \ (+ i 1) k (+ j k)))\n                   (if (= (+ i j) k) (+ 1 (helper (+ i\
    \ 1) j k) (helper (+ i 1) k (+ j k)))\n                   (if (= (+ i k) k) (+\
    \ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n                   (if (=\
    \ (+ j k) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n         \
    \          (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j\
    \ k)))\n                   (", "  (define (helper i j k)\n    (cond\n      [(=\
    \ i j) (+ k 1)]\n      [(= i k) (+ j 1)]\n      [(= j k) (+ i 1)]\n      [else\
    \ (helper (+ i 1) (+ j 1) (+ k 1))]))\n  (define (helper i j k)\n    (cond\n \
    \     [(= i j) (+ k 1)]\n      [(= i k) (+ j 1)]\n      [(= j k) (+ i 1)]\n  \
    \    [else (helper (+ i 1) (+ j 1) (+ k 1))]))\n  (define (helper i j k)\n   \
    \ (cond\n      [(= i j) (+ k 1)]\n      [(= i k) (+ j 1)]\n      [(= j k) (+ i\
    \ 1)]\n      [else (helper (+ i 1) (+ j 1) (+ k 1))]))\n  (define (helper i j\
    \ k)\n    (cond\n      [(= i j) (+ k 1)]\n      [(= i k) (+ j 1)]\n      [(= j\
    \ k) (+ i 1)]\n      [else (helper (+ i 1) (+ j 1) (+ k 1))]))\n  (define (helper\
    \ i j k)\n    (cond\n      [(= i j) (+ k 1)]\n      [(= i k) (+ j 1)]\n      [(=\
    \ j k) (+ i 1)]\n      [else (helper (+ i 1) (+ j 1) (+ k 1))]))\n  (define (helper\
    \ i j k)\n    (cond\n      [(= i j) (+ k 1)]\n      [(= i k) (+ j 1)]\n      [(=\
    \ j k) (+ i 1)]\n      [else (helper (+ i 1) (+ j 1) (+ k 1))]))\n  (define (helper\
    \ i j k)\n    (cond\n      [(= i j) (+ k 1)]\n      [(= i k) (+ j 1)]\n      [(=\
    \ j k) (+ i 1)]\n      [else (helper (+ i 1) (+ j 1) (+ k 1))]))\n  (define (helper\
    \ i j k)\n    (cond\n      [(= i j) (+ k 1)]\n      [(= i k) (+ j 1)]\n      [(=\
    \ j k) (+ i 1)]\n      [else (helper (+ i 1) (+ j 1) (+ k 1))]))\n  (define (helper\
    \ i j k)\n    (cond\n      [(= i j) (+ k 1)]\n      [(= i k) (+ j 1)]\n      [(=\
    \ j k) (+ i 1)]", "  (let loop ((i 1)\n             (a #(list 1)))\n    (if (<\
    \ i n)\n        (loop (+ i 1) a)\n        (if (= (+ i (+ i 1)) (+ i (+ i 1))\n\
    \            (loop (+ i 1) (cons (+ i (+ i 1)) (+ a (+ i (+ i 1)))))))))\n", " \
    \ (let loop ((a (ref (make-array n :initial-element 0))\n               (i 1))\n\
    \             (j 1))\n    (cond ((= i n) (ref (array-ref a i)))\n          ((=\
    \ j n) (ref (array-ref a j)))\n          ((= (ref (array-ref a i)) (ref (array-ref\
    \ a j))) (ref (array-ref a j)))\n          (else (loop (ref (array-ref a i)) (ref\
    \ (array-ref a j)) (ref (array-ref a j))))))\n", "  (define (helper i j k)\n \
    \   (cond\n      [(< i j) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k)) 0)]\n \
    \     [(< j k) (if (= (+ i j) k) (+ 1 (helper i (+ j 1) k)) 0)]\n      [(< k i)\
    \ (if (= (+ i j) k) (+ 1 (helper i (+ j 1) (+ k 1))) 0)]\n      [else 0]))\n \
    \ (if (= n 0) 0\n      (+ 1 (helper (- n 1) (- n 1) (- n 1)))))\n", "  (define\
    \ (helper i j k)\n    (if (< i j)\n        (if (< k i)\n            (if (< k j)\n\
    \                (if (= (+ (* i i) (* j j)) (* k k))\n                    (+ 1\
    \ (helper (+ i 1) (+ j 1) k))\n                    (+ 1 (helper (+ i 1) (+ k 1)\
    \ j))\n                    (+ 1 (helper (+ i k) (+ j 1) i))\n                )\n\
    \            )\n        )\n    )\n  )\n  (helper 1 2 n))\n", "  (define (helper\
    \ i j k)\n    (cond ((= i j) (+ 1 (* i k)))\n          ((= j k) (+ 1 (* j k)))\n\
    \          ((= i k) (+ 1 (* i j))))\n    (if (= i j)\n        (helper (+ i 1)\
    \ j k)\n        (helper (+ i 1) (+ j 1) k))))\n  (define (helper i j k)\n    (cond\
    \ ((= i j) (+ 1 (* i k)))\n          ((= j k) (+ 1 (* j k)))\n          ((= i\
    \ k) (+ 1 (* i j))))\n  (if (= n 0)\n      0\n      (+ 1 (helper (- n 1) 0 1))))\n",
  "  (define (helper i j k)\n    (if (< i j)\n        (if (< k n)\n            (if\
    \ (= (+ (* i i) (* j j)) (+ (* i j) (* k k)))\n                (helper i (+ j\
    \ 1) k)\n                (helper i (+ j 1) (+ k 1))))\n        (if (< k n)\n \
    \           (if (= (+ (* i i) (* j j)) (+ (* i j) (* k k)))\n                (helper\
    \ i (+ j 1) k)\n                (helper i (+ j 1) (+ k 1))))\n        (if (= (+\
    \ (* i i) (* j j)) (+ (* i j) (* k k)))\n            (+ 1 (helper i (+ j 1) k)))))\n\
    \  (helper 1 1 1))\n", "  (define (helper i j k)\n    (cond\n      [(= i j) (+\
    \ i j k)]\n      [(= i k) (+ i j k)]\n      [(= j k) (+ i j k)]\n      [else (helper\
    \ (+ i j) (+ j k) k)]))\n  (cond\n    [(= n 0) 0]\n    [else (helper (+ 1 n) (+\
    \ 1 n) n)]))\n", "  (define (helper a i j k)\n    (cond\n      [(= i j) (+ a k)]\n\
    \      [(= i k) (+ a j)]\n      [else (helper (+ a i) j (+ a k) k)]))\n  (helper\
    \ 0 1 2 3))\n", "  (define (helper a i j k)\n    (cond\n      [(= i j) (+ a k)]\n\
    \      [(= i k) (+ a j)]\n      [else (helper (+ a i) j k)]\n    )\n  )\n  (define\
    \ (helper a i j k)\n    (cond\n      [(= i j) (+ a k)]\n      [(= i k) (+ a j)]\n\
    \      [else (helper (+ a i) j k)]\n    )\n  )\n  (define (helper a i j k)\n \
    \   (cond\n      [(= i j) (+ a k)]\n      [(= i k) (+ a j)]\n      [else (helper\
    \ (+ a i) j k)]\n    )\n  )\n  (define (helper a i j k)\n    (cond\n      [(=\
    \ i j) (+ a k)]\n      [(= i k) (+ a j)]\n      [else (helper (+ a i) j k)]\n\
    \    )\n  )\n  (define (helper a i j k)\n    (cond\n      [(= i j) (+ a k)]\n\
    \      [(= i k) (+ a j)]\n      [else (helper (+ a i) j k)]\n    )\n  )\n  (define\
    \ (helper a i j k)\n    (cond\n      [(= i j) (+ a k)]\n      [(= i k) (+ a j)]\n\
    \      [else (helper (+ a i) j k)]\n    )\n  )\n  (define (helper a i j k)\n \
    \   (cond\n      [(= i j) (+ a k)]\n      [(= i k) (+ a j)]\n      [else (helper\
    \ (+ a i) j k)]\n    )\n  )\n  (define (helper a i j k)\n    (cond\n      [(=\
    \ i j) (+ a k)]\n      [(= i k) (+ a j)]\n      [else (helper (+ a i) j k)]\n\
    \    )\n  )\n  (define (helper a i j k)\n    (cond\n      [(= i j) (+ a k)]\n\
    \      [(= i k) (+ a j)]\n      [else (helper (+ a i) j k)]\n    )\n  )\n  (define\
    \ (helper a i j k)\n    (cond\n      [(= i j) (+ a k)]\n      [(= i k) (+ a j)]\n\
    \      [else (helper (+ a i) j k)]\n    )\n  )\n  (define (helper a i j k)\n \
    \   (cond\n", "  (define (helper a i j k)\n    (cond\n      [(= i j) (+ a k)]\
    \ \n      [(= i k) (+ a j)]\n      [(= j k) (+ a i)]\n      [else (helper (+ a\
    \ i) i (+ j 1) (+ k 1))]))\n  (helper 0 1 2 n))\n", "  (define (helper i j k)\n\
    \    (cond\n      [(= i j) (+ k k)]\n      [(= i k) (+ j j)]\n      [(= j k) (+\
    \ i i)]\n      [(= i k) (+ j k)]\n      [(= j i) (+ i j)]\n      [(= k i) (+ j\
    \ k)]\n      [(= i j) (+ k k)]\n      [(= i k) (+ j k)]\n      [(= j k) (+ i k)]\n\
    \      [(= k i) (+ j k)]\n      [(= i j) (+ k k)]\n      [(= i k) (+ j k)]\n \
    \     [(= j k) (+ i k)]\n      [(= k i) (+ j k)]\n      [(= i j) (+ k k)]\n  \
    \    [(= i k) (+ j k)]\n      [(= j k) (+ i k)]\n      [(= k i) (+ j k)]\n   \
    \   [(= i j) (+ k k)]\n      [(= i k) (+ j k)]\n      [(= j k) (+ i k)]\n    \
    \  [(= k i) (+ j k)]\n      [(= i j) (+ k k)]\n      [(= i k) (+ j k)]\n     \
    \ [(= j k) (+ i k)]\n      [(= k i) (+ j k)]\n      [(= i j) (+ k k)]\n      [(=\
    \ i k) (+ j k)]\n      [(= j k) (+ i k)]\n      [(= k i) (+ j k)]\n      [(= i\
    \ j) (+ k k)]\n      [(= i k) (+ j k)]\n      [(= j k) (+ i k)]\n      [(= k i)\
    \ (+ j k)]\n      [(= i j) (+ k k)]\n      [(= i k) (+ j k)]\n      [(= j k) (+\
    \ i k)]\n      [(= k i) (+ j k)]\n      [(= i j) (+ k k)]\n      [(= i k) (+ j\
    \ k)]\n      [(= j k) (+ i k)]\n      [(= k i) (+ j k)]\n      [(= i j) (+ k k)]\n\
    \      [(= i k) (+ j k)]\n      [(= j k) (+ i k)]\n      [(= k i) (", "  (define\
    \ (helper i j k)\n    (cond\n      [(= i j) (+ i j k)]\n      [(= i k) (+ i j\
    \ k)]\n      [(= j k) (+ i j k)]\n      [else (helper (+ i j) (+ j k) (+ k i))]))\n\
    \  (cond\n    [(= n 0) 0]\n    [else (helper (+ n 1) (+ n 1) (+ n 1))]))\n", " \
    \ (let loop ((a #(list 1 3 7 13 21))\n             (i 1))\n    (if (< i n)\n \
    \       (loop (append a (list i)) (+ i 1))\n        (loop a (+ i 1)))))\n", " \
    \ (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ 1 (helper\
    \ (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n                  (if (= (+ i j) k)\
    \ (+ 1 (helper (+ i 1) k (+ j k)) (helper (+ i 1) j k)))]\n      [(< j k) (if\
    \ (= (+ i j) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n      \
    \            (if (= (+ i j) k) (+ 1 (helper (+ i 1) k (+ j k)) (helper (+ i 1)\
    \ j k)))]\n      [(< i k) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k) (helper\
    \ (+ i 1) k (+ j k)))\n                  (if (= (+ i j) k) (+ 1 (helper (+ i 1)\
    \ k (+ j k)) (helper (+ i 1) j k)))]\n      [else 0]))\n  (if (= n 0) 0\n    \
    \  (+ 1 (helper (+ 1 1) (+ 1 1) (+ 1 1)))))\n", "  (define (helper i j k)\n  \
    \  (cond\n      [(< i j) (if (= (+ i j) k)\n                  (+ 1 (helper (+\
    \ i 1) j k))\n                  (+ 1 (helper (+ i 1) k (+ j k))))]\n      [(=\
    \ i j) (+ 1 (helper (+ i 1) j k))]))\n  (if (= n 0)\n      0\n      (+ 1 (helper\
    \ (+ 1 1) 0 0))))\n", "  (define (helper i j k)\n    (cond\n      [(< i j) (if\
    \ (= (+ i j) k) (+ 1 (helper (+ i 1) j k) (helper (+ j 1) i k) (helper (+ k 1)\
    \ i j)))]\n      [(= i j) (+ 1 (helper (+ i 1) j k) (helper (+ j 1) i k) (helper\
    \ (+ k 1) i j))]\n      [else 0]))\n  (if (= n 0) 0\n      (helper (+ n 1) 0 0)))\n",
  "  (define (helper i j k)\n    (cond\n      [(= i j) (+ 1 k)]\n      [(= i k) (+\
    \ 1 j)]\n      [(= j k) (+ 1 i)]\n      [else (helper (+ i 1) (+ j 1) (+ k 1))]))\n\
    \  (helper 1 2 3))\n", "  (define (helper i j k)\n    (cond\n      [(< i j) (if\
    \ (= (+ i j) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n      \
    \            (helper (+ i 1) j k))]\n      [(< j k) (if (= (+ i j) k) (+ 1 (helper\
    \ (+ i 1) k (+ j k)) (helper (+ i 1) j k))\n                  (helper (+ i 1)\
    \ k (+ j k)))]\n      [(< k n) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j (+ k k))\
    \ (helper (+ i 1) k (+ j k)))\n                  (helper (+ i 1) j (+ k k)))]))\n\
    \  (helper 1 2 3))\n", "  (define (helper i j k)\n    (cond ((= i j) (+ 1 (* i\
    \ i k)))\n          ((= i k) (+ 1 (* i j k)))\n          ((= j k) (+ 1 (* j i\
    \ k)))\n          (else (+ 1 (helper (+ i 1) (+ j 1) (+ k 1))))))\n  (helper 1\
    \ 2 n))\n", "  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j)\
    \ k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n                 \
    \ (if (= (+ i k) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n  \
    \                (if (= (+ j k) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k\
    \ (+ j k)))\n                  (if (= (+ i k) k) (+ 1 (helper (+ i 1) j k) (helper\
    \ (+ i 1) k (+ j k)))\n                  (if (= (+ j k) k) (+ 1 (helper (+ i 1)\
    \ j k) (helper (+ i 1) k (+ j k)))\n                  (if (= (+ i j) k) (+ 1 (helper\
    \ (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n                  (if (= (+ i k) k)\
    \ (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n                  (if\
    \ (= (+ j k) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n      \
    \            (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+\
    \ j k)))\n                  (if (= (+ i k) k) (+ 1 (helper (+ i 1) j k) (helper\
    \ (+ i 1) k (+ j k)))\n                  (if (= (+ j k) k) (+ 1 (helper (+ i 1)\
    \ j k) (helper (+ i 1) k (+ j k)))\n                  (if (= (+ i j) k) (+ 1 (helper\
    \ (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n                  (if (= (+ i k) k)\
    \ (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n                  (if\
    \ (= (+ j k) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+ j k)))\n      \
    \            (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k) (helper (+ i 1) k (+\
    \ j k)))\n                  (", "  (define (helper i j k)\n    (cond\n      [(<\
    \ i j) (helper (+ i 1) j k)] \n      [(< j k) (helper (+ i 1) (+ j 1) k)]\n  \
    \    [(< k n) (helper (+ i 1) (+ j 1) (+ k 1))]\n      [else (+ 1 (helper (+ i\
    \ 1) (+ j 1) (+ k 1)))]))\n  (helper 1 1 1))\n", "  (define (helper i j k)\n \
    \   (if (< i j)\n        (if (< k i)\n            (if (< k j)\n              \
    \  (if (= (+ (* i i) (* j j)) (* k k))\n                    (+ 1 (helper (+ i\
    \ 1) (+ j 1) k))\n                    (+ 1 (helper (+ i 1) (+ j 1) (+ k k))))\n\
    \                (+ 1 (helper (+ i 1) j k)))\n            (+ 1 (helper (+ i 1)\
    \ (+ j 1) k)))\n        (+ 1 (helper (+ i 1) j k))))\n  (helper 1 n n))\n", " \
    \ (define (helper i j k)\n    (cond\n      [(= i j) (+ 1 k)]\n      [(= i k) (+\
    \ 1 j)]\n      [(= j k) (+ 1 i)]\n      [else (helper (+ i 1) (+ j 1) (+ k 1))]))\n\
    \  (cond\n    [(= n 0) 0]\n    [else (helper (+ 1 1) (+ 1 1) (+ 1 1))]))\n", " \
    \ (define (helper i j k)\n    (cond\n      [(< i j) (helper (+ i 1) j k)]\n  \
    \    [(< j k) (helper (+ i 1) k (+ j 1))]\n      [(< i k) (helper (+ i 1) (+ j\
    \ 1) k)]\n      [(< i j) (helper (+ i 1) (+ j 1) k)]\n      [(< j k) (helper (+\
    \ i 1) j k)]\n      [(< i k) (helper (+ i 1) i k)]\n      [(< i j) (helper (+\
    \ i 1) i k)]\n      [(< j k) (helper (+ i 1) j k)]\n      [(< i k) (helper (+\
    \ i 1) i k)]\n      [(< i j) (helper (+ i 1) i k)]\n      [(< j k) (helper (+\
    \ i 1) j k)]\n      [(< i k) (helper (+ i 1) i k)]\n      [(< i j) (helper (+\
    \ i 1) i k)]\n      [(< j k) (helper (+ i 1) j k)]\n      [(< i k) (helper (+\
    \ i 1) i k)]\n      [(< i j) (helper (+ i 1) i k)]\n      [(< j k) (helper (+\
    \ i 1) j k)]\n      [(< i k) (helper (+ i 1) i k)]\n      [(< i j) (helper (+\
    \ i 1) i k)]\n      [(< j k) (helper (+ i 1) j k)]\n      [(< i k) (helper (+\
    \ i 1) i k)]\n      [(< i j) (helper (+ i 1) i k)]\n      [(< j k) (helper (+\
    \ i 1) j k)]\n      [(< i k) (helper (+ i 1) i k)]\n      [(< i j) (helper (+\
    \ i 1) i k)]\n      [(< j k) (helper (+ i 1) j k)]\n      [(< i k) (helper (+\
    \ i 1) i k)]\n      [(< i j) (helper (+ i 1) i k)]\n      [(< j k) (helper (+\
    \ i 1) j k)]\n      [(< i k) (helper (+ i 1) i k)]\n      [(< i j) (helper (+\
    \ i 1) i k)]\n      [(< j k) (helper (+ i 1) j k)]\n      [(< i k) (helper (+\
    \ i 1) i ", "  (define (helper i j k)\n    (cond\n      [(= i j) (+ i j k)]\n\
    \      [(= i k) (+ i j k)]\n      [(= j k) (+ i j k)]\n      [else (helper (+\
    \ i j) (+ j k) k)]))\n  (cond\n    [(= n 0) 0]\n    [else (helper (+ 1 n) 1 0)]))\n",
  "  (define (helper i j k)\n    (cond ((= i j) (+ k 1))\n          ((= i k) (+ j\
    \ 1))\n          ((= j k) (+ i 1))\n          (else (helper (+ i 1) (+ j 1) (+\
    \ k 1)))))\n  (define (helper i j k)\n    (cond ((= i j) (+ k 1))\n          ((=\
    \ i k) (+ j 1))\n          ((= j k) (+ i 1))\n          (else (helper (+ i 1)\
    \ (+ j 1) (+ k 1)))))\n  (define (helper i j k)\n    (cond ((= i j) (+ k 1))\n\
    \          ((= i k) (+ j 1))\n          ((= j k) (+ i 1))\n          (else (helper\
    \ (+ i 1) (+ j 1) (+ k 1)))))\n  (define (helper i j k)\n    (cond ((= i j) (+\
    \ k 1))\n          ((= i k) (+ j 1))\n          ((= j k) (+ i 1))\n          (else\
    \ (helper (+ i 1) (+ j 1) (+ k 1)))))\n  (define (helper i j k)\n    (cond ((=\
    \ i j) (+ k 1))\n          ((= i k) (+ j 1))\n          ((= j k) (+ i 1))\n  \
    \        (else (helper (+ i 1) (+ j 1) (+ k 1)))))\n  (define (helper i j k)\n\
    \    (cond ((= i j) (+ k 1))\n          ((= i k) (+ j 1))\n          ((= j k)\
    \ (+ i 1))\n          (else (helper (+ i 1) (+ j 1) (+ k 1)))))\n  (define (helper\
    \ i j k)\n    (cond ((= i j) (+ k 1))\n          ((= i k) (+ j 1))\n         \
    \ ((= j k) (+ i 1))\n          (else (helper (+ i 1) (+ j 1) (+ k 1)))))\n  (define\
    \ (helper i j k)\n    (cond ((= i j) (+ k 1))\n          ((= i k) (+ j 1))\n \
    \         ((= j k) (+ i 1))\n          (else (helper (+ i 1) (+ j 1) (+ k 1)))))\n\
    \  (define (helper i j k)\n    (cond ((= i j) (+ k 1))\n          ((= i k) (+\
    \ j 1))\n          ((= j k) (+ i 1))\n", "  (define (helper i j k)\n    (cond\n\
    \      [(< i j) (helper (+ i 1) j k)] \n      [(< j k) (helper (+ i 1) (+ j 1)\
    \ k)]\n      [(< i k) (helper (+ i 1) (+ j 1) (+ k 1))]\n      [else (+ 1 (helper\
    \ (+ i 1) (+ j 1) (+ k 1)))]))\n  (helper 1 2 n))\n", "  (define (helper i j k)\n\
    \    (cond\n      [(= i j) (+ i j k)]\n      [(= i k) (+ i j k)]\n      [else\
    \ (helper (+ i k) (+ j k) k)]))\n  (cond\n    [(= n 0) 0]\n    [else (helper (+\
    \ 1 n) 0 0)]))\n", "  (define (helper i j k)\n    (cond\n      [(< i j) (if (=\
    \ (+ i j) k)\n                  (+ 1 (helper (+ i 1) j k))\n                 \
    \ (+ 1 (helper (+ i 1) k (+ j k))))]\n      [(< j k) (if (= (+ i j) k)\n     \
    \             (+ 1 (helper (+ i k) j k))\n                  (+ 1 (helper (+ i\
    \ k) k (+ j k))))]\n      [(< i k) (if (= (+ i j) k)\n                  (+ 1 (helper\
    \ (+ i k) j k))\n                  (+ 1 (helper (+ i k) k (+ j k))))]\n      [else\
    \ 0]))\n  (if (= n 0)\n      0\n      (+ 1 (helper (+ 1 1) 0 0))))\n", "  (define\
    \ (helper i j k)\n    (cond\n      [(= i j) (+ i j k)]\n      [(= i k) (+ i j\
    \ k)]\n      [(= j k) (+ i j k)]\n      [else (helper (+ i j) (+ j k) k)]))\n\
    \  (helper 1 2 n))\n", "  (define (helper i j k)\n    (cond\n      [(= i j) (+\
    \ 1 (* i i k))]\n      [(= i k) (+ 1 (* i j k))]\n      [(= j k) (+ 1 (* j i k))]\n\
    \      [(= i k) (+ 1 (* j j k))]\n      [(= j i) (+ 1 (* j j k))]\n      [(= i\
    \ j) (+ 1 (* k k k))]\n      [(= j k) (+ 1 (* k k k))]\n      [(= k k) (+ 1 (*\
    \ k k k))]\n      [(= i j) (+ 1 (* i i k))]\n      [(= j i) (+ 1 (* j j k))]\n\
    \      [(= k i) (+ 1 (* k k k))]\n      [(= i k) (+ 1 (* j j k))]\n      [(= j\
    \ k) (+ 1 (* k k k))]\n      [(= k j) (+ 1 (* k k k))]\n      [(= i k) (+ 1 (*\
    \ k k k))]\n      [(= j k) (+ 1 (* i i k))]\n      [(= k i) (+ 1 (* j j k))]\n\
    \      [(= i j) (+ 1 (* j j k))]\n      [(= j k) (+ 1 (* i i k))]\n      [(= k\
    \ j) (+ 1 (* k k k))]\n      [(= k k) (+ 1 (* k k k))]\n      [(= i j) (+ 1 (*\
    \ i i k))]\n      [(= j i) (+ 1 (* j j k))]\n      [(= k i) (+ 1 (* k k k))]\n\
    \      [(= i k) (+ 1 (* j j k))]\n      [(= j k) (+ 1 (* k k k))]\n      [(= k\
    \ j) (+ 1 (* i i k))]\n      [(= k k) (+ 1 (* j j k))]\n      [(= i j) (+ 1 (*\
    \ k k k))]\n      [(= j i) (+ 1 (* k k k))]\n      [(= k i) (+ 1 (* i i k))]\n\
    \      [(= i k) (+ 1 (* j j k))]\n      [(= j k) (+ 1 (* k k k))]\n      [(= k\
    \ j) (+ 1 (* i i k))]\n      [(= k k) (+ 1 (* j j k))]\n      [(= i j) (+ 1 (*\
    \ i i ", "  (define (helper i j k)\n    (cond\n      [(= i j) (+ i j k)]\n   \
    \   [(= i k) (+ i j k)]\n      [(= j k) (+ i j k)]\n      [(= i k) (helper i (+\
    \ j k) k)]\n      [(= j k) (helper i (+ j k) k)]\n      [(= i j) (helper i (+\
    \ j k) k)]\n      [(= j k) (helper i (+ j k) k)]\n      [(= i j) (helper i (+\
    \ j k) k)]\n      [(= j k) (helper i (+ j k) k)]\n      [(= i j) (helper i (+\
    \ j k) k)]\n      [(= j k) (helper i (+ j k) k)]\n      [(= i j) (helper i (+\
    \ j k) k)]\n      [(= j k) (helper i (+ j k) k)]\n      [(= i j) (helper i (+\
    \ j k) k)]\n      [(= j k) (helper i (+ j k) k)]\n      [(= i j) (helper i (+\
    \ j k) k)]\n      [(= j k) (helper i (+ j k) k)]\n      [(= i j) (helper i (+\
    \ j k) k)]\n      [(= j k) (helper i (+ j k) k)]\n      [(= i j) (helper i (+\
    \ j k) k)]\n      [(= j k) (helper i (+ j k) k)]\n      [(= i j) (helper i (+\
    \ j k) k)]\n      [(= j k) (helper i (+ j k) k)]\n      [(= i j) (helper i (+\
    \ j k) k)]\n      [(= j k) (helper i (+ j k) k)]\n      [(= i j) (helper i (+\
    \ j k) k)]\n      [(= j k) (helper i (+ j k) k)]\n      [(= i j) (helper i (+\
    \ j k) k)]\n      [(= j k) (helper i (+ j k) k)]\n      [(= i j) (helper i (+\
    \ j k) k)]\n      [(= j k) (helper i (+ j k) k)]\n      [(= i j) (helper i (+\
    \ j k) k)]\n      [(= j k) (helper i (+ j k) k)]\n      [(= i j) (helper i (+\
    \ j k) k)]\n", "  (define (helper i j k)\n    (cond\n      [(= i j) (+ i k k)]\n\
    \      [(= i k) (+ i j k)]\n      [(= j k) (+ i j k)]\n      [else (+ i j k)]))\n\
    \  (define (helper i j k)\n    (cond\n      [(= i j) (+ i k k)]\n      [(= i k)\
    \ (+ i j k)]\n      [(= j k) (+ i j k)]\n      [else (+ i j k)]))\n  (define (helper\
    \ i j k)\n    (cond\n      [(= i j) (+ i k k)]\n      [(= i k) (+ i j k)]\n  \
    \    [(= j k) (+ i j k)]\n      [else (+ i j k)]))\n  (define (helper i j k)\n\
    \    (cond\n      [(= i j) (+ i k k)]\n      [(= i k) (+ i j k)]\n      [(= j\
    \ k) (+ i j k)]\n      [else (+ i j k)]))\n  (define (helper i j k)\n    (cond\n\
    \      [(= i j) (+ i k k)]\n      [(= i k) (+ i j k)]\n      [(= j k) (+ i j k)]\n\
    \      [else (+ i j k)]))\n  (define (helper i j k)\n    (cond\n      [(= i j)\
    \ (+ i k k)]\n      [(= i k) (+ i j k)]\n      [(= j k) (+ i j k)]\n      [else\
    \ (+ i j k)]))\n  (define (helper i j k)\n    (cond\n      [(= i j) (+ i k k)]\n\
    \      [(= i k) (+ i j k)]\n      [(= j k) (+ i j k)]\n      [else (+ i j k)]))\n\
    \  (define (helper i j k)\n    (cond\n      [(= i j) (+ i k k)]\n      [(= i k)\
    \ (+ i j k)]\n      [(= j k) (+ i j k)]\n      [else (+ i j k)]))\n  (define (helper\
    \ i j k)\n    (cond\n      [(= i j) (+ i k k)]\n      [(= i k) (+ i j k)]\n  \
    \    [(= j k) (+ i j k)]\n      [else (+ i j k)]))\n  (define (helper i j k)\n",
  "  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) (+\
    \ i j))]\n      [(< j k) (if (= (+ j k) k) (+ j k) (+ j k))]\n      [(< k i) (if\
    \ (= (+ k i) k) (+ k i) (+ k i))]\n      [else (+ i j k)]))\n  (define (helper\
    \ i j k)\n    (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) (+ i j))]\n    \
    \  [(< j k) (if (= (+ j k) k) (+ j k) (+ j k))]\n      [(< k i) (if (= (+ k i)\
    \ k) (+ k i) (+ k i))]\n      [else (+ i j k)]))\n  (define (helper i j k)\n \
    \   (cond\n      [(< i j) (if (= (+ i j) k) (+ i j) (+ i j))]\n      [(< j k)\
    \ (if (= (+ j k) k) (+ j k) (+ j k))]\n      [(< k i) (if (= (+ k i) k) (+ k i)\
    \ (+ k i))]\n      [else (+ i j k)]))\n  (define (helper i j k)\n    (cond\n \
    \     [(< i j) (if (= (+ i j) k) (+ i j) (+ i j))]\n      [(< j k) (if (= (+ j\
    \ k) k) (+ j k) (+ j k))]\n      [(< k i) (if (= (+ k i) k) (+ k i) (+ k i))]\n\
    \      [else (+ i j k)]))\n  (define (helper i j k)\n    (cond\n      [(< i j)\
    \ (if (= (+ i j) k) (+ i j) (+ i j))]\n      [(< j k) (if (= (+ j k) k) (+ j k)\
    \ (+ j k))]\n      [(< k i) (if (= (+ k i) k) (+ k i) (+ k i))]\n      [else (+\
    \ i j k)]))\n  (define (helper i j k)\n    (cond\n      [(< i j) (if (= (+ i j)\
    \ k) (+ i j) (+ i j))]\n      [(< j k) (if (= (+ j k) k) (+ j k) (+ j k", "  (define\
    \ (helper i j k)\n    (cond\n      [(= i j) (+ 1 k)]\n      [(= i k) (+ 1 j)]\n\
    \      [else (helper (+ i 1) (+ j 1) (+ k 1))]))\n  (helper (+ 1 n) n n))\n",
  "  (define (helper a i j k)\n    (cond\n      [(= i j) (+ 1 (* i i k))]\n      [(=\
    \ i k) (+ 1 (* i j k))]\n      [(= j k) (+ 1 (* j i k))]\n      [else (+ 1 (*\
    \ a i j k))]\n    )\n  )\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 1]\n    [else\
    \ (+ 1 (* (helper a 1 (+ 1 n) 1) (helper a 1 n (+ 1 n)))\n            (* (helper\
    \ a 1 (+ 1 n) n) (helper a n 1 (+ 1 n)))\n            (* (helper a 1 (+ 1 n) n)\
    \ (helper a n n (+ 1 n)))\n            (* (helper a n (+ 1 n) 1) (helper a n n\
    \ (+ 1 n)))\n            (* (helper a n (+ 1 n) n) (helper a n 1 (+ 1 n)))\n \
    \           (* (helper a n (+ 1 n) n) (helper a n n (+ 1 n)))\n            (*\
    \ (helper a 1 (+ 1 n) n) (helper a n 1 (+ 1 n)))\n            (* (helper a 1 (+\
    \ 1 n) n) (helper a n n (+ 1 n)))\n            (* (helper a n (+ 1 n) 1) (helper\
    \ a n n (+ 1 n)))\n            (* (helper a n (+ 1 n) n) (helper a n 1 (+ 1 n)))\n\
    \            (* (helper a n (+ 1 n) n) (helper a n n (+ 1 n)))\n            (*\
    \ (helper a 1 (+ 1 n) n) (helper a n 1 (+ 1 n)))\n            (* (helper a 1 (+\
    \ 1 n) n) (helper a n n (+ 1 n)))\n            (* (helper a n (+ 1 n) 1) (helper\
    \ a n n (+ 1 n)))\n            (* (helper a n (+ 1 n) n) (helper a n 1 (+ 1 n)))\n\
    \            (* (helper a n (+ 1 n) n) (helper a n n (+ 1 n)))\n            (*\
    \ (helper a 1 (+ 1 n) n) (helper a n 1 (+ 1 n)))\n            (* (helper a 1 (+\
    \ 1 n) n) (helper a n n (+ 1 n)))\n            (* (helper a n (+ 1 n) 1) (helper\
    \ a n n (+ 1 n)))\n            (* (helper a n (+ 1 n) n) (helper a n 1 (+ 1 n",
  "  (define (helper i j k)\n    (cond\n      [(= i j) (+ 1 k)]\n      [(= i k) (+\
    \ 1 j)]\n      [(= j k) (+ 1 i)]\n      [(= i k) (helper i (- j 1) k)]\n     \
    \ [(= j k) (helper j (- i 1) k)]\n      [(= i j) (helper i (- j 1) k)]\n     \
    \ [(= j k) (helper j (- i 1) k)]\n      [(= i j) (helper i (- j 1) k)]\n     \
    \ [(= j k) (helper j (- i 1) k)]\n      [(= i j) (helper i (- j 1) k)]\n     \
    \ [(= j k) (helper j (- i 1) k)]\n      [(= i j) (helper i (- j 1) k)]\n     \
    \ [(= j k) (helper j (- i 1) k)]\n      [(= i j) (helper i (- j 1) k)]\n     \
    \ [(= j k) (helper j (- i 1) k)]\n      [(= i j) (helper i (- j 1) k)]\n     \
    \ [(= j k) (helper j (- i 1) k)]\n      [(= i j) (helper i (- j 1) k)]\n     \
    \ [(= j k) (helper j (- i 1) k)]\n      [(= i j) (helper i (- j 1) k)]\n     \
    \ [(= j k) (helper j (- i 1) k)]\n      [(= i j) (helper i (- j 1) k)]\n     \
    \ [(= j k) (helper j (- i 1) k)]\n      [(= i j) (helper i (- j 1) k)]\n     \
    \ [(= j k) (helper j (- i 1) k)]\n      [(= i j) (helper i (- j 1) k)]\n     \
    \ [(= j k) (helper j (- i 1) k)]\n      [(= i j) (helper i (- j 1) k)]\n     \
    \ [(= j k) (helper j (- i 1) k)]\n      [(= i j) (helper i (- j 1) k)]\n     \
    \ [(= j k) (helper j (- i 1) k)]\n      [(= i j) (helper i (- j 1) k)]\n     \
    \ [(= j k) (helper j (- i 1) k)]\n      [(= i j) (helper i (- j 1) k)]\n     \
    \ [(= j k) (helper j (- i 1) k)]\n      [(= i ", "  (define (helper i j k)\n \
    \   (cond\n      [(< i j) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k) (helper\
    \ (+ i 1) k (+ j k)))\n                  (if (= (+ i k) k) (+ 1 (helper (+ i 1)\
    \ k (+ j k)) (helper (+ i 1) j k)))]\n      [(< j k) (if (= (+ i j) k) (+ 1 (helper\
    \ (+ i 1) j (+ j k)) (helper (+ i 1) k (+ j k)))\n                  (if (= (+\
    \ i k) k) (+ 1 (helper (+ i 1) k (+ j k)) (helper (+ i 1) j k)))]\n      [(< k\
    \ i) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j (+ j k)) (helper (+ i 1) k (+ j\
    \ k)))\n                  (if (= (+ i k) k) (+ 1 (helper (+ i 1) k (+ j k)) (helper\
    \ (+ i 1) j k)))]\n      [else 0]))\n  (if (= n 0) 0\n      (+ 1 (helper (+ 1\
    \ 1) 1 n) (helper (+ 1 1) n (+ 1 1)))))\n", "  (define (helper i j k)\n    (cond\n\
    \      [(= i j) (+ i j k)]\n      [(= i k) (+ i j k)]\n      [(= j k) (+ i j k)]\n\
    \      [else (helper (+ i j) (+ j k) k)]))\n  (cond\n    [(= n 0) 0]\n    [else\
    \ (helper (+ 1 n) (+ 1 n) n)]))\n", "  (define (helper i j k)\n    (cond\n   \
    \   [(< i j) (if (= (+ i j) k) (+ 1 (helper (+ i 1) j k)) 0)]\n      [(< j k)\
    \ (if (= (+ i j) k) (+ 1 (helper (+ i 1) k (+ j 1))) 0)]\n      [(< k i) (if (=\
    \ (+ i j) k) (+ 1 (helper (+ i k) j (+ j 1))) 0)]\n      [else (+ 1 (helper (+\
    \ i k) j (+ j 1)))]))\n  (helper 1 2 n))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
