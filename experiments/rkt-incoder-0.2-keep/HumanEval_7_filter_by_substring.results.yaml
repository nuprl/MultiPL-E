name: HumanEval_7_filter_by_substring
language: racket
results:
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (string-contains? s substring))\n          strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n   \
    \ (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"\
    asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\"\
    \ \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\"\
    \ \"prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (member s substring)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxg423wfd.rkt:17:4\n\
    \nmember: not a proper list\n  in: \"xxx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxg423wfd.rkt:18:4\n\nmember:\
    \ not a proper list\n  in: \"xx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxg423wfd.rkt:19:4\n\nmember:\
    \ not a proper list\n  in: \"run\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (string-contains? s substring))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n   \
    \ (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"\
    asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\"\
    \ \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\"\
    \ \"prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings) (filter_by_substring\
    \ (rest strings) substring))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2lxuoe_y.rkt:19:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp2lxuoe_y.rkt:20:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2lxuoe_y.rkt:21:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (member s substring)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7gr8asoy.rkt:17:4\n\
    \nmember: not a proper list\n  in: \"xxx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7gr8asoy.rkt:18:4\n\nmember:\
    \ not a proper list\n  in: \"xx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7gr8asoy.rkt:19:4\n\nmember:\
    \ not a proper list\n  in: \"run\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings) (filter_by_substring\
    \ (rest strings) substring))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzjiafyku.rkt:19:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpzjiafyku.rkt:20:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzjiafyku.rkt:21:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings)\n          \
    \          (filter_by_substring (filter_by_substring (rest strings) substring)\
    \ substring))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_by_substring))\n    (check-equal? (candidate (list ) \"\
    john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\" \"\
    john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n \
    \   (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"\
    xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"))\n    (check-equal?\
    \ (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\") \"run\") (list\
    \ \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp17n0gph6.rkt:20:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp17n0gph6.rkt:21:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp17n0gph6.rkt:22:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (string-contains s substring))\n          strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n   \
    \ (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"\
    asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\"\
    \ \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\"\
    \ \"prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmps9_oi0mx.rkt:9:23: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmps9_oi0mx.rkt:9:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings)\n          \
    \          (filter_by_substring (filter_by_substring (rest strings) substring)\
    \ substring))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_by_substring))\n    (check-equal? (candidate (list ) \"\
    john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\" \"\
    john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n \
    \   (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"\
    xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"))\n    (check-equal?\
    \ (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\") \"run\") (list\
    \ \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiqpu4rq8.rkt:20:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpiqpu4rq8.rkt:21:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiqpu4rq8.rkt:22:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings)\n          \
    \          (filter_by_substring (filter_by_substring (rest strings) substring)\
    \ substring))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_by_substring))\n    (check-equal? (candidate (list ) \"\
    john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\" \"\
    john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n \
    \   (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"\
    xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"))\n    (check-equal?\
    \ (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\") \"run\") (list\
    \ \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3k4_zw_1.rkt:20:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp3k4_zw_1.rkt:21:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3k4_zw_1.rkt:22:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings) (filter_by_substring\
    \ (rest strings) substring))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwrc53jwm.rkt:19:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpwrc53jwm.rkt:20:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwrc53jwm.rkt:21:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings)\n          \
    \          (filter_by_substring (filter_by_substring (rest strings) substring)\
    \ substring))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_by_substring))\n    (check-equal? (candidate (list ) \"\
    john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\" \"\
    john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n \
    \   (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"\
    xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"))\n    (check-equal?\
    \ (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\") \"run\") (list\
    \ \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd150tktw.rkt:20:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpd150tktw.rkt:21:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd150tktw.rkt:22:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings) (filter_by_substring\
    \ (rest strings) substring))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3thg_9zx.rkt:19:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp3thg_9zx.rkt:20:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3thg_9zx.rkt:21:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (string-contains? s substring))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n   \
    \ (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"\
    asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\"\
    \ \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\"\
    \ \"prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (string-contains s substring))\n          strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n   \
    \ (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"\
    asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\"\
    \ \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\"\
    \ \"prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpdy6cc1vn.rkt:9:23: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpdy6cc1vn.rkt:9:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (member s substring)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjqomgydl.rkt:17:4\n\
    \nmember: not a proper list\n  in: \"xxx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjqomgydl.rkt:18:4\n\nmember:\
    \ not a proper list\n  in: \"xx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjqomgydl.rkt:19:4\n\nmember:\
    \ not a proper list\n  in: \"run\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (member s substring)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe4ngyk79.rkt:17:4\n\
    \nmember: not a proper list\n  in: \"xxx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpe4ngyk79.rkt:18:4\n\nmember:\
    \ not a proper list\n  in: \"xx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpe4ngyk79.rkt:19:4\n\nmember:\
    \ not a proper list\n  in: \"run\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (string-contains? s substring))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n   \
    \ (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"\
    asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\"\
    \ \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\"\
    \ \"prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings)\n          \
    \          (filter_by_substring (filter_by_substring (rest strings) substring)\
    \ substring))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_by_substring))\n    (check-equal? (candidate (list ) \"\
    john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\" \"\
    john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n \
    \   (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"\
    xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"))\n    (check-equal?\
    \ (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\") \"run\") (list\
    \ \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdhr6ge24.rkt:20:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpdhr6ge24.rkt:21:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdhr6ge24.rkt:22:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (string-contains? s substring))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n   \
    \ (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"\
    asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\"\
    \ \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\"\
    \ \"prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (str)\n            (string-contains? str substring))\n          strings))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"\
    asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\"\
    \ \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\"\
    \ \"prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings) (filter_by_substring\
    \ (rest strings) substring))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq7h65cpx.rkt:19:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpq7h65cpx.rkt:20:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq7h65cpx.rkt:21:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings) (filter_by_substring\
    \ (rest strings) substring))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp69xjpg_l.rkt:19:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp69xjpg_l.rkt:20:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp69xjpg_l.rkt:21:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (x) (contains-substring x substring)) strings))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"\
    aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"\
    xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"\
    prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp8_62m_6y.rkt:9:23: contains-substring: unbound identifier\n  in:\
    \ contains-substring\n  location...:\n   /tmp/tmp8_62m_6y.rkt:9:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (contains s substring)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpd00hpjan.rkt:9:23: contains: unbound identifier\n  in: contains\n\
    \  location...:\n   /tmp/tmpd00hpjan.rkt:9:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (member s substring)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_2yiw77d.rkt:17:4\n\
    \nmember: not a proper list\n  in: \"xxx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_2yiw77d.rkt:18:4\n\nmember:\
    \ not a proper list\n  in: \"xx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_2yiw77d.rkt:19:4\n\nmember:\
    \ not a proper list\n  in: \"run\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings)\n          \
    \          (filter_by_substring (filter_by_substring (rest strings) substring)\
    \ substring))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_by_substring))\n    (check-equal? (candidate (list ) \"\
    john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\" \"\
    john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n \
    \   (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"\
    xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"))\n    (check-equal?\
    \ (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\") \"run\") (list\
    \ \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpspx2ypru.rkt:20:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpspx2ypru.rkt:21:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpspx2ypru.rkt:22:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (member s substring)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkwi72ny3.rkt:17:4\n\
    \nmember: not a proper list\n  in: \"xxx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkwi72ny3.rkt:18:4\n\nmember:\
    \ not a proper list\n  in: \"xx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkwi72ny3.rkt:19:4\n\nmember:\
    \ not a proper list\n  in: \"run\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings) (filter_by_substring\
    \ (rest strings) substring))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphz8rzaoh.rkt:19:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmphz8rzaoh.rkt:20:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmphz8rzaoh.rkt:21:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (string-contains s substring))\n          strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n   \
    \ (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"\
    asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\"\
    \ \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\"\
    \ \"prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpu6h98bar.rkt:9:23: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpu6h98bar.rkt:9:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (str)\n            (string-contains str substring))\n          strings))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"\
    asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\"\
    \ \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\"\
    \ \"prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpprysqux5.rkt:10:13: string-contains: unbound identifier\n  in:\
    \ string-contains\n  location...:\n   /tmp/tmpprysqux5.rkt:10:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond\n    [(empty?\
    \ strings) strings]\n    [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n    [else (cons (first strings)\n              \
    \  (filter_by_substring (filter_by_substring (rest strings) substring) substring))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"\
    asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\"\
    \ \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\"\
    \ \"prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwnxysreg.rkt:21:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpwnxysreg.rkt:22:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwnxysreg.rkt:23:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings)\n          \
    \          (filter_by_substring (filter_by_substring (rest strings) substring)\
    \ substring))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_by_substring))\n    (check-equal? (candidate (list ) \"\
    john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\" \"\
    john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n \
    \   (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"\
    xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"))\n    (check-equal?\
    \ (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\") \"run\") (list\
    \ \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfidta1rv.rkt:20:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpfidta1rv.rkt:21:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfidta1rv.rkt:22:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (x) (string-contains x substring)) strings))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"\
    aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"\
    xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"\
    prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpi4w5963i.rkt:9:23: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpi4w5963i.rkt:9:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (contains s substring)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmplqkbh_9k.rkt:9:23: contains: unbound identifier\n  in: contains\n\
    \  location...:\n   /tmp/tmplqkbh_9k.rkt:9:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (x) (contains-substring x substring)) strings))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"\
    aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"\
    xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"\
    prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpjlbug3zf.rkt:9:23: contains-substring: unbound identifier\n  in:\
    \ contains-substring\n  location...:\n   /tmp/tmpjlbug3zf.rkt:9:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings) (filter_by_substring\
    \ (rest strings) substring))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpubhlwvn4.rkt:19:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpubhlwvn4.rkt:20:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpubhlwvn4.rkt:21:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings) (filter_by_substring\
    \ (rest strings) substring))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8gsr2iyb.rkt:19:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp8gsr2iyb.rkt:20:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8gsr2iyb.rkt:21:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (string-contains s substring))\n          strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n   \
    \ (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"\
    asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\"\
    \ \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\"\
    \ \"prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmprzkn5k3d.rkt:9:23: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmprzkn5k3d.rkt:9:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (x) (string-contains x substring)) strings))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"\
    aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"\
    xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"\
    prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp_6_18nhw.rkt:9:23: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmp_6_18nhw.rkt:9:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (str)\n            (string=? substring str))\n          strings))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"\
    asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\"\
    \ \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\"\
    \ \"prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuein12zp.rkt:19:4\n\
    actual:     '(\"xxx\" \"xxx\")\nexpected:   '(\"xxx\" \"xxxAAA\" \"xxx\")\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuein12zp.rkt:20:4\n\
    actual:     '()\nexpected:   '(\"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuein12zp.rkt:21:4\n\
    actual:     '()\nexpected:   '(\"grunt\" \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (string-contains? s substring))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n   \
    \ (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"\
    asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\"\
    \ \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\"\
    \ \"prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings)\n          \
    \          (filter_by_substring (filter_by_substring (rest strings) substring)\
    \ substring))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_by_substring))\n    (check-equal? (candidate (list ) \"\
    john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\" \"\
    john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n \
    \   (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"\
    xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"))\n    (check-equal?\
    \ (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\") \"run\") (list\
    \ \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpua8_hhgi.rkt:20:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpua8_hhgi.rkt:21:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpua8_hhgi.rkt:22:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (member s substring)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuea8rxr_.rkt:17:4\n\
    \nmember: not a proper list\n  in: \"xxx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpuea8rxr_.rkt:18:4\n\nmember:\
    \ not a proper list\n  in: \"xx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpuea8rxr_.rkt:19:4\n\nmember:\
    \ not a proper list\n  in: \"run\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings) (filter_by_substring\
    \ (rest strings) substring))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1k29zp3w.rkt:19:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp1k29zp3w.rkt:20:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1k29zp3w.rkt:21:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (member s substring)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpba6joy07.rkt:17:4\n\
    \nmember: not a proper list\n  in: \"xxx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpba6joy07.rkt:18:4\n\nmember:\
    \ not a proper list\n  in: \"xx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpba6joy07.rkt:19:4\n\nmember:\
    \ not a proper list\n  in: \"run\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond\n    [(empty?\
    \ strings) strings]\n    [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n    [else (cons (first strings) (filter_by_substring\
    \ (rest strings) substring))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7kaiyt4b.rkt:20:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7kaiyt4b.rkt:21:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7kaiyt4b.rkt:22:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (member s substring)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp2m6ir7b.rkt:17:4\n\
    \nmember: not a proper list\n  in: \"xxx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp2m6ir7b.rkt:18:4\n\nmember:\
    \ not a proper list\n  in: \"xx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp2m6ir7b.rkt:19:4\n\nmember:\
    \ not a proper list\n  in: \"run\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings)\n          \
    \          (filter_by_substring (filter_by_substring (rest strings) substring)\
    \ substring))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_by_substring))\n    (check-equal? (candidate (list ) \"\
    john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\" \"\
    john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n \
    \   (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"\
    xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"))\n    (check-equal?\
    \ (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\") \"run\") (list\
    \ \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6_o8r0w5.rkt:20:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp6_o8r0w5.rkt:21:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6_o8r0w5.rkt:22:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings) (filter_by_substring\
    \ (rest strings) substring))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmdyya8i1.rkt:19:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpmdyya8i1.rkt:20:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmdyya8i1.rkt:21:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings)\n          \
    \          (filter_by_substring (filter_by_substring (rest strings) substring)\
    \ substring))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_by_substring))\n    (check-equal? (candidate (list ) \"\
    john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\" \"\
    john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n \
    \   (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"\
    xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"))\n    (check-equal?\
    \ (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\") \"run\") (list\
    \ \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpft5bzade.rkt:20:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpft5bzade.rkt:21:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpft5bzade.rkt:22:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond\n    [(empty?\
    \ strings) strings]\n    [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n    [else (cons (first strings) (filter_by_substring\
    \ (rest strings) substring))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd32e8y_f.rkt:20:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpd32e8y_f.rkt:21:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd32e8y_f.rkt:22:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (string-contains s substring))\n          strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n   \
    \ (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"\
    asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\"\
    \ \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\"\
    \ \"prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmph3a7x3ce.rkt:9:23: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmph3a7x3ce.rkt:9:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings) (filter_by_substring\
    \ (rest strings) substring))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsq3333pt.rkt:19:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpsq3333pt.rkt:20:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsq3333pt.rkt:21:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (string-contains s substring))\n          strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n   \
    \ (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"\
    asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\"\
    \ \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\"\
    \ \"prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmplfmlc4bu.rkt:9:23: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmplfmlc4bu.rkt:9:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings)\n          \
    \          (filter_by_substring (filter_by_substring (rest strings) substring)\
    \ substring))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_by_substring))\n    (check-equal? (candidate (list ) \"\
    john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\" \"\
    john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n \
    \   (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"\
    xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"))\n    (check-equal?\
    \ (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\") \"run\") (list\
    \ \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp7wrm13_.rkt:20:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpp7wrm13_.rkt:21:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp7wrm13_.rkt:22:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (member s substring)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwvi62_eu.rkt:17:4\n\
    \nmember: not a proper list\n  in: \"xxx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwvi62_eu.rkt:18:4\n\nmember:\
    \ not a proper list\n  in: \"xx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwvi62_eu.rkt:19:4\n\nmember:\
    \ not a proper list\n  in: \"run\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings) (filter_by_substring\
    \ (rest strings) substring))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj062oifn.rkt:19:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpj062oifn.rkt:20:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj062oifn.rkt:21:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings) (filter_by_substring\
    \ (rest strings) substring))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9em8cz3c.rkt:19:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp9em8cz3c.rkt:20:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9em8cz3c.rkt:21:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings)\n          \
    \          (filter_by_substring (filter_by_substring (rest strings) substring)\
    \ substring))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_by_substring))\n    (check-equal? (candidate (list ) \"\
    john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\" \"\
    john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n \
    \   (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"\
    xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"))\n    (check-equal?\
    \ (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\") \"run\") (list\
    \ \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdf7epi1l.rkt:20:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpdf7epi1l.rkt:21:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdf7epi1l.rkt:22:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond\n    [(empty?\
    \ strings) strings]\n    [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n    [else (cons (first strings) (filter_by_substring\
    \ (rest strings) substring))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfolzaj1t.rkt:20:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpfolzaj1t.rkt:21:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfolzaj1t.rkt:22:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond\n    [(empty?\
    \ strings) strings]\n    [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n    [else (cons (first strings) (filter_by_substring\
    \ (rest strings) substring))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpko64kwtm.rkt:20:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpko64kwtm.rkt:21:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpko64kwtm.rkt:22:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (x) (string=? x substring)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxt9pxjxv.rkt:17:4\n\
    actual:     '(\"xxx\" \"xxx\")\nexpected:   '(\"xxx\" \"xxxAAA\" \"xxx\")\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxt9pxjxv.rkt:18:4\n\
    actual:     '()\nexpected:   '(\"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxt9pxjxv.rkt:19:4\n\
    actual:     '()\nexpected:   '(\"grunt\" \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (string-contains? s substring))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n   \
    \ (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"\
    asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\"\
    \ \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\"\
    \ \"prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings)\n          \
    \          (filter_by_substring (filter_by_substring (rest strings) substring)\
    \ substring))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_by_substring))\n    (check-equal? (candidate (list ) \"\
    john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\" \"\
    john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n \
    \   (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"\
    xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"))\n    (check-equal?\
    \ (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\") \"run\") (list\
    \ \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6h0qx0ey.rkt:20:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp6h0qx0ey.rkt:21:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6h0qx0ey.rkt:22:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (member s substring)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6ybbgnxz.rkt:17:4\n\
    \nmember: not a proper list\n  in: \"xxx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6ybbgnxz.rkt:18:4\n\nmember:\
    \ not a proper list\n  in: \"xx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6ybbgnxz.rkt:19:4\n\nmember:\
    \ not a proper list\n  in: \"run\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings)\n          \
    \          (filter_by_substring (filter_by_substring (rest strings) substring)\
    \ substring))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_by_substring))\n    (check-equal? (candidate (list ) \"\
    john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\" \"\
    john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n \
    \   (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"\
    xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"))\n    (check-equal?\
    \ (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\") \"run\") (list\
    \ \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu2wmhpt6.rkt:20:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpu2wmhpt6.rkt:21:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu2wmhpt6.rkt:22:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (member s substring)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_vlyefdv.rkt:17:4\n\
    \nmember: not a proper list\n  in: \"xxx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_vlyefdv.rkt:18:4\n\nmember:\
    \ not a proper list\n  in: \"xx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_vlyefdv.rkt:19:4\n\nmember:\
    \ not a proper list\n  in: \"run\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (x) (string=? x substring)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmc80a0ja.rkt:17:4\n\
    actual:     '(\"xxx\" \"xxx\")\nexpected:   '(\"xxx\" \"xxxAAA\" \"xxx\")\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmc80a0ja.rkt:18:4\n\
    actual:     '()\nexpected:   '(\"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmc80a0ja.rkt:19:4\n\
    actual:     '()\nexpected:   '(\"grunt\" \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (member s substring)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnmcck2co.rkt:17:4\n\
    \nmember: not a proper list\n  in: \"xxx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpnmcck2co.rkt:18:4\n\nmember:\
    \ not a proper list\n  in: \"xx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpnmcck2co.rkt:19:4\n\nmember:\
    \ not a proper list\n  in: \"run\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings) (filter_by_substring\
    \ (rest strings) substring))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7ftob9qy.rkt:19:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7ftob9qy.rkt:20:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7ftob9qy.rkt:21:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (str)\n            (string=? substring str))\n          strings))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"\
    asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\"\
    \ \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\"\
    \ \"prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8prssc8q.rkt:19:4\n\
    actual:     '(\"xxx\" \"xxx\")\nexpected:   '(\"xxx\" \"xxxAAA\" \"xxx\")\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8prssc8q.rkt:20:4\n\
    actual:     '()\nexpected:   '(\"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8prssc8q.rkt:21:4\n\
    actual:     '()\nexpected:   '(\"grunt\" \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings)\n          \
    \          (filter_by_substring (filter_by_substring (rest strings) substring)\
    \ substring))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_by_substring))\n    (check-equal? (candidate (list ) \"\
    john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\" \"\
    john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n \
    \   (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"\
    xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"))\n    (check-equal?\
    \ (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\") \"run\") (list\
    \ \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsb56wobh.rkt:20:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpsb56wobh.rkt:21:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsb56wobh.rkt:22:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (member s substring)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph737xbgt.rkt:17:4\n\
    \nmember: not a proper list\n  in: \"xxx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmph737xbgt.rkt:18:4\n\nmember:\
    \ not a proper list\n  in: \"xx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmph737xbgt.rkt:19:4\n\nmember:\
    \ not a proper list\n  in: \"run\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings)\n          \
    \          (filter_by_substring (filter_by_substring (rest strings) substring)\
    \ substring))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_by_substring))\n    (check-equal? (candidate (list ) \"\
    john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\" \"\
    john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n \
    \   (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"\
    xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"))\n    (check-equal?\
    \ (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\") \"run\") (list\
    \ \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphefzvb5k.rkt:20:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmphefzvb5k.rkt:21:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmphefzvb5k.rkt:22:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (contains s substring)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpapxg6674.rkt:9:23: contains: unbound identifier\n  in: contains\n\
    \  location...:\n   /tmp/tmpapxg6674.rkt:9:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (x) (string-contains x substring)) strings))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"\
    aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"\
    xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"\
    prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpwdcb09rf.rkt:9:23: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpwdcb09rf.rkt:9:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings) (filter_by_substring\
    \ (rest strings) substring))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp99evw8a0.rkt:19:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp99evw8a0.rkt:20:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp99evw8a0.rkt:21:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings) (filter_by_substring\
    \ (rest strings) substring))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpehh7j66c.rkt:19:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpehh7j66c.rkt:20:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpehh7j66c.rkt:21:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (contains s substring)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpv9i66bfl.rkt:9:23: contains: unbound identifier\n  in: contains\n\
    \  location...:\n   /tmp/tmpv9i66bfl.rkt:9:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings)\n          \
    \          (filter_by_substring (filter_by_substring (rest strings) substring)\
    \ substring))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_by_substring))\n    (check-equal? (candidate (list ) \"\
    john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\" \"\
    john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n \
    \   (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"\
    xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"))\n    (check-equal?\
    \ (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\") \"run\") (list\
    \ \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5lmh18bj.rkt:20:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp5lmh18bj.rkt:21:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5lmh18bj.rkt:22:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings)\n          \
    \          (filter_by_substring (filter_by_substring (rest strings) substring)\
    \ substring))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_by_substring))\n    (check-equal? (candidate (list ) \"\
    john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\" \"\
    john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n \
    \   (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"\
    xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"))\n    (check-equal?\
    \ (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\") \"run\") (list\
    \ \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7iaxc9mt.rkt:20:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7iaxc9mt.rkt:21:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7iaxc9mt.rkt:22:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (str)\n            (string-contains str substring))\n          strings))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"\
    asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\"\
    \ \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\"\
    \ \"prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpske3wc6v.rkt:10:13: string-contains: unbound identifier\n  in:\
    \ string-contains\n  location...:\n   /tmp/tmpske3wc6v.rkt:10:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (member s substring)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm6gqd5yd.rkt:17:4\n\
    \nmember: not a proper list\n  in: \"xxx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpm6gqd5yd.rkt:18:4\n\nmember:\
    \ not a proper list\n  in: \"xx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpm6gqd5yd.rkt:19:4\n\nmember:\
    \ not a proper list\n  in: \"run\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings) (filter_by_substring\
    \ (rest strings) substring))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_cneklvh.rkt:19:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp_cneklvh.rkt:20:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_cneklvh.rkt:21:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond\n    [(empty?\
    \ strings) strings]\n    [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n    [else (cons (first strings) (filter_by_substring\
    \ (rest strings) substring))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm3vuhsk9.rkt:20:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpm3vuhsk9.rkt:21:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm3vuhsk9.rkt:22:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (str)\n            (string-contains? str substring))\n          strings))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"\
    asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\"\
    \ \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\"\
    \ \"prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings)\n          \
    \          (filter_by_substring (filter_by_substring (rest strings) substring)\
    \ substring))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_by_substring))\n    (check-equal? (candidate (list ) \"\
    john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\" \"\
    john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n \
    \   (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"\
    xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"))\n    (check-equal?\
    \ (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\") \"run\") (list\
    \ \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqfarom8p.rkt:20:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpqfarom8p.rkt:21:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqfarom8p.rkt:22:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (member s substring)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7ht1_vmi.rkt:17:4\n\
    \nmember: not a proper list\n  in: \"xxx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7ht1_vmi.rkt:18:4\n\nmember:\
    \ not a proper list\n  in: \"xx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7ht1_vmi.rkt:19:4\n\nmember:\
    \ not a proper list\n  in: \"run\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (string-contains? s substring))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n   \
    \ (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"\
    asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\"\
    \ \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\"\
    \ \"prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings)\n          \
    \          (filter_by_substring (filter_by_substring (rest strings) substring)\
    \ substring))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_by_substring))\n    (check-equal? (candidate (list ) \"\
    john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\" \"\
    john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n \
    \   (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"\
    xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"))\n    (check-equal?\
    \ (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\") \"run\") (list\
    \ \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz68ns9p8.rkt:20:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpz68ns9p8.rkt:21:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz68ns9p8.rkt:22:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (member s substring)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph5unu30n.rkt:17:4\n\
    \nmember: not a proper list\n  in: \"xxx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmph5unu30n.rkt:18:4\n\nmember:\
    \ not a proper list\n  in: \"xx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmph5unu30n.rkt:19:4\n\nmember:\
    \ not a proper list\n  in: \"run\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings) (filter_by_substring\
    \ (rest strings) substring))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyga9787n.rkt:19:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpyga9787n.rkt:20:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyga9787n.rkt:21:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings) (filter_by_substring\
    \ (rest strings) substring))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplty205j6.rkt:19:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmplty205j6.rkt:20:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmplty205j6.rkt:21:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (member s substring)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp51fyfc7p.rkt:17:4\n\
    \nmember: not a proper list\n  in: \"xxx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp51fyfc7p.rkt:18:4\n\nmember:\
    \ not a proper list\n  in: \"xx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp51fyfc7p.rkt:19:4\n\nmember:\
    \ not a proper list\n  in: \"run\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (string-contains s substring))\n          strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n   \
    \ (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"\
    asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\"\
    \ \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\"\
    \ \"prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpchouojpf.rkt:9:23: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpchouojpf.rkt:9:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond\n    [(empty?\
    \ strings) strings]\n    [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n    [else (cons (first strings) (filter_by_substring\
    \ (rest strings) substring))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpot4mo0aq.rkt:20:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpot4mo0aq.rkt:21:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpot4mo0aq.rkt:22:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings)\n          \
    \          (filter_by_substring (filter_by_substring (rest strings) substring)\
    \ substring))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_by_substring))\n    (check-equal? (candidate (list ) \"\
    john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\" \"\
    john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n \
    \   (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"\
    xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"))\n    (check-equal?\
    \ (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\") \"run\") (list\
    \ \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcvy1a39p.rkt:20:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpcvy1a39p.rkt:21:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcvy1a39p.rkt:22:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings)\n          \
    \          (filter_by_substring (filter_by_substring (rest strings) substring)\
    \ substring))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_by_substring))\n    (check-equal? (candidate (list ) \"\
    john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\" \"\
    john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n \
    \   (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"\
    xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"))\n    (check-equal?\
    \ (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\") \"run\") (list\
    \ \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk8k8ij_o.rkt:20:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpk8k8ij_o.rkt:21:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk8k8ij_o.rkt:22:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings) (filter_by_substring\
    \ (rest strings) substring))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0bccth13.rkt:19:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp0bccth13.rkt:20:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0bccth13.rkt:21:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (x) (string=? x substring)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9ta9mxd3.rkt:17:4\n\
    actual:     '(\"xxx\" \"xxx\")\nexpected:   '(\"xxx\" \"xxxAAA\" \"xxx\")\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9ta9mxd3.rkt:18:4\n\
    actual:     '()\nexpected:   '(\"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9ta9mxd3.rkt:19:4\n\
    actual:     '()\nexpected:   '(\"grunt\" \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings) (filter_by_substring\
    \ (rest strings) substring))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphj9xz2ln.rkt:19:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmphj9xz2ln.rkt:20:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmphj9xz2ln.rkt:21:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (string-contains? s substring))\n          strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n   \
    \ (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"\
    asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\"\
    \ \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\"\
    \ \"prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings) (filter_by_substring\
    \ (rest strings) substring))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx8w5tez5.rkt:19:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpx8w5tez5.rkt:20:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx8w5tez5.rkt:21:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings) (filter_by_substring\
    \ (rest strings) substring))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfhnom5li.rkt:19:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpfhnom5li.rkt:20:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfhnom5li.rkt:21:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings)\n          \
    \          (filter_by_substring (filter_by_substring (rest strings) substring)\
    \ substring))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_by_substring))\n    (check-equal? (candidate (list ) \"\
    john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\" \"\
    john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n \
    \   (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"\
    xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"))\n    (check-equal?\
    \ (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\") \"run\") (list\
    \ \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8_b21yfs.rkt:20:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp8_b21yfs.rkt:21:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8_b21yfs.rkt:22:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (x) (equal? (string-ref x 0) substring)) strings))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"\
    aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"\
    xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"\
    prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprc7u_74b.rkt:17:4\n\
    actual:     '()\nexpected:   '(\"xxx\" \"xxxAAA\" \"xxx\")\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprc7u_74b.rkt:18:4\n\
    actual:     '()\nexpected:   '(\"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprc7u_74b.rkt:19:4\n\
    actual:     '()\nexpected:   '(\"grunt\" \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (string-contains s substring))\n          strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n   \
    \ (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"\
    asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\"\
    \ \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\"\
    \ \"prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpvc2v2fq1.rkt:9:23: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpvc2v2fq1.rkt:9:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (x) (string=? x substring)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpemive1xr.rkt:17:4\n\
    actual:     '(\"xxx\" \"xxx\")\nexpected:   '(\"xxx\" \"xxxAAA\" \"xxx\")\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpemive1xr.rkt:18:4\n\
    actual:     '()\nexpected:   '(\"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpemive1xr.rkt:19:4\n\
    actual:     '()\nexpected:   '(\"grunt\" \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings)\n          \
    \          (filter_by_substring (filter_by_substring (rest strings) substring)\
    \ substring))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_by_substring))\n    (check-equal? (candidate (list ) \"\
    john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\" \"\
    john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n \
    \   (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"\
    xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"))\n    (check-equal?\
    \ (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\") \"run\") (list\
    \ \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5c_odkxq.rkt:20:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp5c_odkxq.rkt:21:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5c_odkxq.rkt:22:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (member s substring)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg0350vga.rkt:17:4\n\
    \nmember: not a proper list\n  in: \"xxx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpg0350vga.rkt:18:4\n\nmember:\
    \ not a proper list\n  in: \"xx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpg0350vga.rkt:19:4\n\nmember:\
    \ not a proper list\n  in: \"run\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (string-contains s substring))\n          strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n   \
    \ (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"\
    asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\"\
    \ \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\"\
    \ \"prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmph6kgmini.rkt:9:23: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmph6kgmini.rkt:9:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings) (filter_by_substring\
    \ (rest strings) substring))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptnfj1jcw.rkt:19:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmptnfj1jcw.rkt:20:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmptnfj1jcw.rkt:21:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings)\n          \
    \          (filter_by_substring (filter_by_substring (rest strings) substring)\
    \ substring))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_by_substring))\n    (check-equal? (candidate (list ) \"\
    john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\" \"\
    john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n \
    \   (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"\
    xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"))\n    (check-equal?\
    \ (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\") \"run\") (list\
    \ \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4in4sik2.rkt:20:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp4in4sik2.rkt:21:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4in4sik2.rkt:22:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (string-contains s substring))\n          strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n   \
    \ (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"\
    asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\"\
    \ \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\"\
    \ \"prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp5pqs6ef2.rkt:9:23: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmp5pqs6ef2.rkt:9:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings)\n          \
    \          (filter_by_substring (filter_by_substring (rest strings) substring)\
    \ substring))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_by_substring))\n    (check-equal? (candidate (list ) \"\
    john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\" \"\
    john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n \
    \   (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"\
    xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"))\n    (check-equal?\
    \ (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\") \"run\") (list\
    \ \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfmsj9x23.rkt:20:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpfmsj9x23.rkt:21:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfmsj9x23.rkt:22:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (member s substring)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5_yxniql.rkt:17:4\n\
    \nmember: not a proper list\n  in: \"xxx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp5_yxniql.rkt:18:4\n\nmember:\
    \ not a proper list\n  in: \"xx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp5_yxniql.rkt:19:4\n\nmember:\
    \ not a proper list\n  in: \"run\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings) (filter_by_substring\
    \ (rest strings) substring))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp77g_2hl5.rkt:19:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp77g_2hl5.rkt:20:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp77g_2hl5.rkt:21:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (contains s substring)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmprvo4wa68.rkt:9:23: contains: unbound identifier\n  in: contains\n\
    \  location...:\n   /tmp/tmprvo4wa68.rkt:9:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (string-contains? s substring))\n          strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n   \
    \ (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"\
    asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\"\
    \ \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\"\
    \ \"prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings)\n          \
    \          (filter_by_substring (filter_by_substring (rest strings) substring)\
    \ substring))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_by_substring))\n    (check-equal? (candidate (list ) \"\
    john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\" \"\
    john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n \
    \   (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"\
    xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"))\n    (check-equal?\
    \ (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\") \"run\") (list\
    \ \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi57ez8um.rkt:20:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpi57ez8um.rkt:21:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi57ez8um.rkt:22:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (contains s substring)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpre7gsh9e.rkt:9:23: contains: unbound identifier\n  in: contains\n\
    \  location...:\n   /tmp/tmpre7gsh9e.rkt:9:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (string-contains s substring))\n          strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n   \
    \ (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"\
    asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\"\
    \ \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\"\
    \ \"prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpwk4od99y.rkt:9:23: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpwk4od99y.rkt:9:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (member s substring)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6md6y4yk.rkt:17:4\n\
    \nmember: not a proper list\n  in: \"xxx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6md6y4yk.rkt:18:4\n\nmember:\
    \ not a proper list\n  in: \"xx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6md6y4yk.rkt:19:4\n\nmember:\
    \ not a proper list\n  in: \"run\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond\n    [(empty?\
    \ strings) strings]\n    [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n    [else (cons (first strings) (filter_by_substring\
    \ (rest strings) substring))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgcsro9wg.rkt:20:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpgcsro9wg.rkt:21:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgcsro9wg.rkt:22:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (member s substring)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj8bpupug.rkt:17:4\n\
    \nmember: not a proper list\n  in: \"xxx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpj8bpupug.rkt:18:4\n\nmember:\
    \ not a proper list\n  in: \"xx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpj8bpupug.rkt:19:4\n\nmember:\
    \ not a proper list\n  in: \"run\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (member s substring)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcvpr7aay.rkt:17:4\n\
    \nmember: not a proper list\n  in: \"xxx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcvpr7aay.rkt:18:4\n\nmember:\
    \ not a proper list\n  in: \"xx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcvpr7aay.rkt:19:4\n\nmember:\
    \ not a proper list\n  in: \"run\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (string-contains? s substring))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n   \
    \ (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"\
    asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\"\
    \ \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\"\
    \ \"prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (contains s substring)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpu9ra2640.rkt:9:23: contains: unbound identifier\n  in: contains\n\
    \  location...:\n   /tmp/tmpu9ra2640.rkt:9:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (string-contains s substring))\n          strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n   \
    \ (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"\
    asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\"\
    \ \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\"\
    \ \"prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp4votmh_u.rkt:9:23: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmp4votmh_u.rkt:9:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings) (filter_by_substring\
    \ (rest strings) substring))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx0x3glmu.rkt:19:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpx0x3glmu.rkt:20:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx0x3glmu.rkt:21:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (member s substring)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf4q15076.rkt:17:4\n\
    \nmember: not a proper list\n  in: \"xxx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpf4q15076.rkt:18:4\n\nmember:\
    \ not a proper list\n  in: \"xx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpf4q15076.rkt:19:4\n\nmember:\
    \ not a proper list\n  in: \"run\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings) (filter_by_substring\
    \ (rest strings) substring))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfpwwkmk4.rkt:19:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpfpwwkmk4.rkt:20:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfpwwkmk4.rkt:21:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings)\n          \
    \          (filter_by_substring (filter_by_substring (rest strings) substring)\
    \ substring))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_by_substring))\n    (check-equal? (candidate (list ) \"\
    john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\" \"\
    john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n \
    \   (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"\
    xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"))\n    (check-equal?\
    \ (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\") \"run\") (list\
    \ \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp179kdicy.rkt:20:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp179kdicy.rkt:21:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp179kdicy.rkt:22:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (string-contains s substring))\n          strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n   \
    \ (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"\
    asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\"\
    \ \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\"\
    \ \"prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpgmpo_ax2.rkt:9:23: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpgmpo_ax2.rkt:9:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (x) (substring x 0))\n          strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuolujri7.rkt:18:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"xxx\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpuolujri7.rkt:19:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: \"xx\"\n--------------------\n--------------------\nERROR\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpuolujri7.rkt:20:4\n\napplication: not a\
    \ procedure;\n expected a procedure that can be applied to arguments\n  given:\
    \ \"run\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (member s substring)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf9mwsu5s.rkt:17:4\n\
    \nmember: not a proper list\n  in: \"xxx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpf9mwsu5s.rkt:18:4\n\nmember:\
    \ not a proper list\n  in: \"xx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpf9mwsu5s.rkt:19:4\n\nmember:\
    \ not a proper list\n  in: \"run\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (string-contains? s substring))\n          strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n   \
    \ (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"\
    asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\"\
    \ \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\"\
    \ \"prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings)\n          \
    \          (filter_by_substring (filter_by_substring (rest strings) substring)\
    \ substring))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_by_substring))\n    (check-equal? (candidate (list ) \"\
    john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\" \"\
    john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n \
    \   (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"\
    xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"))\n    (check-equal?\
    \ (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\") \"run\") (list\
    \ \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgxqrvq5m.rkt:20:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpgxqrvq5m.rkt:21:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgxqrvq5m.rkt:22:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings)\n          \
    \          (filter_by_substring (filter_by_substring (rest strings) substring)\
    \ substring))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_by_substring))\n    (check-equal? (candidate (list ) \"\
    john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\" \"\
    john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n \
    \   (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"\
    xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"))\n    (check-equal?\
    \ (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\") \"run\") (list\
    \ \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpggraga1i.rkt:20:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpggraga1i.rkt:21:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpggraga1i.rkt:22:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (str)\n            (string=? substring str))\n          strings))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"\
    asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\"\
    \ \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\"\
    \ \"prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7_quj3si.rkt:19:4\n\
    actual:     '(\"xxx\" \"xxx\")\nexpected:   '(\"xxx\" \"xxxAAA\" \"xxx\")\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7_quj3si.rkt:20:4\n\
    actual:     '()\nexpected:   '(\"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7_quj3si.rkt:21:4\n\
    actual:     '()\nexpected:   '(\"grunt\" \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (string-contains? s substring))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n   \
    \ (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"\
    asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\"\
    \ \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\"\
    \ \"prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings) (filter_by_substring\
    \ (rest strings) substring))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptu1i76ed.rkt:19:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmptu1i76ed.rkt:20:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmptu1i76ed.rkt:21:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings)\n          \
    \          (filter_by_substring (filter_by_substring (rest strings) substring)\
    \ substring))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_by_substring))\n    (check-equal? (candidate (list ) \"\
    john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\" \"\
    john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n \
    \   (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"\
    xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"))\n    (check-equal?\
    \ (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\") \"run\") (list\
    \ \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptzga8kpj.rkt:20:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmptzga8kpj.rkt:21:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmptzga8kpj.rkt:22:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (contains s substring)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpbabw8zdx.rkt:9:23: contains: unbound identifier\n  in: contains\n\
    \  location...:\n   /tmp/tmpbabw8zdx.rkt:9:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings) (filter_by_substring\
    \ (rest strings) substring))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe_no8tg2.rkt:19:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpe_no8tg2.rkt:20:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe_no8tg2.rkt:21:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings)\n          \
    \          (filter_by_substring (filter_by_substring (rest strings) substring)\
    \ substring))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_by_substring))\n    (check-equal? (candidate (list ) \"\
    john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\" \"\
    john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n \
    \   (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"\
    xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"))\n    (check-equal?\
    \ (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\") \"run\") (list\
    \ \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdfb717hx.rkt:20:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpdfb717hx.rkt:21:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdfb717hx.rkt:22:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (str)\n            (string=? substring str))\n          strings))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"\
    asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\"\
    \ \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\"\
    \ \"prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpam6hm0up.rkt:19:4\n\
    actual:     '(\"xxx\" \"xxx\")\nexpected:   '(\"xxx\" \"xxxAAA\" \"xxx\")\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpam6hm0up.rkt:20:4\n\
    actual:     '()\nexpected:   '(\"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpam6hm0up.rkt:21:4\n\
    actual:     '()\nexpected:   '(\"grunt\" \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings)\n          \
    \          (filter_by_substring (filter_by_substring (rest strings) substring)\
    \ substring))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_by_substring))\n    (check-equal? (candidate (list ) \"\
    john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\" \"\
    john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n \
    \   (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"\
    xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"))\n    (check-equal?\
    \ (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\") \"run\") (list\
    \ \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbb7l8sfj.rkt:20:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpbb7l8sfj.rkt:21:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbb7l8sfj.rkt:22:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (member s substring)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwb6yms6q.rkt:17:4\n\
    \nmember: not a proper list\n  in: \"xxx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwb6yms6q.rkt:18:4\n\nmember:\
    \ not a proper list\n  in: \"xx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwb6yms6q.rkt:19:4\n\nmember:\
    \ not a proper list\n  in: \"run\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (x) (string=? x substring)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5x1zoqj6.rkt:17:4\n\
    actual:     '(\"xxx\" \"xxx\")\nexpected:   '(\"xxx\" \"xxxAAA\" \"xxx\")\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5x1zoqj6.rkt:18:4\n\
    actual:     '()\nexpected:   '(\"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5x1zoqj6.rkt:19:4\n\
    actual:     '()\nexpected:   '(\"grunt\" \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (member s substring)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9h6eyy8z.rkt:17:4\n\
    \nmember: not a proper list\n  in: \"xxx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9h6eyy8z.rkt:18:4\n\nmember:\
    \ not a proper list\n  in: \"xx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9h6eyy8z.rkt:19:4\n\nmember:\
    \ not a proper list\n  in: \"run\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings) (filter_by_substring\
    \ (rest strings) substring))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptuohyoaz.rkt:19:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmptuohyoaz.rkt:20:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmptuohyoaz.rkt:21:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings)\n          \
    \          (filter_by_substring (filter_by_substring (rest strings) substring)\
    \ substring))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_by_substring))\n    (check-equal? (candidate (list ) \"\
    john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\" \"\
    john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n \
    \   (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"\
    xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"))\n    (check-equal?\
    \ (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\") \"run\") (list\
    \ \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptmk952it.rkt:20:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmptmk952it.rkt:21:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmptmk952it.rkt:22:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (string-contains s substring))\n          strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n   \
    \ (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"\
    asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\"\
    \ \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\"\
    \ \"prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpa8mel8jv.rkt:9:23: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpa8mel8jv.rkt:9:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings) (filter_by_substring\
    \ (rest strings) substring))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvj88w4k1.rkt:19:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpvj88w4k1.rkt:20:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvj88w4k1.rkt:21:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (string-contains s substring))\n          strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n   \
    \ (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"\
    asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\"\
    \ \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\"\
    \ \"prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpv4f_5sec.rkt:9:23: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpv4f_5sec.rkt:9:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (member s substring)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpofuvs3wh.rkt:17:4\n\
    \nmember: not a proper list\n  in: \"xxx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpofuvs3wh.rkt:18:4\n\nmember:\
    \ not a proper list\n  in: \"xx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpofuvs3wh.rkt:19:4\n\nmember:\
    \ not a proper list\n  in: \"run\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond\n    [(empty?\
    \ strings) strings]\n    [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n    [else (cons (first strings) (filter_by_substring\
    \ (rest strings) substring))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4an36a5u.rkt:20:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp4an36a5u.rkt:21:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4an36a5u.rkt:22:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (member s substring)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpd12t2z8k.rkt:17:4\n\
    \nmember: not a proper list\n  in: \"xxx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpd12t2z8k.rkt:18:4\n\nmember:\
    \ not a proper list\n  in: \"xx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpd12t2z8k.rkt:19:4\n\nmember:\
    \ not a proper list\n  in: \"run\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings) (filter_by_substring\
    \ (rest strings) substring))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf7uus63p.rkt:19:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpf7uus63p.rkt:20:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf7uus63p.rkt:21:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (x) (member x substring)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdizp2lzr.rkt:17:4\n\
    \nmember: not a proper list\n  in: \"xxx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdizp2lzr.rkt:18:4\n\nmember:\
    \ not a proper list\n  in: \"xx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdizp2lzr.rkt:19:4\n\nmember:\
    \ not a proper list\n  in: \"run\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings) (filter_by_substring\
    \ (rest strings) substring))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1gvmgyqw.rkt:19:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp1gvmgyqw.rkt:20:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1gvmgyqw.rkt:21:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (member s substring)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5um6mppc.rkt:17:4\n\
    \nmember: not a proper list\n  in: \"xxx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp5um6mppc.rkt:18:4\n\nmember:\
    \ not a proper list\n  in: \"xx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp5um6mppc.rkt:19:4\n\nmember:\
    \ not a proper list\n  in: \"run\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (contains s substring)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpdwcz2lia.rkt:9:23: contains: unbound identifier\n  in: contains\n\
    \  location...:\n   /tmp/tmpdwcz2lia.rkt:9:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (string-contains? s substring))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n   \
    \ (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"\
    asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\"\
    \ \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\"\
    \ \"prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings)\n          \
    \          (filter_by_substring (filter_by_substring (rest strings) substring)\
    \ substring))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_by_substring))\n    (check-equal? (candidate (list ) \"\
    john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\" \"\
    john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n \
    \   (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"\
    xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"))\n    (check-equal?\
    \ (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\") \"run\") (list\
    \ \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4bk7zvv_.rkt:20:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp4bk7zvv_.rkt:21:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4bk7zvv_.rkt:22:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (str)\n            (string-contains str substring))\n          strings))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"\
    asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\"\
    \ \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\"\
    \ \"prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp0ewqx_cc.rkt:10:13: string-contains: unbound identifier\n  in:\
    \ string-contains\n  location...:\n   /tmp/tmp0ewqx_cc.rkt:10:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (str)\n            (string-contains str substring))\n          strings))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"\
    asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\"\
    \ \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\"\
    \ \"prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp6d9vyn5k.rkt:10:13: string-contains: unbound identifier\n  in:\
    \ string-contains\n  location...:\n   /tmp/tmp6d9vyn5k.rkt:10:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond\n    [(empty?\
    \ strings) strings]\n    [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n    [else (cons (first strings) (filter_by_substring\
    \ (rest strings) substring))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppeayzlbz.rkt:20:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmppeayzlbz.rkt:21:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmppeayzlbz.rkt:22:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (member s substring)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgendr_1r.rkt:17:4\n\
    \nmember: not a proper list\n  in: \"xxx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgendr_1r.rkt:18:4\n\nmember:\
    \ not a proper list\n  in: \"xx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgendr_1r.rkt:19:4\n\nmember:\
    \ not a proper list\n  in: \"run\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (x) (string=? x substring)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk0cp4wfc.rkt:17:4\n\
    actual:     '(\"xxx\" \"xxx\")\nexpected:   '(\"xxx\" \"xxxAAA\" \"xxx\")\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk0cp4wfc.rkt:18:4\n\
    actual:     '()\nexpected:   '(\"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk0cp4wfc.rkt:19:4\n\
    actual:     '()\nexpected:   '(\"grunt\" \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings) (filter_by_substring\
    \ (rest strings) substring))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwy0l7j8n.rkt:19:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpwy0l7j8n.rkt:20:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwy0l7j8n.rkt:21:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings) (filter_by_substring\
    \ (rest strings) substring))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5qf4h307.rkt:19:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp5qf4h307.rkt:20:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5qf4h307.rkt:21:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings) (filter_by_substring\
    \ (rest strings) substring))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8ojsrwwj.rkt:19:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp8ojsrwwj.rkt:20:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8ojsrwwj.rkt:21:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond\n    [(empty?\
    \ strings) strings]\n    [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n    [else (cons (first strings)\n              \
    \  (filter_by_substring (filter_by_substring (rest strings) substring) substring))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"\
    asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\"\
    \ \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\"\
    \ \"prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6aq6pa75.rkt:21:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp6aq6pa75.rkt:22:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6aq6pa75.rkt:23:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings)\n          \
    \          (filter_by_substring (filter_by_substring (rest strings) substring)\
    \ substring))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_by_substring))\n    (check-equal? (candidate (list ) \"\
    john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\" \"\
    john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n \
    \   (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"\
    xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"))\n    (check-equal?\
    \ (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\") \"run\") (list\
    \ \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwveowen7.rkt:20:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpwveowen7.rkt:21:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwveowen7.rkt:22:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings)\n          \
    \          (filter_by_substring (filter_by_substring (rest strings) substring)\
    \ substring))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_by_substring))\n    (check-equal? (candidate (list ) \"\
    john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\" \"\
    john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n \
    \   (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"\
    xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"))\n    (check-equal?\
    \ (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\") \"run\") (list\
    \ \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq0i8lpn9.rkt:20:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpq0i8lpn9.rkt:21:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq0i8lpn9.rkt:22:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (contains s substring)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpo3t9iubj.rkt:9:23: contains: unbound identifier\n  in: contains\n\
    \  location...:\n   /tmp/tmpo3t9iubj.rkt:9:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond\n    [(empty?\
    \ strings) strings]\n    [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n    [else (cons (first strings) (filter_by_substring\
    \ (rest strings) substring))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptfsi2jed.rkt:20:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmptfsi2jed.rkt:21:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmptfsi2jed.rkt:22:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings)\n          \
    \          (filter_by_substring (filter_by_substring (rest strings) substring)\
    \ substring))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_by_substring))\n    (check-equal? (candidate (list ) \"\
    john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\" \"\
    john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n \
    \   (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"\
    xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"))\n    (check-equal?\
    \ (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\") \"run\") (list\
    \ \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplscl2ez6.rkt:20:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmplscl2ez6.rkt:21:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmplscl2ez6.rkt:22:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (string-contains? s substring))\n          strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n   \
    \ (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"\
    asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\"\
    \ \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\"\
    \ \"prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings) (filter_by_substring\
    \ (rest strings) substring))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6z0mo1xi.rkt:19:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp6z0mo1xi.rkt:20:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6z0mo1xi.rkt:21:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings)\n          \
    \          (filter_by_substring (filter_by_substring (rest strings) substring)\
    \ substring))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_by_substring))\n    (check-equal? (candidate (list ) \"\
    john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\" \"\
    john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n \
    \   (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"\
    xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"))\n    (check-equal?\
    \ (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\") \"run\") (list\
    \ \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpaff9uesk.rkt:20:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpaff9uesk.rkt:21:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpaff9uesk.rkt:22:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings)\n          \
    \          (filter_by_substring (filter_by_substring (rest strings) substring)\
    \ substring))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_by_substring))\n    (check-equal? (candidate (list ) \"\
    john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\" \"\
    john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n \
    \   (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"\
    xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"))\n    (check-equal?\
    \ (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\") \"run\") (list\
    \ \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8c05hebg.rkt:20:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp8c05hebg.rkt:21:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8c05hebg.rkt:22:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (contains s substring)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpkyc0t4vn.rkt:9:23: contains: unbound identifier\n  in: contains\n\
    \  location...:\n   /tmp/tmpkyc0t4vn.rkt:9:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings) (filter_by_substring\
    \ (rest strings) substring))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_gs17yyo.rkt:19:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp_gs17yyo.rkt:20:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_gs17yyo.rkt:21:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (str)\n            (string=? substring str))\n          strings))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"\
    asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\"\
    \ \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\"\
    \ \"prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvhaajaf2.rkt:19:4\n\
    actual:     '(\"xxx\" \"xxx\")\nexpected:   '(\"xxx\" \"xxxAAA\" \"xxx\")\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvhaajaf2.rkt:20:4\n\
    actual:     '()\nexpected:   '(\"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvhaajaf2.rkt:21:4\n\
    actual:     '()\nexpected:   '(\"grunt\" \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (member s substring)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkv3tiyu7.rkt:17:4\n\
    \nmember: not a proper list\n  in: \"xxx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkv3tiyu7.rkt:18:4\n\nmember:\
    \ not a proper list\n  in: \"xx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkv3tiyu7.rkt:19:4\n\nmember:\
    \ not a proper list\n  in: \"run\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings) (filter_by_substring\
    \ (rest strings) substring))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdoxn1j_8.rkt:19:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpdoxn1j_8.rkt:20:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdoxn1j_8.rkt:21:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (x) (member x substring)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3xzn7vyj.rkt:17:4\n\
    \nmember: not a proper list\n  in: \"xxx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3xzn7vyj.rkt:18:4\n\nmember:\
    \ not a proper list\n  in: \"xx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3xzn7vyj.rkt:19:4\n\nmember:\
    \ not a proper list\n  in: \"run\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (contains s substring)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpwkbn5o4t.rkt:9:23: contains: unbound identifier\n  in: contains\n\
    \  location...:\n   /tmp/tmpwkbn5o4t.rkt:9:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings)\n          \
    \          (filter_by_substring (filter_by_substring (rest strings) substring)\
    \ substring))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_by_substring))\n    (check-equal? (candidate (list ) \"\
    john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\" \"\
    john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n \
    \   (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"\
    xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"))\n    (check-equal?\
    \ (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\") \"run\") (list\
    \ \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp85wqqcb_.rkt:20:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp85wqqcb_.rkt:21:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp85wqqcb_.rkt:22:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (member s substring)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc29odl4c.rkt:17:4\n\
    \nmember: not a proper list\n  in: \"xxx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpc29odl4c.rkt:18:4\n\nmember:\
    \ not a proper list\n  in: \"xx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpc29odl4c.rkt:19:4\n\nmember:\
    \ not a proper list\n  in: \"run\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings)\n          \
    \          (filter_by_substring (filter_by_substring (rest strings) substring)\
    \ substring))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_by_substring))\n    (check-equal? (candidate (list ) \"\
    john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\" \"\
    john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n \
    \   (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"\
    xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"))\n    (check-equal?\
    \ (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\") \"run\") (list\
    \ \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3xb10pjj.rkt:20:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp3xb10pjj.rkt:21:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3xb10pjj.rkt:22:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (str)\n            (string=? (substring str) substring))\n          strings))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n\
    \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"\
    asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\"\
    \ \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\"\
    \ \"prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx3kje5k6.rkt:19:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"xxx\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpx3kje5k6.rkt:20:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: \"xx\"\n--------------------\n--------------------\nERROR\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpx3kje5k6.rkt:21:4\n\napplication: not a\
    \ procedure;\n expected a procedure that can be applied to arguments\n  given:\
    \ \"run\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (string-contains s substring))\n         strings))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n   \
    \ (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"\
    asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\"\
    \ \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\"\
    \ \"prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpfc9ufict.rkt:9:23: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpfc9ufict.rkt:9:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (s) (member s substring)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqofnhqf9.rkt:17:4\n\
    \nmember: not a proper list\n  in: \"xxx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqofnhqf9.rkt:18:4\n\nmember:\
    \ not a proper list\n  in: \"xx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqofnhqf9.rkt:19:4\n\nmember:\
    \ not a proper list\n  in: \"run\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (filter (lambda\
    \ (str) (string=? substring str)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_substring))\n    (check-equal? (candidate\
    \ (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
    \ \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"\
    xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"aaaxxy\" \"john\
    \ doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\"\
    ))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"prune\" \"gruesome\"\
    ) \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp85owh17l.rkt:17:4\n\
    actual:     '(\"xxx\" \"xxx\")\nexpected:   '(\"xxx\" \"xxxAAA\" \"xxx\")\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp85owh17l.rkt:18:4\n\
    actual:     '()\nexpected:   '(\"xxx\" \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp85owh17l.rkt:19:4\n\
    actual:     '()\nexpected:   '(\"grunt\" \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ contain given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd',\
    \ 'array']\n(define (filter_by_substring strings substring)\n  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) substring) (filter_by_substring\
    \ (rest strings) substring)]\n        [else (cons (first strings) (filter_by_substring\
    \ (filter_by_substring (rest strings) substring) substring))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n   \
    \ (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
    \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
    \ \"xxx\" \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"\
    asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\"\
    \ \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\"\
    \ \"prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy0k5mwft.rkt:19:4\n\
    actual:     '(\"asd\" \"xxy\" \"john doe\" \"xxxAAA\")\nexpected:   '(\"xxx\"\
    \ \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpy0k5mwft.rkt:20:4\nactual:     '(\"\
    xxx\" \"asd\" \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\")\nexpected:   '(\"xxx\"\
    \ \"aaaxxy\" \"xxxAAA\" \"xxx\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy0k5mwft.rkt:21:4\nactual:\
    \     '(\"grunt\" \"trumpet\" \"prune\" \"gruesome\")\nexpected:   '(\"grunt\"\
    \ \"prune\")\n--------------------\n"
  exit_code: 0
  status: Exception
