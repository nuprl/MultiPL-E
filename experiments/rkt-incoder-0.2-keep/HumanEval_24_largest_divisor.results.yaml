language: racket
name: HumanEval_24_largest_divisor
results:
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) n]\n        [(even? n) (/ n 2)]\n    \
    \    [else (largest_divisor (- n 1))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpu467jyzp.rkt:17:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpu467jyzp.rkt:20:4

    actual:     24

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond ((= n 0) 0)\n        ((even? n) (/ n 2))\n    \
    \    (else (+ 1 (largest_divisor (- n 1))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplmaeyt6b.rkt:16:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplmaeyt6b.rkt:17:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplmaeyt6b.rkt:20:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (let loop ((n n) (divisor 1))\n    (cond ((= n 1) divisor)\n\
    \          ((even? n) (loop (/ n 2) divisor))\n          (else (loop (/ n 2) (+\
    \ divisor 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7d842knm.rkt:17:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7d842knm.rkt:18:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7d842knm.rkt:19:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 5/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7d842knm.rkt:20:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 25/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7d842knm.rkt:21:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (helper n count)\n    (if (= count 0)\n     \
    \   n\n        (helper (quotient n count) (- count 1))))\n  (helper n 0))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp598ralt9.rkt:18:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp598ralt9.rkt:19:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp598ralt9.rkt:20:4

    actual:     10

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp598ralt9.rkt:21:4

    actual:     100

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp598ralt9.rkt:22:4

    actual:     49

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) 1]\n        [(even? n) (* n largest_divisor(sub1\
    \ n))]\n        [else (* largest_divisor(sub1 n) (* n largest_divisor(sub1 n)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcyqch3z3.rkt:16:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpcyqch3z3.rkt:17:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcyqch3z3.rkt:18:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcyqch3z3.rkt:19:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpcyqch3z3.rkt:20:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) 1]\n        [(even? n) (* n largest_divisor\
    \ (- n 1))]\n        [else (* n (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnrn4qik5.rkt:16:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpnrn4qik5.rkt:17:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpnrn4qik5.rkt:18:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnrn4qik5.rkt:19:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpnrn4qik5.rkt:20:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond ((= n 1) 1)\n        ((even? n) (largest_divisor\
    \ (- n 1)))\n        (else (+ 1 (largest_divisor (- n 1))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl45wva9u.rkt:16:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl45wva9u.rkt:17:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl45wva9u.rkt:20:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond ((= n 0) 0)\n        ((even? n) (/ n 2))\n    \
    \    (else (+ 1 (largest_divisor (- n 1))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa2g81ka9.rkt:16:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa2g81ka9.rkt:17:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa2g81ka9.rkt:20:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) n]\n        [(even? n) (* n largest_divisor(sub1\
    \ n))]\n        [else (* largest_divisor(sub1 n) (sub1 n))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpra49encg.rkt:16:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpra49encg.rkt:17:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpra49encg.rkt:18:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpra49encg.rkt:19:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpra49encg.rkt:20:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (helper n count)\n    (if (= count 0)\n     \
    \   n\n        (helper (quotient n count) (- count 1))))\n  (helper n 0))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpue96bw_2.rkt:18:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpue96bw_2.rkt:19:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpue96bw_2.rkt:20:4

    actual:     10

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpue96bw_2.rkt:21:4

    actual:     100

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpue96bw_2.rkt:22:4

    actual:     49

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond ((= n 0) 0)\n        ((even? n) (/ n 2))\n    \
    \    (else (+ 1 (largest_divisor (- n 1))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvshpkd25.rkt:16:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvshpkd25.rkt:17:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvshpkd25.rkt:20:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond ((= n 0) 0)\n        ((even? n) (/ n 2))\n    \
    \    (else (largest_divisor (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpunntw9nk.rkt:17:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpunntw9nk.rkt:20:4

    actual:     24

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) n]\n        [(even? n) (largest_divisor\
    \ (- n 1))]\n        [else (+ 1 (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4e6o5zoj.rkt:16:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4e6o5zoj.rkt:17:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4e6o5zoj.rkt:20:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (let loop ((n n) (max 0))\n    (if (= n 0)\n        max\n\
    \        (loop (quotient n 2)\n               (if (even? n)\n                \
    \   (if (< max n)\n                       (max n)\n                       (loop\
    \ (quotient n 2) max))\n                   (loop (quotient n 2) max))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0spggcni.rkt:22:4\n\
    actual:     0\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp0spggcni.rkt:23:4\nactual:     0\n\
    expected:   1\n--------------------\n--------------------\nERROR\nname:      \
    \ check-equal?\nlocation:   /tmp/tmp0spggcni.rkt:24:4\n\napplication: not a procedure;\n\
    \ expected a procedure that can be applied to arguments\n  given: 0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0spggcni.rkt:25:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: 0\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp0spggcni.rkt:26:4\n\napplication: not\
    \ a procedure;\n expected a procedure that can be applied to arguments\n  given:\
    \ 0\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (helper n count)\n    (if (= count 0)\n     \
    \   n\n        (helper (quotient n count) (sub1 count))))\n  (helper n n))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr6x13kfe.rkt:18:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr6x13kfe.rkt:19:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr6x13kfe.rkt:20:4

    actual:     0

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr6x13kfe.rkt:21:4

    actual:     0

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr6x13kfe.rkt:22:4

    actual:     0

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) 1]\n        [(even? n) (* n largest_divisor(sub1\
    \ n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqypnnod2.rkt:15:4\n\
    actual:     #<void>\nexpected:   1\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqypnnod2.rkt:16:4\nactual:\
    \     #<void>\nexpected:   1\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpqypnnod2.rkt:17:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqypnnod2.rkt:18:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpqypnnod2.rkt:19:4\nactual:     #<void>\nexpected:   7\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (let loop ((n n) (divisor 1))\n    (cond ((= n 1) divisor)\n\
    \          ((even? n) (loop (/ n 2) divisor))\n          (else (loop (/ n 2) (+\
    \ divisor 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbxwmimp8.rkt:17:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbxwmimp8.rkt:18:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbxwmimp8.rkt:19:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 5/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbxwmimp8.rkt:20:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 25/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbxwmimp8.rkt:21:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond ((= n 0) 0)\n        ((even? n) (/ n 2))\n    \
    \    (else (+ 1 (largest_divisor (- n 1))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxe1svbfn.rkt:16:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxe1svbfn.rkt:17:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxe1svbfn.rkt:20:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond ((= n 0) 0)\n        ((even? n) (/ n 2))\n    \
    \    (else (+ 1 (largest_divisor (- n 1))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy90yp9kq.rkt:16:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy90yp9kq.rkt:17:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy90yp9kq.rkt:20:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) 1]\n        [(even? n) (* n largest_divisor\
    \ (- n 1))]\n        [else (* n (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2_huj_gz.rkt:16:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp2_huj_gz.rkt:17:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2_huj_gz.rkt:18:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2_huj_gz.rkt:19:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp2_huj_gz.rkt:20:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 0) 0]\n        [(even? n) (max (largest_divisor\
    \ (/ n 2))\n                       (largest_divisor (/ n 3)))]\n        [else\
    \ (max (largest_divisor (/ n 2))\n                   (largest_divisor (/ n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpauko5xub.rkt:18:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpauko5xub.rkt:19:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpauko5xub.rkt:20:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 5/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpauko5xub.rkt:21:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 25/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpauko5xub.rkt:22:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) 1]\n        [(even? n) (/ n 2)]\n    \
    \    [else (largest_divisor (- n 1))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8qiw42qn.rkt:17:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8qiw42qn.rkt:20:4

    actual:     24

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (let loop ((n n) (max 0))\n    (cond ((= n 0) max)\n\
    \          ((even? n) (loop (/ n 2) max))\n          (else (loop (/ n 2) (max\
    \ n))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps86b27bi.rkt:17:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: 0\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmps86b27bi.rkt:18:4\n\napplication: not\
    \ a procedure;\n expected a procedure that can be applied to arguments\n  given:\
    \ 0\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmps86b27bi.rkt:19:4\n\napplication: not a procedure;\n expected\
    \ a procedure that can be applied to arguments\n  given: 0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps86b27bi.rkt:20:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: 0\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmps86b27bi.rkt:21:4\n\napplication: not\
    \ a procedure;\n expected a procedure that can be applied to arguments\n  given:\
    \ 0\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) 1]\n        [(even? n) (* n (largest_divisor\
    \ (- n 1)))]\n        [else (largest_divisor (- n 1))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa2ti1e8x.rkt:16:4\n\
    actual:     2\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpa2ti1e8x.rkt:17:4\nactual:     48\n\
    expected:   1\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpa2ti1e8x.rkt:18:4\nactual:     3840\nexpected:\
    \   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpa2ti1e8x.rkt:19:4\nactual:\n  34243224702511976248246432895208185975118675053719198827915654463488000000000000\n\
    expected:   50\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpa2ti1e8x.rkt:20:4\nactual:     10409396852733332453861621760000\n\
    expected:   7\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond ((= n 0) 0)\n        ((even? n) (/ n 2))\n    \
    \    (else (+ 1 (largest_divisor (- n 1))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1q93lekk.rkt:16:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1q93lekk.rkt:17:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1q93lekk.rkt:20:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) n]\n        [(even? n) (largest_divisor\
    \ (- n 1))]\n        [else (+ 1 (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2_0g5mut.rkt:16:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2_0g5mut.rkt:17:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2_0g5mut.rkt:20:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond ((= n 1) 1)\n        ((even? n) (/ n 2))\n    \
    \    (else (+ 1 (largest_divisor (- n 1))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp93b5shos.rkt:16:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp93b5shos.rkt:17:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp93b5shos.rkt:20:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (helper n divisor)\n    (if (= n 0)\n       \
    \ divisor\n        (helper (- n 1) (+ divisor n))\n      )\n  )\n  (helper n 1)\n\
    )\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp57tuhoel.rkt:21:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp57tuhoel.rkt:22:4

    actual:     29

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp57tuhoel.rkt:23:4

    actual:     56

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp57tuhoel.rkt:24:4

    actual:     5051

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp57tuhoel.rkt:25:4

    actual:     1226

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) n]\n        [(even? n) (* n largest_divisor\
    \ (sub1 n))])\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpntaioem7.rkt:16:4\n\
    actual:     #<void>\nexpected:   1\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpntaioem7.rkt:17:4\nactual:\
    \     #<void>\nexpected:   1\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpntaioem7.rkt:18:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpntaioem7.rkt:19:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpntaioem7.rkt:20:4\nactual:     #<void>\nexpected:   7\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) n]\n        [(even? n) (largest_divisor\
    \ (- n 1))]\n        [else (+ 1 (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmcf2npwo.rkt:16:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmcf2npwo.rkt:17:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmcf2npwo.rkt:20:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) 1]\n        [(even? n) (* n largest_divisor\
    \ (- n 1))]\n        [else (* n (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8t2gzb43.rkt:16:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp8t2gzb43.rkt:17:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8t2gzb43.rkt:18:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8t2gzb43.rkt:19:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp8t2gzb43.rkt:20:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (let loop ((n n) (divisor 1))\n    (if (= n 0)\n    \
    \    divisor\n        (loop (quotient n divisor) (+ divisor 1)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpniqsnmcp.rkt:17:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpniqsnmcp.rkt:18:4

    actual:     5

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpniqsnmcp.rkt:20:4

    actual:     6

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpniqsnmcp.rkt:21:4

    actual:     6

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond ((= n 0) 0)\n        ((even? n) (/ n 2))\n    \
    \    (else (+ 1 (largest_divisor (- n 1))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp62k1j925.rkt:16:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp62k1j925.rkt:17:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp62k1j925.rkt:20:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) n]\n        [(even? n) (* n (largest_divisor\
    \ (- n 1)))]\n        [else (largest_divisor (- n 1))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptcrh1r20.rkt:16:4\n\
    actual:     2\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmptcrh1r20.rkt:17:4\nactual:     48\n\
    expected:   1\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmptcrh1r20.rkt:18:4\nactual:     3840\nexpected:\
    \   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmptcrh1r20.rkt:19:4\nactual:\n  34243224702511976248246432895208185975118675053719198827915654463488000000000000\n\
    expected:   50\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmptcrh1r20.rkt:20:4\nactual:     10409396852733332453861621760000\n\
    expected:   7\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 0) 0]\n        [(even? n) (cond [(= (remainder\
    \ n 2) 0) (+ n 1)]\n                          [(= (remainder n 2) 1) (+ n 2)])]\n\
    \        [else (largest_divisor (- n 1))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpketuu_nl.rkt:17:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpketuu_nl.rkt:18:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpketuu_nl.rkt:19:4

    actual:     11

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpketuu_nl.rkt:20:4

    actual:     101

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpketuu_nl.rkt:21:4

    actual:     49

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) n]\n        [(even? n) (/ n 2)]\n    \
    \    [else (largest_divisor (- n 1))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7vok6356.rkt:17:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7vok6356.rkt:20:4

    actual:     24

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) n]\n        [(even? n) (* n largest_divisor(sub1\
    \ n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpove_vrbg.rkt:15:4\n\
    actual:     #<void>\nexpected:   1\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpove_vrbg.rkt:16:4\nactual:\
    \     #<void>\nexpected:   1\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpove_vrbg.rkt:17:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpove_vrbg.rkt:18:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpove_vrbg.rkt:19:4\nactual:     #<void>\nexpected:   7\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (let loop ((n n) (divisor 1))\n    (cond ((= n 1) divisor)\n\
    \          ((even? n) (loop (/ n 2) divisor))\n          (else (loop (/ n 2) (+\
    \ divisor 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp94sc5vtt.rkt:17:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp94sc5vtt.rkt:18:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp94sc5vtt.rkt:19:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 5/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp94sc5vtt.rkt:20:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 25/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp94sc5vtt.rkt:21:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (helper n divisor)\n    (if (= n 0)\n       \
    \ divisor\n        (helper (- n 1) (+ divisor n))))\n  (helper n 1))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe30j1d54.rkt:18:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe30j1d54.rkt:19:4

    actual:     29

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe30j1d54.rkt:20:4

    actual:     56

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe30j1d54.rkt:21:4

    actual:     5051

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe30j1d54.rkt:22:4

    actual:     1226

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (let loop ((n n) (max 0))\n    (if (= n 0)\n        max\n\
    \        (loop (quotient n 2)\n              (if (even? n)\n                 \
    \ (if (< max n)\n                      max\n                      (loop (quotient\
    \ n 2)\n                            max))\n                  (loop (quotient n\
    \ 2)\n                        max))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpswzd531o.rkt:24:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpswzd531o.rkt:25:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpswzd531o.rkt:26:4

    actual:     0

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpswzd531o.rkt:27:4

    actual:     0

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpswzd531o.rkt:28:4

    actual:     0

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) n]\n        [(even? n) (largest_divisor\
    \ (/ n 2))]\n        [else (largest_divisor (/ n 2))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprj52t16e.rkt:16:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprj52t16e.rkt:17:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprj52t16e.rkt:18:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 5/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprj52t16e.rkt:19:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 25/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprj52t16e.rkt:20:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond ((= n 1) 1)\n        ((even? n) (/ n 2))\n    \
    \    (else (+ 1 (largest_divisor (- n 1))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpt2nf77e5.rkt:16:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpt2nf77e5.rkt:17:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpt2nf77e5.rkt:20:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond ((= n 1) 1)\n        ((even? n) (/ n 2))\n    \
    \    (else (+ (largest_divisor (- n 1)) (/ n 2)))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf_y_7y3j.rkt:16:4

    actual:     5/2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf_y_7y3j.rkt:17:4

    actual:     13/2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf_y_7y3j.rkt:20:4

    actual:     97/2

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond ((= n 1) 1)\n        ((even? n) (largest_divisor\
    \ (- n 1)))\n        (else (+ 1 (largest_divisor (- n 1))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq2aul9yu.rkt:16:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq2aul9yu.rkt:17:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq2aul9yu.rkt:20:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (let loop ((n n) (max 0))\n    (if (= n 0)\n        max\n\
    \        (loop (quotient n 2)\n              (if (even? n)\n                 \
    \ (if (> max n)\n                      max\n                      (loop (quotient\
    \ n 2)\n                            max))\n                  max))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpffd7g3pt.rkt:6:0: read-syntax: expected a `)` to close `(`\n  possible\
    \ cause: indentation suggests a missing `)` before line 18\n  context...:\n  \
    \ /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (let loop ((n n) (divisor 1))\n    (if (= n 0)\n    \
    \    divisor\n        (loop (quotient n divisor) (+ divisor 1)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp_a408i6.rkt:17:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp_a408i6.rkt:18:4

    actual:     5

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp_a408i6.rkt:20:4

    actual:     6

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp_a408i6.rkt:21:4

    actual:     6

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (helper n count)\n    (cond\n      [(= n 1) count]\n\
    \      [(even? n) (helper (/ n 2) (+ count 1))]\n      [else (helper (- n 1) count)]\n\
    \    ))\n  (helper n 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n \
    \   (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal?\
    \ (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtjlqpc0.rkt:21:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtjlqpc0.rkt:22:4

    actual:     3

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtjlqpc0.rkt:23:4

    actual:     6

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphtjlqpc0.rkt:24:4

    actual:     5

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (let loop ((n n) (divisor 1))\n    (cond ((= n 1) divisor)\n\
    \          ((even? n) (loop (/ n 2) divisor))\n          (else (loop (- n 1) (+\
    \ divisor 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppxlehns4.rkt:17:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppxlehns4.rkt:18:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppxlehns4.rkt:19:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppxlehns4.rkt:20:4

    actual:     3

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppxlehns4.rkt:21:4

    actual:     3

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (let loop ((n n) (divisor 1))\n    (cond ((= n 1) divisor)\n\
    \          ((even? n) (loop (quotient n 2) divisor))\n          (else (loop (quotient\
    \ n 2) (+ divisor 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz1j8g6oc.rkt:17:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz1j8g6oc.rkt:18:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz1j8g6oc.rkt:19:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz1j8g6oc.rkt:20:4

    actual:     3

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz1j8g6oc.rkt:21:4

    actual:     3

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond ((= n 1) 1)\n        ((even? n) (/ n 2))\n    \
    \    (else (+ 1 (largest_divisor (- n 1))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe6i5og3f.rkt:16:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe6i5og3f.rkt:17:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe6i5og3f.rkt:20:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) n]\n        [(even? n) (* n largest_divisor(sub1\
    \ n))]\n        [else (* largest_divisor(sub1 n) (sub1 n))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbq6dncgj.rkt:16:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbq6dncgj.rkt:17:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbq6dncgj.rkt:18:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbq6dncgj.rkt:19:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbq6dncgj.rkt:20:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) n]\n        [(even? n) (/ n 2)]\n    \
    \    [else (largest_divisor (- n 1))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgd21o78q.rkt:17:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgd21o78q.rkt:20:4

    actual:     24

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: -1
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) 1]\n        [(even? n) (* n largest_divisor(sub1\
    \ n))])\n  (if (even? n)\n      (* n largest_divisor(sub1 n))\n      (* n (largest_divisor\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) 1]\n        [(even? n) (* n largest_divisor\
    \ (- n 1))]\n        [else (* n (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzv571h60.rkt:16:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzv571h60.rkt:17:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzv571h60.rkt:18:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzv571h60.rkt:19:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzv571h60.rkt:20:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) 1]\n        [(even? n) (* n largest_divisor(sub1\
    \ n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8oszh3v4.rkt:15:4\n\
    actual:     #<void>\nexpected:   1\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8oszh3v4.rkt:16:4\nactual:\
    \     #<void>\nexpected:   1\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp8oszh3v4.rkt:17:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8oszh3v4.rkt:18:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp8oszh3v4.rkt:19:4\nactual:     #<void>\nexpected:   7\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond ((= n 0) 0)\n        ((even? n) (/ n 2))\n    \
    \    (else (+ 1 (largest_divisor (- n 1))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwjtkfg3t.rkt:16:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwjtkfg3t.rkt:17:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwjtkfg3t.rkt:20:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (helper n max)\n    (cond ((= n 1) max)\n   \
    \       ((even? n) (helper (/ n 2) max))\n          (else (helper (- n 1) max))))\n\
    \  (helper n n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwyc5u6nz.rkt:18:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwyc5u6nz.rkt:19:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwyc5u6nz.rkt:20:4

    actual:     10

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwyc5u6nz.rkt:21:4

    actual:     100

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwyc5u6nz.rkt:22:4

    actual:     49

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (helper n count)\n    (if (= n 1)\n        count\n\
    \        (helper (quotient n count) (+ count 1))))\n  (helper n 0))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpc_nfftbv.rkt:18:4


    quotient: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpc_nfftbv.rkt:19:4


    quotient: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpc_nfftbv.rkt:20:4


    quotient: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpc_nfftbv.rkt:21:4


    quotient: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpc_nfftbv.rkt:22:4


    quotient: division by zero

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (helper n count)\n    (if (= n 1)\n        count\n\
    \        (helper (quotient n 2) (+ count 1))))\n  (helper n 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5pbb94vj.rkt:19:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5pbb94vj.rkt:20:4

    actual:     3

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5pbb94vj.rkt:21:4

    actual:     6

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5pbb94vj.rkt:22:4

    actual:     5

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (let loop ((n n) (divisor 1))\n    (cond ((= n 1) divisor)\n\
    \          ((even? n) (loop (/ n 2) divisor))\n          (else (loop (/ n 2) (+\
    \ divisor 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuxx_c6qv.rkt:17:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuxx_c6qv.rkt:18:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuxx_c6qv.rkt:19:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 5/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuxx_c6qv.rkt:20:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 25/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuxx_c6qv.rkt:21:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) n]\n        [(even? n) (largest_divisor\
    \ (- n 1))]\n        [else (+ 1 (largest_divisor (- n 1))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp_z4d91x2.rkt:9:45: read-syntax: missing `]` to close preceding\
    \ `[`, found instead `)`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) 1]\n        [(even? n) (* n largest_divisor(sub1\
    \ n))]\n        [else (* largest_divisor(sub1 n) (sub1 n))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvfkeg1z.rkt:16:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmplvfkeg1z.rkt:17:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmplvfkeg1z.rkt:18:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvfkeg1z.rkt:19:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmplvfkeg1z.rkt:20:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) 1]\n        [(even? n) (* n largest_divisor(sub1\
    \ n))])\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzoi5jyk0.rkt:16:4\n\
    actual:     #<void>\nexpected:   1\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzoi5jyk0.rkt:17:4\nactual:\
    \     #<void>\nexpected:   1\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpzoi5jyk0.rkt:18:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzoi5jyk0.rkt:19:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpzoi5jyk0.rkt:20:4\nactual:     #<void>\nexpected:   7\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) 1]\n        [(even? n) (* n largest_divisor(sub1\
    \ n))]\n        [else (* largest_divisor(sub1 n) (sub1 n))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt20z_0w6.rkt:16:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpt20z_0w6.rkt:17:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpt20z_0w6.rkt:18:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt20z_0w6.rkt:19:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpt20z_0w6.rkt:20:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) n]\n        [(even? n) (* n largest_divisor(sub1\
    \ n))]\n        [else (* n (largest_divisor(sub1 n)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk27897of.rkt:16:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpk27897of.rkt:17:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpk27897of.rkt:18:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk27897of.rkt:19:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpk27897of.rkt:20:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond ((= n 1) 1)\n        ((even? n) (/ n 2))\n    \
    \    (else (+ 1 (largest_divisor (- n 1))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmphtzl4q.rkt:16:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmphtzl4q.rkt:17:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmphtzl4q.rkt:20:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond ((= n 1) 1)\n        ((even? n) (/ n 2))\n    \
    \    (else (largest_divisor (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfma_9go1.rkt:17:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfma_9go1.rkt:20:4

    actual:     24

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) 1]\n        [(even? n) (* n largest_divisor(sub1\
    \ n))]\n        [else (* largest_divisor(sub1 n) (* n largest_divisor(sub1 n)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt17a3ril.rkt:16:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpt17a3ril.rkt:17:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpt17a3ril.rkt:18:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt17a3ril.rkt:19:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpt17a3ril.rkt:20:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond ((= n 1) 1)\n        ((even? n) (/ n 2))\n    \
    \    (else (+ 1 (largest_divisor (- n 1))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmputgpjeyl.rkt:16:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmputgpjeyl.rkt:17:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmputgpjeyl.rkt:20:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) n]\n        [(even? n) (* n largest_divisor\
    \ (- n 1))]\n        [else (* n (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph4w6jj1n.rkt:16:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmph4w6jj1n.rkt:17:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmph4w6jj1n.rkt:18:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph4w6jj1n.rkt:19:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmph4w6jj1n.rkt:20:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (let loop ((n n) (max 0))\n    (if (= n 0)\n        max\n\
    \        (loop (quotient n 2)\n              (if (even? n)\n                 \
    \ (if (> max n)\n                      max\n                      (loop (quotient\
    \ n 2)\n                            max))\n                  (loop (quotient n\
    \ 2)\n                        max))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp10sgxumr.rkt:24:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp10sgxumr.rkt:25:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp10sgxumr.rkt:26:4

    actual:     0

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp10sgxumr.rkt:27:4

    actual:     0

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp10sgxumr.rkt:28:4

    actual:     0

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (helper n count)\n    (if (= n 1)\n        count\n\
    \        (helper (quotient n 2) (+ count 1))))\n  (helper n 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyn_luohs.rkt:19:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyn_luohs.rkt:20:4

    actual:     3

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyn_luohs.rkt:21:4

    actual:     6

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyn_luohs.rkt:22:4

    actual:     5

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (helper n count)\n    (if (= count 0)\n     \
    \   n\n        (helper (quotient n count) (- count 1))))\n  (helper n 0))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1ca05kzb.rkt:18:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1ca05kzb.rkt:19:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1ca05kzb.rkt:20:4

    actual:     10

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1ca05kzb.rkt:21:4

    actual:     100

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1ca05kzb.rkt:22:4

    actual:     49

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) 1]\n        [(even? n) (* n largest_divisor(sub1\
    \ n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq1jb6v1e.rkt:15:4\n\
    actual:     #<void>\nexpected:   1\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq1jb6v1e.rkt:16:4\nactual:\
    \     #<void>\nexpected:   1\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpq1jb6v1e.rkt:17:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq1jb6v1e.rkt:18:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpq1jb6v1e.rkt:19:4\nactual:     #<void>\nexpected:   7\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond ((= n 0) 0)\n        ((even? n) (/ n 2))\n    \
    \    (else (+ 1 (largest_divisor (- n 1))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5dpu8ryp.rkt:16:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5dpu8ryp.rkt:17:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5dpu8ryp.rkt:20:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (let loop ((n n) (divisor 1))\n    (if (= n 0)\n    \
    \    divisor\n        (loop (quotient n divisor) (+ divisor 1)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2r4f0zte.rkt:17:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2r4f0zte.rkt:18:4

    actual:     5

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2r4f0zte.rkt:20:4

    actual:     6

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2r4f0zte.rkt:21:4

    actual:     6

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) n]\n        [(even? n) (* n largest_divisor\
    \ (- n 1))]\n        [else (largest_divisor (- n 1))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzylcxls4.rkt:16:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzylcxls4.rkt:17:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzylcxls4.rkt:18:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzylcxls4.rkt:19:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzylcxls4.rkt:20:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) 1]\n        [(even? n) (* n largest_divisor\
    \ (- n 1))]\n        [else (* n (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpde7g1nym.rkt:16:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpde7g1nym.rkt:17:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpde7g1nym.rkt:18:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpde7g1nym.rkt:19:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpde7g1nym.rkt:20:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (let loop ((n n) (divisor 1))\n    (cond ((= n 1) divisor)\n\
    \          ((even? n) (loop (/ n 2) divisor))\n          (else (loop (/ n 2) (+\
    \ divisor 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuh1kkkx4.rkt:17:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuh1kkkx4.rkt:18:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuh1kkkx4.rkt:19:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 5/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuh1kkkx4.rkt:20:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 25/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuh1kkkx4.rkt:21:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) 1]\n        [(even? n) (* n largest_divisor(sub1\
    \ n))]\n        [else (* largest_divisor(sub1 n) (* n largest_divisor(sub1 n)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwq_mm8mx.rkt:16:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpwq_mm8mx.rkt:17:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwq_mm8mx.rkt:18:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwq_mm8mx.rkt:19:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpwq_mm8mx.rkt:20:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond ((= n 1) 1)\n        ((even? n) (/ n 2))\n    \
    \    (else (+ 1 (largest_divisor (- n 1))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnan_ylsw.rkt:16:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnan_ylsw.rkt:17:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnan_ylsw.rkt:20:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond ((= n 1) 1)\n        ((even? n) (largest_divisor\
    \ (- n 1)))\n        (else (+ 1 (largest_divisor (- n 1))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp45yam4nj.rkt:16:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp45yam4nj.rkt:17:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp45yam4nj.rkt:20:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) n]\n        [(even? n) (largest_divisor\
    \ (/ n 2))]\n        [else (largest_divisor (/ n 2))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpry5tuslk.rkt:16:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpry5tuslk.rkt:17:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpry5tuslk.rkt:18:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 5/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpry5tuslk.rkt:19:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 25/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpry5tuslk.rkt:20:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) 1]\n        [(even? n) (* n largest_divisor\
    \ (- n 1))]\n        [else (* n (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphbmgx5va.rkt:16:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmphbmgx5va.rkt:17:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphbmgx5va.rkt:18:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphbmgx5va.rkt:19:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmphbmgx5va.rkt:20:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (let loop ((n n) (divisor 1))\n    (cond ((= n 1) divisor)\n\
    \          ((even? n) (loop (/ n 2) divisor))\n          (else (loop (/ n 2) (+\
    \ divisor 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7v1orba5.rkt:17:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7v1orba5.rkt:18:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7v1orba5.rkt:19:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 5/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7v1orba5.rkt:20:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 25/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7v1orba5.rkt:21:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) 1]\n        [(even? n) (* n largest_divisor(sub1\
    \ n))]\n        [else (* largest_divisor(sub1 n) (sub1 n))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3j138nm4.rkt:16:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3j138nm4.rkt:17:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3j138nm4.rkt:18:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3j138nm4.rkt:19:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3j138nm4.rkt:20:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) 1]\n        [(even? n) (* n largest_divisor\
    \ (- n 1))]\n        [else (* n (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsn6ca__3.rkt:16:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpsn6ca__3.rkt:17:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsn6ca__3.rkt:18:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsn6ca__3.rkt:19:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpsn6ca__3.rkt:20:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond ((= n 1) 1)\n        ((even? n) (/ n 2))\n    \
    \    (else (+ 1 (largest_divisor (- n 1))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxayzlrtr.rkt:16:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxayzlrtr.rkt:17:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxayzlrtr.rkt:20:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) n]\n        [(even? n) (* n largest_divisor\
    \ (- n 1))]\n        [else (* n (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0he8on72.rkt:16:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0he8on72.rkt:17:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0he8on72.rkt:18:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0he8on72.rkt:19:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0he8on72.rkt:20:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) 1]\n        [(even? n) (* n largest_divisor(sub1\
    \ n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptor695vu.rkt:15:4\n\
    actual:     #<void>\nexpected:   1\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmptor695vu.rkt:16:4\nactual:\
    \     #<void>\nexpected:   1\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmptor695vu.rkt:17:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptor695vu.rkt:18:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmptor695vu.rkt:19:4\nactual:     #<void>\nexpected:   7\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond ((= n 0) 0)\n        ((even? n) (/ n 2))\n    \
    \    (else (+ 1 (largest_divisor (- n 1))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbyjzigm1.rkt:16:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbyjzigm1.rkt:17:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbyjzigm1.rkt:20:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (helper n count)\n    (if (= count 0)\n     \
    \   n\n        (helper (quotient n count) (- count 1))))\n  (helper n 0))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3ws_b1dh.rkt:18:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3ws_b1dh.rkt:19:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3ws_b1dh.rkt:20:4

    actual:     10

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3ws_b1dh.rkt:21:4

    actual:     100

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3ws_b1dh.rkt:22:4

    actual:     49

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) 1]\n        [(even? n) (* 2 n)]\n    \
    \    [else (* 3 (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfpnwinew.rkt:16:4

    actual:     12

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfpnwinew.rkt:17:4

    actual:     36

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfpnwinew.rkt:18:4

    actual:     20

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfpnwinew.rkt:19:4

    actual:     200

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfpnwinew.rkt:20:4

    actual:     288

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) 1]\n        [(even? n) (* n largest_divisor\
    \ (- n 1))]\n        [else (* n (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwi1g187u.rkt:16:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpwi1g187u.rkt:17:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwi1g187u.rkt:18:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwi1g187u.rkt:19:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpwi1g187u.rkt:20:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
- exit_code: -1
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) 1]\n        [(even? n) (/ n 2)\n     \
    \    (if (= (largest_divisor n) (/ n 2)) n (largest_divisor n))]\n        [else\
    \ (largest_divisor n)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n \
    \   (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal?\
    \ (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) n]\n        [(even? n) (* n largest_divisor(sub1\
    \ n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq2ym0e25.rkt:15:4\n\
    actual:     #<void>\nexpected:   1\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq2ym0e25.rkt:16:4\nactual:\
    \     #<void>\nexpected:   1\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpq2ym0e25.rkt:17:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq2ym0e25.rkt:18:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpq2ym0e25.rkt:19:4\nactual:     #<void>\nexpected:   7\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) n]\n        [(even? n) (largest_divisor\
    \ (- n 1))]\n        [else (+ 1 (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp33em5or1.rkt:16:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp33em5or1.rkt:17:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp33em5or1.rkt:20:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) n]\n        [(even? n) (/ n 2)]\n    \
    \    [else (largest_divisor (- n 1))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdi97pjoh.rkt:17:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdi97pjoh.rkt:20:4

    actual:     24

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (helper n count)\n    (if (= count 0)\n     \
    \   n\n        (helper (quotient n count) (- count 1))))\n  (helper n 0))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3rfhguvq.rkt:18:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3rfhguvq.rkt:19:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3rfhguvq.rkt:20:4

    actual:     10

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3rfhguvq.rkt:21:4

    actual:     100

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3rfhguvq.rkt:22:4

    actual:     49

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) n]\n        [(even? n) (/ n 2)]\n    \
    \    [else (largest_divisor (- n 1))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpilenmh_f.rkt:17:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpilenmh_f.rkt:20:4

    actual:     24

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) n]\n        [(even? n) (* n (largest_divisor\
    \ (- n 1)))]\n        [else (largest_divisor (- n 1))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm76ooymi.rkt:16:4\n\
    actual:     2\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpm76ooymi.rkt:17:4\nactual:     48\n\
    expected:   1\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpm76ooymi.rkt:18:4\nactual:     3840\nexpected:\
    \   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpm76ooymi.rkt:19:4\nactual:\n  34243224702511976248246432895208185975118675053719198827915654463488000000000000\n\
    expected:   50\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpm76ooymi.rkt:20:4\nactual:     10409396852733332453861621760000\n\
    expected:   7\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) 1]\n        [(even? n) (* n largest_divisor(sub1\
    \ n))]\n        [else (* largest_divisor(sub1 n) (* n largest_divisor(sub1 n)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt224dhnz.rkt:16:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpt224dhnz.rkt:17:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpt224dhnz.rkt:18:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt224dhnz.rkt:19:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpt224dhnz.rkt:20:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 0) 0]\n        [(even? n) (cond [(= (modulo\
    \ n 2) 0) (+ n 1)]\n                          [(= (modulo n 2) 1) (+ n 2)])]\n\
    \        [else (largest_divisor (- n 1))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpon4w940r.rkt:17:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpon4w940r.rkt:18:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpon4w940r.rkt:19:4

    actual:     11

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpon4w940r.rkt:20:4

    actual:     101

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpon4w940r.rkt:21:4

    actual:     49

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) n]\n        [(even? n) (largest_divisor\
    \ (/ n 2))]\n        [else (largest_divisor (/ n 2))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe2wzgloi.rkt:16:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe2wzgloi.rkt:17:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe2wzgloi.rkt:18:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 5/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe2wzgloi.rkt:19:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 25/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe2wzgloi.rkt:20:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) 1]\n        [(even? n) (* n largest_divisor(sub1\
    \ n))]\n        [else (* largest_divisor(sub1 n) (* n largest_divisor(sub1 n)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprya9yfv0.rkt:16:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprya9yfv0.rkt:17:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprya9yfv0.rkt:18:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprya9yfv0.rkt:19:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprya9yfv0.rkt:20:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond ((= n 1) 1)\n        ((even? n) (/ n 2))\n    \
    \    (else (+ 1 (largest_divisor (- n 1))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm5otxor3.rkt:16:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm5otxor3.rkt:17:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm5otxor3.rkt:20:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) n]\n        [(even? n) (largest_divisor\
    \ (/ n 2))]\n        [else (largest_divisor (/ n 2))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkkx4lvuc.rkt:16:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkkx4lvuc.rkt:17:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkkx4lvuc.rkt:18:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 5/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkkx4lvuc.rkt:19:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 25/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkkx4lvuc.rkt:20:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) n]\n        [(even? n) (/ n 2)]\n    \
    \    [else (largest_divisor (- n 1))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa9y1p1f1.rkt:17:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa9y1p1f1.rkt:20:4

    actual:     24

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) 1]\n        [(even? n) (* n largest_divisor(sub1\
    \ n))]\n        [else (* n (largest_divisor (sub1 n)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqi1o0x_h.rkt:16:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpqi1o0x_h.rkt:17:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqi1o0x_h.rkt:18:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqi1o0x_h.rkt:19:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpqi1o0x_h.rkt:20:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
- exit_code: -1
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) n]\n        [(even? n) (/ n 2)\n     \
    \    (if (= (largest_divisor (- n 1)) (/ n 2)) \n             (/ n 2)\n      \
    \       (largest_divisor (- n 1)))]\n        [else (largest_divisor (- n 1))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Timeout
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp30bxerjz.rkt:21:4

    actual:     1

    expected:   5

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond ((= n 1) 1)\n        ((even? n) (/ n 2))\n    \
    \    (else (+ 1 (largest_divisor (- n 1))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpubviw_lb.rkt:16:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpubviw_lb.rkt:17:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpubviw_lb.rkt:20:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (let loop ((n n) (max 0))\n    (cond ((= n 0) max)\n\
    \          ((even? n) (loop (/ n 2) max))\n          (else (loop (/ n 2) (max\
    \ n))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5cmr8s7z.rkt:17:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: 0\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp5cmr8s7z.rkt:18:4\n\napplication: not\
    \ a procedure;\n expected a procedure that can be applied to arguments\n  given:\
    \ 0\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp5cmr8s7z.rkt:19:4\n\napplication: not a procedure;\n expected\
    \ a procedure that can be applied to arguments\n  given: 0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5cmr8s7z.rkt:20:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: 0\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp5cmr8s7z.rkt:21:4\n\napplication: not\
    \ a procedure;\n expected a procedure that can be applied to arguments\n  given:\
    \ 0\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) n]\n        [(even? n) (/ n 2)]\n    \
    \    [else (largest_divisor (- n 1))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2n0g8g8i.rkt:17:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2n0g8g8i.rkt:20:4

    actual:     24

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (let loop ((n n) (max 0))\n    (cond ((= n 0) max)\n\
    \          ((even? n) (loop (/ n 2) max))\n          (else (loop (/ n 2) (max\
    \ n))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5vqz_8o3.rkt:17:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: 0\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp5vqz_8o3.rkt:18:4\n\napplication: not\
    \ a procedure;\n expected a procedure that can be applied to arguments\n  given:\
    \ 0\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp5vqz_8o3.rkt:19:4\n\napplication: not a procedure;\n expected\
    \ a procedure that can be applied to arguments\n  given: 0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5vqz_8o3.rkt:20:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: 0\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp5vqz_8o3.rkt:21:4\n\napplication: not\
    \ a procedure;\n expected a procedure that can be applied to arguments\n  given:\
    \ 0\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) n]\n        [(even? n) (largest_divisor\
    \ (- n 1))]\n        [else (+ 1 (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpc3_47mcy.rkt:16:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpc3_47mcy.rkt:17:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpc3_47mcy.rkt:20:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) n]\n        [(even? n) (largest_divisor\
    \ (/ n 2))]\n        [else (largest_divisor (/ n 2))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3k2n4zzo.rkt:16:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3k2n4zzo.rkt:17:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3k2n4zzo.rkt:18:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 5/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3k2n4zzo.rkt:19:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 25/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3k2n4zzo.rkt:20:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond ((= n 1) 1)\n        ((even? n) (/ n 2))\n    \
    \    (else (largest_divisor (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwg6m9n3o.rkt:17:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwg6m9n3o.rkt:20:4

    actual:     24

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (helper n divisor)\n    (if (= n 0)\n       \
    \ divisor\n        (helper (- n 1) (+ divisor n))))\n  (helper n 1))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpd15_gaz9.rkt:18:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpd15_gaz9.rkt:19:4

    actual:     29

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpd15_gaz9.rkt:20:4

    actual:     56

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpd15_gaz9.rkt:21:4

    actual:     5051

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpd15_gaz9.rkt:22:4

    actual:     1226

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond ((= n 0) 0)\n        ((even? n) (/ n 2))\n    \
    \    (else (+ 1 (largest_divisor (- n 1))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp43a2wpj_.rkt:16:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp43a2wpj_.rkt:17:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp43a2wpj_.rkt:20:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) n]\n        [(even? n) (* n (largest_divisor\
    \ (- n 1)))]\n        [else (largest_divisor (- n 1))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph08e1mue.rkt:16:4\n\
    actual:     2\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmph08e1mue.rkt:17:4\nactual:     48\n\
    expected:   1\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmph08e1mue.rkt:18:4\nactual:     3840\nexpected:\
    \   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmph08e1mue.rkt:19:4\nactual:\n  34243224702511976248246432895208185975118675053719198827915654463488000000000000\n\
    expected:   50\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmph08e1mue.rkt:20:4\nactual:     10409396852733332453861621760000\n\
    expected:   7\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) 1]\n        [(even? n) (* n largest_divisor(sub1\
    \ n))]\n        [else (* largest_divisor(sub1 n) (sub1 n))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsg6sa0xi.rkt:16:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpsg6sa0xi.rkt:17:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsg6sa0xi.rkt:18:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsg6sa0xi.rkt:19:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpsg6sa0xi.rkt:20:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (let loop ((n n) (max 0))\n    (if (= n 0)\n        max\n\
    \        (loop (quotient n 2) (if (even? n) (quotient n 2) max)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyc4wenpu.rkt:17:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyc4wenpu.rkt:18:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyc4wenpu.rkt:19:4

    actual:     1

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyc4wenpu.rkt:20:4

    actual:     3

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyc4wenpu.rkt:21:4

    actual:     3

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (let loop ((n n) (max 0))\n    (if (= n 0)\n        max\n\
    \        (loop (quotient n 2)\n              (if (even? n)\n                 \
    \ (if (> max n)\n                      max\n                      (loop (quotient\
    \ n 2)\n                            (quotient n 2))))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpm83v22jj.rkt:11:14: if: missing an \"else\" expression\n  in: (if\
    \ (even? n) (if (> max n) max (loop (quotient n 2) (quotient n 2))))\n  location...:\n\
    \   /tmp/tmpm83v22jj.rkt:11:14\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) n]\n        [(even? n) (/ n 2)]\n    \
    \    [else (largest_divisor (- n 1))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwg8o_ozp.rkt:17:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwg8o_ozp.rkt:20:4

    actual:     24

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond ((= n 1) 1)\n        ((even? n) (/ n 2))\n    \
    \    (else (+ 1 (largest_divisor (- n 1))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgyrbks40.rkt:16:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgyrbks40.rkt:17:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgyrbks40.rkt:20:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (let ((divisor (floor n)))\n    (cond ((= divisor n)\
    \ n)\n          ((even? divisor) (largest_divisor divisor))\n          (else (+\
    \ 1 (largest_divisor divisor)))))\n  ;; >>> largest_divisor(15)\n  ;; 5\n  )\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe0d4055c.rkt:20:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe0d4055c.rkt:21:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe0d4055c.rkt:22:4

    actual:     10

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe0d4055c.rkt:23:4

    actual:     100

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe0d4055c.rkt:24:4

    actual:     49

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) 1]\n        [(even? n) (* n largest_divisor(sub1\
    \ n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcn17lrg5.rkt:15:4\n\
    actual:     #<void>\nexpected:   1\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcn17lrg5.rkt:16:4\nactual:\
    \     #<void>\nexpected:   1\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpcn17lrg5.rkt:17:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcn17lrg5.rkt:18:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpcn17lrg5.rkt:19:4\nactual:     #<void>\nexpected:   7\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond ((= n 1) 1)\n        ((even? n) (/ n 2))\n    \
    \    (else (+ 1 (largest_divisor (- n 1))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzorqydsn.rkt:16:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzorqydsn.rkt:17:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzorqydsn.rkt:20:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) 1]\n        [(even? n) (* n largest_divisor\
    \ (- n 1))]\n        [else (* n (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm2a9qilg.rkt:16:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm2a9qilg.rkt:17:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpm2a9qilg.rkt:18:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm2a9qilg.rkt:19:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm2a9qilg.rkt:20:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) n]\n        [(even? n) (/ n 2)]\n    \
    \    [else (largest_divisor (- n 1))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9u7klr_z.rkt:17:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9u7klr_z.rkt:20:4

    actual:     24

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond ((= n 1) 1)\n        ((even? n) (/ n 2))\n    \
    \    (else (largest_divisor (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mdv36aw.rkt:17:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mdv36aw.rkt:20:4

    actual:     24

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond ((= n 1) 1)\n        ((even? n) (largest_divisor\
    \ (- n 1)))\n        (else (+ 1 (largest_divisor (- n 1))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmm5nwkhp.rkt:16:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmm5nwkhp.rkt:17:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmm5nwkhp.rkt:20:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (let loop ((n n) (divisor 1))\n    (if (= n 0)\n    \
    \    divisor\n        (loop (quotient n divisor) (+ divisor 1)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxlgbc2sc.rkt:17:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxlgbc2sc.rkt:18:4

    actual:     5

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxlgbc2sc.rkt:20:4

    actual:     6

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxlgbc2sc.rkt:21:4

    actual:     6

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond ((= n 1) 1)\n        ((even? n) (/ n 2))\n    \
    \    (else (+ 1 (largest_divisor (- n 1))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6_p6odxp.rkt:16:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6_p6odxp.rkt:17:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6_p6odxp.rkt:20:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (helper n count)\n    (if (= count 0)\n     \
    \   n\n        (helper (quotient n count) (- count 1))))\n  (helper n 0))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpg7mrqzas.rkt:18:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpg7mrqzas.rkt:19:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpg7mrqzas.rkt:20:4

    actual:     10

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpg7mrqzas.rkt:21:4

    actual:     100

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpg7mrqzas.rkt:22:4

    actual:     49

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond ((= n 0) 0)\n        ((even? n) (/ n 2))\n    \
    \    (else (+ 1 (largest_divisor (- n 1))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp19iwyzut.rkt:16:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp19iwyzut.rkt:17:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp19iwyzut.rkt:20:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond ((= n 1) 1)\n        ((even? n) (largest_divisor\
    \ (- n 1)))\n        (else (+ 1 (largest_divisor (- n 1))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe1id9yqy.rkt:16:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe1id9yqy.rkt:17:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe1id9yqy.rkt:20:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) 1]\n        [(even? n) (* 2 n)]\n    \
    \    [else (+ 1 (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpc2k9p_77.rkt:16:4

    actual:     5

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpc2k9p_77.rkt:17:4

    actual:     13

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpc2k9p_77.rkt:18:4

    actual:     20

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpc2k9p_77.rkt:19:4

    actual:     200

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpc2k9p_77.rkt:20:4

    actual:     97

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) n]\n        [(even? n) (largest_divisor\
    \ (- n 1))]\n        [else (+ 1 (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo9gbwkt3.rkt:16:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo9gbwkt3.rkt:17:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo9gbwkt3.rkt:20:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) n]\n        [(even? n) (largest_divisor\
    \ (/ n 2))]\n        [else (largest_divisor (/ n 2))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps8t1oo8z.rkt:16:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps8t1oo8z.rkt:17:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps8t1oo8z.rkt:18:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 5/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps8t1oo8z.rkt:19:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 25/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps8t1oo8z.rkt:20:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond ((= n 1) 1)\n        ((even? n) (/ n 2))\n    \
    \    (else (+ 1 (largest_divisor (- n 1))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpejnrbtjh.rkt:16:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpejnrbtjh.rkt:17:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpejnrbtjh.rkt:20:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (helper n count)\n    (if (= n 1)\n        count\n\
    \        (helper (quotient n 2) (+ count 1))))\n  (helper n 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmcgvhqo8.rkt:19:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmcgvhqo8.rkt:20:4

    actual:     3

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmcgvhqo8.rkt:21:4

    actual:     6

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmcgvhqo8.rkt:22:4

    actual:     5

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (let loop ((n n) (divisor 1))\n    (cond ((= n 1) divisor)\n\
    \          ((even? n) (loop (/ n 2) divisor))\n          (else (loop (/ n 2) (+\
    \ divisor 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuhra5kyz.rkt:17:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuhra5kyz.rkt:18:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuhra5kyz.rkt:19:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 5/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuhra5kyz.rkt:20:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 25/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuhra5kyz.rkt:21:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (helper n count)\n    (if (= n 0)\n        count\n\
    \        (helper (quotient n count) (+ count 1))))\n  (helper n 0))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpdgpl34c2.rkt:18:4


    quotient: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpdgpl34c2.rkt:19:4


    quotient: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpdgpl34c2.rkt:20:4


    quotient: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpdgpl34c2.rkt:21:4


    quotient: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpdgpl34c2.rkt:22:4


    quotient: division by zero

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) n]\n        [(even? n) (largest_divisor\
    \ (- n 1))]\n        [else (+ 1 (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp86aj59gw.rkt:16:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp86aj59gw.rkt:17:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp86aj59gw.rkt:20:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (helper n divisor)\n    (if (= n 0)\n       \
    \ divisor\n        (helper (- n 1) (if (even? n) (/ n divisor) (* divisor n))))\n\
    \  (helper n 1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp1nkhqv_x.rkt:6:0: read-syntax: expected a `)` to close `(`\n  possible\
    \ cause: indentation suggests a missing `)` before line 13\n  context...:\n  \
    \ /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (let loop ((n n) (divisor 1))\n    (cond ((= n 1) divisor)\n\
    \          ((even? n) (loop (/ n 2) divisor))\n          (else (loop (/ n 2) (+\
    \ divisor 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxqmq0vap.rkt:17:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxqmq0vap.rkt:18:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxqmq0vap.rkt:19:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 5/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxqmq0vap.rkt:20:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 25/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxqmq0vap.rkt:21:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) n]\n        [(even? n) (largest_divisor\
    \ (/ n 2))]\n        [else (largest_divisor (/ n 2))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf___sad5.rkt:16:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf___sad5.rkt:17:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf___sad5.rkt:18:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 5/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf___sad5.rkt:19:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 25/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf___sad5.rkt:20:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond ((= n 0) 0)\n        ((even? n) (largest_divisor\
    \ (- n 1)))\n        (else (+ 1 (largest_divisor (- n 1))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5__7a08v.rkt:16:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5__7a08v.rkt:17:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5__7a08v.rkt:20:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) 1]\n        [(even? n) (* n largest_divisor(sub1\
    \ n))]\n        [else (* n (largest_divisor (sub1 n)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9pgo6r4p.rkt:16:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9pgo6r4p.rkt:17:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9pgo6r4p.rkt:18:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9pgo6r4p.rkt:19:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9pgo6r4p.rkt:20:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) 1]\n        [(even? n) (* n largest_divisor(sub1\
    \ n))]\n        [else (* largest_divisor(sub1 n) (* n largest_divisor(sub1 n)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv9a3q9wn.rkt:16:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpv9a3q9wn.rkt:17:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv9a3q9wn.rkt:18:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv9a3q9wn.rkt:19:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpv9a3q9wn.rkt:20:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) 1]\n        [(even? n) (* n (largest_divisor\
    \ (- n 1)))]\n        [else (largest_divisor (- n 1))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjjkcd5s5.rkt:16:4\n\
    actual:     2\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpjjkcd5s5.rkt:17:4\nactual:     48\n\
    expected:   1\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpjjkcd5s5.rkt:18:4\nactual:     3840\nexpected:\
    \   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpjjkcd5s5.rkt:19:4\nactual:\n  34243224702511976248246432895208185975118675053719198827915654463488000000000000\n\
    expected:   50\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpjjkcd5s5.rkt:20:4\nactual:     10409396852733332453861621760000\n\
    expected:   7\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (helper n count)\n    (cond ((= n 1) count)\n\
    \          ((even? n) (helper (quotient n 2) (+ count 1)))\n          (else (helper\
    \ (quotient n 2) count))))\n  (helper n 0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzt7e2l8z.rkt:18:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzt7e2l8z.rkt:19:4

    actual:     0

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzt7e2l8z.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzt7e2l8z.rkt:21:4

    actual:     4

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzt7e2l8z.rkt:22:4

    actual:     3

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (let loop ((n n) (divisor 1))\n    (if (= n 0)\n    \
    \    divisor\n        (loop (quotient n divisor) (+ divisor 1)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplfjxc1e4.rkt:17:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplfjxc1e4.rkt:18:4

    actual:     5

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplfjxc1e4.rkt:20:4

    actual:     6

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplfjxc1e4.rkt:21:4

    actual:     6

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond ((= n 1) 1)\n        ((even? n) (largest_divisor\
    \ (- n 1)))\n        (else (+ 1 (largest_divisor (- n 1))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6bvhdhgh.rkt:16:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6bvhdhgh.rkt:17:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6bvhdhgh.rkt:20:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) n]\n        [(even? n) (largest_divisor\
    \ (/ n 2))]\n        [else (largest_divisor (/ n 2))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0bnui4rj.rkt:16:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0bnui4rj.rkt:17:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0bnui4rj.rkt:18:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 5/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0bnui4rj.rkt:19:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 25/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0bnui4rj.rkt:20:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
- exit_code: -1
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (let loop ((n n) (divisor 1))\n    (if (= n 1)\n    \
    \    divisor\n        (loop (quotient n divisor) (+ divisor 1)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Timeout
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp30wam5hs.rkt:17:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp30wam5hs.rkt:18:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp30wam5hs.rkt:19:4

    actual:     4

    expected:   5

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) 1]\n        [(even? n) (* n (largest_divisor\
    \ (- n 1)))]\n        [else (largest_divisor (- n 1))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb22m6w59.rkt:16:4\n\
    actual:     2\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpb22m6w59.rkt:17:4\nactual:     48\n\
    expected:   1\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpb22m6w59.rkt:18:4\nactual:     3840\nexpected:\
    \   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpb22m6w59.rkt:19:4\nactual:\n  34243224702511976248246432895208185975118675053719198827915654463488000000000000\n\
    expected:   50\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpb22m6w59.rkt:20:4\nactual:     10409396852733332453861621760000\n\
    expected:   7\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond ((= n 0) 0)\n        ((even? n) (/ n 2))\n    \
    \    (else (+ 1 (largest_divisor (- n 1))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa7jtuhaf.rkt:16:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa7jtuhaf.rkt:17:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa7jtuhaf.rkt:20:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond ((= n 0) 0)\n        ((even? n) (/ n 2))\n    \
    \    (else (largest_divisor (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcbpvlj6f.rkt:17:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcbpvlj6f.rkt:20:4

    actual:     24

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (helper n count)\n    (if (= n 0)\n        count\n\
    \        (helper (quotient n count) (+ count 1))))\n  (helper n 0))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpcnxfz59u.rkt:18:4


    quotient: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpcnxfz59u.rkt:19:4


    quotient: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpcnxfz59u.rkt:20:4


    quotient: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpcnxfz59u.rkt:21:4


    quotient: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpcnxfz59u.rkt:22:4


    quotient: division by zero

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (helper n divisor)\n    (if (= n 0)\n       \
    \ divisor\n        (helper (- n 1) (+ divisor 1))))\n  (helper n 1))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4ksk96qb.rkt:18:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4ksk96qb.rkt:19:4

    actual:     8

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4ksk96qb.rkt:20:4

    actual:     11

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4ksk96qb.rkt:21:4

    actual:     101

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4ksk96qb.rkt:22:4

    actual:     50

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) 1]\n        [(even? n) (* 2 (largest_divisor\
    \ (- n 1)))]\n        [else (+ 1 (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppcfhuo89.rkt:16:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppcfhuo89.rkt:17:4

    actual:     15

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppcfhuo89.rkt:18:4

    actual:     62

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppcfhuo89.rkt:19:4

    actual:     2251799813685246

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppcfhuo89.rkt:20:4

    actual:     33554431

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: -1
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) 1]\n        [(even? n) (* n largest_divisor(sub1\
    \ n))])\n  (define (helper n result)\n    (cond [(even? n) (helper (sub1 n) (*\
    \ result n))]\n          [(odd? n) (helper (sub1 n) (+ result 1))]))\n  (helper\
    \ n 1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) n]\n        [(even? n) (largest_divisor\
    \ (- n 1))]\n        [else (+ 1 (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6i7bep2x.rkt:16:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6i7bep2x.rkt:17:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6i7bep2x.rkt:20:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (helper n count)\n    (if (= count 0)\n     \
    \   n\n        (helper (quotient n count) (- count 1))))\n  (helper n 0))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe9s8hmls.rkt:18:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe9s8hmls.rkt:19:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe9s8hmls.rkt:20:4

    actual:     10

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe9s8hmls.rkt:21:4

    actual:     100

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe9s8hmls.rkt:22:4

    actual:     49

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (let loop ((n n) (max 0))\n    (if (= n 0)\n        max\n\
    \        (loop (quotient n 2)\n               (if (even? n)\n                \
    \   (if (> max n)\n                       (max n)\n                       (loop\
    \ (quotient n 2)\n                            (quotient n 2)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpzj646bx2.rkt:6:0: read-syntax: expected a `)` to close `(`\n  possible\
    \ cause: indentation suggests a missing `)` before line 17\n  context...:\n  \
    \ /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 0) 0]\n        [(even? n) (* n largest_divisor(sub1\
    \ n))]\n        [else (* n (largest_divisor(sub1 n)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3cu113sb.rkt:16:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3cu113sb.rkt:17:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3cu113sb.rkt:18:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3cu113sb.rkt:19:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3cu113sb.rkt:20:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) 1]\n        [(even? n) (* n largest_divisor\
    \ (- n 1))]\n        [else (* n (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptbygfc_o.rkt:16:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmptbygfc_o.rkt:17:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmptbygfc_o.rkt:18:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptbygfc_o.rkt:19:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmptbygfc_o.rkt:20:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (let ((max-divisor (or (quotient n 2) 1)))\n    (cond\
    \ ((= n 1) max-divisor)\n          ((even? n) (if (> max-divisor n) (quotient\
    \ n 2) max-divisor))\n          (else (largest_divisor (- n 1))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp90r9d765.rkt:18:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp90r9d765.rkt:21:4

    actual:     24

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (let loop ((n n) (max 0))\n    (cond ((= n 0) max)\n\
    \          ((even? n) (loop (/ n 2) (max n)))\n          (else (loop (/ n 2) max)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbn4t9eu4.rkt:17:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbn4t9eu4.rkt:18:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbn4t9eu4.rkt:19:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: 0\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpbn4t9eu4.rkt:20:4\n\napplication: not\
    \ a procedure;\n expected a procedure that can be applied to arguments\n  given:\
    \ 0\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbn4t9eu4.rkt:21:4\n\neven?: contract violation\n  expected:\
    \ integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) 1]\n        [(even? n) (* 2 n)]\n    \
    \    [else (+ 1 (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsnjlhix6.rkt:16:4

    actual:     5

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsnjlhix6.rkt:17:4

    actual:     13

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsnjlhix6.rkt:18:4

    actual:     20

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsnjlhix6.rkt:19:4

    actual:     200

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsnjlhix6.rkt:20:4

    actual:     97

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) 1]\n        [(even? n) (* n largest_divisor\
    \ (- n 1))]\n        [else (* n (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsaubypbc.rkt:16:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpsaubypbc.rkt:17:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsaubypbc.rkt:18:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsaubypbc.rkt:19:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpsaubypbc.rkt:20:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) n]\n        [(even? n) (largest_divisor\
    \ (- n 1))]\n        [else (+ 1 (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp80zoxsnt.rkt:16:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp80zoxsnt.rkt:17:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp80zoxsnt.rkt:20:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) n]\n        [(even? n) (/ n 2)]\n    \
    \    [else (largest_divisor (- n 1))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdkl92jqa.rkt:17:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdkl92jqa.rkt:20:4

    actual:     24

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) n]\n        [(even? n) (* n largest_divisor(sub1\
    \ n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcwun5ady.rkt:15:4\n\
    actual:     #<void>\nexpected:   1\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcwun5ady.rkt:16:4\nactual:\
    \     #<void>\nexpected:   1\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpcwun5ady.rkt:17:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcwun5ady.rkt:18:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpcwun5ady.rkt:19:4\nactual:     #<void>\nexpected:   7\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) n]\n        [(even? n) (/ n 2)]\n    \
    \    [else (largest_divisor (- n 1))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_71ug3u8.rkt:17:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_71ug3u8.rkt:20:4

    actual:     24

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) 1]\n        [(even? n) (* n largest_divisor(sub1\
    \ n))]\n        [else (* largest_divisor(sub1 n) (sub1 n))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp237t77z9.rkt:16:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp237t77z9.rkt:17:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp237t77z9.rkt:18:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp237t77z9.rkt:19:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp237t77z9.rkt:20:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (helper n count)\n    (cond\n      [(= n 1) count]\n\
    \      [(even? n) (helper (/ n 2) (+ count 1))]\n      [else (helper (/ n 2) count)]\n\
    \    )\n  )\n  (helper n 0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmfkjcnl2.rkt:21:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmfkjcnl2.rkt:22:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmfkjcnl2.rkt:23:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 5/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmfkjcnl2.rkt:24:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 25/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmfkjcnl2.rkt:25:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) n]\n        [(even? n) (* n (largest_divisor\
    \ (- n 1)))]\n        [else (largest_divisor (- n 1))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_hniq5n3.rkt:16:4\n\
    actual:     2\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp_hniq5n3.rkt:17:4\nactual:     48\n\
    expected:   1\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmp_hniq5n3.rkt:18:4\nactual:     3840\nexpected:\
    \   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp_hniq5n3.rkt:19:4\nactual:\n  34243224702511976248246432895208185975118675053719198827915654463488000000000000\n\
    expected:   50\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp_hniq5n3.rkt:20:4\nactual:     10409396852733332453861621760000\n\
    expected:   7\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond ((= n 0) 0)\n        ((even? n) (/ n 2))\n    \
    \    (else (+ 1 (largest_divisor (- n 1))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpshk90vsy.rkt:16:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpshk90vsy.rkt:17:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpshk90vsy.rkt:20:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (let ((max-divisor (- n 1)))\n    (cond ((= n 0) 0)\n\
    \          ((even? n) (if (> max-divisor n) max-divisor n))\n          (else (largest_divisor\
    \ (- n 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfc51um15.rkt:17:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfc51um15.rkt:18:4

    actual:     6

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfc51um15.rkt:19:4

    actual:     10

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfc51um15.rkt:20:4

    actual:     100

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfc51um15.rkt:21:4

    actual:     48

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond ((= n 0) 0)\n        ((even? n) (/ n 2))\n    \
    \    (else (+ 1 (largest_divisor (- n 1))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsnmtexgz.rkt:16:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsnmtexgz.rkt:17:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsnmtexgz.rkt:20:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) n]\n        [(even? n) (* n largest_divisor\
    \ (sub1 n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa1p4q51y.rkt:15:4\n\
    actual:     #<void>\nexpected:   1\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa1p4q51y.rkt:16:4\nactual:\
    \     #<void>\nexpected:   1\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpa1p4q51y.rkt:17:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa1p4q51y.rkt:18:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpa1p4q51y.rkt:19:4\nactual:     #<void>\nexpected:   7\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) n]\n        [(even? n) (/ n 2)]\n    \
    \    [else (largest_divisor (- n 1))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp46zocy8u.rkt:17:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp46zocy8u.rkt:20:4

    actual:     24

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond ((= n 1) 1)\n        ((even? n) (/ n 2))\n    \
    \    (else (largest_divisor (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvkauwc1u.rkt:17:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvkauwc1u.rkt:20:4

    actual:     24

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond ((= n 0) 0)\n        ((even? n) (/ n 2))\n    \
    \    (else (+ 1 (largest_divisor (- n 1))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp43q33mft.rkt:16:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp43q33mft.rkt:17:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp43q33mft.rkt:20:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond ((= n 0) 0)\n        ((even? n) (/ n 2))\n    \
    \    (else (+ 1 (largest_divisor (- n 1))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp20u94q_i.rkt:16:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp20u94q_i.rkt:17:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp20u94q_i.rkt:20:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond ((= n 1) 1)\n        ((even? n) (/ n 2))\n    \
    \    (else (+ 1 (largest_divisor (- n 1))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph821oykf.rkt:16:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph821oykf.rkt:17:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph821oykf.rkt:20:4

    actual:     25

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) 1]\n        [(even? n) (* n largest_divisor(sub1\
    \ n))]\n        [else (* largest_divisor(sub1 n) (sub1 n))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_c8g4kuu.rkt:16:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_c8g4kuu.rkt:17:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_c8g4kuu.rkt:18:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_c8g4kuu.rkt:19:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_c8g4kuu.rkt:20:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 0) 0]\n        [(even? n) (cond [(= (modulo\
    \ n 2) 0) (+ n 1)] [(= (modulo n 2) 1) (+ n 2)])]\n        [else (largest_divisor\
    \ (- n 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpazhxr9g4.rkt:16:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpazhxr9g4.rkt:17:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpazhxr9g4.rkt:18:4

    actual:     11

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpazhxr9g4.rkt:19:4

    actual:     101

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpazhxr9g4.rkt:20:4

    actual:     49

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) n]\n        [(even? n) (/ n 2)]\n    \
    \    [else (largest_divisor (- n 1))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_689knrn.rkt:17:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_689knrn.rkt:20:4

    actual:     24

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (let loop ((n n) (divisor 1))\n    (cond ((= n 1) divisor)\n\
    \          ((even? n) (loop (quotient n 2) divisor))\n          (else (loop (quotient\
    \ n 2) (max divisor n))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz_8m50dp.rkt:17:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz_8m50dp.rkt:18:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz_8m50dp.rkt:20:4

    actual:     25

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz_8m50dp.rkt:21:4

    actual:     49

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) n]\n        [(even? n) (/ n 2)]\n    \
    \    [else (largest_divisor (- n 1))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpblrm6ivp.rkt:17:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpblrm6ivp.rkt:20:4

    actual:     24

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (let loop ((n n) (divisor 1))\n    (cond ((= n 1) divisor)\n\
    \          ((even? n) (loop (/ n 2) divisor))\n          (else (loop (/ n 2) (+\
    \ divisor 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjwwpka7r.rkt:17:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjwwpka7r.rkt:18:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjwwpka7r.rkt:19:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 5/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjwwpka7r.rkt:20:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 25/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjwwpka7r.rkt:21:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond ((= n 1) 1)\n        ((even? n) (/ n 2))\n    \
    \    (else (largest_divisor (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4pt_63b7.rkt:17:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4pt_63b7.rkt:20:4

    actual:     24

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) 1]\n        [(even? n) (* n largest_divisor(sub1\
    \ n))]\n        [else (* largest_divisor(sub1 n) (* n largest_divisor(sub1 n)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxuufn6i.rkt:16:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgxuufn6i.rkt:17:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxuufn6i.rkt:18:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxuufn6i.rkt:19:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgxuufn6i.rkt:20:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) 1]\n        [(even? n) (* 2 (largest_divisor\
    \ (- n 1)))]\n        [else (* 2 (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpud7uwr_u.rkt:16:4

    actual:     4

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpud7uwr_u.rkt:17:4

    actual:     64

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpud7uwr_u.rkt:18:4

    actual:     512

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpud7uwr_u.rkt:19:4

    actual:     633825300114114700748351602688

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpud7uwr_u.rkt:20:4

    actual:     281474976710656

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) 1]\n        [(even? n) (* 2 (largest_divisor\
    \ (- n 1)))]\n        [else (+ 1 (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_737lyu.rkt:16:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_737lyu.rkt:17:4

    actual:     15

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_737lyu.rkt:18:4

    actual:     62

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_737lyu.rkt:19:4

    actual:     2251799813685246

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_737lyu.rkt:20:4

    actual:     33554431

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (cond [(= n 1) 1]\n        [(even? n) (* n largest_divisor\
    \ (- n 1))]\n        [else (* n (largest_divisor (- n 1)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp7nn0niu.rkt:16:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp7nn0niu.rkt:17:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp7nn0niu.rkt:18:4\n\n*: contract\
    \ violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp7nn0niu.rkt:19:4\n\
    \n*: contract violation\n  expected: number?\n  given: #<procedure:largest_divisor>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp7nn0niu.rkt:20:4\n\n*: contract violation\n  expected: number?\n\
    \  given: #<procedure:largest_divisor>\n--------------------\n"
  stdout: ''
