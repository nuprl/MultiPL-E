language: racket
name: HumanEval_151_double_the_difference
results:
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgdaj0lnc.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgdaj0lnc.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgdaj0lnc.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgdaj0lnc.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgdaj0lnc.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprc33b9f7.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprc33b9f7.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprc33b9f7.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprc33b9f7.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprc33b9f7.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphl4hwire.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphl4hwire.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphl4hwire.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphl4hwire.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphl4hwire.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate double_the_difference))\n    (check-equal? (candidate (list ))\
    \ 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate\
    \ (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0))\
    \ 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal?\
    \ (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0\
    \ -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg_4l5od8.rkt:22:4\n\
    actual:     9.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpg_4l5od8.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg_4l5od8.rkt:25:4\n\
    actual:     -3.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpg_4l5od8.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg_4l5od8.rkt:27:4\n\
    actual:     -16.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe628o9qw.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpe628o9qw.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe628o9qw.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpe628o9qw.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe628o9qw.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeixlcndo.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpeixlcndo.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeixlcndo.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpeixlcndo.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeixlcndo.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate double_the_difference))\n    (check-equal? (candidate (list ))\
    \ 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate\
    \ (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0))\
    \ 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal?\
    \ (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0\
    \ -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmnf33ro4.rkt:22:4\n\
    actual:     9.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmnf33ro4.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmnf33ro4.rkt:25:4\n\
    actual:     -3.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmnf33ro4.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmnf33ro4.rkt:27:4\n\
    actual:     -16.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate double_the_difference))\n    (check-equal? (candidate (list ))\
    \ 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate\
    \ (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0))\
    \ 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal?\
    \ (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0\
    \ -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ljtwfaa.rkt:22:4\n\
    actual:     9.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ljtwfaa.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ljtwfaa.rkt:25:4\n\
    actual:     -3.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ljtwfaa.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ljtwfaa.rkt:27:4\n\
    actual:     -16.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpaz28ylqd.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpaz28ylqd.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpaz28ylqd.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpaz28ylqd.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpaz28ylqd.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjr5on5zv.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjr5on5zv.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjr5on5zv.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjr5on5zv.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjr5on5zv.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]\n  )\n)\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n \
    \   (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0\
    \ 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
    \ (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list\
    \ -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n \
    \   (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0))\
    \ 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph7_oza39.rkt:24:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmph7_oza39.rkt:25:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph7_oza39.rkt:27:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmph7_oza39.rkt:28:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph7_oza39.rkt:29:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt80dyayw.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpt80dyayw.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt80dyayw.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpt80dyayw.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt80dyayw.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(even? (car lst)) (+ (car lst) (double_the_difference (cdr lst)))]\n   \
    \ [else (double_the_difference (cdr lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgha0nupr.rkt:22:4\n\
    actual:     4.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgha0nupr.rkt:23:4\n\neven?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgha0nupr.rkt:24:4\n\
    actual:     -60.0\nexpected:   0\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgha0nupr.rkt:25:4\nactual:\
    \     6.0\nexpected:   0\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpgha0nupr.rkt:26:4\n\neven?: contract\
    \ violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgha0nupr.rkt:27:4\nactual:\
    \     0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxh0lwas4.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxh0lwas4.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxh0lwas4.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxh0lwas4.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxh0lwas4.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate double_the_difference))\n    (check-equal? (candidate (list ))\
    \ 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate\
    \ (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0))\
    \ 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal?\
    \ (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0\
    \ -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpskf2rlne.rkt:22:4\n\
    actual:     9.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpskf2rlne.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpskf2rlne.rkt:25:4\n\
    actual:     -3.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpskf2rlne.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpskf2rlne.rkt:27:4\n\
    actual:     -16.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate double_the_difference))\n    (check-equal? (candidate (list ))\
    \ 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate\
    \ (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0))\
    \ 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal?\
    \ (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0\
    \ -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpok_4v3my.rkt:22:4\n\
    actual:     9.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpok_4v3my.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpok_4v3my.rkt:25:4\n\
    actual:     -3.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpok_4v3my.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpok_4v3my.rkt:27:4\n\
    actual:     -16.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5_k5evn5.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp5_k5evn5.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5_k5evn5.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp5_k5evn5.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5_k5evn5.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpko6d_n4t.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpko6d_n4t.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpko6d_n4t.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpko6d_n4t.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpko6d_n4t.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond [(empty? lst) 0]\n \
    \       [(odd? (first lst)) (+ (first lst) (second lst))]\n        [else (double_the_difference\
    \ (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate double_the_difference))\n    (check-equal? (candidate (list ))\
    \ 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate\
    \ (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0))\
    \ 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal?\
    \ (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0\
    \ -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqgbkrd94.rkt:21:4\n\
    actual:     9.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqgbkrd94.rkt:22:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqgbkrd94.rkt:24:4\n\
    actual:     -3.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqgbkrd94.rkt:25:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqgbkrd94.rkt:26:4\n\
    actual:     -16.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]\n  )\n)\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n \
    \   (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0\
    \ 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
    \ (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list\
    \ -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n \
    \   (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0))\
    \ 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpirl0_mav.rkt:24:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpirl0_mav.rkt:25:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpirl0_mav.rkt:27:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpirl0_mav.rkt:28:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpirl0_mav.rkt:29:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx5eim_ud.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpx5eim_ud.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx5eim_ud.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpx5eim_ud.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx5eim_ud.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7kkx7lcj.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7kkx7lcj.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7kkx7lcj.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7kkx7lcj.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7kkx7lcj.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(even? (car lst)) (+ (square (car lst)) (double_the_difference (cdr lst)))]\n\
    \    [else (double_the_difference (cdr lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "/tmp/tmplsw_ylp5.rkt:13:27: square: unbound identifier\n  in: square\n\
    \  location...:\n   /tmp/tmplsw_ylp5.rkt:13:27\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate double_the_difference))\n    (check-equal? (candidate (list ))\
    \ 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate\
    \ (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0))\
    \ 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal?\
    \ (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0\
    \ -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0d34i76k.rkt:22:4\n\
    actual:     9.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0d34i76k.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0d34i76k.rkt:25:4\n\
    actual:     -3.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0d34i76k.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0d34i76k.rkt:27:4\n\
    actual:     -16.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp21vyor59.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp21vyor59.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp21vyor59.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp21vyor59.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp21vyor59.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(number? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (+ (first lst) (double_the_difference (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n \
    \   (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0\
    \ 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
    \ (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list\
    \ -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n \
    \   (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0))\
    \ 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprxpjy8ji.rkt:22:4

    actual:     9.0

    expected:   25

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprxpjy8ji.rkt:23:4

    actual:     0.6

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprxpjy8ji.rkt:24:4

    actual:     -60.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprxpjy8ji.rkt:25:4

    actual:     5.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprxpjy8ji.rkt:26:4

    actual:     8.2

    expected:   34

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprxpjy8ji.rkt:27:4

    actual:     0.0

    expected:   165

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(even? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (+ (first lst) (double_the_difference (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n \
    \   (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0\
    \ 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
    \ (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list\
    \ -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n \
    \   (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0))\
    \ 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb7l8b45v.rkt:22:4\n\
    actual:     9.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpb7l8b45v.rkt:23:4\n\neven?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb7l8b45v.rkt:24:4\n\
    actual:     -60.0\nexpected:   0\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb7l8b45v.rkt:25:4\nactual:\
    \     5.0\nexpected:   0\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpb7l8b45v.rkt:26:4\n\neven?: contract\
    \ violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb7l8b45v.rkt:27:4\nactual:\
    \     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5wpmamqv.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp5wpmamqv.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5wpmamqv.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp5wpmamqv.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5wpmamqv.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ufy5e20.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ufy5e20.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ufy5e20.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ufy5e20.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ufy5e20.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate double_the_difference))\n    (check-equal? (candidate (list ))\
    \ 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate\
    \ (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0))\
    \ 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal?\
    \ (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0\
    \ -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsm95sl_l.rkt:22:4\n\
    actual:     9.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsm95sl_l.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsm95sl_l.rkt:25:4\n\
    actual:     -3.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsm95sl_l.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsm95sl_l.rkt:27:4\n\
    actual:     -16.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn20xn0k2.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpn20xn0k2.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn20xn0k2.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpn20xn0k2.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn20xn0k2.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb5_5gm9h.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpb5_5gm9h.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb5_5gm9h.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpb5_5gm9h.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb5_5gm9h.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgo_f3sgc.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgo_f3sgc.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgo_f3sgc.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgo_f3sgc.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgo_f3sgc.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprtc67ap1.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprtc67ap1.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprtc67ap1.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprtc67ap1.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprtc67ap1.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(number? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (+ (first lst) (double_the_difference (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n \
    \   (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0\
    \ 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
    \ (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list\
    \ -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n \
    \   (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0))\
    \ 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvj27kl4c.rkt:22:4

    actual:     9.0

    expected:   25

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvj27kl4c.rkt:23:4

    actual:     0.6

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvj27kl4c.rkt:24:4

    actual:     -60.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvj27kl4c.rkt:25:4

    actual:     5.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvj27kl4c.rkt:26:4

    actual:     8.2

    expected:   34

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvj27kl4c.rkt:27:4

    actual:     0.0

    expected:   165

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb2avx3kg.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpb2avx3kg.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb2avx3kg.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpb2avx3kg.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb2avx3kg.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx0vas27l.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpx0vas27l.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx0vas27l.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpx0vas27l.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx0vas27l.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(even? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (+ (first lst) (double_the_difference (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n \
    \   (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0\
    \ 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
    \ (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list\
    \ -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n \
    \   (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0))\
    \ 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9vn_0pi5.rkt:22:4\n\
    actual:     9.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9vn_0pi5.rkt:23:4\n\neven?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9vn_0pi5.rkt:24:4\n\
    actual:     -60.0\nexpected:   0\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9vn_0pi5.rkt:25:4\nactual:\
    \     5.0\nexpected:   0\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp9vn_0pi5.rkt:26:4\n\neven?: contract\
    \ violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9vn_0pi5.rkt:27:4\nactual:\
    \     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(number? (car lst)) (+ (square (car lst)) (double_the_difference (cdr lst)))]\n\
    \    [else (double_the_difference (cdr lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp23vv0ldh.rkt:13:29: square: unbound identifier\n  in: square\n\
    \  location...:\n   /tmp/tmp23vv0ldh.rkt:13:29\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6_yl58uq.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6_yl58uq.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6_yl58uq.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6_yl58uq.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6_yl58uq.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate double_the_difference))\n    (check-equal? (candidate (list ))\
    \ 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate\
    \ (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0))\
    \ 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal?\
    \ (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0\
    \ -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxfmzkthq.rkt:22:4\n\
    actual:     9.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxfmzkthq.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxfmzkthq.rkt:25:4\n\
    actual:     -3.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxfmzkthq.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxfmzkthq.rkt:27:4\n\
    actual:     -16.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(number? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (+ (first lst) (double_the_difference (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n \
    \   (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0\
    \ 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
    \ (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list\
    \ -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n \
    \   (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0))\
    \ 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprjj689sw.rkt:22:4

    actual:     9.0

    expected:   25

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprjj689sw.rkt:23:4

    actual:     0.6

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprjj689sw.rkt:24:4

    actual:     -60.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprjj689sw.rkt:25:4

    actual:     5.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprjj689sw.rkt:26:4

    actual:     8.2

    expected:   34

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprjj689sw.rkt:27:4

    actual:     0.0

    expected:   165

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]\n  ))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n   \
    \ (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0\
    \ 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
    \ (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list\
    \ -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n \
    \   (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0))\
    \ 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwsslt_fe.rkt:23:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwsslt_fe.rkt:24:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwsslt_fe.rkt:26:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwsslt_fe.rkt:27:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwsslt_fe.rkt:28:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph8bo712y.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmph8bo712y.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph8bo712y.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmph8bo712y.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph8bo712y.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate double_the_difference))\n    (check-equal? (candidate (list ))\
    \ 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate\
    \ (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0))\
    \ 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal?\
    \ (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0\
    \ -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp03c012ow.rkt:22:4\n\
    actual:     9.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp03c012ow.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp03c012ow.rkt:25:4\n\
    actual:     -3.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp03c012ow.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp03c012ow.rkt:27:4\n\
    actual:     -16.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbh6gvljt.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbh6gvljt.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbh6gvljt.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbh6gvljt.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbh6gvljt.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwdfh1nkk.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwdfh1nkk.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwdfh1nkk.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwdfh1nkk.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwdfh1nkk.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate double_the_difference))\n    (check-equal? (candidate (list ))\
    \ 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate\
    \ (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0))\
    \ 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal?\
    \ (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0\
    \ -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu8a66atc.rkt:22:4\n\
    actual:     9.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpu8a66atc.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu8a66atc.rkt:25:4\n\
    actual:     -3.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpu8a66atc.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu8a66atc.rkt:27:4\n\
    actual:     -16.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]\n  )\n)\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n \
    \   (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0\
    \ 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
    \ (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list\
    \ -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n \
    \   (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0))\
    \ 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0pidrp3n.rkt:24:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0pidrp3n.rkt:25:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0pidrp3n.rkt:27:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0pidrp3n.rkt:28:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0pidrp3n.rkt:29:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsjoxuier.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsjoxuier.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsjoxuier.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsjoxuier.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsjoxuier.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppfo1dhbf.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppfo1dhbf.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppfo1dhbf.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppfo1dhbf.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppfo1dhbf.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5bp8k8c1.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp5bp8k8c1.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5bp8k8c1.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp5bp8k8c1.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5bp8k8c1.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb9c72t8j.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpb9c72t8j.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb9c72t8j.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpb9c72t8j.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb9c72t8j.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzqpeu7kt.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzqpeu7kt.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzqpeu7kt.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzqpeu7kt.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzqpeu7kt.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb2ec1wb9.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpb2ec1wb9.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb2ec1wb9.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpb2ec1wb9.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb2ec1wb9.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5mzjw8hi.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp5mzjw8hi.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5mzjw8hi.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp5mzjw8hi.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5mzjw8hi.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx0zayh1c.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpx0zayh1c.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx0zayh1c.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpx0zayh1c.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx0zayh1c.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp767nc83n.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp767nc83n.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp767nc83n.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp767nc83n.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp767nc83n.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2rdbudhq.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2rdbudhq.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2rdbudhq.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2rdbudhq.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2rdbudhq.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiyr5s4w1.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpiyr5s4w1.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiyr5s4w1.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpiyr5s4w1.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiyr5s4w1.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpham7j2eo.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpham7j2eo.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpham7j2eo.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpham7j2eo.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpham7j2eo.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp41pl6jx_.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp41pl6jx_.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp41pl6jx_.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp41pl6jx_.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp41pl6jx_.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond [(empty? lst) 0]\n \
    \       [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \        [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n   \
    \ (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0\
    \ 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
    \ (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list\
    \ -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n \
    \   (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0))\
    \ 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa7f8gjmd.rkt:21:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpa7f8gjmd.rkt:22:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa7f8gjmd.rkt:24:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpa7f8gjmd.rkt:25:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa7f8gjmd.rkt:26:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(number? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (+ (first lst) (double_the_difference (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n \
    \   (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0\
    \ 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
    \ (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list\
    \ -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n \
    \   (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0))\
    \ 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpirihur6y.rkt:22:4

    actual:     9.0

    expected:   25

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpirihur6y.rkt:23:4

    actual:     0.6

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpirihur6y.rkt:24:4

    actual:     -60.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpirihur6y.rkt:25:4

    actual:     5.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpirihur6y.rkt:26:4

    actual:     8.2

    expected:   34

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpirihur6y.rkt:27:4

    actual:     0.0

    expected:   165

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphtj2qz5e.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphtj2qz5e.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphtj2qz5e.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphtj2qz5e.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphtj2qz5e.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjcikltf6.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjcikltf6.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjcikltf6.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjcikltf6.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjcikltf6.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnw9q1v8q.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpnw9q1v8q.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnw9q1v8q.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpnw9q1v8q.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnw9q1v8q.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(number? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (+ (first lst) (double_the_difference (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n \
    \   (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0\
    \ 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
    \ (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list\
    \ -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n \
    \   (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0))\
    \ 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzpdkt0ua.rkt:22:4

    actual:     9.0

    expected:   25

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzpdkt0ua.rkt:23:4

    actual:     0.6

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzpdkt0ua.rkt:24:4

    actual:     -60.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzpdkt0ua.rkt:25:4

    actual:     5.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzpdkt0ua.rkt:26:4

    actual:     8.2

    expected:   34

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzpdkt0ua.rkt:27:4

    actual:     0.0

    expected:   165

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg8yv86u6.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpg8yv86u6.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg8yv86u6.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpg8yv86u6.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg8yv86u6.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcgfucenf.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcgfucenf.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcgfucenf.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcgfucenf.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcgfucenf.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcftq6__6.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcftq6__6.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcftq6__6.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcftq6__6.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcftq6__6.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6gmu1nu3.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6gmu1nu3.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6gmu1nu3.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6gmu1nu3.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6gmu1nu3.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate double_the_difference))\n    (check-equal? (candidate (list ))\
    \ 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate\
    \ (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0))\
    \ 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal?\
    \ (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0\
    \ -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4y3xbdj_.rkt:22:4\n\
    actual:     9.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4y3xbdj_.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4y3xbdj_.rkt:25:4\n\
    actual:     -3.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4y3xbdj_.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4y3xbdj_.rkt:27:4\n\
    actual:     -16.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]\n  ))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n   \
    \ (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0\
    \ 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
    \ (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list\
    \ -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n \
    \   (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0))\
    \ 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqamjysiw.rkt:23:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqamjysiw.rkt:24:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqamjysiw.rkt:26:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqamjysiw.rkt:27:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqamjysiw.rkt:28:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl3aevqqn.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpl3aevqqn.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl3aevqqn.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpl3aevqqn.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl3aevqqn.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(number? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (+ (first lst) (double_the_difference (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n \
    \   (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0\
    \ 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
    \ (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list\
    \ -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n \
    \   (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0))\
    \ 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_cgvkmsv.rkt:22:4

    actual:     9.0

    expected:   25

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_cgvkmsv.rkt:23:4

    actual:     0.6

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_cgvkmsv.rkt:24:4

    actual:     -60.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_cgvkmsv.rkt:25:4

    actual:     5.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_cgvkmsv.rkt:26:4

    actual:     8.2

    expected:   34

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_cgvkmsv.rkt:27:4

    actual:     0.0

    expected:   165

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwxrpvhul.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwxrpvhul.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwxrpvhul.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwxrpvhul.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwxrpvhul.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(number? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (+ (first lst) (double_the_difference (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n \
    \   (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0\
    \ 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
    \ (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list\
    \ -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n \
    \   (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0))\
    \ 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvx5emzdm.rkt:22:4

    actual:     9.0

    expected:   25

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvx5emzdm.rkt:23:4

    actual:     0.6

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvx5emzdm.rkt:24:4

    actual:     -60.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvx5emzdm.rkt:25:4

    actual:     5.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvx5emzdm.rkt:26:4

    actual:     8.2

    expected:   34

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvx5emzdm.rkt:27:4

    actual:     0.0

    expected:   165

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnvlui0bi.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpnvlui0bi.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnvlui0bi.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpnvlui0bi.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnvlui0bi.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_hh46al.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_hh46al.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_hh46al.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_hh46al.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_hh46al.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf38kncxe.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpf38kncxe.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf38kncxe.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpf38kncxe.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf38kncxe.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkfqfj7g3.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkfqfj7g3.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkfqfj7g3.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkfqfj7g3.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkfqfj7g3.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxlifdg2l.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxlifdg2l.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxlifdg2l.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxlifdg2l.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxlifdg2l.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8eko92nl.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8eko92nl.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8eko92nl.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8eko92nl.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8eko92nl.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps0dj0sx9.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmps0dj0sx9.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps0dj0sx9.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmps0dj0sx9.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps0dj0sx9.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpks757gvh.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpks757gvh.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpks757gvh.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpks757gvh.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpks757gvh.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi08eouhe.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpi08eouhe.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi08eouhe.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpi08eouhe.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi08eouhe.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]\n  )\n)\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n \
    \   (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0\
    \ 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
    \ (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list\
    \ -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n \
    \   (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0))\
    \ 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp880kyd1k.rkt:24:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp880kyd1k.rkt:25:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp880kyd1k.rkt:27:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp880kyd1k.rkt:28:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp880kyd1k.rkt:29:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu9wbqzh6.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpu9wbqzh6.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu9wbqzh6.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpu9wbqzh6.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu9wbqzh6.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkvp34cdh.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkvp34cdh.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkvp34cdh.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkvp34cdh.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkvp34cdh.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo5nj1kt5.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo5nj1kt5.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo5nj1kt5.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo5nj1kt5.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo5nj1kt5.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmlfonzc3.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmlfonzc3.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmlfonzc3.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmlfonzc3.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmlfonzc3.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkrftka7s.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkrftka7s.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkrftka7s.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkrftka7s.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkrftka7s.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(number? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (+ (first lst) (double_the_difference (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n \
    \   (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0\
    \ 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
    \ (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list\
    \ -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n \
    \   (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0))\
    \ 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvbbrudzm.rkt:22:4

    actual:     9.0

    expected:   25

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvbbrudzm.rkt:23:4

    actual:     0.6

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvbbrudzm.rkt:24:4

    actual:     -60.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvbbrudzm.rkt:25:4

    actual:     5.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvbbrudzm.rkt:26:4

    actual:     8.2

    expected:   34

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvbbrudzm.rkt:27:4

    actual:     0.0

    expected:   165

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphg07szq2.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphg07szq2.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphg07szq2.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphg07szq2.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphg07szq2.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprwmi5o8h.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprwmi5o8h.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprwmi5o8h.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprwmi5o8h.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprwmi5o8h.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(number? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (+ (first lst) (double_the_difference (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n \
    \   (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0\
    \ 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
    \ (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list\
    \ -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n \
    \   (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0))\
    \ 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3453qg8y.rkt:22:4

    actual:     9.0

    expected:   25

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3453qg8y.rkt:23:4

    actual:     0.6

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3453qg8y.rkt:24:4

    actual:     -60.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3453qg8y.rkt:25:4

    actual:     5.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3453qg8y.rkt:26:4

    actual:     8.2

    expected:   34

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3453qg8y.rkt:27:4

    actual:     0.0

    expected:   165

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd2769ezd.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpd2769ezd.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd2769ezd.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpd2769ezd.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd2769ezd.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkzkto4ni.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkzkto4ni.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkzkto4ni.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkzkto4ni.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkzkto4ni.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(number? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (+ (first lst) (double_the_difference (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n \
    \   (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0\
    \ 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
    \ (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list\
    \ -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n \
    \   (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0))\
    \ 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpemyo3mrm.rkt:22:4

    actual:     9.0

    expected:   25

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpemyo3mrm.rkt:23:4

    actual:     0.6

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpemyo3mrm.rkt:24:4

    actual:     -60.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpemyo3mrm.rkt:25:4

    actual:     5.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpemyo3mrm.rkt:26:4

    actual:     8.2

    expected:   34

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpemyo3mrm.rkt:27:4

    actual:     0.0

    expected:   165

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(number? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (+ (first lst) (double_the_difference (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n \
    \   (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0\
    \ 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
    \ (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list\
    \ -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n \
    \   (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0))\
    \ 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoittzch5.rkt:22:4

    actual:     9.0

    expected:   25

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoittzch5.rkt:23:4

    actual:     0.6

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoittzch5.rkt:24:4

    actual:     -60.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoittzch5.rkt:25:4

    actual:     5.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoittzch5.rkt:26:4

    actual:     8.2

    expected:   34

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoittzch5.rkt:27:4

    actual:     0.0

    expected:   165

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(number? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (+ (first lst) (double_the_difference (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n \
    \   (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0\
    \ 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
    \ (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list\
    \ -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n \
    \   (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0))\
    \ 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkxvdhbb3.rkt:22:4

    actual:     9.0

    expected:   25

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkxvdhbb3.rkt:23:4

    actual:     0.6

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkxvdhbb3.rkt:24:4

    actual:     -60.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkxvdhbb3.rkt:25:4

    actual:     5.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkxvdhbb3.rkt:26:4

    actual:     8.2

    expected:   34

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkxvdhbb3.rkt:27:4

    actual:     0.0

    expected:   165

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzj07eikx.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzj07eikx.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzj07eikx.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzj07eikx.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzj07eikx.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8pb14qmk.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8pb14qmk.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8pb14qmk.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8pb14qmk.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8pb14qmk.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1ak695tf.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1ak695tf.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1ak695tf.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1ak695tf.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1ak695tf.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(number? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (+ (first lst) (double_the_difference (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n \
    \   (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0\
    \ 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
    \ (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list\
    \ -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n \
    \   (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0))\
    \ 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp81dyx51x.rkt:22:4

    actual:     9.0

    expected:   25

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp81dyx51x.rkt:23:4

    actual:     0.6

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp81dyx51x.rkt:24:4

    actual:     -60.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp81dyx51x.rkt:25:4

    actual:     5.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp81dyx51x.rkt:26:4

    actual:     8.2

    expected:   34

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp81dyx51x.rkt:27:4

    actual:     0.0

    expected:   165

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2xrj8t_i.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2xrj8t_i.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2xrj8t_i.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2xrj8t_i.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2xrj8t_i.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpslc21uht.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpslc21uht.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpslc21uht.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpslc21uht.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpslc21uht.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate double_the_difference))\n    (check-equal? (candidate (list ))\
    \ 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate\
    \ (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0))\
    \ 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal?\
    \ (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0\
    \ -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4s4tk65d.rkt:22:4\n\
    actual:     9.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4s4tk65d.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4s4tk65d.rkt:25:4\n\
    actual:     -3.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4s4tk65d.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4s4tk65d.rkt:27:4\n\
    actual:     -16.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate double_the_difference))\n    (check-equal? (candidate (list ))\
    \ 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate\
    \ (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0))\
    \ 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal?\
    \ (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0\
    \ -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx66gjl4o.rkt:22:4\n\
    actual:     9.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpx66gjl4o.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx66gjl4o.rkt:25:4\n\
    actual:     -3.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpx66gjl4o.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx66gjl4o.rkt:27:4\n\
    actual:     -16.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0ddemizo.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ddemizo.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0ddemizo.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ddemizo.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0ddemizo.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond [(empty? lst) 0]\n \
    \       [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \        [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n   \
    \ (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0\
    \ 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
    \ (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list\
    \ -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n \
    \   (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0))\
    \ 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqt800w6e.rkt:21:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqt800w6e.rkt:22:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqt800w6e.rkt:24:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqt800w6e.rkt:25:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqt800w6e.rkt:26:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppdzdzzdq.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppdzdzzdq.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppdzdzzdq.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppdzdzzdq.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppdzdzzdq.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo3vem1vf.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo3vem1vf.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo3vem1vf.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo3vem1vf.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo3vem1vf.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7l5j0gxa.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7l5j0gxa.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7l5j0gxa.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7l5j0gxa.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7l5j0gxa.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjms59_bj.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjms59_bj.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjms59_bj.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjms59_bj.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjms59_bj.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa7qgrp20.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpa7qgrp20.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa7qgrp20.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpa7qgrp20.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa7qgrp20.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyr15ejzm.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyr15ejzm.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyr15ejzm.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyr15ejzm.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyr15ejzm.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5pq_ehvq.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp5pq_ehvq.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5pq_ehvq.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp5pq_ehvq.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5pq_ehvq.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7txp4h20.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7txp4h20.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7txp4h20.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7txp4h20.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7txp4h20.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond [(empty? lst) 0]\n \
    \       [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \        [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n   \
    \ (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0\
    \ 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
    \ (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list\
    \ -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n \
    \   (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0))\
    \ 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpih3dltd8.rkt:21:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpih3dltd8.rkt:22:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpih3dltd8.rkt:24:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpih3dltd8.rkt:25:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpih3dltd8.rkt:26:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(number? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (+ (first lst) (double_the_difference (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n \
    \   (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0\
    \ 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
    \ (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list\
    \ -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n \
    \   (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0))\
    \ 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplgbbiks6.rkt:22:4

    actual:     9.0

    expected:   25

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplgbbiks6.rkt:23:4

    actual:     0.6

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplgbbiks6.rkt:24:4

    actual:     -60.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplgbbiks6.rkt:25:4

    actual:     5.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplgbbiks6.rkt:26:4

    actual:     8.2

    expected:   34

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplgbbiks6.rkt:27:4

    actual:     0.0

    expected:   165

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp55x7tslu.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp55x7tslu.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp55x7tslu.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp55x7tslu.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp55x7tslu.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]\n  )\n)\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n \
    \   (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0\
    \ 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
    \ (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list\
    \ -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n \
    \   (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0))\
    \ 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbwj2khtd.rkt:24:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbwj2khtd.rkt:25:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbwj2khtd.rkt:27:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbwj2khtd.rkt:28:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbwj2khtd.rkt:29:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiyxfegzs.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpiyxfegzs.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiyxfegzs.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpiyxfegzs.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiyxfegzs.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(even? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (+ (first lst) (double_the_difference (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n \
    \   (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0\
    \ 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
    \ (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list\
    \ -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n \
    \   (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0))\
    \ 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa8l3vhaw.rkt:22:4\n\
    actual:     9.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpa8l3vhaw.rkt:23:4\n\neven?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa8l3vhaw.rkt:24:4\n\
    actual:     -60.0\nexpected:   0\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa8l3vhaw.rkt:25:4\nactual:\
    \     5.0\nexpected:   0\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpa8l3vhaw.rkt:26:4\n\neven?: contract\
    \ violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa8l3vhaw.rkt:27:4\nactual:\
    \     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp38jkyjz3.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp38jkyjz3.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp38jkyjz3.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp38jkyjz3.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp38jkyjz3.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn80i3j3c.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpn80i3j3c.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn80i3j3c.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpn80i3j3c.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn80i3j3c.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv3p_agfx.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv3p_agfx.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv3p_agfx.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv3p_agfx.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv3p_agfx.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbyqi5xq_.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbyqi5xq_.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbyqi5xq_.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbyqi5xq_.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbyqi5xq_.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1j9v51md.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1j9v51md.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1j9v51md.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1j9v51md.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1j9v51md.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb4p72qck.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpb4p72qck.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb4p72qck.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpb4p72qck.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb4p72qck.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpufoht805.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpufoht805.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpufoht805.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpufoht805.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpufoht805.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcbu8rd4z.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcbu8rd4z.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcbu8rd4z.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcbu8rd4z.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcbu8rd4z.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqy420z8k.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqy420z8k.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqy420z8k.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqy420z8k.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqy420z8k.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd_lck9j_.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpd_lck9j_.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd_lck9j_.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpd_lck9j_.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd_lck9j_.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo0og93bg.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo0og93bg.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo0og93bg.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo0og93bg.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo0og93bg.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgb3utm1s.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgb3utm1s.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgb3utm1s.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgb3utm1s.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgb3utm1s.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp36jb_8gk.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp36jb_8gk.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp36jb_8gk.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp36jb_8gk.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp36jb_8gk.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc6n68kee.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpc6n68kee.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc6n68kee.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpc6n68kee.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc6n68kee.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcghm8rt0.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcghm8rt0.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcghm8rt0.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcghm8rt0.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcghm8rt0.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpufwtx33b.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpufwtx33b.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpufwtx33b.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpufwtx33b.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpufwtx33b.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(number? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (+ (first lst) (double_the_difference (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n \
    \   (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0\
    \ 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
    \ (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list\
    \ -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n \
    \   (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0))\
    \ 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbde32a13.rkt:22:4

    actual:     9.0

    expected:   25

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbde32a13.rkt:23:4

    actual:     0.6

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbde32a13.rkt:24:4

    actual:     -60.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbde32a13.rkt:25:4

    actual:     5.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbde32a13.rkt:26:4

    actual:     8.2

    expected:   34

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbde32a13.rkt:27:4

    actual:     0.0

    expected:   165

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]\n  ))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n   \
    \ (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0\
    \ 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
    \ (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list\
    \ -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n \
    \   (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0))\
    \ 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzndofl8g.rkt:23:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzndofl8g.rkt:24:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzndofl8g.rkt:26:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzndofl8g.rkt:27:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzndofl8g.rkt:28:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate double_the_difference))\n    (check-equal? (candidate (list ))\
    \ 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate\
    \ (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0))\
    \ 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal?\
    \ (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0\
    \ -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvl146ld8.rkt:22:4\n\
    actual:     9.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvl146ld8.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvl146ld8.rkt:25:4\n\
    actual:     -3.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvl146ld8.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvl146ld8.rkt:27:4\n\
    actual:     -16.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6ojx0eil.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6ojx0eil.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6ojx0eil.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6ojx0eil.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6ojx0eil.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopufsl0d.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpopufsl0d.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopufsl0d.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpopufsl0d.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopufsl0d.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp704fh_v6.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp704fh_v6.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp704fh_v6.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp704fh_v6.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp704fh_v6.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9h674xaf.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9h674xaf.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9h674xaf.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9h674xaf.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9h674xaf.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfpepq2_h.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfpepq2_h.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfpepq2_h.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfpepq2_h.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfpepq2_h.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(number? (car lst)) (+ (square (car lst)) (double_the_difference (cdr lst)))]\n\
    \    [else (double_the_difference (cdr lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp1yobt23z.rkt:13:29: square: unbound identifier\n  in: square\n\
    \  location...:\n   /tmp/tmp1yobt23z.rkt:13:29\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(number? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (+ (first lst) (double_the_difference (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n \
    \   (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0\
    \ 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
    \ (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list\
    \ -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n \
    \   (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0))\
    \ 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8lk2pyw1.rkt:22:4

    actual:     9.0

    expected:   25

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8lk2pyw1.rkt:23:4

    actual:     0.6

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8lk2pyw1.rkt:24:4

    actual:     -60.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8lk2pyw1.rkt:25:4

    actual:     5.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8lk2pyw1.rkt:26:4

    actual:     8.2

    expected:   34

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8lk2pyw1.rkt:27:4

    actual:     0.0

    expected:   165

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3bwall_4.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3bwall_4.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3bwall_4.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3bwall_4.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3bwall_4.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpol_jb9fe.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpol_jb9fe.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpol_jb9fe.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpol_jb9fe.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpol_jb9fe.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj5t30ibj.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpj5t30ibj.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj5t30ibj.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpj5t30ibj.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj5t30ibj.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6cfllk7a.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6cfllk7a.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6cfllk7a.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6cfllk7a.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6cfllk7a.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpaq62izfo.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpaq62izfo.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpaq62izfo.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpaq62izfo.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpaq62izfo.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(number? (car lst)) (+ (square (car lst)) (double_the_difference (cdr lst)))]\n\
    \    [else (double_the_difference (cdr lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpki65cyp6.rkt:13:29: square: unbound identifier\n  in: square\n\
    \  location...:\n   /tmp/tmpki65cyp6.rkt:13:29\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpus92_7e_.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpus92_7e_.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpus92_7e_.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpus92_7e_.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpus92_7e_.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_rgp_xri.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_rgp_xri.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_rgp_xri.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_rgp_xri.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_rgp_xri.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpciv5qajx.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpciv5qajx.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpciv5qajx.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpciv5qajx.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpciv5qajx.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(number? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (+ (first lst) (double_the_difference (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n \
    \   (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0\
    \ 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
    \ (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list\
    \ -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n \
    \   (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0))\
    \ 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq1rigsve.rkt:22:4

    actual:     9.0

    expected:   25

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq1rigsve.rkt:23:4

    actual:     0.6

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq1rigsve.rkt:24:4

    actual:     -60.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq1rigsve.rkt:25:4

    actual:     5.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq1rigsve.rkt:26:4

    actual:     8.2

    expected:   34

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq1rigsve.rkt:27:4

    actual:     0.0

    expected:   165

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoyuafk3n.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpoyuafk3n.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoyuafk3n.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpoyuafk3n.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoyuafk3n.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(number? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (+ (first lst) (double_the_difference (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n \
    \   (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0\
    \ 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
    \ (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list\
    \ -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n \
    \   (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0))\
    \ 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp739tidz1.rkt:22:4

    actual:     9.0

    expected:   25

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp739tidz1.rkt:23:4

    actual:     0.6

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp739tidz1.rkt:24:4

    actual:     -60.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp739tidz1.rkt:25:4

    actual:     5.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp739tidz1.rkt:26:4

    actual:     8.2

    expected:   34

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp739tidz1.rkt:27:4

    actual:     0.0

    expected:   165

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate double_the_difference))\n    (check-equal? (candidate (list ))\
    \ 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate\
    \ (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0))\
    \ 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal?\
    \ (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0\
    \ -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz0hrnuzr.rkt:22:4\n\
    actual:     9.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpz0hrnuzr.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz0hrnuzr.rkt:25:4\n\
    actual:     -3.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpz0hrnuzr.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz0hrnuzr.rkt:27:4\n\
    actual:     -16.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp15mfhz_.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp15mfhz_.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp15mfhz_.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp15mfhz_.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp15mfhz_.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeen998j8.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpeen998j8.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeen998j8.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpeen998j8.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeen998j8.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]\n  )\n)\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n \
    \   (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0\
    \ 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
    \ (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list\
    \ -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n \
    \   (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0))\
    \ 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkmpd2vqs.rkt:24:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkmpd2vqs.rkt:25:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkmpd2vqs.rkt:27:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkmpd2vqs.rkt:28:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkmpd2vqs.rkt:29:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbf7x_8g0.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbf7x_8g0.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbf7x_8g0.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbf7x_8g0.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbf7x_8g0.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate double_the_difference))\n    (check-equal? (candidate (list ))\
    \ 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate\
    \ (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0))\
    \ 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal?\
    \ (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0\
    \ -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiz8xivcc.rkt:22:4\n\
    actual:     9.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpiz8xivcc.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiz8xivcc.rkt:25:4\n\
    actual:     -3.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpiz8xivcc.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiz8xivcc.rkt:27:4\n\
    actual:     -16.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl_0l9ky9.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpl_0l9ky9.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl_0l9ky9.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpl_0l9ky9.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl_0l9ky9.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate double_the_difference))\n    (check-equal? (candidate (list ))\
    \ 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate\
    \ (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0))\
    \ 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal?\
    \ (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0\
    \ -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0iqn29r4.rkt:22:4\n\
    actual:     9.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0iqn29r4.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0iqn29r4.rkt:25:4\n\
    actual:     -3.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0iqn29r4.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0iqn29r4.rkt:27:4\n\
    actual:     -16.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(number? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (+ (first lst) (double_the_difference (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n \
    \   (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0\
    \ 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
    \ (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list\
    \ -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n \
    \   (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0))\
    \ 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0jwht76h.rkt:22:4

    actual:     9.0

    expected:   25

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0jwht76h.rkt:23:4

    actual:     0.6

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0jwht76h.rkt:24:4

    actual:     -60.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0jwht76h.rkt:25:4

    actual:     5.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0jwht76h.rkt:26:4

    actual:     8.2

    expected:   34

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0jwht76h.rkt:27:4

    actual:     0.0

    expected:   165

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc5zcoupl.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpc5zcoupl.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc5zcoupl.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpc5zcoupl.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc5zcoupl.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxm35g4yb.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxm35g4yb.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxm35g4yb.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxm35g4yb.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxm35g4yb.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate double_the_difference))\n    (check-equal? (candidate (list ))\
    \ 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate\
    \ (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0))\
    \ 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal?\
    \ (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0\
    \ -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa_ppdt11.rkt:22:4\n\
    actual:     9.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpa_ppdt11.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa_ppdt11.rkt:25:4\n\
    actual:     -3.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpa_ppdt11.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa_ppdt11.rkt:27:4\n\
    actual:     -16.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg64zwuoj.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpg64zwuoj.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg64zwuoj.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpg64zwuoj.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg64zwuoj.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond [(empty? lst) 0]\n \
    \       [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \        [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n   \
    \ (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0\
    \ 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
    \ (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list\
    \ -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n \
    \   (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0))\
    \ 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyt8asv1r.rkt:21:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyt8asv1r.rkt:22:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyt8asv1r.rkt:24:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyt8asv1r.rkt:25:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyt8asv1r.rkt:26:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk57df264.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpk57df264.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk57df264.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpk57df264.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk57df264.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphkjo_ndt.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphkjo_ndt.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphkjo_ndt.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphkjo_ndt.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphkjo_ndt.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptiwedldc.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmptiwedldc.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptiwedldc.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmptiwedldc.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptiwedldc.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyl9r8xx6.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyl9r8xx6.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyl9r8xx6.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyl9r8xx6.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyl9r8xx6.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4o7cyo6u.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4o7cyo6u.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4o7cyo6u.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4o7cyo6u.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4o7cyo6u.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphif6v_dg.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphif6v_dg.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphif6v_dg.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphif6v_dg.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphif6v_dg.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(number? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (+ (first lst) (double_the_difference (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n \
    \   (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0\
    \ 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
    \ (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list\
    \ -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n \
    \   (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0))\
    \ 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmgb0nhyl.rkt:22:4

    actual:     9.0

    expected:   25

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmgb0nhyl.rkt:23:4

    actual:     0.6

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmgb0nhyl.rkt:24:4

    actual:     -60.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmgb0nhyl.rkt:25:4

    actual:     5.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmgb0nhyl.rkt:26:4

    actual:     8.2

    expected:   34

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmgb0nhyl.rkt:27:4

    actual:     0.0

    expected:   165

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn3agtu44.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpn3agtu44.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn3agtu44.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpn3agtu44.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn3agtu44.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsuq_dz65.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsuq_dz65.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsuq_dz65.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsuq_dz65.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsuq_dz65.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxaioqe5h.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxaioqe5h.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxaioqe5h.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxaioqe5h.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxaioqe5h.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwhrujoi4.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwhrujoi4.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwhrujoi4.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwhrujoi4.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwhrujoi4.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpaqqygf9q.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpaqqygf9q.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpaqqygf9q.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpaqqygf9q.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpaqqygf9q.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]\n  )\n)\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n \
    \   (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0\
    \ 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
    \ (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list\
    \ -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n \
    \   (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0))\
    \ 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvirst2x9.rkt:24:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvirst2x9.rkt:25:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvirst2x9.rkt:27:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvirst2x9.rkt:28:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvirst2x9.rkt:29:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfnbbd8_k.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfnbbd8_k.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfnbbd8_k.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfnbbd8_k.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfnbbd8_k.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (second lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate double_the_difference))\n    (check-equal? (candidate (list ))\
    \ 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate\
    \ (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0))\
    \ 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal?\
    \ (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0\
    \ -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa07wnb92.rkt:22:4\n\
    actual:     9.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpa07wnb92.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa07wnb92.rkt:25:4\n\
    actual:     -3.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpa07wnb92.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa07wnb92.rkt:27:4\n\
    actual:     -16.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(number? (car lst)) (+ (square (car lst)) (double_the_difference (cdr lst)))]\n\
    \    [else (double_the_difference (cdr lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpaslugvjy.rkt:13:29: square: unbound identifier\n  in: square\n\
    \  location...:\n   /tmp/tmpaslugvjy.rkt:13:29\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1_nzvkl1.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1_nzvkl1.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1_nzvkl1.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1_nzvkl1.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1_nzvkl1.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1z6bxal.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpl1z6bxal.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1z6bxal.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpl1z6bxal.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1z6bxal.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa3id4dw6.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpa3id4dw6.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa3id4dw6.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpa3id4dw6.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa3id4dw6.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmply_wnad1.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmply_wnad1.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmply_wnad1.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmply_wnad1.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmply_wnad1.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n \
    \   (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate\
    \ (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0))\
    \ 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
    \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbp056nkj.rkt:22:4\n\
    actual:     5.0\nexpected:   25\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbp056nkj.rkt:23:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbp056nkj.rkt:25:4\n\
    actual:     -1.0\nexpected:   0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbp056nkj.rkt:26:4\n\nodd?:\
    \ contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbp056nkj.rkt:27:4\n\
    actual:     0.0\nexpected:   165\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =\
    \ 10\n;; double_the_difference([-1, -2, 0]) == 0\n;; double_the_difference([9,\
    \ -2]) == 81\n;; double_the_difference([0]) == 0  \n;; If the input list is empty,\
    \ return 0.\n(define (double_the_difference lst)\n  (cond\n    [(empty? lst) 0]\n\
    \    [(number? (first lst)) (+ (first lst) (double_the_difference (rest lst)))]\n\
    \    [else (+ (first lst) (double_the_difference (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n \
    \   (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0\
    \ 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
    \ (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list\
    \ -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n \
    \   (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0))\
    \ 165)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp11hgf2ni.rkt:22:4

    actual:     9.0

    expected:   25

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp11hgf2ni.rkt:23:4

    actual:     0.6

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp11hgf2ni.rkt:24:4

    actual:     -60.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp11hgf2ni.rkt:25:4

    actual:     5.0

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp11hgf2ni.rkt:26:4

    actual:     8.2

    expected:   34

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp11hgf2ni.rkt:27:4

    actual:     0.0

    expected:   165

    --------------------

    '
  stdout: ''
