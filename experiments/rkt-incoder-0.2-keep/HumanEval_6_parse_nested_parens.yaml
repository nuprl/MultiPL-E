name: HumanEval_6_parse_nested_parens
language: racket
prompt: "#lang racket\n\n;; Input to this function is a string represented multiple\
  \ groups for nested parentheses separated by spaces.\n;; For each of the group,\
  \ output the deepest level of nesting of parentheses.\n;; E.g. (()()) has maximum\
  \ two levels of nesting while ((())) has three.\n;; >>> parse_nested_parens('(()())\
  \ ((())) () ((())()())')\n;; [2, 3, 1, 3]\n(define (parse_nested_parens paren_string)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parse_nested_parens))\n\
  \    (check-equal? (candidate \"(()()) ((())) () ((())()())\") (list 2 3 1 3))\n\
  \    (check-equal? (candidate \"() (()) ((())) (((())))\") (list 1 2 3 4))\n   \
  \ (check-equal? (candidate \"(()(())((())))\") (list 4))\n))\n\n(test-humaneval)"
completions: ["  (let loop ((paren_string paren_string)\n             (paren_count\
    \ 0))\n    (cond\n      [(empty? paren_string) paren_count]\n      [(char= (first\
    \ paren_string) '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char=\
    \ (first paren_string) '(') (loop (rest paren_string) (+ 1 paren_count))]\n  \
    \    [(char= (first paren_string) '(') (loop (rest paren_string) (+ 1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (+ 1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (+ 1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (+ 1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (+ 1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (+ 1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (+ 1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (+ 1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (+ 1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (+ 1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (+ 1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (+ 1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (+ 1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (+ 1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (+ 1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (+ 1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (+ 1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (+ 1 paren_count))]\n",
  "  (let loop ((paren_string paren_string)\n             (levels 0))\n    (cond\n\
    \      [(empty? paren_string) levels]\n      [(equal? (first paren_string) '(')\
    \ (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]", "  (let loop ((paren_string\
    \ paren_string)\n             (levels 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (reverse levels)]\n      [(equal? (first paren_string) '(')\n       (loop\
    \ (rest paren_string) (+ 1 levels))]\n      [else\n       (loop (rest paren_string)\
    \ (+ 1 levels))]\n      )))\n", "  (let loop ((paren_string paren_string)\n  \
    \           (levels 0))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ levels)]\n      [(equal? (car paren_string) '())\n       (loop (cdr paren_string)\
    \ (+ levels 1))]\n      [(equal? (car paren_string) '(())\n       (loop (cdr paren_string)\
    \ (+ levels 2))]\n      [(equal? (car paren_string) '((()))\n       (loop (cdr\
    \ paren_string) (+ levels 3))]\n      [(equal? (car paren_string) '((()()))\n\
    \       (loop (cdr paren_string) (+ levels 4))]\n      [(equal? (car paren_string)\
    \ '((()()()))\n       (loop (cdr paren_string) (+ levels 5))]\n      [(equal?\
    \ (car paren_string) '((()()()()))\n       (loop (cdr paren_string) (+ levels\
    \ 6))]\n      [(equal? (car paren_string) '((()()()()()))\n       (loop (cdr paren_string)\
    \ (+ levels 7))]\n      [(equal? (car paren_string) '((()()()()()()))\n      \
    \ (loop (cdr paren_string) (+ levels 8))]\n      [(equal? (car paren_string) '((()()()()()()()))\n\
    \       (loop (cdr paren_string) (+ levels 9))]\n      [(equal? (car paren_string)\
    \ '((()()()()()()()))\n       (loop (cdr paren_string) (+ levels 10))]\n     \
    \ [(equal? (car paren_string) '((()()()()()()()()))\n       (loop (cdr paren_string)\
    \ (+ levels 11))]\n      [(equal? (car paren_string) '((()()()()()()()()()))\n\
    \       (loop (cdr paren_string) (+ levels 12))]\n      [(equal? (car paren_string)\
    \ '((()()()()()()()()()))\n       (loop (cdr paren_string) (+ levels 13))]\n \
    \     [(equal? (car paren_string) '((()()()()()()()()()))\n       (loop (cdr paren_string)\
    \ (+ levels 14))]\n      [(equal? (car paren_string) '((()()()()()()()()()()))\n\
    \       (loop (cdr paren_string) (+ levels 15))]\n      [(equal? (car paren_string",
  "  (let loop ((paren_string paren_string)\n             (levels 0))\n    (cond\n\
    \      [(empty? paren_string) levels]\n      [(char=? (first paren_string) '(')\
    \ (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [else (loop (rest paren_string)\
    \ (add1 levels))]))))\n", "  (let loop ((paren_string paren_string)\n        \
    \     (level 0))\n    (cond\n      [(empty? paren_string) level]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [else\
    \ (loop (rest paren_string) (add1 level))])))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_count 0))\n    (cond\n      [(empty? paren_string)\
    \ paren_count]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n", "  (let loop ((paren_string paren_string)\n       \
    \      (levels 0))\n    (cond\n      [(empty? paren_string)\n       (reverse levels)]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ 1 levels))]\n      [(equal? (first paren_string) ')')\n       (loop (rest paren_string)\
    \ (- 1 levels))]\n      [else\n       (loop (rest paren_string) (+ 1 levels))])))\n",
  "  (let loop ((paren_string paren_string)\n             (level 0))\n    (cond\n\
    \      [(empty? paren_string) level]\n      [(char=? (first paren_string) '(')\
    \ (loop (rest paren_string) (+ level 1))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n", "  (let loop ((paren_string\
    \ paren_string)\n             (levels 0))\n    (cond\n      [(empty? paren_string)\
    \ levels]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(", "  (let loop ((paren_string paren_string)\n    \
    \         (paren_count 0))\n    (cond\n      [(empty? paren_string)\n       (list\
    \ paren_count)]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string)\n             (+ paren_count 1))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string)\n             (+ paren_count 1))]\n \
    \     [else\n       (loop (rest paren_string)\n             (+ paren_count 1))]\n\
    \    )\n  )\n)\n", "  (let loop ((paren_string paren_string)\n             (level\
    \ 0))\n    (cond\n      [(empty? paren_string) level]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]", "  (let loop ((paren_string\
    \ paren_string)\n             (level 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (reverse level)]\n      [(char=? (car paren_string) '(')\n       (loop\
    \ (cdr paren_string) (+ level 1))]\n      [(char=? (car paren_string) ')')\n \
    \      (loop (cdr paren_string) (- level 1))]\n      [else\n       (loop (cdr\
    \ paren_string) (+ level 1))]\n    )\n  )\n)\n", "  (let loop ((paren_string paren_string)\n\
    \             (paren_count 0))\n    (cond\n      [(empty? paren_string) paren_count]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n",
  "  (let loop ((paren_string paren_string)\n             (levels 0))\n    (cond\n\
    \      [(empty? paren_string) levels]\n      [(char? (car paren_string)) (loop\
    \ (cdr paren_string) (+ 1 levels))]\n      [else (loop (cdr paren_string) (+ 1\
    \ levels))])))\n", "  (let loop ((parens paren_string)\n             (result '()))\n\
    \    (cond\n      [(empty? parens) result]\n      [(equal? (first parens) '(')\
    \ (loop (rest parens) (cons result (loop (rest parens) '())))]\n      [(equal?\
    \ (first parens) '(') (loop (rest parens) (cons (loop (rest parens) '()) result))]\n\
    \      [(equal? (first parens) ')') (loop (rest parens) (cons result (loop (rest\
    \ parens) '())))]\n      [(equal? (first parens) ')') (loop (rest parens) (cons\
    \ (loop (rest parens) '()) result))]\n      [(equal? (first parens) '(') (loop\
    \ (rest parens) (cons result (loop (rest parens) '())))]\n      [(equal? (first\
    \ parens) '(') (loop (rest parens) (cons (loop (rest parens) '()) result))]\n\
    \      [(equal? (first parens) ')') (loop (rest parens) (cons result (loop (rest\
    \ parens) '())))]\n      [(equal? (first parens) ')') (loop (rest parens) (cons\
    \ (loop (rest parens) '()) result))]\n      [(equal? (first parens) '(') (loop\
    \ (rest parens) (cons result (loop (rest parens) '())))]\n      [(equal? (first\
    \ parens) '(') (loop (rest parens) (cons (loop (rest parens) '()) result))]\n\
    \      [(equal? (first parens) ')') (loop (rest parens) (cons result (loop (rest\
    \ parens) '())))]\n      [(equal? (first parens) ')') (loop (rest parens) (cons\
    \ (loop (rest parens) '()) result))]\n      [(equal? (first parens) '(') (loop\
    \ (rest parens) (cons result (loop (rest parens) '())))]\n      [(equal? (first\
    \ parens) '(') (loop (rest parens) (cons (loop (rest parens) '()) result))]\n\
    \      [(equal? (first parens) ')') (loop (rest parens) (cons result (loop (rest\
    \ parens) '())))]\n      [(equal? (first parens) ')') (loop (rest parens) (cons\
    \ (loop (rest parens) '()) result))]\n      [(equal? (first parens) '(') (loop\
    \ (", "  (let loop ((parens paren_string)\n             (level 0))\n    (cond\n\
    \      [(empty? parens) level]\n      [(char=? (car parens) '(') (loop (cdr parens)\
    \ (+ level 1))]\n      [(char=? (car parens) ')') (loop (cdr parens) level)]\n\
    \      [else (loop (cdr parens) level)])))\n", "  (let loop ((paren_string paren_string)\n\
    \             (level 0))\n    (cond\n      [(empty? paren_string) level]\n   \
    \   [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n",
  "  (let loop ((paren_string paren_string)\n             (level 0))\n    (cond\n\
    \      [(empty? paren_string) level]\n      [(char=? (first paren_string) '(')\
    \ (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n", "  (let loop ((paren_string\
    \ paren_string)\n             (levels 0))\n    (cond\n      [(empty? paren_string)\
    \ levels]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(", "  (let loop ((paren_string paren_string)\n    \
    \         (paren_count 0))\n    (cond\n      [(empty? paren_string) paren_count]\n\
    \      [(char? (car paren_string))\n       (loop (cdr paren_string) (+ 1 paren_count))]\n\
    \      [else\n       (loop (cdr paren_string) (+ 1 paren_count))]))))\n", "  (let\
    \ loop ((paren_string paren_string)\n             (level 0))\n    (cond\n    \
    \  [(empty? paren_string) level]\n      [(equal? (first paren_string) '(') (loop\
    \ (rest paren_string) (+ level 1)))]\n      [(equal? (first paren_string) '(')\
    \ (loop (rest paren_string) (+ level 1)))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1)))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1)))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1)))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1)))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1)))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1)))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1)))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1)))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1)))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1)))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1)))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1)))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1)))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1)))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1)))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1)))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1)))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1)))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1)))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1)))]", "  (let loop ((parens paren_string)\n\
    \             (level 0))\n    (cond\n      [(empty? parens) level]\n      [(char=\
    \ (char (first parens)) '(') (loop (rest parens) (+ level 1))]\n      [(char=\
    \ (char (first parens)) ')') (loop (rest parens) level)]\n      [else (loop (rest\
    \ parens) level)])))\n", "  (let loop ((paren_string paren_string)\n         \
    \    (level 0))\n    (cond\n      [(empty? paren_string) level]\n      [(char?\
    \ (car paren_string)) (loop (cdr paren_string) (+ level 1))]\n      [else (loop\
    \ (cdr paren_string) (+ level 1))])))\n", "  (let ((levels ()))\n    (loop\n \
    \      for i from 0 to (length paren_string)\n       for char from (char-index\
    \ paren_string i)\n       when (char-equal? char #\\())\n       collect (+ 1 (length\
    \ levels))\n       else (loop\n                 for i from 0 to (length levels)\n\
    \                 for char from (char-index levels i)\n                 when (char-equal?\
    \ char #\\())\n                 collect (+ 1 (length levels))\n              \
    \   else (loop\n                          for i from 0 to (length levels)\n  \
    \                        for char from (char-index levels i)\n               \
    \           when (char-equal? char #\\))\n                          collect (+\
    \ 1 (length levels))\n                          else (loop\n                 \
    \                  for i from 0 to (length levels)\n                         \
    \          for char from (char-index levels i)\n                             \
    \      when (char-equal? char #\\))\n                                   collect\
    \ (+ 1 (length levels))\n                                   else (loop\n     \
    \                                      for i from 0 to (length levels)\n     \
    \                                      for char from (char-index levels i)\n \
    \                                          when (char-equal? char #\\))\n    \
    \                                       collect (+ 1 (length levels))\n      \
    \                                     else (loop\n                           \
    \                        for i from 0 to (length levels)\n                   \
    \                                for char from (char-index levels i)\n       \
    \                                            when (char-equal? char #\\))\n  \
    \                                                 collect (+ 1 (length levels))\n\
    \                                                   else (loop\n             \
    \                                              for i from 0 to (length levels)\n\
    \                                                           for char from (char-index\
    \ levels i)\n                                                           when (char-equal?\
    \ char #\\))\n                                                           collect\
    \ (+ 1 (length levels))\n                                                    \
    \       else (loop\n                                                         \
    \          for i from 0 to (length levels)\n                                 \
    \                                  for char from (char-index levels i)\n     \
    \                                                              when (char-equal?\
    \ char #\\))\n                                                               \
    \    collect (+ 1 (length levels))\n                                         \
    \                          else (loop\n                                      \
    \                                     for i from 0 to (length levels)\n      \
    \                                                                     for char\
    \ from (char-index levels i)\n                                               \
    \                            when (char-equal? char #\\))\n                  \
    \                                                         collect (+ 1 (length\
    \ levels))\n                                                                 \
    \          else (loop\n                                                      \
    \                         for i from 0 to (length levels)\n                  \
    \                                                             for char from (char-index\
    \ levels i)\n                                                                \
    \               when (char-equal? char #\\))\n                               \
    \                                                collect (+ 1 (length levels))\n\
    \                                                                            \
    \   else (loop\n                                                             \
    \                            for i from 0 to (length levels)\n               \
    \                                                                          for\
    \ char ", "  (let loop ((parens paren_string)\n             (levels 0))\n    (cond\n\
    \      [(empty? parens) levels]\n      [(char=? (car parens) '(') (loop (cdr parens)\
    \ (+ 1 levels))]\n      [(char=? (car parens) ')') (loop (cdr parens) levels)]\n\
    \      [else (loop (cdr parens) levels)]))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (level 0))\n    (cond\n      [(empty? paren_string) level]\n   \
    \   [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]",
  "  (let loop ((paren_string paren_string)\n             (levels 0))\n    (cond\n\
    \      [(empty? paren_string) levels]\n      [(equal? (first paren_string) '(')\
    \ (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]", "  (let loop ((paren_string\
    \ paren_string)\n             (levels 0))\n    (cond\n      [(empty? paren_string)\
    \ levels]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(", "  (let loop ((paren_string paren_string)\n    \
    \         (level 0))\n    (cond\n      [(empty? paren_string) level]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n", "  (let\
    \ loop ((parens paren_string)\n             (levels 0))\n    (cond\n      [(empty?\
    \ parens) levels]\n      [(char? (car parens)) (loop (cdr parens) (+ 1 levels))]\n\
    \      [else (loop (cdr parens) levels)]))))\n", "  (let loop ((parens 0))\n \
    \   (cond\n      [(empty? paren_string) 0]\n      [(equal? (first paren_string)\
    \ '(') (loop (add1 parens))]\n      [(equal? (first paren_string) ')') (loop (add1\
    \ parens))]\n      [else (loop (add1 parens))])))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (levels 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (reverse levels)]\n      [(equal? (car paren_string) '(')\n       (loop\
    \ (cdr paren_string) (+ 1 levels))]\n      [else\n       (loop (cdr paren_string)\
    \ (+ 1 levels))]\n      )))\n", "  (let loop ((paren_string paren_string)\n  \
    \           (levels 0))\n    (cond\n      [(empty? paren_string) levels]\n   \
    \   [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(", "  (let loop ((paren_string paren_string)\n             (paren_count\
    \ 0))\n    (if (empty? paren_string)\n        paren_count\n        (loop (rest\
    \ paren_string)\n              (+ paren_count (parse-parens (first paren_string)))))))\n",
  "  (let loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n\
    \      [(empty? paren_string) paren_count]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n", "  (let loop ((paren_string\
    \ paren_string)\n             (level 0))\n    (cond\n      [(empty? paren_string)\
    \ level]\n      [(char=? (car paren_string) '(') (loop (cdr paren_string) (+ level\
    \ 1))]\n      [(char=? (car paren_string) ')') (loop (cdr paren_string) (- level\
    \ 1))]\n      [else (loop (cdr paren_string) (+ level 1))]))))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (level 0))\n    (cond\n      [(empty?\
    \ paren_string) level]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n", "  (let loop ((paren_string paren_string)\n             (paren_count\
    \ 0))\n    (cond\n      [(empty? paren_string)\n       (reverse (list paren_count))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ 1 paren_count))]\n      [(equal? (first paren_string) ')')\n       (loop (rest\
    \ paren_string) (- 1 paren_count))]\n      [else\n       (loop (rest paren_string)\
    \ (+ 1 paren_count))]))))\n", "  (let loop ((paren_string paren_string)\n    \
    \         (levels 0))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ levels)]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ 1 levels))]\n      [(equal? (first paren_string) ')')\n       (loop (rest\
    \ paren_string) (- 1 levels))]\n      [else\n       (loop (rest paren_string)\
    \ (+ 1 levels))])))\n", "  (let loop ((paren_string paren_string)\n          \
    \   (level 0))\n    (cond\n      [(empty? paren_string)\n       (list)\n     \
    \  ]\n      [(char=? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (add1 level))\n       ]\n      [(char=? (first paren_string) '(')\n       (loop\
    \ (rest paren_string) (add1 level))\n       ]\n      [(char=? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (add1 level))\n       ]\n      [(char=?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (add1 level))\n\
    \       ]\n      [(char=? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (add1 level))\n       ]\n      [(char=? (first paren_string) '(')\n       (loop\
    \ (rest paren_string) (add1 level))\n       ]\n      [(char=? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (add1 level))\n       ]\n      [(char=?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (add1 level))\n\
    \       ]\n      [(char=? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (add1 level))\n       ]\n      [(char=? (first paren_string) '(')\n       (loop\
    \ (rest paren_string) (add1 level))\n       ]\n      [(char=? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (add1 level))\n       ]\n      [(char=?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (add1 level))\n\
    \       ]\n      [(char=? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (add1 level))\n       ]\n      [(char=? (first paren_string) '(')\n       (loop\
    \ (rest paren_string) (add1 level))\n       ]\n      [(char=? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (add1 level))\n       ]\n      [(char=?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (add1 level))\n\
    \       ]\n      [(char=? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (add1 level))\n       ]\n      [(char", "  (let loop ((paren_string paren_string)\n\
    \             (level 0))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ level)]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ level 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ level 1))]\n      [else\n       (loop (rest paren_string) (+\
    \ level 1))]\n      )))\n", "  (let loop ((parens paren_string)\n            \
    \ (level 0))\n    (cond\n      [(empty? parens) level]\n      [(char=? (car parens)\
    \ '(') (loop (cdr parens) (+ level 1))]\n      [(char=? (car parens) ')') (loop\
    \ (cdr parens) level)]\n      [else (loop (cdr parens) level)])))\n", "  (let\
    \ loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n\
    \      [(empty? paren_string) paren_count]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 paren_count))]\n", "  (let loop ((paren_string\
    \ paren_string)\n             (levels 0))\n    (cond\n      [(empty? paren_string)\
    \ levels]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(", "  (let loop ((paren_string paren_string)\n    \
    \         (level 0))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ level)]\n      [(char=? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ level 1))]\n      [(char=? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ level 1))]\n      [(char=? (first paren_string) '(')\n    \
    \   (loop (rest paren_string) (+ level 1))]\n      [(char=? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(char=? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(char=?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ level 1))]\n\
    \      [(char=? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ level 1))]\n      [(char=? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ level 1))]\n      [(char=? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ level 1))]\n      [(char=? (first paren_string) '(')\n    \
    \   (loop (rest paren_string) (+ level 1))]\n      [(char=? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(char=? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(char=?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ level 1))]\n\
    \      [(char=? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ level 1))]\n      [(char=? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ level 1))]\n      [(char=? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ level 1))]\n      [(char=? (first paren_string) '(')\n    \
    \   (loop (rest paren_string) (+ level 1))]\n      [(char=? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(char=? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(char=?\
    \ (", "  (let loop ((paren_string paren_string)\n             (levels 0))\n  \
    \  (cond\n      [(empty? paren_string)\n       (reverse levels)]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ 1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ 1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n   \
    \    (loop (rest paren_string) (+ 1 levels))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ 1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ 1 levels))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ 1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ 1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n   \
    \    (loop (rest paren_string) (+ 1 levels))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ 1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ 1 levels))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ 1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ 1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n   \
    \    (loop (rest paren_string) (+ 1 levels))]\n      [(equal? (", "  (let loop\
    \ ((paren_string paren_string)\n             (levels 0))\n    (cond\n      [(empty?\
    \ paren_string)\n       (reverse levels)]\n      [(char=? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ 1 levels))]\n      [(char=? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ 1 levels))]\n      [(char=?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ 1 levels))]\n\
    \      [(char=? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ 1 levels))]\n      [(char=? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ 1 levels))]\n      [(char=? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ 1 levels))]\n      [(char=? (first paren_string) '(')\n   \
    \    (loop (rest paren_string) (+ 1 levels))]\n      [(char=? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ 1 levels))]\n      [(char=? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ 1 levels))]\n      [(char=?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ 1 levels))]\n\
    \      [(char=? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ 1 levels))]\n      [(char=? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ 1 levels))]\n      [(char=? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ 1 levels))]\n      [(char=? (first paren_string) '(')\n   \
    \    (loop (rest paren_string) (+ 1 levels))]\n      [(char=? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ 1 levels))]\n      [(char=? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ 1 levels))]\n      [(char=?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ 1 levels))]\n\
    \      [(char=? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ 1 levels))]\n      [(char=? (first paren_string) '('", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_count 0))\n    (cond\n      [(empty? paren_string)\
    \ paren_count]\n      [(char=? (car paren_string) '(') (loop (cdr paren_string)\
    \ (+ 1 paren_count))]\n      [(char=? (car paren_string) ')') (loop (cdr paren_string)\
    \ (- 1 paren_count))]\n      [else (loop (cdr paren_string) (+ 1 paren_count))]))))\n",
  "  (let ((levels ()))\n    (let loop ((paren_string paren_string)\n            \
    \   (level 0))\n      (if (empty? paren_string)\n          levels\n          (loop\
    \ (rest paren_string)\n                (+ level 1)))))))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (level 0))\n    (cond\n      [(empty? paren_string)\
    \ level]\n      [(char=? (car paren_string) '(') (loop (cdr paren_string) (+ level\
    \ 1))]\n      [(char=? (car paren_string) ')') (loop (cdr paren_string) level)]\n\
    \      [else (loop (cdr paren_string) level)])))\n", "  (let loop ((parens 0))\n\
    \    (if (empty? paren_string)\n        parens\n        (loop (add1 parens)\n\
    \              (parse-parens (substring paren_string 0 parens))))))\n", "  (let\
    \ loop ((paren_string paren_string)\n             (level 0))\n    (cond\n    \
    \  [(empty? paren_string) level]\n      [(char=? (first paren_string) '(') (loop\
    \ (rest paren_string) (+ level 1))]\n      [(char=? (first paren_string) '(')\
    \ (loop (rest paren_string) (+ level 1))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ level 1))]\n", "  (let loop ((paren_string\
    \ paren_string)\n             (levels 0))\n    (cond\n      [(empty? paren_string)\
    \ levels]\n      [(char= (first paren_string) '(') (loop (rest paren_string) (add1\
    \ levels))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(", "  (let loop ((paren_string paren_string)\n    \
    \         (level 0))\n    (cond\n      [(empty? paren_string)\n       (list level)]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (add1\
    \ level))]\n      [else\n       (loop (rest paren_string) (add1 level))])))\n",
  "  (let loop ((paren_string paren_string)\n             (levels 0))\n    (cond\n\
    \      [(empty? paren_string)\n       (reverse levels)]\n      [(equal? (car paren_string)\
    \ '(')\n       (loop (cdr paren_string) (+ 1 levels))]\n      [(equal? (car paren_string)\
    \ ')')\n       (loop (cdr paren_string) (- 1 levels))]\n      [else\n       (loop\
    \ (cdr paren_string) (+ 1 levels))])))\n", "  (let loop ((paren_string paren_string)\n\
    \             (level 0))\n    (cond\n      [(empty? paren_string) level]\n   \
    \   [(char? (car paren_string)) (loop (cdr paren_string) (+ level 1))]\n     \
    \ [else (loop (cdr paren_string) (+ level 1))])))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (levels 0))\n    (cond\n      [(empty? paren_string)\
    \ levels]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(", "  (let loop ((paren_string paren_string)\n    \
    \         (levels 0))\n    (cond\n      [(empty? paren_string) levels]\n     \
    \ [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]",
  "  (let loop ((paren_string paren_string)\n             (level 0))\n    (cond\n\
    \      [(empty? paren_string) level]\n      [(equal? (first paren_string) '(')\
    \ (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]", "  (let loop ((paren_string\
    \ paren_string)\n             (levels 0))\n    (cond\n      [(empty? paren_string)\
    \ levels]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(", "  (let loop ((paren_string paren_string)\n    \
    \         (levels 0))\n    (cond\n      [(empty? paren_string) levels]\n     \
    \ [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char=? (first paren_string) ')') (loop (rest paren_string) (sub1 levels))]\n\
    \      [else (loop (rest paren_string) (add1 levels))])))\n", "  (let loop ((parens\
    \ paren_string)\n             (level 0))\n    (cond\n      [(empty? parens) level]\n\
    \      [(char? (car parens)) (loop (cdr parens) (+ level 1))]\n      [else (loop\
    \ (cdr parens) level)])))\n", "  (let loop ((paren_string paren_string)\n    \
    \         (level 0))\n    (cond\n      [(empty? paren_string) level]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]", "  (let\
    \ loop ((paren_string paren_string)\n             (levels 0))\n    (cond\n   \
    \   [(empty? paren_string) levels]\n      [(equal? (first paren_string) '(') (loop\
    \ (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string) '(')\
    \ (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]", "  (let loop ((paren_string\
    \ paren_string)\n             (levels 0))\n    (cond\n      [(empty? paren_string)\
    \ levels]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(", "  (let loop ((paren_string paren_string)\n    \
    \         (levels 0))\n    (cond\n      [(empty? paren_string) levels]\n     \
    \ [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]",
  "  (let loop ((paren_string paren_string)\n             (level 0))\n    (cond\n\
    \      [(empty? paren_string) level]\n      [(equal? (first paren_string) '(')\
    \ (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]", "  (let loop ((paren_string\
    \ paren_string)\n             (level 0))\n    (cond\n      [(empty? paren_string)\
    \ level]\n      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1\
    \ level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n", "  (let loop ((paren_string paren_string)\n             (paren_count\
    \ 0))\n    (cond\n      [(empty? paren_string) paren_count]\n      [(char=? (car\
    \ paren_string) '(') (loop (cdr paren_string) (+ 1 paren_count))]\n      [(char=?\
    \ (car paren_string) ')') (loop (cdr paren_string) (- 1 paren_count))]\n     \
    \ [else (loop (cdr paren_string) (+ 1 paren_count))]))))\n", "  (let loop ((parens\
    \ paren_string)\n             (levels 0))\n    (cond\n      [(empty? parens) levels]\n\
    \      [(char=? (first parens) '(') (loop (rest parens) (add1 levels))]\n    \
    \  [(char=? (first parens) '(') (loop (rest parens) (add1 levels))]\n      [(char=?\
    \ (first parens) '(') (loop (rest parens) (add1 levels))]\n      [(char=? (first\
    \ parens) '(') (loop (rest parens) (add1 levels))]\n      [(char=? (first parens)\
    \ '(') (loop (rest parens) (add1 levels))]\n      [(char=? (first parens) '(')\
    \ (loop (rest parens) (add1 levels))]\n      [(char=? (first parens) '(') (loop\
    \ (rest parens) (add1 levels))]\n      [(char=? (first parens) '(') (loop (rest\
    \ parens) (add1 levels))]\n      [(char=? (first parens) '(') (loop (rest parens)\
    \ (add1 levels))]\n      [(char=? (first parens) '(') (loop (rest parens) (add1\
    \ levels))]\n      [(char=? (first parens) '(') (loop (rest parens) (add1 levels))]\n\
    \      [(char=? (first parens) '(') (loop (rest parens) (add1 levels))]\n    \
    \  [(char=? (first parens) '(') (loop (rest parens) (add1 levels))]\n      [(char=?\
    \ (first parens) '(') (loop (rest parens) (add1 levels))]\n      [(char=? (first\
    \ parens) '(') (loop (rest parens) (add1 levels))]\n      [(char=? (first parens)\
    \ '(') (loop (rest parens) (add1 levels))]\n      [(char=? (first parens) '(')\
    \ (loop (rest parens) (add1 levels))]\n      [(char=? (first parens) '(') (loop\
    \ (rest parens) (add1 levels))]\n      [(char=? (first parens) '(') (loop (rest\
    \ parens) (add1 levels))]\n      [(char=? (first parens) '(') (loop (rest parens)\
    \ (add1 levels))]\n      [(char=? (first parens) '(') (loop (rest parens) (add1\
    \ levels))]\n      ", "  (let loop ((paren_string paren_string)\n            \
    \ (level 0))\n    (cond\n      [(empty? paren_string)\n       (reverse level)]\n\
    \      [(equal? (car paren_string) '(')\n       (loop (cdr paren_string) (+ level\
    \ 1))]\n      [(equal? (car paren_string) ')')\n       (loop (cdr paren_string)\
    \ level)]\n      [else\n       (loop (cdr paren_string) (+ level 1))]\n    )\n\
    \  )\n)\n", "  (let loop ((paren_string paren_string)\n             (levels 0))\n\
    \    (cond\n      [(empty? paren_string)\n       (reverse levels)]\n      [(equal?\
    \ (car paren_string) '(')\n       (loop (cdr paren_string)\n             (+ levels\
    \ (loop (cdr paren_string) 0)))]\n      [(equal? (car paren_string) ')')\n   \
    \    (loop (cdr paren_string)\n             (- levels (loop (cdr paren_string)\
    \ 0)))]\n      [else\n       (loop (cdr paren_string)\n             (+ levels\
    \ (loop (cdr paren_string) 0)))])))\n", "  (let loop ((paren_string paren_string)\n\
    \             (level 0))\n    (cond\n      [(empty? paren_string) level]\n   \
    \   [(char? (car paren_string)) (loop (cdr paren_string) (+ level 1))]\n     \
    \ [else (loop (cdr paren_string) (+ level 1))]))))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (level 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (reverse level)]\n      [(char= (first paren_string) '(')\n       (loop\
    \ (rest paren_string) (+ level 1))]\n      [(char= (first paren_string) '(')\n\
    \       (loop (rest paren_string) (+ level 1))]\n      [(char= (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(char= (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(char= (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(char= (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(char= (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(char= (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(char= (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(char= (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(char= (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(char= (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(char= (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(char= (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(char= (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(char= (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(char= (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(char= (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(char= (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(char= (", "  (let\
    \ loop ((paren_string paren_string)\n             (level 0))\n    (cond\n    \
    \  [(empty? paren_string) level]\n      [(char? (car paren_string)) (loop (cdr\
    \ paren_string) (+ level 1))]\n      [else (loop (cdr paren_string) (+ level 1))])))\n",
  "  (let loop ((parens paren_string)\n             (result '()))\n    (if (empty?\
    \ parens)\n        result\n        (loop (rest parens)\n              (cons (max\
    \ 0 (parse-parens parens)) result)))))\n", "  (let loop ((parens 0))\n    (cond\n\
    \      [(empty? paren_string)\n       (reverse (list parens))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (+ parens (length paren_string)))]\n\
    \      [(equal? (first paren_string) ')')\n       (loop (- parens (length paren_string)))]\n\
    \      [else\n       (loop (+ parens (length paren_string)))]\n      )))\n", " \
    \ (let loop ((parens 0))\n    (cond\n      [(empty? paren_string) parens]\n  \
    \    [(char=? (first paren_string) '(') (loop (add1 parens))]\n      [(char=?\
    \ (first paren_string) ')') (loop (sub1 parens))]\n      [(char=? (first paren_string)\
    \ '(') (loop (add1 parens))]\n      [(char=? (first paren_string) ')') (loop (sub1\
    \ parens))]\n      [(char=? (first paren_string) '(') (loop (add1 parens))]\n\
    \      [(char=? (first paren_string) ')') (loop (sub1 parens))]\n      [(char=?\
    \ (first paren_string) '(') (loop (add1 parens))]\n      [(char=? (first paren_string)\
    \ ')') (loop (sub1 parens))]\n      [(char=? (first paren_string) '(') (loop (add1\
    \ parens))]\n      [(char=? (first paren_string) ')') (loop (sub1 parens))]\n\
    \      [(char=? (first paren_string) '(') (loop (add1 parens))]\n      [(char=?\
    \ (first paren_string) ')') (loop (sub1 parens))]\n      [(char=? (first paren_string)\
    \ '(') (loop (add1 parens))]\n      [(char=? (first paren_string) ')') (loop (sub1\
    \ parens))]\n      [(char=? (first paren_string) '(') (loop (add1 parens))]\n\
    \      [(char=? (first paren_string) ')') (loop (sub1 parens))]\n      [(char=?\
    \ (first paren_string) '(') (loop (add1 parens))]\n      [(char=? (first paren_string)\
    \ ')') (loop (sub1 parens))]\n      [(char=? (first paren_string) '(') (loop (add1\
    \ parens))]\n      [(char=? (first paren_string) ')') (loop (sub1 parens))]\n\
    \      [(char=? (first paren_string) '(') (loop (add1 parens))]\n      [(char=?\
    \ (first paren_string) ')') (loop (sub1 parens))]\n      [(char=? (first paren_string)\
    \ '(') (loop (add1 parens))]\n      [(char=? (first paren_string) ')') (loop (sub1\
    \ parens))]\n      [(char=? (first paren_string) '", "  (let loop ((paren_string\
    \ paren_string)\n             (levels 0))\n    (cond\n      [(empty? paren_string)\
    \ levels]\n      [(char? (car paren_string)) (loop (cdr paren_string) (add1 levels))]\n\
    \      [else (loop (cdr paren_string) (add1 levels))])))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_count 0))\n    (cond\n      [(empty? paren_string)\
    \ paren_count]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      [(char= (first paren_string) ')') (loop (rest paren_string)\
    \ (- 1 paren_count))]\n      [else (loop (rest paren_string) (+ 1 paren_count))]))))\n",
  "  (let loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n\
    \      [(empty? paren_string) 0]\n      [(char=? (first paren_string) '(') (loop\
    \ (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ ')') (loop (rest paren_string) (sub1 paren_count))]\n      [else (loop (rest\
    \ paren_string) (add1 paren_count))]))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (levels 0))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ levels)]\n      [(char= (char (first paren_string)) '(')\n       (loop (rest\
    \ paren_string)\n             (add1 levels))]\n      [(char= (char (first paren_string))\
    \ ')')\n       (loop (rest paren_string)\n             (sub1 levels))]\n     \
    \ [else\n       (loop (rest paren_string)\n             (add1 levels))]\n    \
    \  [else\n       (loop (rest paren_string)\n             (sub1 levels))]\n   \
    \   [else\n       (loop (rest paren_string)\n             (add1 levels))]\n  \
    \    [else\n       (loop (rest paren_string)\n             (sub1 levels))]\n \
    \     [else\n       (loop (rest paren_string)\n             (add1 levels))]\n\
    \      [else\n       (loop (rest paren_string)\n             (sub1 levels))]\n\
    \      [else\n       (loop (rest paren_string)\n             (add1 levels))]\n\
    \      [else\n       (loop (rest paren_string)\n             (sub1 levels))]\n\
    \      [else\n       (loop (rest paren_string)\n             (add1 levels))]\n\
    \      [else\n       (loop (rest paren_string)\n             (sub1 levels))]\n\
    \      [else\n       (loop (rest paren_string)\n             (add1 levels))]\n\
    \      [else\n       (loop (rest paren_string)\n             (sub1 levels))]\n\
    \      [else\n       (loop (rest paren_string)\n             (add1 levels))]\n\
    \      [else\n       (loop (rest paren_string)\n             (sub1 levels))]\n\
    \      [else\n       (loop (rest paren_string)\n             (add1 levels))]\n\
    \      [else\n       (loop (rest paren_string)\n             (sub1 levels))]\n\
    \      [else\n       (loop (rest paren_string)\n             (add1 levels))]\n\
    \      [else\n       (loop (rest paren_string)\n             (sub1 levels))]\n\
    \      [else\n       (loop (rest paren_string)\n             (add1 levels))]\n\
    \      [else\n       (loop (rest paren_string)\n             (sub1 levels))]\n\
    \      [else\n       (loop (rest paren_string)\n             (add1 levels))]\n\
    \      [else\n       (loop (rest paren_string)\n             (sub1 levels))]\n\
    \      [else\n       (loop (rest paren_string)\n             (add1 levels))]\n\
    \      [else\n       (loop (rest paren", "  (let loop ((paren_string paren_string)\n\
    \             (paren_count 0))\n    (cond\n      [(empty? paren_string) paren_count]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n",
  "  (let loop ((paren_string paren_string)\n             (levels 0))\n    (cond\n\
    \      [(empty? paren_string)\n       (reverse levels)]\n      [(char=? (first\
    \ paren_string) '(')\n       (loop (rest paren_string)\n             (+ 1 levels))]\n\
    \      [else\n       (loop (rest paren_string)\n             (+ 1 levels))]\n\
    \      )))\n", "  (let loop ((parens 0))\n    (cond\n      [(empty? paren_string)\
    \ parens]\n      [(char=? (car paren_string) '(') (loop (add1 (car paren_string)))]\n\
    \      [(char=? (car paren_string) ')') (loop (sub1 (car paren_string)))]\n  \
    \    [else (loop (add1 (car paren_string)))])))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (levels 0))\n    (cond\n      [(empty? paren_string)\
    \ levels]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(", "  (let loop ((parens paren_string)\n          \
    \   (level 0))\n    (cond\n      [(empty? parens) level]\n      [(char=? (car\
    \ parens) '(') (loop (cdr parens) (+ level 1))]\n      [else (loop (cdr parens)\
    \ level)])))\n", "  (let loop ((paren_string paren_string)\n             (levels\
    \ 0))\n    (cond\n      [(empty? paren_string)\n       (reverse levels)]\n   \
    \   [(equal? (car paren_string) '(')\n       (loop (cdr paren_string) (+ 1 levels))]\n\
    \      [(equal? (car paren_string) ')')\n       (loop (cdr paren_string) (- 1\
    \ levels))]\n      [else\n       (loop (cdr paren_string) (+ 1 levels))])))\n",
  "  (let loop ((parens paren_string)\n             (level 0))\n    (cond\n      [(empty?\
    \ parens) level]\n      [(char=? (first parens) '(') (loop (rest parens) (add1\
    \ level))]\n      [(char=? (first parens) '(') (loop (rest parens) (add1 level))]\n\
    \      [(char=? (first parens) '(') (loop (rest parens) (add1 level))]\n     \
    \ [(char=? (first parens) '(') (loop (rest parens) (add1 level))]\n      [(char=?\
    \ (first parens) '(') (loop (rest parens) (add1 level))]\n      [(char=? (first\
    \ parens) '(') (loop (rest parens) (add1 level))]\n      [(char=? (first parens)\
    \ '(') (loop (rest parens) (add1 level))]\n      [(char=? (first parens) '(')\
    \ (loop (rest parens) (add1 level))]\n      [(char=? (first parens) '(') (loop\
    \ (rest parens) (add1 level))]\n      [(char=? (first parens) '(') (loop (rest\
    \ parens) (add1 level))]\n      [(char=? (first parens) '(') (loop (rest parens)\
    \ (add1 level))]\n      [(char=? (first parens) '(') (loop (rest parens) (add1\
    \ level))]\n      [(char=? (first parens) '(') (loop (rest parens) (add1 level))]\n\
    \      [(char=? (first parens) '(') (loop (rest parens) (add1 level))]\n     \
    \ [(char=? (first parens) '(') (loop (rest parens) (add1 level))]\n      [(char=?\
    \ (first parens) '(') (loop (rest parens) (add1 level))]\n      [(char=? (first\
    \ parens) '(') (loop (rest parens) (add1 level))]\n      [(char=? (first parens)\
    \ '(') (loop (rest parens) (add1 level))]\n      [(char=? (first parens) '(')\
    \ (loop (rest parens) (add1 level))]\n      [(char=? (first parens) '(') (loop\
    \ (rest parens) (add1 level))]\n      [(char=? (first parens) '(') (loop (rest\
    \ parens) (add1 level))]\n      [(char=? (first parens) '(') (loop (rest parens)\
    \ (add1 level))]\n      ", "  (let loop ((paren_string paren_string)\n       \
    \      (paren_count 0))\n    (cond\n      [(empty? paren_string) paren_count]\n\
    \      [(char=? (car paren_string) '(') (loop (cdr paren_string) (add1 paren_count))]\n\
    \      [(char=? (car paren_string) ')') (loop (cdr paren_string) (sub1 paren_count))]\n\
    \      [else (loop (cdr paren_string) (add1 paren_count))]))))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n   \
    \   [(empty? paren_string) paren_count]\n      [(char? (car paren_string)) (loop\
    \ (cdr paren_string) (+ 1 paren_count))]\n      [else (loop (cdr paren_string)\
    \ (+ 1 paren_count))]))))\n", "  (let loop ((parens paren_string)\n          \
    \   (level 0))\n    (cond\n      [(empty? parens) level]\n      [(char=? (first\
    \ parens) '(') (loop (rest parens) (add1 level))]\n      [(char=? (first parens)\
    \ '(') (loop (rest parens) (add1 level))]\n      [(char=? (first parens) '(')\
    \ (loop (rest parens) (add1 level))]\n      [(char=? (first parens) '(') (loop\
    \ (rest parens) (add1 level))]\n      [(char=? (first parens) '(') (loop (rest\
    \ parens) (add1 level))]\n      [(char=? (first parens) '(') (loop (rest parens)\
    \ (add1 level))]\n      [(char=? (first parens) '(') (loop (rest parens) (add1\
    \ level))]\n      [(char=? (first parens) '(') (loop (rest parens) (add1 level))]\n\
    \      [(char=? (first parens) '(') (loop (rest parens) (add1 level))]\n     \
    \ [(char=? (first parens) '(') (loop (rest parens) (add1 level))]\n      [(char=?\
    \ (first parens) '(') (loop (rest parens) (add1 level))]\n      [(char=? (first\
    \ parens) '(') (loop (rest parens) (add1 level))]\n      [(char=? (first parens)\
    \ '(') (loop (rest parens) (add1 level))]\n      [(char=? (first parens) '(')\
    \ (loop (rest parens) (add1 level))]\n      [(char=? (first parens) '(') (loop\
    \ (rest parens) (add1 level))]\n      [(char=? (first parens) '(') (loop (rest\
    \ parens) (add1 level))]\n      [(char=? (first parens) '(') (loop (rest parens)\
    \ (add1 level))]\n      [(char=? (first parens) '(') (loop (rest parens) (add1\
    \ level))]\n      [(char=? (first parens) '(') (loop (rest parens) (add1 level))]\n\
    \      [(char=? (first parens) '(') (loop (rest parens) (add1 level))]\n     \
    \ [(char=? (first parens) '(') (loop (rest parens) (add1 level))]\n      [(char=?\
    \ (first parens) '(') (loop (rest parens) (add1 level))]\n      ", "  (let loop\
    \ ((paren_string paren_string)\n             (result '()))\n    (cond\n      [(empty?\
    \ paren_string) result]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (cons result (parse_nested_parens (rest paren_string))))]\n      [(char= (first\
    \ paren_string) '(') (loop (rest paren_string) (cons (first paren_string) (loop\
    \ (rest paren_string) (cons (first paren_string) (loop (rest paren_string) (cons\
    \ (first paren_string) (loop (rest paren_string) (cons (first paren_string) (loop\
    \ (rest paren_string) (cons (first paren_string) (loop (rest paren_string) (cons\
    \ (first paren_string) (loop (rest paren_string) (cons (first paren_string) (loop\
    \ (rest paren_string) (cons (first paren_string) (loop (rest paren_string) (cons\
    \ (first paren_string) (loop (rest paren_string) (cons (first paren_string) (loop\
    \ (rest paren_string) (cons (first paren_string) (loop (rest paren_string) (cons\
    \ (first paren_string) (loop (rest paren_string) (cons (first paren_string) (loop\
    \ (rest paren_string) (cons (first paren_string) (loop (rest paren_string) (cons\
    \ (first paren_string) (loop (rest paren_string) (cons (first paren_string) (loop\
    \ (rest paren_string) (cons (first paren_string) (loop (rest paren_string) (cons\
    \ (first paren_string) (loop (rest paren_string) (cons (first paren_string) (loop\
    \ (rest paren_string) (cons (first paren_string) (loop (rest paren_string) (cons\
    \ (first paren_string) (loop (rest paren_string) (cons (first paren_string) (loop\
    \ (rest paren_string) (cons (first paren_string) (loop (rest paren_string) (cons\
    \ (first paren_string) (loop (rest paren_string) (cons (first paren_string) (loop\
    \ (rest paren_string) (cons (first paren_string) (loop (rest paren_string) (cons\
    \ (first paren_string) (loop (rest paren_string) (cons (first paren_string) (loop\
    \ (rest paren_string) (cons (first paren_string) (loop (rest paren_string) (cons\
    \ (first paren_string) (loop (rest paren_string) (cons (first paren_string) (loop\
    \ (rest paren_string) (cons (first paren_string) (loop (rest paren_string) (cons\
    \ (first paren_string) (loop (rest paren_string) (cons (first paren_string) (loop\
    \ (rest paren_string) (cons (first paren_string) (loop (rest paren_string) (cons\
    \ (first paren_string) (loop (rest paren_string) (", "  (let loop ((paren_string\
    \ paren_string)\n             (levels 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (reverse levels)]\n      [(char=? (car paren_string) '(')\n       (loop\
    \ (cdr paren_string) (+ 1 levels))]\n      [(char=? (car paren_string) ')')\n\
    \       (loop (cdr paren_string) (- 1 levels))]\n      [else\n       (loop (cdr\
    \ paren_string) (+ 1 levels))])))\n", "  (let loop ((paren_string paren_string)\n\
    \             (paren_count 0))\n    (cond\n      [(empty? paren_string) paren_count]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n",
  "  (let loop ((paren_string paren_string)\n             (level 0))\n    (cond\n\
    \      [(empty? paren_string)\n       (reverse level)]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string)\n             (add1 level))]\n\
    \      [else\n       (loop (rest paren_string)\n             (add1 level))])))\n",
  "  (let loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n\
    \      [(empty? paren_string) 0]\n      [(equal? (car paren_string) '(') (add1\
    \ paren_count)\n       (loop (cdr paren_string) (add1 paren_count))]\n      [(equal?\
    \ (car paren_string) ')') (sub1 paren_count)\n       (loop (cdr paren_string)\
    \ (sub1 paren_count))]\n      [else (loop (cdr paren_string) (add1 paren_count))]))))\n",
  "  (let loop ((paren_string paren_string)\n             (level 0))\n    (cond\n\
    \      [(empty? paren_string) level]\n      [(char=? (first paren_string) '(')\
    \ (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n", "  (let loop ((paren_string\
    \ paren_string)\n             (level 0))\n    (cond\n      [(empty? paren_string)\
    \ level]\n      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1\
    \ level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n", "  (let loop ((paren_string paren_string)\n             (levels\
    \ 0))\n    (cond\n      [(empty? paren_string) levels]\n      [(char? (car paren_string))\
    \ (loop (cdr paren_string) (+ 1 levels))]\n      [else (loop (cdr paren_string)\
    \ (+ 1 levels))])))\n", "  (let loop ((paren_string paren_string)\n          \
    \   (levels 0))\n    (cond\n      [(empty? paren_string) levels]\n      [(char=\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(char=\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(char=\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(char=\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(char=\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(char=\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(char=\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(char=\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(char=\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(char=\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(char=\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(char=\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(char=\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(char=\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(char=\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(char=\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(char=\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(char=\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(char=\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(char=\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(",
  "  (let loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n\
    \      [(empty? paren_string) paren_count]\n      [(char= (char (first paren_string))\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char= (char (first\
    \ paren_string)) ')') (loop (rest paren_string) (- 1 paren_count))]\n      [else\
    \ (loop (rest paren_string) (+ 1 paren_count))]))))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (result '()))\n    (cond\n      [(empty? paren_string)\
    \ result]\n      [(equal? (car paren_string) '(') (loop (cdr paren_string) (cons\
    \ result '())))]\n      [(equal? (car paren_string) '(') (loop (cdr paren_string)\
    \ (cons (car paren_string) (loop (cdr paren_string) '())))]\n      [(equal? (car\
    \ paren_string) ')') (loop (cdr paren_string) (cons (car paren_string) (loop (cdr\
    \ paren_string) '())))]\n      [(equal? (car paren_string) ')') (loop (cdr paren_string)\
    \ (cons result (loop (cdr paren_string) '())))]\n      [else (loop (cdr paren_string)\
    \ (cons (car paren_string) (loop (cdr paren_string) '())))]\n    )\n  )\n)\n",
  "  (let loop ((paren_string paren_string)\n             (levels 0))\n    (cond\n\
    \      [(empty? paren_string) levels]\n      [(char=? (first paren_string) '(')\
    \ (loop (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [else (loop (rest paren_string)\
    \ (add1 levels))]))))\n", "  (let loop ((paren_string paren_string)\n        \
    \     (levels 0))\n    (cond\n      [(empty? paren_string) levels]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]", "  (let\
    \ loop ((parens paren_string)\n             (level 0))\n    (cond\n      [(empty?\
    \ parens) level]\n      [(equal? (first parens) '(') (loop (rest parens) (add1\
    \ level))]\n      [(equal? (first parens) '(') (loop (rest parens) level)]\n \
    \     [(equal? (first parens) ')') (loop (rest parens) (sub1 level))]\n      [(equal?\
    \ (first parens) ')') (loop (rest parens) level)]\n      [else (loop (rest parens)\
    \ level)])))\n", "  (let loop ((paren_string paren_string)\n             (paren_count\
    \ 0))\n    (cond\n      [(empty? paren_string) paren_count]\n      [(char=? (car\
    \ paren_string) '(') (loop (cdr paren_string) (+ 1 paren_count))]\n      [(char=?\
    \ (car paren_string) ')') (loop (cdr paren_string) (- 1 paren_count))]\n     \
    \ [else (loop (cdr paren_string) paren_count)]))))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (level 0))\n    (cond\n      [(empty? paren_string)\
    \ level]\n      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1\
    \ level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]", "  (let loop ((paren_string paren_string)\n             (level\
    \ 0))\n    (cond\n      [(empty? paren_string) level]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n", "  (let loop ((paren_string\
    \ paren_string)\n             (levels 0))\n    (cond\n      [(empty? paren_string)\
    \ levels]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(", "  (let loop ((paren_string paren_string)\n    \
    \         (level 0))\n    (cond\n      [(empty? paren_string) level]\n      [(char?\
    \ (car paren_string)) (loop (cdr paren_string) (+ level 1))]\n      [else (loop\
    \ (cdr paren_string) (+ level 1))])))\n", "  (let loop ((paren_string paren_string)\n\
    \             (level 0))\n    (cond\n      [(empty? paren_string) level]\n   \
    \   [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]",
  "  (let loop ((paren_string paren_string)\n             (level 0))\n    (cond\n\
    \      [(empty? paren_string)\n       (list)\n       ]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ level 1))\n       ]\n\
    \      [else\n       (loop (rest paren_string) (+ level 1))\n       ]\n      )\n\
    \    )\n  )\n", "  (let loop ((parens paren_string)\n             (result '()))\n\
    \    (cond\n      [(empty? parens) result]\n      [(char? (car parens)) (loop\
    \ (cdr parens) (cons 1 (loop (cdr parens) result)))]\n      [else (loop (cdr parens)\
    \ (cons (car parens) result))])))\n", "  (let loop ((paren_string paren_string)\n\
    \             (paren_count 0))\n    (cond\n      [(empty? paren_string)\n    \
    \   (list paren_count)]\n      [(equal? (car paren_string) '(')\n       (loop\
    \ (cdr paren_string)\n             (+ paren_count 1))]\n      [(equal? (car paren_string)\
    \ ')')\n       (loop (cdr paren_string)\n             (- paren_count 1))]\n  \
    \    [else\n       (loop (cdr paren_string)\n             (+ paren_count 1))])))\n",
  "  (let ((paren_stack (make-array '(0 '())))\n        (paren_count 0))\n    (loop\n\
    \       for i from 0 to (length paren_string)\n       for char from (char-code\
    \ (char-at paren_string i))\n       while (char-at paren_string i)\n       for\
    \ char from (char-code (char-at paren_string i))\n       while (char-at paren_string\
    \ i)\n       for char from (char-code (char-at paren_string i))\n       while\
    \ (char-at paren_string i)\n       for char from (char-code (char-at paren_string\
    \ i))\n       while (char-at paren_string i)\n       for char from (char-code\
    \ (char-at paren_string i))\n       while (char-at paren_string i)\n       for\
    \ char from (char-code (char-at paren_string i))\n       while (char-at paren_string\
    \ i)\n       for char from (char-code (char-at paren_string i))\n       while\
    \ (char-at paren_string i)\n       for char from (char-code (char-at paren_string\
    \ i))\n       while (char-at paren_string i)\n       for char from (char-code\
    \ (char-at paren_string i))\n       while (char-at paren_string i)\n       for\
    \ char from (char-code (char-at paren_string i))\n       while (char-at paren_string\
    \ i)\n       for char from (char-code (char-at paren_string i))\n       while\
    \ (char-at paren_string i)\n       for char from (char-code (char-at paren_string\
    \ i))\n       while (char-at paren_string i)\n       for char from (char-code\
    \ (char-at paren_string i))\n       while (char-at paren_string i)\n       for\
    \ char from (char-code (char-at paren_string i))\n       while (char-at paren_string\
    \ i)\n       for char from (char-code (char-at paren_string i))\n       while\
    \ (char-at paren_string i)\n       for char from (char-code (char-at paren_string\
    \ i))\n       while (char-at paren_string i)\n       for char from (char-code\
    \ (char-at paren_string i))\n       while (char-at paren_string i)\n       for\
    \ char from (char-code (char-at paren_string i))\n       while (char-at paren_string\
    \ i)\n       for char from (char-code (char-at paren_string i))\n       while\
    \ (char-at paren_string i)\n       ", "  (let loop ((parens paren_string)\n  \
    \           (level 0))\n    (cond\n      [(empty? parens) level]\n      [(equal?\
    \ (first parens) '(') (loop (rest parens) (add1 level))]\n      [(equal? (first\
    \ parens) '(') (loop (rest parens) (add1 level))]\n      [(equal? (first parens)\
    \ '(') (loop (rest parens) (add1 level))]\n      [(equal? (first parens) '(')\
    \ (loop (rest parens) (add1 level))]\n      [(equal? (first parens) '(') (loop\
    \ (rest parens) (add1 level))]\n      [(equal? (first parens) '(') (loop (rest\
    \ parens) (add1 level))]\n      [(equal? (first parens) '(') (loop (rest parens)\
    \ (add1 level))]\n      [(equal? (first parens) '(') (loop (rest parens) (add1\
    \ level))]\n      [(equal? (first parens) '(') (loop (rest parens) (add1 level))]\n\
    \      [(equal? (first parens) '(') (loop (rest parens) (add1 level))]\n     \
    \ [(equal? (first parens) '(') (loop (rest parens) (add1 level))]\n      [(equal?\
    \ (first parens) '(') (loop (rest parens) (add1 level))]\n      [(equal? (first\
    \ parens) '(') (loop (rest parens) (add1 level))]\n      [(equal? (first parens)\
    \ '(') (loop (rest parens) (add1 level))]\n      [(equal? (first parens) '(')\
    \ (loop (rest parens) (add1 level))]\n      [(equal? (first parens) '(') (loop\
    \ (rest parens) (add1 level))]\n      [(equal? (first parens) '(') (loop (rest\
    \ parens) (add1 level))]\n      [(equal? (first parens) '(') (loop (rest parens)\
    \ (add1 level))]\n      [(equal? (first parens) '(') (loop (rest parens) (add1\
    \ level))]\n      [(equal? (first parens) '(') (loop (rest parens) (add1 level))]\n\
    \      [(equal? (first parens) '(') (loop (rest parens) (add1 level))]\n     \
    \ [(equal? (first parens) '(') (loop (rest parens) (add1 level))]\n      [(equal?\
    \ (first parens) '(') (loop (rest parens) (add1 level))]\n      [(", "  (let loop\
    \ ((parens paren_string)\n             (level 0))\n    (cond\n      [(empty? parens)\
    \ level]\n      [(char=? (first parens) '(') (loop (rest parens) (+ level 1))]\n\
    \      [(char=? (first parens) '(') (loop (rest parens) level)]\n      [(char=?\
    \ (first parens) ')') (loop (rest parens) (- level 1))]\n      [(char=? (first\
    \ parens) ')') (loop (rest parens) level)]\n      [else (loop (rest parens) level)])))\n",
  "  (let loop ((paren_string paren_string)\n             (levels 0))\n    (cond\n\
    \      [(empty? paren_string)\n       (reverse levels)]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (add1 levels))]\n     \
    \ [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (add1\
    \ levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (add1 levels))]\n      [(equal? (first paren_string) '(')\n  \
    \     (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (add1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (add1 levels))]\n     \
    \ [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (add1\
    \ levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (add1 levels))]\n      [(equal? (first paren_string) '(')\n  \
    \     (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (add1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (add1 levels))]\n     \
    \ [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (add1\
    \ levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (add1 levels))]\n      [(equal? (", "  (let loop ((paren_string\
    \ paren_string)\n             (levels 0))\n    (cond\n      [(empty? paren_string)\
    \ levels]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(", "  (let loop ((paren_string paren_string)\n    \
    \         (level 0))\n    (cond\n      [(empty? paren_string)\n       (list level)]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (add1\
    \ level))]\n      [else\n       (loop (rest paren_string) (add1 level))]))))\n",
  "  (let loop ((paren_string paren_string)\n             (level 0))\n    (cond\n\
    \      [(empty? paren_string) level]\n      [(char=? (first paren_string) '(')\
    \ (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n", "  (let ((levels ()))\n  \
    \  (let loop ((paren_string paren_string)\n               (level 0))\n      (cond\n\
    \        ((null? paren_string) levels)\n        ((char=? (car paren_string) '(')\
    \ (loop (cdr paren_string) (add1 level)))\n        ((char=? (car paren_string)\
    \ ')') (loop (cdr paren_string) (sub1 level)))\n        (else (loop (cdr paren_string)\
    \ (add1 level))))))\n  (apply max levels))\n", "  (let loop ((paren_string paren_string)\n\
    \             (result '()))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ result)\n       ]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (cons (length (first paren_string)) result))]\n      [(equal?\
    \ (first paren_string) ')')\n       (loop (rest paren_string) (cons (length (first\
    \ paren_string)) result))]\n      [else\n       (loop (rest paren_string) (cons\
    \ (length (first paren_string)) result))]\n      )\n      )\n    )\n  )\n", " \
    \ (let loop ((paren_string paren_string)\n             (level 0))\n    (cond\n\
    \      [(empty? paren_string) level]\n      [(char=? (first paren_string) '(')\
    \ (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n", "  (let loop ((paren_string\
    \ paren_string)\n             (level 0))\n    (cond\n      [(empty? paren_string)\
    \ level]\n      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1\
    \ level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 level))]", "  (let loop ((paren_string paren_string)\n             (paren_count\
    \ 0))\n    (cond\n      [(empty? paren_string) paren_count]\n      [(equal? (first\
    \ paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n      [(equal?\
    \ (first paren_string) ')') (loop (rest paren_string) (sub1 paren_count))]\n \
    \     [else (loop (rest paren_string) (add1 paren_count))]))))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (levels 0))\n    (cond\n      [(empty?\
    \ paren_string)\n       (reverse levels)]\n      [(equal? (car paren_string) '(')\n\
    \       (loop (cdr paren_string) (+ 1 levels))]\n      [(equal? (car paren_string)\
    \ ')')\n       (loop (cdr paren_string) levels)]\n      [else\n       (loop (cdr\
    \ paren_string) (+ 1 levels))])))\n", "  (let loop ((parens paren_string)\n  \
    \           (level 0))\n    (cond\n      [(empty? parens) level]\n      [(char=?\
    \ (first parens) '(') (loop (rest parens) (add1 level))]\n      [(char=? (first\
    \ parens) '(') (loop (rest parens) (add1 level))]\n      [(char=? (first parens)\
    \ '(') (loop (rest parens) (add1 level))]\n      [(char=? (first parens) '(')\
    \ (loop (rest parens) (add1 level))]\n      [(char=? (first parens) '(') (loop\
    \ (rest parens) (add1 level))]\n      [(char=? (first parens) '(') (loop (rest\
    \ parens) (add1 level))]\n      [(char=? (first parens) '(') (loop (rest parens)\
    \ (add1 level))]\n      [(char=? (first parens) '(') (loop (rest parens) (add1\
    \ level))]\n      [(char=? (first parens) '(') (loop (rest parens) (add1 level))]\n\
    \      [(char=? (first parens) '(') (loop (rest parens) (add1 level))]\n     \
    \ [(char=? (first parens) '(') (loop (rest parens) (add1 level))]\n      [(char=?\
    \ (first parens) '(') (loop (rest parens) (add1 level))]\n      [(char=? (first\
    \ parens) '(') (loop (rest parens) (add1 level))]\n      [(char=? (first parens)\
    \ '(') (loop (rest parens) (add1 level))]\n      [(char=? (first parens) '(')\
    \ (loop (rest parens) (add1 level))]\n      [(char=? (first parens) '(') (loop\
    \ (rest parens) (add1 level))]\n      [(char=? (first parens) '(') (loop (rest\
    \ parens) (add1 level))]\n      [(char=? (first parens) '(') (loop (rest parens)\
    \ (add1 level))]\n      [(char=? (first parens) '(') (loop (rest parens) (add1\
    \ level))]\n      [(char=? (first parens) '(') (loop (rest parens) (add1 level))]\n\
    \      [(char=? (first parens) '(') (loop (rest parens) (add1 level))]\n     \
    \ [(char=? (first parens) '(') (loop (rest parens) (add1 level))]\n      ", " \
    \ (let loop ((paren_string paren_string)\n             (levels 0))\n    (cond\n\
    \      [(empty? paren_string) levels]\n      [(char= (char (first paren_string))\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(char= (char (first paren_string))\
    \ ')') (loop (rest paren_string) (sub1 levels))]\n      [else (loop (rest paren_string)\
    \ (add1 levels))])))\n", "  (let loop ((paren_string paren_string)\n         \
    \    (level 0))\n    (cond\n      [(empty? paren_string)\n       (reverse level)]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ level 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ level 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ level 1))]\n      [(equal? (first paren_string) '(')\n    \
    \   (loop (rest paren_string) (+ level 1))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ level 1))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ level 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ level 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ level 1))]\n      [(equal? (first paren_string) '(')\n    \
    \   (loop (rest paren_string) (+ level 1))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ level 1))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ level 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ level 1))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ level 1))]\n      [(equal? (first paren_string) '(')\n    \
    \   (loop (rest paren_string) (+ level 1))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ level 1))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ level 1))]\n", "  (let\
    \ loop ((paren_string paren_string)\n             (levels 0))\n    (cond\n   \
    \   [(empty? paren_string) levels]\n      [(char=? (first paren_string) '(') (loop\
    \ (rest paren_string) (add1 levels))]\n      [(char=? (first paren_string) ')')\
    \ (loop (rest paren_string) (sub1 levels))]\n      [else (loop (rest paren_string)\
    \ (add1 levels))])))\n", "  (let loop ((paren_string paren_string)\n         \
    \    (level 0))\n    (cond\n      [(empty? paren_string) level]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n", "  (let\
    \ loop ((paren_string paren_string)\n             (result '()))\n    (cond\n \
    \     [(empty? paren_string) result]\n      [(char? (car paren_string)) (loop\
    \ (cdr paren_string) (cons (car paren_string) result))]\n      [else (loop (cdr\
    \ paren_string) (cons (loop (cdr paren_string) '()) result))])))\n", "  (let loop\
    \ ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n   \
    \   [(empty? paren_string) paren_count]\n      [(equal? (first paren_string) '(')\
    \ (loop (rest paren_string) (+ 1 paren_count))]\n      [(equal? (first paren_string)\
    \ ')') (loop (rest paren_string) (- 1 paren_count))]\n      [else (loop (rest\
    \ paren_string) (+ 1 paren_count))]))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (level 0))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ level)]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (add1 level))]\n      [(equal? (first paren_string) ')')\n       (loop (rest\
    \ paren_string) (sub1 level))]\n      [else\n       (loop (rest paren_string)\
    \ (add1 level))])))\n", "  (let loop ((paren_string paren_string)\n          \
    \   (paren_count 0))\n    (if (empty? paren_string)\n        paren_count\n   \
    \     (loop (rest paren_string)\n              (+ paren_count (parse-parens (first\
    \ paren_string)))))))\n", "  (let loop ((paren_string paren_string)\n        \
    \     (level 0))\n    (cond\n      [(empty? paren_string)\n       (reverse level)]\n\
    \      [(equal? (car paren_string) '(')\n       (loop (cdr paren_string) (+ level\
    \ 1))]\n      [(equal? (car paren_string) ')')\n       (loop (cdr paren_string)\
    \ (- level 1))]\n      [else\n       (loop (cdr paren_string) (+ level 1))])))\n",
  "  (let loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n\
    \      [(empty? paren_string) 0]\n      [(char=? (first paren_string) '(') (loop\
    \ (rest paren_string) (add1 paren_count))]\n      [(char=? (first paren_string)\
    \ ')') (loop (rest paren_string) (sub1 paren_count))]\n      [else (loop (rest\
    \ paren_string) (add1 paren_count))]))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (paren_count 0))\n    (cond\n      [(empty? paren_string) paren_count]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n",
  "  (let loop ((paren_string paren_string)\n             (level 0))\n    (cond\n\
    \      [(empty? paren_string) level]\n      [(equal? (car paren_string) '(') (loop\
    \ (cdr paren_string) (add1 level))]\n      [(equal? (car paren_string) ')') (loop\
    \ (cdr paren_string) (sub1 level))]\n      [else (loop (cdr paren_string) (add1\
    \ level))]))))\n", "  (let loop ((paren_string paren_string)\n             (level\
    \ 0))\n    (cond\n      [(empty? paren_string) level]\n      [(char=? (car paren_string)\
    \ '(') (loop (cdr paren_string) (add1 level))]\n      [(char=? (car paren_string)\
    \ ')') (loop (cdr paren_string) (sub1 level))]\n      [else (loop (cdr paren_string)\
    \ (add1 level))]))))\n", "  (let loop ((paren_string paren_string)\n         \
    \    (paren_count 0))\n    (cond\n      [(empty? paren_string) paren_count]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (+ 1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (+ 1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (+ 1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (+ 1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (+ 1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (+ 1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (+ 1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (+ 1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (+ 1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (+ 1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (+ 1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (+ 1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (+ 1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (+ 1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (+ 1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (+ 1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (+ 1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (+ 1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (+ 1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (+ 1 paren_count))]\n",
  "  (let loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n\
    \      [(empty? paren_string)\n       (reverse (list paren_count))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(equal? (first paren_string) ')')\n       (loop (rest paren_string) (sub1\
    \ paren_count))]\n      [else\n       (loop (rest paren_string) (add1 paren_count))]))))\n",
  "  (let loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n\
    \      [(empty? paren_string) paren_count]\n      [(char? (car paren_string))\
    \ (loop (cdr paren_string)\n                                        (+ paren_count\
    \ 1))]\n      [else (loop (cdr paren_string)\n                 (+ paren_count\
    \ 1))])))\n", "  (let loop ((paren_string paren_string)\n             (level 0))\n\
    \    (cond\n      [(empty? paren_string) level]\n      [(char? (car paren_string))\
    \ (loop (cdr paren_string) (+ level 1))]\n      [else (loop (cdr paren_string)\
    \ (+ level 1))])))\n", "  (let loop ((paren_string paren_string)\n           \
    \  (levels 0))\n    (cond\n      [(empty? paren_string) levels]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(equal?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [else\
    \ (loop (rest paren_string) (add1 levels))])))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_count 0))\n    (cond\n      [(empty? paren_string)\
    \ paren_count]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ 1 paren_count))]\n", "  (let loop ((paren_string paren_string)\n        \
    \     (level 0))\n    (cond\n      [(empty? paren_string) level]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n", "  (let\
    \ ((levels ()))\n    (if (empty? paren_string)\n        levels\n        (let ((char\
    \ (car paren_string)))\n          (if (char= char #\\)\n              (let ((level\
    \ (+ 1 (length levels))))\n                (cons level (parse_nested_parens (cdr\
    \ paren_string))))\n              (let ((level (+ 1 (length levels))))\n     \
    \           (cons level (parse_nested_parens (cdr paren_string)))))\n        \
    \  (let ((level (+ 1 (length levels))))\n            (cons level (parse_nested_parens\
    \ (cdr paren_string))))))))\n", "  (let loop ((paren_string paren_string)\n  \
    \           (levels 0))\n    (cond\n      [(empty? paren_string) levels]\n   \
    \   [(char= (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(", "  (let loop ((parens paren_string)\n             (level 0))\n   \
    \ (cond\n      [(empty? parens) level]\n      [(equal? (first parens) '(') (loop\
    \ (rest parens) (+ level 1)))]\n      [(equal? (first parens) '(') (loop (rest\
    \ parens) level)]\n      [(equal? (first parens) ')') (loop (rest parens) (- level\
    \ 1))]\n      [(equal? (first parens) ')') (loop (rest parens) level)]\n     \
    \ [else (loop (rest parens) level)])))\n", "  (let loop ((paren_string paren_string)\n\
    \             (levels 0))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ levels)]\n      [(equal? (car paren_string) '(')\n       (loop (cdr paren_string)\
    \ (+ 1 levels))]\n      [(equal? (car paren_string) ')')\n       (loop (cdr paren_string)\
    \ (- 1 levels))]\n      [else\n       (loop (cdr paren_string) (+ 1 levels))])))\n",
  "  (let loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n\
    \      [(empty? paren_string) paren_count]\n      [(char=? (car paren_string)\
    \ '(') (loop (cdr paren_string) (add1 paren_count))]\n      [(char=? (car paren_string)\
    \ ')') (loop (cdr paren_string) (sub1 paren_count))]\n      [else (loop (cdr paren_string)\
    \ (add1 paren_count))]))))\n", "  (let loop ((paren_string paren_string)\n   \
    \          (level 0))\n    (cond\n      [(empty? paren_string) level]\n      [(char?\
    \ (car paren_string)) (loop (cdr paren_string) (+ level 1))]\n      [else (loop\
    \ (cdr paren_string) (+ level 1))])))\n", "  (let loop ((paren_string paren_string)\n\
    \             (levels 0))\n    (cond\n      [(empty? paren_string) levels]\n \
    \     [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 levels))]",
  "  (let loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n\
    \      [(empty? paren_string) paren_count]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren", "  (let loop ((paren_string paren_string)\n\
    \             (level 0))\n    (cond\n      [(empty? paren_string)\n       (list\
    \ level)]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (add1 level))]\n      [else\n       (loop (rest paren_string) (add1 level))]))))\n",
  "  (let loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n\
    \      [(empty? paren_string) paren_count]\n      [(char? (car paren_string))\
    \ (loop (cdr paren_string) (+ 1 paren_count))]\n      [else (loop (cdr paren_string)\
    \ (+ 1 paren_count))]))))\n", "  (let loop ((paren_string paren_string)\n    \
    \         (paren_count 0))\n    (cond\n      [(empty? paren_string) 0]\n     \
    \ [(equal? (first paren_string) '(') (add1 paren_count)\n       (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(equal? (first paren_string) ')') (sub1 paren_count)\n\
    \       (loop (rest paren_string) (sub1 paren_count))]\n      [else (loop (rest\
    \ paren_string) (add1 paren_count))]))))\n", "  (let loop ((paren_string paren_string)\n\
    \             (levels 0))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ levels)]\n      [(equal? (car paren_string) '(')\n       (loop (cdr paren_string)\n\
    \             (+ 1 levels))]\n      [(equal? (car paren_string) ')')\n       (loop\
    \ (cdr paren_string)\n             (- 1 levels))]\n      [else\n       (loop (cdr\
    \ paren_string)\n             (+ 1 levels))])))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_count 0))\n    (cond\n      [(empty? paren_string)\
    \ paren_count]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n", "  (let loop ((paren_string paren_string)\n       \
    \      (paren_count 0))\n    (cond\n      [(empty? paren_string) paren_count]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 paren_count))]\n",
  "  (let loop ((parens paren_string)\n             (level 0))\n    (cond\n      [(empty?\
    \ parens) level]\n      [(char=? (car parens) '(') (loop (cdr parens) (+ level\
    \ 1))]\n      [(char=? (car parens) '(') (loop (cdr parens) level)]\n      [else\
    \ (loop (cdr parens) level)])))\n", "  (let ((levels ()))\n    (cond\n      [(empty?\
    \ paren_string) levels]\n      [(equal? (car paren_string) '(') (add1 levels)]\n\
    \      [(equal? (car paren_string) '(') (add1 levels)]\n      [(equal? (car paren_string)\
    \ '(') (add1 levels)]\n      [(equal? (car paren_string) '(') (add1 levels)]\n\
    \      [(equal? (car paren_string) '(') (add1 levels)]\n      [(equal? (car paren_string)\
    \ '(') (add1 levels)]\n      [(equal? (car paren_string) '(') (add1 levels)]\n\
    \      [(equal? (car paren_string) '(') (add1 levels)]\n      [(equal? (car paren_string)\
    \ '(') (add1 levels)]\n      [(equal? (car paren_string) '(') (add1 levels)]\n\
    \      [(equal? (car paren_string) '(') (add1 levels)]\n      [(equal? (car paren_string)\
    \ '(') (add1 levels)]\n      [(equal? (car paren_string) '(') (add1 levels)]\n\
    \      [(equal? (car paren_string) '(') (add1 levels)]\n      [(equal? (car paren_string)\
    \ '(') (add1 levels)]\n      [(equal? (car paren_string) '(') (add1 levels)]\n\
    \      [(equal? (car paren_string) '(') (add1 levels)]\n      [(equal? (car paren_string)\
    \ '(') (add1 levels)]\n      [(equal? (car paren_string) '(') (add1 levels)]\n\
    \      [(equal? (car paren_string) '(') (add1 levels)]\n      [(equal? (car paren_string)\
    \ '(') (add1 levels)]\n      [(equal? (car paren_string) '(') (add1 levels)]\n\
    \      [(equal? (car paren_string) '(') (add1 levels)]\n      [(equal? (car paren_string)\
    \ '(') (add1 levels)]\n      [(equal? (car paren_string) '(') (add1 levels)]\n\
    \      [(equal? (car paren_string) '(') (add1 levels)]\n      [(equal? (car paren_string)\
    \ '(') (add1 levels)]\n      [(equal? (car paren_string) '(') (add1 levels)]\n\
    \      [(equal? (car paren_string) '(') (add1 levels)]", "  (let loop ((paren_string\
    \ paren_string)\n             (levels 0))\n    (cond\n      [(empty? paren_string)\
    \ levels]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]", "  (let loop ((paren_string paren_string)\n             (levels\
    \ 0))\n    (cond\n      [(empty? paren_string)\n       (reverse levels)]\n   \
    \   [(char= (char (first paren_string)) '(')\n       (loop (rest paren_string)\
    \ (+ 1 levels))]\n      [(char= (char (first paren_string)) ')')\n       (loop\
    \ (rest paren_string) (- 1 levels))]\n      [else\n       (loop (rest paren_string)\
    \ (+ 1 levels))]\n    )\n  )\n)\n", "  (let loop ((paren_string paren_string)\n\
    \             (levels 0))\n    (cond\n      [(empty? paren_string) levels]\n \
    \     [(char? (car paren_string)) (loop (cdr paren_string) (add1 levels))]\n \
    \     [else (loop (cdr paren_string) (add1 levels))]))))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (levels 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (reverse levels)]\n      [(char=? (first paren_string) '(')\n       (loop\
    \ (rest paren_string)\n             (+ 1 levels))]\n      [(char=? (first paren_string)\
    \ '(')\n       (loop (rest paren_string)\n             (+ 1 levels))]\n      [(char=?\
    \ (first paren_string) '(')\n       (loop (rest paren_string)\n             (+\
    \ 1 levels))]\n      [(char=? (first paren_string) '(')\n       (loop (rest paren_string)\n\
    \             (+ 1 levels))]\n      [(char=? (first paren_string) '(')\n     \
    \  (loop (rest paren_string)\n             (+ 1 levels))]\n      [(char=? (first\
    \ paren_string) '(')\n       (loop (rest paren_string)\n             (+ 1 levels))]\n\
    \      [(char=? (first paren_string) '(')\n       (loop (rest paren_string)\n\
    \             (+ 1 levels))]\n      [(char=? (first paren_string) '(')\n     \
    \  (loop (rest paren_string)\n             (+ 1 levels))]\n      [(char=? (first\
    \ paren_string) '(')\n       (loop (rest paren_string)\n             (+ 1 levels))]\n\
    \      [(char=? (first paren_string) '(')\n       (loop (rest paren_string)\n\
    \             (+ 1 levels))]\n      [(char=? (first paren_string) '(')\n     \
    \  (loop (rest paren_string)\n             (+ 1 levels))]\n      [(char=? (first\
    \ paren_string) '(')\n       (loop (rest paren_string)\n             (+ 1 levels))]\n\
    \      [(char=? (first paren_string) '(')\n       (loop (rest paren_string)\n\
    \             (+ 1 levels))]\n      [(char=? (first paren_string) '(')\n     \
    \  (loop (rest paren_string)\n             (+ 1 levels))]\n      [(char=? (first\
    \ paren_string) '(')\n       (loop (rest paren_string)\n             (+ 1 levels))]\n\
    \      [(char=? (first paren_string) '(')\n       (loop (rest paren_string)\n\
    \             (+ 1 levels))]\n      [(char=? (first paren_string) '(')\n     \
    \  (loop (rest paren_string)\n             (+ 1 levels))]\n      [(char", "  (let\
    \ loop ((paren_string paren_string)\n             (levels 0))\n    (cond\n   \
    \   [(empty? paren_string) levels]\n      [(equal? (first paren_string) '(') (loop\
    \ (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string) '(')\
    \ (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 levels))]", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_count 0))\n    (cond\n      [(empty? paren_string)\
    \ paren_count]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ paren_count 1)))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ paren_count 1)))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ paren_count 1)))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ paren_count 1)))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ paren_count 1)))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ paren_count 1)))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ paren_count 1)))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ paren_count 1)))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ paren_count 1)))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ paren_count 1)))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ paren_count 1)))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ paren_count 1)))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ paren_count 1)))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ paren_count 1)))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ paren_count 1)))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ paren_count 1)))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ paren_count 1)))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ paren_count 1)))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ paren_count 1)))]\n      [(equal? (first paren_string) '(') (loop (rest paren_string)\
    \ (+ paren_count 1)))]\n", "  (let loop ((paren_string paren_string)\n       \
    \      (level 0))\n    (cond\n      [(empty? paren_string)\n       (reverse level)]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ level 1))]\n      [else\n       (loop (rest paren_string) (+ level 1))]\n  \
    \    )))\n", "  (let loop ((parens paren_string)\n             (levels 0))\n \
    \   (cond\n      [(empty? parens) levels]\n      [(equal? (first parens) '(')\
    \ (loop (rest parens)\n                                      (+ 1 levels))]\n\
    \      [(equal? (first parens) '(') (loop (rest parens)\n                    \
    \                  (+ 1 levels))]\n      [(equal? (first parens) '(') (loop (rest\
    \ parens)\n                                      (+ 1 levels))]\n      [(equal?\
    \ (first parens) '(') (loop (rest parens)\n                                  \
    \    (+ 1 levels))]\n      [(equal? (first parens) '(') (loop (rest parens)\n\
    \                                      (+ 1 levels))]\n      [(equal? (first parens)\
    \ '(') (loop (rest parens)\n                                      (+ 1 levels))]\n\
    \      [(equal? (first parens) '(') (loop (rest parens)\n                    \
    \                  (+ 1 levels))]\n      [(equal? (first parens) '(') (loop (rest\
    \ parens)\n                                      (+ 1 levels))]\n      [(equal?\
    \ (first parens) '(') (loop (rest parens)\n                                  \
    \    (+ 1 levels))]\n      [(equal? (first parens) '(') (loop (rest parens)\n\
    \                                      (+ 1 levels))]\n      [(equal? (first parens)\
    \ '(') (loop (rest parens)\n                                      (+ 1 levels))]\n\
    \      [(equal? (first parens) '(') (loop (rest parens)\n                    \
    \                  (+ 1 levels))]\n      [(equal? (first parens) '(') (loop (rest\
    \ parens)\n                                      (+ 1 levels))]\n      [(equal?\
    \ (first parens) '(') (loop (rest parens)\n                                  \
    \    (+ 1 levels))]\n      [(equal? (first parens) '(') (loop (rest parens)\n\
    \                                      (+ 1 levels))]\n      [(equal? (first parens)\
    \ '(') (loop (rest parens)\n                                      (+ 1 levels))]\n\
    \      [(equal? (first parens) '(') (loop (rest parens)\n                    \
    \                  (+ 1 levels))]\n      [(equal? (first parens) '(') (loop (rest\
    \ parens)\n                                      (+ 1 levels))]\n      [(equal?\
    \ (first parens) '(') (loop (rest parens)\n                                  \
    \    (+ 1 levels))]\n      [(equal? (first parens) '(') (loop (rest parens)\n\
    \                                      (+ 1 levels))]\n      [(equal? (", "  (let\
    \ loop ((paren_string paren_string)\n             (paren_count 0))\n    (cond\n\
    \      [(empty? paren_string) paren_count]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n      [(char= (first paren_string)\
    \ '(') (loop (rest paren_string) (+ 1 paren_count))]\n", "  (let loop ((paren_string\
    \ paren_string)\n             (levels 0))\n    (cond\n      [(empty? paren_string)\
    \ levels]\n      [(char= (first paren_string) '(') (loop (rest paren_string) (add1\
    \ levels))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(char= (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 levels))]\n      [(", "  (let loop ((parens paren_string)\n          \
    \   (level 0))\n    (cond\n      [(empty? parens) level]\n      [(char=? (first\
    \ parens) '(') (loop (rest parens) (add1 level))]\n      [(char=? (first parens)\
    \ '(') (loop (rest parens) (add1 level))]\n      [(char=? (first parens) '(')\
    \ (loop (rest parens) (add1 level))]\n      [(char=? (first parens) '(') (loop\
    \ (rest parens) (add1 level))]\n      [(char=? (first parens) '(') (loop (rest\
    \ parens) (add1 level))]\n      [(char=? (first parens) '(') (loop (rest parens)\
    \ (add1 level))]\n      [(char=? (first parens) '(') (loop (rest parens) (add1\
    \ level))]\n      [(char=? (first parens) '(') (loop (rest parens) (add1 level))]\n\
    \      [(char=? (first parens) '(') (loop (rest parens) (add1 level))]\n     \
    \ [(char=? (first parens) '(') (loop (rest parens) (add1 level))]\n      [(char=?\
    \ (first parens) '(') (loop (rest parens) (add1 level))]\n      [(char=? (first\
    \ parens) '(') (loop (rest parens) (add1 level))]\n      [(char=? (first parens)\
    \ '(') (loop (rest parens) (add1 level))]\n      [(char=? (first parens) '(')\
    \ (loop (rest parens) (add1 level))]\n      [(char=? (first parens) '(') (loop\
    \ (rest parens) (add1 level))]\n      [(char=? (first parens) '(') (loop (rest\
    \ parens) (add1 level))]\n      [(char=? (first parens) '(') (loop (rest parens)\
    \ (add1 level))]\n      [(char=? (first parens) '(') (loop (rest parens) (add1\
    \ level))]\n      [(char=? (first parens) '(') (loop (rest parens) (add1 level))]\n\
    \      [(char=? (first parens) '(') (loop (rest parens) (add1 level))]\n     \
    \ [(char=? (first parens) '(') (loop (rest parens) (add1 level))]\n      [(char=?\
    \ (first parens) '(') (loop (rest parens) (add1 level))]\n      ", "  (let loop\
    \ ((parens paren_string)\n             (levels 0))\n    (cond\n      [(empty?\
    \ parens) levels]\n      [(equal? (car parens) '(') (loop (cdr parens) (+ 1 levels))]\n\
    \      [(equal? (car parens) ')') (loop (cdr parens) levels)]\n      [else (loop\
    \ (cdr parens) levels)]))))\n", "  (let loop ((paren_string paren_string)\n  \
    \           (levels 0))\n    (cond\n      [(empty? paren_string)\n       (reverse\
    \ levels)]\n      [(char=? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ 1 levels))]\n      [(char=? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ 1 levels))]\n      [(char=? (first paren_string) '(')\n   \
    \    (loop (rest paren_string) (+ 1 levels))]\n      [(char=? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ 1 levels))]\n      [(char=? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ 1 levels))]\n      [(char=?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ 1 levels))]\n\
    \      [(char=? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ 1 levels))]\n      [(char=? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ 1 levels))]\n      [(char=? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ 1 levels))]\n      [(char=? (first paren_string) '(')\n   \
    \    (loop (rest paren_string) (+ 1 levels))]\n      [(char=? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ 1 levels))]\n      [(char=? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ 1 levels))]\n      [(char=?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ 1 levels))]\n\
    \      [(char=? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ 1 levels))]\n      [(char=? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ 1 levels))]\n      [(char=? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ 1 levels))]\n      [(char=? (first paren_string) '(')\n   \
    \    (loop (rest paren_string) (+ 1 levels))]\n      [(char=? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ 1 levels))]\n      [(char=? (first\
    \ paren_string) '('", "  (let loop ((paren_string paren_string)\n            \
    \ (levels 0))\n    (cond\n      [(empty? paren_string) levels]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(char=?\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 levels))]\n      [(",
  "  (let loop ((paren_string paren_string)\n             (level 0))\n    (cond\n\
    \      [(empty? paren_string) level]\n      [(char=? (first paren_string) '(')\
    \ (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [else (loop (rest paren_string)\
    \ (add1 level))]))))\n", "  (let loop ((paren_string paren_string)\n         \
    \    (level 0))\n    (cond\n      [(empty? paren_string) level]\n      [(char=?\
    \ (car paren_string) '(') (loop (cdr paren_string) (+ level 1))]\n      [(char=?\
    \ (car paren_string) ')') (loop (cdr paren_string) level)]\n      [else (loop\
    \ (cdr paren_string) level)])))\n", "  (let loop ((paren_string paren_string)\n\
    \             (level 0))\n    (cond\n      [(empty? paren_string) level]\n   \
    \   [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(equal? (first paren_string) '(') (loop (rest paren_string) (add1 level))]",
  "  (let loop ((paren_string paren_string)\n             (level 0))\n    (cond\n\
    \      [(empty? paren_string) level]\n      [(char=? (first paren_string) '(')\
    \ (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n      [(char=? (first paren_string)\
    \ '(') (loop (rest paren_string) (add1 level))]\n", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_count 0))\n    (cond\n      [(empty? paren_string)\
    \ paren_count]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n      [(char=? (first paren_string) '(') (loop (rest paren_string)\
    \ (add1 paren_count))]\n", "  (let loop ((parens 0))\n    (cond\n      [(empty?\
    \ paren_string) 0]\n      [(equal? (first paren_string) '(') (loop (+ parens (1)))]\n\
    \      [(equal? (first paren_string) ')') (loop (- parens (1)))]\n      [else\
    \ (loop (+ parens (parse-parens (rest paren_string))))])))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (levels 0))\n    (cond\n      [(empty? paren_string)\n\
    \       (reverse levels)]\n      [(equal? (first paren_string) '(')\n       (loop\
    \ (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string) '(')\n\
    \       (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (add1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (add1 levels))]\n     \
    \ [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (add1\
    \ levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (add1 levels))]\n      [(equal? (first paren_string) '(')\n  \
    \     (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (add1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (add1 levels))]\n     \
    \ [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (add1\
    \ levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (add1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (add1 levels))]\n      [(equal? (first paren_string) '(')\n  \
    \     (loop (rest paren_string) (add1 levels))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (add1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (add1 levels))]\n     \
    \ [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (add1 levels))]\n\
    \      [(equal? (", "  (let loop ((paren_string paren_string)\n             (levels\
    \ 0))\n    (cond\n      [(empty? paren_string) levels]\n      [(char? (car paren_string))\
    \ (loop (cdr paren_string) (add1 levels))]\n      [else (loop (cdr paren_string)\
    \ (add1 levels))])))\n", "  (let loop ((paren_string paren_string)\n         \
    \    (levels 0))\n    (cond\n      [(empty? paren_string)\n       (reverse levels)]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ 1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n   \
    \    (loop (rest paren_string) (+ 1 levels))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ 1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ 1 levels))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ 1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ 1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n   \
    \    (loop (rest paren_string) (+ 1 levels))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ 1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ 1 levels))]\n      [(equal?\
    \ (first paren_string) '(')\n       (loop (rest paren_string) (+ 1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string) (+\
    \ 1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\
    \ (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n       (loop (rest\
    \ paren_string) (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n   \
    \    (loop (rest paren_string) (+ 1 levels))]\n      [(equal? (first paren_string)\
    \ '(')\n       (loop (rest paren_string) (+ 1 levels))]\n      [(equal? (", " \
    \ (let loop ((parens paren_string)\n             (level 0))\n    (cond\n     \
    \ [(empty? parens) level]\n      [(char= (char (first parens)) '(') (loop (rest\
    \ parens) (add1 level))]\n      [(char= (char (first parens)) '(') (loop (rest\
    \ parens) level)]\n      [(char= (char (first parens)) ')') (loop (rest parens)\
    \ (sub1 level))]\n      [(char= (char (first parens)) ')') (loop (rest parens)\
    \ level)]\n      [else (loop (rest parens) level)])))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (paren_count 0))\n    (cond\n      [(empty? paren_string)\
    \ paren_count]\n      [(char=? (car paren_string) '(') (loop (cdr paren_string)\
    \ (+ paren_count 1))]\n      [(char=? (car paren_string) ')') (loop (cdr paren_string)\
    \ paren_count)]\n      [else (loop (cdr paren_string) (+ paren_count 1))]))))\n",
  "  (let loop ((paren_string paren_string)\n             (level 0))\n    (cond\n\
    \      [(empty? paren_string)\n       (reverse level)]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string) (+ level 1))]\n      [else\n\
    \       (loop (rest paren_string) (+ level 1))]\n      )))\n", "  (let loop ((paren_string\
    \ paren_string)\n             (result '()))\n    (if (empty? paren_string)\n \
    \       result\n        (loop (rest paren_string)\n              (cons result\
    \ (loop (rest paren_string) (cons (car paren_string) result)))))))\n", "  (let\
    \ loop ((paren_string paren_string)\n             (result '()))\n    (if (empty?\
    \ paren_string)\n        result\n        (loop (rest paren_string)\n         \
    \     (cons (length (first paren_string)) result)))))\n", "  (let loop ((parens\
    \ paren_string)\n             (level 0))\n    (cond\n      [(empty? parens) level]\n\
    \      [(char=? (first parens) '(') (loop (rest parens) (add1 level))]\n     \
    \ [(char=? (first parens) '(') (loop (rest parens) (add1 level))]\n      [(char=?\
    \ (first parens) '(') (loop (rest parens) (add1 level))]\n      [(char=? (first\
    \ parens) '(') (loop (rest parens) (add1 level))]\n      [(char=? (first parens)\
    \ '(') (loop (rest parens) (add1 level))]\n      [(char=? (first parens) '(')\
    \ (loop (rest parens) (add1 level))]\n      [(char=? (first parens) '(') (loop\
    \ (rest parens) (add1 level))]\n      [(char=? (first parens) '(') (loop (rest\
    \ parens) (add1 level))]\n      [(char=? (first parens) '(') (loop (rest parens)\
    \ (add1 level))]\n      [(char=? (first parens) '(') (loop (rest parens) (add1\
    \ level))]\n      [(char=? (first parens) '(') (loop (rest parens) (add1 level))]\n\
    \      [(char=? (first parens) '(') (loop (rest parens) (add1 level))]\n     \
    \ [(char=? (first parens) '(') (loop (rest parens) (add1 level))]\n      [(char=?\
    \ (first parens) '(') (loop (rest parens) (add1 level))]\n      [(char=? (first\
    \ parens) '(') (loop (rest parens) (add1 level))]\n      [(char=? (first parens)\
    \ '(') (loop (rest parens) (add1 level))]\n      [(char=? (first parens) '(')\
    \ (loop (rest parens) (add1 level))]\n      [(char=? (first parens) '(') (loop\
    \ (rest parens) (add1 level))]\n      [(char=? (first parens) '(') (loop (rest\
    \ parens) (add1 level))]\n      [(char=? (first parens) '(') (loop (rest parens)\
    \ (add1 level))]\n      [(char=? (first parens) '(') (loop (rest parens) (add1\
    \ level))]\n      [(char=? (first parens) '(') (loop (rest parens) (add1 level))]\n\
    \      ", "  (let loop ((parens paren_string)\n             (level 0))\n    (cond\n\
    \      [(empty? parens) level]\n      [(char=? (first parens) '(') (loop (rest\
    \ parens) (add1 level))]\n      [(char=? (first parens) '(') (loop (rest parens)\
    \ (add1 level))]\n      [(char=? (first parens) '(') (loop (rest parens) (add1\
    \ level))]\n      [(char=? (first parens) '(') (loop (rest parens) (add1 level))]\n\
    \      [(char=? (first parens) '(') (loop (rest parens) (add1 level))]\n     \
    \ [(char=? (first parens) '(') (loop (rest parens) (add1 level))]\n      [(char=?\
    \ (first parens) '(') (loop (rest parens) (add1 level))]\n      [(char=? (first\
    \ parens) '(') (loop (rest parens) (add1 level))]\n      [(char=? (first parens)\
    \ '(') (loop (rest parens) (add1 level))]\n      [(char=? (first parens) '(')\
    \ (loop (rest parens) (add1 level))]\n      [(char=? (first parens) '(') (loop\
    \ (rest parens) (add1 level))]\n      [(char=? (first parens) '(') (loop (rest\
    \ parens) (add1 level))]\n      [(char=? (first parens) '(') (loop (rest parens)\
    \ (add1 level))]\n      [(char=? (first parens) '(') (loop (rest parens) (add1\
    \ level))]\n      [(char=? (first parens) '(') (loop (rest parens) (add1 level))]\n\
    \      [(char=? (first parens) '(') (loop (rest parens) (add1 level))]\n     \
    \ [(char=? (first parens) '(') (loop (rest parens) (add1 level))]\n      [(char=?\
    \ (first parens) '(') (loop (rest parens) (add1 level))]\n      [(char=? (first\
    \ parens) '(') (loop (rest parens) (add1 level))]\n      [(char=? (first parens)\
    \ '(') (loop (rest parens) (add1 level))]\n      [(char=? (first parens) '(')\
    \ (loop (rest parens) (add1 level))]\n      [(char=? (first parens) '(') (loop\
    \ (rest parens) (add1 level))]\n      ", "  (let loop ((paren_string paren_string)\n\
    \             (level 0))\n    (cond\n      [(empty? paren_string) level]\n   \
    \   [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n\
    \      [(char=? (first paren_string) '(') (loop (rest paren_string) (add1 level))]\n",
  "  (let ((levels ()))\n    (let loop ((paren_string paren_string)\n            \
    \   (level 0))\n      (cond\n        ((null? paren_string) levels)\n        ((char=\
    \ (first paren_string) '(') (loop (rest paren_string) (add1 level)))\n       \
    \ ((char= (first paren_string) '(') (loop (rest paren_string) (add1 level)))\n\
    \        (else (loop (rest paren_string) (add1 level))))))\n    levels))\n", " \
    \ (let loop ((paren_string paren_string)\n             (levels 0))\n    (cond\n\
    \      [(empty? paren_string)\n       (reverse levels)]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string)\n             (+ 1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\n\
    \             (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n     \
    \  (loop (rest paren_string)\n             (+ 1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string)\n             (+ 1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\n\
    \             (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n     \
    \  (loop (rest paren_string)\n             (+ 1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string)\n             (+ 1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\n\
    \             (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n     \
    \  (loop (rest paren_string)\n             (+ 1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string)\n             (+ 1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\n\
    \             (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n     \
    \  (loop (rest paren_string)\n             (+ 1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string)\n             (+ 1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\n\
    \             (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n     \
    \  (loop (rest paren_string)\n             (+ 1 levels))]\n      [(equal? (first\
    \ paren_string) '(')\n       (loop (rest paren_string)\n             (+ 1 levels))]\n\
    \      [(equal? (first paren_string) '(')\n       (loop (rest paren_string)\n\
    \             (+ 1 levels))]\n      [(equal? (first paren_string) '(')\n     \
    \  (loop (rest paren_string)\n", "  (let loop ((paren_string paren_string)\n \
    \            (paren_count 0))\n    (cond\n      [(empty? paren_string) paren_count]\n\
    \      [(char= (first paren_string) '(') (loop (rest paren_string) (+ paren_count\
    \ 1))]\n      [(char= (first paren_string) ')') (loop (rest paren_string) (- paren_count\
    \ 1))]\n      [else (loop (rest paren_string) paren_count)])))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
