name: HumanEval_29_filter_by_prefix
language: racket
prompt: "#lang racket\n\n;; Filter an input list of strings only for ones that start\
  \ with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>> filter_by_prefix(['abc',\
  \ 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n(define (filter_by_prefix strings\
  \ prefix)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
  \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
  \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
  \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
completions: ["  (cond [(empty? strings) strings]\n        [(equal? (first strings)\
    \ prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix (rest\
    \ strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (filter (lambda (str)\n            (string=?\
    \ prefix str))\n          strings))\n", "  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n", "  (cond [(empty?\
    \ strings) '()]\n        [(equal? (first strings) prefix) (cons (first strings)\
    \ (filter_by_prefix (rest strings) prefix))]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond\n    [(empty? strings) strings]\n   \
    \ [(equal? (first strings) prefix) (cons (first strings) strings)]\n    [else\
    \ (filter_by_prefix (rest strings) prefix)]))\n", "  (cond\n    [(empty? strings)\
    \ strings]\n    [(equal? (first strings) prefix) (cons (first strings) strings)]\n\
    \    [else (filter_by_prefix (rest strings) prefix)]))\n", "  (cond [(empty? strings)\
    \ strings]\n        [(equal? (first strings) prefix) (cons (first strings) strings)]\n\
    \        [else (filter_by_prefix (rest strings) prefix)]))\n", "  (cond\n    [(empty?\
    \ strings) strings]\n    [(equal? (first strings) prefix) (cons (first strings)\
    \ strings)]\n    [else (filter_by_prefix (rest strings) prefix)]))\n", "  (cond\
    \ [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons (first\
    \ strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond\n    [(empty? strings) strings]\n    [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n    [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (filter (lambda (x) (equal? (string-ref x 0) prefix)) strings))\n", "  (cond\
    \ [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons (first\
    \ strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond\n    [(empty? strings) strings]\n    [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n    [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond\n    [(empty? strings) strings]\n    [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n    [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) '()]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (cons (first strings)\n           \
    \         (filter_by_prefix (rest strings)\n                                 \
    \   prefix))]))\n", "  (filter (lambda (x) (string-match prefix x))\n        \
    \ strings))\n", "  (cond [(empty? strings) strings]\n        [(equal? (first strings)\
    \ prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix (rest\
    \ strings) prefix)]))\n", "  (cond\n    [(empty? strings) strings]\n    [(equal?\
    \ (first strings) prefix) (filter_by_prefix (rest strings) prefix)]\n    [else\
    \ (cons (first strings) (filter_by_prefix (rest strings) prefix))]))\n", "  (cond\
    \ [(empty? strings) '()]\n        [(equal? (first strings) prefix) (cons (first\
    \ strings) (filter_by_prefix (rest strings) prefix))]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond\n    [(empty? strings) strings]\n   \
    \ [(equal? (first strings) prefix) (cons (first strings) strings)]\n    [else\
    \ (filter_by_prefix (rest strings) prefix)]))\n", "  (cond\n    [(empty? strings)\
    \ strings]\n    [(equal? (first strings) prefix) strings]\n    [else (cons (first\
    \ strings) (filter_by_prefix (rest strings) prefix))]))\n", "  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) prefix) (cons (first strings)\
    \ strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n", " \
    \ (cond [(empty? strings) '()]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (cons (first strings)\n           \
    \         (filter_by_prefix (rest strings)\n                                 \
    \   prefix))]))\n", "  (cond [(empty? strings) strings]\n        [(equal? (first\
    \ strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond\n    [(empty? strings) strings]\n   \
    \ [(equal? (first strings) prefix) (cons (first strings) strings)]\n    [else\
    \ (filter_by_prefix (rest strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n", "  (cond\n    [(empty?\
    \ strings) strings]\n    [(equal? (first strings) prefix) (cons (first strings)\
    \ strings)]\n    [else (filter_by_prefix (rest strings) prefix)]))\n", "  (cond\n\
    \    [(empty? strings) strings]\n    [(equal? (first strings) prefix) (cons (first\
    \ strings) strings)]\n    [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) '()]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (cons (first strings)\n           \
    \         (filter_by_prefix (rest strings) prefix))]))\n", "  (cond [(empty? strings)\
    \ strings]\n        [(equal? (first strings) prefix) (cons (first strings) strings)]\n\
    \        [else (filter_by_prefix (rest strings) prefix)]))\n", "  (cond\n    [(empty?\
    \ strings) strings]\n    [(equal? (first strings) prefix) (filter_by_prefix (rest\
    \ strings) prefix)]\n    [else (cons (first strings) (filter_by_prefix (rest strings)\
    \ prefix))]))\n", "  (cond [(empty? strings) strings]\n        [(equal? (first\
    \ strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (filter (lambda (str)\n            (string-match\
    \ prefix str))\n          strings))\n", "  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n", "  (cond\n    [(empty?\
    \ strings) strings]\n    [(equal? (first strings) prefix) (cons (first strings)\
    \ strings)]\n    [else (filter_by_prefix (rest strings) prefix)]))\n", "  (cond\
    \ [(empty? strings) '()]\n        [(equal? (first strings) prefix) (cons (first\
    \ strings) strings)]\n        [else (cons (first strings)\n                  \
    \  (filter_by_prefix (rest strings) prefix))]))\n", "  (cond\n    [(empty? strings)\
    \ strings]\n    [(equal? (first strings) prefix) strings]\n    [else (cons (first\
    \ strings)\n                (filter_by_prefix (rest strings) prefix))]))\n", " \
    \ (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) '()]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) (filter_by_prefix (rest strings) prefix))]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond\n    [(empty? strings) strings]\n   \
    \ [(equal? (first strings) prefix) (cons (first strings) strings)]\n    [else\
    \ (filter_by_prefix (rest strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n", "  (filter (lambda\
    \ (x) (equal? (substring x 0 length) prefix)) strings))\n", "  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) prefix) (cons (first strings)\
    \ strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n", " \
    \ (cond\n    [(empty? strings) strings]\n    [(equal? (first strings) prefix)\
    \ (cons (first strings) strings)]\n    [else (filter_by_prefix (rest strings)\
    \ prefix)]))\n", "  (cond [(empty? strings) strings]\n        [(equal? (first\
    \ strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond\n    [(empty? strings) strings]\n   \
    \ [(equal? (first strings) prefix) (cons (first strings) strings)]\n    [else\
    \ (cons (first strings)\n                (filter_by_prefix (rest strings) prefix))]))\n",
  "  (filter (lambda (x) (string-match prefix x))\n         strings))\n", "  (cond\n\
    \    [(empty? strings) strings]\n    [(equal? (first strings) prefix) (filter_by_prefix\
    \ (rest strings) prefix)]\n    [else (cons (first strings) (filter_by_prefix (rest\
    \ strings) prefix))]))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond\n    [(empty? strings) strings]\n   \
    \ [(equal? (first strings) prefix) (cons (first strings) strings)]\n    [else\
    \ (filter_by_prefix (rest strings) prefix)]))\n", "  (cond\n    [(empty? strings)\
    \ strings]\n    [(equal? (first strings) prefix) (cons (first strings) strings)]\n\
    \    [else (filter_by_prefix (rest strings) prefix)]))\n", "  (cond\n    [(empty?\
    \ strings) strings]\n    [(equal? (first strings) prefix) (cons (first strings)\
    \ strings)]\n    [else (filter_by_prefix (rest strings) prefix)]))\n", "  (filter\
    \ (lambda (x) (equal? (substring x 0) prefix)) strings))\n", "  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) prefix) (cons (first strings)\
    \ strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n", " \
    \ (cond [(empty? strings) '()]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (cons (first strings)\n           \
    \         (filter_by_prefix (rest strings) prefix))]))\n", "  (cond [(empty? strings)\
    \ strings]\n        [(equal? (first strings) prefix) (cons (first strings) strings)]\n\
    \        [else (filter_by_prefix (rest strings) prefix)]))\n", "  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) prefix) (cons (first strings)\
    \ strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n", " \
    \ (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond\n    [(empty? strings) strings]\n    [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n    [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond\n    [(empty? strings) strings]\n    [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n    [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (filter (lambda (str)\n           (string-match prefix str))\n         strings))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (filter (lambda (x) (string-match prefix x))\n         strings))\n", "  (cond\
    \ [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons (first\
    \ strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond\n    [(empty? strings) strings]\n    [(equal? (first strings) prefix) (filter_by_prefix\
    \ (rest strings) prefix)]\n    [else (cons (first strings) (filter_by_prefix (rest\
    \ strings) prefix))]))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond\n    [(empty? strings) strings]\n   \
    \ [(equal? (first strings) prefix) (filter_by_prefix (rest strings) prefix)]\n\
    \    [else (cons (first strings) (filter_by_prefix (rest strings) prefix))]))\n",
  "  (cond\n    [(empty? strings) strings]\n    [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n    [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) '()]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) (filter_by_prefix (rest strings) prefix))]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) '()]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (cons\
    \ (first strings)\n                    (filter_by_prefix (rest strings) prefix))]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond\n    [(empty? strings) strings]\n    [(equal? (first strings) prefix) (filter_by_prefix\
    \ (rest strings) prefix)]\n    [else (cons (first strings) (filter_by_prefix (rest\
    \ strings) prefix))]))\n", "  (cond [(empty? strings) '()]\n        [(equal? (first\
    \ strings) prefix) (cons (first strings) (filter_by_prefix (rest strings) prefix))]\n\
    \        [else (filter_by_prefix (rest strings) prefix)]))\n", "  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) prefix) (cons (first strings)\
    \ strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n", " \
    \ (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (filter (lambda (x) (string-prefix? x prefix)) strings))\n", "  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) prefix) (cons (first strings)\
    \ strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n", " \
    \ (cond\n    [(empty? strings) strings]\n    [(equal? (first strings) prefix)\
    \ (cons (first strings) strings)]\n    [else (cons (first strings)\n         \
    \       (filter_by_prefix (rest strings)\n                                prefix))]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond\n    [(empty? strings) strings]\n    [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n    [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (filter (lambda (x) (equal? (substring x 0) prefix)) strings))\n", "  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) prefix) (cons (first strings)\
    \ strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n", " \
    \ (filter (lambda (x) (string-match prefix x))\n         strings))\n", "  (filter\
    \ (lambda (x) (string-match prefix x))\n         strings))\n", "  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) prefix) (cons (first strings)\
    \ strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n", " \
    \ (cond\n    [(empty? strings) strings]\n    [(equal? (first strings) prefix)\
    \ (cons (first strings) strings)]\n    [else (filter_by_prefix (rest strings)\
    \ prefix)]))\n", "  (cond [(empty? strings) strings]\n        [(equal? (first\
    \ strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond\n    [(empty? strings) strings]\n   \
    \ [(equal? (first strings) prefix) (filter_by_prefix (rest strings) prefix)]\n\
    \    [else (cons (first strings) (filter_by_prefix (rest strings) prefix))]))\n",
  "  (filter (lambda (x) (equal? (string-prefix prefix x) prefix)) strings))\n", " \
    \ (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond\n    [(empty? strings) strings]\n    [(equal? (first strings) prefix) (filter_by_prefix\
    \ (rest strings) prefix)]\n    [else (cons (first strings) (filter_by_prefix (rest\
    \ strings) prefix))]))\n", "  (cond\n    [(empty? strings) strings]\n    [(equal?\
    \ (first strings) prefix) strings]\n    [else (cons (first strings) (filter_by_prefix\
    \ (rest strings) prefix))]))\n", "  (cond [(empty? strings) strings]\n       \
    \ [(equal? (first strings) prefix) (cons (first strings) strings)]\n        [else\
    \ (filter_by_prefix (rest strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n", "  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) prefix) (cons (first strings)\
    \ strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n", " \
    \ (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond\n    [(empty? strings) strings]\n    [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n    [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (filter (lambda (str)\n            (string-match prefix str))\n          strings))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (filter (lambda (x) (string-prefix? x prefix)) strings))\n", "  (filter (lambda\
    \ (x) (string-match prefix x))\n         strings))\n", "  (cond [(empty? strings)\
    \ strings]\n        [(equal? (first strings) prefix) (cons (first strings) strings)]\n\
    \        [else (filter_by_prefix (rest strings) prefix)]))\n", "  (cond\n    [(empty?\
    \ strings) strings]\n    [(equal? (first strings) prefix) (filter_by_prefix (rest\
    \ strings) prefix)]\n    [else (cons (first strings) (filter_by_prefix (rest strings)\
    \ prefix))]))\n", "  (filter (lambda (x) (equal? (string-prefix x prefix) prefix))\
    \ strings))\n", "  (cond\n    [(empty? strings) strings]\n    [(equal? (first\
    \ strings) prefix) (filter_by_prefix (rest strings) prefix)]\n    [else (cons\
    \ (first strings) (filter_by_prefix (rest strings) prefix))]))\n", "  (cond\n\
    \    [(empty? strings) strings]\n    [(equal? (first strings) prefix) (cons (first\
    \ strings) strings)]\n    [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) '()]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) (filter_by_prefix (rest strings) prefix))]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) '()]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (cons\
    \ (first strings)\n                    (filter_by_prefix (rest strings)\n    \
    \                                prefix))]))\n", "  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n", "  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) prefix) (cons (first strings)\
    \ strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n", " \
    \ (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond\n    [(empty? strings) strings]\n    [(equal? (first strings) prefix) (filter_by_prefix\
    \ (rest strings) prefix)]\n    [else (cons (first strings) (filter_by_prefix (rest\
    \ strings) prefix))]))\n", "  (cond\n    [(empty? strings) strings]\n    [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n    [else (cons (first\
    \ strings)\n                (filter_by_prefix (rest strings)\n               \
    \                 prefix))]))\n", "  (cond\n    [(empty? strings) strings]\n \
    \   [(equal? (first strings) prefix) (filter_by_prefix (rest strings) prefix)]\n\
    \    [else (cons (first strings) (filter_by_prefix (rest strings) prefix))]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond\n    [(empty? strings) strings]\n    [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n    [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond\n    [(empty? strings) strings]\n    [(equal? (first strings) prefix) (filter_by_prefix\
    \ (rest strings) prefix)]\n    [else (cons (first strings) (filter_by_prefix (rest\
    \ strings) prefix))]))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (filter (lambda (x) (string-match prefix x))\n\
    \         strings))\n", "  (filter (lambda (x) (string-match prefix x))\n    \
    \     strings))\n", "  (cond [(empty? strings) strings]\n        [(equal? (first\
    \ strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond\n    [(empty? strings) strings]\n   \
    \ [(equal? (first strings) prefix) (cons (first strings) strings)]\n    [else\
    \ (filter_by_prefix (rest strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n", "  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) prefix) (cons (first strings)\
    \ strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n", " \
    \ (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (filter (lambda (x) (equal? (substring x 0) prefix)) strings))\n", "  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) prefix) (cons (first strings)\
    \ strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n", " \
    \ (cond\n    [(empty? strings) strings]\n    [(equal? (first strings) prefix)\
    \ (filter_by_prefix (rest strings) prefix)]\n    [else (cons (first strings) (filter_by_prefix\
    \ (rest strings) prefix))]))\n", "  (cond [(empty? strings) strings]\n       \
    \ [(equal? (first strings) prefix) (cons (first strings) strings)]\n        [else\
    \ (filter_by_prefix (rest strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n", "  (filter (lambda\
    \ (x) (string-match prefix x))\n         strings))\n", "  (cond [(empty? strings)\
    \ strings]\n        [(equal? (first strings) prefix) (cons (first strings) strings)]\n\
    \        [else (filter_by_prefix (rest strings) prefix)]))\n", "  (cond\n    [(empty?\
    \ strings) strings]\n    [(equal? (first strings) prefix) (filter_by_prefix (rest\
    \ strings) prefix)]\n    [else (cons (first strings) (filter_by_prefix (rest strings)\
    \ prefix))]))\n", "  (cond [(empty? strings) strings]\n        [(equal? (first\
    \ strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond\n    [(empty? strings) strings]\n   \
    \ [(equal? (first strings) prefix) (cons (first strings) strings)]\n    [else\
    \ (filter_by_prefix (rest strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n", "  (cond [(empty?\
    \ strings) '()]\n        [(equal? (first strings) prefix) (cons (first strings)\
    \ strings)]\n        [else (cons (first strings)\n                    (filter_by_prefix\
    \ (rest strings) prefix))]))\n", "  (cond [(empty? strings) strings]\n       \
    \ [(equal? (first strings) prefix) (cons (first strings) strings)]\n        [else\
    \ (filter_by_prefix (rest strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n", "  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) prefix) (cons (first strings)\
    \ strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n", " \
    \ (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond\n    [(empty? strings) strings]\n    [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n    [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond\n    [(empty? strings) strings]\n    [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n    [else (filter_by_prefix (rest strings) prefix)]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
