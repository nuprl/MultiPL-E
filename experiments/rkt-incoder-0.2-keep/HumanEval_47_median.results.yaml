name: HumanEval_47_median
language: racket
results:
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbrkkehc_.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpbrkkehc_.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpbrkkehc_.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpbrkkehc_.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply median (rest l)) (length l)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal?\
    \ (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6\
    \ 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal?\
    \ (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2\
    \ 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx0chr7ai.rkt:16:4\n\
    \nmedian: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 4\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpx0chr7ai.rkt:17:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpx0chr7ai.rkt:18:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpx0chr7ai.rkt:19:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 5\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx0chr7ai.rkt:20:4\n\
    \nmedian: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 6\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp217irl65.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp217irl65.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp217irl65.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp217irl65.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi3gtclmm.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpi3gtclmm.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpi3gtclmm.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpi3gtclmm.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpucbcwzon.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpucbcwzon.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpucbcwzon.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpucbcwzon.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (reduce (lambda (x y) (if (< x y) x y)) l)\n     (length l)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n\
    \    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpl9nwharj.rkt:9:6: reduce: unbound identifier\n  in: reduce\n  location...:\n\
    \   /tmp/tmpl9nwharj.rkt:9:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprnt7p_dj.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmprnt7p_dj.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmprnt7p_dj.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmprnt7p_dj.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3nk9g_rj.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp3nk9g_rj.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp3nk9g_rj.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp3nk9g_rj.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (reduce (lambda (x y) (if (< x y) x y)) l) 2))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n   \
    \ (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmppp17g3gk.rkt:9:6: reduce: unbound identifier\n  in: reduce\n  location...:\n\
    \   /tmp/tmppp17g3gk.rkt:9:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply + l) (length l)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwa_5hmwb.rkt:17:4\n\
    actual:     515/3\nexpected:   8.0\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwa_5hmwb.rkt:19:4\nactual:\
    \     11/2\nexpected:   5.5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpwa_5hmwb.rkt:20:4\nactual:     39/7\n\
    expected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply median (sort l)) (length l)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal?\
    \ (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6\
    \ 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal?\
    \ (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2\
    \ 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9i7too2r.rkt:16:4\n\
    \nsort: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 2 plus optional arguments with keywords #:cache-keys?\
    \ and #:key\n  given: 1\n  arguments...:\n   '(3 1 2 4 5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9i7too2r.rkt:17:4\n\
    \nsort: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 2 plus optional arguments with keywords #:cache-keys?\
    \ and #:key\n  given: 1\n  arguments...:\n   '(-10 4 6 1000 10 20)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9i7too2r.rkt:18:4\n\
    \nsort: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 2 plus optional arguments with keywords #:cache-keys?\
    \ and #:key\n  given: 1\n  arguments...:\n   '(5)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9i7too2r.rkt:19:4\n\nsort:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2 plus optional arguments with keywords #:cache-keys? and\
    \ #:key\n  given: 1\n  arguments...:\n   '(6 5)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9i7too2r.rkt:20:4\n\nsort:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2 plus optional arguments with keywords #:cache-keys? and\
    \ #:key\n  given: 1\n  arguments...:\n   '(8 1 3 9 9 2 7)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplu6wf0lw.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmplu6wf0lw.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmplu6wf0lw.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmplu6wf0lw.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp53u9c6gh.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp53u9c6gh.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp53u9c6gh.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp53u9c6gh.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply median (rest l)) (length l)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal?\
    \ (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6\
    \ 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal?\
    \ (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2\
    \ 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmply00wwki.rkt:16:4\n\
    \nmedian: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 4\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmply00wwki.rkt:17:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmply00wwki.rkt:18:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmply00wwki.rkt:19:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 5\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmply00wwki.rkt:20:4\n\
    \nmedian: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 6\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_0hfdap1.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp_0hfdap1.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp_0hfdap1.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp_0hfdap1.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn_yie6iv.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpn_yie6iv.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpn_yie6iv.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpn_yie6iv.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply median l) 2))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjj1nxdfw.rkt:16:4\n\
    \nmedian: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjj1nxdfw.rkt:17:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 6\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjj1nxdfw.rkt:18:4\n\napply:\
    \ contract violation\n  expected: list?\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjj1nxdfw.rkt:19:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjj1nxdfw.rkt:20:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply + l) (length l)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_jpmx63j.rkt:17:4\n\
    actual:     515/3\nexpected:   8.0\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_jpmx63j.rkt:19:4\nactual:\
    \     11/2\nexpected:   5.5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp_jpmx63j.rkt:20:4\nactual:     39/7\n\
    expected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpptl3q0lj.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpptl3q0lj.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpptl3q0lj.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpptl3q0lj.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl387ozog.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpl387ozog.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpl387ozog.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpl387ozog.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpil6t11mg.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpil6t11mg.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpil6t11mg.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpil6t11mg.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply median (rest l)) (length l)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal?\
    \ (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6\
    \ 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal?\
    \ (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2\
    \ 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3s15qa_h.rkt:16:4\n\
    \nmedian: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 4\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3s15qa_h.rkt:17:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3s15qa_h.rkt:18:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3s15qa_h.rkt:19:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 5\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3s15qa_h.rkt:20:4\n\
    \nmedian: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 6\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (reduce (lambda (x y) (if (< x y) x y)) l)\n     (length l)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n\
    \    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpe_wtatep.rkt:9:6: reduce: unbound identifier\n  in: reduce\n  location...:\n\
    \   /tmp/tmpe_wtatep.rkt:9:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply + l) (length l)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwi93woe.rkt:17:4\n\
    actual:     515/3\nexpected:   8.0\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmphwi93woe.rkt:19:4\nactual:\
    \     11/2\nexpected:   5.5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmphwi93woe.rkt:20:4\nactual:     39/7\n\
    expected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply median (rest l)) (length l)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal?\
    \ (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6\
    \ 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal?\
    \ (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2\
    \ 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt5mkctjx.rkt:16:4\n\
    \nmedian: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 4\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpt5mkctjx.rkt:17:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpt5mkctjx.rkt:18:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpt5mkctjx.rkt:19:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 5\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt5mkctjx.rkt:20:4\n\
    \nmedian: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 6\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply + l) (length l)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbutf2fhr.rkt:17:4\n\
    actual:     515/3\nexpected:   8.0\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbutf2fhr.rkt:19:4\nactual:\
    \     11/2\nexpected:   5.5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpbutf2fhr.rkt:20:4\nactual:     39/7\n\
    expected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa3kiam36.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpa3kiam36.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpa3kiam36.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpa3kiam36.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3dkris3o.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp3dkris3o.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp3dkris3o.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp3dkris3o.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (reduce + l) 2))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp5qehvm3s.rkt:9:6: reduce: unbound identifier\n  in: reduce\n  location...:\n\
    \   /tmp/tmp5qehvm3s.rkt:9:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp38l0_geg.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp38l0_geg.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp38l0_geg.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp38l0_geg.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbin_5nw9.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpbin_5nw9.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpbin_5nw9.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpbin_5nw9.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5ih8u_kj.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp5ih8u_kj.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp5ih8u_kj.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp5ih8u_kj.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb8mxkzjt.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpb8mxkzjt.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpb8mxkzjt.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpb8mxkzjt.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply + l) (length l)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4f1yzhmd.rkt:17:4\n\
    actual:     515/3\nexpected:   8.0\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4f1yzhmd.rkt:19:4\nactual:\
    \     11/2\nexpected:   5.5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp4f1yzhmd.rkt:20:4\nactual:     39/7\n\
    expected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (reduce (lambda (x y) (if (< y x) x y)) l)\n     (length l)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n\
    \    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpo92dvg5i.rkt:9:6: reduce: unbound identifier\n  in: reduce\n  location...:\n\
    \   /tmp/tmpo92dvg5i.rkt:9:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply median (sort l)) 2))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt2160tuz.rkt:16:4\n\
    \nsort: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 2 plus optional arguments with keywords #:cache-keys?\
    \ and #:key\n  given: 1\n  arguments...:\n   '(3 1 2 4 5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt2160tuz.rkt:17:4\n\
    \nsort: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 2 plus optional arguments with keywords #:cache-keys?\
    \ and #:key\n  given: 1\n  arguments...:\n   '(-10 4 6 1000 10 20)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt2160tuz.rkt:18:4\n\
    \nsort: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 2 plus optional arguments with keywords #:cache-keys?\
    \ and #:key\n  given: 1\n  arguments...:\n   '(5)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpt2160tuz.rkt:19:4\n\nsort:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2 plus optional arguments with keywords #:cache-keys? and\
    \ #:key\n  given: 1\n  arguments...:\n   '(6 5)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpt2160tuz.rkt:20:4\n\nsort:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2 plus optional arguments with keywords #:cache-keys? and\
    \ #:key\n  given: 1\n  arguments...:\n   '(8 1 3 9 9 2 7)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply median l) 2))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiqqxmfxc.rkt:16:4\n\
    \nmedian: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpiqqxmfxc.rkt:17:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 6\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpiqqxmfxc.rkt:18:4\n\napply:\
    \ contract violation\n  expected: list?\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpiqqxmfxc.rkt:19:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpiqqxmfxc.rkt:20:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (reduce + l) 2))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpl5wjm1za.rkt:9:6: reduce: unbound identifier\n  in: reduce\n  location...:\n\
    \   /tmp/tmpl5wjm1za.rkt:9:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (reduce (lambda (x y) (if (< x y) x y)) l)\n     (length l)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n\
    \    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpi4xsz1rr.rkt:9:6: reduce: unbound identifier\n  in: reduce\n  location...:\n\
    \   /tmp/tmpi4xsz1rr.rkt:9:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply median (rest l)) 2))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2l7u2idq.rkt:16:4\n\
    \nmedian: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 4\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2l7u2idq.rkt:17:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2l7u2idq.rkt:18:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2l7u2idq.rkt:19:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 5\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2l7u2idq.rkt:20:4\n\
    \nmedian: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 6\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcvyebvah.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpcvyebvah.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpcvyebvah.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpcvyebvah.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (reduce (lambda (x y) (if (< x y) x y)) l) 2))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n   \
    \ (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp0kibp1hi.rkt:9:6: reduce: unbound identifier\n  in: reduce\n  location...:\n\
    \   /tmp/tmp0kibp1hi.rkt:9:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (reduce (lambda (x y) (if (< x y) x y)) l)\n     (length l)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n\
    \    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp06bgbuog.rkt:9:6: reduce: unbound identifier\n  in: reduce\n  location...:\n\
    \   /tmp/tmp06bgbuog.rkt:9:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply + l) (length l)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpek41kkpi.rkt:17:4\n\
    actual:     515/3\nexpected:   8.0\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpek41kkpi.rkt:19:4\nactual:\
    \     11/2\nexpected:   5.5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpek41kkpi.rkt:20:4\nactual:     39/7\n\
    expected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjk00_gp2.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpjk00_gp2.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpjk00_gp2.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpjk00_gp2.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb0vkmkl_.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpb0vkmkl_.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpb0vkmkl_.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpb0vkmkl_.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply median l) 2))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp36ymwwva.rkt:16:4\n\
    \nmedian: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp36ymwwva.rkt:17:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 6\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp36ymwwva.rkt:18:4\n\napply:\
    \ contract violation\n  expected: list?\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp36ymwwva.rkt:19:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp36ymwwva.rkt:20:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (reduce + l) (carl l)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp71tqygc2.rkt:9:6: reduce: unbound identifier\n  in: reduce\n  location...:\n\
    \   /tmp/tmp71tqygc2.rkt:9:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply median (rest l)) (length l)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal?\
    \ (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6\
    \ 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal?\
    \ (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2\
    \ 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxcov3ntv.rkt:16:4\n\
    \nmedian: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 4\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxcov3ntv.rkt:17:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxcov3ntv.rkt:18:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxcov3ntv.rkt:19:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 5\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxcov3ntv.rkt:20:4\n\
    \nmedian: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 6\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply median l) 2))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzvax7er8.rkt:16:4\n\
    \nmedian: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzvax7er8.rkt:17:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 6\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzvax7er8.rkt:18:4\n\napply:\
    \ contract violation\n  expected: list?\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzvax7er8.rkt:19:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzvax7er8.rkt:20:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (reduce (lambda (x y) (if (< y x) y x)) l) 2))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n   \
    \ (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpxk0ko4fa.rkt:9:6: reduce: unbound identifier\n  in: reduce\n  location...:\n\
    \   /tmp/tmpxk0ko4fa.rkt:9:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (reduce (lambda (x y) (if (< y x) x y)) l)\n     (length l)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n\
    \    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpfaotqus_.rkt:9:6: reduce: unbound identifier\n  in: reduce\n  location...:\n\
    \   /tmp/tmpfaotqus_.rkt:9:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (reduce + l) 2))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpt5lmgmm9.rkt:9:6: reduce: unbound identifier\n  in: reduce\n  location...:\n\
    \   /tmp/tmpt5lmgmm9.rkt:9:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn53ww5ww.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpn53ww5ww.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpn53ww5ww.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpn53ww5ww.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (reduce + l) (carl l)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpjkn7gbro.rkt:9:6: reduce: unbound identifier\n  in: reduce\n  location...:\n\
    \   /tmp/tmpjkn7gbro.rkt:9:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply median (rest l)) (length l)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal?\
    \ (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6\
    \ 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal?\
    \ (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2\
    \ 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnygqao5q.rkt:16:4\n\
    \nmedian: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 4\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpnygqao5q.rkt:17:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpnygqao5q.rkt:18:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpnygqao5q.rkt:19:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 5\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnygqao5q.rkt:20:4\n\
    \nmedian: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 6\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply median (sort l)) 2))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplqhlccfd.rkt:16:4\n\
    \nsort: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 2 plus optional arguments with keywords #:cache-keys?\
    \ and #:key\n  given: 1\n  arguments...:\n   '(3 1 2 4 5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplqhlccfd.rkt:17:4\n\
    \nsort: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 2 plus optional arguments with keywords #:cache-keys?\
    \ and #:key\n  given: 1\n  arguments...:\n   '(-10 4 6 1000 10 20)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplqhlccfd.rkt:18:4\n\
    \nsort: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 2 plus optional arguments with keywords #:cache-keys?\
    \ and #:key\n  given: 1\n  arguments...:\n   '(5)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmplqhlccfd.rkt:19:4\n\nsort:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2 plus optional arguments with keywords #:cache-keys? and\
    \ #:key\n  given: 1\n  arguments...:\n   '(6 5)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmplqhlccfd.rkt:20:4\n\nsort:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2 plus optional arguments with keywords #:cache-keys? and\
    \ #:key\n  given: 1\n  arguments...:\n   '(8 1 3 9 9 2 7)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (reduce (lambda (x y) (if (< y x) y x)) l) 2))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n   \
    \ (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpkmo6fe54.rkt:9:6: reduce: unbound identifier\n  in: reduce\n  location...:\n\
    \   /tmp/tmpkmo6fe54.rkt:9:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (reduce (lambda (x y) (if (< y x) x y)) l) 2))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n   \
    \ (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpc2swxlw2.rkt:9:6: reduce: unbound identifier\n  in: reduce\n  location...:\n\
    \   /tmp/tmpc2swxlw2.rkt:9:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (reduce + l) 2))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp2q2sebdl.rkt:9:6: reduce: unbound identifier\n  in: reduce\n  location...:\n\
    \   /tmp/tmp2q2sebdl.rkt:9:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply median (rest l)) (length l)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal?\
    \ (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6\
    \ 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal?\
    \ (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2\
    \ 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcaj67yo8.rkt:16:4\n\
    \nmedian: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 4\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcaj67yo8.rkt:17:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcaj67yo8.rkt:18:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcaj67yo8.rkt:19:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 5\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcaj67yo8.rkt:20:4\n\
    \nmedian: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 6\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjrdglb9_.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpjrdglb9_.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpjrdglb9_.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpjrdglb9_.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpog5i4fuv.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpog5i4fuv.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpog5i4fuv.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpog5i4fuv.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (reduce + l) (carl l)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp0_va4v92.rkt:9:6: reduce: unbound identifier\n  in: reduce\n  location...:\n\
    \   /tmp/tmp0_va4v92.rkt:9:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (reduce (lambda (x y) (if (< x y) x y)) l)\n     (length l)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n\
    \    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp6ejxinks.rkt:9:6: reduce: unbound identifier\n  in: reduce\n  location...:\n\
    \   /tmp/tmp6ejxinks.rkt:9:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply + l) (length l)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfkiwtx03.rkt:17:4\n\
    actual:     515/3\nexpected:   8.0\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfkiwtx03.rkt:19:4\nactual:\
    \     11/2\nexpected:   5.5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpfkiwtx03.rkt:20:4\nactual:     39/7\n\
    expected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply + l) (length l)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcvm697jj.rkt:17:4\n\
    actual:     515/3\nexpected:   8.0\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcvm697jj.rkt:19:4\nactual:\
    \     11/2\nexpected:   5.5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpcvm697jj.rkt:20:4\nactual:     39/7\n\
    expected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (reduce (lambda (x y) (if (< x y) x y)) l)\n     (length l)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n\
    \    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpghnljvgl.rkt:9:6: reduce: unbound identifier\n  in: reduce\n  location...:\n\
    \   /tmp/tmpghnljvgl.rkt:9:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3eqdq5ku.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp3eqdq5ku.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp3eqdq5ku.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp3eqdq5ku.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply median l) 2))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphuvo0w5n.rkt:16:4\n\
    \nmedian: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphuvo0w5n.rkt:17:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 6\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphuvo0w5n.rkt:18:4\n\napply:\
    \ contract violation\n  expected: list?\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphuvo0w5n.rkt:19:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphuvo0w5n.rkt:20:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6wzw9mg0.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp6wzw9mg0.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp6wzw9mg0.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp6wzw9mg0.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9uap5goc.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp9uap5goc.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp9uap5goc.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp9uap5goc.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply + l) (length l)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpitjm6jka.rkt:17:4\n\
    actual:     515/3\nexpected:   8.0\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpitjm6jka.rkt:19:4\nactual:\
    \     11/2\nexpected:   5.5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpitjm6jka.rkt:20:4\nactual:     39/7\n\
    expected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbzy5n5l9.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpbzy5n5l9.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpbzy5n5l9.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpbzy5n5l9.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpog6d1b_0.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpog6d1b_0.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpog6d1b_0.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpog6d1b_0.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply median (rest l)) (length l)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal?\
    \ (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6\
    \ 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal?\
    \ (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2\
    \ 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpne0lpj12.rkt:16:4\n\
    \nmedian: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 4\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpne0lpj12.rkt:17:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpne0lpj12.rkt:18:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpne0lpj12.rkt:19:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 5\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpne0lpj12.rkt:20:4\n\
    \nmedian: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 6\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (reduce (lambda (x y) (if (< x y) x y)) l)\n     (length l)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n\
    \    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp0rlricqj.rkt:9:6: reduce: unbound identifier\n  in: reduce\n  location...:\n\
    \   /tmp/tmp0rlricqj.rkt:9:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0cmpezhl.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp0cmpezhl.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp0cmpezhl.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp0cmpezhl.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2n4noaad.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp2n4noaad.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp2n4noaad.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp2n4noaad.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (reduce + l) 2))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpil6m32h_.rkt:9:6: reduce: unbound identifier\n  in: reduce\n  location...:\n\
    \   /tmp/tmpil6m32h_.rkt:9:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply median l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_ceow6f4.rkt:16:4\n\
    \nmedian: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_ceow6f4.rkt:17:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 6\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_ceow6f4.rkt:18:4\n\napply:\
    \ contract violation\n  expected: list?\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_ceow6f4.rkt:19:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_ceow6f4.rkt:20:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm30g_gvr.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpm30g_gvr.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpm30g_gvr.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpm30g_gvr.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply median l) 2))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkjy_p3dp.rkt:16:4\n\
    \nmedian: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkjy_p3dp.rkt:17:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 6\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkjy_p3dp.rkt:18:4\n\napply:\
    \ contract violation\n  expected: list?\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkjy_p3dp.rkt:19:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkjy_p3dp.rkt:20:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply median (sort l)) 2))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf8ekdr92.rkt:16:4\n\
    \nsort: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 2 plus optional arguments with keywords #:cache-keys?\
    \ and #:key\n  given: 1\n  arguments...:\n   '(3 1 2 4 5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf8ekdr92.rkt:17:4\n\
    \nsort: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 2 plus optional arguments with keywords #:cache-keys?\
    \ and #:key\n  given: 1\n  arguments...:\n   '(-10 4 6 1000 10 20)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf8ekdr92.rkt:18:4\n\
    \nsort: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 2 plus optional arguments with keywords #:cache-keys?\
    \ and #:key\n  given: 1\n  arguments...:\n   '(5)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpf8ekdr92.rkt:19:4\n\nsort:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2 plus optional arguments with keywords #:cache-keys? and\
    \ #:key\n  given: 1\n  arguments...:\n   '(6 5)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpf8ekdr92.rkt:20:4\n\nsort:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2 plus optional arguments with keywords #:cache-keys? and\
    \ #:key\n  given: 1\n  arguments...:\n   '(8 1 3 9 9 2 7)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7k3vp7y_.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp7k3vp7y_.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp7k3vp7y_.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp7k3vp7y_.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply median (rest l)) (length l)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal?\
    \ (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6\
    \ 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal?\
    \ (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2\
    \ 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb4jx3b8q.rkt:16:4\n\
    \nmedian: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 4\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpb4jx3b8q.rkt:17:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpb4jx3b8q.rkt:18:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpb4jx3b8q.rkt:19:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 5\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb4jx3b8q.rkt:20:4\n\
    \nmedian: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 6\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (reduce (lambda (x y) (if (< x y) x y)) l)\n     (length l)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n\
    \    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpfk4e7y1o.rkt:9:6: reduce: unbound identifier\n  in: reduce\n  location...:\n\
    \   /tmp/tmpfk4e7y1o.rkt:9:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply median l) 2))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxdub_v41.rkt:16:4\n\
    \nmedian: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxdub_v41.rkt:17:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 6\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxdub_v41.rkt:18:4\n\napply:\
    \ contract violation\n  expected: list?\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxdub_v41.rkt:19:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxdub_v41.rkt:20:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (reduce + l) (carl l)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpedut7fvt.rkt:9:6: reduce: unbound identifier\n  in: reduce\n  location...:\n\
    \   /tmp/tmpedut7fvt.rkt:9:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprew8fd20.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmprew8fd20.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmprew8fd20.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmprew8fd20.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply + l) (length l)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0pg26bjr.rkt:17:4\n\
    actual:     515/3\nexpected:   8.0\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0pg26bjr.rkt:19:4\nactual:\
    \     11/2\nexpected:   5.5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp0pg26bjr.rkt:20:4\nactual:     39/7\n\
    expected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpunr4mjxc.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpunr4mjxc.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpunr4mjxc.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpunr4mjxc.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpemt4yk8y.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpemt4yk8y.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpemt4yk8y.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpemt4yk8y.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5dkejo1l.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp5dkejo1l.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp5dkejo1l.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp5dkejo1l.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuy0eyfbq.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpuy0eyfbq.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpuy0eyfbq.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpuy0eyfbq.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwl12d8k3.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpwl12d8k3.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpwl12d8k3.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpwl12d8k3.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9gh1ls2e.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp9gh1ls2e.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp9gh1ls2e.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp9gh1ls2e.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppyt89_7n.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmppyt89_7n.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmppyt89_7n.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmppyt89_7n.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply + l) (length l)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvdo98kdx.rkt:17:4\n\
    actual:     515/3\nexpected:   8.0\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvdo98kdx.rkt:19:4\nactual:\
    \     11/2\nexpected:   5.5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpvdo98kdx.rkt:20:4\nactual:     39/7\n\
    expected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply median l) 2))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphkwo9tzr.rkt:16:4\n\
    \nmedian: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphkwo9tzr.rkt:17:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 6\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphkwo9tzr.rkt:18:4\n\napply:\
    \ contract violation\n  expected: list?\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphkwo9tzr.rkt:19:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphkwo9tzr.rkt:20:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply + l) (length l)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzif9n60y.rkt:17:4\n\
    actual:     515/3\nexpected:   8.0\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzif9n60y.rkt:19:4\nactual:\
    \     11/2\nexpected:   5.5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpzif9n60y.rkt:20:4\nactual:     39/7\n\
    expected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (reduce (lambda (x y) (if (< x y) x y)) l) 2))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n   \
    \ (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpyf1kmjs1.rkt:9:6: reduce: unbound identifier\n  in: reduce\n  location...:\n\
    \   /tmp/tmpyf1kmjs1.rkt:9:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply median (rest l)) (length l)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal?\
    \ (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6\
    \ 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal?\
    \ (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2\
    \ 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5_wty0x9.rkt:16:4\n\
    \nmedian: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 4\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp5_wty0x9.rkt:17:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp5_wty0x9.rkt:18:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp5_wty0x9.rkt:19:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 5\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5_wty0x9.rkt:20:4\n\
    \nmedian: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 6\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprxokp3yd.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmprxokp3yd.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmprxokp3yd.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmprxokp3yd.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (reduce (lambda (x y) (if (< y x) y x)) l)\n     (length l)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n\
    \    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmph2lxvraz.rkt:9:6: reduce: unbound identifier\n  in: reduce\n  location...:\n\
    \   /tmp/tmph2lxvraz.rkt:9:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (reduce (lambda (x y) (if (< x y) x y)) l) 2))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n   \
    \ (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpd_vyx7ak.rkt:9:6: reduce: unbound identifier\n  in: reduce\n  location...:\n\
    \   /tmp/tmpd_vyx7ak.rkt:9:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphgmhmua4.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmphgmhmua4.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmphgmhmua4.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmphgmhmua4.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpog6vw0vp.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpog6vw0vp.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpog6vw0vp.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpog6vw0vp.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply median (rest l)) (length l)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal?\
    \ (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6\
    \ 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal?\
    \ (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2\
    \ 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfcllqc5f.rkt:16:4\n\
    \nmedian: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 4\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfcllqc5f.rkt:17:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfcllqc5f.rkt:18:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfcllqc5f.rkt:19:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 5\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfcllqc5f.rkt:20:4\n\
    \nmedian: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 6\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp30d95mdh.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp30d95mdh.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp30d95mdh.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp30d95mdh.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply median l) 2))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0t290p28.rkt:16:4\n\
    \nmedian: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0t290p28.rkt:17:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 6\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0t290p28.rkt:18:4\n\napply:\
    \ contract violation\n  expected: list?\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0t290p28.rkt:19:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0t290p28.rkt:20:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpko4qqfo7.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpko4qqfo7.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpko4qqfo7.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpko4qqfo7.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply + l) (length l)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp324shpp0.rkt:17:4\n\
    actual:     515/3\nexpected:   8.0\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp324shpp0.rkt:19:4\nactual:\
    \     11/2\nexpected:   5.5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp324shpp0.rkt:20:4\nactual:     39/7\n\
    expected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjzy1sdep.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpjzy1sdep.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpjzy1sdep.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpjzy1sdep.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply median (sort l)) (length l)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal?\
    \ (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6\
    \ 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal?\
    \ (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2\
    \ 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi1t5sa07.rkt:16:4\n\
    \nsort: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 2 plus optional arguments with keywords #:cache-keys?\
    \ and #:key\n  given: 1\n  arguments...:\n   '(3 1 2 4 5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi1t5sa07.rkt:17:4\n\
    \nsort: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 2 plus optional arguments with keywords #:cache-keys?\
    \ and #:key\n  given: 1\n  arguments...:\n   '(-10 4 6 1000 10 20)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi1t5sa07.rkt:18:4\n\
    \nsort: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 2 plus optional arguments with keywords #:cache-keys?\
    \ and #:key\n  given: 1\n  arguments...:\n   '(5)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpi1t5sa07.rkt:19:4\n\nsort:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2 plus optional arguments with keywords #:cache-keys? and\
    \ #:key\n  given: 1\n  arguments...:\n   '(6 5)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpi1t5sa07.rkt:20:4\n\nsort:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2 plus optional arguments with keywords #:cache-keys? and\
    \ #:key\n  given: 1\n  arguments...:\n   '(8 1 3 9 9 2 7)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply median l) 2))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp846yvcsj.rkt:16:4\n\
    \nmedian: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp846yvcsj.rkt:17:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 6\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp846yvcsj.rkt:18:4\n\napply:\
    \ contract violation\n  expected: list?\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp846yvcsj.rkt:19:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp846yvcsj.rkt:20:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply median l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_tskkqr.rkt:16:4\n\
    \nmedian: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_tskkqr.rkt:17:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 6\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_tskkqr.rkt:18:4\n\napply:\
    \ contract violation\n  expected: list?\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_tskkqr.rkt:19:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_tskkqr.rkt:20:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply median l) 2))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdvs6rj5q.rkt:16:4\n\
    \nmedian: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdvs6rj5q.rkt:17:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 6\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdvs6rj5q.rkt:18:4\n\napply:\
    \ contract violation\n  expected: list?\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdvs6rj5q.rkt:19:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdvs6rj5q.rkt:20:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (reduce (lambda (x y) (if (< x y) x y)) l) 2))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n   \
    \ (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpiucd9kz7.rkt:9:6: reduce: unbound identifier\n  in: reduce\n  location...:\n\
    \   /tmp/tmpiucd9kz7.rkt:9:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (reduce (lambda (x y) (if (< x y) x y)) l)\n     (length l)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n\
    \    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpbxcm53xy.rkt:9:6: reduce: unbound identifier\n  in: reduce\n  location...:\n\
    \   /tmp/tmpbxcm53xy.rkt:9:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (reduce + l) 2))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpwn8oziea.rkt:9:6: reduce: unbound identifier\n  in: reduce\n  location...:\n\
    \   /tmp/tmpwn8oziea.rkt:9:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (reduce (lambda (x y) (if (< y x) y x)) l) 2))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n   \
    \ (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp4dydwrub.rkt:9:6: reduce: unbound identifier\n  in: reduce\n  location...:\n\
    \   /tmp/tmp4dydwrub.rkt:9:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (reduce (lambda (x y) (if (< x y) x y)) l) 2))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n   \
    \ (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpwn7einix.rkt:9:6: reduce: unbound identifier\n  in: reduce\n  location...:\n\
    \   /tmp/tmpwn7einix.rkt:9:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (reduce (lambda (x y) (if (< x y) x y)) l) 2))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n   \
    \ (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp8uv7proa.rkt:9:6: reduce: unbound identifier\n  in: reduce\n  location...:\n\
    \   /tmp/tmp8uv7proa.rkt:9:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply median l) 2))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlzzvwrq.rkt:16:4\n\
    \nmedian: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlzzvwrq.rkt:17:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 6\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlzzvwrq.rkt:18:4\n\napply:\
    \ contract violation\n  expected: list?\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlzzvwrq.rkt:19:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlzzvwrq.rkt:20:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (reduce (lambda (x y) (if (< y x) y x)) l)\n     (length l)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n\
    \    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpjzzb9eyd.rkt:9:6: reduce: unbound identifier\n  in: reduce\n  location...:\n\
    \   /tmp/tmpjzzb9eyd.rkt:9:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (reduce (lambda (x y) (if (< x y) x y)) l)\n     (length l)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n\
    \    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpnz1_v9im.rkt:9:6: reduce: unbound identifier\n  in: reduce\n  location...:\n\
    \   /tmp/tmpnz1_v9im.rkt:9:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6um74b48.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp6um74b48.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp6um74b48.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp6um74b48.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply + l) (length l)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpziy3a8jr.rkt:17:4\n\
    actual:     515/3\nexpected:   8.0\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpziy3a8jr.rkt:19:4\nactual:\
    \     11/2\nexpected:   5.5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpziy3a8jr.rkt:20:4\nactual:     39/7\n\
    expected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpttcp_6nl.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpttcp_6nl.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpttcp_6nl.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpttcp_6nl.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6nwa3kdt.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp6nwa3kdt.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp6nwa3kdt.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp6nwa3kdt.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply median (sort l)) 2))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa0ic7t2t.rkt:16:4\n\
    \nsort: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 2 plus optional arguments with keywords #:cache-keys?\
    \ and #:key\n  given: 1\n  arguments...:\n   '(3 1 2 4 5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa0ic7t2t.rkt:17:4\n\
    \nsort: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 2 plus optional arguments with keywords #:cache-keys?\
    \ and #:key\n  given: 1\n  arguments...:\n   '(-10 4 6 1000 10 20)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa0ic7t2t.rkt:18:4\n\
    \nsort: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 2 plus optional arguments with keywords #:cache-keys?\
    \ and #:key\n  given: 1\n  arguments...:\n   '(5)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpa0ic7t2t.rkt:19:4\n\nsort:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2 plus optional arguments with keywords #:cache-keys? and\
    \ #:key\n  given: 1\n  arguments...:\n   '(6 5)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpa0ic7t2t.rkt:20:4\n\nsort:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2 plus optional arguments with keywords #:cache-keys? and\
    \ #:key\n  given: 1\n  arguments...:\n   '(8 1 3 9 9 2 7)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply median (rest l)) 2))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpindnz23a.rkt:16:4\n\
    \nmedian: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 4\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpindnz23a.rkt:17:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpindnz23a.rkt:18:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpindnz23a.rkt:19:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 5\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpindnz23a.rkt:20:4\n\
    \nmedian: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 6\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5ek7wev3.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp5ek7wev3.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp5ek7wev3.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp5ek7wev3.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (reduce + l) (inc (length l))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp12a37kx0.rkt:9:6: reduce: unbound identifier\n  in: reduce\n  location...:\n\
    \   /tmp/tmp12a37kx0.rkt:9:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply + l) (length l)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsmkkn269.rkt:17:4\n\
    actual:     515/3\nexpected:   8.0\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsmkkn269.rkt:19:4\nactual:\
    \     11/2\nexpected:   5.5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpsmkkn269.rkt:20:4\nactual:     39/7\n\
    expected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi7_you55.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpi7_you55.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpi7_you55.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpi7_you55.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm4bwrvjj.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpm4bwrvjj.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpm4bwrvjj.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpm4bwrvjj.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (reduce (lambda (x y) (if (< x y) x y)) l)\n     (length l)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n\
    \    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpppfjhmcw.rkt:9:6: reduce: unbound identifier\n  in: reduce\n  location...:\n\
    \   /tmp/tmpppfjhmcw.rkt:9:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplwoux3w4.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmplwoux3w4.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmplwoux3w4.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmplwoux3w4.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply median l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdvk2sx5l.rkt:16:4\n\
    \nmedian: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdvk2sx5l.rkt:17:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 6\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdvk2sx5l.rkt:18:4\n\napply:\
    \ contract violation\n  expected: list?\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdvk2sx5l.rkt:19:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdvk2sx5l.rkt:20:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (reduce (lambda (x y) (if (< x y) x y)) l) 2))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n   \
    \ (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpuajto9ia.rkt:9:6: reduce: unbound identifier\n  in: reduce\n  location...:\n\
    \   /tmp/tmpuajto9ia.rkt:9:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcphe3ywy.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpcphe3ywy.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpcphe3ywy.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpcphe3ywy.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjnv4e9ck.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpjnv4e9ck.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpjnv4e9ck.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpjnv4e9ck.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsekn3bqb.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpsekn3bqb.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpsekn3bqb.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpsekn3bqb.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (reduce + l) 2))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpvi9309cv.rkt:9:6: reduce: unbound identifier\n  in: reduce\n  location...:\n\
    \   /tmp/tmpvi9309cv.rkt:9:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply median (rest l)) (length l)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal?\
    \ (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6\
    \ 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal?\
    \ (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2\
    \ 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphx1803rz.rkt:16:4\n\
    \nmedian: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 4\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphx1803rz.rkt:17:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphx1803rz.rkt:18:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphx1803rz.rkt:19:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 5\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphx1803rz.rkt:20:4\n\
    \nmedian: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 6\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply median (rest l)) (length l)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal?\
    \ (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6\
    \ 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal?\
    \ (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2\
    \ 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc0z98dap.rkt:16:4\n\
    \nmedian: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 4\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpc0z98dap.rkt:17:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpc0z98dap.rkt:18:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpc0z98dap.rkt:19:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 5\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc0z98dap.rkt:20:4\n\
    \nmedian: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 6\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (reduce (lambda (x y) (if (< x y) x y)) l) 2))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n   \
    \ (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp5yjmz0s6.rkt:9:6: reduce: unbound identifier\n  in: reduce\n  location...:\n\
    \   /tmp/tmp5yjmz0s6.rkt:9:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply median l) 2))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkyb1moqw.rkt:16:4\n\
    \nmedian: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkyb1moqw.rkt:17:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 6\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkyb1moqw.rkt:18:4\n\napply:\
    \ contract violation\n  expected: list?\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkyb1moqw.rkt:19:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkyb1moqw.rkt:20:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2qkxdmpj.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp2qkxdmpj.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp2qkxdmpj.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp2qkxdmpj.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplwmiev6x.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmplwmiev6x.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmplwmiev6x.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmplwmiev6x.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2kw2eauu.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp2kw2eauu.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp2kw2eauu.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp2kw2eauu.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_1v5z2uk.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp_1v5z2uk.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp_1v5z2uk.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp_1v5z2uk.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (reduce (lambda (x y) (if (< y x) y x)) l)\n     (length l)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n\
    \    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpbcezmlt_.rkt:9:6: reduce: unbound identifier\n  in: reduce\n  location...:\n\
    \   /tmp/tmpbcezmlt_.rkt:9:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply + l) (length l)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsd5zaevc.rkt:17:4\n\
    actual:     515/3\nexpected:   8.0\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsd5zaevc.rkt:19:4\nactual:\
    \     11/2\nexpected:   5.5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpsd5zaevc.rkt:20:4\nactual:     39/7\n\
    expected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpugjunqml.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpugjunqml.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpugjunqml.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpugjunqml.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply median l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeh9ia3g4.rkt:16:4\n\
    \nmedian: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpeh9ia3g4.rkt:17:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 6\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpeh9ia3g4.rkt:18:4\n\napply:\
    \ contract violation\n  expected: list?\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpeh9ia3g4.rkt:19:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpeh9ia3g4.rkt:20:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply median l) 2))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdztvy2nw.rkt:16:4\n\
    \nmedian: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdztvy2nw.rkt:17:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 6\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdztvy2nw.rkt:18:4\n\napply:\
    \ contract violation\n  expected: list?\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdztvy2nw.rkt:19:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdztvy2nw.rkt:20:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (reduce + l) (carl l)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpnkjs2nwo.rkt:9:6: reduce: unbound identifier\n  in: reduce\n  location...:\n\
    \   /tmp/tmpnkjs2nwo.rkt:9:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_jec48hn.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp_jec48hn.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp_jec48hn.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp_jec48hn.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply + l) (length l)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl3dxysgg.rkt:17:4\n\
    actual:     515/3\nexpected:   8.0\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl3dxysgg.rkt:19:4\nactual:\
    \     11/2\nexpected:   5.5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpl3dxysgg.rkt:20:4\nactual:     39/7\n\
    expected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply median (map - l)) (length l)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal?\
    \ (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6\
    \ 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal?\
    \ (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2\
    \ 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphzh4_dgr.rkt:16:4\n\
    \nmedian: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphzh4_dgr.rkt:17:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 6\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphzh4_dgr.rkt:18:4\n\nmap:\
    \ contract violation\n  expected: list?\n  given: -5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphzh4_dgr.rkt:19:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphzh4_dgr.rkt:20:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7h2cwtx0.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp7h2cwtx0.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp7h2cwtx0.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp7h2cwtx0.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (reduce (lambda (x y) (if (< x y) x y)) l)\n     (length l)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n\
    \    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpko_k1m4s.rkt:9:6: reduce: unbound identifier\n  in: reduce\n  location...:\n\
    \   /tmp/tmpko_k1m4s.rkt:9:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk4ui4nju.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpk4ui4nju.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpk4ui4nju.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpk4ui4nju.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp80nnmn3r.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp80nnmn3r.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp80nnmn3r.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp80nnmn3r.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (reduce (lambda (x y) (if (< x y) x y)) l) 2))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n   \
    \ (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpp4csf84e.rkt:9:6: reduce: unbound identifier\n  in: reduce\n  location...:\n\
    \   /tmp/tmpp4csf84e.rkt:9:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp65ogdqhw.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp65ogdqhw.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp65ogdqhw.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp65ogdqhw.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply median l) 2))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy8l422qu.rkt:16:4\n\
    \nmedian: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpy8l422qu.rkt:17:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 6\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpy8l422qu.rkt:18:4\n\napply:\
    \ contract violation\n  expected: list?\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpy8l422qu.rkt:19:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpy8l422qu.rkt:20:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplgnptjkq.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmplgnptjkq.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmplgnptjkq.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmplgnptjkq.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (reduce + l) 2))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpcuh6y5q3.rkt:9:6: reduce: unbound identifier\n  in: reduce\n  location...:\n\
    \   /tmp/tmpcuh6y5q3.rkt:9:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1t77dqmk.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp1t77dqmk.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp1t77dqmk.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp1t77dqmk.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (reduce (lambda (x y) (if (< x y) x y)) l)\n     (length l)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n\
    \    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpu130c2um.rkt:9:6: reduce: unbound identifier\n  in: reduce\n  location...:\n\
    \   /tmp/tmpu130c2um.rkt:9:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply + l) (length l)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp920t1ek8.rkt:17:4\n\
    actual:     515/3\nexpected:   8.0\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp920t1ek8.rkt:19:4\nactual:\
    \     11/2\nexpected:   5.5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp920t1ek8.rkt:20:4\nactual:     39/7\n\
    expected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (reduce (lambda (x y) (if (< x y) x y)) l) 2))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n   \
    \ (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmptlmbgwaq.rkt:9:6: reduce: unbound identifier\n  in: reduce\n  location...:\n\
    \   /tmp/tmptlmbgwaq.rkt:9:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (reduce (lambda (x y) (if (< x y) x y)) l)\n     (length l)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n\
    \    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpr8g3zxx6.rkt:9:6: reduce: unbound identifier\n  in: reduce\n  location...:\n\
    \   /tmp/tmpr8g3zxx6.rkt:9:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp63rne64e.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp63rne64e.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp63rne64e.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp63rne64e.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi5f8vwak.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpi5f8vwak.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpi5f8vwak.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpi5f8vwak.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1axm4ivz.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp1axm4ivz.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp1axm4ivz.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp1axm4ivz.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply median l) 2))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxox6kgi.rkt:16:4\n\
    \nmedian: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxox6kgi.rkt:17:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 6\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxox6kgi.rkt:18:4\n\napply:\
    \ contract violation\n  expected: list?\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxox6kgi.rkt:19:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxox6kgi.rkt:20:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (reduce + l) 2))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpyvlw9jyl.rkt:9:6: reduce: unbound identifier\n  in: reduce\n  location...:\n\
    \   /tmp/tmpyvlw9jyl.rkt:9:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1elg73g4.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp1elg73g4.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp1elg73g4.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp1elg73g4.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply median (rest l)) (length l)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal?\
    \ (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6\
    \ 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal?\
    \ (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2\
    \ 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphn9lm8f1.rkt:16:4\n\
    \nmedian: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 4\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphn9lm8f1.rkt:17:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphn9lm8f1.rkt:18:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphn9lm8f1.rkt:19:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 5\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphn9lm8f1.rkt:20:4\n\
    \nmedian: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 6\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj7t09e1j.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpj7t09e1j.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpj7t09e1j.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpj7t09e1j.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqh5uhnqr.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpqh5uhnqr.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpqh5uhnqr.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpqh5uhnqr.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_s4w345.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp0_s4w345.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp0_s4w345.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp0_s4w345.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpin3pypzp.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpin3pypzp.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpin3pypzp.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpin3pypzp.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (reduce + l) (carl l)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp_ub2vp4v.rkt:9:6: reduce: unbound identifier\n  in: reduce\n  location...:\n\
    \   /tmp/tmp_ub2vp4v.rkt:9:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply median l) 2))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuxd3q_hj.rkt:16:4\n\
    \nmedian: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpuxd3q_hj.rkt:17:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 6\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpuxd3q_hj.rkt:18:4\n\napply:\
    \ contract violation\n  expected: list?\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpuxd3q_hj.rkt:19:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpuxd3q_hj.rkt:20:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (reduce (lambda (x y) (if (< x y) x y)) l)\n     (length l)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n\
    \    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpnj4o26z3.rkt:9:6: reduce: unbound identifier\n  in: reduce\n  location...:\n\
    \   /tmp/tmpnj4o26z3.rkt:9:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6m0dcq4q.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp6m0dcq4q.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp6m0dcq4q.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp6m0dcq4q.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1c31ld9g.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp1c31ld9g.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp1c31ld9g.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp1c31ld9g.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (reduce (lambda (x y) (if (< x y) x y)) l)\n     (length l)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n\
    \    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp8uhkk0q8.rkt:9:6: reduce: unbound identifier\n  in: reduce\n  location...:\n\
    \   /tmp/tmp8uhkk0q8.rkt:9:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp1ebm7ol.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpp1ebm7ol.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpp1ebm7ol.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpp1ebm7ol.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply median (rest l)) (length l)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal?\
    \ (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6\
    \ 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal?\
    \ (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2\
    \ 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_jg3s5ci.rkt:16:4\n\
    \nmedian: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 4\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_jg3s5ci.rkt:17:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_jg3s5ci.rkt:18:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_jg3s5ci.rkt:19:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 5\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_jg3s5ci.rkt:20:4\n\
    \nmedian: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 6\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp361qiln7.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp361qiln7.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp361qiln7.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp361qiln7.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc9426xh5.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpc9426xh5.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpc9426xh5.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpc9426xh5.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply min l) (length l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyngsz3z_.rkt:16:4\n\
    actual:     1/5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpyngsz3z_.rkt:17:4\nactual:     -5/3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpyngsz3z_.rkt:19:4\nactual:     5/2\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpyngsz3z_.rkt:20:4\nactual:     1/7\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (/ (apply median l) 2))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtenu2c3.rkt:16:4\n\
    \nmedian: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtenu2c3.rkt:17:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 6\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtenu2c3.rkt:18:4\n\napply:\
    \ contract violation\n  expected: list?\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtenu2c3.rkt:19:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtenu2c3.rkt:20:4\n\nmedian:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 7\n--------------------\n"
  exit_code: 0
  status: Exception
