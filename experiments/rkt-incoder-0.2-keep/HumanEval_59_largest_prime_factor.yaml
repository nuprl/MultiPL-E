name: HumanEval_59_largest_prime_factor
language: racket
prompt: "#lang racket\n\n;; Return the largest prime factor of n. Assume n > 1 and\
  \ is not a prime.\n;; >>> largest_prime_factor(13195)\n;; 29\n;; >>> largest_prime_factor(2048)\n\
  ;; 2\n(define (largest_prime_factor n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_prime_factor))\n\
  \    (check-equal? (candidate 15) 5)\n    (check-equal? (candidate 27) 3)\n    (check-equal?\
  \ (candidate 63) 7)\n    (check-equal? (candidate 330) 11)\n    (check-equal? (candidate\
  \ 13195) 29)\n))\n\n(test-humaneval)"
completions: ["  (cond [(= n 1) n]\n        [(= (modulo n 2) 0) (/ n 2)]\n       \
    \ [else (largest_prime_factor (/ n 2))]))\n", "  (cond [(= n 1) 1]\n        [(=\
    \ (modulo n 2) 0) (largest_prime_factor (/ n 2))]\n        [else (* 2 (largest_prime_factor\
    \ (/ n 2)))]))\n", "  (if (= n 1)\n      n\n      (let ((factor (prime-factors\
    \ n)))\n        (if (null? factor)\n            n\n            (let ((largest\
    \ (car factor)))\n              (if (> largest n)\n                  largest\n\
    \                  (largest_prime_factor (* n largest))))))))\n", "  (cond [(=\
    \ n 1) 2]\n        [(= n 2) 3]\n        [(= n 3) (* 3 2)]\n        [else (largest_prime_factor\
    \ (/ n 2))]))\n", "  (cond [(= n 1) n]\n        [(= (modulo n 2) 0) (/ n 2)]\n\
    \        [else (largest_prime_factor (/ n 2))]))\n", "  (cond [(= n 1) 2]\n  \
    \      [(= (modulo n 2) 0) (largest_prime_factor (/ n 2))]\n        [else (+ 1\
    \ (largest_prime_factor (/ n 2)))]))\n", "  (cond [(= n 1) 2]\n        [(= (modulo\
    \ n 2) 0) (largest_prime_factor (/ n 2))]\n        [else (+ 1 (largest_prime_factor\
    \ (/ n 2)))]))\n", "  (cond [(= n 1) 2]\n        [(= (modulo n 2) 0) (* 2 (largest_prime_factor\
    \ n))]\n        [else (* 2 (largest_prime_factor n))]\n        ))\n", "  (let\
    \ loop ((n n) (prime (make-prime (floor (sqrt n))))\n             (factors (list\
    \ prime)))\n    (cond ((= n 1) (first factors))\n          ((prime-divides? n\
    \ prime) (loop n (rest factors)))\n          (else (loop (quotient n prime) (cons\
    \ (first factors) factors))))))\n", "  (cond [(= n 1) 1]\n        [(= (modulo\
    \ n 2) 0) (/ n 2)]\n        [else (largest_prime_factor (/ n 2))]))\n", "  (cond\
    \ [(= n 1) 2]\n        [(= (modulo n 2) 0) (* 2 n)]\n        [else (largest_prime_factor\
    \ (quotient n 2))]))\n", "  (cond [(= n 1) n]\n        [(= (modulo n 2) 0) (/\
    \ n 2)]\n        [else (largest_prime_factor (/ n 2))]))\n", "  (cond [(= n 1)\
    \ 1]\n        [(= (modulo n 2) 0) (largest_prime_factor (/ n 2))]\n        [else\
    \ (* 2 (largest_prime_factor (/ n 2)))]))\n", "  (let loop ((n n) (prime 1) (max\
    \ 0))\n    (if (= n 1)\n        prime\n        (loop (/ n prime) (+ prime prime)\
    \ (max max)))))\n", "  (let loop ((n n) (max 1) (primes '()))\n    (cond ((= n\
    \ 1) (if (null? primes) max primes))\n          ((= n 2) (if (null? primes) max\
    \ primes))\n          ((= (modulo n 3) 0) (if (null? primes) max primes))\n  \
    \        ((null? (remainder-mod n 3)) (if (null? primes) max primes))\n      \
    \    (else (loop (remainder-mod n 3) (+ max 1) (cons (modulo n 3) primes)))\n\
    \          )))\n", "  (cond [(= n 1) 1]\n        [(= (modulo n 2) 0) (/ n 2)]\n\
    \        [else (largest_prime_factor (/ n 2))]))\n", "  (cond [(= n 1) n]\n  \
    \      [(= (modulo n 2) 0) (/ n 2)]\n        [else (largest_prime_factor (/ n\
    \ 2))]))\n", "  (let loop ((n n) (prime 1))\n    (cond ((= n 1) prime)\n     \
    \     ((= n 2) prime)\n          ((= (mod n prime) 0) (loop (/ n prime) (+ prime\
    \ 1)))\n          (else (loop (/ n prime) (+ prime 1))))))\n", "  (let loop ((n\
    \ n) (prime 1) (max 0))\n    (if (= n 1)\n        prime\n        (loop (/ n prime)\
    \ (* prime prime) (+ max prime))))))\n", "  (cond [(= n 1) n]\n        [(= (modulo\
    \ n 2) 0) (/ n 2)]\n        [else (largest_prime_factor (/ n 2))]))\n", "  (cond\
    \ [(= n 1) n]\n        [(= (modulo n 2) 0) (/ n 2)]\n        [else (largest_prime_factor\
    \ (/ n 2))]))\n", "  (if (= n 1)\n      n\n      (let ((factor (prime-factors\
    \ n)))\n        (if (null? factor)\n            n\n            (max (car factor)\
    \ (largest_prime_factor (cdr factor)))))))\n", "  (let loop ((n n) (prime 1))\n\
    \    (cond ((= n 1) prime)\n          ((even? n) (loop (/ n 2) prime))\n     \
    \     ((odd? n) (loop (* n 3) prime))\n          (else (loop (* n prime) (+ prime\
    \ (quotient n prime)))))))\n", "  (cond [(= n 1) n]\n        [(= (modulo n 2)\
    \ 0) (/ n 2)]\n        [else (largest_prime_factor (/ n 2))]))\n", "  (cond [(=\
    \ n 1) n]\n        [(= (modulo n 2) 0) (/ n 2)]\n        [else (largest_prime_factor\
    \ (/ n 2))]))\n", "  (cond [(= n 1) 1]\n        [(= (mod n 2) 0) (* 2 (largest_prime_factor\
    \ n))]\n        [else (* 3 (largest_prime_factor n))]\n        ))\n", "  (let\
    \ loop ((n n) (prime 1) (max 0))\n    (if (= n 1)\n        prime\n        (loop\
    \ (quotient n prime) (quotient n prime) (max max)))))\n", "  (if (= n 1)\n   \
    \   n\n      (let ((factor (prime-factors n)))\n        (if (null? factor)\n \
    \           n\n            (if (> (length factor) 2)\n                (let ((factor\
    \ (sub1 factor)))\n                  (if (null? factor)\n                    \
    \  n\n                      (if (> (length factor) 2)\n                      \
    \    (let ((factor (sub1 factor)))\n                            (if (null? factor)\n\
    \                                n\n                                (if (> (length\
    \ factor) 2)\n                                    (let ((factor (sub1 factor)))\n\
    \                                      (if (null? factor)\n                  \
    \                        n\n                                          (if (> (length\
    \ factor) 2)\n                                              (let ((factor (sub1\
    \ factor)))\n                                                (if (null? factor)\n\
    \                                                    n\n                     \
    \                               (if (> (length factor) 2)\n                  \
    \                                      (let ((factor (sub1 factor)))\n       \
    \                                                   (if (null? factor)\n     \
    \                                                         n\n                \
    \                                              (if (> (length factor) 2)\n   \
    \                                                               (let ((factor\
    \ (sub1 factor)))\n                                                          \
    \          (if (null? factor)\n                                              \
    \                          n\n                                               \
    \                         (if (> (length factor) 2)\n                        \
    \                                                    (let ((factor (sub1 factor)))\n\
    \                                                                            \
    \  (if (null? factor)\n                                                      \
    \                            n\n                                             \
    \                                     (if (> (length factor) 2)\n            \
    \                                                                          (let\
    \ ((factor (sub1 factor)))\n                                                 \
    \                                       (if (null? factor)\n                 \
    \                                                                           n\n\
    \                                                                            \
    \                (if (> (length factor) 2)\n                                 \
    \                                                               (let ((factor\
    \ (sub1 factor)))\n                                                          \
    \                                        (if (null? factor)\n                \
    \                                                                            \
    \          n\n                                                               \
    \                                       (if (> (length factor) 2)\n          \
    \                                                                            \
    \                    (let ((factor (sub1 factor)))\n                         \
    \                                                                            \
    \       (if (null? factor)\n                                                 \
    \                                                               n\n          \
    \                                                                            \
    \                          (if (> (length factor) 2)\n                       \
    \                                                                            \
    \                 (let ((factor (sub1 factor)))\n                            \
    \                                                                            \
    \              (if (null? factor)\n                                          \
    \                                                                            \
    \    n\n                                                                     \
    \                                                     (if (> (length factor) 2)\n\
    \                                                                            \
    \                                                  (let ((factor (sub1 factor)))\n\
    \                                                                            \
    \                                                    (if (null? factor)\n    \
    \                                                                            \
    \                                                  n\n                       \
    \                                                                            \
    \                               (if (> (length factor) 2)\n                  \
    \                                                                            \
    \                                        (let ((factor (sub1 factor)))\n     \
    \                                                                            \
    \                                                       (if (null? factor)\n \
    \                                                                            \
    \                                                                            \
    \                 n\n                                                        \
    \                                                                            \
    \                                      (if (> (length factor) 2)\n           \
    \                                                                            \
    \                                                                            \
    \           (let ((factor (sub1 factor)))\n                                  \
    \                                                                            \
    \                                                                  (if (null?\
    \ factor)\n                                                                  \
    \                                                                            \
    \                                      n\n                                   \
    \                                                                            \
    \                                                                     (if (> (length\
    \ factor) 2)\n                                                               \
    \                                                                            \
    \                                             (let ((factor (sub1 factor)))\n\
    \                                                                            \
    \                                                                            \
    \                                  ", "  (let loop ((n n) (i 2) (primes #{}))\n\
    \    (if (= i 2)\n        n\n        (let ((p (prime-factor (- n i))))\n     \
    \     (if (member p primes)\n              (loop (- n i) (inc i) primes)\n   \
    \           (loop (- n i) (inc i) (inc primes))))))))\n", "  (if (= n 1)\n   \
    \   n\n      (let ((factor (prime-factors n)))\n        (if (null? factor)\n \
    \           n\n            (if (> n (car factor))\n                (if (= n (car\
    \ factor))\n                    n\n                    (if (= n (cdr factor))\n\
    \                        (car factor)\n                        (if (= n (cddr\
    \ factor))\n                            (car factor)\n                       \
    \     (if (= n (cdddr factor))\n                                (car factor)\n\
    \                                (if (= n (cdddr factor))\n                  \
    \                  (car factor)\n                                    (if (= n\
    \ (cdddr factor))\n                                        (car factor)\n    \
    \                                    (if (= n (cdddr factor))\n              \
    \                              (car factor)\n                                \
    \            (if (= n (cdddr factor))\n                                      \
    \          (car factor)\n                                                (if (=\
    \ n (cdddr factor))\n                                                    (car\
    \ factor)\n                                                    (if (= n (cdddr\
    \ factor))\n                                                        (car factor)\n\
    \                                                        (if (= n (cdddr factor))\n\
    \                                                            (car factor)\n  \
    \                                                          (if (= n (cdddr factor))\n\
    \                                                                (car factor)\n\
    \                                                                (if (= n (cdddr\
    \ factor))\n                                                                 \
    \   (car factor)\n                                                           \
    \         (if (= n (cdddr factor))\n                                         \
    \                               (car factor)\n                               \
    \                                         (if (= n (cdddr factor))\n         \
    \                                                                   (car factor)\n\
    \                                                                            (if\
    \ (= n (cdddr factor))\n                                                     \
    \                           (car factor)\n                                   \
    \                                             (if (= n (cdddr factor))\n     \
    \                                                                            \
    \   (car factor)\n                                                           \
    \                         (if (= n (cdddr factor))\n                         \
    \                                                               (car factor)\n\
    \                                                                            \
    \            (if (= n (cdddr factor))\n                                      \
    \                                                      (car factor)\n        \
    \                                                                            \
    \        (if (= n (cdddr factor))\n                                          \
    \                                                      (car factor)\n        \
    \                                                                            \
    \            (if (= n (cdddr factor))\n                                      \
    \                                                              (car factor)\n\
    \                                                                            \
    \                        (if (= n (cdddr factor))\n                          \
    \                                                                            \
    \  (car factor)\n                                                            \
    \                                            (if (= n (cdddr factor))\n      \
    \                                                                            \
    \                          (car factor)\n                                    \
    \                                                                        (if (=\
    \ n (cdddr factor))\n                                                        \
    \                                                        (car factor)\n      \
    \                                                                            \
    \                              (if (= n (cdddr factor))\n                    \
    \                                                                            \
    \                    (car factor)\n                                          \
    \                                                                          (if\
    \ (= n (cdddr factor", "  (cond [(= n 1) 1]\n        [(= (mod n 2) 0) (/ n 2)]\n\
    \        [else (largest_prime_factor (/ n 2))]))\n", "  (cond [(= n 1) n]\n  \
    \      [(= (modulo n 2) 0) (/ n 2)]\n        [else (largest_prime_factor (/ n\
    \ 2))]))\n", "  (cond [(= n 1) 2]\n        [(= (modulo n 2) 0) (+ n 1)]\n    \
    \    [else (largest_prime_factor (quotient n 2))]))\n", "  (cond [(= n 1) n]\n\
    \        [(= (modulo n 2) 0) (/ n 2)]\n        [else (largest_prime_factor (/\
    \ n 2))]))\n", "  (cond [(= n 1) 2]\n        [(= (modulo n 2) 0) (largest_prime_factor\
    \ (/ n 2))]\n        [else (+ 1 (largest_prime_factor (/ n 2)))]))\n", "  (if\
    \ (= n 1)\n      n\n      (let ((factor (prime-factors n)))\n        (if (null?\
    \ factor)\n            n\n            (let ((largest (car factor)))\n        \
    \      (if (> largest n)\n                  largest\n                  (largest_prime_factor\
    \ (* largest n))))))))\n", "  (if (= n 1)\n      n\n      (if (even? n)\n    \
    \      (largest_prime_factor (/ n 2))\n          (if (> (/ n 2) 2)\n         \
    \     (largest_prime_factor (/ n 2))\n              (if (> (/ n 4) 2)\n      \
    \            (largest_prime_factor (/ n 4))\n                  (if (> (/ n 8)\
    \ 2)\n                      (largest_prime_factor (/ n 8))\n                 \
    \     (if (> (/ n 16) 2)\n                          (largest_prime_factor (/ n\
    \ 16))\n                          (if (> (/ n 32) 2)\n                       \
    \       (largest_prime_factor (/ n 32))\n                              (if (>\
    \ (/ n 64) 2)\n                                  (largest_prime_factor (/ n 64))\n\
    \                                  (if (> (/ n 128) 2)\n                     \
    \                 (largest_prime_factor (/ n 128))\n                         \
    \             (if (> (/ n 256) 2)\n                                          (largest_prime_factor\
    \ (/ n 256))\n                                          (if (> (/ n 512) 2)\n\
    \                                              (largest_prime_factor (/ n 512))\n\
    \                                              (if (> (/ n 1024) 2)\n        \
    \                                          (largest_prime_factor (/ n 1024))\n\
    \                                                  (if (> (/ n 2048) 2)\n    \
    \                                                  (largest_prime_factor (/ n\
    \ 2048))\n                                                      (if (> (/ n 4096)\
    \ 2)\n                                                          (largest_prime_factor\
    \ (/ n 4096))\n                                                          (if (>\
    \ (/ n 8192) 2)\n                                                            \
    \  (largest_prime_factor (/ n 8192))\n                                       \
    \                       (if (> (/ n 16384) 2)\n                              \
    \                                    (largest_prime_factor (/ n 16384))\n    \
    \                                                              (if (> (/ n 32768)\
    \ 2)\n                                                                      (largest_prime_factor\
    \ (/ n 32768))\n                                                             \
    \         (if (> (/ n 65536) 2)\n                                            \
    \                              (largest_prime_factor (/ n 65536))\n          \
    \                                                                (if (> (/ n 131072)\
    \ 2)\n                                                                       \
    \       (largest_prime_factor (/ n 131072))\n                                \
    \                                              (if (> (/ n 262144) 2)\n      \
    \                                                                            (largest_prime_factor\
    \ (/ n 262144))\n                                                            \
    \                      (if (> (/ n 524288) 2)\n                              \
    \                                                        (largest_prime_factor\
    \ (/ n 524288))\n                                                            \
    \                          (if (> (/ n 1048576) 2)\n                         \
    \                                                                 (largest_prime_factor\
    \ (/ n 1048576))\n                                                           \
    \                               (if (> (/ n 2097152) 2)\n                    \
    \                                                                          (largest_prime_factor\
    \ (/ n 20", "  (cond [(= n 1) 2]\n        [(= (modulo n 2) 0) (* 2 n)]\n     \
    \   [else (largest_prime_factor (/ n 2))]))\n", "  (cond [(= n 1) 1]\n       \
    \ [(= (modulo n 2) 0) (largest_prime_factor (/ n 2))]\n        [else (* 2 (largest_prime_factor\
    \ n))]\n        ))\n", "  (cond [(= n 1) n]\n        [(= (modulo n 2) 0) (/ n\
    \ 2)]\n        [else (largest_prime_factor (/ n 2))]))\n", "  (if (= n 1)\n  \
    \    n\n      (let ((factor (prime-factors n)))\n        (if (null? factor)\n\
    \            n\n            (if (> (length factor) 1)\n                (first\
    \ factor)\n                (largest_prime_factor n)))))\n", "  (cond [(= n 1)\
    \ n]\n        [(= (modulo n 2) 0) (/ n 2)]\n        [else (largest_prime_factor\
    \ (quotient n 2))]))\n", "  (cond [(= n 1) n]\n        [(= (modulo n 2) 0) (/\
    \ n 2)]\n        [else (largest_prime_factor (/ n 2))]))\n", "  (if (= n 1)\n\
    \      n\n      (let ((factor (factorize n)))\n        (if (null? factor)\n  \
    \          n\n            (max (car factor) (largest_prime_factor cdr factor))))))\n",
  "  (cond [(= n 1) n]\n        [(= (modulo n 2) 0) (/ n 2)]\n        [else (largest_prime_factor\
    \ (quotient n 2))]))\n", "  (cond [(= n 1) n]\n        [(= (mod n 2) 0) (/ n 2)]\n\
    \        [else (largest_prime_factor (/ n 2))]))\n", "  (let loop ((n n) (max\
    \ 1) (i 2))\n    (if (= i max)\n        n\n        (loop (* n n) (+ i 1) (+ i\
    \ 1)))))\n", "  (if (= n 1)\n      n\n      (let ((factors (prime-factors n)))\n\
    \        (if (null? factors)\n            n\n            (let ((largest (car factors)))\n\
    \              (if (= n largest)\n                  largest\n                \
    \  (if (null? (cdr factors))\n                      largest\n                \
    \      (let ((next (largest_prime_factor (* n largest))))\n                  \
    \      (if (= n next)\n                            next\n                    \
    \        (if (= n largest)\n                                largest\n        \
    \                        (if (= n next)\n                                    next\n\
    \                                    (if (= n largest)\n                     \
    \                   largest\n                                        (if (= n\
    \ next)\n                                            next\n                  \
    \                          (if (= n largest)\n                               \
    \                 largest\n                                                (if\
    \ (= n next)\n                                                    next\n     \
    \                                               (if (= n largest)\n          \
    \                                              largest\n                     \
    \                                   (if (= n next)\n                         \
    \                                   next\n                                   \
    \                         (if (= n largest)\n                                \
    \                                largest\n                                   \
    \                             (if (= n next)\n                               \
    \                                     next\n                                 \
    \                                   (if (= n largest)\n                      \
    \                                                  largest\n                 \
    \                                                       (if (= n next)\n     \
    \                                                                       largest\n\
    \                                                                            (if\
    \ (= n next)\n                                                               \
    \                 next\n                                                     \
    \                           (if (= n largest)\n                              \
    \                                                      largest\n             \
    \                                                                       (if (=\
    \ n next)\n                                                                  \
    \                      largest\n                                             \
    \                                           (if (= n next)\n                 \
    \                                                                           largest\n\
    \                                                                            \
    \                (if (= n next)\n                                            \
    \                                                    largest\n               \
    \                                                                            \
    \     (if (= n next)\n                                                       \
    \                                             largest\n                      \
    \                                                                            \
    \  (if (= n next)\n                                                          \
    \                                              largest\n                     \
    \                                                                            \
    \       (if (= n next)\n                                                     \
    \                                                       largest\n            \
    \                                                                            \
    \                    (if (= n next)\n                                        \
    \                                                                        largest\n\
    \                                                                            \
    \                                    (if (= n next)\n                        \
    \                                                                            \
    \                largest\n                                                   \
    \                                                                 (if (= n next)\n\
    \                                                                            \
    \                                            largest\n                       \
    \                                                                            \
    \                     (if (= n next)\n                                       \
    \                                                                            \
    \         largest\n                                                          \
    \                                                                  (if (= n next)\n\
    \                                                                            \
    \                                                    largest\n               \
    \                                                                            \
    \                                     (if (= n next)\n                       \
    \                                                                            \
    \                                 largest\n                                  \
    \                                                                            \
    \                      (if (= n next)\n                                      \
    \                                                                            \
    \                      largest\n                                             \
    \                                                                            \
    \               (if (= n next)\n                                             \
    \                                                                            \
    \                   largest\n                                                \
    \                                                                            \
    \                (if (= n next)\n                                            \
    \                                                                            \
    \                        largest\n                                           \
    \                                                                            \
    \                         (if (= n next)\n                                   \
    \                                                                            \
    \                                     largest\n                              \
    \                                                                            \
    \                                          (if (= n next)\n                  \
    \                                                                            \
    \                                                          ", "  (cond [(= n 1)\
    \ 1]\n        [(= (mod n 2) 0) (/ n 2)]\n        [else (largest_prime_factor (/\
    \ n 2))]))\n", "  (let loop ((n n) (p 2))\n    (if (= n 1)\n        p\n      \
    \  (loop (quotient n p)\n              (if (even? p)\n                  (+ 1 (loop\
    \ (quotient n p) (quotient p 2)))\n                  (+ 1 (loop (quotient n p)\
    \ (quotient p 2)))))))\n", "  (cond [(= n 1) 2]\n        [(= (modulo n 2) 0) (+\
    \ 2 (largest_prime_factor n))]\n        [else (largest_prime_factor n)]))\n",
  "  (let loop ((n n) (p 2))\n    (if (= p n)\n        n\n        (loop (quotient\
    \ n p) (+ p 1)))))\n", "  (if (= n 1)\n      n\n      (let ((factor (prime-factors\
    \ n)))\n        (if (null? factor)\n            n\n            (if (> (length\
    \ factor) 1)\n                (first factor)\n                (largest_prime_factor\
    \ (first factor)))))\n      )\n  )\n", "  (cond [(= n 1) 1]\n        [(= (modulo\
    \ n 2) 0) (largest_prime_factor (/ n 2))]\n        [else (+ 1 (largest_prime_factor\
    \ (/ n 2)))]))\n", "  (cond [(= n 1) 1]\n        [(= (modulo n 2) 0) (/ n 2)]\n\
    \        [else (* 2 (largest_prime_factor n))]\n  )\n)\n", "  (cond [(= n 1) 2]\n\
    \        [(= (modulo n 2) 0) (+ 2 (largest_prime_factor n))]\n        [else (largest_prime_factor\
    \ n)]))\n", "  (if (= n 1)\n      n\n      (let ((factor (prime-factors n)))\n\
    \        (if (null? factor)\n            n\n            (if (> (length factor)\
    \ 2)\n                (let ((largest (car factor)))\n                  (if (=\
    \ largest)\n                      (largest_prime_factor largest)\n           \
    \           (if (= (length factor) 2)\n                          (* n largest)\n\
    \                          (* n (largest_prime_factor largest))))))))))\n", " \
    \ (cond [(= n 1) n]\n        [(= (modulo n 2) 0) (/ n 2)]\n        [else (largest_prime_factor\
    \ (quotient n 2))]))\n", "  (if (= n 1)\n      n\n      (let ((factor (prime-factors\
    \ n)))\n        (if (null? factor)\n            n\n            (if (> (length\
    \ factor) 2)\n                (first factor)\n                (first factor)))))\n",
  "  (cond [(= n 1) n]\n        [(= (modulo n 2) 0) (/ n 2)]\n        [else (largest_prime_factor\
    \ (/ n 2))]))\n", "  (if (= n 1)\n      n\n      (let ((factor (prime-factors\
    \ n)))\n        (if (null? factor)\n            n\n            (max (car factor)\
    \ (largest_prime_factor (cdr factor)))))))\n", "  (cond [(= n 1) n]\n        [(=\
    \ (mod n 2) 0) (/ n 2)]\n        [else (largest_prime_factor (/ n 2))]))\n", " \
    \ (cond [(= n 1) n]\n        [(= (modulo n 2) 0) (/ n 2)]\n        [else (largest_prime_factor\
    \ (/ n 2))]))\n", "  (if (= n 1)\n      n\n      (let ((factor (prime-factors\
    \ n)))\n        (if (null? factor)\n            n\n            (max (car factor)\
    \ (largest_prime_factor (cdr factor)))))))\n", "  (let loop ((n n) (prime (primes\
    \ n)))\n    (cond ((null? prime) (error \"No prime factors found\"))\n       \
    \   ((= (length prime) 1) (first prime))\n          ((= (length prime) 2) (first\
    \ prime))\n          ((= (length prime) 3) (first prime))\n          ((= (length\
    \ prime) 4) (first prime))\n          ((= (length prime) 5) (first prime))\n \
    \         ((= (length prime) 6) (first prime))\n          ((= (length prime) 7)\
    \ (first prime))\n          ((= (length prime) 8) (first prime))\n          ((=\
    \ (length prime) 9) (first prime))\n          ((= (length prime) 10) (first prime))\n\
    \          ((= (length prime) 11) (first prime))\n          ((= (length prime)\
    \ 12) (first prime))\n          ((= (length prime) 13) (first prime))\n      \
    \    ((= (length prime) 14) (first prime))\n          ((= (length prime) 15) (first\
    \ prime))\n          ((= (length prime) 16) (first prime))\n          ((= (length\
    \ prime) 17) (first prime))\n          ((= (length prime) 18) (first prime))\n\
    \          ((= (length prime) 19) (first prime))\n          ((= (length prime)\
    \ 20) (first prime))\n          ((= (length prime) 21) (first prime))\n      \
    \    ((= (length prime) 22) (first prime))\n          ((= (length prime) 23) (first\
    \ prime))\n          ((= (length prime) 24) (first prime))\n          ((= (length\
    \ prime) 25) (first prime))\n          ((= (length prime) 26) (first prime))\n\
    \          ((= (length prime) 27) (first prime))\n          ((= (length prime)\
    \ 28) (first prime))\n          ((= (length prime) 29) (first prime))\n      \
    \    ((= (length prime) 30) (first prime))\n          ((= (length prime) 31) (first\
    \ prime))\n          ((= (length prime) 32) (first prime))\n          ((= (length\
    \ prime) 33) (first prime))\n          ((= (length prime) 34) (first prime))\n\
    \          ((= (length prime) 35) (first prime))\n          ((= (length prime)\
    \ 36) (first prime))\n          ((= (length prime) 37) (first prime", "  (cond\
    \ [(= n 1) 2]\n        [(= (modulo n 2) 0) (+ 2 (largest_prime_factor (/ n 2)))]\n\
    \        [else (largest_prime_factor (/ n 2))]))\n", "  (let loop ((n n) (prime\
    \ 1))\n    (cond ((= n 1) prime)\n          ((= n 2) prime)\n          ((even?\
    \ n) (loop (/ n 2) prime))\n          (else (loop (* n prime) (+ prime (floor\
    \ (/ n prime))))))))\n", "  (let loop ((n n) (max 1) (prime (primes n)))\n   \
    \ (cond ((= n 1) prime)\n          ((= (modulo n prime) 0) (loop (quotient n prime)\
    \ (quotient prime max) (quotient n prime)))\n          (else (loop (quotient n\
    \ prime) (quotient prime max) (quotient (modulo n prime) prime))))))\n", "  (if\
    \ (= n 1)\n      n\n      (let ((factor (prime-factors n)))\n        (if (null?\
    \ factor)\n            n\n            (if (> (length factor) 2)\n            \
    \    (let ((factor (sub1 (length factor))))\n                  (if (null? factor)\n\
    \                      n\n                      (if (> (length factor) 2)\n  \
    \                        (let ((factor (sub1 (length factor))))\n            \
    \                (if (null? factor)\n                                n\n     \
    \                           (if (> (length factor) 2)\n                      \
    \              (let ((factor (sub1 (length factor))))\n                      \
    \                (if (null? factor)\n                                        \
    \  n\n                                          (if (> (length factor) 2)\n  \
    \                                            (let ((factor (sub1 (length factor))))\n\
    \                                                (if (null? factor)\n        \
    \                                            n\n                             \
    \                       (if (> (length factor) 2)\n                          \
    \                              (let ((factor (sub1 (length factor))))\n      \
    \                                                    (if (null? factor)\n    \
    \                                                          n\n               \
    \                                               (if (> (length factor) 2)\n  \
    \                                                                (let ((factor\
    \ (sub1 (length factor))))\n                                                 \
    \                   (if (null? factor)\n                                     \
    \                                   n\n                                      \
    \                                  (if (> (length factor) 2)\n               \
    \                                                             (let ((factor (sub1\
    \ (length factor))))\n                                                       \
    \                       (if (null? factor)\n                                 \
    \                                                 n\n                        \
    \                                                          (if (> (length factor)\
    \ 2)\n                                                                       \
    \               (let ((factor (sub1 (length factor))))\n                     \
    \                                                                   (if (null?\
    \ factor)\n                                                                  \
    \                          n\n                                               \
    \                                             (if (> (length factor) 2)\n    \
    \                                                                            \
    \                (let ((factor (sub1 (length factor))))\n                    \
    \                                                                            \
    \  (if (null? factor)\n                                                      \
    \                                                n\n                         \
    \                                                                            \
    \ (if (> (length factor) 2)\n                                                \
    \                                                          (let ((factor (sub1\
    \ (length factor))))\n                                                       \
    \                                                     (if (null? factor)\n   \
    \                                                                            \
    \                                 n\n                                        \
    \                                                                        (if (>\
    \ (length factor) 2)\n                                                       \
    \                                                             (let ((factor (sub1\
    \ (length factor))))\n                                                       \
    \                                                               (if (null? factor)\n\
    \                                                                            \
    \                                              n\n                           \
    \                                                                            \
    \                   (if (> (length factor) 2)\n                              \
    \                                                                            \
    \                    (let ((factor (sub1 (length factor))))\n                \
    \                                                                            \
    \                                    (if (null? factor)\n                    \
    \                                                                            \
    \                                  n\n                                       \
    \                                                                            \
    \               (if (> (length factor) 2)\n                                  \
    \                                                                            \
    \                        (let ((factor (sub1 (length factor))))\n            \
    \                                                                            \
    \                                                (if (null? factor)\n        \
    \                                                                            \
    \                                                                            \
    \            n\n                                                             \
    \                                                                            \
    \                                   (if (> (length factor) 2)\n              \
    \                                                                            \
    \                                                                            \
    \          (let ((factor (sub1 (length factor))))\n                          \
    \                                                                            \
    \                                                                            (if\
    \ (null? factor)\n                                                           \
    \                                                                            \
    \                                               n\n                          \
    \                                                                            \
    \                                                                            \
    \    (if (> (length factor) 2)\n                                             \
    \                                                                            \
    \       ", "  (cond [(= n 1) 2]\n        [(= (modulo n 2) 0) (largest_prime_factor\
    \ (/ n 2))]\n        [else (+ 1 (largest_prime_factor (/ n 2)))]))\n", "  (if\
    \ (= n 1)\n      n\n      (let ((factors (prime-factors n)))\n        (if (null?\
    \ factors)\n            n\n            (max (car factors) (largest_prime_factor\
    \ (cdr factors)))))))\n", "  (if (= n 1)\n      n\n      (let ((factor (prime-factors\
    \ n)))\n        (if (null? factor)\n            n\n            (if (> (length\
    \ factor) 2)\n                (first factor)\n                (first factor)))))\n",
  "  (if (= n 1)\n      n\n      (let ((factor (prime-factors n)))\n        (if (null?\
    \ factor)\n            n\n            (max (first factor) (largest_prime_factor\
    \ (first factor)))\n        ))\n))\n", "  (cond [(= n 1) 1]\n        [(= (modulo\
    \ n 2) 0) (/ n 2)]\n        [else (* 2 (largest_prime_factor n))]\n        ))\n",
  "  (cond [(= n 1) 1]\n        [(= (modulo n 2) 0) (largest_prime_factor (/ n 2))]\n\
    \        [else (+ 1 (largest_prime_factor (/ n 2)))]))\n", "  (if (= n 1)\n  \
    \    n\n      (if (even? n)\n          (if (= (modulo n 2) 1)\n              (largest_prime_factor\
    \ (/ n 2))\n              (largest_prime_factor (/ n 2)))\n          (if (= (modulo\
    \ n 3) 1)\n              (largest_prime_factor (/ n 3))\n              (largest_prime_factor\
    \ (/ n 3)))\n          (if (= (modulo n 5) 1)\n              (largest_prime_factor\
    \ (/ n 5))\n              (largest_prime_factor (/ n 5))))))\n", "  (cond [(=\
    \ n 1) 2]\n        [(even? n) (* 2 n)]\n        [else (let ([factor (largest_prime_factor\
    \ n)]\n                  [factors (filter (lambda (x) (= x factor)) (range 2 n)))])\n\
    \              (if (null? factors)\n                  factor\n               \
    \   (max (first factors) factor)))]))\n", "  (let loop ((n n) (prime 1))\n   \
    \ (if (= n 1)\n        prime\n        (loop (quotient n prime) (if (= (modulo\
    \ n prime) 0) (+ prime 1) (modulo n prime)))\n      )\n    )\n  )\n", "  (cond\
    \ [(= n 1) 1]\n        [(= (modulo n 2) 0) (/ n 2)]\n        [else (largest_prime_factor\
    \ (/ n 2))]))\n", "  (if (= n 1)\n      n\n      (let ((factor (prime-factors\
    \ n)))\n        (if (null? factor)\n            n\n            (if (> (length\
    \ factor) 2)\n                (first factor)\n                (first factor)))))\n",
  "  (if (= n 1)\n      n\n      (let ((factor (prime-factors n)))\n        (if (null?\
    \ factor)\n            n\n            (max (car factor) (largest_prime_factor\
    \ (cdr factor)))))))\n", "  (if (= n 1)\n      n\n      (let ((factor (prime-factors\
    \ n)))\n        (if (null? factor)\n            n\n            (max (first factor)\
    \ (largest_prime_factor (first factor)))))))\n", "  (cond [(= n 1) 2]\n      \
    \  [(= (modulo n 2) 0) (+ 2 (largest_prime_factor (/ n 2)))]\n        [else (largest_prime_factor\
    \ (/ n 2))]))\n", "  (if (= n 1)\n      n\n      (let ((factor (prime-factors\
    \ n)))\n        (if (null? factor)\n            n\n            (let ((largest\
    \ (car factor)))\n              (if (> largest n)\n                  largest\n\
    \                  (largest_prime_factor (* n largest))))))))\n", "  (let loop\
    \ ((n n) (p 2))\n    (if (= n 1)\n        p\n        (loop (quotient n p)\n  \
    \            (if (= (remainder n p) 0)\n                  p\n                \
    \  (+ 1 (loop (quotient n p) (quotient n p))))))))\n", "  (cond [(= n 1) n]\n\
    \        [(= (modulo n 2) 0) (/ n 2)]\n        [else (largest_prime_factor (quotient\
    \ n 2))]))\n", "  (cond [(= n 1) n]\n        [(= (modulo n 2) 0) (/ n 2)]\n  \
    \      [else (largest_prime_factor (/ n 2))]))\n", "  (cond [(= n 1) 2]\n    \
    \    [(= (modulo n 2) 0) (largest_prime_factor (/ n 2))]\n        [else (+ 1 (largest_prime_factor\
    \ (/ n 2)))]))\n", "  (let loop ((n n) (prime 1))\n    (cond ((= n 1) prime)\n\
    \          ((= n 2) prime)\n          ((= (mod n prime) 0) (loop (/ n prime) (+\
    \ prime 1)))\n          (else (loop (/ n prime) prime)))))\n", "  (cond [(= n\
    \ 1) n]\n        [(= (modulo n 2) 0) (/ n 2)]\n        [else (largest_prime_factor\
    \ (/ n 2))]))\n", "  (let loop ((n n) (prime 1))\n    (cond ((= n 1) prime)\n\
    \          ((even? n) (loop (/ n 2) prime))\n          ((odd? n) (loop (* 3 n)\
    \ (* prime (floor (/ n 2)))))\n          (else (loop (* 3 n) (* prime (floor (/\
    \ n 2))))))))\n", "  (let loop ((n n) (prime 1))\n    (cond ((= n 1) prime)\n\
    \          ((even? n) (loop (/ n 2) prime))\n          (else (loop (* n prime)\
    \ (/ n prime))))))\n", "  (if (= n 1)\n      n\n      (let ((factor (prime-factors\
    \ n)))\n        (if (null? factor)\n            n\n            (if (> (length\
    \ factor) 1)\n                (first factor)\n                (largest_prime_factor\
    \ n))))))\n", "  (cond [(= n 1) 1]\n        [(= (modulo n 2) 0) (largest_prime_factor\
    \ (/ n 2))]\n        [else (+ 1 (largest_prime_factor (/ n 2)))]))\n", "  (cond\
    \ [(= n 1) 1]\n        [(= n 2) 2]\n        [(= n 3) 3]\n        [(= n 4) 4]\n\
    \        [(= n 5) 5]\n        [(= n 6) 6]\n        [(= n 7) 7]\n        [(= n\
    \ 8) 8]\n        [(= n 9) 9]\n        [(= n 10) 10]\n        [(= n 11) 11]\n \
    \       [(= n 12) 12]\n        [(= n 13) 13]\n        [(= n 14) 14]\n        [(=\
    \ n 15) 15]\n        [(= n 16) 16]\n        [(= n 17) 17]\n        [(= n 18) 18]\n\
    \        [(= n 19) 19]\n        [(= n 20) 20]\n        [(= n 21) 21]\n       \
    \ [(= n 22) 22]\n        [(= n 23) 23]\n        [(= n 24) 24]\n        [(= n 25)\
    \ 25]\n        [(= n 26) 26]\n        [(= n 27) 27]\n        [(= n 28) 28]\n \
    \       [(= n 29) 29]\n        [(= n 30) 30]\n        [(= n 31) 31]\n        [(=\
    \ n 32) 32]\n        [(= n 33) 33]\n        [(= n 34) 34]\n        [(= n 35) 35]\n\
    \        [(= n 36) 36]\n        [(= n 37) 37]\n        [(= n 38) 38]\n       \
    \ [(= n 39) 39]\n        [(= n 40) 40]\n        [(= n 41) 41]\n        [(= n 42)\
    \ 42]\n        [(= n 43) 43]\n        [(= n 44) 44]\n        [(= n 45) 45]\n \
    \       [(= n 46) 46]\n        [(= n 47) 47]\n        [(= n 48) 48]\n        [(=\
    \ n 49) 49]\n        [(= n 50) 50]\n        [(= n 51) 51]\n        [(= n 52) 52]\n\
    \        [(= n 53) 53]\n        [(= n 54) 54]\n        [(= n 55) 55]\n       \
    \ [(= n 56) 56]\n        [(= n 57) 57]\n        [(= n 58) 58]\n        [(= n 59)\
    \ 59", "  (cond [(= n 1) 2]\n        [(= (modulo n 2) 0) (largest_prime_factor\
    \ (/ n 2))]\n        [else (+ 1 (largest_prime_factor (/ n 2)))]))\n", "  (cond\
    \ [(= n 1) n]\n        [(= (modulo n 2) 0) (/ n 2)]\n        [else (largest_prime_factor\
    \ (quotient n 2))]))\n", "  (if (= n 1)\n      n\n      (let ((factor (prime-factors\
    \ n)))\n        (if (null? factor)\n            n\n            (max (car factor)\
    \ (largest_prime_factor (cdr factor)))))))\n", "  (if (= n 1)\n      n\n     \
    \ (let ((factor (prime-factors n)))\n        (if (null? factor)\n            n\n\
    \            (max (car factor) (largest_prime_factor (cdr factor)))))))\n", " \
    \ (let loop ((n n) (p 2))\n    (cond ((= n 1) p)\n          ((even? n) (loop (/\
    \ n p) (+ p 1)))\n          (else (loop (* n p) (+ p 1))))))\n", "  (let loop\
    \ ((n n) (max 1) (prime (prime? n)))\n    (if (= n 1)\n        prime\n       \
    \ (loop (quotient n prime) (if (> max prime) (max prime) max) (quotient n prime))))))\n",
  "  (if (= n 1)\n      n\n      (let ((factor (prime-factors n)))\n        (if (null?\
    \ factor)\n            n\n            (if (> (length factor) 2)\n            \
    \    (let ((largest (car factor)))\n                  (if (= largest)\n      \
    \                largest\n                      (let ((factor (cdr factor)))\n\
    \                        (if (null? factor)\n                            largest\n\
    \                            (if (> (length factor) 2)\n                     \
    \           (let ((largest (car factor)))\n                                  (if\
    \ (= largest)\n                                      largest\n               \
    \                       (let ((factor (cdr factor)))\n                       \
    \                 (if (null? factor)\n                                       \
    \     largest\n                                            (if (> (length factor)\
    \ 2)\n                                                (let ((largest (car factor)))\n\
    \                                                  (if (= largest)\n         \
    \                                             largest\n                      \
    \                                (let ((factor (cdr factor)))\n              \
    \                                          (if (null? factor)\n              \
    \                                              largest\n                     \
    \                                       (if (> (length factor) 2)\n          \
    \                                                      (let ((largest (car factor)))\n\
    \                                                                  (if (= largest)\n\
    \                                                                      largest\n\
    \                                                                      (let ((factor\
    \ (cdr factor)))\n                                                           \
    \             (if (null? factor)\n                                           \
    \                                 largest\n                                  \
    \                                          (if (> (length factor) 2)\n       \
    \                                                                         (let\
    \ ((largest (car factor)))\n                                                 \
    \                                 (if (= largest)\n                          \
    \                                                            largest\n       \
    \                                                                            \
    \   (let ((factor (cdr factor)))\n                                           \
    \                             (if (null? factor)\n                           \
    \                                                                 largest\n  \
    \                                                                            \
    \              (if (> (length factor) 2)\n                                   \
    \                                                             (let ((largest (car\
    \ factor)))\n                                                                \
    \                                  (if (= largest)\n                         \
    \                                                                            \
    \ largest\n                                                                  \
    \                                    (let ((factor (cdr factor)))\n          \
    \                                                              (if (null? factor)\n\
    \                                                                            \
    \                largest\n                                                   \
    \                                         (if (> (length factor) 2)\n        \
    \                                                                            \
    \            (let ((largest (car factor)))\n                                 \
    \                                                                 (if (= largest)\n\
    \                                                                            \
    \                          largest\n                                         \
    \                                                             (let ((factor (cdr\
    \ factor)))\n                                                                \
    \        (if (null? factor)\n                                                \
    \                                                            largest\n       \
    \                                                                            \
    \                         (if (> (length factor) 2)\n                        \
    \                                                                            \
    \            (let ((largest (car factor)))\n                                 \
    \                                                                            \
    \     (if (= largest)\n                                                      \
    \                                                                largest\n   \
    \                                                                            \
    \                                       (let ((factor (cdr factor)))\n       \
    \                                                                 (if (null? factor)\n\
    \                                                                            \
    \                                largest\n                                   \
    \                                                                         (if\
    \ (> (length factor) 2)\n                                                    \
    \                                                            (let ((largest",
  "  (cond [(= n 1) n]\n        [(= (modulo n 2) 0) (/ n 2)]\n        [else (largest_prime_factor\
    \ (/ n 2))]))\n", "  (if (= n 1)\n      n\n      (let ((factor (prime-factors\
    \ n)))\n        (if (null? factor)\n            n\n            (max (first factor)\
    \ (largest_prime_factor (first factor)))))\n      )\n  )\n", "  (let loop ((n\
    \ n) (max 1) (primes #{}))\n    (cond ((= n 1) max)\n          ((not (prime? (car\
    \ primes))) (loop (car primes) 1 (cdr primes)))\n          ((= (mod n max) 0)\
    \ (loop (quotient n max) 1 (cons (car primes) primes)))\n          (else (loop\
    \ (quotient n max) (+ max 1) (cons (car primes) primes))))))\n", "  (let loop\
    \ ((n n) (max 1) (primes #{}))\n    (cond ((= n 1) max)\n          ((not (prime?\
    \ (car primes) n))\n           (loop (cdr n) (max (car primes) (* n max)) (cdr\
    \ primes)))\n          (else (loop (cdr n) (max (car primes) (* n max)) (cdr primes))))))\n",
  "  (if (= n 1)\n      n\n      (let ((factor (prime-factors n)))\n        (if (null?\
    \ factor)\n            n\n            (if (> (length factor) 2)\n            \
    \    (first factor)\n                (if (> (length factor) 1)\n             \
    \       (first factor)\n                    (first factor)))))\n</code>\n<|/ a\
    \ tags=racket,primes,scheme |>\n<| c |>\nThanks for your answer! I tried to implement\
    \ your solution, but I got this error when I tried to run it: `(define (largest_prime_factor\
    \ n) (if (= n 1) n ...) ; expects a procedure that can be applied to arguments:\
    \ (integer?) given: n`\n<|/ c |>\n<| c |>\nI edited my answer to include a working\
    \ solution. Let me know if you have any questions.\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer! I tried to implement your solution, but I got this error when\
    \ I tried to run it: `(define (largest_prime_factor n) (if (= n 1) n ...) ; expects\
    \ a procedure that can be applied to arguments: (integer?) given: n`\n<|/ c |>\n\
    <| c |>\nI edited my answer to include a working solution. Let me know if you\
    \ have any questions.\n<|/ c |>\n<| c |>\nThanks for your answer! I tried to implement\
    \ your solution, but I got this error when I tried to run it: `(define (largest_prime_factor\
    \ n) (if (= n 1) n ...) ; expects a procedure that can be applied to arguments:\
    \ (integer?) given: n`\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  (if (= n 1)\n\
    \      n\n      (let ((factor (prime-factors n)))\n        (if (null? factor)\n\
    \            n\n            (if (> (length factor) 1)\n                (let ((largest\
    \ (car factor)))\n                  (if (= largest)\n                      largest\n\
    \                      (if (= (largest_prime_factor largest) largest)\n      \
    \                    largest\n                          (if (= (largest_prime_factor\
    \ largest) n)\n                              largest\n                       \
    \       (if (= (largest_prime_factor largest) 1)\n                           \
    \       n\n                                  (largest_prime_factor largest))))))))))\n",
  "  (cond [(= n 1) n]\n        [(= (modulo n 2) 0) (/ n 2)]\n        [else (largest_prime_factor\
    \ (/ n 2))]))\n", "  (let loop ((n n) (prime 1))\n    (cond ((= n 1) prime)\n\
    \          ((even? n) (loop (/ n 2) prime))\n          ((odd? n) (loop (* n 3)\
    \ (* prime (quotient n 3)))))\n    (loop (quotient n prime) prime)))\n", "  (if\
    \ (= n 1)\n      n\n      (let ((factor (prime-factors n)))\n        (if (null?\
    \ factor)\n            n\n            (max (car factor) (largest_prime_factor\
    \ (cdr factor)))))))\n", "  (cond [(= n 1) n]\n        [(= (modulo n 2) 0) (/\
    \ n 2)]\n        [else (largest_prime_factor (/ n 2))]))\n", "  (let loop ((n\
    \ n) (p 2))\n    (if (= n 1)\n        p\n        (loop (quotient n p)\n      \
    \        (if (= (modulo n p) 0)\n                  (+ 1 (loop (quotient n p) (+\
    \ p 1)))\n                  (+ 1 (loop (quotient n p) (+ p 1))))))))\n", "  (if\
    \ (= n 1)\n      n\n      (let ((factor (prime-factors n)))\n        (if (null?\
    \ factor)\n            n\n            (max (car factor) (largest_prime_factor\
    \ (cdr factor)))))))\n", "  (cond [(= n 1) n]\n        [(= (mod n 2) 0) (/ n 2)]\n\
    \        [else (largest_prime_factor (/ n 2))]))\n", "  (cond [(= n 1) 1]\n  \
    \      [(= (modulo n 2) 0) (* 2 n)]\n        [else (largest_prime_factor (/ n\
    \ 2))]))\n", "  (cond [(= n 1) 1]\n        [(= (mod n 2) 0) (* 2 (largest_prime_factor\
    \ n))]\n        [else (* 2 (largest_prime_factor (/ n 2)))]))\n", "  (let loop\
    \ ((n n) (max 1) (primes #{}))\n    (if (= n 1)\n        max\n        (let ((next\
    \ (prime-factor-iter n)))\n          (if (null? next)\n              (loop (+\
    \ n 1) (+ max 1) (cons n primes))\n              (loop (+ n 1) (+ max 1) (cons\
    \ next primes))))))))\n", "  (cond [(= n 1) n]\n        [(= (modulo n 2) 0) (/\
    \ n 2)]\n        [else (largest_prime_factor (/ n 2))]))\n", "  (cond [(= n 1)\
    \ n]\n        [(= (modulo n 2) 0) (/ n 2)]\n        [else (largest_prime_factor\
    \ (/ n 2))]))\n", "  (if (= n 1)\n      n\n      (let ((factor (prime-factors\
    \ n)))\n        (if (null? factor)\n            n\n            (if (> (length\
    \ factor) 2)\n                (let ((largest (car factor)))\n                \
    \  (if (= largest)\n                      largest\n                      (let\
    \ ((factor (cdr factor)))\n                        (if (null? factor)\n      \
    \                      largest\n                            (if (> (length factor)\
    \ 2)\n                                (let ((largest (car factor)))\n        \
    \                          (if (= largest)\n                                 \
    \     largest\n                                      (let ((factor (cdr factor)))\n\
    \                                        (if (null? factor)\n                \
    \                            largest\n                                       \
    \     (if (> (length factor) 2)\n                                            \
    \    (let ((largest (car factor)))\n                                         \
    \         (if (= largest)\n                                                  \
    \    largest\n                                                      (let ((factor\
    \ (cdr factor)))\n                                                        (if\
    \ (null? factor)\n                                                           \
    \ largest\n                                                            (if (>\
    \ (length factor) 2)\n                                                       \
    \         (let ((largest (car factor)))\n                                    \
    \                              (if (= largest)\n                             \
    \                                         largest\n                          \
    \                                            (let ((factor (cdr factor)))\n  \
    \                                                                      (if (null?\
    \ factor)\n                                                                  \
    \          largest\n                                                         \
    \                   (if (> (length factor) 2)\n                              \
    \                                                  (let ((largest (car factor)))\n\
    \                                                                            \
    \      (if (= largest)\n                                                     \
    \                                 largest\n                                  \
    \                                                    (let ((factor (cdr factor)))\n\
    \                                                                        (if (null?\
    \ factor)\n                                                                  \
    \                          largest\n                                         \
    \                                                   (if (> (length factor) 2)\n\
    \                                                                            \
    \                    (let ((largest (car factor)))\n                         \
    \                                                                         (if\
    \ (= largest)\n                                                              \
    \                                        largest\n                           \
    \                                                                           (let\
    \ ((factor (cdr factor)))\n                                                  \
    \                      (if (null? factor)\n                                  \
    \                                                          largest\n         \
    \                                                                            \
    \       (if (> (length factor) 2)\n                                          \
    \                                                      (let ((largest (car factor)))\n\
    \                                                                            \
    \                      (if (= largest)\n                                     \
    \                                                                 largest\n  \
    \                                                                            \
    \                        (let ((factor (cdr factor)))\n                      \
    \                                                  (if (null? factor)\n      \
    \                                                                            \
    \                          largest\n                                         \
    \                                                                   (if (> (length\
    \ factor) 2)\n                                                               \
    \                                                 (let ((largest (car factor)))\n\
    \                                                                            \
    \                                      (if (= largest)\n                     \
    \                                                                            \
    \                     largest\n                                              \
    \                                                                        (let\
    \ ((factor (cdr factor)))\n                                                  \
    \                      (if (null? factor)\n                                  \
    \                                                                          largest\n\
    \                                                                            \
    \                                (if (> (length factor) 2)\n                 \
    \                                                                            \
    \                   (let ((largest", "  (if (= n 1)\n      n\n      (let ((factor\
    \ (prime-factors n)))\n        (if (null? factor)\n            n\n           \
    \ (max (car factor) (largest_prime_factor (cdr factor)))))))\n", "  (if (= n 1)\n\
    \      n\n      (let ((factor (prime-factors n)))\n        (if (null? factor)\n\
    \            n\n            (if (> (length factor) 2)\n                (let ((largest\
    \ (car factor)))\n                  (if (= largest)\n                      largest\n\
    \                      (let ((factor (cdr factor)))\n                        (if\
    \ (null? factor)\n                            largest\n                      \
    \      (if (> (length factor) 2)\n                                (let ((largest\
    \ (car factor)))\n                                  (if (= largest)\n        \
    \                              largest\n                                     \
    \ (let ((factor (cdr factor)))\n                                        (if (null?\
    \ factor)\n                                            largest\n             \
    \                               (if (> (length factor) 2)\n                  \
    \                              (let ((largest (car factor)))\n               \
    \                                   (if (= largest)\n                        \
    \                              largest\n                                     \
    \                 (let ((factor (cdr factor)))\n                             \
    \                           (if (null? factor)\n                             \
    \                               largest\n                                    \
    \                        (if (> (length factor) 2)\n                         \
    \                                       (let ((largest (car factor)))\n      \
    \                                                            (if (= largest)\n\
    \                                                                      largest\n\
    \                                                                      (let ((factor\
    \ (cdr factor)))\n                                                           \
    \             (if (null? factor)\n                                           \
    \                                 largest\n                                  \
    \                                          (if (> (length factor) 2)\n       \
    \                                                                         (let\
    \ ((largest (car factor)))\n                                                 \
    \                                 (if (= largest)\n                          \
    \                                                            largest\n       \
    \                                                                            \
    \   (let ((factor (cdr factor)))\n                                           \
    \                             (if (null? factor)\n                           \
    \                                                                 largest\n  \
    \                                                                            \
    \              (if (> (length factor) 2)\n                                   \
    \                                                             (let ((largest (car\
    \ factor)))\n                                                                \
    \                                  (if (= largest)\n                         \
    \                                                                            \
    \ largest\n                                                                  \
    \                                    (let ((factor (cdr factor)))\n          \
    \                                                              (if (null? factor)\n\
    \                                                                            \
    \                largest\n                                                   \
    \                                         (if (> (length factor) 2)\n        \
    \                                                                            \
    \            (let ((largest (car factor)))\n                                 \
    \                                                                 (if (= largest)\n\
    \                                                                            \
    \                          largest\n                                         \
    \                                                             (let ((factor (cdr\
    \ factor)))\n                                                                \
    \        (if (null? factor)\n                                                \
    \                                                            largest\n       \
    \                                                                            \
    \                         (if (> (length factor) 2)\n                        \
    \                                                                            \
    \            (let ((largest (car factor)))\n                                 \
    \                                                                            \
    \     (if (= largest)\n                                                      \
    \                                                                largest\n   \
    \                                                                            \
    \                                       (let ((factor (cdr factor)))\n       \
    \                                                                 (if (null? factor)\n\
    \                                                                            \
    \                                largest\n                                   \
    \                                                                         (if\
    \ (> (length factor) 2)\n                                                    \
    \                                                            (let ((largest",
  "  (cond [(= n 1) 2]\n        [(= (modulo n 2) 0) (+ 2 (largest_prime_factor n))]\n\
    \        [else (largest_prime_factor n-1)]))\n", "  (cond [(= n 1) 1]\n      \
    \  [(= (modulo n 2) 0) (/ n 2)]\n        [else (largest_prime_factor (/ n 2))]))\n",
  "  (cond [(= n 1) n]\n        [(= (modulo n 2) 0) (/ n 2)]\n        [else (largest_prime_factor\
    \ (/ n 2))]))\n", "  (cond [(= n 1) n]\n        [(= (modulo n 2) 0) (/ n 2)]\n\
    \        [else (largest_prime_factor (/ n 2))]))\n", "  (if (= n 1)\n      n\n\
    \      (let ((factor (prime-factors n)))\n        (if (null? factor)\n       \
    \     n\n            (let ((largest (car factor)))\n              (if (> n largest)\n\
    \                  largest\n                  (largest_prime_factor largest)))))\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nI appreciate your efforts, but this doesn't\
    \ answer the question. OP wants to know why his code doesn't work, not how to\
    \ fix it.\n<|/ c |>\n<| c |>\nI understand that, but I thought the OP was asking\
    \ why his code didn't work. He asked \"why doesn't my code work?\" I answered\
    \ that question. He also asked \"why doesn't my code work?\" I answered that question.\
    \ He also asked \"why doesn't my code work?\" I answered that question. He also\
    \ asked \"why doesn't my code work?\" I answered that question. He also asked\
    \ \"why doesn't my code work?\" I answered that question. He also asked \"why\
    \ doesn't my code work?\" I answered that question. He also asked \"why doesn't\
    \ my code work?\" I answered that question. He also asked \"why doesn't my code\
    \ work?\" I answered that question. He also asked \"why doesn't my code work?\"\
    \ I answered that question. He also asked \"why doesn't my code work?\" I answered\
    \ that question. He also asked \"why doesn't my code work?\" I answered that question.\
    \ He also asked \"why doesn't my code work?\" I answered that question. He also\
    \ asked \"why doesn't my code work?\" I answered that question. He also asked\
    \ \"why doesn't my code work?\" I answered that question. He also asked \"why\
    \ doesn't my code work?\" I answered that question. He also asked \"why doesn't\
    \ my code work?\" I answered that question. He also asked \"why doesn't my code\
    \ work?\" I answered that question. He also asked \"why doesn't my code work?\"\
    \ I answered that question. He also asked \"why doesn't my code work?\" I answe",
  "  (let loop ((n n) (p 2) (max 0))\n    (cond ((= n 1) p)\n          ((= (modulo\
    \ n p) 0) (loop (quotient n p) (+ p 1) max))\n          (else (loop (quotient\
    \ n p) (+ p 1) max)))))\n", "  (if (= n 1)\n      n\n      (let ((factor (prime-factors\
    \ n)))\n        (if (null? factor)\n            n\n            (max (car factor)\
    \ (largest_prime_factor (cdr factor)))))))\n", "  (cond [(= n 1) 2]\n        [(=\
    \ (modulo n 2) 0) (+ 2 (largest_prime_factor n))]\n        [else (largest_prime_factor\
    \ (quotient n 2))]))\n", "  (cond [(= n 1) 2]\n        [(= (mod n 2) 0) (* 2 n)]\n\
    \        [else (largest_prime_factor (/ n 2))]))\n", "  (cond [(= n 1) 1]\n  \
    \      [(= n 2) 2]\n        [(= n 3) 3]\n        [(= n 4) 4]\n        [(= n 5)\
    \ 5]\n        [(= n 6) 6]\n        [(= n 7) 7]\n        [(= n 8) 8]\n        [(=\
    \ n 9) 9]\n        [(= n 10) 10]\n        [(= n 11) 11]\n        [(= n 12) 12]\n\
    \        [(= n 13) 13]\n        [(= n 14) 14]\n        [(= n 15) 15]\n       \
    \ [(= n 16) 16]\n        [(= n 17) 17]\n        [(= n 18) 18]\n        [(= n 19)\
    \ 19]\n        [(= n 20) 20]\n        [(= n 21) 21]\n        [(= n 22) 22]\n \
    \       [(= n 23) 23]\n        [(= n 24) 24]\n        [(= n 25) 25]\n        [(=\
    \ n 26) 26]\n        [(= n 27) 27]\n        [(= n 28) 28]\n        [(= n 29) 29]\n\
    \        [(= n 30) 30]\n        [(= n 31) 31]\n        [(= n 32) 32]\n       \
    \ [(= n 33) 33]\n        [(= n 34) 34]\n        [(= n 35) 35]\n        [(= n 36)\
    \ 36]\n        [(= n 37) 37]\n        [(= n 38) 38]\n        [(= n 39) 39]\n \
    \       [(= n 40) 40]\n        [(= n 41) 41]\n        [(= n 42) 42]\n        [(=\
    \ n 43) 43]\n        [(= n 44) 44]\n        [(= n 45) 45]\n        [(= n 46) 46]\n\
    \        [(= n 47) 47]\n        [(= n 48) 48]\n        [(= n 49) 49]\n       \
    \ [(= n 50) 50]\n        [(= n 51) 51]\n        [(= n 52) 52]\n        [(= n 53)\
    \ 53]\n        [(= n 54) 54]\n        [(= n 55) 55]\n        [(= n 56) 56]\n \
    \       [(= n 57) 57]\n        [(= n 58) 58]\n        [(= n 59) 59", "  (if (=\
    \ n 1)\n      n\n      (let ((factor (prime-factors n)))\n        (if (null? factor)\n\
    \            n\n            (max (car factor) (largest_prime_factor (cdr factor)))))))\n",
  "  (cond [(= n 1) n]\n        [(= (modulo n 2) 0) (/ n 2)]\n        [else (largest_prime_factor\
    \ (/ n 2))]))\n", "  (cond [(= n 1) n]\n        [(= (modulo n 2) 0) (/ n 2)]\n\
    \        [else (largest_prime_factor (/ n 2))]))\n", "  (if (= n 1)\n      n\n\
    \      (let ((factor (prime-factors n)))\n        (if (null? factor)\n       \
    \     n\n            (if (> n (car factor))\n                (if (= n (car factor))\n\
    \                    n\n                    (if (= n (cdr factor))\n         \
    \               (car factor)\n                        (largest_prime_factor (*\
    \ n (car factor))))))))))\n", "  (cond [(= n 1) n]\n        [(= (modulo n 2) 0)\
    \ (/ n 2)]\n        [else (largest_prime_factor (quotient n 2))]))\n", "  (cond\
    \ [(= n 1) 2]\n        [(= n 2) 3]\n        [(= n 3) (* 3 n)]\n        [else (largest_prime_factor\
    \ (/ n 2))]))\n", "  (cond [(= n 1) 1]\n        [(= (modulo n 2) 0) (/ n 2)]\n\
    \        [else (largest_prime_factor (/ n 2))]))\n", "  (cond [(= n 1) 1]\n  \
    \      [(= (modulo n 2) 0) (/ n 2)]\n        [else (largest_prime_factor (/ n\
    \ 2))]))\n", "  (cond [(= n 1) n]\n        [(= (modulo n 2) 0) (/ n 2)]\n    \
    \    [else (largest_prime_factor (quotient n 2))]))\n", "  (if (= n 1)\n     \
    \ n\n      (let ((factor (prime-factors n)))\n        (if (null? factor)\n   \
    \         n\n            (if (> (length factor) 1)\n                (let ((largest\
    \ (car factor)))\n                  (if (= largest)\n                      largest\n\
    \                      (if (= (length factor) 2)\n                          (*\
    \ n largest)\n                          (* n (largest_prime_factor (/ n largest)))))))))))\n",
  "  (if (= n 1)\n      n\n      (let ((factor (prime-factors n)))\n        (if (null?\
    \ factor)\n            n\n            (max (car factor) (largest_prime_factor\
    \ (cdr factor)))))))\n", "  (if (= n 1)\n      n\n      (let ((factor (prime-factors\
    \ n)))\n        (if (null? factor)\n            n\n            (if (> (length\
    \ factor) 2)\n                (first factor)\n                (first factor)))))\n",
  "  (let loop ((n n) (prime 1))\n    (cond ((= n 1) prime)\n          ((even? n)\
    \ (loop (/ n 2) prime))\n          (else (loop (* n prime) (/ n prime))))))\n",
  "  (if (= n 1)\n      n\n      (let ((factor (prime-factors n)))\n        (if (null?\
    \ factor)\n            n\n            (max (car factor) (largest_prime_factor\
    \ (cdr factor)))))))\n", "  (cond [(= n 1) 1]\n        [(= (modulo n 2) 0) (*\
    \ 2 (largest_prime_factor n))]\n        [else (* 2 (largest_prime_factor n))]\n\
    \        ))\n", "  (let loop ((n n) (max 1) (prime (primes n)))\n    (cond ((=\
    \ n 1) prime)\n          ((= n prime) (loop (/ n prime) (+ max 1) prime))\n  \
    \        (else (loop (/ n prime) (+ max 1) (primes n))))))\n", "  (cond [(= n\
    \ 1) 1]\n        [(= (modulo n 2) 0) (/ n 2)]\n        [else (largest_prime_factor\
    \ (/ n 2))]))\n", "  (let loop ((n n) (prime 1))\n    (cond ((= n 1) prime)\n\
    \          ((= n 2) prime)\n          ((= (mod n prime) 0) (loop (/ n prime) (+\
    \ prime 1)))\n          (else (loop (/ n prime) (+ prime 1))))))\n", "  (let loop\
    \ ((n n) (max 1) (prime #t) (i 2))\n    (if (= i max)\n        prime\n       \
    \ (loop (* n n) (+ i 1) (= (modulo n i) 0) (+ i 1)))))\n", "  (let loop ((n n)\
    \ (max 1) (prime (primes n)))\n    (cond ((= n 1) prime)\n          ((= n 2) prime)\n\
    \          ((= (modulo n prime) 0) (loop (quotient n prime) (+ 1 max) prime))\n\
    \          (else (loop (quotient n prime) (+ 1 max) prime)))))\n", "  (if (= n\
    \ 1)\n      n\n      (let ((factor (prime-factors n)))\n        (if (null? factor)\n\
    \            n\n            (max (first factor) (largest_prime_factor n))))))\n",
  "  (cond [(= n 1) 2]\n        [(= (modulo n 2) 0) (* 2 n)]\n        [else (largest_prime_factor\
    \ (quotient n 2))]))\n", "  (let loop ((n n) (p 2))\n    (cond ((= n 1) p)\n \
    \         ((even? n) (loop (/ n p) (+ p 1)))\n          (else (loop (/ n p) (+\
    \ p 1))))))\n", "  (cond [(= n 1) n]\n        [(= (modulo n 2) 0) (/ n 2)]\n \
    \       [else (largest_prime_factor (/ n 2))]))\n", "  (if (= n 1)\n      n\n\
    \      (let ((factors (prime-factors n)))\n        (if (null? factors)\n     \
    \       n\n            (let ((largest (car factors)))\n              (if (> largest\
    \ n)\n                  largest\n                  (largest_prime_factor (* n\
    \ largest))))))))\n", "  (cond [(= n 1) 1]\n        [(= (modulo n 2) 0) (largest_prime_factor\
    \ (/ n 2))]\n        [else (+ 1 (largest_prime_factor (/ n 2)))]))\n", "  (if\
    \ (= n 1)\n      n\n      (let ((factor (prime-factors n)))\n        (if (null?\
    \ factor)\n            n\n            (if (> (length factor) 1)\n            \
    \    (first factor)\n                (if (> (length factor) 1)\n             \
    \       (first factor)\n                    (first factor)))))\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a tags=racket,primes |>\n<code>", "  (cond [(= n 1) 1]\n   \
    \     [(= (modulo n 2) 0) (/ n 2)]\n        [else (largest_prime_factor (/ n 2))]))\n",
  "  (if (= n 1)\n      n\n      (let ((factor (prime-factors n)))\n        (if (null?\
    \ factor)\n            n\n            (if (> (length factor) 1)\n            \
    \    (let ((largest (car factor)))\n                  (if (= n largest)\n    \
    \                  largest\n                      (if (= (largest_prime_factor\
    \ largest) largest)\n                          largest\n                     \
    \     (if (= (largest_prime_factor largest) n)\n                             \
    \ largest\n                              (if (= (largest_prime_factor largest)\
    \ 1)\n                                  n\n                                  (if\
    \ (= (largest_prime_factor largest) 2)\n                                     \
    \ largest\n                                      (if (= (largest_prime_factor\
    \ largest) 3)\n                                          largest\n           \
    \                               (if (= (largest_prime_factor largest) 4)\n   \
    \                                           largest\n                        \
    \                      (if (= (largest_prime_factor largest) 5)\n            \
    \                                      largest\n                             \
    \                     (if (= (largest_prime_factor largest) 6)\n             \
    \                                         largest\n                          \
    \                            (if (= (largest_prime_factor largest) 7)\n      \
    \                                                    largest\n               \
    \                                           (if (= (largest_prime_factor largest)\
    \ 8)\n                                                              largest\n\
    \                                                              (if (= (largest_prime_factor\
    \ largest) 9)\n                                                              \
    \    largest\n                                                               \
    \   (if (= (largest_prime_factor largest) 10)\n                              \
    \                                        largest\n                           \
    \                                           (if (= (largest_prime_factor largest)\
    \ 11)\n                                                                      \
    \    largest\n                                                               \
    \           (if (= (largest_prime_factor largest) 12)\n                      \
    \                                                        largest\n           \
    \                                                                   (if (= (largest_prime_factor\
    \ largest) 13)\n                                                             \
    \                     largest\n                                              \
    \                                    (if (= (largest_prime_factor largest) 14)\n\
    \                                                                            \
    \          largest\n                                                         \
    \                             (if (= (largest_prime_factor largest) 15)\n    \
    \                                                                            \
    \          largest\n                                                         \
    \                                 (if (= (largest_prime_factor largest) 16)\n\
    \                                                                            \
    \                  largest\n                                                 \
    \                                             (if (= (largest_prime_factor largest)\
    \ 17)\n                                                                      \
    \                            largest\n                                       \
    \                                                           (if (= (largest_prime_factor\
    \ largest) 18)\n                                                             \
    \                                         largest\n                          \
    \                                                                            (if\
    \ (= (largest_prime_factor largest) 19)\n                                    \
    \                                                                      largest\n\
    \                                                                            \
    \                              (if (= (largest_prime_factor largest) 20)\n   \
    \                                                                            \
    \                               largest\n                                    \
    \                                                                          (if\
    \ (= (largest_prime_factor ", "  (cond [(= n 1) 2]\n        [(= (mod n 2) 0) (*\
    \ 2 n)]\n        [else (largest_prime_factor (/ n 2))]))\n", "  (let loop ((n\
    \ n) (max 1) (prime (primes n)))\n    (if (= n 1)\n        prime\n        (loop\
    \ (quotient n prime) (if (> max prime) (max prime) max) prime)))))\n", "  (let\
    \ loop ((n n) (max 1) (primes #{}))\n    (cond ((= n 1) max)\n          ((prime?\
    \ (car primes)) (car primes))\n          ((> n max) max)\n          (else (loop\
    \ (quotient n max) (add1 max) (cons (car primes) primes)))))))\n", "  (let loop\
    \ ((n n) (p 2))\n    (if (= p n)\n        p\n        (loop (quotient n p)\n  \
    \            (if (even? p)\n                  (+ 1 (loop (quotient n p) (quotient\
    \ p 2)))\n                  (+ 1 (loop (quotient n p) 2))))))))\n", "  (cond [(=\
    \ n 1) 1]\n        [(= (mod n 2) 0) (* 2 (largest_prime_factor n))]\n        [else\
    \ (* 2 (largest_prime_factor n))]\n        ))\n", "  (cond [(= n 1) n]\n     \
    \   [(= (modulo n 2) 0) (/ n 2)]\n        [else (largest_prime_factor (quotient\
    \ n 2))]))\n", "  (if (= n 1)\n      n\n      (let ((factor (prime-factors n)))\n\
    \        (if (null? factor)\n            n\n            (if (> (length factor)\
    \ 2)\n                (first factor)\n                (first factor)))))\n", " \
    \ (cond [(= n 1) n]\n        [(= (modulo n 2) 0) (/ n 2)]\n        [else (largest_prime_factor\
    \ (/ n 2))]))\n", "  (let loop ((n n) (prime 1))\n    (cond ((= n 1) prime)\n\
    \          ((= n 2) prime)\n          ((= (mod n prime) 0) (loop (/ n prime) (+\
    \ prime 1)))\n          :else (loop (/ n prime) prime))))\n", "  (cond [(= n 1)\
    \ 2]\n        [(= n 2) 3]\n        [else (let ([m (floor n (/ n 2))])\n      \
    \            (cond [(= m 2) 3]\n                        [else (let ([p (largest_prime_factor\
    \ m)])\n                                (cond [(= p 2) m]\n                  \
    \                    [else (+ m p)]))]))]))\n", "  (cond [(= n 1) n]\n       \
    \ [(= (modulo n 2) 0) (/ n 2)]\n        [else (largest_prime_factor (/ n 2))]))\n",
  "  (let loop ((n n) (max 1) (prime (primes n)))\n    (cond ((= n 1) prime)\n   \
    \       ((= (modulo n prime) 0) (loop (quotient n prime) (+ 1 max) prime))\n \
    \         (else (loop (quotient n prime) max prime)))))\n", "  (cond [(= n 1)\
    \ 1]\n        [(= (modulo n 2) 0) (/ n 2)]\n        [else (largest_prime_factor\
    \ (quotient n 2))]))\n", "  (cond [(= n 1) n]\n        [(= (modulo n 2) 0) (/\
    \ n 2)]\n        [else (largest_prime_factor (/ n 2))]))\n", "  (cond [(= n 1)\
    \ 1]\n        [(= (modulo n 2) 0) (/ n 2)]\n        [else (largest_prime_factor\
    \ (quotient n 2))]))\n", "  (let loop ((n n) (prime 1))\n    (cond ((= n 1) prime)\n\
    \          ((even? n) (loop (/ n 2) prime))\n          (else (loop (* n prime)\
    \ (+ prime (quotient n prime)))))))\n", "  (cond [(= n 1) 1]\n        [(= (modulo\
    \ n 2) 0) (* n 2)]\n        [else (largest_prime_factor (/ n 2))]))\n", "  (if\
    \ (= n 1)\n      n\n      (let ((factor (prime-factors n)))\n        (if (null?\
    \ factor)\n            n\n            (max (car factor) (largest_prime_factor\
    \ (cdr factor)))))))\n", "  (cond [(= n 1) 1]\n        [(= (modulo n 2) 0) (*\
    \ n 2)]\n        [else (largest_prime_factor (/ n 2))]))\n", "  (cond [(= n 1)\
    \ n]\n        [(= (modulo n 2) 0) (/ n 2)]\n        [else (largest_prime_factor\
    \ (/ n 2))]))\n", "  (if (= n 1)\n      n\n      (let ((factor (prime-factors\
    \ n)))\n        (if (null? factor)\n            n\n            (max (car factor)\
    \ (largest_prime_factor (cdr factor)))))))\n", "  (if (= n 1)\n      n\n     \
    \ (let ((factor (prime-factors n)))\n        (if (null? factor)\n            n\n\
    \            (if (> (length factor) 2)\n                (let ((factor (first factor)))\n\
    \                  (if (= n factor)\n                      n\n               \
    \       (if (= (modulo n factor) 0)\n                          (* factor n)\n\
    \                          (* n factor)))\n                  (if (= n factor)\n\
    \                      n\n                      (* factor n))))))))\n", "  (cond\
    \ [(= n 1) 1]\n        [(= (modulo n 2) 0) (largest_prime_factor (/ n 2))]\n \
    \       [else (* 2 (largest_prime_factor (/ n 2)))]))\n", "  (cond [(= n 1) n]\n\
    \        [(= (modulo n 2) 0) (/ n 2)]\n        [else (largest_prime_factor (/\
    \ n 2))]))\n", "  (cond [(= n 1) 2]\n        [(= (modulo n 2) 0) (* 2 (largest_prime_factor\
    \ n))]\n        [else (* 2 (largest_prime_factor n))]\n        ))\n", "  (let\
    \ loop ((n n) (p 2))\n    (cond ((= n 1) p)\n          ((even? n) (loop (/ n p)\
    \ (+ p 1)))\n          (else (loop (* n p) (+ p 1))))))\n", "  (cond [(= n 1)\
    \ n]\n        [(= (modulo n 2) 0) (/ n 2)]\n        [else (largest_prime_factor\
    \ (/ n 2))]))\n", "  (cond [(= n 1) 2]\n        [(= (modulo n 2) 0) (largest_prime_factor\
    \ (/ n 2))]\n        [else (+ 1 (largest_prime_factor (/ n 2)))]))\n", "  (if\
    \ (= n 1)\n      n\n      (let ((factor (prime-factors n)))\n        (if (null?\
    \ factor)\n            n\n            (if (> (length factor) 2)\n            \
    \    (if (> (length factor) 1)\n                    (if (> (length factor) 0)\n\
    \                        (first factor)\n                        (first factor))\n\
    \                    (first factor))\n                (first factor)))))\n", " \
    \ (cond [(= n 1) 1]\n        [(= (modulo n 2) 0) (* 2 (largest_prime_factor n))]\n\
    \        [else (* 3 (largest_prime_factor n))]\n        ))\n", "  (if (= n 1)\n\
    \      n\n      (let ((factor (prime-factors n)))\n        (if (null? factor)\n\
    \            n\n            (let ((largest (car factor)))\n              (if (>\
    \ largest (car factor))\n                  (cons largest factor)\n           \
    \       (cons largest largest)))))))\n", "  (cond [(= n 1) 1]\n        [(= (modulo\
    \ n 2) 0) (largest_prime_factor (/ n 2))]\n        [else (+ 1 (largest_prime_factor\
    \ (/ n 2)))]))\n", "  (if (= n 1)\n      n\n      (let ((factor (prime-factors\
    \ n)))\n        (if (null? factor)\n            n\n            (if (> (length\
    \ factor) 2)\n                (first factor)\n                (first factor)))))\n",
  "  (cond [(= n 1) 1]\n        [(= (modulo n 2) 0) (/ n 2)]\n        [else (largest_prime_factor\
    \ (/ n 2))]))\n", "  (cond [(= n 1) n]\n        [(= (modulo n 2) 0) (/ n 2)]\n\
    \        [else (largest_prime_factor (/ n 2))]))\n", "  (if (= n 1)\n      n\n\
    \      (let ((factor (prime-factors n)))\n        (if (null? factor)\n       \
    \     n\n            (max (car factor) (largest_prime_factor (cdr factor)))))))\n",
  "  (if (= n 1)\n      n\n      (let ((factors (prime-factors n)))\n        (if (null?\
    \ factors)\n            n\n            (max (first factors) (largest_prime_factor\
    \ (first factors))))))))\n", "  (cond [(= n 1) 2]\n        [(= (mod n 2) 0) (*\
    \ 2 n)]\n        [else (largest_prime_factor (/ n 2))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
