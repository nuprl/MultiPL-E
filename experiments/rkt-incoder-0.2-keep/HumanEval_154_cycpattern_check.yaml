name: HumanEval_154_cycpattern_check
language: racket
prompt: "#lang racket\n\n;; You are given 2 words. You need to return True if the\
  \ second word or any of its rotations is a substring in the first word\n;; cycpattern_check(\"\
  abcd\",\"abd\") => False\n;; cycpattern_check(\"hello\",\"ell\") => True\n;; cycpattern_check(\"\
  whassup\",\"psus\") => False\n;; cycpattern_check(\"abab\",\"baa\") => True\n;;\
  \ cycpattern_check(\"efef\",\"eeff\") => False\n;; cycpattern_check(\"himenss\"\
  ,\"simen\") => True\n(define (cycpattern_check a b)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cycpattern_check))\n\
  \    (check-equal? (candidate \"xyzw\" \"xyw\") #f)\n    (check-equal? (candidate\
  \ \"yello\" \"ell\") #t)\n    (check-equal? (candidate \"whattup\" \"ptut\") #f)\n\
  \    (check-equal? (candidate \"efef\" \"fee\") #t)\n    (check-equal? (candidate\
  \ \"abab\" \"aabb\") #f)\n    (check-equal? (candidate \"winemtt\" \"tinem\") #t)\n\
  ))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? a) false]\n    [(empty? b) true]\n    [(equal?\
    \ (first a) (first b)) (cycpattern_check (rest a) (rest b))]\n    [else (cycpattern_check\
    \ (rest a) b)]))\n", "  (or (string=? a b)\n      (or (string=? (string-append\
    \ a (butlast a)) b)\n          (string=? (string-append (butlast a) b) a))))\n",
  "  (cond\n    [(empty? a) false]\n    [(empty? b) false]\n    [(equal? (first a)\
    \ (first b)) true]\n    [else (or (cycpattern_check (rest a) b)\n            \
    \  (cycpattern_check (rest b) a)))]))\n", "  (cond\n    [(empty? a) false]\n \
    \   [(empty? b) true]\n    [(equal? (first a) (first b)) (cycpattern_check (rest\
    \ a) (rest b))]\n    [else (or (equal? (first a) (first b)) (cycpattern_check\
    \ (rest a) (rest b)) (cycpattern_check (rest b) (rest a)))]))\n", "  (or (string=?\
    \ a b)\n      (or (string=? (string-reverse a) b)\n          (string-rot13 a)\
    \ (string-rot13 b) (string-rot13 a) (string-rot13 b))))\n", "  (cond\n    [(empty?\
    \ a) false]\n    [(empty? b) false]\n    [(equal? (first a) (first b)) true]\n\
    \    [else (or (cycpattern_check (rest a) b)\n              (cycpattern_check\
    \ (rest b) a)))]))\n", "  (cond\n    [(empty? a) false]\n    [(empty? b) false]\n\
    \    [(equal? (first a) (first b)) true]\n    [else (or (cycpattern_check (rest\
    \ a) b)\n              (cycpattern_check (rest b) a)))]))\n", "  (cond\n    [(empty?\
    \ b) true]\n    [(equal? (first b) (first a)) (cycpattern_check (rest b) (rest\
    \ a))]\n    [else false]))\n", "  (cond\n    [(empty? a) false]\n    [(empty?\
    \ b) false]\n    [(equal? (first a) (first b)) true]\n    [else (or (equal? (first\
    \ a) (first b)) (cycpattern_check (rest a) (rest b)))]))\n", "  (or (string=?\
    \ a b)\n      (or (string=? (string-reverse a) b)\n          (string-rotations?\
    \ a b))))\n", "  (cond\n    [(empty? a) false]\n    [(empty? b) false]\n    [(equal?\
    \ (first a) (first b)) true]\n    [else (or (cycpattern_check (rest a) b)\n  \
    \            (cycpattern_check (rest b) a)))]))\n", "  (cond\n    [(empty? a)\
    \ false]\n    [(empty? b) true]\n    [(equal? (first a) (first b)) (cycpattern_check\
    \ (rest a) (rest b))]\n    [else (cycpattern_check (rest a) (rest b))]\n  ))\n",
  "  (cond\n    [(empty? a) false]\n    [(empty? b) false]\n    [(equal? (first a)\
    \ (first b)) true]\n    [else (or (cycpattern_check (rest a) b)\n            \
    \  (cycpattern_check (rest b) a)))]))\n", "  (cond [(empty? a) false]\n      \
    \  [(empty? b) true]\n        [(equal? (first a) (first b)) (cycpattern_check\
    \ (rest a) (rest b))]\n        [else (or (equal? (first a) (first b)) (cycpattern_check\
    \ (rest a) (rest b)) (cycpattern_check (rest b) (rest a)))]))\n", "  (or (string=?\
    \ a b)\n      (or (string=? (string-ref a 0) (string-ref b 0))\n          (string-contains-rotations\
    \ b a))))\n", "  (cond ((null? a) true)\n        ((null? b) true)\n        ((string-match\
    \ a b) true)\n        ((string-match a (cycpattern_rotate b 0)) true)\n      \
    \  ((string-match a (cycpattern_rotate b 1)) true)\n        ((string-match a (cycpattern_rotate\
    \ b 2)) true)\n        ((string-match a (cycpattern_rotate b 3)) true)\n     \
    \   ((string-match a (cycpattern_rotate b 4)) true)\n        ((string-match a\
    \ (cycpattern_rotate b 5)) true)\n        ((string-match a (cycpattern_rotate\
    \ b 6)) true)\n        ((string-match a (cycpattern_rotate b 7)) true)\n     \
    \   ((string-match a (cycpattern_rotate b 8)) true)\n        ((string-match a\
    \ (cycpattern_rotate b 9)) true)\n        ((string-match a (cycpattern_rotate\
    \ b 10)) true)\n        ((string-match a (cycpattern_rotate b 11)) true)\n   \
    \     ((string-match a (cycpattern_rotate b 12)) true)\n        ((string-match\
    \ a (cycpattern_rotate b 13)) true)\n        ((string-match a (cycpattern_rotate\
    \ b 14)) true)\n        ((string-match a (cycpattern_rotate b 15)) true)\n   \
    \     ((string-match a (cycpattern_rotate b 16)) true)\n        ((string-match\
    \ a (cycpattern_rotate b 17)) true)\n        ((string-match a (cycpattern_rotate\
    \ b 18)) true)\n        ((string-match a (cycpattern_rotate b 19)) true)\n   \
    \     ((string-match a (cycpattern_rotate b 20)) true)\n        ((string-match\
    \ a (cycpattern_rotate b 21)) true)\n        ((string-match a (cycpattern_rotate\
    \ b 22)) true)\n        ((string-match a (cycpattern_rotate b 23)) true)\n   \
    \     ((string-match a (cycpattern_rotate b 24)) true)\n        ((string-match\
    \ a (cycpattern_rotate b 25)) true)\n        ((string-match a (cycpattern_rotate\
    \ b 26)) true)\n        ((string-match a (cycpattern_rotate b 27)) true)\n   \
    \     ((string-match a (cycpattern_rotate b 28)) true)\n        ((string-match\
    \ a (cycpattern_rotate b 29)) true)\n        ((string-match a (cycpattern_rotate\
    \ b 30)) true)\n        ((string-match a (cycpattern_rotate b 31)) true)\n   \
    \     ((string-match a (cy", "  (cond\n    [(empty? a) false]\n    [(empty? b)\
    \ false]\n    [(equal? (first a) (first b)) true]\n    [else (or (cycpattern_check\
    \ (rest a) b)\n              (cycpattern_check (rest b) a)))]))\n", "  (cond [(empty?\
    \ a) false]\n        [(empty? b) false]\n        [(equal? (substring a 0 1) (substring\
    \ b 0 1)) true]\n        [else (or (cycpattern_check (substring a 0 1) (substring\
    \ b 0 1))\n                  (cycpattern_check (substring a 0 -1) (substring b\
    \ 0 -1)))]))\n", "  (cond\n    [(empty? a) false]\n    [(empty? b) true]\n   \
    \ [(equal? (first a) (first b)) (cycpattern_check (rest a) (rest b))]\n    [else\
    \ (cycpattern_check (rest a) (rest b)) (or (equal? (first a) (first b)) (cycpattern_check\
    \ (rest a) (rest b)))]))\n", "  (or (string=? a b)\n      (or (string=? (string-reverse\
    \ a) b)\n          (string=? (string-reverse b) a))))\n", "  (cond\n    [(empty?\
    \ a) false]\n    [(empty? b) false]\n    [(equal? (first a) (first b)) true]\n\
    \    [else (or (cycpattern_check (rest a) b)\n               (cycpattern_check\
    \ (rest b) a)))]))\n", "  (cond\n    [(empty? b) false]\n    [(equal? (first b)\
    \ (cycpattern_check (rest b) a)) true]\n    [else false]))\n", "  (cond [(empty?\
    \ a) #t]\n        [(empty? b) #f]\n        [(equal? (first a) (first b)) #t]\n\
    \        [(equal? (first b) (first a)) #t]\n        [else (or (equal? (first a)\
    \ (first b)) (cycpattern_check (rest a) (rest b)))]))\n", "  (or (string=? a b)\n\
    \      (or (string=? (string-append a b) a)\n          (string=? (string-append\
    \ a b) (string-append b (substring a 0 1))))))\n", "  (cond\n    [(empty? a) false]\n\
    \    [(empty? b) false]\n    [(equal? (first a) (first b)) true]\n    [else (or\
    \ (equal? (first a) (first b)) (cycpattern_check (rest a) (rest b)))]))\n", " \
    \ (cond [(empty? a) false]\n        [(empty? b) false]\n        [(equal? (first\
    \ a) (first b)) true]\n        [(equal? (first a) (first b)) (cycpattern_check\
    \ (rest a) (rest b))]\n        [else false]))\n", "  (or (string=? a b)\n    \
    \  (or (string=? (string-reverse a) b)\n          (string-contains? a b))))\n",
  "  (cond ((null? a) true)\n        ((null? b) true)\n        ((string=? (string-ref\
    \ a 0) (string-ref b 0))\n         (string-equal? a b))\n        (else (or (string=?\
    \ (string-ref a 0) (string-ref b 0))\n                  (string-equal? (string-ref\
    \ a 1) (string-ref b 1))\n                  (string-equal? (string-ref a 2) (string-ref\
    \ b 2))\n                  (string-equal? (string-ref a 3) (string-ref b 3))\n\
    \                  (string-equal? (string-ref a 4) (string-ref b 4))\n       \
    \           (string-equal? (string-ref a 5) (string-ref b 5))\n              \
    \    (string-equal? (string-ref a 6) (string-ref b 6))\n                  (string-equal?\
    \ (string-ref a 7) (string-ref b 7))\n                  (string-equal? (string-ref\
    \ a 8) (string-ref b 8))\n                  (string-equal? (string-ref a 9) (string-ref\
    \ b 9))\n                  (string-equal? (string-ref a 10) (string-ref b 10))\n\
    \                  (string-equal? (string-ref a 11) (string-ref b 11))\n     \
    \             (string-equal? (string-ref a 12) (string-ref b 12))\n          \
    \        (string-equal? (string-ref a 13) (string-ref b 13))\n               \
    \   (string-equal? (string-ref a 14) (string-ref b 14))\n                  (string-equal?\
    \ (string-ref a 15) (string-ref b 15))\n                  (string-equal? (string-ref\
    \ a 16) (string-ref b 16))\n                  (string-equal? (string-ref a 17)\
    \ (string-ref b 17))\n                  (string-equal? (string-ref a 18) (string-ref\
    \ b 18))\n                  (string-equal? (string-ref a 19) (string-ref b 19))\n\
    \                  (string-equal? (string-ref a 20) (string-ref b 20))\n     \
    \             (string-equal? (string-ref a 21) (string-ref b 21))\n          \
    \        (string-equal? (string-ref a 22) (string-ref b 22))\n               \
    \   (string-equal? (string-ref a 23) (string-ref b 23))\n                  (string-equal?\
    \ (string-ref a 24) (string-ref b 24))\n                  (string-equal? (string-ref\
    \ a 25) (string-ref b 25))\n                  (string-equal? (string-ref a 26)\
    \ (string-ref b 26))\n                  (string-equal? (string-ref a 27) (string-ref\
    \ b 27))\n                  (string-equal? (string-ref a 28) (string-ref b 28))",
  "  (or (string=? a b)\n      (or (string=? (string-reverse a) b)\n          (string-contains-substring\
    \ a b))))\n", "  (or (string=? a b)\n      (or (string=? (string-rotate b 1) a)\n\
    \          (string=? (string-rotate b 2) a)\n          (string=? (string-rotate\
    \ b 3) a)\n          (string=? (string-rotate b 4) a)\n          (string=? (string-rotate\
    \ b 5) a)\n          (string=? (string-rotate b 6) a)\n          (string=? (string-rotate\
    \ b 7) a)\n          (string=? (string-rotate b 8) a)\n          (string=? (string-rotate\
    \ b 9) a)\n          (string=? (string-rotate b 10) a)\n          (string=? (string-rotate\
    \ b 11) a)\n          (string=? (string-rotate b 12) a)\n          (string=? (string-rotate\
    \ b 13) a)\n          (string=? (string-rotate b 14) a)\n          (string=? (string-rotate\
    \ b 15) a)\n          (string=? (string-rotate b 16) a)\n          (string=? (string-rotate\
    \ b 17) a)\n          (string=? (string-rotate b 18) a)\n          (string=? (string-rotate\
    \ b 19) a)\n          (string=? (string-rotate b 20) a)\n          (string=? (string-rotate\
    \ b 21) a)\n          (string=? (string-rotate b 22) a)\n          (string=? (string-rotate\
    \ b 23) a)\n          (string=? (string-rotate b 24) a)\n          (string=? (string-rotate\
    \ b 25) a)\n          (string=? (string-rotate b 26) a)\n          (string=? (string-rotate\
    \ b 27) a)\n          (string=? (string-rotate b 28) a)\n          (string=? (string-rotate\
    \ b 29) a)\n          (string=? (string-rotate b 30) a)\n          (string=? (string-rotate\
    \ b 31) a)\n          (string=? (string-rotate b 32) a)\n          (string=? (string-rotate\
    \ b 33) a)\n          (string=? (string-rotate b 34) a)\n          (string=? (string-rotate\
    \ b 35) a)\n          (string=? (string-rotate b 36) a)\n          (string=? (string-rotate\
    \ b 37) a)\n          (string=? (string-rotate b 38) a)\n          (string=? (string-rotate\
    \ b 39) a)\n          (string=? (string-rotate b 40) a)\n          (string=? (string-rotate\
    \ b 41) a)\n          (string=? (string-rotate b 42) a)\n          (string=? (string-rotate\
    \ b 43) a)\n          (string=? (string-rotate b 44) a)\n          (string=? (string-rotate\
    \ b 45) a)\n          (string=? (string-rotate b 46) a)\n          (string=? (string-rotate ",
  "  (cond ((null? b) false)\n        ((string=? (substring a 0 b) (cycpattern_check\
    \ a (cdr b)))\n         (true))\n        (else false)))\n", "  (or (string=? a\
    \ b)\n      (or (string=? (string-append a b) a)\n          (string=? (string-append\
    \ a b) b))))\n", "  (cond\n    [(empty? a) false]\n    [(empty? b) false]\n  \
    \  [(equal? (first a) (first b)) true]\n    [else (or (cycpattern_check (rest\
    \ a) b)\n              (cycpattern_check (rest b) a)))]))\n", "  (cond\n    [(empty?\
    \ a) false]\n    [(empty? b) false]\n    [(equal? (first a) (first b)) true]\n\
    \    [else (or (cycpattern_check (rest a) b)\n               (cycpattern_check\
    \ (rest b) a)))]))\n", "  (cond\n    [(empty? a) true]\n    [(empty? b) false]\n\
    \    [(equal? (first a) (first b)) (cycpattern_check (rest a) (rest b))]\n   \
    \ [else (or (cycpattern_check (rest a) b)\n              (cycpattern_check (first\
    \ a) (rest b)))]))\n", "  (or (string=? a b)\n      (or (string=? (string-ref\
    \ a 0) (string-ref b 0))\n          (string=? (string-ref a 1) (string-ref b 1))\n\
    \          (string=? (string-ref a 2) (string-ref b 2))\n          (string=? (string-ref\
    \ a 3) (string-ref b 3))\n          (string=? (string-ref a 4) (string-ref b 4))\n\
    \          (string=? (string-ref a 5) (string-ref b 5))\n          (string=? (string-ref\
    \ a 6) (string-ref b 6))\n          (string=? (string-ref a 7) (string-ref b 7))\n\
    \          (string=? (string-ref a 8) (string-ref b 8))\n          (string=? (string-ref\
    \ a 9) (string-ref b 9))\n          (string=? (string-ref a 10) (string-ref b\
    \ 10))\n          (string=? (string-ref a 11) (string-ref b 11))\n          (string=?\
    \ (string-ref a 12) (string-ref b 12))\n          (string=? (string-ref a 13)\
    \ (string-ref b 13))\n          (string=? (string-ref a 14) (string-ref b 14))\n\
    \          (string=? (string-ref a 15) (string-ref b 15))\n          (string=?\
    \ (string-ref a 16) (string-ref b 16))\n          (string=? (string-ref a 17)\
    \ (string-ref b 17))\n          (string=? (string-ref a 18) (string-ref b 18))\n\
    \          (string=? (string-ref a 19) (string-ref b 19))\n          (string=?\
    \ (string-ref a 20) (string-ref b 20))\n          (string=? (string-ref a 21)\
    \ (string-ref b 21))\n          (string=? (string-ref a 22) (string-ref b 22))\n\
    \          (string=? (string-ref a 23) (string-ref b 23))\n          (string=?\
    \ (string-ref a 24) (string-ref b 24))\n          (string=? (string-ref a 25)\
    \ (string-ref b 25))\n          (string=? (string-ref a 26) (string-ref b 26))\n\
    \          (string=? (string-ref a 27) (string-ref b 27))\n          (string=?\
    \ (string-ref a 28) (string-ref b 28))\n          (string=? (string-ref a 29)\
    \ (string-ref b 29))\n          (string=? (string-ref a 30) (string-ref b 30))\n\
    \          (string=? (string-ref a 31) (string-ref b 31))\n          (string=?\
    \ (string-ref a 32) (string-ref b ", "  (cond [(empty? a) false]\n        [(empty?\
    \ b) false]\n        [(equal? (first a) (first b)) true]\n        [else (or (cycpattern_check\
    \ (rest a) b)\n                   (cycpattern_check (rest b) a))]))\n", "  (cond\
    \ ((null? a) #f)\n        ((null? b) #f)\n        ((string-equal? (substring b\
    \ 0 (string-length a)) a) #t)\n        (else (or (cycpattern_check (substring\
    \ a 0 (string-length b)) b)\n                  (cycpattern_check (substring b\
    \ (string-length a) 0) a))))\n", "  (cond\n    [(empty? a) false]\n    [(empty?\
    \ b) false]\n    [(equal? (first a) (first b)) true]\n    [else (or (cycpattern_check\
    \ (rest a) b)\n              (cycpattern_check (rest b) a)))]))\n", "  (cond\n\
    \    [(empty? a) false]\n    [(empty? b) false]\n    [(equal? (first a) (first\
    \ b)) true]\n    [else (or (cycpattern_check (rest a) b)\n              (cycpattern_check\
    \ (rest b) a)))]))\n", "  (or (string=? a b)\n      (or (string=? (string-reverse\
    \ a) b)\n          (string=? (string-reverse b) a))))\n", "  (cond\n    [(empty?\
    \ a) false]\n    [(empty? b) false]\n    [(equal? (first a) (first b)) true]\n\
    \    [else (or (cycpattern_check (rest a) b)\n               (cycpattern_check\
    \ (rest b) a)))]))\n", "  (cond [(empty? a) false]\n        [(empty? b) false]\n\
    \        [(equal? (first a) (first b)) (equal? (second a) (second b))]\n     \
    \   [else (or (equal? (first a) (first b)) (cycpattern_check (rest a) (rest b)))]))\n",
  "  (cond [(empty? b) false]\n        [(equal? (first b) (cycpattern_check (rest\
    \ a) (rest b)))\n         (cond [(empty? (rest b)) true]\n               [else\
    \ false]])\n        [else false]))\n", "  (cond\n    [(empty? a) false]\n    [(empty?\
    \ b) false]\n    [(equal? (first a) (first b)) true]\n    [else (or (equal? (first\
    \ a) (first b)) (cycpattern_check (rest a) (rest b)))]))\n", "  (cond\n    [(empty?\
    \ a) false]\n    [(empty? b) false]\n    [(equal? (first a) (first b)) true]\n\
    \    [else (or (cycpattern_check (rest a) b)\n               (cycpattern_check\
    \ (rest b) a)))]))\n", "  (cond\n    [(empty? a) true]\n    [(empty? b) false]\n\
    \    [(equal? (first a) (first b)) (cycpattern_check (rest a) (rest b))]\n   \
    \ [else false]))\n", "  (cond ((null? a) true)\n        ((null? b) true)\n   \
    \     ((string=? (substring a 0 1) (substring b 0 1)) true)\n        ((string=?\
    \ (substring a 0 2) (substring b 0 2)) true)\n        ((string=? (substring a\
    \ 0 3) (substring b 0 3)) true)\n        ((string=? (substring a 0 4) (substring\
    \ b 0 4)) true)\n        ((string=? (substring a 0 5) (substring b 0 5)) true)\n\
    \        ((string=? (substring a 0 6) (substring b 0 6)) true)\n        ((string=?\
    \ (substring a 0 7) (substring b 0 7)) true)\n        ((string=? (substring a\
    \ 0 8) (substring b 0 8)) true)\n        ((string=? (substring a 0 9) (substring\
    \ b 0 9)) true)\n        ((string=? (substring a 0 10) (substring b 0 10)) true)\n\
    \        ((string=? (substring a 0 11) (substring b 0 11)) true)\n        ((string=?\
    \ (substring a 0 12) (substring b 0 12)) true)\n        ((string=? (substring\
    \ a 0 13) (substring b 0 13)) true)\n        ((string=? (substring a 0 14) (substring\
    \ b 0 14)) true)\n        ((string=? (substring a 0 15) (substring b 0 15)) true)\n\
    \        ((string=? (substring a 0 16) (substring b 0 16)) true)\n        ((string=?\
    \ (substring a 0 17) (substring b 0 17)) true)\n        ((string=? (substring\
    \ a 0 18) (substring b 0 18)) true)\n        ((string=? (substring a 0 19) (substring\
    \ b 0 19)) true)\n        ((string=? (substring a 0 20) (substring b 0 20)) true)\n\
    \        ((string=? (substring a 0 21) (substring b 0 21)) true)\n        ((string=?\
    \ (substring a 0 22) (substring b 0 22)) true)\n        ((string=? (substring\
    \ a 0 23) (substring b 0 23)) true)\n        ((string=? (substring a 0 24) (substring\
    \ b 0 24)) true)\n        ((string=? (substring a 0 25) (substring b 0 25)) true)\n\
    \        ((string=? (substring a 0 26) (substring b 0 26)) true)\n", "  (cond\
    \ ((null? a) false)\n        ((null? b) false)\n        ((string=? (substring\
    \ a 0 1) (substring b 0 1)) true)\n        ((string=? (substring a 0 2) (substring\
    \ b 0 2)) true)\n        ((string=? (substring a 0 3) (substring b 0 3)) true)\n\
    \        ((string=? (substring a 0 4) (substring b 0 4)) true)\n        ((string=?\
    \ (substring a 0 5) (substring b 0 5)) true)\n        ((string=? (substring a\
    \ 0 6) (substring b 0 6)) true)\n        ((string=? (substring a 0 7) (substring\
    \ b 0 7)) true)\n        ((string=? (substring a 0 8) (substring b 0 8)) true)\n\
    \        ((string=? (substring a 0 9) (substring b 0 9)) true)\n        ((string=?\
    \ (substring a 0 10) (substring b 0 10)) true)\n        ((string=? (substring\
    \ a 0 11) (substring b 0 11)) true)\n        ((string=? (substring a 0 12) (substring\
    \ b 0 12)) true)\n        ((string=? (substring a 0 13) (substring b 0 13)) true)\n\
    \        ((string=? (substring a 0 14) (substring b 0 14)) true)\n        ((string=?\
    \ (substring a 0 15) (substring b 0 15)) true)\n        ((string=? (substring\
    \ a 0 16) (substring b 0 16)) true)\n        ((string=? (substring a 0 17) (substring\
    \ b 0 17)) true)\n        ((string=? (substring a 0 18) (substring b 0 18)) true)\n\
    \        ((string=? (substring a 0 19) (substring b 0 19)) true)\n        ((string=?\
    \ (substring a 0 20) (substring b 0 20)) true)\n        ((string=? (substring\
    \ a 0 21) (substring b 0 21)) true)\n        ((string=? (substring a 0 22) (substring\
    \ b 0 22)) true)\n        ((string=? (substring a 0 23) (substring b 0 23)) true)\n\
    \        ((string=? (substring a 0 24) (substring b 0 24)) true)\n        ((string=?\
    \ (substring a 0 25) (substring b 0 25)) true)\n        ((string=? (substring\
    \ a 0 26) (substring b 0 26)) ", "  (cond ((null? a) false)\n        ((null? b)\
    \ false)\n        ((string=? (substring a 0 1) (substring b 0 1)) true)\n    \
    \    ((string=? (substring a 0 2) (substring b 0 2)) true)\n        ((string=?\
    \ (substring a 0 3) (substring b 0 3)) true)\n        ((string=? (substring a\
    \ 0 4) (substring b 0 4)) true)\n        ((string=? (substring a 0 5) (substring\
    \ b 0 5)) true)\n        ((string=? (substring a 0 6) (substring b 0 6)) true)\n\
    \        ((string=? (substring a 0 7) (substring b 0 7)) true)\n        ((string=?\
    \ (substring a 0 8) (substring b 0 8)) true)\n        ((string=? (substring a\
    \ 0 9) (substring b 0 9)) true)\n        ((string=? (substring a 0 10) (substring\
    \ b 0 10)) true)\n        ((string=? (substring a 0 11) (substring b 0 11)) true)\n\
    \        ((string=? (substring a 0 12) (substring b 0 12)) true)\n        ((string=?\
    \ (substring a 0 13) (substring b 0 13)) true)\n        ((string=? (substring\
    \ a 0 14) (substring b 0 14)) true)\n        ((string=? (substring a 0 15) (substring\
    \ b 0 15)) true)\n        ((string=? (substring a 0 16) (substring b 0 16)) true)\n\
    \        ((string=? (substring a 0 17) (substring b 0 17)) true)\n        ((string=?\
    \ (substring a 0 18) (substring b 0 18)) true)\n        ((string=? (substring\
    \ a 0 19) (substring b 0 19)) true)\n        ((string=? (substring a 0 20) (substring\
    \ b 0 20)) true)\n        ((string=? (substring a 0 21) (substring b 0 21)) true)\n\
    \        ((string=? (substring a 0 22) (substring b 0 22)) true)\n        ((string=?\
    \ (substring a 0 23) (substring b 0 23)) true)\n        ((string=? (substring\
    \ a 0 24) (substring b 0 24)) true)\n        ((string=? (substring a 0 25) (substring\
    \ b 0 25)) true)\n        ((string=? (substring a 0 26) (substring b 0 26)) ",
  "  (cond [(empty? a) false]\n        [(empty? b) false]\n        [(equal? (first\
    \ a) (first b)) (cycpattern_check (rest a) (rest b))]\n        [else (or (equal?\
    \ (first a) (first b)) (cycpattern_check (rest a) (rest b)) (cycpattern_check\
    \ (rest b) (rest a)))]))\n", "  (cond\n    [(empty? a) false]\n    [(empty? b)\
    \ false]\n    [(equal? (first a) (first b)) true]\n    [else (or (cycpattern_check\
    \ (rest a) b)\n               (cycpattern_check (rest b) a)))]))\n", "  (cond\n\
    \    [(empty? a) false]\n    [(empty? b) false]\n    [(equal? (first a) (first\
    \ b)) true]\n    [else (or (cycpattern_check (rest a) b)\n              (cycpattern_check\
    \ (rest b) a)))]))\n", "  (or (string=? a b)\n      (or (string=? (string-reverse\
    \ a) b)\n          (string=? (string-reverse b) a))))\n", "  (cond\n    [(empty?\
    \ a) false]\n    [(empty? b) false]\n    [(equal? (first a) (first b)) true]\n\
    \    [else (or (equal? (first a) (first b)) (cycpattern_check (rest a) (rest b)))]))\n",
  "  (cond\n    [(empty? a) false]\n    [(empty? b) false]\n    [(equal? (first a)\
    \ (first b)) true]\n    [else (or (cycpattern_check (rest a) b)\n            \
    \  (cycpattern_check (rest b) a))]))\n", "  (cond [(empty? a) false]\n       \
    \ [(empty? b) false]\n        [(equal? (first a) (first b)) true]\n        [else\
    \ (or (cycpattern_check (rest a) b)\n                  (cycpattern_check (rest\
    \ b) a))]))\n", "  (cond\n    [(empty? a) false]\n    [(empty? b) false]\n   \
    \ [(equal? (first a) (first b)) true]\n    [else (or (cycpattern_check (rest a)\
    \ b)\n              (cycpattern_check (rest b) a))]))\n", "  (or (string=? a b)\n\
    \      (or (string=? (string-reverse a) b)\n          (string=? (string-reverse\
    \ b) a))))\n", "  (cond\n    [(empty? a) false]\n    [(empty? b) true]\n    [(equal?\
    \ (first a) (first b)) (cycpattern_check (rest a) (rest b))]\n    [else (cycpattern_check\
    \ (rest a) (rest b))]\n  ))\n", "  (or (string=? a b)\n      (or (string=? (string-reverse\
    \ a) b)\n          (string=? (string-reverse b) a))))\n", "  (cond\n    [(empty?\
    \ a) false]\n    [(empty? b) false]\n    [(equal? (first a) (first b)) true]\n\
    \    [else (or (equal? (first a) (first b)) (cycpattern_check (rest a) (rest b)))]))\n",
  "  (cond [(empty? a) false]\n        [(empty? b) false]\n        [(equal? (first\
    \ a) (first b)) true]\n        [else (or (cycpattern_check (rest a) b)\n     \
    \             (cycpattern_check (rest b) a))]))\n", "  (or (string=? a b)\n  \
    \    (or (string=? (string-rotate b 1) a)\n          (string=? (string-rotate\
    \ b 2) a)\n          (string=? (string-rotate b 3) a)\n          (string=? (string-rotate\
    \ b 4) a)\n          (string=? (string-rotate b 5) a)\n          (string=? (string-rotate\
    \ b 6) a)\n          (string=? (string-rotate b 7) a)\n          (string=? (string-rotate\
    \ b 8) a)\n          (string=? (string-rotate b 9) a)\n          (string=? (string-rotate\
    \ b 10) a)\n          (string=? (string-rotate b 11) a)\n          (string=? (string-rotate\
    \ b 12) a)\n          (string=? (string-rotate b 13) a)\n          (string=? (string-rotate\
    \ b 14) a)\n          (string=? (string-rotate b 15) a)\n          (string=? (string-rotate\
    \ b 16) a)\n          (string=? (string-rotate b 17) a)\n          (string=? (string-rotate\
    \ b 18) a)\n          (string=? (string-rotate b 19) a)\n          (string=? (string-rotate\
    \ b 20) a)\n          (string=? (string-rotate b 21) a)\n          (string=? (string-rotate\
    \ b 22) a)\n          (string=? (string-rotate b 23) a)\n          (string=? (string-rotate\
    \ b 24) a)\n          (string=? (string-rotate b 25) a)\n          (string=? (string-rotate\
    \ b 26) a)\n          (string=? (string-rotate b 27) a)\n          (string=? (string-rotate\
    \ b 28) a)\n          (string=? (string-rotate b 29) a)\n          (string=? (string-rotate\
    \ b 30) a)\n          (string=? (string-rotate b 31) a)\n          (string=? (string-rotate\
    \ b 32) a)\n          (string=? (string-rotate b 33) a)\n          (string=? (string-rotate\
    \ b 34) a)\n          (string=? (string-rotate b 35) a)\n          (string=? (string-rotate\
    \ b 36) a)\n          (string=? (string-rotate b 37) a)\n          (string=? (string-rotate\
    \ b 38) a)\n          (string=? (string-rotate b 39) a)\n          (string=? (string-rotate\
    \ b 40) a)\n          (string=? (string-rotate b 41) a)\n          (string=? (string-rotate\
    \ b 42) a)\n          (string=? (string-rotate b 43) a)\n          (string=? (string-rotate\
    \ b 44) a)\n          (string=? (string-rotate b 45) a)\n          (string=? (string-rotate\
    \ b 46) a)\n          (string=? (string-rotate ", "  (cond ((or (string=? a b)\
    \ (string=? (string-reverse a) (string-reverse b)))\n         (string=? a b))\n\
    \        ((string=? (string-reverse a) (string-reverse b)) (string=? a b))\n \
    \       ((string=? (string-reverse a) (string-reverse b)) (string=? (string-reverse\
    \ a) (string-reverse b)))\n        (else false)))\n", "  (or (string=? a b)\n\
    \      (or (string=? (string-append a b) a)\n          (string=? (string-append\
    \ a b) (string-append b a))))) ;; #lang racket\n", "  (cond\n    [(empty? a) false]\n\
    \    [(empty? b) false]\n    [(equal? (first a) (first b)) true]\n    [else (or\
    \ (equal? (first a) (first b)) (cycpattern_check (rest a) (rest b)))]))\n", " \
    \ (cond ((null? a) true)\n        ((null? b) true)\n        ((string=? (substring\
    \ a 0 1) (substring b 0 1)) true)\n        ((string=? (substring a 0 2) (substring\
    \ b 0 2)) true)\n        ((string=? (substring a 0 3) (substring b 0 3)) true)\n\
    \        ((string=? (substring a 0 4) (substring b 0 4)) true)\n        ((string=?\
    \ (substring a 0 5) (substring b 0 5)) true)\n        ((string=? (substring a\
    \ 0 6) (substring b 0 6)) true)\n        ((string=? (substring a 0 7) (substring\
    \ b 0 7)) true)\n        ((string=? (substring a 0 8) (substring b 0 8)) true)\n\
    \        ((string=? (substring a 0 9) (substring b 0 9)) true)\n        ((string=?\
    \ (substring a 0 10) (substring b 0 10)) true)\n        ((string=? (substring\
    \ a 0 11) (substring b 0 11)) true)\n        ((string=? (substring a 0 12) (substring\
    \ b 0 12)) true)\n        ((string=? (substring a 0 13) (substring b 0 13)) true)\n\
    \        ((string=? (substring a 0 14) (substring b 0 14)) true)\n        ((string=?\
    \ (substring a 0 15) (substring b 0 15)) true)\n        ((string=? (substring\
    \ a 0 16) (substring b 0 16)) true)\n        ((string=? (substring a 0 17) (substring\
    \ b 0 17)) true)\n        ((string=? (substring a 0 18) (substring b 0 18)) true)\n\
    \        ((string=? (substring a 0 19) (substring b 0 19)) true)\n        ((string=?\
    \ (substring a 0 20) (substring b 0 20)) true)\n        ((string=? (substring\
    \ a 0 21) (substring b 0 21)) true)\n        ((string=? (substring a 0 22) (substring\
    \ b 0 22)) true)\n        ((string=? (substring a 0 23) (substring b 0 23)) true)\n\
    \        ((string=? (substring a 0 24) (substring b 0 24)) true)\n        ((string=?\
    \ (substring a 0 25) (substring b 0 25)) true)\n        ((string=? (substring\
    \ a 0 26) (substring b 0 26)) true)\n", "  (cond\n    [(empty? a) false]\n   \
    \ [(empty? b) true]\n    [(equal? (first a) (first b)) (cycpattern_check (rest\
    \ a) (rest b))]\n    [else (or (equal? (first a) (first b)) (cycpattern_check\
    \ (rest a) (rest b)) (cycpattern_check (rest b) (rest a)))]))\n", "  (cond [(empty?\
    \ a) false]\n        [(empty? b) false]\n        [(equal? (first a) (first b))\
    \ true]\n        [(equal? (first a) (first b)) (cycpattern_check (rest a) (rest\
    \ b))]\n        [else false]))\n", "  (cond\n    [(empty? a) false]\n    [(empty?\
    \ b) false]\n    [(equal? (first a) (first b)) true]\n    [else (or (equal? (first\
    \ a) (first b)) (cycpattern_check (rest a) (rest b)))]))\n", "  (cond\n    [(empty?\
    \ a) false]\n    [(empty? b) false]\n    [(equal? (first a) (first b)) true]\n\
    \    [else (or (cycpattern_check (rest a) b)\n              (cycpattern_check\
    \ (rest b) a)))]))\n", "  (cond\n    [(empty? a) false]\n    [(empty? b) false]\n\
    \    [(equal? (first a) (first b)) true]\n    [else (or (cycpattern_check (rest\
    \ a) b)\n              (cycpattern_check (rest b) a))]))\n", "  (cond ((or (string-match\
    \ a b)\n             (string-match (string-reverse a) (string-reverse b)))\n \
    \        #t)\n        ((or (string-match (string-reverse a) b)\n             (string-match\
    \ (string-reverse b) a))\n         #t)\n        ((or (string-match a (string-reverse\
    \ b))\n             (string-match b (string-reverse a)))\n         #t)\n     \
    \   ((or (string-match b (string-reverse a))\n             (string-match a (string-reverse\
    \ b)))\n         #t)\n        (else\n         #f)))\n", "  (or (string=? a b)\n\
    \      (or (string=? (string-append a b) a)\n          (string=? (string-append\
    \ a b) (string-append b a))))) ;; #lang racket\n", "  (or (string=? a b)\n   \
    \   (or (string=? (string-reverse a) b)\n          (string=? (string-reverse b)\
    \ a))))\n", "  (cond\n    [(empty? b) true]\n    [(equal? (first b) (first a))\
    \ true]\n    [else (or (cycpattern_check (rest a) (rest b)) (cycpattern_check\
    \ (rest b) (rest a)))]))\n", "  (cond [(empty? a) false]\n        [(empty? b)\
    \ false]\n        [(equal? (first a) (first b)) true]\n        [(equal? (first\
    \ a) (first b)) (cycpattern_check (rest a) (rest b))]\n        [else false]))\n",
  "  (cond [(empty? a) false]\n        [(empty? b) false]\n        [(equal? (first\
    \ a) (first b)) true]\n        [else (or (cycpattern_check (rest a) b)\n     \
    \             (cycpattern_check (rest b) a)))]))\n", "  (or (string=? a b)\n \
    \     (or (string=? (string-append a (butlast a)) b)\n          (string=? (string-append\
    \ (butlast a) b) a))))\n", "  (cond\n    [(empty? a) false]\n    [(empty? b) false]\n\
    \    [(equal? (first a) (first b)) true]\n    [else (or (cycpattern_check (rest\
    \ a) b)\n               (cycpattern_check (rest b) a)))]))\n", "  (cond\n    [(empty?\
    \ a) false]\n    [(empty? b) false]\n    [(equal? (first a) (first b)) true]\n\
    \    [else (or (cycpattern_check (rest a) b)\n              (cycpattern_check\
    \ (rest b) a)))]))\n", "  (or (string=? a b)\n      (or (string=? (string-ref\
    \ a 0) (string-ref b 0))\n          (string-contains-rotations b a))))\n", " \
    \ (cond\n    [(empty? a) false]\n    [(empty? b) false]\n    [(equal? (first a)\
    \ (first b)) true]\n    [else (or (cycpattern_check (rest a) b)\n            \
    \  (cycpattern_check (rest b) a)))]))\n", "  (cond\n    [(empty? a) false]\n \
    \   [(empty? b) false]\n    [(equal? (first a) (first b)) (cycpattern_check (rest\
    \ a) (rest b))]\n    [else (cycpattern_check (rest a) b)]))\n", "  (cond [(empty?\
    \ a) false]\n        [(empty? b) true]\n        [(equal? (first a) (first b))\
    \ (cycpattern_check (rest a) (rest b))]\n        [else (or (equal? (first a) (first\
    \ b)) (cycpattern_check (rest a) (rest b)) (cycpattern_check (rest a) (rest b)))]))\n",
  "  (or (string=? a b)\n      (or (string=? (substring a 0 1) b)\n          (string=?\
    \ (substring a 1 length) b))))\n", "  (cond ((or (empty? a) (empty? b)) #f)\n\
    \        ((equal? (first a) (first b)) #t)\n        ((equal? (first a) (first\
    \ b) (rot1 a) (rot1 b)) #t)\n        ((equal? (first a) (first b) (rot2 a) (rot2\
    \ b)) #t)\n        ((equal? (first a) (first b) (rot3 a) (rot3 b)) #t)\n     \
    \   ((equal? (first a) (first b) (rot4 a) (rot4 b)) #t)\n        ((equal? (first\
    \ a) (first b) (rot5 a) (rot5 b)) #t)\n        ((equal? (first a) (first b) (rot6\
    \ a) (rot6 b)) #t)\n        ((equal? (first a) (first b) (rot7 a) (rot7 b)) #t)\n\
    \        ((equal? (first a) (first b) (rot8 a) (rot8 b)) #t)\n        ((equal?\
    \ (first a) (first b) (rot9 a) (rot9 b)) #t)\n        ((equal? (first a) (first\
    \ b) (rot10 a) (rot10 b)) #t)\n        ((equal? (first a) (first b) (rot11 a)\
    \ (rot11 b)) #t)\n        ((equal? (first a) (first b) (rot12 a) (rot12 b)) #t)\n\
    \        ((equal? (first a) (first b) (rot13 a) (rot13 b)) #t)\n        ((equal?\
    \ (first a) (first b) (rot14 a) (rot14 b)) #t)\n        ((equal? (first a) (first\
    \ b) (rot15 a) (rot15 b)) #t)\n        ((equal? (first a) (first b) (rot16 a)\
    \ (rot16 b)) #t)\n        ((equal? (first a) (first b) (rot17 a) (rot17 b)) #t)\n\
    \        ((equal? (first a) (first b) (rot18 a) (rot18 b)) #t)\n        ((equal?\
    \ (first a) (first b) (rot19 a) (rot19 (rest b)))) #t\n        ((equal? (first\
    \ a) (first b) (rot20 a) (rot20 (rest b)))) #t\n        ((equal? (first a) (first\
    \ b) (rot21 a) (rot21 (rest b)))) #t\n        ((equal? (first a) (first b) (rot22\
    \ a) (rot22 (rest b)))) #t\n        ((equal? (first a) (first b) (rot23 a", " \
    \ (cond ((null? a) true)\n        ((null? b) true)\n        ((string-match (substring\
    \ a 0 1) b) true)\n        ((string-match (substring a 0 2) b) true)\n       \
    \ ((string-match (substring a 0 3) b) true)\n        ((string-match (substring\
    \ a 0 4) b) true)\n        ((string-match (substring a 0 5) b) true)\n       \
    \ ((string-match (substring a 0 6) b) true)\n        ((string-match (substring\
    \ a 0 7) b) true)\n        ((string-match (substring a 0 8) b) true)\n       \
    \ ((string-match (substring a 0 9) b) true)\n        ((string-match (substring\
    \ a 0 10) b) true)\n        ((string-match (substring a 0 11) b) true)\n     \
    \   ((string-match (substring a 0 12) b) true)\n        ((string-match (substring\
    \ a 0 13) b) true)\n        ((string-match (substring a 0 14) b) true)\n     \
    \   ((string-match (substring a 0 15) b) true)\n        ((string-match (substring\
    \ a 0 16) b) true)\n        ((string-match (substring a 0 17) b) true)\n     \
    \   ((string-match (substring a 0 18) b) true)\n        ((string-match (substring\
    \ a 0 19) b) true)\n        ((string-match (substring a 0 20) b) true)\n     \
    \   ((string-match (substring a 0 21) b) true)\n        ((string-match (substring\
    \ a 0 22) b) true)\n        ((string-match (substring a 0 23) b) true)\n     \
    \   ((string-match (substring a 0 24) b) true)\n        ((string-match (substring\
    \ a 0 25) b) true)\n        ((string-match (substring a 0 26) b) true)\n     \
    \   ((string-match (substring a 0 27) b) true)\n        ((string-match (substring\
    \ a 0 28) b) true)\n        ((string-match (substring a 0 29) b) true)\n     \
    \   ((string-match (substring a 0 30) b) true)\n        ((string-match (substring\
    \ a 0 31) b) true)\n        ((string-match (substring a 0 32) b) true)\n     \
    \   ((string-match (substring a 0 33) b) true)\n        ((string-match (substring\
    \ a ", "  (cond ((or (string-match a b) (string-match b a)) #t)\n        ((string-match\
    \ a b) #t)\n        ((string-match b a) #t)\n        ((string-match a b) (string-match\
    \ a b) #t)\n        ((string-match b a) (string-match b a) #t)\n        ((string-match\
    \ a b) (string-match b a) (string-match a b) #t)\n        ((string-match b a)\
    \ (string-match b a) (string-match a b) #t)\n        ((string-match a b) (string-match\
    \ b a) (string-match b a) (string-match a b) #t)\n        ((string-match b a)\
    \ (string-match b a) (string-match b a) (string-match b a) #t)\n        ((string-match\
    \ a b) (string-match b a) (string-match b a) (string-match b a) (string-match\
    \ a b) #t)\n        ((string-match b a) (string-match b a) (string-match b a)\
    \ (string-match b a) (string-match b a) (string-match a b) #t)\n        ((string-match\
    \ a b) (string-match b a) (string-match b a) (string-match b a) (string-match\
    \ b a) (string-match b a) (string-match a b) #t)\n        ((string-match b a)\
    \ (string-match b a) (string-match b a) (string-match b a) (string-match b a)\
    \ (string-match b a) (string-match b a) (string-match a b) #t)\n        ((string-match\
    \ a b) (string-match b a) (string-match b a) (string-match b a) (string-match\
    \ b a) (string-match b a) (string-match b a) (string-match b a) (string-match\
    \ a b) #t)\n        ((string-match b a) (string-match b a) (string-match b a)\
    \ (string-match b a) (string-match b a) (string-match b a) (string-match b a)\
    \ (string-match b a) (string-match a b) #t)\n        ((string-match a b) (string-match\
    \ b a) (string-match b a) (string-match b a) (string-match b a) (string-match\
    \ b a) (string-match b a) (string-match b a) (string-match b a) (string-match\
    \ a b) #t)\n        ((string-match b a) (string-match b a) (string-match b a)\
    \ (string-match b a) (string-match b a) (string-match b a) (string-match b a)\
    \ (string-match b a) (string-match b a) (string-match a b) #t)\n        ((string-match\
    \ a b) (string-match b ", "  (or (string=? a b)\n      (or (string=? (string-reverse\
    \ a) b)\n          (string=? (string-reverse b) a))))\n", "  (cond\n    [(empty?\
    \ a) true]\n    [(empty? b) false]\n    [(equal? (first a) (first b)) (equal?\
    \ (second a) (second b))]\n    [else (or (equal? (first a) (first b)) (equal?\
    \ (second a) (second b)) (cycpattern_check (rest a) (rest b)))]))\n", "  (cond\
    \ [(empty? a) false]\n        [(empty? b) false]\n        [(equal? (first a) (first\
    \ b)) true]\n        [(equal? (first a) (first b)) (cycpattern_check (rest a)\
    \ (rest b))]\n        [else false]))\n", "  (or (string=? a b)\n      (or (string=?\
    \ (string-reverse a) b)\n          (string=? (string-reverse b) a))))\n", "  (cond\n\
    \    [(empty? a) false]\n    [(empty? b) false]\n    [(equal? (first a) (first\
    \ b)) true]\n    [else (or (cycpattern_check (rest a) b)\n              (cycpattern_check\
    \ (rest b) a)))]))\n", "  (cond\n    [(empty? a) false]\n    [(empty? b) false]\n\
    \    [(equal? (first a) (first b)) true]\n    [else (or (equal? (first a) (first\
    \ b)) (cycpattern_check (rest a) (rest b)))]))\n", "  (cond\n    [(empty? a) false]\n\
    \    [(empty? b) false]\n    [(equal? (first a) (first b)) true]\n    [else (or\
    \ (cycpattern_check (rest a) b)\n              (cycpattern_check (rest b) a))]))\n",
  "  (cond\n    [(empty? a) true]\n    [(empty? b) false]\n    [(equal? (first a)\
    \ (first b)) (cycpattern_check (rest a) (rest b))]\n    [else (cycpattern_check\
    \ (rest a) (rest b))]\n  )\n)\n", "  (cond ((null? a) true)\n        ((null? b)\
    \ true)\n        ((string-match (string-ref a 0) (string-ref b 0))\n         (string-match\
    \ (string-ref a 0) (string-ref b 0))\n         (string-match (string-ref a 0)\
    \ (string-ref b 0))\n         (string-match (string-ref a 0) (string-ref b 0))\n\
    \         (string-match (string-ref a 0) (string-ref b 0))\n         (string-match\
    \ (string-ref a 0) (string-ref b 0))\n         (string-match (string-ref a 0)\
    \ (string-ref b 0))\n         (string-match (string-ref a 0) (string-ref b 0))\n\
    \         (string-match (string-ref a 0) (string-ref b 0))\n         (string-match\
    \ (string-ref a 0) (string-ref b 0))\n         (string-match (string-ref a 0)\
    \ (string-ref b 0))\n         (string-match (string-ref a 0) (string-ref b 0))\n\
    \         (string-match (string-ref a 0) (string-ref b 0))\n         (string-match\
    \ (string-ref a 0) (string-ref b 0))\n         (string-match (string-ref a 0)\
    \ (string-ref b 0))\n         (string-match (string-ref a 0) (string-ref b 0))\n\
    \         (string-match (string-ref a 0) (string-ref b 0))\n         (string-match\
    \ (string-ref a 0) (string-ref b 0))\n         (string-match (string-ref a 0)\
    \ (string-ref b 0))\n         (string-match (string-ref a 0) (string-ref b 0))\n\
    \         (string-match (string-ref a 0) (string-ref b 0))\n         (string-match\
    \ (string-ref a 0) (string-ref b 0))\n         (string-match (string-ref a 0)\
    \ (string-ref b 0))\n         (string-match (string-ref a 0) (string-ref b 0))\n\
    \         (string-match (string-ref a 0) (string-ref b 0))\n         (string-match\
    \ (string-ref a 0) (string-ref b 0))\n         (string-match (string-ref a 0)\
    \ (string-ref b 0))\n         (string-match (string-ref a 0) (string-ref b 0))\n\
    \         (string-match (string-ref a 0) (string-ref b 0))\n         (string-match\
    \ (string-ref a 0) (string-ref b 0))\n         (string-match (string-ref a 0)\
    \ (string-ref b 0))\n         (string-match (string-ref a 0) (string-ref b 0))\n\
    \         (string-match (string-ref a 0) (string-ref b 0))\n         (string-match\
    \ (string-ref a 0) (string-ref b 0))\n         (string-match (string-ref a 0)\
    \ (string-ref b 0))\n         (string-match", "  (cond\n    [(empty? a) false]\n\
    \    [(empty? b) false]\n    [(equal? (first a) (first b)) true]\n    [else (or\
    \ (cycpattern_check (rest a) b)\n              (cycpattern_check (rest b) a)))]))\n",
  "  (cond\n    [(empty? a) false]\n    [(empty? b) false]\n    [(equal? (first a)\
    \ (first b)) true]\n    [else (or (cycpattern_check (rest a) b)\n            \
    \  (cycpattern_check (rest b) a))]))\n", "  (cond\n    [(empty? a) false]\n  \
    \  [(empty? b) false]\n    [(equal? (first a) (first b)) true]\n    [else (or\
    \ (cycpattern_check (rest a) b)\n               (cycpattern_check (rest b) a)))]))\n",
  "  (cond\n    [(empty? a) false]\n    [(empty? b) false]\n    [(equal? (first a)\
    \ (first b)) true]\n    [else (or (cycpattern_check (rest a) b)\n            \
    \  (cycpattern_check (rest b) a))]))\n", "  (cond ((null? a) true)\n        ((null?\
    \ b) true)\n        ((string-match a b) true)\n        (else false)))\n", "  (cond\n\
    \    [(empty? a) false]\n    [(empty? b) true]\n    [(equal? (first a) (first\
    \ b)) (cycpattern_check (rest a) (rest b))]\n    [else (or (equal? (first a) (first\
    \ b)) (cycpattern_check (rest a) (rest b)) (cycpattern_check (rest b) (rest a)))]))\n",
  "  (or (string=? a b)\n      (or (string=? (string-reverse a) b)\n          (string-contains-substring\
    \ a b))))\n", "  (or (string=? a b)\n      (or (string=? (string-ref a 0) (string-ref\
    \ b 0))\n          (string-contains-rotations b a))))\n", "  (cond [(empty? a)\
    \ false]\n        [(empty? b) false]\n        [(equal? (first a) (first b)) (equal?\
    \ (second a) (second b))]\n        [else (or (equal? (first a) (first b)) (cycpattern_check\
    \ (rest a) (rest b)))]))\n", "  (cond\n    [(empty? a) false]\n    [(empty? b)\
    \ false]\n    [(equal? (first a) (first b)) true]\n    [else (or (cycpattern_check\
    \ (rest a) b)\n              (cycpattern_check (rest b) a)))]))\n", "  (cond\n\
    \    [(empty? a) false]\n    [(empty? b) false]\n    [(equal? (first a) (first\
    \ b)) true]\n    [else (or (cycpattern_check (rest a) b)\n              (cycpattern_check\
    \ (rest b) a)))]))\n", "  (cond ((null? a) true)\n        ((null? b) true)\n \
    \       ((string-match a b) true)\n        ((string-match a (cycpattern_check\
    \ (cdr a) b)) true)\n        (else false)))\n", "  (cond\n    [(empty? a) (empty?\
    \ b) true]\n    [(empty? b) (empty? a) false]\n    [(equal? (first a) (first b))\
    \ (cycpattern_check (rest a) (rest b))]\n    [else (or (equal? (first a) (first\
    \ b)) (cycpattern_check (rest a) (rest b)) (cycpattern_check (rest b) (rest a)))]))\n",
  "  (or (string=? a b)\n      (or (string=? (string-append a b) a)\n          (string=?\
    \ (string-append a b) (string-append b a)))))\n", "  (cond ((null? a) #f)\n  \
    \      ((null? b) #f)\n        ((string-match (string-ref a 0) (string-ref b 0))\
    \ #t)\n        (else (or (cycpattern_check (string-ref a 0) (string-ref b 0))\
    \ (cycpattern_check (string-ref a 1) (string-ref b 1))))))\n", "  (cond [(empty?\
    \ a) #t]\n        [(empty? b) #f]\n        [(equal? (substring a 0 1) (substring\
    \ b 0 1)) (cycpattern_check (substring a 1 ) (substring b 1 ))]\n        [else\
    \ (cycpattern_check (substring a 1 ) (substring b 1 ))]\n))\n", "  (cond\n   \
    \ [(empty? a) false]\n    [(empty? b) false]\n    [(equal? (first a) (first b))\
    \ true]\n    [else (or (cycpattern_check (rest a) b)\n               (cycpattern_check\
    \ (rest b) a)))]))\n", "  (cond\n    [(empty? a) false]\n    [(empty? b) false]\n\
    \    [(equal? (first a) (first b)) true]\n    [else (or (cycpattern_check (rest\
    \ a) b)\n               (cycpattern_check (rest b) a)))]))\n", "  (cond [(empty?\
    \ b) #t]\n        [(equal? (first b) (first a)) #t]\n        [(equal? (first b)\
    \ (substring (first a) (length (first b))))\n         (or (cycpattern_check (rest\
    \ b) (rest a)) (cycpattern_check (rest a) (rest b)))]\n        [else #f]))\n",
  "  (or (string=? a b)\n      (or (string=? (string-reverse a) b)\n          (string=?\
    \ (string-reverse b) a))))\n", "  (cond ((or (string=? a b) (string=? b a)) #t)\n\
    \        ((string=? a b) #f)\n        ((string=? (string-ref a 0) (string-ref\
    \ b 0)) #t)\n        ((string=? (string-ref a 0) (string-ref b 1)) #t)\n     \
    \   ((string=? (string-ref a 1) (string-ref b 0)) #t)\n        ((string=? (string-ref\
    \ a 1) (string-ref b 1)) #t)\n        ((string=? (string-ref a 2) (string-ref\
    \ b 0)) #t)\n        ((string=? (string-ref a 2) (string-ref b 1)) #t)\n     \
    \   ((string=? (string-ref a 3) (string-ref b 0)) #t)\n        ((string=? (string-ref\
    \ a 3) (string-ref b 1)) #t)\n        ((string=? (string-ref a 4) (string-ref\
    \ b 0)) #t)\n        ((string=? (string-ref a 4) (string-ref b 1)) #t)\n     \
    \   ((string=? (string-ref a 5) (string-ref b 0)) #t)\n        ((string=? (string-ref\
    \ a 5) (string-ref b 1)) #t)\n        ((string=? (string-ref a 6) (string-ref\
    \ b 0)) #t)\n        ((string=? (string-ref a 6) (string-ref b 1)) #t)\n     \
    \   ((string=? (string-ref a 7) (string-ref b 0)) #t)\n        ((string=? (string-ref\
    \ a 7) (string-ref b 1)) #t)\n        ((string=? (string-ref a 8) (string-ref\
    \ b 0)) #t)\n        ((string=? (string-ref a 8) (string-ref b 1)) #t)\n     \
    \   ((string=? (string-ref a 9) (string-ref b 0)) #t)\n        ((string=? (string-ref\
    \ a 9) (string-ref b 1)) #t)\n        ((string=? (string-ref a 10) (string-ref\
    \ b 0)) #t)\n        ((string=? (string-ref a 10) (string-ref b 1)) #t)\n    \
    \    ((string=? (string-ref a 11) (string-ref b 0)) #t)\n        ((string=? (string-ref\
    \ a 11) (string-ref b 1)) #t)\n        ((string=? (string-ref a 12) (string-ref\
    \ b 0)) #t)\n        ((string=? (string-ref a 12) (string-ref b 1)) #t)\n    \
    \    ((string=? (string-ref a 13) (string-ref b 0)) #t)\n        ((string=? (string-ref\
    \ a 13) (string-ref b 1)) #", "  (cond ((null? a) false)\n        ((null? b) false)\n\
    \        ((string-match? a b) true)\n        ((string-match? (string-reverse a)\
    \ (string-reverse b)) true)\n        ((string-match? (string-reverse a) (string-reverse\
    \ (string-reverse b))) true)\n        ((string-match? (string-reverse (string-reverse\
    \ a)) (string-reverse b)) true)\n        ((string-match? (string-reverse (string-reverse\
    \ a)) (string-reverse (string-reverse (string-reverse b)))) true)\n        (else\
    \ false)))\n", "  (cond\n    [(empty? a) false]\n    [(empty? b) false]\n    [(equal?\
    \ (first a) (first b)) true]\n    [else (or (cycpattern_check (rest a) b)\n  \
    \            (cycpattern_check (rest b) a)))]))\n", "  (cond\n    [(empty? a)\
    \ false]\n    [(empty? b) false]\n    [(equal? (first a) (first b)) true]\n  \
    \  [else (or (cycpattern_check (rest a) b)\n              (cycpattern_check (rest\
    \ b) a)))]))\n", "  (or (string=? a b)\n      (or (string=? (string-append a b)\
    \ a)\n          (string=? (string-append a b) (string-append b a))))) ;; #lang\
    \ racket\n", "  (cond\n    [(empty? a) false]\n    [(empty? b) false]\n    [(equal?\
    \ (first a) (first b)) true]\n    [else (or (cycpattern_check (rest a) b)\n  \
    \            (cycpattern_check (rest b) a)))]))\n", "  (cond [(empty? a) #f]\n\
    \        [(empty? b) #t]\n        [(equal? (first a) (first b)) #t]\n        [(equal?\
    \ (first a) (first b)) #t]\n        [else (or (equal? (first a) (first b)) (cycpattern_check\
    \ (rest a) (rest b)))]))\n", "  (or (string=? a b)\n      (or (string=? (string-rotate\
    \ b 1) a)\n          (string=? (string-rotate b 2) a)\n          (string=? (string-rotate\
    \ b 3) a)\n          (string=? (string-rotate b 4) a)\n          (string=? (string-rotate\
    \ b 5) a)\n          (string=? (string-rotate b 6) a)\n          (string=? (string-rotate\
    \ b 7) a)\n          (string=? (string-rotate b 8) a)\n          (string=? (string-rotate\
    \ b 9) a)\n          (string=? (string-rotate b 10) a)\n          (string=? (string-rotate\
    \ b 11) a)\n          (string=? (string-rotate b 12) a)\n          (string=? (string-rotate\
    \ b 13) a)\n          (string=? (string-rotate b 14) a)\n          (string=? (string-rotate\
    \ b 15) a)\n          (string=? (string-rotate b 16) a)\n          (string=? (string-rotate\
    \ b 17) a)\n          (string=? (string-rotate b 18) a)\n          (string=? (string-rotate\
    \ b 19) a)\n          (string=? (string-rotate b 20) a)\n          (string=? (string-rotate\
    \ b 21) a)\n          (string=? (string-rotate b 22) a)\n          (string=? (string-rotate\
    \ b 23) a)\n          (string=? (string-rotate b 24) a)\n          (string=? (string-rotate\
    \ b 25) a)\n          (string=? (string-rotate b 26) a)\n          (string=? (string-rotate\
    \ b 27) a)\n          (string=? (string-rotate b 28) a)\n          (string=? (string-rotate\
    \ b 29) a)\n          (string=? (string-rotate b 30) a)\n          (string=? (string-rotate\
    \ b 31) a)\n          (string=? (string-rotate b 32) a)\n          (string=? (string-rotate\
    \ b 33) a)\n          (string=? (string-rotate b 34) a)\n          (string=? (string-rotate\
    \ b 35) a)\n          (string=? (string-rotate b 36) a)\n          (string=? (string-rotate\
    \ b 37) a)\n          (string=? (string-rotate b 38) a)\n          (string=? (string-rotate\
    \ b 39) a)\n          (string=? (string-rotate b 40) a)\n          (string=? (string-rotate\
    \ b 41) a)\n          (string=? (string-rotate b 42) a)\n          (string=? (string-rotate\
    \ b 43) a)\n          (string=? (string-rotate b 44) a)\n          (string=? (string-rotate\
    \ b 45) a)\n          (string=? (string-rotate b 46) a)\n          (string=? (string-rotate ",
  "  (cond ((null? a) #f)\n        ((null? b) #f)\n        ((string-match (substring\
    \ a 0 1) b) #t)\n        ((string-match (substring a 0 2) b) #t)\n        ((string-match\
    \ (substring a 0 3) b) #t)\n        ((string-match (substring a 0 4) b) #t)\n\
    \        ((string-match (substring a 0 5) b) #t)\n        ((string-match (substring\
    \ a 0 6) b) #t)\n        ((string-match (substring a 0 7) b) #t)\n        ((string-match\
    \ (substring a 0 8) b) #t)\n        ((string-match (substring a 0 9) b) #t)\n\
    \        ((string-match (substring a 0 10) b) #t)\n        ((string-match (substring\
    \ a 0 11) b) #t)\n        ((string-match (substring a 0 12) b) #t)\n        ((string-match\
    \ (substring a 0 13) b) #t)\n        ((string-match (substring a 0 14) b) #t)\n\
    \        ((string-match (substring a 0 15) b) #t)\n        ((string-match (substring\
    \ a 0 16) b) #t)\n        ((string-match (substring a 0 17) b) #t)\n        ((string-match\
    \ (substring a 0 18) b) #t)\n        ((string-match (substring a 0 19) b) #t)\n\
    \        ((string-match (substring a 0 20) b) #t)\n        ((string-match (substring\
    \ a 0 21) b) #t)\n        ((string-match (substring a 0 22) b) #t)\n        ((string-match\
    \ (substring a 0 23) b) #t)\n        ((string-match (substring a 0 24) b) #t)\n\
    \        ((string-match (substring a 0 25) b) #t)\n        ((string-match (substring\
    \ a 0 26) b) #t)\n        ((string-match (substring a 0 27) b) #t)\n        ((string-match\
    \ (substring a 0 28) b) #t)\n        ((string-match (substring a 0 29) b) #t)\n\
    \        ((string-match (substring a 0 30) b) #t)\n        ((string-match (substring\
    \ a 0 31) b) #t)\n        ((string-match (substring a 0 32) b) #t)\n        ((string-match\
    \ (substring a 0 33) b) #t)\n        ((string-match (substring a ", "  (cond\n\
    \    [(empty? a) false]\n    [(empty? b) false]\n    [(equal? (first a) (first\
    \ b)) true]\n    [else (or (cycpattern_check (rest a) b)\n               (cycpattern_check\
    \ (rest b) a)))]))\n", "  (or (string=? a b)\n      (or (string=? (string-reverse\
    \ a) b)\n          (string=? (string-reverse b) a))))\n", "  (or (string=? a b)\n\
    \      (or (string=? (string-reverse a) b)\n          (string-contains? a b))))\n",
  "  (cond [(empty? b) #f]\n        [(equal? (first b) (substring a (length b) 1))]\n\
    \        [else (or (cycpattern_check (substring a 0 1) b)\n                  (cycpattern_check\
    \ (substring a 1 length) b))]))\n", "  (cond\n    [(empty? a) false]\n    [(empty?\
    \ b) false]\n    [(equal? (first a) (first b)) true]\n    [else (or (cycpattern_check\
    \ (rest a) b)\n              (cycpattern_check (rest b) a))]))\n", "  (cond\n\
    \    [(empty? a) false]\n    [(empty? b) false]\n    [(equal? (first a) (first\
    \ b)) true]\n    [else (or (cycpattern_check (rest a) b)\n              (cycpattern_check\
    \ (rest b) a)))]))\n", "  (or (string=? a b)\n      (or (string=? (string-ref\
    \ a 0) (string-ref b 0))\n          (string=? (string-ref a 1) (string-ref b 1))\n\
    \          (string=? (string-ref a 2) (string-ref b 2))\n          (string=? (string-ref\
    \ a 3) (string-ref b 3))\n          (string=? (string-ref a 4) (string-ref b 4))\n\
    \          (string=? (string-ref a 5) (string-ref b 5))\n          (string=? (string-ref\
    \ a 6) (string-ref b 6))\n          (string=? (string-ref a 7) (string-ref b 7))\n\
    \          (string=? (string-ref a 8) (string-ref b 8))\n          (string=? (string-ref\
    \ a 9) (string-ref b 9))\n          (string=? (string-ref a 10) (string-ref b\
    \ 10))\n          (string=? (string-ref a 11) (string-ref b 11))\n          (string=?\
    \ (string-ref a 12) (string-ref b 12))\n          (string=? (string-ref a 13)\
    \ (string-ref b 13))\n          (string=? (string-ref a 14) (string-ref b 14))\n\
    \          (string=? (string-ref a 15) (string-ref b 15))\n          (string=?\
    \ (string-ref a 16) (string-ref b 16))\n          (string=? (string-ref a 17)\
    \ (string-ref b 17))\n          (string=? (string-ref a 18) (string-ref b 18))\n\
    \          (string=? (string-ref a 19) (string-ref b 19))\n          (string=?\
    \ (string-ref a 20) (string-ref b 20))))\n", "  (cond\n    [(empty? a) false]\n\
    \    [(empty? b) false]\n    [(equal? (first a) (first b)) (cycpattern_check (rest\
    \ a) (rest b))]\n    [else (or (equal? (first a) (first b)) (cycpattern_check\
    \ (rest a) (rest b)) (cycpattern_check (rest b) (rest a)))]))\n", "  (cond ((or\
    \ (string=? a b) (string=? b a)) #t)\n        ((or (string=? a (cycpattern_rotate\
    \ a b)) (string=? (cycpattern_rotate b a) a)) #t)\n        ((or (string=? a (cycpattern_rotate\
    \ b a)) (string=? (cycpattern_rotate a b) a)) #t)\n        (else #f)))\n", " \
    \ (cond ((null? a) false)\n        ((null? b) false)\n        ((string=? (substring\
    \ a 0 1) (substring b 0 1)) true)\n        ((string=? (substring a 0 1) (substring\
    \ b 0 2)) true)\n        ((string=? (substring a 0 1) (substring b 0 3)) true)\n\
    \        ((string=? (substring a 0 1) (substring b 0 4)) true)\n        ((string=?\
    \ (substring a 0 1) (substring b 0 5)) true)\n        ((string=? (substring a\
    \ 0 1) (substring b 0 6)) true)\n        ((string=? (substring a 0 1) (substring\
    \ b 0 7)) true)\n        ((string=? (substring a 0 1) (substring b 0 8)) true)\n\
    \        ((string=? (substring a 0 1) (substring b 0 9)) true)\n        ((string=?\
    \ (substring a 0 1) (substring b 0 10)) true)\n        ((string=? (substring a\
    \ 0 1) (substring b 0 11)) true)\n        ((string=? (substring a 0 1) (substring\
    \ b 0 12)) true)\n        ((string=? (substring a 0 1) (substring b 0 13)) true)\n\
    \        ((string=? (substring a 0 1) (substring b 0 14)) true)\n        ((string=?\
    \ (substring a 0 1) (substring b 0 15)) true)\n        ((string=? (substring a\
    \ 0 1) (substring b 0 16)) true)\n        ((string=? (substring a 0 1) (substring\
    \ b 0 17)) true)\n        ((string=? (substring a 0 1) (substring b 0 18)) true)\n\
    \        ((string=? (substring a 0 1) (substring b 0 19)) true)\n        ((string=?\
    \ (substring a 0 1) (substring b 0 20)) true)\n        ((string=? (substring a\
    \ 0 1) (substring b 0 21)) true)\n        ((string=? (substring a 0 1) (substring\
    \ b 0 22)) true)\n        ((string=? (substring a 0 1) (substring b 0 23)) true)\n\
    \        ((string=? (substring a 0 1) (substring b 0 24)) true)\n        ((string=?\
    \ (substring a 0 1) (substring b 0 25)) true)\n        ((string=? (substring a\
    \ 0 1) (substring b 0 26)) true)", "  (cond\n    [(empty? a) false]\n    [(empty?\
    \ b) false]\n    [(equal? (first a) (first b)) true]\n    [else (or (cycpattern_check\
    \ (rest a) b)\n              (cycpattern_check (rest b) a))]))\n", "  (cond ((null?\
    \ a) false)\n        ((null? b) false)\n        ((string-match (substring a 0\
    \ 1) b) true)\n        ((string-match (substring a 0 2) b) true)\n        ((string-match\
    \ (substring a 0 3) b) true)\n        ((string-match (substring a 0 4) b) true)\n\
    \        ((string-match (substring a 0 5) b) true)\n        ((string-match (substring\
    \ a 0 6) b) true)\n        ((string-match (substring a 0 7) b) true)\n       \
    \ ((string-match (substring a 0 8) b) true)\n        ((string-match (substring\
    \ a 0 9) b) true)\n        ((string-match (substring a 0 10) b) true)\n      \
    \  ((string-match (substring a 0 11) b) true)\n        ((string-match (substring\
    \ a 0 12) b) true)\n        ((string-match (substring a 0 13) b) true)\n     \
    \   ((string-match (substring a 0 14) b) true)\n        ((string-match (substring\
    \ a 0 15) b) true)\n        ((string-match (substring a 0 16) b) true)\n     \
    \   ((string-match (substring a 0 17) b) true)\n        ((string-match (substring\
    \ a 0 18) b) true)\n        ((string-match (substring a 0 19) b) true)\n     \
    \   ((string-match (substring a 0 20) b) true)\n        ((string-match (substring\
    \ a 0 21) b) true)\n        ((string-match (substring a 0 22) b) true)\n     \
    \   ((string-match (substring a 0 23) b) true)\n        ((string-match (substring\
    \ a 0 24) b) true)\n        ((string-match (substring a 0 25) b) true)\n     \
    \   ((string-match (substring a 0 26) b) true)\n        ((string-match (substring\
    \ a 0 27) b) true)\n        ((string-match (substring a 0 28) b) true)\n     \
    \   ((string-match (substring a 0 29) b) true)\n        ((string-match (substring\
    \ a 0 30) b) true)\n        ((string-match (substring a 0 31) b) true)\n     \
    \   ((string-match (substring a 0 32) b) true)\n        ((string-match (substring\
    \ a 0 33) b) true)\n        ((string-match (sub", "  (cond\n    [(empty? b) true]\n\
    \    [(equal? (first b) (cycpattern_check (rest b) a)) true]\n    [else false]))\n",
  "  (cond\n    [(empty? a) false]\n    [(empty? b) false]\n    [(equal? (first a)\
    \ (first b)) true]\n    [else (or (cycpattern_check (rest a) b)\n            \
    \  (cycpattern_check (rest b) a))]))\n", "  (cond\n    [(empty? a) false]\n  \
    \  [(empty? b) false]\n    [(equal? (first a) (first b)) true]\n    [else (or\
    \ (cycpattern_check (rest a) b)\n              (cycpattern_check (rest b) a)))]))\n",
  "  (cond\n    [(empty? a) false]\n    [(empty? b) true]\n    [(equal? (first a)\
    \ (first b)) (cycpattern_check (rest a) (rest b))]\n    [else (or (equal? (first\
    \ a) (first b)) (cycpattern_check (rest a) (rest b)) (cycpattern_check (rest b)\
    \ (rest a)))]))\n", "  (or (string=? a b)\n      (or (string=? (string-reverse\
    \ a) b)\n          (string-contains-rotations b a))))\n", "  (cond\n    [(empty?\
    \ a) true]\n    [(empty? b) false]\n    [(equal? (first a) (first b)) (cycpattern_check\
    \ (rest a) (rest b))]\n    [else (cycpattern_check (rest a) (rest b))]\n  ))\n",
  "  (cond\n    [(empty? a) false]\n    [(empty? b) false]\n    [(equal? (first a)\
    \ (first b)) true]\n    [else (or (cycpattern_check (rest a) b)\n            \
    \  (cycpattern_check (rest b) a))]))\n", "  (or (string=? a b)\n      (or (string=?\
    \ (string-reverse a) b)\n          (string=? (string-reverse b) a))))\n", "  (cond\
    \ [(empty? a) #f]\n        [(empty? b) #t]\n        [(equal? (first a) (first\
    \ b)) #t]\n        [(equal? (first a) (first b)) (cycpattern_check (rest a) (rest\
    \ b))]\n        [else (or (equal? (first a) (first b)) (cycpattern_check (rest\
    \ a) (rest b)) (cycpattern_check (rest b) (rest a)))]))\n", "  (cond\n    [(empty?\
    \ a) false]\n    [(empty? b) false]\n    [(equal? (first a) (first b)) true]\n\
    \    [else (or (cycpattern_check (rest a) b)\n              (cycpattern_check\
    \ (rest b) a)))]))\n", "  (cond [(empty? a) false]\n        [(empty? b) false]\n\
    \        [(equal? (substring a 0 1) (substring b 0 1)) true]\n        [else (or\
    \ (cycpattern_check (substring a 0 1) (substring b 0 1)) (or (cycpattern_check\
    \ (substring a 0 2) (substring b 0 2)) (or (cycpattern_check (substring a 0 3)\
    \ (substring b 0 3)) (cycpattern_check (substring a 0 4) (substring b 0 4)))))]))\n",
  "  (cond\n    [(empty? a) false]\n    [(empty? b) false]\n    [(equal? (first a)\
    \ (first b)) true]\n    [else (or (cycpattern_check (rest a) b)\n            \
    \   (cycpattern_check (rest b) a)))]))\n", "  (cond\n    [(empty? a) false]\n\
    \    [(empty? b) false]\n    [(equal? (first a) (first b)) true]\n    [else (or\
    \ (cycpattern_check (rest a) b)\n               (cycpattern_check (rest b) a)))]))\n",
  "  (cond\n    [(empty? a) false]\n    [(empty? b) false]\n    [(equal? (first a)\
    \ (first b)) true]\n    [else (or (cycpattern_check (rest a) b)\n            \
    \  (cycpattern_check (rest b) a)))]))\n", "  (cond\n    [(empty? a) false]\n \
    \   [(empty? b) false]\n    [(equal? (first a) (first b)) true]\n    [else (or\
    \ (cycpattern_check (rest a) b)\n              (cycpattern_check (rest b) a)))]))\n",
  "  (cond [(empty? a) false]\n        [(empty? b) false]\n        [(equal? (first\
    \ a) (first b)) true]\n        [(equal? (first a) (first b)) (cycpattern_check\
    \ (rest a) (rest b))]\n        [else false]))\n", "  (or (string=? a b)\n    \
    \  (or (string=? (substring a 0 1) b)\n          (string=? (substring a 1 0) b))))\n",
  "  (cond [(empty? b) #t]\n        [(equal? (first b) (first a)) #t]\n        [(equal?\
    \ (first b) (substring (first a) (first b)))\n         (cycpattern_check (rest\
    \ a) (rest b))]\n        [else #f]))\n", "  (or (string=? a b)\n      (or (string=?\
    \ (string-ref a 0) (string-ref b 0))\n          (string-contains-rotations b a))))\n",
  "  (cond ((null? a) false)\n        ((null? b) false)\n        ((equal? (substring\
    \ a 0 1) (substring b 0 1)) true)\n        ((equal? (substring a 0 1) (substring\
    \ b 0 2)) true)\n        ((equal? (substring a 0 1) (substring b 0 3)) true)\n\
    \        ((equal? (substring a 0 1) (substring b 0 4)) true)\n        ((equal?\
    \ (substring a 0 1) (substring b 0 5)) true)\n        ((equal? (substring a 0\
    \ 1) (substring b 0 6)) true)\n        ((equal? (substring a 0 1) (substring b\
    \ 0 7)) true)\n        ((equal? (substring a 0 1) (substring b 0 8)) true)\n \
    \       ((equal? (substring a 0 1) (substring b 0 9)) true)\n        ((equal?\
    \ (substring a 0 1) (substring b 0 10)) true)\n        ((equal? (substring a 0\
    \ 1) (substring b 0 11)) true)\n        ((equal? (substring a 0 1) (substring\
    \ b 0 12)) true)\n        ((equal? (substring a 0 1) (substring b 0 13)) true)\n\
    \        ((equal? (substring a 0 1) (substring b 0 14)) true)\n        ((equal?\
    \ (substring a 0 1) (substring b 0 15)) true)\n        ((equal? (substring a 0\
    \ 1) (substring b 0 16)) true)\n        ((equal? (substring a 0 1) (substring\
    \ b 0 17)) true)\n        ((equal? (substring a 0 1) (substring b 0 18)) true)\n\
    \        ((equal? (substring a 0 1) (substring b 0 19)) true)\n        ((equal?\
    \ (substring a 0 1) (substring b 0 20)) true)\n        ((equal? (substring a 0\
    \ 1) (substring b 0 21)) true)\n        ((equal? (substring a 0 1) (substring\
    \ b 0 22)) true)\n        ((equal? (substring a 0 1) (substring b 0 23)) true)\n\
    \        ((equal? (substring a 0 1) (substring b 0 24)) true)\n        ((equal?\
    \ (substring a 0 1) (substring b 0 25)) true)\n        ((equal? (substring a 0\
    \ 1) (substring b 0 26)) true)\n        ((equal? (substring a 0 1) (substring\
    \ b 0 27)) true)\n        ((equal? (substring a ", "  (cond\n    [(empty? a) false]\n\
    \    [(empty? b) false]\n    [(equal? (first a) (first b)) true]\n    [else (or\
    \ (cycpattern_check (rest a) b)\n              (cycpattern_check (rest b) a)))]))\n",
  "  (cond [(empty? a) false]\n        [(empty? b) false]\n        [(equal? (first\
    \ a) (first b)) true]\n        [else (or (cycpattern_check (rest a) b)\n     \
    \              (cycpattern_check (rest b) a)))]))\n", "  (cond\n    [(empty? a)\
    \ false]\n    [(empty? b) false]\n    [(equal? (first a) (first b)) true]\n  \
    \  [else (or (cycpattern_check (rest a) b)\n              (cycpattern_check (rest\
    \ b) a)))]))\n", "  (cond\n    [(empty? b) false]\n    [(equal? (first b) (cycpattern_check\
    \ (rest a) (rest b)))\n     (equal? (first a) (cycpattern_check (rest a) (rest\
    \ b)))]\n    [else (equal? (first a) (cycpattern_check (rest a) (rest b)))]))\n",
  "  (cond\n    [(empty? a) true]\n    [(empty? b) false]\n    [(equal? (first a)\
    \ (first b)) (cycpattern_check (rest a) (rest b))]\n    [else false]))\n", " \
    \ (cond\n    [(empty? a) false]\n    [(empty? b) false]\n    [(equal? (first a)\
    \ (first b)) true]\n    [else (or (cycpattern_check (rest a) b)\n            \
    \  (cycpattern_check (rest b) a)))]))\n", "  (cond\n    [(empty? b) true]\n  \
    \  [(equal? (first b) (first a)) true]\n    [else (or (cycpattern_check (rest\
    \ a) (rest b)) (cycpattern_check (rest b) (rest a)))]))\n", "  (or (string=? a\
    \ b)\n      (or (string=? (string-rotate b 1) a)\n          (string=? (string-rotate\
    \ b 2) a)\n          (string=? (string-rotate b 3) a)\n          (string=? (string-rotate\
    \ b 4) a)\n          (string=? (string-rotate b 5) a)\n          (string=? (string-rotate\
    \ b 6) a)\n          (string=? (string-rotate b 7) a)\n          (string=? (string-rotate\
    \ b 8) a)\n          (string=? (string-rotate b 9) a)\n          (string=? (string-rotate\
    \ b 10) a)\n          (string=? (string-rotate b 11) a)\n          (string=? (string-rotate\
    \ b 12) a)\n          (string=? (string-rotate b 13) a)\n          (string=? (string-rotate\
    \ b 14) a)\n          (string=? (string-rotate b 15) a)\n          (string=? (string-rotate\
    \ b 16) a)\n          (string=? (string-rotate b 17) a)\n          (string=? (string-rotate\
    \ b 18) a)\n          (string=? (string-rotate b 19) a)\n          (string=? (string-rotate\
    \ b 20) a)\n          (string=? (string-rotate b 21) a)\n          (string=? (string-rotate\
    \ b 22) a)\n          (string=? (string-rotate b 23) a)\n          (string=? (string-rotate\
    \ b 24) a)\n          (string=? (string-rotate b 25) a)\n          (string=? (string-rotate\
    \ b 26) a)\n          (string=? (string-rotate b 27) a)\n          (string=? (string-rotate\
    \ b 28) a)\n          (string=? (string-rotate b 29) a)\n          (string=? (string-rotate\
    \ b 30) a)\n          (string=? (string-rotate b 31) a)\n          (string=? (string-rotate\
    \ b 32) a)\n          (string=? (string-rotate b 33) a)\n          (string=? (string-rotate\
    \ b 34) a)\n          (string=? (string-rotate b 35) a)\n          (string=? (string-rotate\
    \ b 36) a)\n          (string=? (string-rotate b 37) a)\n          (string=? (string-rotate\
    \ b 38) a)\n          (string=? (string-rotate b 39) a)\n          (string=? (string-rotate\
    \ b 40) a)\n          (string=? (string-rotate b 41) a)\n          (string=? (string-rotate\
    \ b 42) a)\n          (string=? (string-rotate b 43) a)\n          (string=? (string-rotate\
    \ b 44) a)\n          (string=? (string-rotate b 45) a)\n          (string=? (string-rotate\
    \ b 46) a)\n          (string=? (string-rotate ", "  (cond\n    [(empty? a) false]\n\
    \    [(empty? b) false]\n    [(equal? (first a) (first b)) true]\n    [else (or\
    \ (cycpattern_check (rest a) b)\n              (cycpattern_check (rest b) a)))]))\n",
  "  (cond [(empty? a) false]\n        [(empty? b) false]\n        [(equal? (first\
    \ a) (first b)) true]\n        [else (or (cycpattern_check (rest a) b)\n     \
    \              (cycpattern_check (rest b) a)))]))\n", "  (or (string=? a b)\n\
    \      (or (string=? (string-append a (butlast a)) b)\n          (string=? (string-append\
    \ (butlast a) b) a))))\n", "  (cond\n    [(empty? a) (empty? b) true]\n    [(empty?\
    \ b) false]\n    [(equal? (first a) (first b)) (cycpattern_check (rest a) (rest\
    \ b))]\n    [else false]))\n", "  (cond ((null? a) true)\n        ((null? b) true)\n\
    \        ((string-match (substring b 0 (string-length a)) a) true)\n        (else\
    \ false)))\n", "  (cond [(empty? a) false]\n        [(empty? b) false]\n     \
    \   [(equal? (first a) (first b)) true]\n        [else (or (cycpattern_check (rest\
    \ a) b)\n                  (cycpattern_check (rest b) a))]))\n", "  (cond\n  \
    \  [(empty? a) false]\n    [(empty? b) false]\n    [(equal? (first a) (first b))\
    \ true]\n    [else (or (equal? (first a) (first b)) (cycpattern_check (rest a)\
    \ (rest b)))]))\n", "  (cond [(empty? a) false]\n        [(empty? b) true]\n \
    \       [(equal? (first a) (first b)) (cycpattern_check (rest a) (rest b))]\n\
    \        [else (or (cycpattern_check (rest a) b)\n                  (cycpattern_check\
    \ (first a) (rest b)))]))\n", "  (cond [(empty? a) false]\n        [(empty? b)\
    \ false]\n        [(equal? (first a) (first b)) true]\n        [(equal? (first\
    \ a) (first b)) (cycpattern_check (rest a) (rest b))]\n        [else false]))\n",
  "  (cond\n    [(empty? a) false]\n    [(empty? b) false]\n    [(equal? (first a)\
    \ (first b)) true]\n    [else (or (cycpattern_check (rest a) b)\n            \
    \   (cycpattern_check (rest b) a)))]))\n", "  (cond\n    [(empty? a) false]\n\
    \    [(empty? b) false]\n    [(equal? (first a) (first b)) true]\n    [else (or\
    \ (cycpattern_check (rest a) b)\n              (cycpattern_check (rest b) a)))]))\n",
  "  (cond\n    [(empty? a) false]\n    [(empty? b) true]\n    [(equal? (first a)\
    \ (first b)) (equal? (second a) (second b))]\n    [else (or (equal? (first a)\
    \ (first b)) (cycpattern_check (rest a) b) (equal? (first b) (first a)) (cycpattern_check\
    \ (rest b) a)))]))\n", "  (cond ((null? a) true)\n        ((null? b) true)\n \
    \       ((string-equal? (substring a 0 1) (substring b 0 1)) true)\n        ((string-equal?\
    \ (substring a 0 1) (substring b 0 2)) true)\n        ((string-equal? (substring\
    \ a 0 1) (substring b 0 3)) true)\n        ((string-equal? (substring a 0 1) (substring\
    \ b 0 4)) true)\n        ((string-equal? (substring a 0 1) (substring b 0 5))\
    \ true)\n        ((string-equal? (substring a 0 1) (substring b 0 6)) true)\n\
    \        ((string-equal? (substring a 0 1) (substring b 0 7)) true)\n        ((string-equal?\
    \ (substring a 0 1) (substring b 0 8)) true)\n        ((string-equal? (substring\
    \ a 0 1) (substring b 0 9)) true)\n        ((string-equal? (substring a 0 1) (substring\
    \ b 0 10)) true)\n        ((string-equal? (substring a 0 1) (substring b 0 11))\
    \ true)\n        ((string-equal? (substring a 0 1) (substring b 0 12)) true)\n\
    \        ((string-equal? (substring a 0 1) (substring b 0 13)) true)\n       \
    \ ((string-equal? (substring a 0 1) (substring b 0 14)) true)\n        ((string-equal?\
    \ (substring a 0 1) (substring b 0 15)) true)\n        ((string-equal? (substring\
    \ a 0 1) (substring b 0 16)) true)\n        ((string-equal? (substring a 0 1)\
    \ (substring b 0 17)) true)\n        ((string-equal? (substring a 0 1) (substring\
    \ b 0 18)) true)\n        ((string-equal? (substring a 0 1) (substring b 0 19))\
    \ true)\n        ((string-equal? (substring a 0 1) (substring b 0 20)) true)\n\
    \        ((string-equal? (substring a 0 1) (substring b 0 21)) true)\n       \
    \ ((string-equal? (substring a 0 1) (substring b 0 22)) true)\n        ((string-equal?\
    \ (substring a 0 1) (substring b 0 23)) true)\n        ((string-equal? (substring\
    \ a 0 1) (substring b 0 24)) true)\n        ((string-equal? (substring a 0 1)\
    \ (substring b 0 25)) true)\n        ((string-equal? (substring a 0 1) (substring\
    \ b 0 26)) true)\n        ", "  (cond ((null? b) false)\n        ((equal? (string-ref\
    \ a 0) (string-ref b 0))\n         (string-ref b 0)\n         (string-ref b 0)\n\
    \         (string-ref b 0)\n         (string-ref b 0)\n         (string-ref b\
    \ 0)\n         (string-ref b 0)\n         (string-ref b 0)\n         (string-ref\
    \ b 0)\n         (string-ref b 0)\n         (string-ref b 0)\n         (string-ref\
    \ b 0)\n         (string-ref b 0)\n         (string-ref b 0)\n         (string-ref\
    \ b 0)\n         (string-ref b 0)\n         (string-ref b 0)\n         (string-ref\
    \ b 0)\n         (string-ref b 0)\n         (string-ref b 0)\n         (string-ref\
    \ b 0)\n         (string-ref b 0)\n         (string-ref b 0)\n         (string-ref\
    \ b 0)\n         (string-ref b 0)\n         (string-ref b 0)\n         (string-ref\
    \ b 0)\n         (string-ref b 0)\n         (string-ref b 0)\n         (string-ref\
    \ b 0)\n         (string-ref b 0)\n         (string-ref b 0)\n         (string-ref\
    \ b 0)\n         (string-ref b 0)\n         (string-ref b 0)\n         (string-ref\
    \ b 0)\n         (string-ref b 0)\n         (string-ref b 0)\n         (string-ref\
    \ b 0)\n         (string-ref b 0)\n         (string-ref b 0)\n         (string-ref\
    \ b 0)\n         (string-ref b 0)\n         (string-ref b 0)\n         (string-ref\
    \ b 0)\n         (string-ref b 0)\n         (string-ref b 0)\n         (string-ref\
    \ b 0)\n         (string-ref b 0)\n         (string-ref b 0)\n         (string-ref\
    \ b 0)\n         (string-ref b 0)\n         (string-ref b 0)\n         (string-ref\
    \ b 0)\n         (string-ref b 0)\n         (string-ref b 0)\n         (string-ref\
    \ b 0)\n         (string-ref b 0)\n         (string-ref b 0)\n         (string-ref\
    \ b 0)\n         (string-ref b 0)\n         (string-ref b 0)\n         (string-ref\
    \ b 0)\n         (string-ref b 0)\n         (string-ref b 0)\n         (string-ref\
    \ b 0)\n         (string-ref b 0)\n         (string-ref b 0)\n         (string-ref\
    \ b 0)\n         (string-ref b 0)\n         (string-ref b 0)\n         (string-ref\
    \ b 0)\n         (string-ref b 0)\n         (string-ref b 0)\n         (string-ref\
    \ b 0)\n         (string-ref b 0)\n         (string-ref b 0)\n         (string-ref\
    \ b 0)\n         (string-ref b 0)\n         (string-ref b 0)\n         (string-ref\
    \ b 0)\n         (string-ref b 0)\n         (", "  (cond [(empty? a) false]\n\
    \        [(empty? b) false]\n        [(equal? (first a) (first b)) true]\n   \
    \     [else (or (cycpattern_check (rest a) b)\n                  (cycpattern_check\
    \ (rest b) a))]))\n", "  (or (string=? a b)\n      (or (string=? (string-append\
    \ a b) a)\n          (string=? (string-append a b) (string-append b a)))))\n",
  "  (cond\n    [(empty? a) false]\n    [(empty? b) false]\n    [(equal? (first a)\
    \ (first b)) true]\n    [else (or (cycpattern_check (rest a) b)\n            \
    \  (cycpattern_check (rest b) a)))]))\n", "  (cond\n    [(empty? a) false]\n \
    \   [(empty? b) false]\n    [(equal? (first a) (first b)) true]\n    [else (or\
    \ (cycpattern_check (rest a) b)\n              (cycpattern_check (rest b) a)))]))\n",
  "  (cond [(empty? a) #f]\n        [(empty? b) #t]\n        [(equal? (first a) (first\
    \ b)) #t]\n        [(equal? (first b) (first a)) #t]\n        [(equal? (first\
    \ a) (first b)) (cycpattern_check (rest a) (rest b))]\n        [else (cycpattern_check\
    \ (rest a) (rest b))]\n))\n", "  (cond [(empty? a) #t]\n        [(empty? b) #f]\n\
    \        [(equal? (first a) (first b)) #t]\n        [(equal? (first b) (first\
    \ a)) #t]\n        [(equal? (first a) (first b)) (cycpattern_check (rest a) (rest\
    \ b))]\n        [(equal? (first b) (first a)) (cycpattern_check (rest b) (rest\
    \ a))]\n        [else (cycpattern_check (rest a) (rest b))]\n        ))\n", " \
    \ (cond\n    [(empty? a) false]\n    [(empty? b) false]\n    [(equal? (first a)\
    \ (first b)) true]\n    [else (or (cycpattern_check (rest a) b)\n            \
    \  (cycpattern_check (rest b) a)))]))\n", "  (cond [(empty? a) false]\n      \
    \  [(empty? b) false]\n        [(equal? (first a) (first b)) true]\n        [else\
    \ (or (cycpattern_check (rest a) b)\n                  (cycpattern_check (rest\
    \ b) a)))]))\n", "  (or (string=? a b)\n      (or (string=? (string-ref a 0) (string-ref\
    \ b 0))\n          (string-contains-rotations b a))))\n", "  (cond ((null? a)\
    \ true)\n        ((null? b) true)\n        ((equal? (substring a 0 1) (substring\
    \ b 0 1)) true)\n        ((equal? (substring a 0 1) (substring b 0 2)) true)\n\
    \        ((equal? (substring a 0 1) (substring b 0 3)) true)\n        ((equal?\
    \ (substring a 0 1) (substring b 0 4)) true)\n        ((equal? (substring a 0\
    \ 1) (substring b 0 5)) true)\n        ((equal? (substring a 0 1) (substring b\
    \ 0 6)) true)\n        ((equal? (substring a 0 1) (substring b 0 7)) true)\n \
    \       ((equal? (substring a 0 1) (substring b 0 8)) true)\n        ((equal?\
    \ (substring a 0 1) (substring b 0 9)) true)\n        ((equal? (substring a 0\
    \ 1) (substring b 0 10)) true)\n        ((equal? (substring a 0 1) (substring\
    \ b 0 11)) true)\n        ((equal? (substring a 0 1) (substring b 0 12)) true)\n\
    \        ((equal? (substring a 0 1) (substring b 0 13)) true)\n        ((equal?\
    \ (substring a 0 1) (substring b 0 14)) true)\n        ((equal? (substring a 0\
    \ 1) (substring b 0 15)) true)\n        ((equal? (substring a 0 1) (substring\
    \ b 0 16)) true)\n        ((equal? (substring a 0 1) (substring b 0 17)) true)\n\
    \        ((equal? (substring a 0 1) (substring b 0 18)) true)\n        ((equal?\
    \ (substring a 0 1) (substring b 0 19)) true)\n        ((equal? (substring a 0\
    \ 1) (substring b 0 20)) true)\n        ((equal? (substring a 0 1) (substring\
    \ b 0 21)) true)\n        ((equal? (substring a 0 1) (substring b 0 22)) true)\n\
    \        ((equal? (substring a 0 1) (substring b 0 23)) true)\n        ((equal?\
    \ (substring a 0 1) (substring b 0 24)) true)\n        ((equal? (substring a 0\
    \ 1) (substring b 0 25)) true)\n        ((equal? (substring a 0 1) (substring\
    \ b 0 26)) true)\n        ((equal? (substring a 0 1) (substring b 0 27)) true)\n\
    \        ((equal? (substring a 0 1) ", "  (or (string=? a b)\n      (or (string=?\
    \ (string-reverse a) b)\n          (string-contains-substring a b))))\n", "  (cond\
    \ ((null? a) false)\n        ((null? b) false)\n        ((string=? (string-ref\
    \ a 0) (string-ref b 0)) true)\n        ((string=? (string-ref a 0) (string-ref\
    \ b 1)) false)\n        ((string=? (string-ref a 1) (string-ref b 0)) false)\n\
    \        ((string=? (string-ref a 1) (string-ref b 1)) true)\n        ((string=?\
    \ (string-ref a 2) (string-ref b 0)) false)\n        ((string=? (string-ref a\
    \ 2) (string-ref b 1)) true)\n        ((string=? (string-ref a 3) (string-ref\
    \ b 0)) false)\n        ((string=? (string-ref a 3) (string-ref b 1)) true)\n\
    \        ((string=? (string-ref a 4) (string-ref b 0)) false)\n        ((string=?\
    \ (string-ref a 4) (string-ref b 1)) true)\n        ((string=? (string-ref a 5)\
    \ (string-ref b 0)) false)\n        ((string=? (string-ref a 5) (string-ref b\
    \ 1)) true)\n        ((string=? (string-ref a 6) (string-ref b 0)) false)\n  \
    \      ((string=? (string-ref a 6) (string-ref b 1)) true)\n        ((string=?\
    \ (string-ref a 7) (string-ref b 0)) false)\n        ((string=? (string-ref a\
    \ 7) (string-ref b 1)) true)\n        ((string=? (string-ref a 8) (string-ref\
    \ b 0)) false)\n        ((string=? (string-ref a 8) (string-ref b 1)) true)\n\
    \        ((string=? (string-ref a 9) (string-ref b 0)) false)\n        ((string=?\
    \ (string-ref a 9) (string-ref b 1)) true)\n        ((string=? (string-ref a 10)\
    \ (string-ref b 0)) false)\n        ((string=? (string-ref a 10) (string-ref b\
    \ 1)) true)\n        ((string=? (string-ref a 11) (string-ref b 0)) false)\n \
    \       ((string=? (string-ref a 11) (string-ref b 1)) true)\n        ((string=?\
    \ (string-ref a 12) (string-ref b 0)) false)\n        ((string=? (string-ref a\
    \ 12) (string-ref b 1)) true)\n        ((string=? (string-ref a 13) (string-ref\
    \ b 0)) false)\n        ((string=? (string-ref a 13) (string-ref b 1)) true)\n\
    \        ((string=? (string-ref a 14) (string-ref b 0)) false)\n        ((string=",
  "  (or (string=? a b)\n      (or (string=? (string-append a b) a)\n          (string=?\
    \ (string-append a b) (string-append b a))))) ;; #lang racket\n", "  (or (string=?\
    \ a b)\n      (or (string=? (string-reverse a) b)\n          (string-match (string-reverse\
    \ a) b))))\n", "  (cond\n    [(empty? a) false]\n    [(empty? b) false]\n    [(equal?\
    \ (first a) (first b)) true]\n    [else (or (cycpattern_check (rest a) b)\n  \
    \            (cycpattern_check (rest b) a))]))\n", "  (cond\n    [(empty? a) false]\n\
    \    [(empty? b) false]\n    [(equal? (first a) (first b)) true]\n    [else (or\
    \ (cycpattern_check (rest a) b)\n              (cycpattern_check (rest b) a)))]))\n",
  "  (cond\n    [(empty? a) false]\n    [(empty? b) false]\n    [(equal? (first a)\
    \ (first b)) true]\n    [else (or (cycpattern_check (rest a) b)\n            \
    \  (cycpattern_check (rest b) a)))]))\n", "  (cond ((null? a) false)\n       \
    \ ((null? b) false)\n        ((string-match (string-ref a 0) (string-ref b 0))\n\
    \         (string-match (string-ref a 0) (string-ref b 0))\n         (string-match\
    \ (string-ref a 0) (string-ref b 0))\n         (string-match (string-ref a 0)\
    \ (string-ref b 0))\n         (string-match (string-ref a 0) (string-ref b 0))\n\
    \         (string-match (string-ref a 0) (string-ref b 0))\n         (string-match\
    \ (string-ref a 0) (string-ref b 0))\n         (string-match (string-ref a 0)\
    \ (string-ref b 0))\n         (string-match (string-ref a 0) (string-ref b 0))\n\
    \         (string-match (string-ref a 0) (string-ref b 0))\n         (string-match\
    \ (string-ref a 0) (string-ref b 0))\n         (string-match (string-ref a 0)\
    \ (string-ref b 0))\n         (string-match (string-ref a 0) (string-ref b 0))\n\
    \         (string-match (string-ref a 0) (string-ref b 0))\n         (string-match\
    \ (string-ref a 0) (string-ref b 0))\n         (string-match (string-ref a 0)\
    \ (string-ref b 0))\n         (string-match (string-ref a 0) (string-ref b 0))\n\
    \         (string-match (string-ref a 0) (string-ref b 0))\n         (string-match\
    \ (string-ref a 0) (string-ref b 0))\n         (string-match (string-ref a 0)\
    \ (string-ref b 0))\n         (string-match (string-ref a 0) (string-ref b 0))\n\
    \         (string-match (string-ref a 0) (string-ref b 0))\n         (string-match\
    \ (string-ref a 0) (string-ref b 0))\n         (string-match (string-ref a 0)\
    \ (string-ref b 0))\n         (string-match (string-ref a 0) (string-ref b 0))\n\
    \         (string-match (string-ref a 0) (string-ref b 0))\n         (string-match\
    \ (string-ref a 0) (string-ref b 0))\n         (string-match (string-ref a 0)\
    \ (string-ref b 0))\n         (string-match (string-ref a 0) (string-ref b 0))\n\
    \         (string-match (string-ref a 0) (string-ref b 0))\n         (string-match\
    \ (string-ref a 0) (string-ref b 0))\n         (string-match (string-ref a 0)\
    \ (string-ref b 0))\n         (string-match (string-ref a 0) (string-ref b 0))\n\
    \         (string-match (string-ref a 0) (string-ref b 0))\n         (string-match\
    \ (string-ref a 0) (string-ref b 0))\n         ("]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
