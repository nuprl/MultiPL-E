language: racket
name: HumanEval_121_solution
results:
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb811w7di.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb811w7di.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb811w7di.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb811w7di.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb811w7di.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb811w7di.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb811w7di.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphrqieyqc.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphrqieyqc.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphrqieyqc.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphrqieyqc.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphrqieyqc.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphrqieyqc.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphrqieyqc.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoiy4y_3j.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoiy4y_3j.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoiy4y_3j.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoiy4y_3j.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoiy4y_3j.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoiy4y_3j.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoiy4y_3j.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (if (even? (cdr lst))\n             (solution (cdr lst))\n  \
    \           0))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n\
    \    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate\
    \ (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal?\
    \ (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32))\
    \ 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7fqimbg.rkt:21:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(8 7 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7fqimbg.rkt:22:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(3 3 3 3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7fqimbg.rkt:23:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 24 321)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7fqimbg.rkt:24:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(9)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7fqimbg.rkt:25:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(4 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7fqimbg.rkt:26:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 23 32)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7fqimbg.rkt:27:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 2 9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj2w3zk07.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj2w3zk07.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj2w3zk07.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj2w3zk07.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj2w3zk07.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj2w3zk07.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj2w3zk07.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (if (even? (cdr lst))\n             (solution (cdr lst))\n  \
    \           0))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n\
    \    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate\
    \ (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal?\
    \ (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32))\
    \ 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpscg43yda.rkt:21:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(8 7 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpscg43yda.rkt:22:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(3 3 3 3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpscg43yda.rkt:23:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 24 321)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpscg43yda.rkt:24:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(9)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpscg43yda.rkt:25:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(4 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpscg43yda.rkt:26:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 23 32)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpscg43yda.rkt:27:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 2 9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even?\
    \ (car lst)) (+ (car lst) (solution (cdr lst)))]\n    [else (solution (cdr lst))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzyr0u7yl.rkt:19:4

    actual:     8

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzyr0u7yl.rkt:20:4

    actual:     0

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzyr0u7yl.rkt:21:4

    actual:     54

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzyr0u7yl.rkt:22:4

    actual:     0

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzyr0u7yl.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzyr0u7yl.rkt:24:4

    actual:     62

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzyr0u7yl.rkt:25:4

    actual:     2

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even?\
    \ (first lst)) (+ (first lst) (solution (rest lst)))]\n    [else (solution (rest\
    \ lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal?\
    \ (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24\
    \ 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate\
    \ (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n   \
    \ (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzghp3vg8.rkt:19:4

    actual:     8

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzghp3vg8.rkt:20:4

    actual:     0

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzghp3vg8.rkt:21:4

    actual:     54

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzghp3vg8.rkt:22:4

    actual:     0

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzghp3vg8.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzghp3vg8.rkt:24:4

    actual:     62

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzghp3vg8.rkt:25:4

    actual:     2

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnxeo1xas.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnxeo1xas.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnxeo1xas.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnxeo1xas.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnxeo1xas.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnxeo1xas.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnxeo1xas.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoov7awbc.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoov7awbc.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoov7awbc.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoov7awbc.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoov7awbc.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoov7awbc.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoov7awbc.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1hn98cx_.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1hn98cx_.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1hn98cx_.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1hn98cx_.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1hn98cx_.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1hn98cx_.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1hn98cx_.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (if (= (car (cdr lst)) (car (cdr (cdr lst))))\n             (solution\
    \ (cdr lst))\n             (solution (cdr (cdr lst)))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal?\
    \ (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3))\
    \ 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal?\
    \ (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n \
    \   (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate\
    \ (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcu5hyp1j.rkt:21:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcu5hyp1j.rkt:22:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcu5hyp1j.rkt:23:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcu5hyp1j.rkt:24:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcu5hyp1j.rkt:25:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcu5hyp1j.rkt:26:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcu5hyp1j.rkt:27:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptct44z7c.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptct44z7c.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptct44z7c.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptct44z7c.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptct44z7c.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptct44z7c.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptct44z7c.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzqbvq7yw.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzqbvq7yw.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzqbvq7yw.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzqbvq7yw.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzqbvq7yw.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzqbvq7yw.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzqbvq7yw.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpd34fzwpo.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpd34fzwpo.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpd34fzwpo.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpd34fzwpo.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpd34fzwpo.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpd34fzwpo.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpd34fzwpo.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1tp_kx2t.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1tp_kx2t.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1tp_kx2t.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1tp_kx2t.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1tp_kx2t.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1tp_kx2t.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1tp_kx2t.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpk71y2gkp.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpk71y2gkp.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpk71y2gkp.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpk71y2gkp.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpk71y2gkp.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpk71y2gkp.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpk71y2gkp.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even?\
    \ (first lst)) (+ (first lst) (solution (rest lst)))]\n    [else (solution (rest\
    \ lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal?\
    \ (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24\
    \ 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate\
    \ (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n   \
    \ (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphgfqfky6.rkt:19:4

    actual:     8

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphgfqfky6.rkt:20:4

    actual:     0

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphgfqfky6.rkt:21:4

    actual:     54

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphgfqfky6.rkt:22:4

    actual:     0

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphgfqfky6.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphgfqfky6.rkt:24:4

    actual:     62

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphgfqfky6.rkt:25:4

    actual:     2

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkk5xispa.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkk5xispa.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkk5xispa.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkk5xispa.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkk5xispa.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkk5xispa.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkk5xispa.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa_xeup39.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa_xeup39.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa_xeup39.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa_xeup39.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa_xeup39.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa_xeup39.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa_xeup39.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even?\
    \ (first lst)) (+ (first lst) (solution (rest lst)))]\n    [else (solution (rest\
    \ lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal?\
    \ (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24\
    \ 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate\
    \ (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n   \
    \ (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp038whny5.rkt:19:4

    actual:     8

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp038whny5.rkt:20:4

    actual:     0

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp038whny5.rkt:21:4

    actual:     54

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp038whny5.rkt:22:4

    actual:     0

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp038whny5.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp038whny5.rkt:24:4

    actual:     62

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp038whny5.rkt:25:4

    actual:     2

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4xksaitn.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4xksaitn.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4xksaitn.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4xksaitn.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4xksaitn.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4xksaitn.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4xksaitn.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm_fxd4rm.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm_fxd4rm.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm_fxd4rm.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm_fxd4rm.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm_fxd4rm.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm_fxd4rm.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm_fxd4rm.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp763etdni.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp763etdni.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp763etdni.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp763etdni.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp763etdni.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp763etdni.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp763etdni.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (if (even? (cdr lst))\n             (solution (cdr lst))\n  \
    \           0))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n\
    \    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate\
    \ (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal?\
    \ (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32))\
    \ 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjao3gz7f.rkt:21:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(8 7 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjao3gz7f.rkt:22:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(3 3 3 3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjao3gz7f.rkt:23:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 24 321)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjao3gz7f.rkt:24:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(9)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjao3gz7f.rkt:25:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(4 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjao3gz7f.rkt:26:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 23 32)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjao3gz7f.rkt:27:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 2 9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqbqwi918.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqbqwi918.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqbqwi918.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqbqwi918.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqbqwi918.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqbqwi918.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqbqwi918.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq1_iwp53.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq1_iwp53.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq1_iwp53.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq1_iwp53.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq1_iwp53.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq1_iwp53.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq1_iwp53.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (if (even? (cdr lst))\n             (solution (cdr lst))\n  \
    \           0))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n\
    \    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate\
    \ (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal?\
    \ (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32))\
    \ 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2d88u2hw.rkt:21:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(8 7 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2d88u2hw.rkt:22:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(3 3 3 3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2d88u2hw.rkt:23:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 24 321)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2d88u2hw.rkt:24:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(9)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2d88u2hw.rkt:25:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(4 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2d88u2hw.rkt:26:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 23 32)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2d88u2hw.rkt:27:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 2 9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9g8b4_1i.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9g8b4_1i.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9g8b4_1i.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9g8b4_1i.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9g8b4_1i.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9g8b4_1i.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9g8b4_1i.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpptt5w9gg.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpptt5w9gg.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpptt5w9gg.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpptt5w9gg.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpptt5w9gg.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpptt5w9gg.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpptt5w9gg.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp37xv9syf.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp37xv9syf.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp37xv9syf.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp37xv9syf.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp37xv9syf.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp37xv9syf.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp37xv9syf.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (if (even? (cdr lst))\n             (solution (cdr lst))\n  \
    \           0))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n\
    \    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate\
    \ (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal?\
    \ (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32))\
    \ 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl3jxowgm.rkt:21:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(8 7 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl3jxowgm.rkt:22:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(3 3 3 3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl3jxowgm.rkt:23:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 24 321)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl3jxowgm.rkt:24:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(9)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl3jxowgm.rkt:25:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(4 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl3jxowgm.rkt:26:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 23 32)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl3jxowgm.rkt:27:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 2 9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (if (= (cadr lst) (car lst))\n             (solution (cdr lst))\n\
    \             (solution (cdr lst))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8s5389c2.rkt:21:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(1)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp8s5389c2.rkt:22:4\n\ncadr: contract violation\n  expected:\
    \ (cons/c any/c pair?)\n  given: '(3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8s5389c2.rkt:23:4\n\ncadr:\
    \ contract violation\n  expected: (cons/c any/c pair?)\n  given: '(321)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8s5389c2.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp8s5389c2.rkt:25:4\n\ncadr: contract violation\n  expected:\
    \ (cons/c any/c pair?)\n  given: '(8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8s5389c2.rkt:26:4\n\ncadr:\
    \ contract violation\n  expected: (cons/c any/c pair?)\n  given: '(32)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8s5389c2.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (if (even? (cdr lst))\n             (solution (cdr lst))\n  \
    \           0))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n\
    \    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate\
    \ (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal?\
    \ (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32))\
    \ 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxh6dqb3f.rkt:21:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(8 7 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxh6dqb3f.rkt:22:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(3 3 3 3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxh6dqb3f.rkt:23:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 24 321)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxh6dqb3f.rkt:24:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(9)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxh6dqb3f.rkt:25:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(4 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxh6dqb3f.rkt:26:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 23 32)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxh6dqb3f.rkt:27:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 2 9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfmi64_xl.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfmi64_xl.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfmi64_xl.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfmi64_xl.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfmi64_xl.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfmi64_xl.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfmi64_xl.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (if (even? (cdr lst))\n             (solution (cdr lst))\n  \
    \           0))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n\
    \    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate\
    \ (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal?\
    \ (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32))\
    \ 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkfq5ay7s.rkt:21:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(8 7 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkfq5ay7s.rkt:22:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(3 3 3 3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkfq5ay7s.rkt:23:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 24 321)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkfq5ay7s.rkt:24:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(9)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkfq5ay7s.rkt:25:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(4 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkfq5ay7s.rkt:26:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 23 32)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkfq5ay7s.rkt:27:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 2 9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfc5kwmpj.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfc5kwmpj.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfc5kwmpj.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfc5kwmpj.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfc5kwmpj.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfc5kwmpj.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfc5kwmpj.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even?\
    \ (first lst)) (+ (first lst) (solution (rest lst)))]\n    [else (solution (rest\
    \ lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal?\
    \ (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24\
    \ 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate\
    \ (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n   \
    \ (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpd88jxfm5.rkt:19:4

    actual:     8

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpd88jxfm5.rkt:20:4

    actual:     0

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpd88jxfm5.rkt:21:4

    actual:     54

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpd88jxfm5.rkt:22:4

    actual:     0

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpd88jxfm5.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpd88jxfm5.rkt:24:4

    actual:     62

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpd88jxfm5.rkt:25:4

    actual:     2

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfko8tbgc.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfko8tbgc.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfko8tbgc.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfko8tbgc.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfko8tbgc.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfko8tbgc.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfko8tbgc.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (if (even? (cdr lst))\n             (solution (cdr lst))\n  \
    \           0))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n\
    \    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate\
    \ (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal?\
    \ (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32))\
    \ 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqqbkve_m.rkt:21:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(8 7 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqqbkve_m.rkt:22:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(3 3 3 3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqqbkve_m.rkt:23:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 24 321)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqqbkve_m.rkt:24:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(9)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqqbkve_m.rkt:25:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(4 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqqbkve_m.rkt:26:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 23 32)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqqbkve_m.rkt:27:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 2 9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (if (even? (cdr lst))\n             (solution (cdr lst))\n  \
    \           0))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n\
    \    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate\
    \ (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal?\
    \ (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32))\
    \ 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxe5ff01t.rkt:21:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(8 7 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxe5ff01t.rkt:22:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(3 3 3 3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxe5ff01t.rkt:23:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 24 321)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxe5ff01t.rkt:24:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(9)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxe5ff01t.rkt:25:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(4 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxe5ff01t.rkt:26:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 23 32)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxe5ff01t.rkt:27:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 2 9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfaeve3ew.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfaeve3ew.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfaeve3ew.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfaeve3ew.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfaeve3ew.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfaeve3ew.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfaeve3ew.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (if (even? (cdr lst))\n             (solution (cdr lst))\n  \
    \           0))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n\
    \    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate\
    \ (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal?\
    \ (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32))\
    \ 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_8g8g2_g.rkt:21:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(8 7 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_8g8g2_g.rkt:22:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(3 3 3 3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_8g8g2_g.rkt:23:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 24 321)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_8g8g2_g.rkt:24:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(9)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_8g8g2_g.rkt:25:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(4 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_8g8g2_g.rkt:26:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 23 32)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_8g8g2_g.rkt:27:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 2 9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvb6w6unm.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvb6w6unm.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvb6w6unm.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvb6w6unm.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvb6w6unm.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvb6w6unm.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvb6w6unm.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5mknmhpm.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5mknmhpm.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5mknmhpm.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5mknmhpm.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5mknmhpm.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5mknmhpm.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5mknmhpm.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (if (= (car (cdr lst)) (car (cdr (cdr lst))))\n             (solution\
    \ (cdr (cdr lst)))\n             (solution (cdr lst))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal?\
    \ (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3))\
    \ 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal?\
    \ (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n \
    \   (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate\
    \ (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnj3jh_4x.rkt:21:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnj3jh_4x.rkt:22:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnj3jh_4x.rkt:23:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnj3jh_4x.rkt:24:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnj3jh_4x.rkt:25:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnj3jh_4x.rkt:26:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnj3jh_4x.rkt:27:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp3w5l42d.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp3w5l42d.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp3w5l42d.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp3w5l42d.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp3w5l42d.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp3w5l42d.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp3w5l42d.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even?\
    \ (car lst)) (+ (car lst) (solution (cdr lst)))]\n    [else (solution (cdr lst))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_u4iqtg1.rkt:19:4

    actual:     8

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_u4iqtg1.rkt:20:4

    actual:     0

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_u4iqtg1.rkt:21:4

    actual:     54

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_u4iqtg1.rkt:22:4

    actual:     0

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_u4iqtg1.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_u4iqtg1.rkt:24:4

    actual:     62

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_u4iqtg1.rkt:25:4

    actual:     2

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq269qw6s.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq269qw6s.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq269qw6s.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq269qw6s.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq269qw6s.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq269qw6s.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq269qw6s.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdyyi1p7t.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdyyi1p7t.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdyyi1p7t.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdyyi1p7t.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdyyi1p7t.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdyyi1p7t.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdyyi1p7t.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (if (even? (cdr lst))\n             (solution (cdr lst))\n  \
    \           0))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n\
    \    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate\
    \ (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal?\
    \ (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32))\
    \ 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf9y6a45i.rkt:21:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(8 7 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf9y6a45i.rkt:22:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(3 3 3 3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf9y6a45i.rkt:23:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 24 321)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf9y6a45i.rkt:24:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(9)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf9y6a45i.rkt:25:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(4 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf9y6a45i.rkt:26:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 23 32)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf9y6a45i.rkt:27:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 2 9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_h3ylagw.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_h3ylagw.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_h3ylagw.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_h3ylagw.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_h3ylagw.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_h3ylagw.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_h3ylagw.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuxc7j14f.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuxc7j14f.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuxc7j14f.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuxc7j14f.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuxc7j14f.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuxc7j14f.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuxc7j14f.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even?\
    \ (car lst)) (+ (car lst) (solution (cdr lst)))]\n    [else (solution (cdr lst))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphd0pll4c.rkt:19:4

    actual:     8

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphd0pll4c.rkt:20:4

    actual:     0

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphd0pll4c.rkt:21:4

    actual:     54

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphd0pll4c.rkt:22:4

    actual:     0

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphd0pll4c.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphd0pll4c.rkt:24:4

    actual:     62

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphd0pll4c.rkt:25:4

    actual:     2

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgeubbrvn.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgeubbrvn.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgeubbrvn.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgeubbrvn.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgeubbrvn.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgeubbrvn.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgeubbrvn.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (if (= (car (cdr lst)) (car (cdr (cdr lst))))\n             (solution\
    \ (cdr (cdr lst)))\n             (solution (cdr lst))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal?\
    \ (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3))\
    \ 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal?\
    \ (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n \
    \   (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate\
    \ (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1vbuyfs.rkt:21:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1vbuyfs.rkt:22:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1vbuyfs.rkt:23:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1vbuyfs.rkt:24:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1vbuyfs.rkt:25:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1vbuyfs.rkt:26:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1vbuyfs.rkt:27:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3q4ka7my.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3q4ka7my.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3q4ka7my.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3q4ka7my.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3q4ka7my.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3q4ka7my.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3q4ka7my.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe45qbbtf.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe45qbbtf.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe45qbbtf.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe45qbbtf.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe45qbbtf.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe45qbbtf.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe45qbbtf.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2l4gjy6f.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2l4gjy6f.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2l4gjy6f.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2l4gjy6f.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2l4gjy6f.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2l4gjy6f.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2l4gjy6f.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp241mgv9k.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp241mgv9k.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp241mgv9k.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp241mgv9k.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp241mgv9k.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp241mgv9k.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp241mgv9k.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4dj76j5g.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4dj76j5g.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4dj76j5g.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4dj76j5g.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4dj76j5g.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4dj76j5g.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4dj76j5g.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (if (even? (cdr lst))\n             (solution (cdr lst))\n  \
    \           0))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n\
    \    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate\
    \ (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal?\
    \ (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32))\
    \ 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjhyog41o.rkt:21:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(8 7 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjhyog41o.rkt:22:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(3 3 3 3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjhyog41o.rkt:23:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 24 321)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjhyog41o.rkt:24:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(9)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjhyog41o.rkt:25:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(4 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjhyog41o.rkt:26:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 23 32)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjhyog41o.rkt:27:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 2 9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpni_2juh3.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpni_2juh3.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpni_2juh3.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpni_2juh3.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpni_2juh3.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpni_2juh3.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpni_2juh3.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcyf23e6x.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcyf23e6x.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcyf23e6x.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcyf23e6x.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcyf23e6x.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcyf23e6x.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcyf23e6x.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (if (even? (cdr lst))\n             (solution (cdr lst))\n  \
    \           0))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n\
    \    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate\
    \ (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal?\
    \ (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32))\
    \ 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqanfzmq0.rkt:21:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(8 7 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqanfzmq0.rkt:22:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(3 3 3 3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqanfzmq0.rkt:23:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 24 321)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqanfzmq0.rkt:24:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(9)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqanfzmq0.rkt:25:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(4 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqanfzmq0.rkt:26:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 23 32)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqanfzmq0.rkt:27:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 2 9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0aunu_qy.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0aunu_qy.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0aunu_qy.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0aunu_qy.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0aunu_qy.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0aunu_qy.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0aunu_qy.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmtwsxtmn.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmtwsxtmn.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmtwsxtmn.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmtwsxtmn.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmtwsxtmn.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmtwsxtmn.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmtwsxtmn.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq345kqe_.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq345kqe_.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq345kqe_.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq345kqe_.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq345kqe_.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq345kqe_.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq345kqe_.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpaidt5739.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpaidt5739.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpaidt5739.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpaidt5739.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpaidt5739.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpaidt5739.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpaidt5739.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq33aqric.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq33aqric.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq33aqric.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq33aqric.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq33aqric.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq33aqric.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq33aqric.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzi42_hp9.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzi42_hp9.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzi42_hp9.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzi42_hp9.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzi42_hp9.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzi42_hp9.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzi42_hp9.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (if (even? (cdr lst))\n             (solution (cdr lst))\n  \
    \           0))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n\
    \    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate\
    \ (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal?\
    \ (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32))\
    \ 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppez6j3g2.rkt:21:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(8 7 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppez6j3g2.rkt:22:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(3 3 3 3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppez6j3g2.rkt:23:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 24 321)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppez6j3g2.rkt:24:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(9)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppez6j3g2.rkt:25:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(4 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppez6j3g2.rkt:26:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 23 32)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppez6j3g2.rkt:27:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 2 9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbbbf9iic.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbbbf9iic.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbbbf9iic.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbbbf9iic.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbbbf9iic.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbbbf9iic.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbbbf9iic.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvitg_ov3.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvitg_ov3.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvitg_ov3.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvitg_ov3.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvitg_ov3.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvitg_ov3.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvitg_ov3.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkycmttto.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkycmttto.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkycmttto.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkycmttto.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkycmttto.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkycmttto.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkycmttto.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwgko3c56.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwgko3c56.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwgko3c56.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwgko3c56.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwgko3c56.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwgko3c56.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwgko3c56.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (if (even? (cdr lst))\n             (solution (cdr lst))\n  \
    \           0))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n\
    \    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate\
    \ (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal?\
    \ (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32))\
    \ 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxddhmyzb.rkt:21:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(8 7 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxddhmyzb.rkt:22:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(3 3 3 3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxddhmyzb.rkt:23:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 24 321)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxddhmyzb.rkt:24:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(9)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxddhmyzb.rkt:25:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(4 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxddhmyzb.rkt:26:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 23 32)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxddhmyzb.rkt:27:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 2 9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz4v7bc8w.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz4v7bc8w.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz4v7bc8w.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz4v7bc8w.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz4v7bc8w.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz4v7bc8w.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz4v7bc8w.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even?\
    \ (first lst)) (+ (first lst) (second lst))]\n    [else (solution (rest lst))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpinpjvfzt.rkt:19:4

    actual:     15

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpinpjvfzt.rkt:20:4

    actual:     0

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpinpjvfzt.rkt:21:4

    actual:     43

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpinpjvfzt.rkt:22:4

    actual:     0

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpinpjvfzt.rkt:23:4

    actual:     6

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpinpjvfzt.rkt:24:4

    actual:     43

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpinpjvfzt.rkt:25:4

    actual:     11

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx1zl4g9o.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx1zl4g9o.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx1zl4g9o.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx1zl4g9o.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx1zl4g9o.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx1zl4g9o.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx1zl4g9o.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0zoctuuz.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0zoctuuz.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0zoctuuz.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0zoctuuz.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0zoctuuz.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0zoctuuz.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0zoctuuz.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5ds4xd1w.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5ds4xd1w.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5ds4xd1w.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5ds4xd1w.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5ds4xd1w.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5ds4xd1w.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5ds4xd1w.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5n8h6uk7.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5n8h6uk7.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5n8h6uk7.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5n8h6uk7.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5n8h6uk7.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5n8h6uk7.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5n8h6uk7.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (if (even? (cdr lst))\n             (solution (cdr lst))\n  \
    \           0))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n\
    \    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate\
    \ (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal?\
    \ (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32))\
    \ 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph2usa3gj.rkt:21:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(8 7 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph2usa3gj.rkt:22:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(3 3 3 3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph2usa3gj.rkt:23:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 24 321)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph2usa3gj.rkt:24:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(9)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph2usa3gj.rkt:25:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(4 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph2usa3gj.rkt:26:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 23 32)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph2usa3gj.rkt:27:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 2 9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even?\
    \ (first lst)) (+ (first lst) (solution (rest lst)))]\n    [else (solution (rest\
    \ lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal?\
    \ (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24\
    \ 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate\
    \ (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n   \
    \ (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3m1eahkx.rkt:19:4

    actual:     8

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3m1eahkx.rkt:20:4

    actual:     0

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3m1eahkx.rkt:21:4

    actual:     54

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3m1eahkx.rkt:22:4

    actual:     0

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3m1eahkx.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3m1eahkx.rkt:24:4

    actual:     62

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3m1eahkx.rkt:25:4

    actual:     2

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp78yepd5j.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp78yepd5j.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp78yepd5j.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp78yepd5j.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp78yepd5j.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp78yepd5j.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp78yepd5j.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2i6yt_s3.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2i6yt_s3.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2i6yt_s3.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2i6yt_s3.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2i6yt_s3.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2i6yt_s3.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2i6yt_s3.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp73uawlmm.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp73uawlmm.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp73uawlmm.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp73uawlmm.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp73uawlmm.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp73uawlmm.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp73uawlmm.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (if (even? (cdr lst))\n             (solution (cdr lst))\n  \
    \           0))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n\
    \    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate\
    \ (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal?\
    \ (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32))\
    \ 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo7zojm75.rkt:21:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(8 7 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo7zojm75.rkt:22:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(3 3 3 3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo7zojm75.rkt:23:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 24 321)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo7zojm75.rkt:24:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(9)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo7zojm75.rkt:25:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(4 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo7zojm75.rkt:26:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 23 32)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo7zojm75.rkt:27:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 2 9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even?\
    \ (first lst)) (+ (first lst) (solution (rest lst)))]\n    [else (solution (rest\
    \ lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal?\
    \ (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24\
    \ 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate\
    \ (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n   \
    \ (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz2ykzk26.rkt:19:4

    actual:     8

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz2ykzk26.rkt:20:4

    actual:     0

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz2ykzk26.rkt:21:4

    actual:     54

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz2ykzk26.rkt:22:4

    actual:     0

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz2ykzk26.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz2ykzk26.rkt:24:4

    actual:     62

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz2ykzk26.rkt:25:4

    actual:     2

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptlqvumgn.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptlqvumgn.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptlqvumgn.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptlqvumgn.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptlqvumgn.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptlqvumgn.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptlqvumgn.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even?\
    \ (car lst)) (+ (car lst) (solution (cdr lst)))]\n    [else (solution (cdr lst))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvq1oee1a.rkt:19:4

    actual:     8

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvq1oee1a.rkt:20:4

    actual:     0

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvq1oee1a.rkt:21:4

    actual:     54

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvq1oee1a.rkt:22:4

    actual:     0

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvq1oee1a.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvq1oee1a.rkt:24:4

    actual:     62

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvq1oee1a.rkt:25:4

    actual:     2

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even?\
    \ (first lst)) (+ (first lst) (solution (rest lst)))]\n    [else (solution (rest\
    \ lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal?\
    \ (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24\
    \ 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate\
    \ (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n   \
    \ (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkwws73w7.rkt:19:4

    actual:     8

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkwws73w7.rkt:20:4

    actual:     0

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkwws73w7.rkt:21:4

    actual:     54

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkwws73w7.rkt:22:4

    actual:     0

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkwws73w7.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkwws73w7.rkt:24:4

    actual:     62

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkwws73w7.rkt:25:4

    actual:     2

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5408gf6f.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5408gf6f.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5408gf6f.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5408gf6f.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5408gf6f.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5408gf6f.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5408gf6f.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9l5lzndm.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9l5lzndm.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9l5lzndm.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9l5lzndm.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9l5lzndm.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9l5lzndm.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9l5lzndm.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9i85_nhp.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9i85_nhp.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9i85_nhp.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9i85_nhp.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9i85_nhp.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9i85_nhp.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9i85_nhp.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_a015qe.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_a015qe.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_a015qe.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_a015qe.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_a015qe.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_a015qe.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_a015qe.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcxt6lemv.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcxt6lemv.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcxt6lemv.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcxt6lemv.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcxt6lemv.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcxt6lemv.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcxt6lemv.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (if (even? (cdr lst))\n             (solution (cdr lst))\n  \
    \           0))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n\
    \    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate\
    \ (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal?\
    \ (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32))\
    \ 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ea0xcid.rkt:21:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(8 7 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ea0xcid.rkt:22:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(3 3 3 3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ea0xcid.rkt:23:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 24 321)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ea0xcid.rkt:24:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(9)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ea0xcid.rkt:25:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(4 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ea0xcid.rkt:26:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 23 32)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ea0xcid.rkt:27:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 2 9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8cx2zykc.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8cx2zykc.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8cx2zykc.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8cx2zykc.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8cx2zykc.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8cx2zykc.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8cx2zykc.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1ta2yfl2.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1ta2yfl2.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1ta2yfl2.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1ta2yfl2.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1ta2yfl2.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1ta2yfl2.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1ta2yfl2.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (if (even? (cdr lst))\n             (solution (cdr lst))\n  \
    \           0))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n\
    \    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate\
    \ (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal?\
    \ (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32))\
    \ 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5in1e3m9.rkt:21:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(8 7 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5in1e3m9.rkt:22:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(3 3 3 3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5in1e3m9.rkt:23:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 24 321)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5in1e3m9.rkt:24:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(9)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5in1e3m9.rkt:25:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(4 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5in1e3m9.rkt:26:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 23 32)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5in1e3m9.rkt:27:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 2 9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl2kmlu7u.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl2kmlu7u.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl2kmlu7u.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl2kmlu7u.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl2kmlu7u.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl2kmlu7u.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl2kmlu7u.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkj5ibb69.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkj5ibb69.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkj5ibb69.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkj5ibb69.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkj5ibb69.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkj5ibb69.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkj5ibb69.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpagfta4s1.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpagfta4s1.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpagfta4s1.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpagfta4s1.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpagfta4s1.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpagfta4s1.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpagfta4s1.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (if (even? (cdr lst))\n             (solution (cdr lst))\n  \
    \           0))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n\
    \    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate\
    \ (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal?\
    \ (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32))\
    \ 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpikkvzcyn.rkt:21:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(8 7 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpikkvzcyn.rkt:22:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(3 3 3 3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpikkvzcyn.rkt:23:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 24 321)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpikkvzcyn.rkt:24:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(9)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpikkvzcyn.rkt:25:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(4 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpikkvzcyn.rkt:26:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 23 32)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpikkvzcyn.rkt:27:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 2 9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpur7z3xde.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpur7z3xde.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpur7z3xde.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpur7z3xde.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpur7z3xde.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpur7z3xde.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpur7z3xde.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (if (even? (cdr lst))\n             (solution (cdr lst))\n  \
    \           0))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n\
    \    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate\
    \ (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal?\
    \ (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32))\
    \ 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt8hkhqwv.rkt:21:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(8 7 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt8hkhqwv.rkt:22:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(3 3 3 3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt8hkhqwv.rkt:23:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 24 321)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt8hkhqwv.rkt:24:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(9)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt8hkhqwv.rkt:25:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(4 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt8hkhqwv.rkt:26:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 23 32)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt8hkhqwv.rkt:27:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 2 9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdcmr8u6h.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdcmr8u6h.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdcmr8u6h.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdcmr8u6h.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdcmr8u6h.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdcmr8u6h.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdcmr8u6h.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7rq01wrm.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7rq01wrm.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7rq01wrm.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7rq01wrm.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7rq01wrm.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7rq01wrm.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7rq01wrm.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (if (even? (cdr lst))\n             (solution (cdr lst))\n  \
    \           0))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n\
    \    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate\
    \ (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal?\
    \ (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32))\
    \ 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpneuw73mq.rkt:21:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(8 7 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpneuw73mq.rkt:22:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(3 3 3 3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpneuw73mq.rkt:23:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 24 321)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpneuw73mq.rkt:24:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(9)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpneuw73mq.rkt:25:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(4 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpneuw73mq.rkt:26:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 23 32)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpneuw73mq.rkt:27:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 2 9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxlpn252f.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxlpn252f.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxlpn252f.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxlpn252f.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxlpn252f.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxlpn252f.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxlpn252f.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5eltvhz0.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5eltvhz0.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5eltvhz0.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5eltvhz0.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5eltvhz0.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5eltvhz0.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5eltvhz0.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (if (even? (cdr lst))\n             (solution (cdr lst))\n  \
    \           0))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n\
    \    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate\
    \ (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal?\
    \ (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32))\
    \ 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp74f558g.rkt:21:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(8 7 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp74f558g.rkt:22:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(3 3 3 3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp74f558g.rkt:23:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 24 321)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp74f558g.rkt:24:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(9)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp74f558g.rkt:25:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(4 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp74f558g.rkt:26:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 23 32)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp74f558g.rkt:27:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 2 9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (if (even? (cdr lst))\n             (solution (cdr lst))\n  \
    \           0))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n\
    \    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate\
    \ (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal?\
    \ (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32))\
    \ 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp97s5oi6x.rkt:21:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(8 7 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp97s5oi6x.rkt:22:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(3 3 3 3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp97s5oi6x.rkt:23:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 24 321)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp97s5oi6x.rkt:24:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(9)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp97s5oi6x.rkt:25:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(4 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp97s5oi6x.rkt:26:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 23 32)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp97s5oi6x.rkt:27:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 2 9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx0t9t1re.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx0t9t1re.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx0t9t1re.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx0t9t1re.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx0t9t1re.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx0t9t1re.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx0t9t1re.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (if (even? (cdr lst))\n             (solution (cdr lst))\n  \
    \           0))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n\
    \    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate\
    \ (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal?\
    \ (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32))\
    \ 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvl1nr8_m.rkt:21:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(8 7 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvl1nr8_m.rkt:22:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(3 3 3 3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvl1nr8_m.rkt:23:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 24 321)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvl1nr8_m.rkt:24:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(9)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvl1nr8_m.rkt:25:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(4 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvl1nr8_m.rkt:26:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 23 32)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvl1nr8_m.rkt:27:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 2 9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7fs39bbf.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7fs39bbf.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7fs39bbf.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7fs39bbf.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7fs39bbf.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7fs39bbf.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7fs39bbf.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (if (even? (cdr lst))\n             (solution (cdr lst))\n  \
    \           0))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n\
    \    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate\
    \ (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal?\
    \ (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32))\
    \ 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7gi9rb3i.rkt:21:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(8 7 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7gi9rb3i.rkt:22:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(3 3 3 3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7gi9rb3i.rkt:23:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 24 321)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7gi9rb3i.rkt:24:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(9)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7gi9rb3i.rkt:25:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(4 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7gi9rb3i.rkt:26:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 23 32)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7gi9rb3i.rkt:27:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 2 9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (if (= (cadr lst) (car lst))\n             (solution (cdr lst))\n\
    \             (solution (cdr lst) (car lst))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate\
    \ (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n   \
    \ (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate\
    \ (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal?\
    \ (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13\
    \ 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplgsudtet.rkt:21:4\n\
    \nsolution: arity mismatch;\n the expected number of arguments does not match\
    \ the given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmplgsudtet.rkt:22:4\n\ncadr:\
    \ contract violation\n  expected: (cons/c any/c pair?)\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplgsudtet.rkt:23:4\n\
    \nsolution: arity mismatch;\n the expected number of arguments does not match\
    \ the given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmplgsudtet.rkt:24:4\n\nsolution:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmplgsudtet.rkt:25:4\n\nsolution:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmplgsudtet.rkt:26:4\n\nsolution:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmplgsudtet.rkt:27:4\n\nsolution:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsott_8ia.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsott_8ia.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsott_8ia.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsott_8ia.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsott_8ia.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsott_8ia.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsott_8ia.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1addxarf.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1addxarf.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1addxarf.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1addxarf.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1addxarf.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1addxarf.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1addxarf.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp76jxq6kj.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp76jxq6kj.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp76jxq6kj.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp76jxq6kj.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp76jxq6kj.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp76jxq6kj.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp76jxq6kj.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8mgk_e0l.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8mgk_e0l.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8mgk_e0l.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8mgk_e0l.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8mgk_e0l.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8mgk_e0l.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8mgk_e0l.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9_yqqx48.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9_yqqx48.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9_yqqx48.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9_yqqx48.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9_yqqx48.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9_yqqx48.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9_yqqx48.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even?\
    \ (first lst)) (+ (first lst) (solution (rest lst)))]\n    [else (solution (rest\
    \ lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal?\
    \ (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24\
    \ 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate\
    \ (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n   \
    \ (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgbz4ay1s.rkt:19:4

    actual:     8

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgbz4ay1s.rkt:20:4

    actual:     0

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgbz4ay1s.rkt:21:4

    actual:     54

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgbz4ay1s.rkt:22:4

    actual:     0

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgbz4ay1s.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgbz4ay1s.rkt:24:4

    actual:     62

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgbz4ay1s.rkt:25:4

    actual:     2

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (if (even? (cdr lst))\n             (solution (cdr lst))\n  \
    \           0))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n\
    \    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate\
    \ (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal?\
    \ (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32))\
    \ 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdi_cd6gu.rkt:21:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(8 7 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdi_cd6gu.rkt:22:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(3 3 3 3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdi_cd6gu.rkt:23:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 24 321)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdi_cd6gu.rkt:24:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(9)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdi_cd6gu.rkt:25:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(4 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdi_cd6gu.rkt:26:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 23 32)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdi_cd6gu.rkt:27:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 2 9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfmfntr70.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfmfntr70.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfmfntr70.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfmfntr70.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfmfntr70.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfmfntr70.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfmfntr70.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1er8lspj.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1er8lspj.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1er8lspj.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1er8lspj.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1er8lspj.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1er8lspj.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1er8lspj.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (if (even? (cdr lst))\n             (solution (cdr lst))\n  \
    \           0))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n\
    \    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate\
    \ (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal?\
    \ (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32))\
    \ 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp3m3xa7d.rkt:21:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(8 7 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp3m3xa7d.rkt:22:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(3 3 3 3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp3m3xa7d.rkt:23:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 24 321)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp3m3xa7d.rkt:24:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(9)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp3m3xa7d.rkt:25:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(4 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp3m3xa7d.rkt:26:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 23 32)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp3m3xa7d.rkt:27:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 2 9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppqqwcxov.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppqqwcxov.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppqqwcxov.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppqqwcxov.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppqqwcxov.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppqqwcxov.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppqqwcxov.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfr5lfml9.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfr5lfml9.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfr5lfml9.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfr5lfml9.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfr5lfml9.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfr5lfml9.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfr5lfml9.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp32bxpxan.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp32bxpxan.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp32bxpxan.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp32bxpxan.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp32bxpxan.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp32bxpxan.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp32bxpxan.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (if (= (cadr lst) (car lst))\n             (solution (cdr lst))\n\
    \             (solution (cdr lst) (car lst))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate\
    \ (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n   \
    \ (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate\
    \ (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal?\
    \ (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13\
    \ 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq_tszf31.rkt:21:4\n\
    \nsolution: arity mismatch;\n the expected number of arguments does not match\
    \ the given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpq_tszf31.rkt:22:4\n\ncadr:\
    \ contract violation\n  expected: (cons/c any/c pair?)\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq_tszf31.rkt:23:4\n\
    \nsolution: arity mismatch;\n the expected number of arguments does not match\
    \ the given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpq_tszf31.rkt:24:4\n\nsolution:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpq_tszf31.rkt:25:4\n\nsolution:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpq_tszf31.rkt:26:4\n\nsolution:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpq_tszf31.rkt:27:4\n\nsolution:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even?\
    \ (first lst)) (+ (first lst) (solution (rest lst)))]\n    [else (solution (rest\
    \ lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal?\
    \ (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24\
    \ 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate\
    \ (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n   \
    \ (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6shnr_j5.rkt:19:4

    actual:     8

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6shnr_j5.rkt:20:4

    actual:     0

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6shnr_j5.rkt:21:4

    actual:     54

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6shnr_j5.rkt:22:4

    actual:     0

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6shnr_j5.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6shnr_j5.rkt:24:4

    actual:     62

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6shnr_j5.rkt:25:4

    actual:     2

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqqzo55c4.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqqzo55c4.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqqzo55c4.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqqzo55c4.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqqzo55c4.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqqzo55c4.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqqzo55c4.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (if (even? (cdr lst))\n             (solution (cdr lst))\n  \
    \           0))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n\
    \    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate\
    \ (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal?\
    \ (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32))\
    \ 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptcaou0id.rkt:21:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(8 7 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptcaou0id.rkt:22:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(3 3 3 3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptcaou0id.rkt:23:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 24 321)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptcaou0id.rkt:24:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(9)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptcaou0id.rkt:25:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(4 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptcaou0id.rkt:26:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 23 32)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptcaou0id.rkt:27:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 2 9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7osy984z.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7osy984z.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7osy984z.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7osy984z.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7osy984z.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7osy984z.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7osy984z.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp03hwdef2.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp03hwdef2.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp03hwdef2.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp03hwdef2.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp03hwdef2.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp03hwdef2.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp03hwdef2.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (if (even? (cdr lst))\n             (solution (cdr lst))\n  \
    \           0))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n\
    \    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate\
    \ (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal?\
    \ (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32))\
    \ 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpee__bb24.rkt:21:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(8 7 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpee__bb24.rkt:22:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(3 3 3 3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpee__bb24.rkt:23:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 24 321)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpee__bb24.rkt:24:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(9)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpee__bb24.rkt:25:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(4 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpee__bb24.rkt:26:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 23 32)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpee__bb24.rkt:27:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 2 9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even?\
    \ (first lst)) (+ (first lst) (solution (rest lst)))]\n    [else (solution (rest\
    \ lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal?\
    \ (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24\
    \ 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate\
    \ (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n   \
    \ (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpg9dn8_x9.rkt:19:4

    actual:     8

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpg9dn8_x9.rkt:20:4

    actual:     0

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpg9dn8_x9.rkt:21:4

    actual:     54

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpg9dn8_x9.rkt:22:4

    actual:     0

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpg9dn8_x9.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpg9dn8_x9.rkt:24:4

    actual:     62

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpg9dn8_x9.rkt:25:4

    actual:     2

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (if (even? (cdr lst))\n             (solution (cdr lst))\n  \
    \           0))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n\
    \    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate\
    \ (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal?\
    \ (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32))\
    \ 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpccjnvs9r.rkt:21:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(8 7 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpccjnvs9r.rkt:22:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(3 3 3 3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpccjnvs9r.rkt:23:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 24 321)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpccjnvs9r.rkt:24:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(9)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpccjnvs9r.rkt:25:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(4 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpccjnvs9r.rkt:26:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 23 32)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpccjnvs9r.rkt:27:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 2 9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpt86y1ply.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpt86y1ply.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpt86y1ply.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpt86y1ply.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpt86y1ply.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpt86y1ply.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpt86y1ply.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkviac30d.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkviac30d.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkviac30d.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkviac30d.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkviac30d.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkviac30d.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkviac30d.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj59h14s9.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj59h14s9.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj59h14s9.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj59h14s9.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj59h14s9.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj59h14s9.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj59h14s9.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp121cg6h4.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp121cg6h4.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp121cg6h4.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp121cg6h4.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp121cg6h4.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp121cg6h4.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp121cg6h4.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp39jzpqoj.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp39jzpqoj.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp39jzpqoj.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp39jzpqoj.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp39jzpqoj.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp39jzpqoj.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp39jzpqoj.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7oxjgv_i.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7oxjgv_i.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7oxjgv_i.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7oxjgv_i.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7oxjgv_i.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7oxjgv_i.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7oxjgv_i.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprn9_r0qr.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprn9_r0qr.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprn9_r0qr.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprn9_r0qr.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprn9_r0qr.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprn9_r0qr.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprn9_r0qr.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp18wml8s_.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp18wml8s_.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp18wml8s_.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp18wml8s_.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp18wml8s_.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp18wml8s_.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp18wml8s_.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_07a82hc.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_07a82hc.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_07a82hc.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_07a82hc.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_07a82hc.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_07a82hc.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_07a82hc.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplrvgtqga.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplrvgtqga.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplrvgtqga.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplrvgtqga.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplrvgtqga.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplrvgtqga.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplrvgtqga.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbyepa7_7.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbyepa7_7.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbyepa7_7.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbyepa7_7.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbyepa7_7.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbyepa7_7.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbyepa7_7.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuw0zbbmu.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuw0zbbmu.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuw0zbbmu.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuw0zbbmu.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuw0zbbmu.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuw0zbbmu.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuw0zbbmu.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpd26jvyrr.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpd26jvyrr.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpd26jvyrr.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpd26jvyrr.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpd26jvyrr.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpd26jvyrr.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpd26jvyrr.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (if (even? (cdr lst))\n             (solution (cdr lst))\n  \
    \           0))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n\
    \    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate\
    \ (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal?\
    \ (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32))\
    \ 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc8jeawyd.rkt:21:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(8 7 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc8jeawyd.rkt:22:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(3 3 3 3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc8jeawyd.rkt:23:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 24 321)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc8jeawyd.rkt:24:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(9)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc8jeawyd.rkt:25:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(4 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc8jeawyd.rkt:26:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 23 32)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc8jeawyd.rkt:27:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 2 9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr8w7zesu.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr8w7zesu.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr8w7zesu.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr8w7zesu.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr8w7zesu.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr8w7zesu.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr8w7zesu.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo1bagf_6.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo1bagf_6.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo1bagf_6.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo1bagf_6.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo1bagf_6.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo1bagf_6.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo1bagf_6.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpexudkbd4.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpexudkbd4.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpexudkbd4.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpexudkbd4.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpexudkbd4.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpexudkbd4.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpexudkbd4.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuwgx39dp.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuwgx39dp.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuwgx39dp.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuwgx39dp.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuwgx39dp.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuwgx39dp.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuwgx39dp.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (if (even? (cdr lst))\n             (solution (cdr lst))\n  \
    \           0))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n\
    \    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate\
    \ (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal?\
    \ (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32))\
    \ 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpev24xojh.rkt:21:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(8 7 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpev24xojh.rkt:22:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(3 3 3 3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpev24xojh.rkt:23:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 24 321)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpev24xojh.rkt:24:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(9)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpev24xojh.rkt:25:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(4 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpev24xojh.rkt:26:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 23 32)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpev24xojh.rkt:27:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 2 9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp99u1y3w9.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp99u1y3w9.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp99u1y3w9.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp99u1y3w9.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp99u1y3w9.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp99u1y3w9.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp99u1y3w9.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even?\
    \ (first lst)) (+ (first lst) (solution (rest lst)))]\n    [else (solution (rest\
    \ lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal?\
    \ (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24\
    \ 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate\
    \ (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n   \
    \ (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpox43wctw.rkt:19:4

    actual:     8

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpox43wctw.rkt:20:4

    actual:     0

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpox43wctw.rkt:21:4

    actual:     54

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpox43wctw.rkt:22:4

    actual:     0

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpox43wctw.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpox43wctw.rkt:24:4

    actual:     62

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpox43wctw.rkt:25:4

    actual:     2

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even?\
    \ (first lst)) (+ (first lst) (solution (rest lst)))]\n    [else (solution (rest\
    \ lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal?\
    \ (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24\
    \ 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate\
    \ (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n   \
    \ (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_2_77zd9.rkt:19:4

    actual:     8

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_2_77zd9.rkt:20:4

    actual:     0

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_2_77zd9.rkt:21:4

    actual:     54

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_2_77zd9.rkt:22:4

    actual:     0

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_2_77zd9.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_2_77zd9.rkt:24:4

    actual:     62

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_2_77zd9.rkt:25:4

    actual:     2

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm3vc5bwa.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm3vc5bwa.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm3vc5bwa.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm3vc5bwa.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm3vc5bwa.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm3vc5bwa.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm3vc5bwa.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8npurr15.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8npurr15.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8npurr15.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8npurr15.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8npurr15.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8npurr15.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8npurr15.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5_cqu28x.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5_cqu28x.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5_cqu28x.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5_cqu28x.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5_cqu28x.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5_cqu28x.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5_cqu28x.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9icc6vxy.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9icc6vxy.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9icc6vxy.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9icc6vxy.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9icc6vxy.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9icc6vxy.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9icc6vxy.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2u48ok1b.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2u48ok1b.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2u48ok1b.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2u48ok1b.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2u48ok1b.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2u48ok1b.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2u48ok1b.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2c6hbs6g.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2c6hbs6g.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2c6hbs6g.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2c6hbs6g.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2c6hbs6g.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2c6hbs6g.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2c6hbs6g.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplkj9r0f2.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplkj9r0f2.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplkj9r0f2.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplkj9r0f2.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplkj9r0f2.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplkj9r0f2.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplkj9r0f2.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf_g_waic.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf_g_waic.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf_g_waic.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf_g_waic.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf_g_waic.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf_g_waic.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf_g_waic.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqnvr41w9.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqnvr41w9.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqnvr41w9.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqnvr41w9.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqnvr41w9.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqnvr41w9.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqnvr41w9.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbne07o1j.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbne07o1j.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbne07o1j.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbne07o1j.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbne07o1j.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbne07o1j.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbne07o1j.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgl1iw1na.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgl1iw1na.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgl1iw1na.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgl1iw1na.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgl1iw1na.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgl1iw1na.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgl1iw1na.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp72zrdt36.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp72zrdt36.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp72zrdt36.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp72zrdt36.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp72zrdt36.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp72zrdt36.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp72zrdt36.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6d7_d6hd.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6d7_d6hd.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6d7_d6hd.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6d7_d6hd.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6d7_d6hd.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6d7_d6hd.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6d7_d6hd.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even?\
    \ (car lst)) (+ (car lst) (solution (cdr lst)))]\n    [else (solution (cdr lst))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkrp_7fz1.rkt:19:4

    actual:     8

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkrp_7fz1.rkt:20:4

    actual:     0

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkrp_7fz1.rkt:21:4

    actual:     54

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkrp_7fz1.rkt:22:4

    actual:     0

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkrp_7fz1.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkrp_7fz1.rkt:24:4

    actual:     62

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkrp_7fz1.rkt:25:4

    actual:     2

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw2ggvh0j.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw2ggvh0j.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw2ggvh0j.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw2ggvh0j.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw2ggvh0j.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw2ggvh0j.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw2ggvh0j.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyvlko4_e.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyvlko4_e.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyvlko4_e.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyvlko4_e.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyvlko4_e.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyvlko4_e.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyvlko4_e.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx25a4t98.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx25a4t98.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx25a4t98.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx25a4t98.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx25a4t98.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx25a4t98.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx25a4t98.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxb7l2u78.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxb7l2u78.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxb7l2u78.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxb7l2u78.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxb7l2u78.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxb7l2u78.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxb7l2u78.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (if (even? (cdr lst))\n             (solution (cdr lst))\n  \
    \           0))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n\
    \    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate\
    \ (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal?\
    \ (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32))\
    \ 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyvi9i14a.rkt:21:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(8 7 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyvi9i14a.rkt:22:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(3 3 3 3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyvi9i14a.rkt:23:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 24 321)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyvi9i14a.rkt:24:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(9)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyvi9i14a.rkt:25:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(4 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyvi9i14a.rkt:26:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 23 32)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyvi9i14a.rkt:27:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 2 9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwvnrfrwu.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwvnrfrwu.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwvnrfrwu.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwvnrfrwu.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwvnrfrwu.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwvnrfrwu.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwvnrfrwu.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4g118m_k.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4g118m_k.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4g118m_k.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4g118m_k.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4g118m_k.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4g118m_k.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4g118m_k.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplzhrvpgi.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplzhrvpgi.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplzhrvpgi.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplzhrvpgi.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplzhrvpgi.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplzhrvpgi.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplzhrvpgi.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (if (even? (cdr lst))\n             (solution (cdr lst))\n  \
    \           0))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n\
    \    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate\
    \ (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal?\
    \ (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32))\
    \ 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpndwmqlzz.rkt:21:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(8 7 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpndwmqlzz.rkt:22:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(3 3 3 3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpndwmqlzz.rkt:23:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 24 321)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpndwmqlzz.rkt:24:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(9)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpndwmqlzz.rkt:25:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(4 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpndwmqlzz.rkt:26:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 23 32)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpndwmqlzz.rkt:27:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 2 9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bzjdic8.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bzjdic8.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bzjdic8.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bzjdic8.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bzjdic8.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bzjdic8.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5bzjdic8.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9dpefxwr.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9dpefxwr.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9dpefxwr.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9dpefxwr.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9dpefxwr.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9dpefxwr.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9dpefxwr.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5w6jrfx3.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5w6jrfx3.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5w6jrfx3.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5w6jrfx3.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5w6jrfx3.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5w6jrfx3.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5w6jrfx3.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (if (even? (cdr lst))\n             (solution (cdr lst))\n  \
    \           0))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n\
    \    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate\
    \ (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal?\
    \ (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32))\
    \ 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsptft_wu.rkt:21:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(8 7 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsptft_wu.rkt:22:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(3 3 3 3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsptft_wu.rkt:23:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 24 321)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsptft_wu.rkt:24:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(9)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsptft_wu.rkt:25:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(4 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsptft_wu.rkt:26:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 23 32)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsptft_wu.rkt:27:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 2 9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (if (= (car (cdr lst)) (car (cdr (cdr lst))))\n             (solution\
    \ (cdr lst))\n             (solution (cdr (cdr lst)))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal?\
    \ (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3))\
    \ 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal?\
    \ (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n \
    \   (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate\
    \ (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxo1ipgem.rkt:21:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxo1ipgem.rkt:22:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxo1ipgem.rkt:23:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxo1ipgem.rkt:24:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxo1ipgem.rkt:25:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxo1ipgem.rkt:26:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxo1ipgem.rkt:27:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (if (even? (cdr lst))\n             (solution (cdr lst))\n  \
    \           0))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n\
    \    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate\
    \ (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal?\
    \ (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32))\
    \ 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxzv5b_zz.rkt:21:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(8 7 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxzv5b_zz.rkt:22:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(3 3 3 3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxzv5b_zz.rkt:23:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 24 321)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxzv5b_zz.rkt:24:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(9)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxzv5b_zz.rkt:25:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(4 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxzv5b_zz.rkt:26:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 23 32)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxzv5b_zz.rkt:27:4\n\
    \neven?: contract violation\n  expected: integer?\n  given: '(13 2 9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even?\
    \ (first lst)) (+ (first lst) (solution (rest lst)))]\n    [else (solution (rest\
    \ lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal?\
    \ (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24\
    \ 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate\
    \ (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n   \
    \ (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp72m867dc.rkt:19:4

    actual:     8

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp72m867dc.rkt:20:4

    actual:     0

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp72m867dc.rkt:21:4

    actual:     54

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp72m867dc.rkt:22:4

    actual:     0

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp72m867dc.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp72m867dc.rkt:24:4

    actual:     62

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp72m867dc.rkt:25:4

    actual:     2

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpspn5e0ax.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpspn5e0ax.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpspn5e0ax.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpspn5e0ax.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpspn5e0ax.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpspn5e0ax.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpspn5e0ax.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbfqugfcs.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbfqugfcs.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbfqugfcs.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbfqugfcs.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbfqugfcs.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbfqugfcs.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbfqugfcs.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnu18dfwj.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnu18dfwj.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnu18dfwj.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnu18dfwj.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnu18dfwj.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnu18dfwj.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnu18dfwj.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo4ck2j6m.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo4ck2j6m.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo4ck2j6m.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo4ck2j6m.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo4ck2j6m.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo4ck2j6m.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo4ck2j6m.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb3qw5ako.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb3qw5ako.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb3qw5ako.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb3qw5ako.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb3qw5ako.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb3qw5ako.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb3qw5ako.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (if (null? lst)\n      0\n      (+ (car\
    \ lst)\n         (solution (cdr lst)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9q_w85oz.rkt:19:4

    actual:     21

    expected:   12

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9q_w85oz.rkt:20:4

    actual:     15

    expected:   9

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9q_w85oz.rkt:21:4

    actual:     388

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9q_w85oz.rkt:22:4

    actual:     14

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9q_w85oz.rkt:23:4

    actual:     14

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9q_w85oz.rkt:24:4

    actual:     98

    expected:   23

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9q_w85oz.rkt:25:4

    actual:     27

    expected:   3

    --------------------

    '
  stdout: ''
