name: HumanEval_89_encrypt
language: racket
prompt: "#lang racket\n\n;; Create a function encrypt that takes a string as an argument\
  \ and\n;; returns a string encrypted with the alphabet being rotated. \n;; The alphabet\
  \ should be rotated in a manner such that the letters \n;; shift down by two multiplied\
  \ to two places.\n;; For example:\n;; encrypt('hi') returns 'lm'\n;; encrypt('asdfghjkl')\
  \ returns 'ewhjklnop'\n;; encrypt('gf') returns 'kj'\n;; encrypt('et') returns 'ix'\n\
  (define (encrypt s)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encrypt))\n\
  \    (check-equal? (candidate \"hi\") \"lm\")\n    (check-equal? (candidate \"asdfghjkl\"\
  ) \"ewhjklnop\")\n    (check-equal? (candidate \"gf\") \"kj\")\n    (check-equal?\
  \ (candidate \"et\") \"ix\")\n    (check-equal? (candidate \"faewfawefaewg\") \"\
  jeiajeaijeiak\")\n    (check-equal? (candidate \"hellomyfriend\") \"lippsqcjvmirh\"\
  )\n    (check-equal? (candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
  ) \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n    (check-equal? (candidate\
  \ \"a\") \"e\")\n))\n\n(test-humaneval)"
completions: ["  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for\
    \ c across s\n          for i from 0\n          for j from (- i 2)\n         \
    \ for k from (- j 2)\n          when (char=? c alpha)\n          collect (rotate-char\
    \ (char-code c) (+ i j) (+ k j))))\n  ", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (loop for i from 0 to (length s) do\n      (let ((c (char-code\
    \ (substring s i i))))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! ", "  (let ((alpha (make-alphabet\
    \ (length s))))\n    (loop for i from 0 to (length s) do\n      (set! alpha (rotate-alphabet\
    \ alpha (+ i 2))))\n    (string-append (map alpha (map char->int (map char->string\
    \ s))))))\n", "  (let loop ((s s)\n             (a #(#\\A #\\B #\\C #\\D #\\E\
    \ #\\F #\\G #\\H #\\I #\\J \n                  #\\K #\\L #\\M #\\N #\\O #\\P #\\\
    Q #\\R #\\S #\\T #\\U #\\V \n                  #\\W #\\X #\\Y #\\Z))\n       \
    \      (b #(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j \n             \
    \     #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\u #\\v \n         \
    \         #\\w #\\x #\\y #\\z))\n             (c #(#\\A #\\B #\\C #\\D #\\E #\\\
    F #\\G #\\H #\\I #\\J \n                  #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\\
    R #\\S #\\T #\\U #\\V \n                  #\\W #\\X #\\Y #\\Z))\n            \
    \ (d #(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j \n                  #\\\
    k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\u #\\v \n                  #\\\
    w #\\x #\\y #\\z)))\n    (cond\n      [(empty? s) (empty? a)]\n      [(empty?\
    \ b) (empty? c)]\n      [(empty? c) (empty? d)]\n      [else (cons (car s)\n \
    \                 (loop (cdr s)\n                         (cons (car b)\n    \
    \                          (loop (cdr b)\n                                   \
    \  (cons (car a)\n                                          (loop (cdr a)\n  \
    \                                               (cons (car d)\n              \
    \                                          (loop (cdr d)\n                   \
    \                                             (cons (car s)\n                \
    \                                                      (loop (cdr s)\n       \
    \                                                              (cdr a))))))))))]))\n",
  "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for i from 0\
    \ to (length s) do\n      (let ((alpha (make-array 26 :initial-element #\\a)))\n\
    \        (loop for j from 0 to (length s) do\n          (set! alpha (rotate! alpha\
    \ j))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set!\
    \ alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n\
    \          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set!\
    \ alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n\
    \          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set!\
    \ alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n\
    \          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set!\
    \ alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n\
    \          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set!\
    \ alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n\
    \          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set!\
    \ alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n\
    \          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i ", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop\
    \ for i from 0 to (length s) do\n      (let ((c (char-code (char s i))))\n   \
    \     (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c", "  (let ((alpha (make-array 26 \n    \
    \                      :initial-contents '(a b c d e f g h i j k l m n o p q r\
    \ s t u v w x y z))))\n    (define (enc-loop s alpha-index)\n      (cond [(empty?\
    \ s) (list '())]\n            [(eq? (car s) #\\a) (cons (car alpha-index) alpha-index)]\n\
    \            [(eq? (car s) #\\b) (cons (car alpha-index) (cons (car alpha-index)\
    \ alpha-index))]\n            [(eq? (car s) #\\c) (cons (car alpha-index) (cons\
    \ (car alpha-index) (cons (car alpha-index) alpha-index)))]\n            [(eq?\
    \ (car s) #\\d) (cons (car alpha-index) (cons (car alpha-index) (cons (car alpha-index)\
    \ (cons (car alpha-index) alpha-index))))]\n            [(eq? (car s) #\\e) (cons\
    \ (car alpha-index) (cons (car alpha-index) (cons (car alpha-index) (cons (car\
    \ alpha-index) (cons (car alpha-index) alpha-index))))]\n            [(eq? (car\
    \ s) #\\f) (cons (car alpha-index) (cons (car alpha-index) (cons (car alpha-index)\
    \ (cons (car alpha-index) (cons (car alpha-index) (cons (car alpha-index) alpha-index))))))]\
    \ \n            [(eq? (car s) #\\g) (cons (car alpha-index) (cons (car alpha-index)\
    \ (cons (car alpha-index) (cons (car alpha-index) (cons (car alpha-index) (cons\
    \ (car alpha-index) (cons (car alpha-index) alpha-index))))))] \n            [(eq?\
    \ (car s) #\\h) (cons (car alpha-index) (cons (car alpha-index) (cons (car alpha-index)\
    \ (cons (car alpha-index) (cons (car alpha-index) (cons (car alpha-index) (cons\
    \ (car alpha-index) (cons (car alpha-index) alpha-index))))))] \n            [(eq?\
    \ (car s) #\\i) (cons (car alpha-index) (cons (car ", "  (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s) do\n     \
    \ (set! alpha (rotate! alpha 2))\n      (set! alpha (rotate! alpha 1))\n     \
    \ (set! alpha (rotate! alpha 0))\n      (set! alpha (rotate! alpha 3))\n     \
    \ (set! alpha (rotate! alpha 6))\n      (set! alpha (rotate! alpha 9))\n     \
    \ (set! alpha (rotate! alpha 12))\n      (set! alpha (rotate! alpha 15))\n   \
    \   (set! alpha (rotate! alpha 18))\n      (set! alpha (rotate! alpha 21)))\n\
    \    (string-append (substring s 0 i) \n                  (substring alpha (length\
    \ s) i))))\n", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop\
    \ for i from 0 to (length s) do\n      (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n        (loop for j from 0 to (length s) do\n          (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n            (loop for k from 0 to (length\
    \ s) do\n              (let ((alpha (make-array 26 :initial-element #\\a)))\n\
    \                (loop for l from 0 to (length s) do\n                  (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n                    (loop for m from\
    \ 0 to (length s) do\n                      (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n                        (loop for n from 0 to (length s) do\n     \
    \                     (let ((alpha (make-array 26 :initial-element #\\a)))\n \
    \                           (loop for o from 0 to (length s) do\n            \
    \                  (let ((alpha (make-array 26 :initial-element #\\a)))\n    \
    \                            (loop for p from 0 to (length s) do\n           \
    \                       (let ((alpha (make-array 26 :initial-element #\\a)))\n\
    \                                    (loop for q from 0 to (length s) do\n   \
    \                                   (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n                                        (loop for r from 0 to (length\
    \ s) do\n                                          (let ((alpha (make-array 26\
    \ :initial-element #\\a)))\n                                            (loop\
    \ for s from\n                                                      0 to (length\
    \ s) do\n                                              (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n                                              \
    \  (loop for t from 0 to (length s) do\n                                     \
    \             (let ((alpha (make-array 26 :initial-element #\\a)))\n         \
    \                                           (loop for u from 0 to (length s) do\n\
    \                                                      (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n                                              \
    \          (loop for v from 0 to (length s) do\n                             \
    \                             (let ((alpha (make-array 26 :initial-element #\\\
    a)))\n                                                            (loop for w\
    \ from 0 to (length s) do\n                                                  \
    \            (let ((alpha (make-array 26 :initial-element #\\a)))\n          \
    \                                                      (loop for x from 0 to (length\
    \ s) do\n                                                                  (let\
    \ ((alpha (make-array 26 :initial-element #\\a)))\n                          \
    \                                          (loop for y from 0 to (length s) do\n\
    \                                                                      (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n                                  \
    \                                      (loop for z from ", "  (let ((alpha (make-array\
    \ (length s) (lambda (x) (+ x 2)))))\n    (do ((i 0 (+ i 1))\n         (char (car\
    \ s))\n         (alpha (+ alpha (substring (map char->int (list #\\A #\\Z)) i))))\n\
    \      ((< i length) \n       (set! alpha (map char->int (list #\\A #\\Z)))\n\
    \       (set! alpha (map char->int (list #\\A #\\Z)))\n       (set! alpha (map\
    \ char->int (list #\\A #\\Z)))\n       (set! alpha (map char->int (list #\\A #\\\
    Z)))\n       (set! alpha (map char->int (list #\\A #\\Z)))\n       (set! alpha\
    \ (map char->int (list #\\A #\\Z)))\n       (set! alpha (map char->int (list #\\\
    A #\\Z)))\n       (set! alpha (map char->int (list #\\A #\\Z)))\n       (set!\
    \ alpha (map char->int (list #\\A #\\Z)))\n       (set! alpha (map char->int (list\
    \ #\\A #\\Z)))\n       (set! alpha (map char->int (list #\\A #\\Z)))\n       (set!\
    \ alpha (map char->int (list #\\A #\\Z)))\n       (set! alpha (map char->int (list\
    \ #\\A #\\Z)))\n       (set! alpha (map char->int (list #\\A #\\Z)))\n       (set!\
    \ alpha (map char->int (list #\\A #\\Z)))\n       (set! alpha (map char->int (list\
    \ #\\A #\\Z)))\n       (set! alpha (map char->int (list #\\A #\\Z)))\n       (set!\
    \ alpha (map char->int (list #\\A #\\Z)))\n       (set! alpha (map char->int (list\
    \ #\\A #\\Z)))\n       (set! alpha (map char->int (list #\\A #\\Z)))\n       (set!\
    \ alpha (map char->int (list #\\A #\\Z)))\n       (set! alpha (map char->int (list\
    \ #\\A #\\Z)))\n       (set! alpha (map char->int (list #\\A #\\Z)))\n       (set!\
    \ alpha (map char->", "  (let ((alpha (make-array 26)))\n    (set! alpha (rotate-array\
    \ alpha '(a b c d e f g h i j k l m n o p q r s t u v w x y z)))\n    (map (lambda\
    \ (c) (assoc c alpha)) s))\n)\n", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (loop for i from 0 to (length s) do\n      (set! alpha (rotate!\
    \ alpha 2))\n      (set! alpha (rotate! alpha 1))\n      (set! alpha (rotate!\
    \ alpha 0))\n      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate!\
    \ alpha -2))\n      (set! alpha (rotate! alpha -3))\n      (set! alpha (rotate!\
    \ alpha -4))\n      (set! alpha (rotate! alpha -5))\n      (set! alpha (rotate!\
    \ alpha -6))\n      (set! alpha (rotate! alpha -7))\n      (set! alpha (rotate!\
    \ alpha -8))\n      (set! alpha (rotate! alpha -9))\n      (set! alpha (rotate!\
    \ alpha -10))\n      (set! alpha (rotate! alpha -11))\n      (set! alpha (rotate!\
    \ alpha -12))\n      (set! alpha (rotate! alpha -13))\n      (set! alpha (rotate!\
    \ alpha -14))\n      (set! alpha (rotate! alpha -15))\n      (set! alpha (rotate!\
    \ alpha -16))\n      (set! alpha (rotate! alpha -17))\n      (set! alpha (rotate!\
    \ alpha -18))\n      (set! alpha (rotate! alpha -19))\n      (set! alpha (rotate!\
    \ alpha -20))\n      (set! alpha (rotate! alpha -21))\n      (set! alpha (rotate!\
    \ alpha -22))\n      (set! alpha (rotate! alpha -23))\n      (set! alpha (rotate!\
    \ alpha -24))\n      (set! alpha (rotate! alpha -25))\n      (set! alpha (rotate!\
    \ alpha -26))\n      (set! alpha (rotate! alpha -27))\n      (set! alpha (rotate!\
    \ alpha -28))\n      (set! alpha (rotate! alpha -29))\n      (set! alpha (rotate!\
    \ alpha -30))\n      (set! alpha (rotate! alpha -31))\n      (set! alpha (rotate!\
    \ alpha -32))\n      (set! alpha (rotate! alpha -33))\n      (set! alpha (rotate!\
    \ alpha -34))\n      (set! alpha (rotate! alpha -35))\n      (set! alpha (rotate!\
    \ alpha -36))\n      (set! alpha (rotate! alpha -37))\n      (set! alpha (rotate!\
    \ alpha -38))\n      (set! alpha (rotate! alpha -39))\n      (set! alpha (rotate!\
    \ alpha -40", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop\
    \ for i from 0 to (length s) do\n      (set! alpha (rotate! alpha 2))\n      (set!\
    \ alpha (rotate! alpha 1))\n      (set! alpha (rotate! alpha 0))\n      (set!\
    \ alpha (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n      (set!\
    \ alpha (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n      (set!\
    \ alpha (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n      (set!\
    \ alpha (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n      (set!\
    \ alpha (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n      (set!\
    \ alpha (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n      (set!\
    \ alpha (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n      (set!\
    \ alpha (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n      (set!\
    \ alpha (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n      (set!\
    \ alpha (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n      (set!\
    \ alpha (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n      (set!\
    \ alpha (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n      (set!\
    \ alpha (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n      (set!\
    \ alpha (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n      (set!\
    \ alpha (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n      (set!\
    \ alpha (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n      (set!\
    \ alpha (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n      (set!\
    \ alpha (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n      (set!\
    \ alpha (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n      (set!\
    \ alpha (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n      (set!\
    \ alpha (rotate! alpha -2))\n      (set! alpha (rotate! alpha -1))\n      (set!\
    \ alpha (rotate! alpha -2))\n      (set! ", "  (let ((alpha (make-array 26 \n\
    \                          :initial-contents '(a b c d e f g h i j k l m n o p\
    \ q r s t u v w x y z))))\n    (loop for i from 0 to (length s) do\n         \
    \ (let ((char (char-code (substring s i 1)))\n                (alpha (substring\
    \ alpha (+ i 2))))\n            (set! alpha (substring alpha (- i 1)))\n     \
    \       (set! alpha (append alpha (list char)))\n            (set! alpha (append\
    \ alpha (list char))))\n    (string-append (substring alpha (- length s))\n  \
    \                (substring alpha (- length s)))))\n", "  (let ((alpha (make-array\
    \ 26)))\n    (define (rotate-letter letter)\n      (let ((index (char->integer\
    \ (char-code letter))))\n        (set! alpha (subarray alpha (+ index (* 2 index)))))\n\
    \      (set! alpha (subarray alpha (+ index (* 2 index)))))\n    (let ((index\
    \ (char->integer (char-code s))))\n      (set! alpha (subarray alpha (+ index\
    \ (* 2 index)))))\n    (let ((index (char->integer (char-code s))))\n      (set!\
    \ alpha (subarray alpha (+ index (* 2 index)))))\n    (let ((index (char->integer\
    \ (char-code s))))\n      (set! alpha (subarray alpha (+ index (* 2 index)))))\n\
    \    (let ((index (char->integer (char-code s))))\n      (set! alpha (subarray\
    \ alpha (+ index (* 2 index)))))\n    (let ((index (char->integer (char-code s))))\n\
    \      (set! alpha (subarray alpha (+ index (* 2 index)))))\n    (let ((index\
    \ (char->integer (char-code s))))\n      (set! alpha (subarray alpha (+ index\
    \ (* 2 index)))))\n    (let ((index (char->integer (char-code s))))\n      (set!\
    \ alpha (subarray alpha (+ index (* 2 index)))))\n    (let ((index (char->integer\
    \ (char-code s))))\n      (set! alpha (subarray alpha (+ index (* 2 index)))))\n\
    \    (let ((index (char->integer (char-code s))))\n      (set! alpha (subarray\
    \ alpha (+ index (* 2 index)))))\n    (let ((index (char->integer (char-code s))))\n\
    \      (set! alpha (subarray alpha (+ index (* 2 index)))))\n    (let ((index\
    \ (char->integer (char-code s))))\n      (set! alpha (subarray alpha (+ index\
    \ (* 2 index)))))\n    (let ((index (char->integer (char-code s))))\n      (set!\
    \ alpha (subarray alpha (+ index (* 2 index)))))\n    (let ((index (char->integer\
    \ (char-code s))))\n      (set! alpha (subarray alpha (+ index (* 2 index)))))\n\
    \    (let ((index (char->integer (char-code s))))\n      (set! alpha (subarray\
    \ alpha (+ index (* ", "  (let ((alpha (make-array 26 \n                     \
    \     :initial-contents '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n\
    \                                                   #\\K #\\L #\\M #\\N #\\O #\\\
    P #\\Q #\\R #\\S #\\T \n                                                   #\\\
    U #\\V #\\W #\\X #\\Y #\\Z)))\n        (shift (make-array 26 \n              \
    \         :initial-contents '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\\
    J \n                                                #\\K #\\L #\\M #\\N #\\O #\\\
    P #\\Q #\\R #\\S #\\T \n                                                #\\U #\\\
    V #\\W #\\X #\\Y #\\Z))))\n    (loop for i from 0 to (length s) do\n         \
    \ (let ((char (char-code (char s i))))\n            (set! alpha (subarray alpha\
    \ 0 (+ i 2))\n                  shift (subarray shift 0 (+ i 2))))\n         \
    \   (set! alpha (subarray alpha 0 (+ i 2))\n                  shift (subarray\
    \ shift 0 (+ i 2))))\n            (set! alpha (subarray alpha 0 (+ i 2))\n   \
    \               shift (subarray shift 0 (+ i 2))))\n            (set! alpha (subarray\
    \ alpha 0 (+ i 2))\n                  shift (subarray shift 0 (+ i 2))))\n   \
    \         (set! alpha (subarray alpha 0 (+ i 2))\n                  shift (subarray\
    \ shift 0 (+ i 2))))\n            (set! alpha (subarray alpha 0 (+ i 2))\n   \
    \               shift (subarray shift 0 (+ i 2))))\n            (set! alpha (subarray\
    \ alpha 0 (+ i 2))\n                  shift (subarray shift 0 (+ i 2))))\n   \
    \         (set! alpha (subarray alpha 0 (+ i 2))\n                  shift (subarray\
    \ shift 0 (+ i 2))))\n            (set! alpha (subarray alpha 0 (+ i 2))\n   \
    \               shift (subarray shift 0 (+ i 2))))\n            (set! alpha (subarray\
    \ alpha 0 (+ i 2))\n                  shift (subarray shift 0 (+ i 2))))\n   \
    \         (set! alpha (subarray alpha 0 (+ i 2))\n                  shift (subarray\
    \ shift 0 (+ i 2))))\n            (set! alpha (subarray alpha 0 (+ i 2))\n   \
    \               shift ", "  (let ((alphabet (make-array 26 :initial-element #\\\
    a)))\n    (loop for c across s\n          for i from 0\n          for j from (-\
    \ i 2)\n          for k from (- j 2)\n          for l from (- k 2)\n         \
    \ for m from (- l 2)\n          for n from (- m 2)\n          for o from (- n\
    \ 2)\n          for p from (- o 2)\n          for q from (- p 2)\n          for\
    \ r from (- q 2)\n          for s from (- r 2)\n          for t from (- s 2)\n\
    \          for u from (- t 2)\n          for v from (- u 2)\n          for w from\
    \ (- v 2)\n          for x from (- w 2)\n          for y from (- x 2)\n      \
    \    for z from (- y 2)\n          for u from (- z 2)\n          for v from (-\
    \ u 2)\n          for w from (- v 2)\n          for x from (- w 2)\n         \
    \ for y from (- x 2)\n          for z from (- y 2)\n          for u from (- z\
    \ 2)\n          for v from (- u 2)\n          for w from (- v 2)\n          for\
    \ x from (- w 2)\n          for y from (- x 2)\n          for z from (- y 2)\n\
    \          for u from (- z 2)\n          for v from (- u 2)\n          for w from\
    \ (- v 2)\n          for x from (- w 2)\n          for y from (- x 2)\n      \
    \    for z from (- y 2)\n          for u from (- z 2)\n          for v from (-\
    \ u 2)\n          for w from (- v 2)\n          for x from (- w 2)\n         \
    \ for y from (- x 2)\n          for z from (- y 2)\n          for u from (- z\
    \ 2)\n          for v from (- u 2)\n          for w from (- v 2)\n          for\
    \ x from (- w 2)\n          for y from (- x 2)\n          for z from (- y 2)\n\
    \          for u from (- z 2)\n          for v from (- u 2)\n          for w from\
    \ (- v 2)\n          for x from (- w 2)\n          for y from (- x 2)\n      \
    \    for z from (- y 2)\n          for u from (- ", "  (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n    (loop for c across s\n          for i from\
    \ 0\n          for j from (- i 2)\n          for k from (- j 2)\n          when\
    \ (char=? c alpha)\n          collect (rotate-char (char-code c) i j k))))\n",
  "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (let loop ((s s)\n\
    \               (alpha alpha))\n      (cond\n        ((null? s) (append alpha\
    \ (list #\\a)))\n        ((char=? (car s) #\\a) (loop (cdr s) alpha))\n      \
    \  (else (loop (cdr s) (append alpha (list (char-code (car s))))))))))\n", " \
    \ (let ((alpha (make-array (length s) #:initial-element #\\a)))\n    (loop for\
    \ i from 0 to (length s) do\n      (set! alpha (rotate! alpha 2))\n      (set!\
    \ alpha (rotate! alpha 1))\n      (set! alpha (rotate! alpha 0))\n      (set!\
    \ alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set!\
    \ alpha (rotate! alpha -3))\n      (set! alpha (rotate! alpha -4))\n      (set!\
    \ alpha (rotate! alpha -5))\n      (set! alpha (rotate! alpha -6))\n      (set!\
    \ alpha (rotate! alpha -7))\n      (set! alpha (rotate! alpha -8))\n      (set!\
    \ alpha (rotate! alpha -9))\n      (set! alpha (rotate! alpha -10))\n      (set!\
    \ alpha (rotate! alpha -11))\n      (set! alpha (rotate! alpha -12))\n      (set!\
    \ alpha (rotate! alpha -13))\n      (set! alpha (rotate! alpha -14))\n      (set!\
    \ alpha (rotate! alpha -15))\n      (set! alpha (rotate! alpha -16))\n      (set!\
    \ alpha (rotate! alpha -17))\n      (set! alpha (rotate! alpha -18))\n      (set!\
    \ alpha (rotate! alpha -19))\n      (set! alpha (rotate! alpha -20))\n      (set!\
    \ alpha (rotate! alpha -21))\n      (set! alpha (rotate! alpha -22))\n      (set!\
    \ alpha (rotate! alpha -23))\n      (set! alpha (rotate! alpha -24))\n      (set!\
    \ alpha (rotate! alpha -25))\n      (set! alpha (rotate! alpha -26))\n      (set!\
    \ alpha (rotate! alpha -27))\n      (set! alpha (rotate! alpha -28))\n      (set!\
    \ alpha (rotate! alpha -29))\n      (set! alpha (rotate! alpha -30))\n      (set!\
    \ alpha (rotate! alpha -31))\n      (set! alpha (rotate! alpha -32))\n      (set!\
    \ alpha (rotate! alpha -33))\n      (set! alpha (rotate! alpha -34))\n      (set!\
    \ alpha (rotate! alpha -35))\n      (set! alpha (rotate! alpha -36))\n      (set!\
    \ alpha (rotate! alpha -37))\n      (set! alpha (rotate! alpha -38))\n      (set!\
    \ alpha (rotate! alpha -39))\n      (set! alpha (rotate! ", "  (let ((alpha (make-alphabet)))\n\
    \    (define (enc-loop s)\n      (if (empty? s)\n          s\n          (let ((char\
    \ (car s))\n                (next-char (cdr s)))\n            (set! alpha (rotate-alpha\
    \ (alpha-char alpha) char))\n            (set! alpha (rotate-alpha (alpha-char\
    \ alpha) next-char))\n            (enc-loop (cdr s)))))\n    (enc-loop s))\n  ",
  "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for i from 0\
    \ to (length s) do\n      (set! alpha (rotate! alpha 2))\n      (set! alpha (rotate!\
    \ alpha 1))\n      (set! alpha (rotate! alpha 0))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -3))\n      (set! alpha (rotate! alpha -4))\n      (set! alpha (rotate!\
    \ alpha -5))\n      (set! alpha (rotate! alpha -6))\n      (set! alpha (rotate!\
    \ alpha -7))\n      (set! alpha (rotate! alpha -8))\n      (set! alpha (rotate!\
    \ alpha -9))\n      (set! alpha (rotate! alpha -10))\n      (set! alpha (rotate!\
    \ alpha -11))\n      (set! alpha (rotate! alpha -12))\n      (set! alpha (rotate!\
    \ alpha -13))\n      (set! alpha (rotate! alpha -14))\n      (set! alpha (rotate!\
    \ alpha -15))\n      (set! alpha (rotate! alpha -16))\n      (set! alpha (rotate!\
    \ alpha -17))\n      (set! alpha (rotate! alpha -18))\n      (set! alpha (rotate!\
    \ alpha -19))\n      (set! alpha (rotate! alpha -20))\n      (set! alpha (rotate!\
    \ alpha -21))\n      (set! alpha (rotate! alpha -22))\n      (set! alpha (rotate!\
    \ alpha -23))\n      (set! alpha (rotate! alpha -24))\n      (set! alpha (rotate!\
    \ alpha -25))\n      (set! alpha (rotate! alpha -26))\n      (set! alpha (rotate!\
    \ alpha -27))\n      (set! alpha (rotate! alpha -28))\n      (set! alpha (rotate!\
    \ alpha -29))\n      (set! alpha (rotate! alpha -30))\n      (set! alpha (rotate!\
    \ alpha -31))\n      (set! alpha (rotate! alpha -32))\n      (set! alpha (rotate!\
    \ alpha -33))\n      (set! alpha (rotate! alpha -34))\n      (set! alpha (rotate!\
    \ alpha -35))\n      (set! alpha (rotate! alpha -36))\n      (set! alpha (rotate!\
    \ alpha -37))\n      (set! alpha (rotate! alpha -38))\n      (set! alpha (rotate!\
    \ alpha -39))\n      (set! alpha (rotate! alpha -40", "  (let ((alpha (make-array\
    \ 26 \n                          :initial-contents '(a b c d e f g h i j k l m\
    \ n o p q r s t u v w x y z))))\n    (loop for c across s\n          for i from\
    \ 0 to 26\n          for j from 0 to 26\n          when (char=? c alpha)\n   \
    \       collect (cond ((char=? (char-after c alpha) alpha) \n                \
    \         (char-before c alpha))\n                       ((char=? (char-after\
    \ c alpha) alpha (+ i 2))\n                         (char-before c alpha (+ j\
    \ 2)))\n                       ((char=? (char-after c alpha) alpha (+ i 2))\n\
    \                         (char-before c alpha (+ j 2)))\n                   \
    \    ((char=? (char-after c alpha) alpha (+ i 2))\n                         (char-before\
    \ c alpha (+ j 2)))\n                       ((char=? (char-after c alpha) alpha\
    \ (+ i 2))\n                         (char-before c alpha (+ j 2)))\n        \
    \               ((char=? (char-after c alpha) alpha (+ i 2))\n               \
    \          (char-before c alpha (+ j 2)))\n                       ((char=? (char-after\
    \ c alpha) alpha (+ i 2))\n                         (char-before c alpha (+ j\
    \ 2)))\n                       ((char=? (char-after c alpha) alpha (+ i 2))\n\
    \                         (char-before c alpha (+ j 2)))\n                   \
    \    ((char=? (char-after c alpha) alpha (+ i 2))\n                         (char-before\
    \ c alpha (+ j 2)))\n                       ((char=? (char-after c alpha) alpha\
    \ (+ i 2))\n                         (char-before c alpha (+ j 2)))\n        \
    \               ((char=? (char-after c alpha) alpha (+ i 2))\n               \
    \          (char-before c alpha (+ j 2)))\n                       ((char=? (char-after\
    \ c alpha) alpha (+ i 2))\n                         (char-before c alpha (+ j\
    \ 2)))\n                       ((char=? (char-after c alpha) alpha (+ i 2))\n\
    \                         (char-before c alpha (+ j 2)))\n                   \
    \    ((char=? (char-after c alpha) alpha (+ i 2))\n                         (char-before\
    \ c alpha (+ j 2)))\n                       ((char=? (char-after c alpha) alpha\
    \ (+ i 2))\n                         (char-before c alpha (+ j 2)))\n        \
    \               ((char=? (char", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (loop for i from 0 to (length s) do\n      (let ((char (char-code\
    \ (substring s i i))))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! ", "  (let ((alpha (make-alphabet)))\n\
    \    (define (shift a b)\n      (cond ((= b 0) a)\n            ((< b 2) (cons\
    \ (substring a 0 b) (substring a (+ b 1) b)))\n            (else (cons (substring\
    \ a 0 b) (substring a (+ b 1) b) (shift (substring a (b + 1) b) (b + 1))))))\n\
    \    (define (rotate a b)\n      (cond ((= b 0) a)\n            ((< b 2) (cons\
    \ (substring a 0 b) (substring a (+ b 1) b)))\n            (else (cons (substring\
    \ a 0 b) (substring a (+ b 1) b) (rotate (substring a (b + 1) b) (b + 1))))))\n\
    \    (define (encrypt a b)\n      (cond ((= b 0) (cons (a) (substring a 1 b)))\n\
    \            ((< b 2) (cons (substring a 0 b) (substring a (+ b 1) b)))\n    \
    \        (else (cons (substring a 0 b) (substring a (+ b 1) b) (encrypt (substring\
    \ a (b + 1) b) (b + 1))))))\n    (encrypt s (length s))))\n", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s)\
    \ do\n      (let ((c (char-code (char s i))))\n        (set! alpha (rotate! alpha\
    \ c))\n        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha\
    \ c))\n        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha\
    \ c))\n        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha\
    \ c))\n        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha\
    \ c))\n        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha\
    \ c))\n        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha\
    \ c))\n        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha\
    \ c))\n        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha\
    \ c))\n        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha\
    \ c))\n        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha\
    \ c))\n        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha\
    \ c))\n        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha\
    \ c))\n        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha\
    \ c))\n        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha\
    \ c))\n        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha\
    \ c))\n        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha\
    \ c))\n        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha\
    \ c))\n        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha\
    \ c))\n        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha\
    \ c))\n        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha\
    \ c))\n        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha\
    \ c", "  (let loop ((s s)\n             (acc '()))\n    (if (empty? s)\n     \
    \   acc\n        (loop (rest s)\n              (cons (first s)\n             \
    \       (loop (rest s)\n                          (cons (first s)\n          \
    \                      (cons (first acc)\n                                   \
    \   (cons (first s)\n                                            (cons (first\
    \ acc)\n                                                  (cons (first s)\n  \
    \                                                      (cons (first acc)\n   \
    \                                                           (cons (first s)\n\
    \                                                                (cons (first\
    \ acc)\n                                                                    (cons\
    \ (first s)\n                                                                \
    \          (cons (first acc)\n                                               \
    \                                 (cons (first s)\n                          \
    \                                                            (cons (first acc)\n\
    \                                                                            \
    \                (cons (first s)\n                                           \
    \                                                       (cons (first acc)\n  \
    \                                                                            \
    \                          (cons (first s)\n                                 \
    \                                                                            \
    \ (cons (first acc)\n                                                        \
    \                                                            (cons (first s)\n\
    \                                                                            \
    \                                              (cons (first acc)\n           \
    \                                                                            \
    \                                         (cons (first s)\n                  \
    \                                                                            \
    \                                    (cons (first acc)\n                     \
    \                                                                            \
    \                                       (cons (first s)\n                    \
    \                                                                            \
    \                                              (cons (first acc)\n           \
    \                                                                            \
    \                                                             (cons (first s)\n\
    \                                                                            \
    \                                                                          (cons\
    \ (first acc)\n                                                              \
    \                                                                            \
    \              (cons (first s)\n                                             \
    \                                                                            \
    \                                     (cons (first acc)\n                    \
    \                                                                            \
    \                                                                    (cons (first\
    \ s)\n                                                                       \
    \                                                                            \
    \                   (cons (first acc)\n                                      \
    \                                                                            \
    \                                                      (cons (first s)\n     \
    \                                                                            \
    \                                                                            \
    \             (cons (first acc)\n                                            \
    \                                                                            \
    \                                                    (cons (first s)\n       \
    \                                                                            \
    \                                                                            \
    \                 (cons (first acc)\n                                        \
    \                                                                            \
    \                                                              (cons (first s)\n\
    \                                                                            \
    \                                                                            \
    \                            (cons (first acc)\n                             \
    \                                                                            \
    \                                                                            \
    \ (cons (first s)\n                                                          \
    \                                                                            \
    \                                                  (cons (first acc)\n       \
    \                                                                            \
    \                                                                            \
    \                           (cons (first s)\n                                \
    \                                                                            \
    \                                                                            \
    \    (cons (first acc)\n                                                     \
    \                                                                            \
    \                                                             (cons (first s)\n\
    \                                                                            \
    \                                                                            \
    \                                        (cons (first acc)\n                 \
    \                                                                            \
    \                                                                            \
    \                         (cons (first s)\n                                  \
    \                                                                            \
    \                                                                            \
    \          (cons (first acc)\n                                               \
    \                                                                            \
    \                                                                           (cons\
    \ (first s)\n                                                                \
    \                                                                            \
    \                                                            (cons (first acc)\n\
    \                                                                            \
    \                                                                            \
    \                                                  (cons (first s)\n         \
    \                                                                            \
    \                                                                            \
    \                                           (cons (first acc)\n              \
    \                                                                            \
    \                                                                            \
    \                                        (cons (first s)\n                   \
    \                                                                            \
    \                                                                            \
    \                                     (cons (first acc)\n                    \
    \                                                                            \
    \                                                                            \
    \                                      (cons (first s)\n                     \
    \                                                                            \
    \                                                                            \
    \                                       (cons (first acc)\n                  \
    \                                                                            \
    \                                                                            \
    \                                            (cons (first s)\n               \
    \                                                                            \
    \                                                                            \
    \                                                 (cons (first acc)\n        \
    \                                                                            \
    \                                                                            \
    \                                                          ", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s)\
    \ do\n      (let ((alpha (make-array 26 :initial-element #\\a)))\n        (loop\
    \ for j from 0 to (length s) do\n          (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n            (if (char=? (char-code (substring s i j)) #\\a)\n     \
    \           (let ((alpha (make-array 26 :initial-element #\\a)))\n           \
    \       (loop for k from 0 to (length s) do\n                    (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n                      (if (char=? (char-code\
    \ (substring s i j)) #\\a)\n                          (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n                            (loop for l from 0\
    \ to (length s) do\n                              (let ((alpha (make-array 26\
    \ :initial-element #\\a)))\n                                (if (char=? (char-code\
    \ (substring s i j)) #\\a)\n                                    (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n                                      (loop for\
    \ m from 0 to (length s) do\n                                        (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n                                  \
    \        (if (char=? (char-code (substring s i j)) #\\a)\n                   \
    \                           (let ((alpha (make-array 26 :initial-element #\\a)))\n\
    \                                                (loop for n from 0 to (length\
    \ s) do\n                                                  (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n                                              \
    \      (if (char=? (char-code (substring s i j)) #\\a)\n                     \
    \                                   (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n                                                          (loop for\
    \ o from 0 to (length s) do\n                                                \
    \            (let ((alpha (make-array 26 :initial-element #\\a)))\n          \
    \                                                    (if (char=? (char-code (substring\
    \ s i j)) #\\a)\n                                                            \
    \      (let ((alpha (make-array 26 :initial-element #\\a)))\n                \
    \                                                    (loop for p from 0 to (length\
    \ s) do\n                                                                    \
    \  (let ((alpha (make-array 26 :initial-element #\\a)))\n                    \
    \                                                    (if (char=? (char-code (substring\
    \ s i j)) #\\a)\n                                                            \
    \                (let ((alpha (make-array 26 :initial-element #\\a)))\n      \
    \                                                                        (loop\
    \ for q from 0 to (", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n\
    \    (cond\n      [(empty? s) \"\"]\n      [(char-alphabet (first s)) (char-alphabet\
    \ (first s))]\n      [else (let ((alpha (rotate-alphabet alpha (first s))))\n\
    \               (cons (first s) (encrypt (rest s))))])))\n", "  (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n    (cond\n      [(empty? s) \"\"]\n      [(char-alphabetic?\
    \ s) (cons s (encrypt (substring s 0 (length s)))]\n      [(char-alphabetic? (first\
    \ s)) (cons (first s) (encrypt (substring s (length s) (length s))))]\n      [else\
    \ (cons (first s) (encrypt (substring s (length s) (length s)))]\n      )))\n\
    \  )\n", "  (let ((alpha (make-array 26)))\n    (define (rotate x y)\n      (cond\
    \ ((= y 0) (substring alpha (- x 1) 1))\n            ((= y 1) (substring alpha\
    \ (- x 1) 2))\n            (else (substring alpha (- x 1) (+ y 1)))))\n    (define\
    \ (shift x y)\n      (cond ((= y 0) (substring alpha (- x 1) 1))\n           \
    \ ((= y 1) (substring alpha (- x 1) 2))\n            (else (substring alpha (-\
    \ x 1) (+ y 1)))))\n    (define (rotate x y)\n      (cond ((= y 0) (substring\
    \ alpha (- x 1) 1))\n            ((= y 1) (substring alpha (- x 1) 2))\n     \
    \       (else (substring alpha (- x 1) (+ y 1)))))\n    (define (shift x y)\n\
    \      (cond ((= y 0) (substring alpha (- x 1) 1))\n            ((= y 1) (substring\
    \ alpha (- x 1) 2))\n            (else (substring alpha (- x 1) (+ y 1)))))\n\
    \    (define (rotate x y)\n      (cond ((= y 0) (substring alpha (- x 1) 1))\n\
    \            ((= y 1) (substring alpha (- x 1) 2))\n            (else (substring\
    \ alpha (- x 1) (+ y 1)))))\n    (define (shift x y)\n      (cond ((= y 0) (substring\
    \ alpha (- x 1) 1))\n            ((= y 1) (substring alpha (- x 1) 2))\n     \
    \       (else (substring alpha (- x 1) (+ y 1)))))\n    (define (rotate x y)\n\
    \      (cond ((= y 0) (substring alpha (- x 1) 1))\n            ((= y 1) (substring\
    \ alpha (- x 1) 2))\n            (else (substring alpha (- x 1) (+ y 1)))))\n\
    \    (define (shift x y)\n      (cond ((= y 0) (substring alpha (- x 1) 1))\n\
    \            ((= y 1) (substring alpha (- x 1) 2))\n            (else (substring\
    \ alpha (- x 1) (+ y 1)))))\n    (define (rotate x y)\n      (cond ((= y 0) (substring\
    \ alpha (- x 1) 1))\n            ((= y 1) (substring alpha (- x 1) 2))\n     \
    \       (else (substring alpha (- x 1) (+ y 1)))))\n    (define (shift x y)\n",
  "  (let ((alpha (make-array (length s) #:initial-element #\\a)))\n    (loop for\
    \ i from 0 to (length s) do\n      (set! alpha (rotate! alpha 2))\n      (set!\
    \ alpha (rotate! alpha 1))\n      (set! alpha (rotate! alpha 0))\n      (set!\
    \ alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set!\
    \ alpha (rotate! alpha -3))\n      (set! alpha (rotate! alpha -4))\n      (set!\
    \ alpha (rotate! alpha -5))\n      (set! alpha (rotate! alpha -6))\n      (set!\
    \ alpha (rotate! alpha -7))\n      (set! alpha (rotate! alpha -8))\n      (set!\
    \ alpha (rotate! alpha -9))\n      (set! alpha (rotate! alpha -10))\n      (set!\
    \ alpha (rotate! alpha -11))\n      (set! alpha (rotate! alpha -12))\n      (set!\
    \ alpha (rotate! alpha -13))\n      (set! alpha (rotate! alpha -14))\n      (set!\
    \ alpha (rotate! alpha -15))\n      (set! alpha (rotate! alpha -16))\n      (set!\
    \ alpha (rotate! alpha -17))\n      (set! alpha (rotate! alpha -18))\n      (set!\
    \ alpha (rotate! alpha -19))\n      (set! alpha (rotate! alpha -20))\n      (set!\
    \ alpha (rotate! alpha -21))\n      (set! alpha (rotate! alpha -22))\n      (set!\
    \ alpha (rotate! alpha -23))\n      (set! alpha (rotate! alpha -24))\n      (set!\
    \ alpha (rotate! alpha -25))\n      (set! alpha (rotate! alpha -26))\n      (set!\
    \ alpha (rotate! alpha -27))\n      (set! alpha (rotate! alpha -28))\n      (set!\
    \ alpha (rotate! alpha -29))\n      (set! alpha (rotate! alpha -30))\n      (set!\
    \ alpha (rotate! alpha -31))\n      (set! alpha (rotate! alpha -32))\n      (set!\
    \ alpha (rotate! alpha -33))\n      (set! alpha (rotate! alpha -34))\n      (set!\
    \ alpha (rotate! alpha -35))\n      (set! alpha (rotate! alpha -36))\n      (set!\
    \ alpha (rotate! alpha -37))\n      (set! alpha (rotate! alpha -38))\n      (set!\
    \ alpha (rotate! alpha -39))\n      (set! alpha (rotate! ", "  (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s) do\n     \
    \ (let ((char (char-code (substring s i i))))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! ", "  (let\
    \ ((alpha (make-array 26 \n                          :initial-contents '(a b c\
    \ d e f g h i j k l m n o p q r s t u v w x y z))))\n    (let loop ((i 0))\n \
    \     (cond\n        ((null? s) (list '()))\n        ((char=? (car s) #\\a) (cons\
    \ (car alpha) (loop (+ i 1))))\n        ((char=? (car s) #\\b) (cons (car alpha)\
    \ (loop (+ i 1))))\n        ((char=? (car s) #\\c) (cons (car alpha) (loop (+\
    \ i 1))))\n        ((char=? (car s) #\\d) (cons (car alpha) (loop (+ i 1))))\n\
    \        ((char=? (car s) #\\e) (cons (car alpha) (loop (+ i 1))))\n        ((char=?\
    \ (car s) #\\f) (cons (car alpha) (loop (+ i 1))))\n        ((char=? (car s) #\\\
    g) (cons (car alpha) (loop (+ i 1))))\n        ((char=? (car s) #\\h) (cons (car\
    \ alpha) (loop (+ i 1))))\n        ((char=? (car s) #\\i) (cons (car alpha) (loop\
    \ (+ i 1))))\n        ((char=? (car s) #\\j) (cons (car alpha) (loop (+ i 1))))\n\
    \        ((char=? (car s) #\\k) (cons (car alpha) (loop (+ i 1))))\n        ((char=?\
    \ (car s) #\\l) (cons (car alpha) (loop (+ i 1))))\n        ((char=? (car s) #\\\
    n) (cons (car alpha) (loop (+ i 1))))\n        ((char=? (car s) #\\o) (cons (car\
    \ alpha) (loop (+ i 1))))\n        ((char=? (car s) #\\p) (cons (car alpha) (loop\
    \ (+ i 1))))\n        ((char=? (car s) #\\q) (cons (car alpha) (loop (+ i 1))))\n\
    \        ((char=? (car s) #\\r) (cons (car alpha) (loop (+ i 1))))\n        ((char=?\
    \ (car s) #\\s) (cons (car alpha) (loop (+ i 1))))\n        ((char=", "  (let\
    \ loop ((s s)\n             (a #(#(a b c d e f g h i j k l m n o p q r s t u v\
    \ w x y z)))\n             (b #(a b c d e f g h i j k l m n o p q r s t u v w\
    \ x y z)))\n    (if (empty? s)\n        (list '#\\space)\n        (let ((c (car\
    \ s))\n              (d (first a)))\n          (if (equal? (car s) #\\space)\n\
    \              (loop (cdr s) b b)\n              (let ((e (first b))\n       \
    \             (f (first a)))\n                (if (equal? (car s) #\\space)\n\
    \                    (loop (cdr s) (cons e f) b)\n                    (let ((g\
    \ (first a))\n                          (h (first b)))\n                     \
    \ (if (equal? (car s) #\\space)\n                          (loop (cdr s) a (h\
    \ g))\n                          (let ((i (first b))\n                       \
    \         (j (first a)))\n                            (if (equal? (car s) #\\\
    space)\n                                (loop (cdr s) b (j i))\n             \
    \                   (let ((k (first a))\n                                    \
    \  (l (first b)))\n                                  (if (equal? (car s) #\\space)\n\
    \                                      (loop (cdr s) a (h g))\n              \
    \                        (let ((m (first b))\n                               \
    \             (n (first a)))\n                                      (if (equal?\
    \ (car s) #\\space)\n                                          (loop (cdr s) b\
    \ (j i))\n                                          (let ((o (first a))\n    \
    \                                            (p (first b)))\n                \
    \                        (if (equal? (car s) #\\space)\n                     \
    \                       (loop (cdr s) a (h g))\n                             \
    \               (let ((q (first b))\n                                        \
    \          (r (first a)))\n                                          (if (equal?\
    \ (car s) #\\space)\n                                              (loop (cdr\
    \ s) b (j i))\n                                              (let ((s (first a))\n\
    \                                                    (t\n                    \
    \                                 (first b)))\n                              \
    \              (if (equal? (car s) #\\space)\n                               \
    \                 (loop (cdr s) a (h g))\n                                   \
    \             (let ((u (first b))\n                                          \
    \            (v (first a)))\n                                              (if\
    \ (equal? (car s) #\\space)\n                                                \
    \  (loop (cdr s) b (j i))\n                                                  (let\
    \ ((w (first a))\n                                                        (x (",
  "  (let ((alpha (make-array (length s) #:element-type 'string)))\n    (do ((i 0\
    \ (+ i 1))\n         (j 0 (+ j 1)))\n        ((< i s))\n      (set! alpha (substring\
    \ alpha (- i 1) (+ j 1))))\n    (set! alpha (substring alpha (- i 1) (+ j 1))))\n\
    \  (let ((alpha (make-array (length s) #:element-type 'string)))\n    (do ((i\
    \ 0 (+ i 1))\n         (j 0 (+ j 1)))\n        ((< i s))\n      (set! alpha (substring\
    \ alpha (- i 1) (+ j 1))))\n    (set! alpha (substring alpha (- i 1) (+ j 1))))\n\
    \  (let ((alpha (make-array (length s) #:element-type 'string)))\n    (do ((i\
    \ 0 (+ i 1))\n         (j 0 (+ j 1)))\n        ((< i s))\n      (set! alpha (substring\
    \ alpha (- i 1) (+ j 1))))\n    (set! alpha (substring alpha (- i 1) (+ j 1))))\n\
    \  (let ((alpha (make-array (length s) #:element-type 'string)))\n    (do ((i\
    \ 0 (+ i 1))\n         (j 0 (+ j 1)))\n        ((< i s))\n      (set! alpha (substring\
    \ alpha (- i 1) (+ j 1))))\n    (set! alpha (substring alpha (- i 1) (+ j 1))))\n\
    \  (let ((alpha (make-array (length s) #:element-type 'string)))\n    (do ((i\
    \ 0 (+ i 1))\n         (j 0 (+ j 1)))\n        ((< i s))\n      (set! alpha (substring\
    \ alpha (- i 1) (+ j 1))))\n    (set! alpha (substring alpha (- i 1) (+ j 1))))\n\
    \  (let ((alpha (make-array (length s) #:element-type 'string)))\n    (do ((i\
    \ 0 (+ i 1))\n         (j 0 (+ j 1)))\n        ((< i s))\n      (set! alpha (substring\
    \ alpha (- i 1) (+ j 1))))\n    (set! alpha (substring alpha (- i 1) (+ j 1))))\n\
    \  (let ((alpha (make-array (length s) #:element-type 'string)))\n    (do ((i\
    \ 0 (+ i 1))\n         (j 0 (+ j 1)))\n        ((< i s))\n      (set", "  (let\
    \ ((alpha (make-array (length s) #:initial-element #\\a)))\n    (loop for i from\
    \ 0 to (length s) do\n          (set! alpha (rotate! alpha 2))\n          (set!\
    \ alpha (rotate! alpha 1))\n          (set! alpha (rotate! alpha 0))\n       \
    \   (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n\
    \          (set! alpha (rotate! alpha -3))\n          (set! alpha (rotate! alpha\
    \ -4))\n          (set! alpha (rotate! alpha -5))\n          (set! alpha (rotate!\
    \ alpha -6))\n          (set! alpha (rotate! alpha -7))\n          (set! alpha\
    \ (rotate! alpha -8))\n          (set! alpha (rotate! alpha -9))\n          (set!\
    \ alpha (rotate! alpha -10))\n          (set! alpha (rotate! alpha -11))\n   \
    \       (set! alpha (rotate! alpha -12))\n          (set! alpha (rotate! alpha\
    \ -13))\n          (set! alpha (rotate! alpha -14))\n          (set! alpha (rotate!\
    \ alpha -15))\n          (set! alpha (rotate! alpha -16))\n          (set! alpha\
    \ (rotate! alpha -17))\n          (set! alpha (rotate! alpha -18))\n         \
    \ (set! alpha (rotate! alpha -19))\n          (set! alpha (rotate! alpha -20))\n\
    \          (set! alpha (rotate! alpha -21))\n          (set! alpha (rotate! alpha\
    \ -22))\n          (set! alpha (rotate! alpha -23))\n          (set! alpha (rotate!\
    \ alpha -24))\n          (set! alpha (rotate! alpha -25))\n          (set! alpha\
    \ (rotate! alpha -26))\n          (set! alpha (rotate! alpha -27))\n         \
    \ (set! alpha (rotate! alpha -28))\n          (set! alpha (rotate! alpha -29))\n\
    \          (set! alpha (rotate! alpha -30))\n          (set! alpha (rotate! alpha\
    \ -31))\n          (set! alpha (rotate! alpha -32))\n          (set! alpha (rotate!\
    \ alpha -33))\n          (set! alpha (rotate! alpha -34))\n          (set! alpha\
    \ (rotate! alpha -35))\n          (set! alpha (rotate! alpha -36))\n         \
    \ (set! ", "  (let ((alpha (make-array 26 \n                          :initial-contents\
    \ '(a b c d e f g h i j k l m n o p q r s t u v w x y z))\n         alpha-index\
    \ (make-array 26 \n                                :initial-contents '(0 1 2 3\
    \ 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25)))\n    (loop for\
    \ i from 0 to (length s) do\n          (set! alpha-index (rotate! alpha-index\
    \ 2))\n          (set! alpha (rotate! alpha alpha-index)))\n    (string-append\
    \ (substring s 0 i) \n                  (substring alpha (length alpha-index)\
    \ i)))))\n", "  (let ((alpha (make-alphabet (length s))))\n    (let loop ((i 0)\
    \ (acc '()))\n      (if (< i length)\n          (let ((char (char-ref s i)))\n\
    \            (set! alpha (rotate-alpha (char-ref alpha char) 2))\n           \
    \ (loop (+ i 1) (cons char acc)))\n          acc))))\n", "  (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n    (let loop ((s s)\n               (alpha alpha))\n\
    \      (cond\n        ((null? s) (list s))\n        ((char= (first s) #\\a) (list\
    \ s))\n        (else (let ((c (char-code (first s))))\n                 (cond\n\
    \                  ((< c 26) (loop (rest s) (sub1 alpha)))\n                 \
    \ ((char= c #\\a) (loop (rest s) (sub1 alpha)))\n                  ((char= c #\\\
    z) (loop (rest s) (sub1 alpha)))\n                  ((char= c #\\A) (loop (rest\
    \ s) (sub1 alpha)))\n                  ((char= c #\\Z) (loop (rest s) (sub1 alpha)))\n\
    \                  (else (loop (rest s) (sub1 alpha))))))))))\n", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s)\
    \ do\n      (let ((alpha (make-array 26 :initial-element #\\a)))\n        (loop\
    \ for j from 0 to (length s) do\n          (set! alpha (rotate! alpha j))\n  \
    \        (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i ", "  (let loop ((s s)\n             (result '()))\n    (if (empty?\
    \ s)\n        result\n        (loop (rest s)\n              (cons (first s)\n\
    \                    (loop (rest s)\n                          (cons (second s)\n\
    \                                result)))))))\n", "  (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s) do\n     \
    \ (let ((alpha (make-array 26 :initial-element #\\a)))\n        (loop for j from\
    \ 0 to (length s) do\n          (set! alpha (rotate! alpha j))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i ",
  "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for i from 0\
    \ to (length s) do\n      (set! alpha (rotate! alpha 2))\n      (set! alpha (rotate!\
    \ alpha 1))\n      (set! alpha (rotate! alpha 0))\n      (set! alpha (rotate!\
    \ alpha -2))\n      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate!\
    \ alpha -2))\n      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate!\
    \ alpha 0))\n      (set! alpha (rotate! alpha 1))\n      (set! alpha (rotate!\
    \ alpha 2))\n      (set! alpha (rotate! alpha 3))\n      (set! alpha (rotate!\
    \ alpha 4))\n      (set! alpha (rotate! alpha 5))\n      (set! alpha (rotate!\
    \ alpha 6))\n      (set! alpha (rotate! alpha 7))\n      (set! alpha (rotate!\
    \ alpha 8))\n      (set! alpha (rotate! alpha 9))\n      (set! alpha (rotate!\
    \ alpha 10))\n      (set! alpha (rotate! alpha 11))\n      (set! alpha (rotate!\
    \ alpha 12))\n      (set! alpha (rotate! alpha 13))\n      (set! alpha (rotate!\
    \ alpha 14))\n      (set! alpha (rotate! alpha 15))\n      (set! alpha (rotate!\
    \ alpha 16))\n      (set! alpha (rotate! alpha 17))\n      (set! alpha (rotate!\
    \ alpha 18))\n      (set! alpha (rotate! alpha 19))\n      (set! alpha (rotate!\
    \ alpha 20))\n      (set! alpha (rotate! alpha 21))\n      (set! alpha (rotate!\
    \ alpha 22))\n      (set! alpha (rotate! alpha 23))\n      (set! alpha (rotate!\
    \ alpha 24))\n      (set! alpha (rotate! alpha 25))\n      (set! alpha (rotate!\
    \ alpha 26))\n      (set! alpha (rotate! alpha 27))\n      (set! alpha (rotate!\
    \ alpha 28))\n      (set! alpha (rotate! alpha 29))\n      (set! alpha (rotate!\
    \ alpha 30))\n      (set! alpha (rotate! alpha 31))\n      (set! alpha (rotate!\
    \ alpha 32))\n      (set! alpha (rotate! alpha 33))\n      (set! alpha (rotate!\
    \ alpha 34))\n      (set! alpha (rotate! alpha 35))\n      (set! alpha (rotate!\
    \ alpha 36))\n      (set! alpha (rotate! alpha 37))\n      (set! alpha (rotate! ",
  "  (cond\n    [(empty? s) \"\"]\n    [(equal? (first s) 'a) (cons (first s) (encrypt\
    \ (rest s)))]\n    [(equal? (first s) 'b) (cons (first s) (encrypt (rest s)))]\n\
    \    [(equal? (first s) 'c) (cons (first s) (encrypt (rest s)))]\n    [(equal?\
    \ (first s) 'd) (cons (first s) (encrypt (rest s)))]\n    [(equal? (first s) 'e)\
    \ (cons (first s) (encrypt (rest s)))]\n    [(equal? (first s) 'f) (cons (first\
    \ s) (encrypt (rest s)))]\n    [(equal? (first s) 'g) (cons (first s) (encrypt\
    \ (rest s)))]\n    [(equal? (first s) 'h) (cons (first s) (encrypt (rest s)))]\n\
    \    [(equal? (first s) 'i) (cons (first s) (encrypt (rest s)))]\n    [(equal?\
    \ (first s) 'j) (cons (first s) (encrypt (rest s)))]\n    [(equal? (first s) 'k)\
    \ (cons (first s) (encrypt (rest s)))]\n    [(equal? (first s) 'l) (cons (first\
    \ s) (encrypt (rest s)))]\n    [(equal? (first s) 'm) (cons (first s) (encrypt\
    \ (rest s)))]\n    [(equal? (first s) 'n) (cons (first s) (encrypt (rest s)))]\n\
    \    [(equal? (first s) 'o) (cons (first s) (encrypt (rest s)))]\n    [(equal?\
    \ (first s) 'p) (cons (first s) (encrypt (rest s)))]\n    [(equal? (first s) 'q)\
    \ (cons (first s) (encrypt (rest s)))]\n    [(equal? (first s) 'r) (cons (first\
    \ s) (encrypt (rest s)))]\n    [(equal? (first s) 's) (cons (first s) (encrypt\
    \ (rest s)))]\n    [(equal? (first s) 't) (cons (first s) (encrypt (rest s)))]\n\
    \    [(equal? (first s) 'u) (cons (first s) (encrypt (rest s)))]\n    [(equal?\
    \ (first s) 'v) (cons (first s) (encrypt (rest s)))]\n    [(equal? (first s) 'w)\
    \ (cons (first s) (encrypt (rest s)))]\n    [(equal? (first s) 'x) (cons (first\
    \ s) (encrypt (rest s)))", "  (let loop ((s s)\n             (alphabet (list 'a\
    \ b c d e f g h i j k l m n o p q r s t u v w x y z))\n             (result '()))\n\
    \    (cond\n      [(empty? s) result]\n      [(char=? (first s) alphabet) result]\n\
    \      [(char=? (first s) (first alphabet)) (loop (rest s) alphabet (cons (first\
    \ s) result))]\n      [else (loop (rest s) alphabet (cons (first s) result))])))\n",
  "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for i from 0\
    \ to (length s) do\n      (set! alpha (rotate! alpha 2))\n      (set! alpha (rotate!\
    \ alpha 1))\n      (set! alpha (rotate! alpha 0))\n      (set! alpha (rotate!\
    \ alpha -2))\n      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate!\
    \ alpha 1))\n      (set! alpha (rotate! alpha 0))\n      (set! alpha (rotate!\
    \ alpha 2))\n      (set! alpha (rotate! alpha 1))\n      (set! alpha (rotate!\
    \ alpha 0))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha 1))\n      (set! alpha (rotate!\
    \ alpha 0))\n      (set! alpha (rotate! alpha 2))\n      (set! alpha (rotate!\
    \ alpha 1))\n      (set! alpha (rotate! alpha 0))\n      (set! alpha (rotate!\
    \ alpha -2))\n      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate!\
    \ alpha 1))\n      (set! alpha (rotate! alpha 0))\n      (set! alpha (rotate!\
    \ alpha 2))\n      (set! alpha (rotate! alpha 1))\n      (set! alpha (rotate!\
    \ alpha 0))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha 1))\n      (set! alpha (rotate!\
    \ alpha 0))\n      (set! alpha (rotate! alpha 2))\n      (set! alpha (rotate!\
    \ alpha 1))\n      (set! alpha (rotate! alpha 0))\n      (set! alpha (rotate!\
    \ alpha -2))\n      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate!\
    \ alpha 1))\n      (set! alpha (rotate! alpha 0))\n      (set! alpha (rotate!\
    \ alpha 2))\n      (set! alpha (rotate! alpha 1))\n      (set! alpha (rotate!\
    \ alpha 0))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha 1))\n      (set! alpha (rotate!\
    \ alpha 0))\n      (set! alpha (rotate! alpha 2))\n      (set! alpha (rotate!\
    \ alpha 1))\n      (set! alpha (rotate! alpha 0))\n      (set! alpha (rotate!\
    \ alpha -2))\n      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate!\
    \ alpha ", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop\
    \ for c across s\n          for i from 0\n          for j from (- i 2)\n     \
    \     for k from (- j 2)\n          for l from (- k 2)\n          for m from (-\
    \ l 2)\n          for n from (- m 2)\n          for o from (- n 2)\n         \
    \ for p from (- o 2)\n          for q from (- p 2)\n          for r from (- q\
    \ 2)\n          for s from (- r 2)\n          for t from (- s 2)\n          for\
    \ u from (- t 2)\n          for v from (- u 2)\n          for w from (- v 2)\n\
    \          for x from (- w 2)\n          for y from (- x 2)\n          for z from\
    \ (- y 2)\n          for u from (- z 2)\n          for v from (- u 2)\n      \
    \    for w from (- v 2)\n          for x from (- w 2)\n          for y from (-\
    \ x 2)\n          for z from (- y 2)\n          for u from (- z 2)\n         \
    \ for v from (- u 2)\n          for w from (- v 2)\n          for x from (- w\
    \ 2)\n          for y from (- x 2)\n          for z from (- y 2)\n          for\
    \ u from (- z 2)\n          for v from (- u 2)\n          for w from (- v 2)\n\
    \          for x from (- w 2)\n          for y from (- x 2)\n          for z from\
    \ (- y 2)\n          for u from (- z 2)\n          for v from (- u 2)\n      \
    \    for w from (- v 2)\n          for x from (- w 2)\n          for y from (-\
    \ x 2)\n          for z from (- y 2)\n          for u from (- z 2)\n         \
    \ for v from (- u 2)\n          for w from (- v 2)\n          for x from (- w\
    \ 2)\n          for y from (- x 2)\n          for z from (- y 2)\n          for\
    \ u from (- z 2)\n          for v from (- u 2)\n          for w from (- v 2)\n\
    \          for x from (- w 2)\n          for y from (- x 2)\n          for z from\
    \ (- y 2)\n          for u from (- z ", "  (let loop ((s s)\n             (alphabet\
    \ (list 'a b c d e f g h i j k l m n o p q r s t u v w x y z))\n             (result\
    \ '()))\n    (if (null? s)\n        result\n        (loop (cdr s)\n          \
    \    (cons (car alphabet)\n                    (loop (cdr s)\n               \
    \           (cons (car alphabet)\n                                result)))))\n\
    \    (loop '() result)))\n", "  (let ((alpha (make-array 26 :initial-element #\\\
    a)))\n    (define (shift a b)\n      (cond ((= b 0) a)\n            ((= b 1) (rotate!\
    \ a 2))\n            (else (rotate! a (- b 1)))))\n    (define (rotate! a b)\n\
    \      (cond ((= b 0) (shift! a 1))\n            (else (cond ((= b 1) (shift!\
    \ a 2))\n                       (else (cond ((= b 2) (shift! a 3))\n         \
    \                          (else (shift! a (- b 2)))))))\n    (define (shift!\
    \ a b)\n      (cond ((= b 0) (shift! a 1))\n            (else (cond ((= b 1) (shift!\
    \ a 2))\n                       (else (cond ((= b 2) (shift! a 3))\n         \
    \                          (else (shift! a (- b 2)))))))\n    (define (encrypt\
    \ s)\n      (cond ((string=? s \"\") \"\")\n            ((string=? s \"a\") \"\
    a\")\n            ((string=? s \"b\") \"b\")\n            ((string=? s \"c\")\
    \ \"c\")\n            ((string=? s \"d\") \"d\")\n            ((string=? s \"\
    e\") \"e\")\n            ((string=? s \"f\") \"f\")\n            ((string=? s\
    \ \"g\") \"g\")\n            ((string=? s \"h\") \"h\")\n            ((string=?\
    \ s \"i\") \"i\")\n            ((string=? s \"j\") \"j\")\n            ((string=?\
    \ s \"k\") \"k\")\n            ((string=? s \"l\") \"l\")\n            ((string=?\
    \ s \"m\") \"m\")\n            ((string=? s \"n\") \"n\")\n            ((string=?\
    \ s \"o\") \"o\")\n            ((string=? s \"p\") \"p\")\n            ((string=?\
    \ s \"q\") \"q\")\n            ((string=? s \"r\") \"r\")\n            ((string=?\
    \ s \"s\") \"s\")\n            ((string=? s \"t\") \"t\")\n            ((string=?\
    \ s \"u\") \"u\")\n            ((string=? s \"v\") \"v\")\n            ((string=?\
    \ s \"w\") \"w\")\n            ((string=? s \"x\") \"x\")\n            ((string=?\
    \ s \"y\") \"y\")\n            ((string=? s \"z\") \"z\")\n            ((string=? ",
  "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for i from 0\
    \ to (length s) by 2\n          for j from 0 to (length s) by 2\n          for\
    \ k from 0 to (length s) by 2\n          when (= (mod i 26) (mod j 26) (mod k\
    \ 26))\n          do (set! alpha (rotate! alpha #\\a)))\n    (loop for i from\
    \ 0 to (length s) by 2\n          for j from 0 to (length s) by 2\n          for\
    \ k from 0 to (length s) by 2\n          when (= (mod i 26) (mod j 26) (mod k\
    \ 26))\n          do (set! alpha (rotate! alpha #\\b)))\n    (loop for i from\
    \ 0 to (length s) by 2\n          for j from 0 to (length s) by 2\n          for\
    \ k from 0 to (length s) by 2\n          when (= (mod i 26) (mod j 26) (mod k\
    \ 26))\n          do (set! alpha (rotate! alpha #\\c)))\n    (loop for i from\
    \ 0 to (length s) by 2\n          for j from 0 to (length s) by 2\n          for\
    \ k from 0 to (length s) by 2\n          when (= (mod i 26) (mod j 26) (mod k\
    \ 26))\n          do (set! alpha (rotate! alpha #\\d)))\n    (loop for i from\
    \ 0 to (length s) by 2\n          for j from 0 to (length s) by 2\n          for\
    \ k from 0 to (length s) by 2\n          when (= (mod i 26) (mod j 26) (mod k\
    \ 26))\n          do (set! alpha (rotate! alpha #\\e)))\n    (loop for i from\
    \ 0 to (length s) by 2\n          for j from 0 to (length s) by 2\n          for\
    \ k from 0 to (length s) by 2\n          when (= (mod i 26) (mod j 26) (mod k\
    \ 26))\n          do (set! alpha (rotate! alpha #\\f)))\n    (loop for i from\
    \ 0 to (length s) by 2\n          for j from 0 to (length s) by 2\n          for\
    \ k from 0 to (length s) by 2\n          when (= (mod i 26) (mod j 26) (mod k\
    \ 26))\n          do (set! alpha (rotate! alpha #\\g)))\n    (loop for i from\
    \ 0 to (length s) by 2\n          for j from 0 to (length s) by 2\n          for\
    \ k from 0 to (length ", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n\
    \    (loop for i from 0 to (length s) do\n      (let ((char (char-code (substring\
    \ s i i))))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! ", "  (let ((alphabet (list 'a 'b 'c 'd 'e 'f 'g\
    \ 'h 'i 'j 'k 'l 'm 'n 'o 'p 'q 'r 's 't 'u 'v 'w 'x 'y 'z)))\n    (let loop ((s\
    \ s)\n              (result '()))\n      (if (empty? s)\n          result\n  \
    \        (let ((char (car s)))\n            (loop (cdr s)\n                  (cond\
    \ ((char-alphabet char) (cons char (loop (cdr s) result)))\n                 \
    \        (else (loop (cdr s) (cons char (loop (cdr s) result))))))))))\n", " \
    \ (let ((alpha (make-array 26 \n                          :initial-contents '(a\
    \ b c d e f g h i j k l m n o p q r s t u v w x y z))))\n    (cond [(empty? s)\
    \ \"\"]\n          [(char-alphabetic? s alpha)\n           (let ((alpha (rotate-alphabet\
    \ alpha (char-alphabetic? s alpha))))\n             (cond [(empty? s) \"\"]\n\
    \                   [(char-alphabetic? s alpha)\n                    (let ((alpha\
    \ (rotate-alphabet alpha (char-alphabetic? s alpha))))\n                     \
    \ (cond [(empty? s) \"\"]\n                            [(char-alphabetic? s alpha)\n\
    \                             (let ((alpha (rotate-alphabet alpha (char-alphabetic?\
    \ s alpha))))\n                               (cond [(empty? s) \"\"]\n      \
    \                               [(char-alphabetic? s alpha)\n                \
    \                       (let ((alpha (rotate-alphabet alpha (char-alphabetic?\
    \ s alpha))))\n                                         (cond [(empty? s) \"\"\
    ]\n                                               [(char-alphabetic? s alpha)\n\
    \                                                (let ((alpha (rotate-alphabet\
    \ alpha (char-alphabetic? s alpha))))\n                                      \
    \            (cond [(empty? s) \"\"]\n                                       \
    \                 [(char-alphabetic? s alpha)\n                              \
    \                           (let ((alpha (rotate-alphabet alpha (char-alphabetic?\
    \ s alpha))))\n                                                          (cond\
    \ [(empty? s) \"\"]\n                                                        \
    \         [(char-alphabetic? s alpha)\n                                      \
    \                            (let ((alpha (rotate-alphabet alpha (char-alphabetic?\
    \ s alpha))))\n                                                              \
    \     (cond [(empty? s) \"\"]\n                                              \
    \                          [(char-alphabetic? s alpha)\n                     \
    \                                                    (let ((alpha (rotate-alphabet\
    \ alpha (char-alphabetic? s alpha))))\n                                      \
    \                                    (cond [(empty? s) \"\"]\n               \
    \                                                    [(char-alphabetic? s alpha)\n\
    \                                                                     (let ((alpha\
    \ (rotate-alphabet alpha (char-alphabetic? s alpha))))\n                     \
    \                                                (cond [(empty? s) \"\"]\n   \
    \                                                                        [(char-alphabetic?\
    \ s alpha)\n                                                                 \
    \          (let ((alpha (rotate-alphabet alpha (char-alphabetic? s alpha))))\n\
    \                                                                           (cond\
    \ [(empty? s) \"\"]\n                                                        \
    \                         [(char-alphabetic? s alpha)\n", "  (let loop ((s s)\n\
    \             (acc '()))\n    (cond ((null? s) (append acc (list s)))\n      \
    \    ((char=? (car s) 'a) (loop (cdr s) (cons (car s) acc)))\n          ((char=?\
    \ (car s) 'b) (loop (cdr s) (cons (car s) (cons (car s) acc))))\n          ((char=?\
    \ (car s) 'c) (loop (cdr s) (cons (car s) (cons (car s) (cons (car s) acc))))\n\
    \          ((char=? (car s) 'd) (loop (cdr s) (cons (car s) (cons (car s) (cons\
    \ (car s) (cons (car s) acc))))))\n  (loop (cdr s) acc)))\n", "  (let ((alpha\
    \ (make-array (length s) #:initial-element #\\a)))\n    (loop for i from 0 to\
    \ (length s) do\n      (set! alpha (rotate! alpha 2))\n      (set! alpha (rotate!\
    \ alpha 1))\n      (set! alpha (rotate! alpha 0))\n      (set! alpha (rotate!\
    \ alpha -2))\n      (set! alpha (rotate! alpha -1)))\n    (string-append (map\
    \ char->string alpha) s)))\n", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (loop for i from 0 to (length s) do\n      (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n        (loop for j from 0 to (length s) do\n \
    \         (set! alpha (rotate! alpha j))\n          (set! alpha (rotate! alpha\
    \ (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha\
    \ (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n \
    \         (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i ", "  (let ((alpha\
    \ (make-array 26)))\n    (set! alpha (rotate! alpha 'A 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z\
    \ 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z\
    \ 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z\
    \ 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z\
    \ 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z\
    \ 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z\
    \ 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z\
    \ 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z\
    \ 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z\
    \ 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z 'Z\
    \ 'Z 'Z 'Z 'Z", "  (let ((alpha (make-array 26 \n                          :initial-contents\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                     \
    \                          #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T \n\
    \                                               #\\U #\\V #\\W #\\X #\\Y #\\Z)))\n\
    \        (shift (make-array 26 \n                       :initial-contents '(#\\\
    A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                            \
    \                #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T \n        \
    \                                    #\\U #\\V #\\W #\\X #\\Y #\\Z))))\n    (loop\
    \ for i from 0 to (length s) do\n      (let ((char (char-code (substring s i 1)))\n\
    \            (alpha (substring alpha (+ i 1))))\n        (set! alpha (substring\
    \ alpha (- i 1)))\n        (set! alpha (substring alpha (+ i 1)))\n        (set!\
    \ alpha (substring alpha (- i 1)))\n        (set! alpha (substring alpha (+ i\
    \ 1)))\n        (set! alpha (substring alpha (- i 1))))\n    (loop for i from\
    \ 0 to (length s) do\n      (let ((char (char-code (substring s i 1)))\n     \
    \       (alpha (substring alpha (+ i 1))))\n        (set! alpha (substring alpha\
    \ (- i 1)))\n        (set! alpha (substring alpha (+ i 1)))\n        (set! alpha\
    \ (substring alpha (- i 1)))\n        (set! alpha (substring alpha (+ i 1)))\n\
    \        (set! alpha (substring alpha (- i 1))))\n    (loop for i from 0 to (length\
    \ s) do\n      (let ((char (char-code (substring s i 1)))\n            (alpha\
    \ (substring alpha (+ i 1))))\n        (set! alpha (substring alpha (- i 1)))\n\
    \        (set! alpha (substring alpha (+ i 1)))\n        (set! alpha (substring\
    \ alpha (- i 1)))\n        (set! alpha (substring alpha (+ i 1)))\n        (set!\
    \ alpha (substring alpha (- i 1))))\n    (loop for i ", "  (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n    (cond\n      [(empty? s) \"\"]\n      [(char-alphabet\
    \ (first s)) (cons (first s) (encrypt (rest s)))]\n      [(char-alphabet (first\
    \ s)) (cons (first s) (encrypt (rest s)))]\n      [(char-alphabet (first s)) (cons\
    \ (first s) (encrypt (rest s)))]\n      [(char-alphabet (first s)) (cons (first\
    \ s) (encrypt (rest s)))]\n      [(char-alphabet (first s)) (cons (first s) (encrypt\
    \ (rest s)))]\n      [(char-alphabet (first s)) (cons (first s) (encrypt (rest\
    \ s)))]\n      [(char-alphabet (first s)) (cons (first s) (encrypt (rest s)))]\n\
    \      [(char-alphabet (first s)) (cons (first s) (encrypt (rest s)))]\n     \
    \ [(char-alphabet (first s)) (cons (first s) (encrypt (rest s)))]\n      [(char-alphabet\
    \ (first s)) (cons (first s) (encrypt (rest s)))]\n      [(char-alphabet (first\
    \ s)) (cons (first s) (encrypt (rest s)))]\n      [(char-alphabet (first s)) (cons\
    \ (first s) (encrypt (rest s)))]\n      [(char-alphabet (first s)) (cons (first\
    \ s) (encrypt (rest s)))]\n      [(char-alphabet (first s)) (cons (first s) (encrypt\
    \ (rest s)))]\n      [(char-alphabet (first s)) (cons (first s) (encrypt (rest\
    \ s)))]\n      [(char-alphabet (first s)) (cons (first s) (encrypt (rest s)))]\n\
    \      [(char-alphabet (first s)) (cons (first s) (encrypt (rest s)))]\n     \
    \ [(char-alphabet (first s)) (cons (first s) (encrypt (rest s)))]\n      [(char-alphabet\
    \ (first s)) (cons (first s) (encrypt (rest s)))]\n      [(char-alphabet (first\
    \ s)) (cons (first s) (encrypt (rest s)))]\n      [(char-alphabet (first s)) (cons\
    \ (first s) (encrypt (rest s)))]\n      [(char-alphabet (first s)) (cons (first\
    \ s) (encrypt (rest s)))]\n      ", "  (let loop ((s s)\n             (acc '()))\n\
    \    (cond ((null? s) (append acc (list 'z)))\n          ((char=? (car s) 'z)\
    \ (append acc (list 'a)))\n          ((char=? (car s) 'a) (append acc (list 'b)))\n\
    \          ((char=? (car s) 'b) (append acc (list 'c)))\n          ((char=? (car\
    \ s) 'c) (append acc (list 'd)))\n          ((char=? (car s) 'd) (append acc (list\
    \ 'e)))\n          ((char=? (car s) 'e) (append acc (list 'f)))\n          ((char=?\
    \ (car s) 'f) (append acc (list 'g)))\n          ((char=? (car s) 'g) (append\
    \ acc (list 'h)))\n          ((char=? (car s) 'h) (append acc (list 'i)))\n  \
    \        ((char=? (car s) 'i) (append acc (list 'j)))\n          ((char=? (car\
    \ s) 'j) (append acc (list 'k)))\n          ((char=? (car s) 'k) (append acc (list\
    \ 'l)))\n          ((char=? (car s) 'l) (append acc (list 'm)))\n          ((char=?\
    \ (car s) 'm) (append acc (list 'n)))\n          ((char=? (car s) 'n) (append\
    \ acc (list 'o)))\n          ((char=? (car s) 'o) (append acc (list 'p)))\n  \
    \        ((char=? (car s) 'p) (append acc (list 'q)))\n          ((char=? (car\
    \ s) 'q) (append acc (list 'r)))\n          ((char=? (car s) 'r) (append acc (list\
    \ 's)))\n          ((char=? (car s) 's) (append acc (list 't)))\n          ((char=?\
    \ (car s) 't) (append acc (list 'u')))\n          ((char=? (car s) 'u) (append\
    \ acc (list 'v)))\n          ((char=? (car s) 'v) (append acc (list 'w)))\n  \
    \        ((char=? (car s) 'w) (append acc (list 'x)))\n          ((char=? (car\
    \ s) 'x) (append acc (list 'y)))\n          ((char=? (car s) 'y) (", "  (cond\n\
    \    [(empty? s) \"\"]\n    [(equal? (first s) 'a) (cons (first s) (encrypt (rest\
    \ s)))]\n    [(equal? (first s) 'b) (cons (first s) (encrypt (rest s)))]\n   \
    \ [(equal? (first s) 'c) (cons (first s) (encrypt (rest s)))]\n    [(equal? (first\
    \ s) 'd) (cons (first s) (encrypt (rest s)))]\n    [(equal? (first s) 'e) (cons\
    \ (first s) (encrypt (rest s)))]\n    [(equal? (first s) 'f) (cons (first s) (encrypt\
    \ (rest s)))]\n    [(equal? (first s) 'g) (cons (first s) (encrypt (rest s)))]\n\
    \    [(equal? (first s) 'h) (cons (first s) (encrypt (rest s)))]\n    [(equal?\
    \ (first s) 'i) (cons (first s) (encrypt (rest s)))]\n    [(equal? (first s) 'j)\
    \ (cons (first s) (encrypt (rest s)))]\n    [(equal? (first s) 'k) (cons (first\
    \ s) (encrypt (rest s)))]\n    [(equal? (first s) 'l) (cons (first s) (encrypt\
    \ (rest s)))]\n    [(equal? (first s) 'm) (cons (first s) (encrypt (rest s)))]\n\
    \    [(equal? (first s) 'n) (cons (first s) (encrypt (rest s)))]\n    [(equal?\
    \ (first s) 'o) (cons (first s) (encrypt (rest s)))]\n    [(equal? (first s) 'p)\
    \ (cons (first s) (encrypt (rest s)))]\n    [(equal? (first s) 'q) (cons (first\
    \ s) (encrypt (rest s)))]\n    [(equal? (first s) 'r) (cons (first s) (encrypt\
    \ (rest s)))]\n    [(equal? (first s) 's) (cons (first s) (encrypt (rest s)))]\n\
    \    [(equal? (first s) 't) (cons (first s) (encrypt (rest s)))]\n    [(equal?\
    \ (first s) 'u) (cons (first s) (encrypt (rest s)))]\n    [(equal? (first s) 'v)\
    \ (cons (first s) (encrypt (rest s)))]\n    [(equal? (first s) 'w) (cons (first\
    \ s) (encrypt (rest s)))]\n    [(equal? (first s) 'x) (cons (first s) (encrypt\
    \ (rest s)))", "  (cond\n    [(empty? s) \"\"]\n    [(equal? (first s) 'a) (cons\
    \ (first s) (encrypt (rest s)))]\n    [(equal? (first s) 'b) (cons (first s) (encrypt\
    \ (rest s)))]\n    [(equal? (first s) 'c) (cons (first s) (encrypt (rest s)))]\n\
    \    [(equal? (first s) 'd) (cons (first s) (encrypt (rest s)))]\n    [(equal?\
    \ (first s) 'e) (cons (first s) (encrypt (rest s)))]\n    [(equal? (first s) 'f)\
    \ (cons (first s) (encrypt (rest s)))]\n    [(equal? (first s) 'g) (cons (first\
    \ s) (encrypt (rest s)))]\n    [(equal? (first s) 'h) (cons (first s) (encrypt\
    \ (rest s)))]\n    [(equal? (first s) 'i) (cons (first s) (encrypt (rest s)))]\n\
    \    [(equal? (first s) 'j) (cons (first s) (encrypt (rest s)))]\n    [(equal?\
    \ (first s) 'k) (cons (first s) (encrypt (rest s)))]\n    [(equal? (first s) 'l)\
    \ (cons (first s) (encrypt (rest s)))]\n    [(equal? (first s) 'm) (cons (first\
    \ s) (encrypt (rest s)))]\n    [(equal? (first s) 'n) (cons (first s) (encrypt\
    \ (rest s)))]\n    [(equal? (first s) 'o) (cons (first s) (encrypt (rest s)))]\n\
    \    [(equal? (first s) 'p) (cons (first s) (encrypt (rest s)))]\n    [(equal?\
    \ (first s) 'q) (cons (first s) (encrypt (rest s)))]\n    [(equal? (first s) 'r)\
    \ (cons (first s) (encrypt (rest s)))]\n    [(equal? (first s) 's) (cons (first\
    \ s) (encrypt (rest s)))]\n    [(equal? (first s) 't) (cons (first s) (encrypt\
    \ (rest s)))]\n    [(equal? (first s) 'u) (cons (first s) (encrypt (rest s)))]\n\
    \    [(equal? (first s) 'v) (cons (first s) (encrypt (rest s)))]\n    [(equal?\
    \ (first s) 'w) (cons (first s) (encrypt (rest s)))]\n    [(equal? (first s) 'x)\
    \ (cons (first s) (encrypt (rest s)))", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (loop for c across s\n          for i from 0\n          for j from\
    \ (- i 2)\n          for k from (- j 2)\n          when (char=? c alpha)\n   \
    \       collect (cond ((char=? c #\\a) (char=? (char-after c (+ i j)) #\\a))\n\
    \                       ((char=? c #\\b) (char=? (char-after c (+ i k)) #\\b))\n\
    \                       ((char=? c #\\c) (char=? (char-after c (+ i k)) #\\c))\n\
    \                       ((char=? c #\\d) (char=? (char-after c (+ i k)) #\\d))\n\
    \                       ((char=? c #\\e) (char=? (char-after c (+ i k)) #\\e))\n\
    \                       ((char=? c #\\f) (char=? (char-after c (+ i k)) #\\f))\n\
    \                       ((char=? c #\\g) (char=? (char-after c (+ i k)) #\\g))\n\
    \                       ((char=? c #\\h) (char=? (char-after c (+ i k)) #\\h))\n\
    \                       ((char=? c #\\i) (char=? (char-after c (+ i k)) #\\i))\n\
    \                       ((char=? c #\\j) (char=? (char-after c (+ i k)) #\\j))\n\
    \                       ((char=? c #\\k) (char=? (char-after c (+ i k)) #\\k))\n\
    \                       ((char=? c #\\l) (char=? (char-after c (+ i k)) #\\l))\n\
    \                       ((char=? c #\\m) (char=? (char-after c (+ i k)) #\\m))\n\
    \                       ((char=? c #\\n) (char=? (char-after c (+ i k)) #\\n))\n\
    \                       ((char=? c #\\o) (char=? (char-after c (+ i k)) #\\o))\n\
    \                       ((char=? c #\\p) (char=? (char-after c (+ i k)) #\\p))\n\
    \                       ((char=? c #\\q) (char=? (char-after c (+ i k)) #\\q))\n\
    \                       ((char=? c ", "  (let loop ((s s)\n             (acc '()))\n\
    \    (if (empty? s)\n        acc\n        (loop (rest s)\n              (cons\
    \ (first s) acc)))))\n", "  (let ((alpha (make-array 26 \n                   \
    \       :initial-contents '(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j\
    \ #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n\
    \        (alpha-index (make-array 26 \n                                 :initial-contents\
    \ '(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\\
    o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n        (alpha-index-rotated\
    \ (make-array 26 \n                                       :initial-contents '(#\\\
    a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\\
    q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n        (alpha-index-rotated-two\
    \ (make-array 26 \n                                        :initial-contents '(#\\\
    a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\\
    q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n        (alpha-index-rotated-three\
    \ (make-array 26 \n                                         :initial-contents\
    \ '(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\\
    o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n        (alpha-index-rotated-four\
    \ (make-array 26 \n                                        :initial-contents '(#\\\
    a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n    (loop for c across s\n        \
    \  for i from 0 to 26\n          for j from 0 to 26\n          when (char=? (char-code\
    \ c) alpha (+ i j))\n          collect (+ (char-code c) (* 2 j)))))\n", "  (let\
    \ ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for c across s\n\
    \          for i from 0\n          for j from (- i 2)\n          for k from (-\
    \ j 2)\n          for l from (- k 2)\n          for m from (- l 2)\n         \
    \ for n from (- m 2)\n          for o from (- n 2)\n          for p from (- o\
    \ 2)\n          for q from (- p 2)\n          for r from (- q 2)\n          for\
    \ s from (- r 2)\n          for t from (- s 2)\n          for u from (- t 2)\n\
    \          for v from (- u 2)\n          for w from (- v 2)\n          for x from\
    \ (- w 2)\n          for y from (- x 2)\n          for z from (- y 2)\n      \
    \    for u from (- z 2)\n          for v from (- u 2)\n          for w from (-\
    \ v 2)\n          for x from (- w 2)\n          for y from (- x 2)\n         \
    \ for z from (- y 2)\n          for u from (- z 2)\n          for v from (- u\
    \ 2)\n          for w from (- v 2)\n          for x from (- w 2)\n          for\
    \ y from (- x 2)\n          for z from (- y 2)\n          for u from (- z 2)\n\
    \          for v from (- u 2)\n          for w from (- v 2)\n          for x from\
    \ (- w 2)\n          for y from (- x 2)\n          for z from (- y 2)\n      \
    \    for u from (- z 2)\n          for v from (- u 2)\n          for w from (-\
    \ v 2)\n          for x from (- w 2)\n          for y from (- x 2)\n         \
    \ for z from (- y 2)\n          for u from (- z 2)\n          for v from (- u\
    \ 2)\n          for w from (- v 2)\n          for x from (- w 2)\n          for\
    \ y from (- x 2)\n          for z from (- y 2)\n          for u from (- z 2)\n\
    \          for v from (- u 2)\n          for w from (- v 2)\n          for x from\
    \ (- w 2)\n          for y from (- x 2)\n          for z from (- y 2)\n      \
    \    for u from (- z ", "  (let ((alpha (make-array 26 \n                    \
    \      :initial-contents '(a b c d e f g h i j k l m n o p q r s t u v w x y z))))\n\
    \    (let loop ((s s)\n              (alpha (make-array 26 \n                \
    \              :initial-contents '(a b c d e f g h i j k l m n o p q r s t u v\
    \ w x y z))))\n      (cond\n        ((null? s) (make-string 0 \"\"))\n       \
    \ ((char=? (car s) #\\a) (set! alpha (rotate! alpha #\\a)))\n        ((char=?\
    \ (car s) #\\b) (set! alpha (rotate! alpha #\\b)))\n        ((char=? (car s) #\\\
    c) (set! alpha (rotate! alpha #\\c)))\n        ((char=? (car s) #\\d) (set! alpha\
    \ (rotate! alpha #\\d)))\n        ((char=? (car s) #\\e) (set! alpha (rotate!\
    \ alpha #\\e)))\n        ((char=? (car s) #\\f) (set! alpha (rotate! alpha #\\\
    f)))\n        ((char=? (car s) #\\g) (set! alpha (rotate! alpha #\\g)))\n    \
    \    ((char=? (car s) #\\h) (set! alpha (rotate! alpha #\\h)))\n        ((char=?\
    \ (car s) #\\i) (set! alpha (rotate! alpha #\\i)))\n        ((char=? (car s) #\\\
    j) (set! alpha (rotate! alpha #\\j)))\n        ((char=? (car s) #\\k) (set! alpha\
    \ (rotate! alpha #\\k)))\n        ((char=? (car s) #\\l) (set! alpha (rotate!\
    \ alpha #\\l)))\n        ((char=? (car s) #\\n) (set! alpha (rotate! alpha #\\\
    n)))\n        ((char=? (car s) #\\o) (set! alpha (rotate! alpha #\\o)))\n    \
    \    ((char=? (car s) #\\p) (set! alpha (rotate! alpha #\\p)))\n        ((char=?\
    \ (car s) #\\q) (set! alpha (rotate! alpha #\\q)))\n        ((char=? (car s) #\\\
    r) (set! alpha (rotate! alpha #\\r)))\n        ((char=? (car ", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n    (let loop ((s s)\n            \
    \   (alpha (make-array 26 :initial-element #\\a)))\n      (cond ((null? s) (list\
    \ s))\n            ((char= (first s) #\\a) (list s))\n            (else (loop\
    \ (rest s) (rotate-right alpha (char-code (first s)))))))))\n", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n    (cond\n      [(empty? s) (list\
    \ #\\a)]\n      [(char-alphabetic? s) (cons (char-alphabetic? s) alpha)]\n   \
    \   [else (cons (char-alphabetic? s) (encrypt (substring s 0 (char-index (char-alphabetic?\
    \ s) s))))]))\n  ", "  (let loop ((s s)\n             (acc '()))\n    (if (empty?\
    \ s)\n        acc\n        (loop (rest s)\n              (cons (first s) acc)))))\n",
  "  (let ((alpha (make-array 26 \n                          :initial-element #\\\
    a\n                          :element-type 'char)))\n    (loop for i from 0 to\
    \ (length s) do\n          (set! alpha (rotate! alpha 2))\n          (set! alpha\
    \ (rotate! alpha 1))\n          (set! alpha (rotate! alpha 0))\n          (set!\
    \ alpha (rotate! alpha 3))\n          (set! alpha (rotate! alpha 2))\n       \
    \   (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate! alpha 0))\n\
    \          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate! alpha\
    \ 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (", "  (let ((alpha (make-array 26 :initial-element #\\\
    a)))\n    (loop for i from 0 to (length s) do\n      (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n        (loop for j from 0 to (length s) do\n \
    \         (set! alpha (rotate! alpha j))\n          (set! alpha (rotate! alpha\
    \ (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha\
    \ (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n \
    \         (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i ", "  (let ((alpha\
    \ (make-array 26)))\n    (loop for i from 0 to 25\n          for j from 0 to 26\n\
    \          for k from 0 to 26\n          for l from 0 to 26\n          for m from\
    \ 0 to 26\n          for n from 0 to 26\n          for o from 0 to 26\n      \
    \    for p from 0 to 26\n          for q from 0 to 26\n          for r from 0\
    \ to 26\n          for s from 0 to 26\n          for t from 0 to 26\n        \
    \  for u from 0 to 26\n          for v from 0 to 26\n          for w from 0 to\
    \ 26\n          for x from 0 to 26\n          for y from 0 to 26\n          for\
    \ z from 0 to 26\n          for u from 0 to 26\n          for v from 0 to 26\n\
    \          for w from 0 to 26\n          for x from 0 to 26\n          for y from\
    \ 0 to 26\n          for z from 0 to 26\n          for u from 0 to 26\n      \
    \    for v from 0 to 26\n          for w from 0 to 26\n          for x from 0\
    \ to 26\n          for y from 0 to 26\n          for z from 0 to 26\n        \
    \  for u from 0 to 26\n          for v from 0 to 26\n          for w from 0 to\
    \ 26\n          for x from 0 to 26\n          for y from 0 to 26\n          for\
    \ z from 0 to 26\n          for u from 0 to 26\n          for v from 0 to 26\n\
    \          for w from 0 to 26\n          for x from 0 to 26\n          for y from\
    \ 0 to 26\n          for z from 0 to 26\n          for u from 0 to 26\n      \
    \    for v from 0 to 26\n          for w from 0 to 26\n          for x from 0\
    \ to 26\n          for y from 0 to 26\n          for z from 0 to 26\n        \
    \  for u from 0 to 26\n          for v from 0 to 26\n          for w from 0 to\
    \ 26\n          for x from 0 to 26\n          for y from 0 to 26\n          for\
    \ z from 0 to 26\n          for u from 0 to 26\n          for v from 0 to 26\n\
    \          for w from 0 to 26\n          for x from 0 to 26\n          for y from\
    \ 0 to 26\n          for z from 0 to 26\n          for u from 0 to 26\n      \
    \    for v from 0 to 26\n          for w from 0 to 26\n          for x from 0\
    \ to 26\n          for y from 0 to 26\n          for z from 0 to 26\n        \
    \  for u from 0 to 26\n          for v from 0 to 26\n          for w from 0 to\
    \ 26\n          for x from 0 to 26\n          for y from 0 to 26\n          for\
    \ z from 0 to ", "  (let ((alpha (make-array (length s) #:element-type 'char)))\n\
    \    (do ((i 0 (+ i 1)))\n        ((< i (length s)))\n      (set! alpha (rotate-array\
    \ alpha (- i 1) (- i 1))))\n    (string-append (map alpha (map char->int (map\
    \ char->string s))))))\n", "  (let ((alphabet (make-array 26 :initial-element\
    \ #\\a)))\n    (loop for c across s\n          for i from 0\n          for j from\
    \ (- i 2)\n          for k from (- j 2)\n          for l from (- k 2)\n      \
    \    for m from (- l 2)\n          for n from (- m 2)\n          for o from (-\
    \ n 2)\n          for p from (- o 2)\n          for q from (- p 2)\n         \
    \ for r from (- q 2)\n          for s from (- r 2)\n          for t from (- s\
    \ 2)\n          for u from (- t 2)\n          for v from (- u 2)\n          for\
    \ w from (- v 2)\n          for x from (- w 2)\n          for y from (- x 2)\n\
    \          for z from (- y 2)\n          for u from (- z 2)\n          for v from\
    \ (- u 2)\n          for w from (- v 2)\n          for x from (- w 2)\n      \
    \    for y from (- x 2)\n          for z from (- y 2)\n          for u from (-\
    \ z 2)\n          for v from (- u 2)\n          for w from (- v 2)\n         \
    \ for x from (- w 2)\n          for y from (- x 2)\n          for z from (- y\
    \ 2)\n          for u from (- z 2)\n          for v from (- u 2)\n          for\
    \ w from (- v 2)\n          for x from (- w 2)\n          for y from (- x 2)\n\
    \          for z from (- y 2)\n          for u from (- z 2)\n          for v from\
    \ (- u 2)\n          for w from (- v 2)\n          for x from (- w 2)\n      \
    \    for y from (- x 2)\n          for z from (- y 2)\n          for u from (-\
    \ z 2)\n          for v from (- u 2)\n          for w from (- v 2)\n         \
    \ for x from (- w 2)\n          for y from (- x 2)\n          for z from (- y\
    \ 2)\n          for u from (- z 2)\n          for v from (- u 2)\n          for\
    \ w from (- v 2)\n          for x from (- w 2)\n          for y from (- x 2)\n\
    \          for z from (- y 2)\n          for u from (- ", "  (cond\n    [(empty?\
    \ s) \"\"]\n    [(equal? (first s) 'a) (cons (first s) (encrypt (rest s)))]\n\
    \    [(equal? (first s) 'b) (cons (first s) (encrypt (rest s)))]\n    [(equal?\
    \ (first s) 'c) (cons (first s) (encrypt (rest s)))]\n    [(equal? (first s) 'd)\
    \ (cons (first s) (encrypt (rest s)))]\n    [(equal? (first s) 'e) (cons (first\
    \ s) (encrypt (rest s)))]\n    [(equal? (first s) 'f) (cons (first s) (encrypt\
    \ (rest s)))]\n    [(equal? (first s) 'g) (cons (first s) (encrypt (rest s)))]\n\
    \    [(equal? (first s) 'h) (cons (first s) (encrypt (rest s)))]\n    [(equal?\
    \ (first s) 'i) (cons (first s) (encrypt (rest s)))]\n    [(equal? (first s) 'j)\
    \ (cons (first s) (encrypt (rest s)))]\n    [(equal? (first s) 'k) (cons (first\
    \ s) (encrypt (rest s)))]\n    [(equal? (first s) 'l) (cons (first s) (encrypt\
    \ (rest s)))]\n    [(equal? (first s) 'm) (cons (first s) (encrypt (rest s)))]\n\
    \    [(equal? (first s) 'n) (cons (first s) (encrypt (rest s)))]\n    [(equal?\
    \ (first s) 'o) (cons (first s) (encrypt (rest s)))]\n    [(equal? (first s) 'p)\
    \ (cons (first s) (encrypt (rest s)))]\n    [(equal? (first s) 'q) (cons (first\
    \ s) (encrypt (rest s)))]\n    [(equal? (first s) 'r) (cons (first s) (encrypt\
    \ (rest s)))]\n    [(equal? (first s) 's) (cons (first s) (encrypt (rest s)))]\n\
    \    [(equal? (first s) 't) (cons (first s) (encrypt (rest s)))]\n    [(equal?\
    \ (first s) 'u) (cons (first s) (encrypt (rest s)))]\n    [(equal? (first s) 'v)\
    \ (cons (first s) (encrypt (rest s)))]\n    [(equal? (first s) 'w) (cons (first\
    \ s) (encrypt (rest s)))]\n    [(equal? (first s) 'x) (cons (first s) (encrypt\
    \ (rest s)))", "  (let ((alpha (make-alphabet)))\n    (cond [(empty? s) \"\"]\n\
    \          [(equal? (first s) 'a) (cons (first s) alpha)]\n          [(equal?\
    \ (first s) 'b) (cons (second s) alpha)]\n          [(equal? (first s) 'c) (cons\
    \ (third s) alpha)]\n          [(equal? (first s) 'd) (cons (fourth s) alpha)]\n\
    \          [(equal? (first s) 'e) (cons (fifth s) alpha)]\n          [(equal?\
    \ (first s) 'f) (cons (sixth s) alpha)]\n          [(equal? (first s) 'g) (cons\
    \ (seventh s) alpha)]\n          [(equal? (first s) 'h) (cons (eighth s) alpha)]\n\
    \          [(equal? (first s) 'i) (cons (ninth s) alpha)]\n          [(equal?\
    \ (first s) 'j) (cons (tenth s) alpha)]\n          [(equal? (first s) 'k) (cons\
    \ (eleventh s) alpha)]\n          [(equal? (first s) 'l) (cons (twelfth s) alpha)]\n\
    \          [(equal? (first s) 'm) (cons (thirteenth s) alpha)]\n          [(equal?\
    \ (first s) 'n) (cons (fourteenth s) alpha)]\n          [(equal? (first s) 'o)\
    \ (cons (fifteenth s) alpha)]\n          [(equal? (first s) 'p) (cons (sixteenth\
    \ s) alpha)]\n          [(equal? (first s) 'q) (cons (seventeenth s) alpha)]\n\
    \          [(equal? (first s) 'r) (cons (eighteenth s) alpha)]\n          [(equal?\
    \ (first s) 's) (cons (nineteenth s) alpha)]\n          [(equal? (first s) 't)\
    \ (cons (tenteenth s) alpha)]\n          [(equal? (first s) 'u) (cons (eleventeenth\
    \ s) alpha)]\n          [(equal? (first s) 'v) (cons (twelveteenth s) alpha)]\n\
    \          [(equal? (first s) 'w) (cons (thirteenteenth s) alpha)]\n         \
    \ [(equal? (first s) 'x) (cons (fourteenteenth s) alpha)]\n          [(equal?\
    \ (first s) 'y) (cons (fifteenth s) alpha)]\n          [(equal? (first s) 'z)\
    \ (cons (sixteenth s) alpha)]\n          [(equal? (first s) 'A) (cons (first s)\
    \ alpha)]\n          [(equal? (first s) 'B) (cons (", "  (let loop ((s s)\n  \
    \           (acc '()))\n    (cond ((null? s) acc)\n          ((char=? (car s)\
    \ 'z) (loop (cdr s) (cons (car s) acc)))\n          ((char=? (car s) 'a) (loop\
    \ (cdr s) (cons (car s) (cons (car s) acc))))\n          ((char=? (car s) 'b)\
    \ (loop (cdr s) (cons (car s) (cons (car s) (cons (car s) acc)))))\n         \
    \ ((char=? (car s) 'c) (loop (cdr s) (cons (car s) (cons (car s) (cons (car s)\
    \ (cons (car s) acc)))))\n          ((char=? (car s) 'd) (loop (cdr s) (cons (car\
    \ s) (cons (car s) (cons (car s) (cons (car s) acc)))))\n          ((char=? (car\
    \ s) 'e) (loop (cdr s) (cons (car s) (cons (car s) (cons (car s) (cons (car s)\
    \ (cons (car s) acc)))))\n          ((char=? (car s) 'f) (loop (cdr s) (cons (car\
    \ s) (cons (car s) (cons (car s) (cons (car s) (cons (car s) acc)))))\n      \
    \    ((char=? (car s) 'g) (loop (cdr s) (cons (car s) (cons (car s) (cons (car\
    \ s) (cons (car s) (cons (car s) acc)))))\n          ((char=? (car s) 'h) (loop\
    \ (cdr s) (cons (car s) (cons (car s) (cons (car s) (cons (car s) (cons (car s)\
    \ acc)))))\n          ((char=? (car s) 'i) (loop (cdr s) (cons (car s) (cons (car\
    \ s) (cons (car s) (cons (car s) (cons (car s) (cons (car s) acc)))))\n      \
    \    ((char=? (car s) 'j) (loop (cdr s) (cons (car s) (cons (car s) (cons (car\
    \ s) (cons (car s) (cons (car s) (cons (car ", "  (let ((alpha (make-array 26)))\n\
    \    (define (rotate x y)\n      (cond ((= x y) s)\n            ((< x y) (reverse\
    \ (substring alpha (- x y))))\n            (else (substring alpha (- x y))))\n\
    \    (do ((i 0 (+ i 26))\n         (char (char-code (substring s i))))\n     \
    \   ((< i 26)\n         (set! alpha (append alpha (list char)))\n         (set!\
    \ i (+ i 26))\n         (set! char (char-code (substring s i))))\n      (set!\
    \ alpha (append alpha (list char)))\n      (set! i (+ i 26))\n      (set! char\
    \ (char-code (substring s i))))\n    (rotate 0 0)\n    (rotate 1 1)\n    (rotate\
    \ 2 2)\n    (rotate 3 3)\n    (rotate 4 4)\n    (rotate 5 5)\n    (rotate 6 6)\n\
    \    (rotate 7 7)\n    (rotate 8 8)\n    (rotate 9 9)\n    (rotate 10 10)\n  \
    \  (rotate 11 11)\n    (rotate 12 12)\n    (rotate 13 13)\n    (rotate 14 14)\n\
    \    (rotate 15 15)\n    (rotate 16 16)\n    (rotate 17 17)\n    (rotate 18 18)\n\
    \    (rotate 19 19)\n    (rotate 20 20)\n    (rotate 21 21)\n    (rotate 22 22)\n\
    \    (rotate 23 23)\n    (rotate 24 24)\n    (rotate 25 25)\n    (rotate 26 26))))\n",
  "  (let loop ((s s)\n             (result '()))\n    (if (empty? s)\n        result\n\
    \        (loop (rest s)\n              (cons (first s)\n                    (loop\
    \ (rest s)\n                          (cons (second s)\n                     \
    \           result)))))))\n", "  (let loop ((s s)\n             (acc '()))\n \
    \   (if (empty? s)\n        acc\n        (loop (rest s)\n              (cons (first\
    \ s) acc)))))\n", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n  \
    \  (let loop ((s s)\n               (alpha (make-array 26 :initial-element #\\\
    a)))\n      (cond ((null? s) (append alpha (list #\\a)))\n            ((char=\
    \ (first s) #\\a) (append alpha (list #\\b)))\n            (else (loop (rest s)\
    \ (append alpha (list (char-code (first s))))))))))\n", "  (let ((alpha (make-array\
    \ (length s) (lambda (x) (+ x 2)))))\n    (loop for i from 0 to (length s) do\n\
    \      (set! alpha (assoc i alpha (+ i 2))))\n    (loop for i from 0 to (length\
    \ s) do\n      (set! alpha (assoc i alpha (- i 2))))\n    (loop for i from 0 to\
    \ (length s) do\n      (set! alpha (assoc i alpha (- i 1))))\n    (loop for i\
    \ from 0 to (length s) do\n      (set! alpha (assoc i alpha (+ i 1))))\n    (loop\
    \ for i from 0 to (length s) do\n      (set! alpha (assoc i alpha (+ i 2))))\n\
    \    (loop for i from 0 to (length s) do\n      (set! alpha (assoc i alpha (-\
    \ i 2))))\n    (loop for i from 0 to (length s) do\n      (set! alpha (assoc i\
    \ alpha (- i 1))))\n    (loop for i from 0 to (length s) do\n      (set! alpha\
    \ (assoc i alpha (+ i 1))))\n    (loop for i from 0 to (length s) do\n      (set!\
    \ alpha (assoc i alpha (+ i 2))))\n    (loop for i from 0 to (length s) do\n \
    \     (set! alpha (assoc i alpha (- i 2))))\n    (loop for i from 0 to (length\
    \ s) do\n      (set! alpha (assoc i alpha (- i 1))))\n    (loop for i from 0 to\
    \ (length s) do\n      (set! alpha (assoc i alpha (+ i 1))))\n    (loop for i\
    \ from 0 to (length s) do\n      (set! alpha (assoc i alpha (+ i 2))))\n    (loop\
    \ for i from 0 to (length s) do\n      (set! alpha (assoc i alpha (- i 2))))\n\
    \    (loop for i from 0 to (length s) do\n      (set! alpha (assoc i alpha (-\
    \ i 1))))\n    (loop for i from 0 to (length s) do\n      (set! alpha (assoc i\
    \ alpha (+ i 1))))\n    (loop for i from 0 to (length s) do\n      (set! alpha\
    \ (assoc i alpha (+ i 2))))\n    (loop for i from 0 to (length s) do\n      (set!\
    \ alpha (assoc i alpha (- i 2))))\n    (loop for i from 0 to (length s) do\n \
    \     (set! alpha (assoc i alpha (- i 1))))", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (define (shift a b)\n      (cond ((= b 0) a)\n            ((= b\
    \ 1) (rotate! a 1))\n            (else (rotate! a (- b 1)))))\n    (define (rotate\
    \ a b)\n      (cond ((= b 0) a)\n            ((= b 1) (shift! a 1))\n        \
    \    (else (shift! a (- b 1)))))\n    (define (shift! a b)\n      (cond ((= b\
    \ 0) a)\n            ((= b 1) (shift a 1))\n            (else (shift a (- b 1)))))\n\
    \    (define (rotate! a b)\n      (cond ((= b 0) a)\n            ((= b 1) (rotate\
    \ a 1))\n            (else (rotate a (- b 1)))))\n    (cond ((null? s) (list s))\n\
    \          ((= (length s) 0) (list s))\n          ((= (length s) 1) (cons (char->integer\
    \ (char-ref s 0)) alpha))\n          ((= (length s) 2) (cons (char->integer (char-ref\
    \ s 0)) alpha)\n                                (cons (char->integer (char-ref\
    \ s 1)) alpha)))\n          ((= (length s) 3) (cons (char->integer (char-ref s\
    \ 0)) alpha)\n                                (cons (char->integer (char-ref s\
    \ 1)) alpha)\n                                (cons (char->integer (char-ref s\
    \ 2)) alpha)))\n          ((= (length s) 4) (cons (char->integer (char-ref s 0))\
    \ alpha)\n                                (cons (char->integer (char-ref s 1))\
    \ alpha)\n                                (cons (char->integer (char-ref s 2))\
    \ alpha)\n                                (cons (char->integer (char-ref s 3))\
    \ alpha)))\n          ((= (length s) 5) (cons (char->integer (char-ref s 0)) alpha)\n\
    \                                (cons (char->integer (char-ref s 1)) alpha)\n\
    \                                (cons (char->integer (char-ref s 2)) alpha)\n\
    \                                (cons (char->integer (char-ref s 3)) alpha)\n\
    \                                (cons (char->integer (char-ref s 4)) alpha)))\n\
    \          ((= (length s) 6) (cons (char->integer (char-ref s 0)) alpha)\n   \
    \                             (cons (char->integer (char-ref s 1)) alpha)\n  \
    \                              (cons (char->integer (char-ref s 2)) alpha)\n \
    \                               (cons (char->", "  (let ((alpha (make-alphabet)))\n\
    \    (cond ((null? s) (error \"empty string\"))\n          ((char-alphabet (first\
    \ s)) (char-alphabet (first s)))\n          (else (let ((alpha (make-alphabet)))\n\
    \                   (char-alphabet (first s))\n                   (char-alphabet\
    \ (first s))\n                   (char-alphabet (first s))\n                 \
    \  (char-alphabet (first s))\n                   (char-alphabet (first s))\n \
    \                  (char-alphabet (first s))\n                   (char-alphabet\
    \ (first s))\n                   (char-alphabet (first s))\n                 \
    \  (char-alphabet (first s))\n                   (char-alphabet (first s))\n \
    \                  (char-alphabet (first s))\n                   (char-alphabet\
    \ (first s))\n                   (char-alphabet (first s))\n                 \
    \  (char-alphabet (first s))\n                   (char-alphabet (first s))\n \
    \                  (char-alphabet (first s))\n                   (char-alphabet\
    \ (first s))\n                   (char-alphabet (first s))\n                 \
    \  (char-alphabet (first s))\n                   (char-alphabet (first s))\n \
    \                  (char-alphabet (first s))\n                   (char-alphabet\
    \ (first s))\n                   (char-alphabet (first s))\n                 \
    \  (char-alphabet (first s))\n                   (char-alphabet (first s))\n \
    \                  (char-alphabet (first s))\n                   (char-alphabet\
    \ (first s))\n                   (char-alphabet (first s))\n                 \
    \  (char-alphabet (first s))\n                   (char-alphabet (first s))\n \
    \                  (char-alphabet (first s))\n                   (char-alphabet\
    \ (first s))\n                   (char-alphabet (first s))\n                 \
    \  (char-alphabet (first s))\n                   (char-alphabet (first s))\n \
    \                  (char-alphabet (first s))\n                   (char-alphabet\
    \ (first s))\n                   (char-alphabet (first s))\n                 \
    \  (char-alphabet (first s))\n                   (char-alphabet (first s))\n \
    \                  (char-alphabet (first s))\n                   (char-alphabet\
    \ (first s))\n                   (char-alphabet (first s))\n                 \
    \  (char-alphabet (first s))\n                   (char-alphabet (first s))\n \
    \                  (char-alphabet (first s))", "  (let ((alpha (make-array 26\
    \ :initial-element #\\a)))\n    (loop for c across s\n          for i from 0\n\
    \          for j from (- i 2)\n          collect (alpha (+ (char-code c) (* i\
    \ j))))))\n", "  (let loop ((s s)\n             (acc '()))\n    (cond ((null?\
    \ s) (append acc (list 'z)))\n          ((char=? (car s) 'z) (loop (cdr s) (append\
    \ acc (list 'a))))\n          ((char=? (car s) 'a) (loop (cdr s) (append acc (list\
    \ 'z))))\n          ((char=? (car s) 'z) (loop (cdr s) (append acc (list 'a))))\n\
    \          ((char=? (car s) 'a) (loop (cdr s) (append acc (list 'z))))\n     \
    \     (else (loop (cdr s) (append acc (list 'a))))))\n", "  (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s) do\n     \
    \ (let ((alpha (make-array 26 :initial-element #\\a)))\n        (loop for j from\
    \ 0 to (length s) do\n          (set! alpha (rotate! alpha j 2))\n          (set!\
    \ alpha (rotate! alpha i 2))\n          (set! alpha (rotate! alpha j 2))\n   \
    \       (set! alpha (rotate! alpha i 2))\n          (set! alpha (rotate! alpha\
    \ j 2))\n          (set! alpha (rotate! alpha i 2))\n          (set! alpha (rotate!\
    \ alpha j 2))\n          (set! alpha (rotate! alpha i 2))\n          (set! alpha\
    \ (rotate! alpha j 2))\n          (set! alpha (rotate! alpha i 2))\n         \
    \ (set! alpha (rotate! alpha j 2))\n          (set! alpha (rotate! alpha i 2))\n\
    \          (set! alpha (rotate! alpha j 2))\n          (set! alpha (rotate! alpha\
    \ i 2))\n          (set! alpha (rotate! alpha j 2))\n          (set! alpha (rotate!\
    \ alpha i 2))\n          (set! alpha (rotate! alpha j 2))\n          (set! alpha\
    \ (rotate! alpha i 2))\n          (set! alpha (rotate! alpha j 2))\n         \
    \ (set! alpha (rotate! alpha i 2))\n          (set! alpha (rotate! alpha j 2))\n\
    \          (set! alpha (rotate! alpha i 2))\n          (set! alpha (rotate! alpha\
    \ j 2))\n          (set! alpha (rotate! alpha i 2))\n          (set! alpha (rotate!\
    \ alpha j 2))\n          (set! alpha (rotate! alpha i 2))\n          (set! alpha\
    \ (rotate! alpha j 2))\n          (set! alpha (rotate! alpha i 2))\n         \
    \ (set! alpha (rotate! alpha j 2))\n          (set! alpha (rotate! alpha i 2))\n\
    \          (set! alpha (rotate! alpha j 2))\n          (set! alpha (rotate! alpha\
    \ i 2))\n          (set! alpha (rotate! alpha j 2))\n          (set! alpha (rotate!\
    \ alpha i 2))\n          (set! alpha (rotate! alpha j 2))\n          (set! alpha\
    \ (rotate! alpha i 2))\n          (set! alpha (rotate! alpha j 2))\n         \
    \ (set! alpha (rotate! alpha i 2))\n          (", "  (let loop ((s s)\n      \
    \       (result '()))\n    (if (empty? s)\n        result\n        (loop (rest\
    \ s)\n              (cons (char->integer (char->string (car s))\n            \
    \              (char->integer (char->string (cadr s))))\n                    result)))))\n",
  "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (cond [(empty? s) \"\
    \"]\n          [(char-alphabetic? s) (append alpha (encrypt (rest s)))]\n    \
    \      [else (append alpha (encrypt (rest s))) (append alpha (encrypt (first s)))]))\n\
    \  )\n", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for\
    \ c across s\n          for i from 0 to 26\n          for j from 0 to 26\n   \
    \       when (char=? c alpha)\n          collect (cond [(char=? alpha (char-code\
    \ (car alpha))) (cons (char-code (car alpha)) (cons (char-code (cdr alpha)) (cons\
    \ (char-code (car alpha)) (cons (char-code (cdr alpha)) (cons (char-code (car\
    \ alpha)) (cons (char-code (cdr alpha)) (cons (char-code (car alpha)) (cons (char-code\
    \ (cdr alpha)) (cons (char-code (car alpha)) (cons (char-code (cdr alpha)) (cons\
    \ (char-code (car alpha)) (cons (char-code (cdr alpha)) (cons (char-code (car\
    \ alpha)) (cons (char-code (cdr alpha)) (cons (char-code (car alpha)) (cons (char-code\
    \ (cdr alpha)) (cons (char-code (car alpha)) (cons (char-code (cdr alpha)) (cons\
    \ (char-code (car alpha)) (cons (char-code (cdr alpha)) (cons (char-code (car\
    \ alpha)) (cons (char-code (cdr alpha)) (cons (char-code (car alpha)) (cons (char-code\
    \ (cdr alpha)) (cons (char-code (car alpha)) (cons (char-code (cdr alpha)) (cons\
    \ (char-code (car alpha)) (cons (char-code (cdr alpha)) (cons (char-code (car\
    \ alpha)) (cons (char-code (cdr alpha)) (cons (char-code (car alpha)) (cons (char-code\
    \ (cdr alpha)) (cons (char-code (car alpha)) (cons (char-code (cdr alpha)) (cons\
    \ (char-code (car alpha)) (cons (char-code (cdr alpha)) (cons (char-code (car\
    \ alpha)) (cons (char-code (cdr alpha)) (cons (char-code (car alpha)) (cons (char-code\
    \ (cdr alpha)) (cons (char-code (car alpha)) (cons (char-code (cdr alpha)) (cons\
    \ (char-code (c", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n  \
    \  (loop for i from 0 to (length s) by 2\n          for c from 0 to 26\n     \
    \     for j from 0 to 26\n          when (char=? (char-code (substring s i j))\
    \ #\\a)\n          do (set! alpha (rotate! alpha c))\n          do (set! alpha\
    \ (rotate! alpha j))\n          collect (substring alpha (+ i c) (+ i j)))))\n",
  "  (let loop ((s s)\n             (acc '()))\n    (cond ((null? s) (append acc (list\
    \ 'z)))\n          ((char=? (car s) 'z) (append acc (list 'a)))\n          ((char=?\
    \ (car s) 'a) (append acc (list 'b)))\n          ((char=? (car s) 'b) (append\
    \ acc (list 'c)))\n          ((char=? (car s) 'c) (append acc (list 'd)))\n  \
    \        ((char=? (car s) 'd) (append acc (list 'e)))\n          ((char=? (car\
    \ s) 'e) (append acc (list 'f)))\n          ((char=? (car s) 'f) (append acc (list\
    \ 'g)))\n          ((char=? (car s) 'g) (append acc (list 'h)))\n          ((char=?\
    \ (car s) 'h) (append acc (list 'i)))\n          ((char=? (car s) 'i) (append\
    \ acc (list 'j)))\n          ((char=? (car s) 'j) (append acc (list 'k)))\n  \
    \        ((char=? (car s) 'k) (append acc (list 'l)))\n          ((char=? (car\
    \ s) 'l) (append acc (list 'm)))\n          ((char=? (car s) 'm) (append acc (list\
    \ 'n)))\n          ((char=? (car s) 'n) (append acc (list 'o)))\n          ((char=?\
    \ (car s) 'o) (append acc (list 'p)))\n          ((char=? (car s) 'p) (append\
    \ acc (list 'q)))\n          ((char=? (car s) 'q) (append acc (list 'r)))\n  \
    \        ((char=? (car s) 'r) (append acc (list 's)))\n          ((char=? (car\
    \ s) 's) (append acc (list 't)))\n          ((char=? (car s) 't) (append acc (list\
    \ 'u')))\n          ((char=? (car s) 'u) (append acc (list 'v)))\n          ((char=?\
    \ (car s) 'v) (append acc (list 'w)))\n          ((char=? (car s) 'w) (append\
    \ acc (list 'x)))\n          ((char=? (car s) 'x) (append acc (list 'y)))\n  \
    \        ((char=? (car s) 'y) (", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (let loop ((s s)\n              (alpha (make-array 26 :initial-element\
    \ #\\a)))\n      (cond\n        ((null? s) (list s))\n        ((char=? (car s)\
    \ #\\a) (list s))\n        (else (loop (cdr s) (rotate-right alpha (char-code\
    \ (car s)))))))))\n", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n\
    \    (loop for c across s\n          for i from 0 to 26\n          for j from\
    \ 0 to 26\n          when (char=? c alpha (+ i j))\n          collect (cond ((char=?\
    \ c #\\a) (cons #\\a (encrypt (substring s i 1)))\n                          \
    \ ((char=? c #\\z) (cons #\\z (encrypt (substring s i 1)))\n                 \
    \          ((char=? c #\\A) (cons #\\A (encrypt (substring s i 1)))\n        \
    \                   ((char=? c #\\Z) (cons #\\Z (encrypt (substring s i 1)))))))))\n",
  "  (let ((alpha (make-array 26 \n                          :initial-contents '(#\\\
    A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                            \
    \                       #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T \n \
    \                                                  #\\U #\\V #\\W #\\X #\\Y #\\\
    Z)))\n        (shift (make-array 26 \n                       :initial-contents\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                     \
    \                          #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T \n\
    \                                               #\\U #\\V #\\W #\\X #\\Y #\\Z))))\n\
    \    (loop for i from 0 to (length s) do\n      (let ((char (char-code (substring\
    \ s i 1)))\n            (alpha (substring alpha i 1)))\n        (set! alpha (substring\
    \ alpha (i + 1))))\n    (loop for i from 0 to (length s) do\n      (let ((char\
    \ (char-code (substring s i 1)))\n            (shift (substring shift i 1)))\n\
    \        (set! shift (substring shift (i + 1))))\n    (loop for i from 0 to (length\
    \ s) do\n      (let ((char (char-code (substring s i 1)))\n            (alpha\
    \ (substring alpha i 1)))\n        (set! alpha (substring alpha (i + 1))))\n \
    \   (loop for i from 0 to (length s) do\n      (let ((char (char-code (substring\
    \ s i 1)))\n            (shift (substring shift i 1)))\n        (set! shift (substring\
    \ shift (i + 1))))\n    (loop for i from 0 to (length s) do\n      (let ((char\
    \ (char-code (substring s i 1)))\n            (alpha (substring alpha i 1)))\n\
    \        (set! alpha (substring alpha (i + 1))))\n    (loop for i from 0 to (length\
    \ s) do\n      (let ((char (char-code (substring s i 1)))\n            (shift\
    \ (substring shift i 1)))\n        (set! shift (substring shift (i + 1))))\n \
    \   (loop for i from 0 to (length s) do\n      (let ((char (char-code (substring\
    \ s i 1)))\n            (alph", "  (let ((alpha (make-array 26 \n            \
    \              :initial-element #\\a\n                          :element-type\
    \ 'char)))\n    (loop for i from 0 to (length s) by 2\n          for j from 0\
    \ to (length s) by 2\n          when (char=? (char-ref s i) (char-ref s j))\n\
    \          do (set! alpha (rotate! alpha j))\n          do (set! alpha (rotate!\
    \ alpha i))\n          collect (substring alpha (+ i j)))))\n", "  (let ((alpha\
    \ (make-array (length s) #:initial-element #\\a)))\n    (loop for i from 0 to\
    \ (length s) do\n      (set! alpha (rotate! alpha #\\a))\n      (set! alpha (rotate!\
    \ alpha #\\b))\n      (set! alpha (rotate! alpha #\\c))\n      (set! alpha (rotate!\
    \ alpha #\\d))\n      (set! alpha (rotate! alpha #\\e))\n      (set! alpha (rotate!\
    \ alpha #\\f))\n      (set! alpha (rotate! alpha #\\g))\n      (set! alpha (rotate!\
    \ alpha #\\h))\n      (set! alpha (rotate! alpha #\\i))\n      (set! alpha (rotate!\
    \ alpha #\\j))\n      (set! alpha (rotate! alpha #\\k))\n      (set! alpha (rotate!\
    \ alpha #\\l))\n      (set! alpha (rotate! alpha #\\m))\n      (set! alpha (rotate!\
    \ alpha #\\n))\n      (set! alpha (rotate! alpha #\\o))\n      (set! alpha (rotate!\
    \ alpha #\\p))\n      (set! alpha (rotate! alpha #\\q))\n      (set! alpha (rotate!\
    \ alpha #\\r))\n      (set! alpha (rotate! alpha #\\s))\n      (set! alpha (rotate!\
    \ alpha #\\t))\n      (set! alpha (rotate! alpha #\\v))\n      (set! alpha (rotate!\
    \ alpha #\\w))\n      (set! alpha (rotate! alpha #\\x))\n      (set! alpha (rotate!\
    \ alpha #\\y))\n      (set! alpha (rotate! alpha #\\z))\n      (set! alpha (rotate!\
    \ alpha #\\A))\n      (set! alpha (rotate! alpha #\\B))\n      (set! alpha (rotate!\
    \ alpha #\\C))\n      (set! alpha (rotate! alpha #\\D))\n      (set! alpha (rotate!\
    \ alpha #\\E))\n      (set! alpha (rotate! alpha #\\F))\n      (set! alpha (rotate!\
    \ alpha #\\G))\n      (set! alpha (rotate! alpha #\\H))\n      (set! alpha (rotate!\
    \ alpha #\\I))\n      (set! alpha (rotate! alpha #\\J))\n      (set! alpha (rotate!\
    \ alpha #\\K))\n      (set! alpha (rotate! alpha #\\L))\n      (set! alpha (rotate!\
    \ alpha #\\M))\n      (set! alpha (", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (loop for i from 0 to (length s) do\n      (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n        (loop for j from 0 to (length s) do\n \
    \         (set! alpha (rotate! alpha j))\n          (set! alpha (rotate! alpha\
    \ (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha\
    \ (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n \
    \         (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set!\
    \ alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n\
    \          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set!\
    \ alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n\
    \          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set!\
    \ alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n\
    \          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set!\
    \ alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n\
    \          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set!\
    \ alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n\
    \          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i ", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s)\
    \ do\n      (let ((char (char-code (substring s i i))))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! ", " \
    \ (let ((alpha (make-array 26 \n                          :initial-element #\\\
    a\n                          :element-type 'char)))\n    (let loop ((i 0)\n  \
    \            (s s)\n              (alpha (make-array 26 \n                   \
    \            :initial-element #\\a\n                               :element-type\
    \ 'char)))\n      (cond\n        ((null? s) (make-string 0 :initial-element #\\\
    a))\n        ((char=? (car s) #\\a) (make-string 0 :initial-element #\\a))\n \
    \       (else (loop (+ i 1) (cdr s) alpha)))))\n", "  (let ((alpha (make-array\
    \ 26)))\n    (loop for i from 0 to (length s) by 2\n          for j from 0 to\
    \ (length s) by 2\n          for k from 0 to (length s) by 2\n          for l\
    \ from 0 to (length s) by 2\n          for m from 0 to (length s) by 2\n     \
    \     for n from 0 to (length s) by 2\n          for o from 0 to (length s) by\
    \ 2\n          for p from 0 to (length s) by 2\n          for q from 0 to (length\
    \ s) by 2\n          for r from 0 to (length s) by 2\n          for s from 0 to\
    \ (length s) by 2\n          for t from 0 to (length s) by 2\n          for u\
    \ from 0 to (length s) by 2\n          for v from 0 to (length s) by 2\n     \
    \     for w from 0 to (length s) by 2\n          for x from 0 to (length s) by\
    \ 2\n          for y from 0 to (length s) by 2\n          for z from 0 to (length\
    \ s) by 2\n          for a from 0 to (length s) by 2\n          for b from 0 to\
    \ (length s) by 2\n          for c from 0 to (length s) by 2\n          for d\
    \ from 0 to (length s) by 2\n          for e from 0 to (length s) by 2\n     \
    \     for f from 0 to (length s) by 2\n          for g from 0 to (length s) by\
    \ 2\n          for h from 0 to (length s) by 2\n          for i from 0 to (length\
    \ s) by 2\n          for j from 0 to (length s) by 2\n          for k from 0 to\
    \ (length s) by 2\n          for l from 0 to (length s) by 2\n          for m\
    \ from 0 to (length s) by 2\n          for n from 0 to (length s) by 2\n     \
    \     for o from 0 to (length s) by 2\n          for p from 0 to (length s) by\
    \ 2\n          for q from 0 to (length s) by 2\n          for r from 0 to (length\
    \ s) by 2\n          for s from 0 to (length s) by 2\n          for t from 0 to\
    \ (length s) by 2\n          for u from 0 to (length s) by 2\n          for v\
    \ from 0 to (length s) by 2\n          for w from 0 to (length s) by 2\n     \
    \     for x from 0 to (length s) by 2\n          for y from 0 to (length s) by\
    \ 2\n          for z from 0 to (length s) by 2\n          for a from 0 to (length\
    \ s) by 2\n          for b from 0 to (length s) by ", "  (let loop ((s s)\n  \
    \           (acc '()))\n    (cond\n      [(empty? s) (append acc (list '()))]\n\
    \      [(char=? (car s) 'z) (loop (cdr s) (append acc (list 'a)))]\n      [(char=?\
    \ (car s) 'a) (loop (cdr s) (append acc (list 'b)))]\n      [(char=? (car s) 'b)\
    \ (loop (cdr s) (append acc (list 'c)))]\n      [(char=? (car s) 'c) (loop (cdr\
    \ s) (append acc (list 'd)))]\n      [(char=? (car s) 'd) (loop (cdr s) (append\
    \ acc (list 'e)))]\n      [(char=? (car s) 'e) (loop (cdr s) (append acc (list\
    \ 'f)))]\n      [(char=? (car s) 'f) (loop (cdr s) (append acc (list 'g)))]\n\
    \      [(char=? (car s) 'g) (loop (cdr s) (append acc (list 'h)))]\n      [(char=?\
    \ (car s) 'h) (loop (cdr s) (append acc (list 'i)))]\n      [(char=? (car s) 'i)\
    \ (loop (cdr s) (append acc (list 'j)))]\n      [(char=? (car s) 'j) (loop (cdr\
    \ s) (append acc (list 'k)))]\n      [(char=? (car s) 'k) (loop (cdr s) (append\
    \ acc (list 'l)))]\n      [(char=? (car s) 'l) (loop (cdr s) (append acc (list\
    \ 'm)))]\n      [(char=? (car s) 'm) (loop (cdr s) (append acc (list 'n)))]\n\
    \      [(char=? (car s) 'n) (loop (cdr s) (append acc (list 'o)))]\n      [(char=?\
    \ (car s) 'o) (loop (cdr s) (append acc (list 'p)))]\n      [(char=? (car s) 'p)\
    \ (loop (cdr s) (append acc (list 'q)))]\n      [(char=? (car s) 'q) (loop (cdr\
    \ s) (append acc (list 'r)))]\n      [(char=? (car s) 'r) (loop (cd", "  (let\
    \ ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for i from 0 to (length\
    \ s) do\n      (let ((char (char-code (substring s i i))))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! ",
  "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for c across\
    \ s\n          for i from 0\n          for j from (- i 2)\n          for k from\
    \ (- j 2)\n          when (char=? (char-code c) alpha)\n          collect (cond\
    \ ((char=? (char-code c) 'a') (rotate-left (+ i 2) (+ j 2) (+ k 2)))\n       \
    \                ((char=? (char-code c) 'b') (rotate-left (+ i 2) (+ j 2) (+ k\
    \ 2)))\n                       ((char=? (char-code c) 'c') (rotate-left (+ i 2)\
    \ (+ j 2) (+ k 2)))\n                       ((char=? (char-code c) 'd') (rotate-left\
    \ (+ i 2) (+ j 2) (+ k 2)))\n                       ((char=? (char-code c) 'e')\
    \ (rotate-left (+ i 2) (+ j 2) (+ k 2)))\n                       ((char=? (char-code\
    \ c) 'f') (rotate-left (+ i 2) (+ j 2) (+ k 2)))\n                       ((char=?\
    \ (char-code c) 'g') (rotate-left (+ i 2) (+ j 2) (+ k 2)))\n                \
    \       ((char=? (char-code c) 'h') (rotate-left (+ i 2) (+ j 2) (+ k 2)))\n \
    \                      ((char=? (char-code c) 'i') (rotate-left (+ i 2) (+ j 2)\
    \ (+ k 2)))\n                       ((char=? (char-code c) 'j') (rotate-left (+\
    \ i 2) (+ j 2) (+ k 2)))\n                       ((char=? (char-code c) 'k') (rotate-left\
    \ (+ i 2) (+ j 2) (+ k 2)))\n                       ((char=? (char-code c) 'l')\
    \ (rotate-left (+ i 2) (+ j 2) (+ k 2)))\n                       ((char=? (char-code\
    \ c) 'm') (rotate-left (+ i 2) (+ j 2) (+ k 2)))\n                       ((char=?\
    \ (char-code c) 'n') (rotate-left (+ i 2) (+ j 2) (+ k 2)))\n                \
    \       ((char=? (char-code c) 'o') (rotate-left (+ i 2) (+ j 2) (+ k ", "  (let\
    \ ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for i from 0 to (length\
    \ s) do\n      (let ((alpha (make-array 26 :initial-element #\\a)))\n        (loop\
    \ for j from 0 to (length s) do\n          (set! alpha (rotate! alpha j))\n  \
    \        (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set!\
    \ alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n\
    \          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set!\
    \ alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n\
    \          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set!\
    \ alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n\
    \          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set!\
    \ alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n\
    \          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set!\
    \ alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n\
    \          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set!\
    \ alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n\
    \          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i ", "  (cond\n    [(empty? s) \"\"]\n    [(equal? (first s) 'a) (cons\
    \ (first s) (encrypt (rest s)))]\n    [(equal? (first s) 'b) (cons (first s) (encrypt\
    \ (rest s)))]\n    [(equal? (first s) 'c) (cons (first s) (encrypt (rest s)))]\n\
    \    [(equal? (first s) 'd) (cons (first s) (encrypt (rest s)))]\n    [(equal?\
    \ (first s) 'e) (cons (first s) (encrypt (rest s)))]\n    [(equal? (first s) 'f)\
    \ (cons (first s) (encrypt (rest s)))]\n    [(equal? (first s) 'g) (cons (first\
    \ s) (encrypt (rest s)))]\n    [(equal? (first s) 'h) (cons (first s) (encrypt\
    \ (rest s)))]\n    [(equal? (first s) 'i) (cons (first s) (encrypt (rest s)))]\n\
    \    [(equal? (first s) 'j) (cons (first s) (encrypt (rest s)))]\n    [(equal?\
    \ (first s) 'k) (cons (first s) (encrypt (rest s)))]\n    [(equal? (first s) 'l)\
    \ (cons (first s) (encrypt (rest s)))]\n    [(equal? (first s) 'm) (cons (first\
    \ s) (encrypt (rest s)))]\n    [(equal? (first s) 'n) (cons (first s) (encrypt\
    \ (rest s)))]\n    [(equal? (first s) 'o) (cons (first s) (encrypt (rest s)))]\n\
    \    [(equal? (first s) 'p) (cons (first s) (encrypt (rest s)))]\n    [(equal?\
    \ (first s) 'q) (cons (first s) (encrypt (rest s)))]\n    [(equal? (first s) 'r)\
    \ (cons (first s) (encrypt (rest s)))]\n    [(equal? (first s) 's) (cons (first\
    \ s) (encrypt (rest s)))]\n    [(equal? (first s) 't) (cons (first s) (encrypt\
    \ (rest s)))]\n    [(equal? (first s) 'u) (cons (first s) (encrypt (rest s)))]\n\
    \    [(equal? (first s) 'v) (cons (first s) (encrypt (rest s)))]\n    [(equal?\
    \ (first s) 'w) (cons (first s) (encrypt (rest s)))]\n    [(equal? (first s) 'x)\
    \ (cons (first s) (encrypt (rest s)))", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (let loop ((i 0) (s s))\n      (cond ((= i 26)\n             (string->list\
    \ s))\n            ((char=? (char-code (char alpha (+ i 2)) s) #\\a)\n       \
    \      (char=? (char-code (char alpha (+ i 2)) s) #\\b)\n             (char=?\
    \ (char-code (char alpha (+ i 2)) s) #\\c)\n             (char=? (char-code (char\
    \ alpha (+ i 2)) s) #\\d)\n             (char=? (char-code (char alpha (+ i 2))\
    \ s) #\\e)\n             (char=? (char-code (char alpha (+ i 2)) s) #\\f)\n  \
    \           (char=? (char-code (char alpha (+ i 2)) s) #\\g)\n             (char=?\
    \ (char-code (char alpha (+ i 2)) s) #\\h)\n             (char=? (char-code (char\
    \ alpha (+ i 2)) s) #\\i)\n             (char=? (char-code (char alpha (+ i 2))\
    \ s) #\\j)\n             (char=? (char-code (char alpha (+ i 2)) s) #\\k)\n  \
    \           (char=? (char-code (char alpha (+ i 2)) s) #\\l)\n             (char=?\
    \ (char-code (char alpha (+ i 2)) s) #\\m)\n             (char=? (char-code (char\
    \ alpha (+ i 2)) s) #\\n)\n             (char=? (char-code (char alpha (+ i 2))\
    \ s) #\\o)\n             (char=? (char-code (char alpha (+ i 2)) s) #\\p)\n  \
    \           (char=? (char-code (char alpha (+ i 2)) s) #\\q)\n             (char=?\
    \ (char-code (char alpha (+ i 2)) s) #\\r)\n             (char=? (char-code (char\
    \ alpha (+ i 2)) s) #\\s)\n             (char=? (char-code (char alpha (+ i 2))\
    \ s) #\\t)\n             (char=? (char-code (char alpha (+ i 2)) s) #\\v)\n  \
    \           (char=? (char-code (char alpha (+ i 2)) s) #\\w)\n             (char=?\
    \ (char-code (char alpha (+ i 2)) s) #\\x)\n             (char=? (char-code (char ",
  "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (cond [(empty? s) (list\
    \ #\\a)]\n          [(char-alphabetic? s) (cons (char-alphabetic? (first s)) (encrypt\
    \ (rest s)))]\n          [(char-alphabetic? (first s)) (cons (char-alphabetic?\
    \ (first s)) (encrypt (rest s)))]\n          [else (cons (char-alphabetic? (first\
    \ s)) (encrypt (rest s)))]\n          [else (cons (char-alphabetic? (first s))\
    \ (encrypt (rest s)))]\n          [else (cons (char-alphabetic? (first s)) (encrypt\
    \ (rest s)))]\n          [else (cons (char-alphabetic? (first s)) (encrypt (rest\
    \ s)))]\n          [else (cons (char-alphabetic? (first s)) (encrypt (rest s)))]\n\
    \          [else (cons (char-alphabetic? (first s)) (encrypt (rest s)))]\n   \
    \       [else (cons (char-alphabetic? (first s)) (encrypt (rest s)))]\n      \
    \    [else (cons (char-alphabetic? (first s)) (encrypt (rest s)))]\n         \
    \ [else (cons (char-alphabetic? (first s)) (encrypt (rest s)))]\n          [else\
    \ (cons (char-alphabetic? (first s)) (encrypt (rest s)))]\n          [else (cons\
    \ (char-alphabetic? (first s)) (encrypt (rest s)))]\n          [else (cons (char-alphabetic?\
    \ (first s)) (encrypt (rest s)))]\n          [else (cons (char-alphabetic? (first\
    \ s)) (encrypt (rest s)))]\n          [else (cons (char-alphabetic? (first s))\
    \ (encrypt (rest s)))]\n          [else (cons (char-alphabetic? (first s)) (encrypt\
    \ (rest s)))]\n          [else (cons (char-alphabetic? (first s)) (encrypt (rest\
    \ s)))]\n          [else (cons (char-alphabetic? (first s)) (encrypt (rest s)))]\n\
    \          [else (cons (char-alphabetic? (first s)) (encrypt (rest s)))]\n   \
    \       [else (cons (char-alphabetic? (first s)) (encrypt (rest s)))]\n      \
    \    [else (cons (char", "  (let ((alpha (make-array 26 \n                   \
    \       :initial-contents '(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j\
    \ #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z))\n\
    \        (shift (make-array 26 \n                        :initial-contents '(#\\\
    1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9 #\\10 #\\11 #\\12 #\\13 #\\14 #\\15\
    \ #\\16 #\\17 #\\18 #\\19 #\\20 #\\21 #\\22 #\\23 #\\24 #\\25 #\\26 #\\27 #\\\
    28 #\\29 #\\30 #\\31 #\\32 #\\33 #\\34 #\\35 #\\36 #\\37 #\\38 #\\39 #\\40))\n\
    \        (result (make-array (length s) \n                          :initial-contents\
    \ '())))\n    (loop for i from 0 to (length s) do\n          (let ((char (char-code\
    \ (char s i))))\n            (set! alpha (rotate! alpha char))\n            (set!\
    \ alpha (rotate! alpha char))\n            (set! alpha (rotate! alpha char))\n\
    \            (set! alpha (rotate! alpha char))\n            (set! alpha (rotate!\
    \ alpha char))\n            (set! alpha (rotate! alpha char))\n            (set!\
    \ alpha (rotate! alpha char))\n            (set! alpha (rotate! alpha char))\n\
    \            (set! alpha (rotate! alpha char))\n            (set! alpha (rotate!\
    \ alpha char))\n            (set! alpha (rotate! alpha char))\n            (set!\
    \ alpha (rotate! alpha char))\n            (set! alpha (rotate! alpha char))\n\
    \            (set! alpha (rotate! alpha char))\n            (set! alpha (rotate!\
    \ alpha char))\n            (set! alpha (rotate! alpha char))\n            (set!\
    \ alpha (rotate! alpha char))\n            (set! alpha (rotate! alpha char))\n\
    \            (set! alpha (rotate! alpha char))\n            (set! alpha (rotate!\
    \ alpha char))\n            (set! alpha (rotate! alpha char))\n            (set!\
    \ alpha (rotate! alpha char))\n            (set! alpha (rotate", "  (let ((alpha\
    \ (make-alphabet)))\n    (define (encrypt s alpha)\n      (cond ((null? s) '())\n\
    \            ((char-alphabet (first s)) \n             (cons (first s) (encrypt\
    \ (rest s) (rot-alpha (first s) alpha))))\n            (else (cons (first s) (encrypt\
    \ (rest s) alpha))))\n      (encrypt s alpha)))\n  (encrypt s alpha))\n", "  (let\
    \ ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for i from 0 to (length\
    \ s) do\n      (let ((alpha (make-array 26 :initial-element #\\a)))\n        (loop\
    \ for j from 0 to (length s) do\n          (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n            (loop for k from 0 to (length s) do\n              (let\
    \ ((alpha (make-array 26 :initial-element #\\a)))\n                (loop for l\
    \ from 0 to (length s) do\n                  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n                    (loop for m from 0 to (length s) do\n         \
    \             (let ((alpha (make-array 26 :initial-element #\\a)))\n         \
    \               (loop for n from 0 to (length s) do\n                        \
    \  (let ((alpha (make-array 26 :initial-element #\\a)))\n                    \
    \        (loop for o from 0 to (length s) do\n                              (let\
    \ ((alpha (make-array 26 :initial-element #\\a)))\n                          \
    \      (loop for p from 0 to (length s) do\n                                 \
    \ (let ((alpha (make-array 26 :initial-element #\\a)))\n                     \
    \               (loop for q from 0 to (length s) do\n                        \
    \              (let ((alpha (make-array 26 :initial-element #\\a)))\n        \
    \                                (loop for r from 0 to (length s) do\n       \
    \                                   (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n                                            (loop for s from\n    \
    \                                                  0 to (length s) do\n      \
    \                                        (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n                                                (loop for t from 0\
    \ to (length s) do\n                                                  (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n                                  \
    \                  (loop for u from 0 to (length s) do\n                     \
    \                                 (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n                                                        (loop for v\
    \ from 0 to (length s) do\n                                                  \
    \        (let ((alpha (make-array 26 :initial-element #\\a)))\n              \
    \                                              (loop for w from 0 to (length s)\
    \ do\n                                                              (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n                                  \
    \                              (loop for x from 0 to (length s) do\n         \
    \                                                         (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n                                              \
    \                      (loop for y from 0 to (length s) do\n                 \
    \                                                     (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n                                              \
    \                          (loop for z from ", "  (let ((alpha (make-array 26\
    \ :initial-element #\\a)))\n    (cond [(empty? s) (list '#\\a)]\n          [(char-alphabetic?\
    \ s) (list '#\\a)]\n          [(char-alphabetic? (first s)) (list '#\\a)]\n  \
    \        [(char-alphabetic? (second s)) (list '#\\a)]\n          [(char-alphabetic?\
    \ (third s)) (list '#\\a)]\n          [(char-alphabetic? (fourth s)) (list '#\\\
    a)]\n          [(char-alphabetic? (fifth s)) (list '#\\a)]\n          [(char-alphabetic?\
    \ (sixth s)) (list '#\\a)]\n          [(char-alphabetic? (seventh s)) (list '#\\\
    a)]\n          [(char-alphabetic? (eighth s)) (list '#\\a)]\n          [(char-alphabetic?\
    \ (ninth s)) (list '#\\a)]\n          [(char-alphabetic? (tenth s)) (list '#\\\
    a)]\n          [(char-alphabetic? (eleventh s)) (list '#\\a)]\n          [(char-alphabetic?\
    \ (twelfth s)) (list '#\\a)]\n          [(char-alphabetic? (thirteenth s)) (list\
    \ '#\\a)]\n          [(char-alphabetic? (fourteenth s)) (list '#\\a)]\n      \
    \    [(char-alphabetic? (fifteenth s)) (list '#\\a)]\n          [(char-alphabetic?\
    \ (sixteenth s)) (list '#\\a)]\n          [(char-alphabetic? (seventeenth s))\
    \ (list '#\\a)]\n          [(char-alphabetic? (eighteenth s)) (list '#\\a)]\n\
    \          [(char-alphabetic? (nineteenth s)) (list '#\\a)]\n          [(char-alphabetic?\
    \ (twentieth s)) (list '#\\a)]\n          [(char-alphabetic? (twenty-first s))\
    \ (list '#\\a)]\n          [(char-alphabetic? (twenty-second s)) (list '#\\a)]\n\
    \          [(char-alphabetic? (twenty-third s)) (list '#\\a)]\n          [(char-alphabe",
  "  (let loop ((s s)\n             (acc '()))\n    (cond ((null? s) (append acc (list\
    \ s)))\n          ((char=? (car s) 'z) (loop (cdr s) (append acc (list 'a))))\n\
    \          ((char=? (car s) 'a) (loop (cdr s) (append acc (list 'b))))\n     \
    \     ((char=? (car s) 'b) (loop (cdr s) (append acc (list 'c))))\n          ((char=?\
    \ (car s) 'c) (loop (cdr s) (append acc (list 'd))))\n          ((char=? (car\
    \ s) 'd) (loop (cdr s) (append acc (list 'e))))\n          ((char=? (car s) 'e)\
    \ (loop (cdr s) (append acc (list 'f))))\n          ((char=? (car s) 'f) (loop\
    \ (cdr s) (append acc (list 'g))))\n          ((char=? (car s) 'g) (loop (cdr\
    \ s) (append acc (list 'h))))\n          ((char=? (car s) 'h) (loop (cdr s) (append\
    \ acc (list 'i))))\n          ((char=? (car s) 'i) (loop (cdr s) (append acc (list\
    \ 'j))))\n          ((char=? (car s) 'j) (loop (cdr s) (append acc (list 'k))))\n\
    \          ((char=? (car s) 'k) (loop (cdr s) (append acc (list 'l))))\n     \
    \     ((char=? (car s) 'l) (loop (cdr s) (append acc (list 'm))))\n          ((char=?\
    \ (car s) 'm) (loop (cdr s) (append acc (list 'n))))\n          ((char=? (car\
    \ s) 'n) (loop (cdr s) (append acc (list 'o))))\n          ((char=? (car s) 'o)\
    \ (loop (cdr s) (append acc (list 'p))))\n          ((char=? (car s) 'p) (loop\
    \ (cdr s) (append acc (list 'q))))\n          ((char=? (car s) 'q) (loop (cdr\
    \ s) (append acc (list 'r))))\n          ((char=? (car s) 'r) (loop (cdr s) (append\
    \ acc (list 's))))\n          ((char=? (car s) 's) ", "  (let ((alpha (make-array\
    \ (length s) #:initial-element #\\a)))\n    (loop for i from 0 to (length s) do\n\
    \      (set! alpha (rotate! alpha 2))\n      (set! alpha (rotate! alpha 1))\n\
    \      (set! alpha (rotate! alpha 0))\n      (set! alpha (rotate! alpha -1))\n\
    \      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate! alpha -3))\n\
    \      (set! alpha (rotate! alpha -4))\n      (set! alpha (rotate! alpha -5))\n\
    \      (set! alpha (rotate! alpha -6))\n      (set! alpha (rotate! alpha -7))\n\
    \      (set! alpha (rotate! alpha -8))\n      (set! alpha (rotate! alpha -9))\n\
    \      (set! alpha (rotate! alpha -10))\n      (set! alpha (rotate! alpha -11))\n\
    \      (set! alpha (rotate! alpha -12))\n      (set! alpha (rotate! alpha -13))\n\
    \      (set! alpha (rotate! alpha -14))\n      (set! alpha (rotate! alpha -15))\n\
    \      (set! alpha (rotate! alpha -16))\n      (set! alpha (rotate! alpha -17))\n\
    \      (set! alpha (rotate! alpha -18))\n      (set! alpha (rotate! alpha -19))\n\
    \      (set! alpha (rotate! alpha -20))\n      (set! alpha (rotate! alpha -21))\n\
    \      (set! alpha (rotate! alpha -22))\n      (set! alpha (rotate! alpha -23))\n\
    \      (set! alpha (rotate! alpha -24))\n      (set! alpha (rotate! alpha -25))\n\
    \      (set! alpha (rotate! alpha -26))\n      (set! alpha (rotate! alpha -27))\n\
    \      (set! alpha (rotate! alpha -28))\n      (set! alpha (rotate! alpha -29))\n\
    \      (set! alpha (rotate! alpha -30))\n      (set! alpha (rotate! alpha -31))\n\
    \      (set! alpha (rotate! alpha -32))\n      (set! alpha (rotate! alpha -33))\n\
    \      (set! alpha (rotate! alpha -34))\n      (set! alpha (rotate! alpha -35))\n\
    \      (set! alpha (rotate! alpha -36))\n      (set! alpha (rotate! alpha -37))\n\
    \      (set! alpha (rotate! alpha -38))\n      (set! alpha (rotate! alpha -39))\n\
    \      (set! alpha (rotate! ", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (loop for i from 0 to (length s) by 2\n          for j from 0 to\
    \ (length s) by 2\n          for k from 0 to (length s) by 2\n          when (=\
    \ (substring s i j) (substring s k l))\n          do (set! alpha (rotate! alpha\
    \ #\\a))\n          do (set! alpha (rotate! alpha #\\b))\n          do (set! alpha\
    \ (rotate! alpha #\\c))\n          do (set! alpha (rotate! alpha #\\d))\n    \
    \      do (set! alpha (rotate! alpha #\\e))\n          do (set! alpha (rotate!\
    \ alpha #\\f))\n          do (set! alpha (rotate! alpha #\\g))\n          do (set!\
    \ alpha (rotate! alpha #\\h))\n          do (set! alpha (rotate! alpha #\\i))\n\
    \          do (set! alpha (rotate! alpha #\\j))\n          do (set! alpha (rotate!\
    \ alpha #\\k))\n          do (set! alpha (rotate! alpha #\\l))\n          do (set!\
    \ alpha (rotate! alpha #\\m))\n          do (set! alpha (rotate! alpha #\\n))\n\
    \          do (set! alpha (rotate! alpha #\\o))\n          do (set! alpha (rotate!\
    \ alpha #\\p))\n          do (set! alpha (rotate! alpha #\\q))\n          do (set!\
    \ alpha (rotate! alpha #\\r))\n          do (set! alpha (rotate! alpha #\\s))\n\
    \          do (set! alpha (rotate! alpha #\\t))\n          do (set! alpha (rotate!\
    \ alpha #\\u))\n          do (set! alpha (rotate! alpha #\\v))\n          do (set!\
    \ alpha (rotate! alpha #\\w))\n          do (set! alpha (rotate! alpha #\\x))\n\
    \          do (set! alpha (rotate! alpha #\\y))\n          do (set! alpha (rotate!\
    \ alpha #\\z))\n          do (set! alpha (rotate! alpha #\\0))\n          do (set!\
    \ alpha (rotate! alpha #\\1))\n          do (set! alpha (rotate! alpha #\\2))\n\
    \          do (set! alpha (rotate! alpha #\\3))\n          do (set! alpha (rotate!\
    \ alpha #\\4))\n          ", "  (let ((alpha (make-array (length s) #:initial-element\
    \ #\\a)))\n    (loop for i from 0 to (length s) do\n      (set! alpha (rotate!\
    \ alpha 2))\n      (set! alpha (rotate! alpha 1))\n      (set! alpha (rotate!\
    \ alpha 0))\n      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate!\
    \ alpha -2))\n      (set! alpha (rotate! alpha -3))\n      (set! alpha (rotate!\
    \ alpha -4))\n      (set! alpha (rotate! alpha -5))\n      (set! alpha (rotate!\
    \ alpha -6))\n      (set! alpha (rotate! alpha -7))\n      (set! alpha (rotate!\
    \ alpha -8))\n      (set! alpha (rotate! alpha -9))\n      (set! alpha (rotate!\
    \ alpha -10))\n      (set! alpha (rotate! alpha -11))\n      (set! alpha (rotate!\
    \ alpha -12))\n      (set! alpha (rotate! alpha -13))\n      (set! alpha (rotate!\
    \ alpha -14))\n      (set! alpha (rotate! alpha -15))\n      (set! alpha (rotate!\
    \ alpha -16))\n      (set! alpha (rotate! alpha -17))\n      (set! alpha (rotate!\
    \ alpha -18))\n      (set! alpha (rotate! alpha -19))\n      (set! alpha (rotate!\
    \ alpha -20))\n      (set! alpha (rotate! alpha -21))\n      (set! alpha (rotate!\
    \ alpha -22))\n      (set! alpha (rotate! alpha -23))\n      (set! alpha (rotate!\
    \ alpha -24))\n      (set! alpha (rotate! alpha -25))\n      (set! alpha (rotate!\
    \ alpha -26))\n      (set! alpha (rotate! alpha -27))\n      (set! alpha (rotate!\
    \ alpha -28))\n      (set! alpha (rotate! alpha -29))\n      (set! alpha (rotate!\
    \ alpha -30))\n      (set! alpha (rotate! alpha -31))\n      (set! alpha (rotate!\
    \ alpha -32))\n      (set! alpha (rotate! alpha -33))\n      (set! alpha (rotate!\
    \ alpha -34))\n      (set! alpha (rotate! alpha -35))\n      (set! alpha (rotate!\
    \ alpha -36))\n      (set! alpha (rotate! alpha -37))\n      (set! alpha (rotate!\
    \ alpha -38))\n      (set! alpha (rotate! alpha -39))\n      (set! alpha (rotate! ",
  "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (cond ((null? s) (list\
    \ s))\n          ((char=? (car s) #\\a) (list s))\n          ((char=? (car s)\
    \ #\\z) (list s))\n          ((char=? (car s) #\\A) (list s))\n          ((char=?\
    \ (car s) #\\Z) (list s))\n          (else (append (rotate-right (rotate-left\
    \ (car s)) alpha (+ alpha (length alpha))) \n                      (encrypt (rotate-right\
    \ (cdr s)))))))\n  ", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n\
    \    (loop for i from 0 to (length s) do\n      (set! alpha (rotate! alpha 2))\n\
    \      (set! alpha (rotate! alpha 1))\n      (set! alpha (rotate! alpha 0))\n\
    \      (set! alpha (rotate! alpha 3))\n      (set! alpha (rotate! alpha 6))\n\
    \      (set! alpha (rotate! alpha 9))\n      (set! alpha (rotate! alpha 12))\n\
    \      (set! alpha (rotate! alpha 15))\n      (set! alpha (rotate! alpha 18))\n\
    \      (set! alpha (rotate! alpha 21)))\n    (string-append (substring s 0 i)\
    \ alpha)))\n", "  (let ((alphabet (list 'a b c d e f g h i j k l m n o p q r s\
    \ t u v w x y z)))\n    (let loop ((i 0) (result '()))\n      (if (< i 26)\n \
    \         (loop (+ i 1) (cons (car alphabet) (cons (car alphabet) (cons (car alphabet)\
    \ (cons (car alphabet) (cons (car alphabet) (cons (car alphabet) (cons (car alphabet)\
    \ (cons (car alphabet) (cons (car alphabet) (cons (car alphabet) (cons (car alphabet)\
    \ (cons (car alphabet) (cons (car alphabet) (cons (car alphabet) (cons (car alphabet)\
    \ (cons (car alphabet) (cons (car alphabet) (cons (car alphabet) (cons (car alphabet)\
    \ (cons (car alphabet) (cons (car alphabet) (cons (car alphabet) (cons (car alphabet)\
    \ (cons (car alphabet) (cons (car alphabet) (cons (car alphabet) (cons (car alphabet)\
    \ (cons (car alphabet) (cons (car alphabet) (cons (car alphabet) (cons (car alphabet)\
    \ (cons (car alphabet) (cons (car alphabet) (cons (car alphabet) (cons (car alphabet)\
    \ (cons (car alphabet) (cons (car alphabet) (cons (car alphabet) (cons (car alphabet)\
    \ (cons (car alphabet) (cons (car alphabet) (cons (car alphabet) (cons (car alphabet)\
    \ (cons (car alphabet) (cons (car alphabet) (cons (car alphabet) (cons (car alphabet)\
    \ (cons (car alphabet) (cons (car alphabet) (cons (car alphabet) (cons (car alphabet)\
    \ (cons (car alphabet) (cons (car alphabet) (cons (car alphabet) (cons (car alphabet)\
    \ (cons (car alphabet) (cons (car alphabet) (cons (car alphabet) (cons (car alphabet)\
    \ (cons (car alphabet) (cons (car alphabet) (cons (car alphabet) (cons (car alphabet)\
    \ (cons (car alphabet) (cons (car alphabet) (cons (car alphabet) (cons (car alphabet)\
    \ (cons (car alphabet) (cons (car alphabet) (cons (car alphabet) (cons (car alphabet)\
    \ (cons (car alphabet) (cons (car alphabet) (cons (car alphabet) (cons (car alphabet",
  "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for c across\
    \ s\n          for i from 0\n          for j from (- i 2)\n          for k from\
    \ (- j 2)\n          collect (alpha (+ i j) (+ k 26))))\n  ;; Now we need to rotate\
    \ the letters so that they shift down by two \n  ;; multiplied to two places.\n\
    \  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for c across\
    \ s\n          for i from 0\n          for j from (- i 2)\n          for k from\
    \ (- j 2)\n          collect (alpha (+ i j) (+ k 26))))\n  ;; Now we need to rotate\
    \ the letters so that they shift down by two \n  ;; multiplied to two places.\n\
    \  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for c across\
    \ s\n          for i from 0\n          for j from (- i 2)\n          for k from\
    \ (- j 2)\n          collect (alpha (+ i j) (+ k 26))))\n  ;; Now we need to rotate\
    \ the letters so that they shift down by two \n  ;; multiplied to two places.\n\
    \  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for c across\
    \ s\n          for i from 0\n          for j from (- i 2)\n          for k from\
    \ (- j 2)\n          collect (alpha (+ i j) (+ k 26))))\n  ;; Now we need to rotate\
    \ the letters so that they shift down by two \n  ;; multiplied to two places.\n\
    \  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for c across\
    \ s\n          for i from 0\n          for j from (- i 2)\n          for k from\
    \ (- j 2)\n          collect (alpha (+ i j) (+ k 26))))\n  ;; Now we need to rotate\
    \ the letters so that they shift down by two \n  ;; multiplied to two places.\n\
    \  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for c across\
    \ s\n          for i from 0\n          for j from (- i 2)\n          for k from\
    \ (- j 2)\n          collect (alpha (+ i j) (+ k 26))))\n  ;; Now we need to rotate\
    \ the letters so that they shift down by two \n  ;; multiplied to ", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s)\
    \ do\n      (let ((char (char-code (substring s i i))))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! ", " \
    \ (let ((alpha (make-array 26)))\n    (define (rotate-alpha alpha n)\n      (let\
    \ ((alpha (make-array 26)))\n        (set! alpha (subseq alpha (- n 1) (+ n 1))))\n\
    \      (set! alpha (subseq alpha (- n 1) (+ n 1))))\n    (set! alpha (subseq alpha\
    \ (- n 1) (+ n 1))))\n    (set! alpha (subseq alpha (- n 1) (+ n 1))))\n    (set!\
    \ alpha (subseq alpha (- n 1) (+ n 1))))\n    (set! alpha (subseq alpha (- n 1)\
    \ (+ n 1))))\n    (set! alpha (subseq alpha (- n 1) (+ n 1))))\n    (set! alpha\
    \ (subseq alpha (- n 1) (+ n 1))))\n    (set! alpha (subseq alpha (- n 1) (+ n\
    \ 1))))\n    (set! alpha (subseq alpha (- n 1) (+ n 1))))\n    (set! alpha (subseq\
    \ alpha (- n 1) (+ n 1))))\n    (set! alpha (subseq alpha (- n 1) (+ n 1))))\n\
    \    (set! alpha (subseq alpha (- n 1) (+ n 1))))\n    (set! alpha (subseq alpha\
    \ (- n 1) (+ n 1))))\n    (set! alpha (subseq alpha (- n 1) (+ n 1))))\n    (set!\
    \ alpha (subseq alpha (- n 1) (+ n 1))))\n    (set! alpha (subseq alpha (- n 1)\
    \ (+ n 1))))\n    (set! alpha (subseq alpha (- n 1) (+ n 1))))\n    (set! alpha\
    \ (subseq alpha (- n 1) (+ n 1))))\n    (set! alpha (subseq alpha (- n 1) (+ n\
    \ 1))))\n    (set! alpha (subseq alpha (- n 1) (+ n 1))))\n    (set! alpha (subseq\
    \ alpha (- n 1) (+ n 1))))\n    (set! alpha (subseq alpha (- n 1) (+ n 1))))\n\
    \    (set! alpha (subseq alpha (- n 1) (+ n 1))))\n    (set! alpha (subseq alpha\
    \ (- n 1) (+ n 1))))\n    (set! alpha (subseq alpha (- n 1) (+ n 1))))\n    (set!\
    \ alpha (subseq alpha (- n 1) (+ n ", "  (let ((alpha (make-array 26 \n      \
    \                    :initial-element #\\a\n                          :element-type\
    \ 'char)))\n    (let loop ((s s)\n               (alpha (make-array 26 \n    \
    \                            :initial-element #\\a\n                         \
    \       :element-type 'char)))\n      (cond ((null? s) (append alpha (list #\\\
    a)))\n            ((char=? (car s) #\\a) (append alpha (list #\\b)))\n       \
    \     (else (loop (cdr s) (append alpha (list (char-code (car s)))))))))\n", " \
    \ (let ((alphabet (make-array (length s) #:initial-element #\\a)))\n    (loop\
    \ for i from 0 to (length s) do\n      (set! alphabet (rotate! alphabet (- i 2))))\n\
    \    (string-append (map char->string alphabet) s)))\n", "  (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s) do\n     \
    \ (let ((alpha (make-array 26 :initial-element #\\a)))\n        (loop for j from\
    \ 0 to (length s) do\n          (let ((alpha (make-array 26 :initial-element #\\\
    a)))\n            (if (= i j)\n                (set! alpha (rotate! alpha 2))\n\
    \                (set! alpha (rotate! alpha 1)))\n            (set! alpha (rotate!\
    \ alpha 1))\n            (set! alpha (rotate! alpha -1)))\n        (set! alpha\
    \ (rotate! alpha -2))\n        (set! alpha (rotate! alpha 1))\n        (set! alpha\
    \ (rotate! alpha -1))\n        (set! alpha (rotate! alpha 2))\n        (set! alpha\
    \ (rotate! alpha 1))\n        (set! alpha (rotate! alpha -1))\n        (set! alpha\
    \ (rotate! alpha 2))\n        (set! alpha (rotate! alpha 1))\n        (set! alpha\
    \ (rotate! alpha -1))\n        (set! alpha (rotate! alpha 2))\n        (set! alpha\
    \ (rotate! alpha 1))\n        (set! alpha (rotate! alpha -1))\n        (set! alpha\
    \ (rotate! alpha 2))\n        (set! alpha (rotate! alpha 1))\n        (set! alpha\
    \ (rotate! alpha -1))\n        (set! alpha (rotate! alpha 2))\n        (set! alpha\
    \ (rotate! alpha 1))\n        (set! alpha (rotate! alpha -1))\n        (set! alpha\
    \ (rotate! alpha 2))\n        (set! alpha (rotate! alpha 1))\n        (set! alpha\
    \ (rotate! alpha -1))\n        (set! alpha (rotate! alpha 2))\n        (set! alpha\
    \ (rotate! alpha 1))\n        (set! alpha (rotate! alpha -1))\n        (set! alpha\
    \ (rotate! alpha 2))\n        (set! alpha (rotate! alpha 1))\n        (set! alpha\
    \ (rotate! alpha -1))\n        (set! alpha (rotate! alpha 2))\n        (set! alpha\
    \ (rotate! alpha 1))\n        (set! alpha (rotate! alpha -1))\n        (set! alpha\
    \ (rotate! alpha 2))\n        (set! alpha (rotate! alpha 1))\n        (set! alpha\
    \ (rotate! alpha -1))\n        (set! alpha (rotate! alpha 2))\n        (set! alpha\
    \ (rotate! alpha 1))\n        (set! alpha (rotate! alpha -1))\n        (set! alpha\
    \ (rotate! alpha 2))\n        (set! alpha (rotate! alpha 1))\n        (set! alpha\
    \ (rotate! alpha -1))\n        (set! ", "  (let ((alphabet (list 'a 'b 'c 'd 'e\
    \ 'f 'g 'h 'i 'j 'k 'l 'm 'n 'o 'p 'q 'r 's 't 'u 'v 'w 'x 'y 'z)))\n    (let\
    \ loop ((s s)\n              (result '()))\n      (if (empty? s)\n          result\n\
    \          (loop (rest s)\n                (cons (first s)\n                 \
    \     (loop (rest s)\n                            (cons (second s)\n         \
    \                         result)))))))\n", "  (let loop ((s s)\n            \
    \ (acc '()))\n    (if (empty? s)\n        acc\n        (loop (rest s)\n      \
    \        (cons (first s)\n                    (loop (rest s)\n               \
    \           (cons (first s)\n                                (cons (first acc)\n\
    \                                      (cons (first s)\n                     \
    \                       (cons (first acc)\n                                  \
    \                (cons (first s)\n                                           \
    \             (cons (first acc)\n                                            \
    \                  (cons (first s)\n                                         \
    \                           (cons (first acc)\n                              \
    \                                            (cons (first s)\n               \
    \                                                             (cons (first acc)\n\
    \                                                                            \
    \      (cons (first s)\n                                                     \
    \                                   (cons (first acc)\n                      \
    \                                                                        (cons\
    \ (first s)\n                                                                \
    \                                    (cons (first acc)\n                     \
    \                                                                            \
    \         (cons (first s)\n                                                  \
    \                                                          (cons (first acc)\n\
    \                                                                            \
    \                                      (cons (first s)\n                     \
    \                                                                            \
    \                       (cons (first acc)\n                                  \
    \                                                                            \
    \                (cons (first s)\n                                           \
    \                                                                            \
    \             (cons (first acc)\n                                            \
    \                                                                            \
    \              (cons (first s)\n                                             \
    \                                                                            \
    \               (cons (first acc)\n                                          \
    \                                                                            \
    \                        (cons (first s)\n                                   \
    \                                                                            \
    \                                     (cons (first acc)\n                    \
    \                                                                            \
    \                                                      (cons (first s)\n     \
    \                                                                            \
    \                                                                       (cons\
    \ (first acc)\n                                                              \
    \                                                                            \
    \                (cons (first s)\n                                           \
    \                                                                            \
    \                                     (cons (first acc)\n                    \
    \                                                                            \
    \                                                              (cons (first s)\n\
    \                                                                            \
    \                                                                            \
    \        (cons (first acc)\n                                                 \
    \                                                                            \
    \                                     (cons (first s)\n                      \
    \                                                                            \
    \                                                                  (cons (first\
    \ acc)\n                                                                     \
    \                                                                            \
    \                     (cons (first s)\n                                      \
    \                                                                            \
    \                                                      (cons (first acc)\n   \
    \                                                                            \
    \                                                                            \
    \               (cons (first s)\n                                            \
    \                                                                            \
    \                                                    (cons (first acc)\n     \
    \                                                                            \
    \                                                                            \
    \                 (cons (first s)\n                                          \
    \                                                                            \
    \                                                          (cons (first acc)\n\
    \                                                                            \
    \                                                                            \
    \                          (cons (first s)\n                                 \
    \                                                                            \
    \                                                                       (cons\
    \ (first acc)\n                                                              \
    \                                                                            \
    \                                            (cons (first s)\n               \
    \                                                                            \
    \                                                                            \
    \                 (cons (first acc)\n                                        \
    \                                                                            \
    \                                                                      (cons (first\
    \ s)\n                                                                       \
    \                                                                            \
    \                                         (cons (first acc)\n                \
    \                                                                            \
    \                                                                            \
    \                      (cons (first s)\n                                     \
    \                                                                            \
    \                                                                            \
    \   (cons (first acc)\n                                                      \
    \                                                                            \
    \                                                                (cons (first\
    \ s)\n                                                                       \
    \                                                                            \
    \                                                 (cons (first acc)\n        \
    \                                                                            \
    \                                                                            \
    \                                      (cons (first s)\n                     \
    \                                                                            \
    \                                                                            \
    \                           (cons (first acc)\n                              \
    \                                                                            \
    \                                                                            \
    \                    (cons (first s)\n                                       \
    \                                                                            \
    \                                                                            \
    \             (cons (first acc)\n                                            \
    \                                                                            \
    \                                                                            \
    \          (con", "  (let ((alpha (make-alphabet (length s))))\n    (loop for\
    \ i from 0 to (length s) do\n          (set! alpha (rotate-alpha (substring alpha\
    \ (+ i 1) (+ i 1))))\n          (set! alpha (rotate-alpha (substring alpha (+\
    \ i 1) (+ i 1))))\n          (set! alpha (rotate-alpha (substring alpha (+ i 1)\
    \ (+ i 1))))\n          (set! alpha (rotate-alpha (substring alpha (+ i 1) (+\
    \ i 1))))\n          (set! alpha (rotate-alpha (substring alpha (+ i 1) (+ i 1))))\n\
    \          (set! alpha (rotate-alpha (substring alpha (+ i 1) (+ i 1))))\n   \
    \       (set! alpha (rotate-alpha (substring alpha (+ i 1) (+ i 1))))\n      \
    \    (set! alpha (rotate-alpha (substring alpha (+ i 1) (+ i 1))))\n         \
    \ (set! alpha (rotate-alpha (substring alpha (+ i 1) (+ i 1))))\n          (set!\
    \ alpha (rotate-alpha (substring alpha (+ i 1) (+ i 1))))\n          (set! alpha\
    \ (rotate-alpha (substring alpha (+ i 1) (+ i 1))))\n          (set! alpha (rotate-alpha\
    \ (substring alpha (+ i 1) (+ i 1))))\n          (set! alpha (rotate-alpha (substring\
    \ alpha (+ i 1) (+ i 1))))\n          (set! alpha (rotate-alpha (substring alpha\
    \ (+ i 1) (+ i 1))))\n          (set! alpha (rotate-alpha (substring alpha (+\
    \ i 1) (+ i 1))))\n          (set! alpha (rotate-alpha (substring alpha (+ i 1)\
    \ (+ i 1))))\n          (set! alpha (rotate-alpha (substring alpha (+ i 1) (+\
    \ i 1))))\n          (set! alpha (rotate-alpha (substring alpha (+ i 1) (+ i 1))))\n\
    \          (set! alpha (rotate-alpha (substring alpha (+ i 1) (+ i 1))))\n   \
    \       (set! alpha (rotate-alpha (substring alpha (+ i 1) (+ i 1))))\n      \
    \    (set! alpha (rotate-alpha (substring alpha (+ i 1) (+ i 1))))\n         \
    \ (set! alph", "  (let loop ((s s)\n             (acc '()))\n    (cond\n     \
    \ [(empty? s) (append acc (list s))]\n      [(char-alphabet (first s)) (loop (rest\
    \ s) (cons (first s) acc))]\n      [else (loop (rest s) (cons (first s) acc))])))\n",
  "  (let ((alpha (make-array 26)))\n    (set! alpha (rotate-array alpha 'left))\n\
    \    (string-append (map alpha (string->list s)))))\n", "  (let loop ((s s)\n\
    \             (acc '()))\n    (cond\n      [(empty? s) (append acc (list 'z))]\n\
    \      [(char-alphabet (first s)) (loop (rest s) (cons (first s) acc))]\n    \
    \  [else (loop (rest s) (cons (first s) acc))])))\n", "  (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n    (loop for c across s\n          for i from\
    \ 0\n          for j from (- i 2)\n          for k from (- j 2)\n          when\
    \ (char=? c alpha)\n          collect (+ (char-code c) (* j k))))\n</code>\n<|/\
    \ a tags=racket,encryption,scheme |>\n<| c |>\nI like your solution, however it\
    \ only works for alphabet of 26 letters. I need a solution that works for any\
    \ alphabet.\n<|/ c |>\n<| c |>\nI added a solution that works for any alphabet.\n\
    <|/ c |>\n<| c |>\nI added a solution that works for any alphabet.\n<|/ c |>\n\
    <| a dscore=1 |>\nHere's a solution that works for any alphabet (including non-alphabetic\
    \ characters):\n<code>", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n\
    \    (let loop ((s s)\n               (alpha (make-array 26 :initial-element #\\\
    a)))\n      (cond ((null? s) (append alpha (list #\\a)))\n            ((char=\
    \ (first s) #\\a) (append alpha (list #\\b)))\n            (else (loop (rest s)\
    \ (rotate! alpha #\\a)))))))\n", "  (let loop ((s s)\n             (result '()))\n\
    \    (cond ((null? s) result)\n          ((char=? (car s) 'z) (loop (cdr s) (cons\
    \ (car s) result)))\n          ((char=? (car s) 'a) (loop (cdr s) (cons (car s)\
    \ result)))\n          ((char=? (car s) 'b) (loop (cdr s) (cons (car s) result)))\n\
    \          ((char=? (car s) 'c) (loop (cdr s) (cons (car s) result)))\n      \
    \    ((char=? (car s) 'd) (loop (cdr s) (cons (car s) result)))\n          ((char=?\
    \ (car s) 'e) (loop (cdr s) (cons (car s) result)))\n          ((char=? (car s)\
    \ 'f) (loop (cdr s) (cons (car s) result)))\n          ((char=? (car s) 'g) (loop\
    \ (cdr s) (cons (car s) result)))\n          ((char=? (car s) 'h) (loop (cdr s)\
    \ (cons (car s) result)))\n          ((char=? (car s) 'i) (loop (cdr s) (cons\
    \ (car s) result)))\n          ((char=? (car s) 'j) (loop (cdr s) (cons (car s)\
    \ result)))\n          ((char=? (car s) 'k) (loop (cdr s) (cons (car s) result)))\n\
    \          ((char=? (car s) 'l) (loop (cdr s) (cons (car s) result)))\n      \
    \    ((char=? (car s) 'm) (loop (cdr s) (cons (car s) result)))\n          ((char=?\
    \ (car s) 'n) (loop (cdr s) (cons (car s) result)))\n          ((char=? (car s)\
    \ 'o) (loop (cdr s) (cons (car s) result)))\n          ((char=? (car s) 'p) (loop\
    \ (cdr s) (cons (car s) result)))\n          ((char=? (car s) 'q) (loop (cdr s)\
    \ (cons (car s) result)))\n          ((char=? (car s) 'r) (loop (cdr s) (cons\
    \ (car s) result)))\n          ((char=? (car s) 's) (loop (cdr ", "  (let loop\
    \ ((s s)\n             (result '()))\n    (if (empty? s)\n        result\n   \
    \     (loop (rest s)\n              (cons (first s)\n                    (loop\
    \ (rest s)\n                          (cons (second s)\n                     \
    \           result)))))))\n", "  (let loop ((s s)\n             (alphabet (list\
    \ 'a 'b 'c 'd 'e 'f 'g 'h 'i 'j 'k 'l 'm 'n 'o 'p 'q 'r 's 't 'u 'v 'w 'x 'y 'z)))\n\
    \    (if (null? s)\n        (string->symbol (first alphabet))\n        (loop (rest\
    \ s) (cons (first alphabet) (loop (rest s) (cons (second alphabet) (loop (rest\
    \ s) (cons (third alphabet) (loop (rest s) (cons (fourth alphabet) (loop (rest\
    \ s) (cons (fifth alphabet) (loop (rest s) (cons (sixth alphabet) (loop (rest\
    \ s) (cons (seventh alphabet) (loop (rest s) (cons (eighth alphabet) (loop (rest\
    \ s) (cons (ninth alphabet) (loop (rest s) (cons (tenth alphabet) (loop (rest\
    \ s) (cons (eleventh alphabet) (loop (rest s) (cons (twelfth alphabet) (loop (rest\
    \ s) (cons (thirteenth alphabet) (loop (rest s) (cons (fourteenth alphabet) (loop\
    \ (rest s) (cons (fifteenth alphabet) (loop (rest s) (cons (sixteenth alphabet)\
    \ (loop (rest s) (cons (seventeenth alphabet) (loop (rest s) (cons (eighteenth\
    \ alphabet) (loop (rest s) (cons (nineteenth alphabet) (loop (rest s) (cons (twentieth\
    \ alphabet) (loop (rest s) (cons (twenty-first alphabet) (loop (rest s) (cons\
    \ (twenty-second alphabet) (loop (rest s) (cons (twenty-third alphabet) (loop\
    \ (rest s) (cons (twenty-fourth alphabet) (loop (rest s) (cons (twenty-fifth alphabet)\
    \ (loop (rest s) (cons (twenty-sixth alphabet) (loop (rest s) (cons (twenty-seventh\
    \ alphabet) (loop (rest s) (cons (twenty-eighth alphabet) (loop (rest s) (cons\
    \ (twenty-ninth alphabet) (loop (rest s) (cons (thirtieth alphabet) (loop (rest\
    \ s) (cons (thirty-first alphabet) (loop (rest s) (cons (thirty-second alphabet)\
    \ (loop (rest s) (cons (thirty-third alphabet) (loop (rest s) (cons (thirty-fourth\
    \ alphabet) (loop (rest s) (", "  (let ((alpha (make-alphabet)))\n    (let loop\
    \ ((s s)\n               (alpha (alphabet)))\n      (cond\n        ((null? s)\
    \ (make-string 0 0))\n        ((equal? (char-code (first s)) 97) (make-string\
    \ 0 0))\n        ((equal? (char-code (first s)) 65) (make-string 0 0))\n     \
    \   ((equal? (char-code (first s)) 97) (make-string 0 0))\n        ((equal? (char-code\
    \ (first s)) 65) (make-string 0 0))\n        ((equal? (char-code (first s)) 97)\
    \ (make-string 0 0))\n        ((equal? (char-code (first s)) 65) (make-string\
    \ 0 0))\n        ((equal? (char-code (first s)) 97) (make-string 0 0))\n     \
    \   ((equal? (char-code (first s)) 65) (make-string 0 0))\n        ((equal? (char-code\
    \ (first s)) 97) (make-string 0 0))\n        ((equal? (char-code (first s)) 65)\
    \ (make-string 0 0))\n        ((equal? (char-code (first s)) 97) (make-string\
    \ 0 0))\n        ((equal? (char-code (first s)) 65) (make-string 0 0))\n     \
    \   ((equal? (char-code (first s)) 97) (make-string 0 0))\n        ((equal? (char-code\
    \ (first s)) 65) (make-string 0 0))\n        ((equal? (char-code (first s)) 97)\
    \ (make-string 0 0))\n        ((equal? (char-code (first s)) 65) (make-string\
    \ 0 0))\n        ((equal? (char-code (first s)) 97) (make-string 0 0))\n     \
    \   ((equal? (char-code (first s)) 65) (make-string 0 0))\n        ((equal? (char-code\
    \ (first s)) 97) (make-string 0 0))\n        ((equal? (char-code (first s)) 65)\
    \ (make-string 0 0))\n        ((equal? (char-code (first s)) 97) (make-string\
    \ 0 0))\n        ((equal? (char-code (first s)) 65) (make-string 0 0))\n     \
    \   ((equal? (char-code (first s)) 97) (make-string 0 0))\n        ((equal? (char-code\
    \ (first s)) 65) (make-string 0 0))\n        ((equal? (char-code (first s)) 97)\
    \ (make-string 0 0))\n        ((equal? (char-code (first s)) 65) (make-string\
    \ 0 0))\n        ((equal? (char-", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (loop for i from 0 to (length s) do\n      (set! alpha (rotate!\
    \ alpha 2))\n      (set! alpha (rotate! alpha 1))\n      (set! alpha (rotate!\
    \ alpha 0))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! ", "  (let ((alpha\
    \ (make-alphabet (length s))))\n    (let loop ((i 0) (acc '()))\n      (if (<\
    \ i (length s))\n          (loop (+ i 1) (cons (char->int (substring s i i)) acc))\n\
    \          (loop (+ i 1) acc)))))\n", "  (let ((alpha (make-array 26)))\n    (loop\
    \ for i from 0 to (length s) do\n      (set! alpha (subarray alpha (+ i 2) (+\
    \ i 2))\n            (subarray alpha (+ i 1) (+ i 1))\n            (subarray alpha\
    \ (+ i 0) (+ i 0))\n            (subarray alpha (+ i 0) (+ i 1)))\n      (set!\
    \ alpha (subarray alpha (+ i 2) (+ i 2))\n            (subarray alpha (+ i 1)\
    \ (+ i 1))\n            (subarray alpha (+ i 0) (+ i 0))\n            (subarray\
    \ alpha (+ i 0) (+ i 1)))\n      (set! alpha (subarray alpha (+ i 2) (+ i 2))\n\
    \            (subarray alpha (+ i 1) (+ i 1))\n            (subarray alpha (+\
    \ i 0) (+ i 0))\n            (subarray alpha (+ i 0) (+ i 1)))\n      (set! alpha\
    \ (subarray alpha (+ i 2) (+ i 2))\n            (subarray alpha (+ i 1) (+ i 1))\n\
    \            (subarray alpha (+ i 0) (+ i 0))\n            (subarray alpha (+\
    \ i 0) (+ i 1)))\n      (set! alpha (subarray alpha (+ i 2) (+ i 2))\n       \
    \     (subarray alpha (+ i 1) (+ i 1))\n            (subarray alpha (+ i 0) (+\
    \ i 0))\n            (subarray alpha (+ i 0) (+ i 1)))\n      (set! alpha (subarray\
    \ alpha (+ i 2) (+ i 2))\n            (subarray alpha (+ i 1) (+ i 1))\n     \
    \       (subarray alpha (+ i 0) (+ i 0))\n            (subarray alpha (+ i 0)\
    \ (+ i 1)))\n      (set! alpha (subarray alpha (+ i 2) (+ i 2))\n            (subarray\
    \ alpha (+ i 1) (+ i 1))\n            (subarray alpha (+ i 0) (+ i 0))\n     \
    \       (subarray alpha (+ i 0) (+ i 1)))\n      (set! alpha (subarray alpha (+\
    \ i 2) (+ i 2))\n            (subarray alpha (+ i 1) (+ i 1))\n            (subarray\
    \ alpha (+ i 0) (+ i 0))\n            (subarray alpha (+ i 0) (+ i 1)))\n    \
    \  (set! alpha (subarray alpha (+ i 2) (+ i 2))\n            (subarray alpha (+\
    \ i 1) (+ i 1))\n            (subarray alpha (+ i 0) (+ i 0))\n", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s)\
    \ do\n      (set! alpha (rotate! alpha 2))\n      (set! alpha (rotate! alpha 1))\n\
    \      (set! alpha (rotate! alpha 0))\n      (set! alpha (rotate! alpha -1))\n\
    \      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate! alpha -3))\n\
    \      (set! alpha (rotate! alpha -4))\n      (set! alpha (rotate! alpha -5))\n\
    \      (set! alpha (rotate! alpha -6))\n      (set! alpha (rotate! alpha -7))\n\
    \      (set! alpha (rotate! alpha -8))\n      (set! alpha (rotate! alpha -9))\n\
    \      (set! alpha (rotate! alpha -10))\n      (set! alpha (rotate! alpha -11))\n\
    \      (set! alpha (rotate! alpha -12))\n      (set! alpha (rotate! alpha -13))\n\
    \      (set! alpha (rotate! alpha -14))\n      (set! alpha (rotate! alpha -15))\n\
    \      (set! alpha (rotate! alpha -16))\n      (set! alpha (rotate! alpha -17))\n\
    \      (set! alpha (rotate! alpha -18))\n      (set! alpha (rotate! alpha -19))\n\
    \      (set! alpha (rotate! alpha -20))\n      (set! alpha (rotate! alpha -21))\n\
    \      (set! alpha (rotate! alpha -22))\n      (set! alpha (rotate! alpha -23))\n\
    \      (set! alpha (rotate! alpha -24))\n      (set! alpha (rotate! alpha -25))\n\
    \      (set! alpha (rotate! alpha -26))\n      (set! alpha (rotate! alpha -27))\n\
    \      (set! alpha (rotate! alpha -28))\n      (set! alpha (rotate! alpha -29))\n\
    \      (set! alpha (rotate! alpha -30))\n      (set! alpha (rotate! alpha -31))\n\
    \      (set! alpha (rotate! alpha -32))\n      (set! alpha (rotate! alpha -33))\n\
    \      (set! alpha (rotate! alpha -34))\n      (set! alpha (rotate! alpha -35))\n\
    \      (set! alpha (rotate! alpha -36))\n      (set! alpha (rotate! alpha -37))\n\
    \      (set! alpha (rotate! alpha -38))\n      (set! alpha (rotate! alpha -39))\n\
    \      (set! alpha (rotate! alpha -40", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (let loop ((s s)\n               (alpha (make-array 26 :initial-element\
    \ #\\a)))\n      (cond ((null? s) s)\n            ((char=? (car s) #\\a) alpha)\n\
    \            (else (loop (cdr s) (rotate-right alpha (char-code (car s)))))))))\n",
  "  (let ((alpha (make-alphabet)))\n    (loop for c across s\n          for i from\
    \ 0\n          for j from (- i 2)\n          for k from (- j 2)\n          for\
    \ l from (- k 2)\n          for m from (- l 2)\n          for n from (- m 2)\n\
    \          for o from (- n 2)\n          for p from (- o 2)\n          for q from\
    \ (- p 2)\n          for r from (- q 2)\n          for s from (- r 2)\n      \
    \    for t from (- s 2)\n          for u from (- t 2)\n          for v from (-\
    \ u 2)\n          for w from (- v 2)\n          for x from (- w 2)\n         \
    \ for y from (- x 2)\n          for z from (- y 2)\n          for u from (- z\
    \ 2)\n          for v from (- u 2)\n          for w from (- v 2)\n          for\
    \ x from (- w 2)\n          for y from (- x 2)\n          for z from (- y 2)\n\
    \          for u from (- z 2)\n          for v from (- u 2)\n          for w from\
    \ (- v 2)\n          for x from (- w 2)\n          for y from (- x 2)\n      \
    \    for z from (- y 2)\n          for u from (- z 2)\n          for v from (-\
    \ u 2)\n          for w from (- v 2)\n          for x from (- w 2)\n         \
    \ for y from (- x 2)\n          for z from (- y 2)\n          for u from (- z\
    \ 2)\n          for v from (- u 2)\n          for w from (- v 2)\n          for\
    \ x from (- w 2)\n          for y from (- x 2)\n          for z from (- y 2)\n\
    \          for u from (- z 2)\n          for v from (- u 2)\n          for w from\
    \ (- v 2)\n          for x from (- w 2)\n          for y from (- x 2)\n      \
    \    for z from (- y 2)\n          for u from (- z 2)\n          for v from (-\
    \ u 2)\n          for w from (- v 2)\n          for x from (- w 2)\n         \
    \ for y from (- x 2)\n          for z from (- y 2)\n          for u from (- z\
    \ 2)\n          for v from (", "  (let ((alpha (make-alphabet (length s))))\n\
    \    (let loop ((i 0) (alpha (make-alphabet (length s))))\n      (if (< i length)\n\
    \          (let ((char (char-ref s i)))\n            (set! alpha (rotate-alpha\
    \ (char-ref alpha char) (- i 2))))\n          (set! alpha (rotate-alpha (char-ref\
    \ alpha char) (- (length s) i))))\n    (make-string (- (length s) (length alpha))\
    \ #\\space)\n    (loop (length s) alpha)))\n", "  (let ((alpha (make-array 26\
    \ :initial-element #\\a)))\n    (loop for i from 0 to (length s) do\n      (set!\
    \ alpha (rotate! alpha 2))\n      (set! alpha (rotate! alpha 1))\n      (set!\
    \ alpha (rotate! alpha 0))\n      (set! alpha (rotate! alpha 2))\n      (set!\
    \ alpha (rotate! alpha 1))\n      (set! alpha (rotate! alpha 0))\n      (set!\
    \ alpha (rotate! alpha 2))\n      (set! alpha (rotate! alpha 1))\n      (set!\
    \ alpha (rotate! alpha 0))\n      (set! alpha (rotate! alpha 2))\n      (set!\
    \ alpha (rotate! alpha 1))\n      (set! alpha (rotate! alpha 0))\n      (set!\
    \ alpha (rotate! alpha 2))\n      (set! alpha (rotate! alpha 1))\n      (set!\
    \ alpha (rotate! alpha 0))\n      (set! alpha (rotate! alpha 2))\n      (set!\
    \ alpha (rotate! alpha 1))\n      (set! alpha (rotate! alpha 0))\n      (set!\
    \ alpha (rotate! alpha 2))\n      (set! alpha (rotate! alpha 1))\n      (set!\
    \ alpha (rotate! alpha 0))\n      (set! alpha (rotate! alpha 2))\n      (set!\
    \ alpha (rotate! alpha 1))\n      (set! alpha (rotate! alpha 0))\n      (set!\
    \ alpha (rotate! alpha 2))\n      (set! alpha (rotate! alpha 1))\n      (set!\
    \ alpha (rotate! alpha 0))\n      (set! alpha (rotate! alpha 2))\n      (set!\
    \ alpha (rotate! alpha 1))\n      (set! alpha (rotate! alpha 0))\n      (set!\
    \ alpha (rotate! alpha 2))\n      (set! alpha (rotate! alpha 1))\n      (set!\
    \ alpha (rotate! alpha 0))\n      (set! alpha (rotate! alpha 2))\n      (set!\
    \ alpha (rotate! alpha 1))\n      (set! alpha (rotate! alpha 0))\n      (set!\
    \ alpha (rotate! alpha 2))\n      (set! alpha (rotate! alpha 1))\n      (set!\
    \ alpha (rotate! alpha 0))\n      (set! alpha (rotate! alpha 2))\n      (set!\
    \ alpha (rotate! alpha 1))\n      (set! alpha (rotate! alpha 0))\n      (set!\
    \ alpha (rotate! alpha 2))\n      (set! alpha (rotate! alpha 1))\n      (set!\
    \ alpha (rotate! alpha 0))\n      (set! alpha (rotate! alpha 2))\n      (set!\
    \ alpha (rotate! alpha 1))\n      (set! alpha (rotate! alpha 0))\n      (set!\
    \ alpha (", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop\
    \ for c across s\n          for i from 0\n          for j from (- i 2)\n     \
    \     for k from (- j 2)\n          when (char=? c alpha)\n          collect (cond\
    \ ((char=? c #\\a) (concat alpha (substring alpha (+ i 1) (+ j 1))))\n       \
    \                ((char=? c #\\b) (concat alpha (substring alpha (+ i 1) (+ j\
    \ 1))))\n                       ((char=? c #\\c) (concat alpha (substring alpha\
    \ (+ i 1) (+ j 1))))\n                       ((char=? c #\\d) (concat alpha (substring\
    \ alpha (+ i 1) (+ j 1))))\n                       ((char=? c #\\e) (concat alpha\
    \ (substring alpha (+ i 1) (+ j 1))))\n                       ((char=? c #\\f)\
    \ (concat alpha (substring alpha (+ i 1) (+ j 1))))\n                       ((char=?\
    \ c #\\g) (concat alpha (substring alpha (+ i 1) (+ j 1))))\n                \
    \       ((char=? c #\\h) (concat alpha (substring alpha (+ i 1) (+ j 1))))\n \
    \                      ((char=? c #\\i) (concat alpha (substring alpha (+ i 1)\
    \ (+ j 1))))\n                       ((char=? c #\\j) (concat alpha (substring\
    \ alpha (+ i 1) (+ j 1))))\n                       ((char=? c #\\k) (concat alpha\
    \ (substring alpha (+ i 1) (+ j 1))))\n                       ((char=? c #\\l)\
    \ (concat alpha (substring alpha (+ i 1) (+ j 1))))\n                       ((char=?\
    \ c #\\m) (concat alpha (substring alpha (+ i 1) (+ j 1))))\n                \
    \       ((char=? c #\\n) (concat alpha (substring alpha (+ i 1) (+ j 1))))\n \
    \                      ((char=? c #\\o) (concat alpha (substring alpha (+ i 1)\
    \ (+ j 1))))\n                       ((char=? c #\\p) (concat alpha (substring\
    \ alpha (+ i 1) (+ j 1))))\n                       ((char=? c #\\q) (concat alpha\
    \ (substring alpha (+ i 1) (+ ", "  (let ((alpha (make-array 26 \n           \
    \               :initial-contents '(a b c d e f g h i j k l m n o p q r s t u\
    \ v w x y z))\n         alpha-index (make-array 26 \n                        \
    \       :initial-contents '(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\
    \ 20 21 22 23 24 25 26)))\n    (define (encrypt s alpha-index)\n      (let ((alpha-index\
    \ (make-array 26 \n                                   :initial-contents '(0 1\
    \ 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26)))\n    \
    \    (alpha (make-array 26 \n                        :initial-contents '(a b c\
    \ d e f g h i j k l m n o p q r s t u v w x y z)))\n        (let ((alpha-index\
    \ (make-array 26 \n                                     :initial-contents '(0\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26)))\n  \
    \        (alpha (make-array 26 \n                          :initial-contents '(a\
    \ b c d e f g h i j k l m n o p q r s t u v w x y z))))\n        (let ((alpha-index\
    \ (make-array 26 \n                                     :initial-contents '(0\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26)))\n  \
    \        (alpha (make-array 26 \n                          :initial-contents '(a\
    \ b c d e f g h i j k l m n o p q r s t u v w x y z))))\n        (let ((alpha-index\
    \ (make-array 26 \n                                     :initial-contents '(0\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26)))\n  \
    \        (alpha (make-array 26 \n                          :initial-contents '(a\
    \ b c d e f g h i j k l m n o p q r s t u v w x y z))))\n        (let ((alpha-index\
    \ (make-array 26 \n                                     :initial-contents '(0\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26)))\n  \
    \        (alpha (make-array 26 \n                          :initial-contents '(a\
    \ b c d e ", "  (let loop ((s s)\n             (acc '()))\n    (if (empty? s)\n\
    \        acc\n        (loop (rest s)\n              (cons (first s) acc)))))\n",
  "  (let loop ((s s)\n             (result '()))\n    (cond ((null? s) result)\n\
    \          ((char=? (car s) 'z) (loop (cdr s) (cons (car s) result)))\n      \
    \    ((char=? (car s) 'a) (loop (cdr s) (cons (car s) result)))\n          ((char=?\
    \ (car s) 'b) (loop (cdr s) (cons (car s) result)))\n          ((char=? (car s)\
    \ 'c) (loop (cdr s) (cons (car s) result)))\n          ((char=? (car s) 'd) (loop\
    \ (cdr s) (cons (car s) result)))\n          ((char=? (car s) 'e) (loop (cdr s)\
    \ (cons (car s) result)))\n          ((char=? (car s) 'f) (loop (cdr s) (cons\
    \ (car s) result)))\n          ((char=? (car s) 'g) (loop (cdr s) (cons (car s)\
    \ result)))\n          ((char=? (car s) 'h) (loop (cdr s) (cons (car s) result)))\n\
    \          ((char=? (car s) 'i) (loop (cdr s) (cons (car s) result)))\n      \
    \    ((char=? (car s) 'j) (loop (cdr s) (cons (car s) result)))\n          ((char=?\
    \ (car s) 'k) (loop (cdr s) (cons (car s) result)))\n          ((char=? (car s)\
    \ 'l) (loop (cdr s) (cons (car s) result)))\n          ((char=? (car s) 'm) (loop\
    \ (cdr s) (cons (car s) result)))\n          ((char=? (car s) 'n) (loop (cdr s)\
    \ (cons (car s) result)))\n          ((char=? (car s) 'o) (loop (cdr s) (cons\
    \ (car s) result)))\n          ((char=? (car s) 'p) (loop (cdr s) (cons (car s)\
    \ result)))\n          ((char=? (car s) 'q) (loop (cdr s) (cons (car s) result)))\n\
    \          ((char=? (car s) 'r) (loop (cdr s) (cons (car s) result)))\n      \
    \    ((char=? (car s) 's) (loop (cdr ", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (loop for i from 0 to (length s) do\n      (set! alpha (rotate!\
    \ alpha 2))\n      (set! alpha (rotate! alpha 1))\n      (set! alpha (rotate!\
    \ alpha 0))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! ", "  (let ((alpha\
    \ (make-array 26 \n                          :initial-contents '(a b c d e f g\
    \ h i j k l m n o p q r s t u v w x y z))))\n    (loop for i from 0 to (length\
    \ s) do\n      (let ((char (char-code (substring s i 1)))\n            (alpha\
    \ (substring alpha (+ i 1))))\n        (set! alpha (substring alpha (+ i 1))\n\
    \              alpha (substring alpha (- i 1))))\n    (string-append alpha (substring\
    \ alpha (- length s)))))\n", "  (let ((alpha (make-alphabet (length s))))\n  \
    \  (loop for i from 0 to (length s) do\n      (set! alpha (rotate-alpha (substring\
    \ alpha (+ i 1) (+ i 1))))\n      (set! s (substring s (+ i 1) (+ i 1)))\n   \
    \   (cond ((= i 0) (set! alpha (make-alphabet)))\n            (else (set! alpha\
    \ (rotate-alpha (substring alpha (+ i 1) (+ i 1))))))\n    (concat alpha (string\
    \ s))))\n", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop\
    \ for i from 0 to (length s) do\n      (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n        (loop for j from 0 to (length s) do\n          (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n            (set! alpha (rotate! alpha\
    \ 2))\n            (set! alpha (rotate! alpha 1))\n            (set! alpha (rotate!\
    \ alpha 0))\n            (set! alpha (rotate! alpha 3))\n            (set! alpha\
    \ (rotate! alpha 2))\n            (set! alpha (rotate! alpha 1))\n           \
    \ (set! alpha (rotate! alpha 0))\n            (set! alpha (rotate! alpha 3))\n\
    \            (set! alpha (rotate! alpha 2))\n            (set! alpha (rotate!\
    \ alpha 1))\n            (set! alpha (rotate! alpha 0))\n            (set! alpha\
    \ (rotate! alpha 3))\n            (set! alpha (rotate! alpha 2))\n           \
    \ (set! alpha (rotate! alpha 1))\n            (set! alpha (rotate! alpha 0))\n\
    \            (set! alpha (rotate! alpha 3))\n            (set! alpha (rotate!\
    \ alpha 2))\n            (set! alpha (rotate! alpha 1))\n            (set! alpha\
    \ (rotate! alpha 0))\n            (set! alpha (rotate! alpha 3))\n           \
    \ (set! alpha (rotate! alpha 2))\n            (set! alpha (rotate! alpha 1))\n\
    \            (set! alpha (rotate! alpha 0))\n            (set! alpha (rotate!\
    \ alpha 3))\n            (set! alpha (rotate! alpha 2))\n            (set! alpha\
    \ (rotate! alpha 1))\n            (set! alpha (rotate! alpha 0))\n           \
    \ (set! alpha (rotate! alpha 3))\n            (set! alpha (rotate! alpha 2))\n\
    \            (set! alpha (rotate! alpha 1))\n            (set! alpha (rotate!\
    \ alpha 0))\n            (set! alpha (rotate! alpha 3))\n            (set! alpha\
    \ (rotate! alpha 2))\n            (set! alpha (rotate! alpha 1))\n           \
    \ (set! alpha (rotate! alpha 0))\n            (set! alpha (rotate! alpha 3))\n\
    \            (set! alpha (rotate! alpha 2))\n            (set! alpha (rotate!\
    \ alpha 1))\n            (set! alpha (rotate! alpha 0))\n            (set! alpha\
    \ (rotate! alpha 3))\n            (set! alpha (rotate! alpha 2))\n           \
    \ (set! alpha (rotate! alpha 1))\n            (set! alpha (rotate! alpha 0))\n\
    \            (set! alpha (rotate! alpha 3))\n            (", "  (let ((alpha (make-array\
    \ (length s) #:initial-element #\\a)))\n    (loop for i from 0 to (length s) by\
    \ 2\n          for j from 0 to (length s) by 2\n          collect (substring alpha\
    \ (+ i 1) (+ j 1))\n          into alpha\n          finally (return (substring\
    \ alpha (+ i 1) (+ j 1))))))\n", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (cond [(empty? s) \"\"]\n          [(char-alphabet (first s)) (char-alphabet\
    \ (first s))]\n          [else (let ((alpha (make-array 26 :initial-element #\\\
    a)))\n                   (char-alphabet (first s))\n                   (char-alphabet\
    \ (first s))\n                   (char-alphabet (first s))\n                 \
    \  (char-alphabet (first s))\n                   (char-alphabet (first s))\n \
    \                  (char-alphabet (first s))\n                   (char-alphabet\
    \ (first s))\n                   (char-alphabet (first s))\n                 \
    \  (char-alphabet (first s))\n                   (char-alphabet (first s))\n \
    \                  (char-alphabet (first s))\n                   (char-alphabet\
    \ (first s))\n                   (char-alphabet (first s))\n                 \
    \  (char-alphabet (first s))\n                   (char-alphabet (first s))\n \
    \                  (char-alphabet (first s))\n                   (char-alphabet\
    \ (first s))\n                   (char-alphabet (first s))\n                 \
    \  (char-alphabet (first s))\n                   (char-alphabet (first s))\n \
    \                  (char-alphabet (first s))\n                   (char-alphabet\
    \ (first s))\n                   (char-alphabet (first s))\n                 \
    \  (char-alphabet (first s))\n                   (char-alphabet (first s))\n \
    \                  (char-alphabet (first s))\n                   (char-alphabet\
    \ (first s))\n                   (char-alphabet (first s))\n                 \
    \  (char-alphabet (first s))\n                   (char-alphabet (first s))\n \
    \                  (char-alphabet (first s))\n                   (char-alphabet\
    \ (first s))\n                   (char-alphabet (first s))\n                 \
    \  (char-alphabet (first s))\n                   (char-alphabet (first s))\n \
    \                  (char-alphabet (first s))\n                   (char-alphabet\
    \ (first s))\n                   (char-alphabet (first s))\n                 \
    \  (char-alphabet (first s))\n                   (char-alphabet (first s))\n \
    \                  (char-alphabet (first s))\n                   (char-alphabet\
    \ (first s))\n                   (char-alphabet (first s))\n                 \
    \  (char-alphabet (first s))\n                   (char-alphabet (first ", "  (let\
    \ ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for i from 0 to (length\
    \ s) do\n      (let ((char (char-code (substring s i i))))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! ",
  "  (let ((alpha (make-array 26)))\n    (define (rotate x y)\n      (cond ((= x y)\
    \ s)\n            ((< x y) \n             (rotate\n              (- x y)\n   \
    \           (- y 26))\n             (rotate\n              (- x 26)\n        \
    \      (- y y)))\n            (else (substring alpha (+ x y) (+ y 26))))\n   \
    \ (define (shift x)\n      (cond ((= x 0) s)\n            ((< x 26)\n        \
    \     (shift (- x 26))\n             (shift (- x 1))))\n    (define (rotate x\
    \ y)\n      (cond ((= x y) s)\n            ((< x y) \n             (rotate\n \
    \             (- x y)\n              (- y 26))\n             (rotate\n       \
    \       (- x 26)\n              (- y y)))\n            (else (substring alpha\
    \ (+ x y) (+ y 26))))\n    (define (shift x)\n      (cond ((= x 0) s)\n      \
    \      ((< x 26)\n             (shift (- x 26))\n             (shift (- x 1))))\n\
    \    (define (rotate x y)\n      (cond ((= x y) s)\n            ((< x y) \n  \
    \           (rotate\n              (- x y)\n              (- y 26))\n        \
    \     (rotate\n              (- x 26)\n              (- y y)))\n            (else\
    \ (substring alpha (+ x y) (+ y 26))))\n    (define (shift x)\n      (cond ((=\
    \ x 0) s)\n            ((< x 26)\n             (shift (- x 26))\n            \
    \ (shift (- x 1))))\n    (define (rotate x y)\n      (cond ((= x y) s)\n     \
    \       ((< x y) \n             (rotate\n              (- x y)\n             \
    \ (- y 26))\n             (rotate\n              (- x 26)\n              (- y\
    \ y)))\n            (else (substring alpha (+ x y) (+ y 26))))\n    (define (shift\
    \ x)\n      (cond ((= x 0) s)\n            ((< x 26)\n             (shift (- x\
    \ 26))\n             (shift (- x 1))))\n    (define (rotate x y)\n      (cond\
    \ ((= x y) s)\n            ((< x y) \n             (rotate\n              (- x\
    \ y)\n              (- y 26))\n             (rotate\n              (- x 26)\n\
    \              (- y y)))\n            (else (substring alpha (+ x y) (", "  (let\
    \ loop ((s s)\n             (acc '()))\n    (cond ((null? s) acc)\n          ((char=?\
    \ (car s) #\\a) (loop (cdr s) (cons (car s) acc)))\n          ((char=? (car s)\
    \ #\\z) (loop (cdr s) (cons (car s) acc)))\n          ((char=? (car s) #\\A) (loop\
    \ (cdr s) (cons (car s) acc)))\n          ((char=? (car s) #\\Z) (loop (cdr s)\
    \ (cons (car s) acc)))\n          ((char=? (car s) #\\0) (loop (cdr s) (cons (car\
    \ s) acc)))\n          ((char=? (car s) #\\9) (loop (cdr s) (cons (car s) acc)))\n\
    \          ((char=? (car s) #\\8) (loop (cdr s) (cons (car s) acc)))\n       \
    \   ((char=? (car s) #\\7) (loop (cdr s) (cons (car s) acc)))\n          ((char=?\
    \ (car s) #\\6) (loop (cdr s) (cons (car s) acc)))\n          ((char=? (car s)\
    \ #\\5) (loop (cdr s) (cons (car s) acc)))\n          ((char=? (car s) #\\4) (loop\
    \ (cdr s) (cons (car s) acc)))\n          ((char=? (car s) #\\3) (loop (cdr s)\
    \ (cons (car s) acc)))\n          ((char=? (car s) #\\2) (loop (cdr s) (cons (car\
    \ s) acc)))\n          ((char=? (car s) #\\1) (loop (cdr s) (cons (car s) acc)))\n\
    \          ((char=? (car s) #\\0) (loop (cdr s) (cons (car s) acc)))\n       \
    \   ((char=? (car s) #\\9) (loop (cdr s) (cons (car s) acc)))\n          ((char=?\
    \ (car s) #\\8) (loop (cdr s) (cons (car s) acc)))\n          ((char=? (car s)\
    \ #\\7) (loop (cdr s) (cons (car s) acc)))\n          ((char=? (car s) #\\6) (loop\
    \ (cdr s) (cons (car s) acc)))", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (loop for i from 0 to (length s) do\n      (set! alpha (rotate!\
    \ alpha 2))\n      (set! alpha (rotate! alpha 1))\n      (set! alpha (rotate!\
    \ alpha 0))\n      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate!\
    \ alpha -2))\n      (set! alpha (rotate! alpha -3))\n      (set! alpha (rotate!\
    \ alpha -4))\n      (set! alpha (rotate! alpha -5))\n      (set! alpha (rotate!\
    \ alpha -6))\n      (set! alpha (rotate! alpha -7))\n      (set! alpha (rotate!\
    \ alpha -8))\n      (set! alpha (rotate! alpha -9))\n      (set! alpha (rotate!\
    \ alpha -10))\n      (set! alpha (rotate! alpha -11))\n      (set! alpha (rotate!\
    \ alpha -12))\n      (set! alpha (rotate! alpha -13))\n      (set! alpha (rotate!\
    \ alpha -14))\n      (set! alpha (rotate! alpha -15))\n      (set! alpha (rotate!\
    \ alpha -16))\n      (set! alpha (rotate! alpha -17))\n      (set! alpha (rotate!\
    \ alpha -18))\n      (set! alpha (rotate! alpha -19))\n      (set! alpha (rotate!\
    \ alpha -20))\n      (set! alpha (rotate! alpha -21))\n      (set! alpha (rotate!\
    \ alpha -22))\n      (set! alpha (rotate! alpha -23))\n      (set! alpha (rotate!\
    \ alpha -24))\n      (set! alpha (rotate! alpha -25))\n      (set! alpha (rotate!\
    \ alpha -26))\n      (set! alpha (rotate! alpha -27))\n      (set! alpha (rotate!\
    \ alpha -28))\n      (set! alpha (rotate! alpha -29))\n      (set! alpha (rotate!\
    \ alpha -30))\n      (set! alpha (rotate! alpha -31))\n      (set! alpha (rotate!\
    \ alpha -32))\n      (set! alpha (rotate! alpha -33))\n      (set! alpha (rotate!\
    \ alpha -34))\n      (set! alpha (rotate! alpha -35))\n      (set! alpha (rotate!\
    \ alpha -36))\n      (set! alpha (rotate! alpha -37))\n      (set! alpha (rotate!\
    \ alpha -38))\n      (set! alpha (rotate! alpha -39))\n      (set! alpha (rotate!\
    \ alpha -40", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (define\
    \ (shift a b)\n      (cond ((= b 0) a)\n            ((= b 1) (rotate-left a 1))\n\
    \            (else (rotate-left a (- b 1)))))\n    (define (rotate a b)\n    \
    \  (cond ((= b 0) a)\n            ((= b 1) (shift a 2))\n            (else (shift\
    \ a (- b 1)))))\n    (define (encrypt a b)\n      (cond ((= b 0) a)\n        \
    \    ((= b 1) (encrypt a (shift a 2))))\n    (define (decrypt a b)\n      (cond\
    \ ((= b 0) a)\n            ((= b 1) (decrypt a (shift a 2))))\n    (define (rotate\
    \ a b)\n      (cond ((= b 0) a)\n            ((= b 1) (rotate a (shift a 2))))\n\
    \    (define (decrypt a b)\n      (cond ((= b 0) a)\n            ((= b 1) (decrypt\
    \ a (shift a 2))))\n    (define (rotate a b)\n      (cond ((= b 0) a)\n      \
    \      ((= b 1) (rotate a (shift a 2))))\n    (define (encrypt a b)\n      (cond\
    \ ((= b 0) a)\n            ((= b 1) (encrypt a (shift a 2))))\n    (define (decrypt\
    \ a b)\n      (cond ((= b 0) a)\n            ((= b 1) (decrypt a (shift a 2))))\n\
    \    (define (rotate a b)\n      (cond ((= b 0) a)\n            ((= b 1) (rotate\
    \ a (shift a 2))))\n    (define (decrypt a b)\n      (cond ((= b 0) a)\n     \
    \       ((= b 1) (decrypt a (shift a 2))))\n    (define (rotate a b)\n      (cond\
    \ ((= b 0) a)\n            ((= b 1) (rotate a (shift a 2))))\n    (define (decrypt\
    \ a b)\n      (cond ((= b 0) a)\n            ((= b 1) (decrypt a (shift a 2))))\n\
    \    (define (rotate a b)\n      (cond ((= b 0) a)\n            ((= b 1) (rotate\
    \ a (shift a 2))))\n    (define (decrypt a b)\n      (cond ((= b 0) a)\n     \
    \       ((= b 1) (decrypt a (shift a 2))))\n    (define (rotate a b)\n      (cond\
    \ ((= b 0) a)\n            ((= b 1) (rotate a (shift a 2))", "  (let ((alpha (make-alphabet\
    \ (length s))))\n    (let loop ((s s)\n              (alpha (make-alphabet (length\
    \ s))))\n      (cond\n        ((null? s) s)\n        ((equal? (char-alphabet (car\
    \ s)) alpha) (car s))\n        (else (loop (cdr s) (rotate-alphabet alpha (char-alphabet\
    \ (car s)))))))))\n", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n\
    \    (let loop ((s s)\n               (alpha alpha))\n      (cond ((null? s) (append\
    \ alpha (list #\\a)))\n            ((char= (first s) #\\a) (append alpha (list\
    \ #\\b)))\n            (else (loop (rest s) (append alpha (list (char-code (first\
    \ s))))))))))\n", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n  \
    \  (loop for c across s\n          for i from 0\n          for j from (- i 2)\n\
    \          collect (alpha (+ i j) c))))\n", "  (let ((alpha (make-array 26 \n\
    \                          :initial-contents '(#\\A #\\B #\\C #\\D #\\E #\\F #\\\
    G #\\H #\\I #\\J \n                                                   #\\K #\\\
    L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T \n                                 \
    \                  #\\U #\\V #\\W #\\X #\\Y #\\Z)))\n        (index (make-array\
    \ 26 \n                        :initial-contents '(#\\A #\\B #\\C #\\D #\\E #\\\
    F #\\G #\\H #\\I #\\J \n                                               #\\K #\\\
    L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T \n                                 \
    \              #\\U #\\V #\\W #\\X #\\Y #\\Z))))\n    (loop for i from 0 to (length\
    \ s) do\n      (let ((c (char (char-code (substring s i 1))))\n            (index\
    \ (modulo (+ i 1) 26)))\n        (set! alpha (set! alpha (+ index 2)\n       \
    \                   (set! alpha (+ index 2)\n                            (set!\
    \ alpha (+ index 2)\n                              (set! alpha (+ index 2)\n \
    \                               (set! alpha (+ index 2)\n                    \
    \              (set! alpha (+ index 2)\n                                    (set!\
    \ alpha (+ index 2)\n                                      (set! alpha (+ index\
    \ 2)\n                                        (set! alpha (+ index 2)\n      \
    \                                    (set! alpha (+ index 2)\n               \
    \                             (set! alpha (+ index 2)\n                      \
    \                        (set! alpha (+ index 2)\n                           \
    \                     (set! alpha (+ index 2)\n                              \
    \                    (set! alpha (+ index 2)\n                               \
    \                     (set! alpha (+ index 2)\n                              \
    \                        (set! alpha (+ index 2)\n                           \
    \                             (set! alpha (+ index 2)\n                      \
    \                                    (set! alpha (+ index 2)\n               \
    \                                             (set! alpha (+ index 2)\n      \
    \                                                        (set! alpha (+ index\
    \ 2)\n                                                                (set! alpha\
    \ (+ index 2)\n                                                              \
    \    (set! alpha (+ index 2)\n                                               \
    \                     (set! alpha (+ index 2)\n                              \
    \                                      (set! alpha (+ index 2)\n             \
    \                                                     (set! alpha (+ index 2)\n\
    \                                                                    (set! alpha\
    \ (+ index 2)\n                                                              \
    \    (set! alpha (+ index 2)", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (cond ((null? s) '())\n          ((char=? (car s) #\\a) (append\
    \ alpha (rotate-char #\\a)))\n          ((char=? (car s) #\\z) (append alpha (rotate-char\
    \ #\\z)))\n          ((char=? (car s) #\\A) (append alpha (rotate-char #\\A)))\n\
    \          ((char=? (car s) #\\Z) (append alpha (rotate-char #\\Z)))\n       \
    \   (else (append alpha (rotate-char (char-code (car s))))))))\n", "  (let loop\
    \ ((s s)\n             (acc '()))\n    (if (empty? s)\n        acc\n        (loop\
    \ (rest s)\n              (cons (char->integer (first s)) acc)))))\n", "  (let\
    \ ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for i from 0 to (length\
    \ s) do\n      (set! alpha (rotate! alpha 2))\n      (set! alpha (rotate! alpha\
    \ 1))\n      (set! alpha (rotate! alpha 0))\n      (set! alpha (rotate! alpha\
    \ -2))\n      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha\
    \ 1))\n      (set! alpha (rotate! alpha 0))\n      (set! alpha (rotate! alpha\
    \ 2))\n      (set! alpha (rotate! alpha 1))\n      (set! alpha (rotate! alpha\
    \ 0))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate! alpha\
    \ -1))\n      (set! alpha (rotate! alpha 1))\n      (set! alpha (rotate! alpha\
    \ 0))\n      (set! alpha (rotate! alpha 2))\n      (set! alpha (rotate! alpha\
    \ 1))\n      (set! alpha (rotate! alpha 0))\n      (set! alpha (rotate! alpha\
    \ -2))\n      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha\
    \ 1))\n      (set! alpha (rotate! alpha 0))\n      (set! alpha (rotate! alpha\
    \ 2))\n      (set! alpha (rotate! alpha 1))\n      (set! alpha (rotate! alpha\
    \ 0))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate! alpha\
    \ -1))\n      (set! alpha (rotate! alpha 1))\n      (set! alpha (rotate! alpha\
    \ 0))\n      (set! alpha (rotate! alpha 2))\n      (set! alpha (rotate! alpha\
    \ 1))\n      (set! alpha (rotate! alpha 0))\n      (set! alpha (rotate! alpha\
    \ -2))\n      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha\
    \ 1))\n      (set! alpha (rotate! alpha 0))\n      (set! alpha (rotate! alpha\
    \ 2))\n      (set! alpha (rotate! alpha 1))\n      (set! alpha (rotate! alpha\
    \ 0))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate! alpha\
    \ -1))\n      (set! alpha (rotate! alpha 1))\n      (set! alpha (rotate! alpha\
    \ 0))\n      (set! alpha (rotate! alpha 2))\n      (set! alpha (rotate! alpha\
    \ 1))\n      (set! alpha (rotate! alpha 0))\n      (set! alpha (rotate! alpha\
    \ -2))\n      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha ",
  "  (let ((alpha (make-alphabet (length s))))\n    (let loop ((i 0) (alpha (make-alphabet\
    \ (length s))))\n      (if (< i length)\n          (let ((char (char-ref s i)))\n\
    \            (set! alpha (rotate-alpha (char-ref alpha char) alpha))\n       \
    \     (loop (+ i 1) alpha))\n          (set! alpha (rotate-alpha (char-ref alpha\
    \ char) alpha))\n          (set! alpha (rotate-alpha (char-ref alpha char) alpha))\n\
    \          (set! alpha (rotate-alpha (char-ref alpha char) alpha))\n         \
    \ (set! alpha (rotate-alpha (char-ref alpha char) alpha))\n          (set! alpha\
    \ (rotate-alpha (char-ref alpha char) alpha))\n          (set! alpha (rotate-alpha\
    \ (char-ref alpha char) alpha))\n          (set! alpha (rotate-alpha (char-ref\
    \ alpha char) alpha))\n          (set! alpha (rotate-alpha (char-ref alpha char)\
    \ alpha))\n          (set! alpha (rotate-alpha (char-ref alpha char) alpha))\n\
    \          (set! alpha (rotate-alpha (char-ref alpha char) alpha))\n         \
    \ (set! alpha (rotate-alpha (char-ref alpha char) alpha))\n          (set! alpha\
    \ (rotate-alpha (char-ref alpha char) alpha))\n          (set! alpha (rotate-alpha\
    \ (char-ref alpha char) alpha))\n          (set! alpha (rotate-alpha (char-ref\
    \ alpha char) alpha))\n          (set! alpha (rotate-alpha (char-ref alpha char)\
    \ alpha))\n          (set! alpha (rotate-alpha (char-ref alpha char) alpha))\n\
    \          (set! alpha (rotate-alpha (char-ref alpha char) alpha))\n         \
    \ (set! alpha (rotate-alpha (char-ref alpha char) alpha))\n          (set! alpha\
    \ (rotate-alpha (char-ref alpha char) alpha))\n          (set! alpha (rotate-alpha\
    \ (char-ref alpha char) alpha))\n          (set! alpha (rotate-alpha (char-ref\
    \ alpha char) alpha))\n          (set! alpha (rotate-alpha (char-ref alpha char)\
    \ alpha))\n          (set! alpha (rotate-alpha (char-ref alpha char) alpha", " \
    \ (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for c across\
    \ s\n          for i from 0\n          for j from (- i 2)\n          collect (alpha\
    \ (+ i (* j 2))) into alpha\n          finally (return (string alpha)))))\n",
  "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for i from 0\
    \ to (length s) do\n      (set! alpha (rotate! alpha 2))\n      (set! alpha (rotate!\
    \ alpha 1))\n      (set! alpha (rotate! alpha 0))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -3))\n      (set! alpha (rotate! alpha -4))\n      (set! alpha (rotate!\
    \ alpha -5))\n      (set! alpha (rotate! alpha -6))\n      (set! alpha (rotate!\
    \ alpha -7))\n      (set! alpha (rotate! alpha -8))\n      (set! alpha (rotate!\
    \ alpha -9))\n      (set! alpha (rotate! alpha -10))\n      (set! alpha (rotate!\
    \ alpha -11))\n      (set! alpha (rotate! alpha -12))\n      (set! alpha (rotate!\
    \ alpha -13))\n      (set! alpha (rotate! alpha -14))\n      (set! alpha (rotate!\
    \ alpha -15))\n      (set! alpha (rotate! alpha -16))\n      (set! alpha (rotate!\
    \ alpha -17))\n      (set! alpha (rotate! alpha -18))\n      (set! alpha (rotate!\
    \ alpha -19))\n      (set! alpha (rotate! alpha -20))\n      (set! alpha (rotate!\
    \ alpha -21))\n      (set! alpha (rotate! alpha -22))\n      (set! alpha (rotate!\
    \ alpha -23))\n      (set! alpha (rotate! alpha -24))\n      (set! alpha (rotate!\
    \ alpha -25))\n      (set! alpha (rotate! alpha -26))\n      (set! alpha (rotate!\
    \ alpha -27))\n      (set! alpha (rotate! alpha -28))\n      (set! alpha (rotate!\
    \ alpha -29))\n      (set! alpha (rotate! alpha -30))\n      (set! alpha (rotate!\
    \ alpha -31))\n      (set! alpha (rotate! alpha -32))\n      (set! alpha (rotate!\
    \ alpha -33))\n      (set! alpha (rotate! alpha -34))\n      (set! alpha (rotate!\
    \ alpha -35))\n      (set! alpha (rotate! alpha -36))\n      (set! alpha (rotate!\
    \ alpha -37))\n      (set! alpha (rotate! alpha -38))\n      (set! alpha (rotate!\
    \ alpha -39))\n      (set! alpha (rotate! alpha -40", "  (let loop ((s s)\n  \
    \           (result '()))\n    (if (empty? s)\n        result\n        (loop (rest\
    \ s)\n              (cons (char->integer (char->string (car s))\n            \
    \              (char->integer (char->string (cadr s))))\n                    (cons\
    \ (char->integer (char->string (car s))\n                                  (char->integer\
    \ (char->string (caddr s))))\n                          result))))))\n", "  (let\
    \ ((alpha (make-array (length s) #:initial-element #\\a)))\n    (loop for i from\
    \ 0 to (length s) do\n      (set! alpha (rotate! alpha 2))\n      (set! alpha\
    \ (rotate! alpha 1))\n      (set! alpha (rotate! alpha 0))\n      (set! alpha\
    \ (rotate! alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha\
    \ (rotate! alpha -3))\n      (set! alpha (rotate! alpha -4))\n      (set! alpha\
    \ (rotate! alpha -5))\n      (set! alpha (rotate! alpha -6))\n      (set! alpha\
    \ (rotate! alpha -7))\n      (set! alpha (rotate! alpha -8))\n      (set! alpha\
    \ (rotate! alpha -9))\n      (set! alpha (rotate! alpha -10))\n      (set! alpha\
    \ (rotate! alpha -11))\n      (set! alpha (rotate! alpha -12))\n      (set! alpha\
    \ (rotate! alpha -13))\n      (set! alpha (rotate! alpha -14))\n      (set! alpha\
    \ (rotate! alpha -15))\n      (set! alpha (rotate! alpha -16))\n      (set! alpha\
    \ (rotate! alpha -17))\n      (set! alpha (rotate! alpha -18))\n      (set! alpha\
    \ (rotate! alpha -19))\n      (set! alpha (rotate! alpha -20))\n      (set! alpha\
    \ (rotate! alpha -21))\n      (set! alpha (rotate! alpha -22))\n      (set! alpha\
    \ (rotate! alpha -23))\n      (set! alpha (rotate! alpha -24))\n      (set! alpha\
    \ (rotate! alpha -25))\n      (set! alpha (rotate! alpha -26))\n      (set! alpha\
    \ (rotate! alpha -27))\n      (set! alpha (rotate! alpha -28))\n      (set! alpha\
    \ (rotate! alpha -29))\n      (set! alpha (rotate! alpha -30))\n      (set! alpha\
    \ (rotate! alpha -31))\n      (set! alpha (rotate! alpha -32))\n      (set! alpha\
    \ (rotate! alpha -33))\n      (set! alpha (rotate! alpha -34))\n      (set! alpha\
    \ (rotate! alpha -35))\n      (set! alpha (rotate! alpha -36))\n      (set! alpha\
    \ (rotate! alpha -37))\n      (set! alpha (rotate! alpha -38))\n      (set! alpha\
    \ (rotate! alpha -39))\n      (set! alpha (rotate! ", "  (let loop ((s s)\n  \
    \           (acc '()))\n    (if (empty? s)\n        acc\n        (loop (rest s)\n\
    \              (cons (first s) acc)))))\n", "  (let loop ((s s)\n            \
    \ (result '()))\n    (if (null? s)\n        result\n        (loop (substring s\
    \ 0 (length s))\n              (cons (substring s 0 (length s)) (cons (substring\
    \ s (length s) 0) result))))))\n", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (loop for i from 0 to (length s) do\n      (let ((alpha (substring\
    \ alpha (+ i 1) (+ i 1))))\n        (set! alpha (substring alpha (- i 1) (- i\
    \ 1))))\n      (set! alpha (substring alpha (+ i 1) (+ i 1))))\n    (loop for\
    \ i from 0 to (length s) do\n      (set! alpha (substring alpha (- i 1) (- i 1))))\n\
    \    (loop for i from 0 to (length s) do\n      (set! alpha (substring alpha (+\
    \ i 1) (+ i 1))))\n    (loop for i from 0 to (length s) do\n      (set! alpha\
    \ (substring alpha (- i 1) (- i 1))))\n    (loop for i from 0 to (length s) do\n\
    \      (set! alpha (substring alpha (+ i 1) (+ i 1))))\n    (loop for i from 0\
    \ to (length s) do\n      (set! alpha (substring alpha (- i 1) (- i 1))))\n  \
    \  (loop for i from 0 to (length s) do\n      (set! alpha (substring alpha (+\
    \ i 1) (+ i 1))))\n    (loop for i from 0 to (length s) do\n      (set! alpha\
    \ (substring alpha (- i 1) (- i 1))))\n    (loop for i from 0 to (length s) do\n\
    \      (set! alpha (substring alpha (+ i 1) (+ i 1))))\n    (loop for i from 0\
    \ to (length s) do\n      (set! alpha (substring alpha (- i 1) (- i 1))))\n  \
    \  (loop for i from 0 to (length s) do\n      (set! alpha (substring alpha (+\
    \ i 1) (+ i 1))))\n    (loop for i from 0 to (length s) do\n      (set! alpha\
    \ (substring alpha (- i 1) (- i 1))))\n    (loop for i from 0 to (length s) do\n\
    \      (set! alpha (substring alpha (+ i 1) (+ i 1))))\n    (loop for i from 0\
    \ to (length s) do\n      (set! alpha (substring alpha (- i 1) (- i 1))))\n  \
    \  (loop for i from 0 to (length s) do\n      (set! alpha (substring alpha (+\
    \ i 1) (+ i 1))))\n    (loop for i from 0 to (length s) do\n      (set! alpha\
    \ (substring alpha (- i 1) (- ", "  (let ((alpha (make-array 26)))\n    (loop\
    \ for i from 0 to 25\n          for j from 0 to 26\n          for k from 0 to\
    \ 26\n          for l from 0 to 26\n          for m from 0 to 26\n          for\
    \ n from 0 to 26\n          for o from 0 to 26\n          for p from 0 to 26\n\
    \          for q from 0 to 26\n          for r from 0 to 26\n          for s from\
    \ 0 to 26\n          for t from 0 to 26\n          for u from 0 to 26\n      \
    \    for v from 0 to 26\n          for w from 0 to 26\n          for x from 0\
    \ to 26\n          for y from 0 to 26\n          for z from 0 to 26\n        \
    \  for u from 0 to 26\n          for v from 0 to 26\n          for w from 0 to\
    \ 26\n          for x from 0 to 26\n          for y from 0 to 26\n          for\
    \ z from 0 to 26\n          for u from 0 to 26\n          for v from 0 to 26\n\
    \          for w from 0 to 26\n          for x from 0 to 26\n          for y from\
    \ 0 to 26\n          for z from 0 to 26\n          for u from 0 to 26\n      \
    \    for v from 0 to 26\n          for w from 0 to 26\n          for x from 0\
    \ to 26\n          for y from 0 to 26\n          for z from 0 to 26\n        \
    \  for u from 0 to 26\n          for v from 0 to 26\n          for w from 0 to\
    \ 26\n          for x from 0 to 26\n          for y from 0 to 26\n          for\
    \ z from 0 to 26\n          for u from 0 to 26\n          for v from 0 to 26\n\
    \          for w from 0 to 26\n          for x from 0 to 26\n          for y from\
    \ 0 to 26\n          for z from 0 to 26\n          for u from 0 to 26\n      \
    \    for v from 0 to 26\n          for w from 0 to 26\n          for x from 0\
    \ to 26\n          for y from 0 to 26\n          for z from 0 to 26\n        \
    \  for u from 0 to 26\n          for v from 0 to 26\n          for w from 0 to\
    \ 26\n          for x from 0 to 26\n          for y from 0 to 26\n          for\
    \ z from 0 to 26\n          for u from 0 to 26\n          for v from 0 to 26\n\
    \          for w from 0 to 26\n          for x from 0 to 26\n          for y from\
    \ 0 to 26\n          for z from 0 to 26\n          for u from 0 to 26\n      \
    \    for v from 0 to 26\n          for w from 0 to 26\n          for x from 0\
    \ to 26\n          for y from 0 to 26\n          for z from 0 to ", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s)\
    \ do\n      (let ((alpha (make-array 26 :initial-element #\\a)))\n        (loop\
    \ for j from 0 to (length s) do\n          (set! alpha (rotate! alpha j))\n  \
    \        (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i ", "  (let ((alpha (make-array 26 \n                          :initial-element\
    \ #\\a\n                          :element-type 'char)))\n    (loop for i from\
    \ 0 to (length s) do\n      (let ((alpha (make-array 26 \n                   \
    \          :initial-element #\\a\n                             :element-type 'char)))\n\
    \        (loop for j from 0 to (length s) do\n          (set! alpha (rotate! alpha\
    \ j))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set!\
    \ alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n\
    \          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set!\
    \ alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n\
    \          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set!\
    \ alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n\
    \          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set!\
    \ alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n\
    \          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set!\
    \ alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n\
    \          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set!\
    \ alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n\
    \          (set! alpha (", "  (let ((alpha (make-array 26)))\n    (dotimes (i\
    \ (length s))\n      (set! alpha (rotate! alpha (i) (i) 'right))\n      (set!\
    \ alpha (rotate! alpha (i) (i) 'left))\n      (set! alpha (rotate! alpha (i) (i)\
    \ 'down))\n      (set! alpha (rotate! alpha (i) (i) 'up))\n      (set! alpha (rotate!\
    \ alpha (i) (i) 'right))\n      (set! alpha (rotate! alpha (i) (i) 'left))\n \
    \     (set! alpha (rotate! alpha (i) (i) 'down))\n      (set! alpha (rotate! alpha\
    \ (i) (i) 'up))\n      (set! alpha (rotate! alpha (i) (i) 'right))\n      (set!\
    \ alpha (rotate! alpha (i) (i) 'left))\n      (set! alpha (rotate! alpha (i) (i)\
    \ 'down))\n      (set! alpha (rotate! alpha (i) (i) 'up))\n      (set! alpha (rotate!\
    \ alpha (i) (i) 'right))\n      (set! alpha (rotate! alpha (i) (i) 'left))\n \
    \     (set! alpha (rotate! alpha (i) (i) 'down))\n      (set! alpha (rotate! alpha\
    \ (i) (i) 'up))\n      (set! alpha (rotate! alpha (i) (i) 'right))\n      (set!\
    \ alpha (rotate! alpha (i) (i) 'left))\n      (set! alpha (rotate! alpha (i) (i)\
    \ 'down))\n      (set! alpha (rotate! alpha (i) (i) 'up))\n      (set! alpha (rotate!\
    \ alpha (i) (i) 'right))\n      (set! alpha (rotate! alpha (i) (i) 'left))\n \
    \     (set! alpha (rotate! alpha (i) (i) 'down))\n      (set! alpha (rotate! alpha\
    \ (i) (i) 'up))\n      (set! alpha (rotate! alpha (i) (i) 'right))\n      (set!\
    \ alpha (rotate! alpha (i) (i) 'left))\n      (set! alpha (rotate! alpha (i) (i)\
    \ 'down))\n      (set! alpha (rotate! alpha (i) (i) 'up))\n      (set! alpha (rotate!\
    \ alpha (i) (i) 'right))\n      (set! alpha (rotate! alpha (i) (i) 'left))\n \
    \     (set! alpha (rotate! alpha (i) (i) 'down", "  (let ((alpha (make-array 26\
    \ :initial-element #\\a)))\n    (loop for i from 0 to (length s) do\n      (let\
    \ ((char (char-code (substring s i i))))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! ", "  (let ((alpha\
    \ (make-alphabet (length s))))\n    (loop for i from 0 to (length s) do\n    \
    \  (set! alpha (rotate-alpha (substring alpha (+ i 1) (+ i 1))))\n      (set!\
    \ alpha (substring alpha (+ i 1) (+ i 1)))\n      (set! alpha (substring alpha\
    \ (+ i 1) (+ i 1)))\n      (set! alpha (substring alpha (+ i 1) (+ i 1)))\n  \
    \    (set! alpha (substring alpha (+ i 1) (+ i 1)))\n      (set! alpha (substring\
    \ alpha (+ i 1) (+ i 1)))\n      (set! alpha (substring alpha (+ i 1) (+ i 1)))\n\
    \      (set! alpha (substring alpha (+ i 1) (+ i 1)))\n      (set! alpha (substring\
    \ alpha (+ i 1) (+ i 1)))\n      (set! alpha (substring alpha (+ i 1) (+ i 1)))\n\
    \      (set! alpha (substring alpha (+ i 1) (+ i 1)))\n      (set! alpha (substring\
    \ alpha (+ i 1) (+ i 1)))\n      (set! alpha (substring alpha (+ i 1) (+ i 1)))\n\
    \      (set! alpha (substring alpha (+ i 1) (+ i 1)))\n      (set! alpha (substring\
    \ alpha (+ i 1) (+ i 1)))\n      (set! alpha (substring alpha (+ i 1) (+ i 1)))\n\
    \      (set! alpha (substring alpha (+ i 1) (+ i 1)))\n      (set! alpha (substring\
    \ alpha (+ i 1) (+ i 1)))\n      (set! alpha (substring alpha (+ i 1) (+ i 1)))\n\
    \      (set! alpha (substring alpha (+ i 1) (+ i 1)))\n      (set! alpha (substring\
    \ alpha (+ i 1) (+ i 1)))\n      (set! alpha (substring alpha (+ i 1) (+ i 1)))\n\
    \      (set! alpha (substring alpha (+ i 1) (+ i 1)))\n      (set! alpha (substring\
    \ alpha (+ i 1) (+ i 1)))\n      (set! alpha (substring alpha (+ i 1) (+ i 1)))\n\
    \      (set! alpha (substring alpha (+ i 1) (+ i 1)))\n      (set! alpha (substring\
    \ alpha (+ i 1) (+ i 1)))\n      (set! alpha (substring alpha (+ i 1) (+ i 1)))\n\
    \      (set! alpha (substring ", "  (let ((alpha (make-array 26 \n           \
    \               :initial-contents '(a b c d e f g h i j k l m n o p q r s t u\
    \ v w x y z))))\n    (loop for i from 0 to (length s) do\n          (let ((char\
    \ (char-code (substring s i 1)))\n                (alpha (substring alpha (+ i\
    \ 2))))\n            (set! alpha (substring alpha (- i 1))))\n    (string-append\
    \ alpha (substring alpha (+ i 1)))))\n", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (define (enc-loop s alpha (i 0))\n      (cond\n        ((null?\
    \ s) (cons alpha (enc-loop (substring s i) alpha (+ i 1))))\n        (else (cons\
    \ (char->integer (char->string (car s)) alpha (+ i 1))\n                    (enc-loop\
    \ (cdr s) alpha (+ i 1))))))\n    (enc-loop s alpha (length s))))\n", "  (let\
    \ ((alpha (make-array 26)))\n    (loop for i from 0 to (length s) do\n      (let\
    \ ((alpha (substring (alpha (+ i 26)) 0 1)))\n        (set! alpha (substring (alpha\
    \ (+ i 26)) 1 26))\n        (set! alpha (substring (alpha (+ i 26)) 0 1))\n  \
    \      (set! alpha (substring (alpha (+ i 26)) 1 26))\n        (set! alpha (substring\
    \ (alpha (+ i 26)) 0 1))\n        (set! alpha (substring (alpha (+ i 26)) 1 26))\n\
    \        (set! alpha (substring (alpha (+ i 26)) 0 1))\n        (set! alpha (substring\
    \ (alpha (+ i 26)) 1 26))\n        (set! alpha (substring (alpha (+ i 26)) 0 1))\n\
    \        (set! alpha (substring (alpha (+ i 26)) 1 26))\n        (set! alpha (substring\
    \ (alpha (+ i 26)) 0 1))\n        (set! alpha (substring (alpha (+ i 26)) 1 26))\n\
    \        (set! alpha (substring (alpha (+ i 26)) 0 1))\n        (set! alpha (substring\
    \ (alpha (+ i 26)) 1 26))\n        (set! alpha (substring (alpha (+ i 26)) 0 1))\n\
    \        (set! alpha (substring (alpha (+ i 26)) 1 26))\n        (set! alpha (substring\
    \ (alpha (+ i 26)) 0 1))\n        (set! alpha (substring (alpha (+ i 26)) 1 26))\n\
    \        (set! alpha (substring (alpha (+ i 26)) 0 1))\n        (set! alpha (substring\
    \ (alpha (+ i 26)) 1 26))\n        (set! alpha (substring (alpha (+ i 26)) 0 1))\n\
    \        (set! alpha (substring (alpha (+ i 26)) 1 26))\n        (set! alpha (substring\
    \ (alpha (+ i 26)) 0 1))\n        (set! alpha (substring (alpha (+ i 26)) 1 26))\n\
    \        (set! alpha (substring (alpha (+ i 26)) 0 1))\n        (set! alpha (substring\
    \ (alpha (+ i 26)) 1 26))\n        (set! alpha (substring (alpha (+ i 26)) 0 1))\n\
    \        (set! alpha (substring (alpha (+ i 26)) 1 26))\n        (set! alpha (substring\
    \ (alpha (+ i 26)) 0 1))\n        (set! alpha (substring (alpha (+ i 26)) ", " \
    \ (let ((alpha (make-array (length s) #:initial-element #\\a)))\n    (do ((i 0\
    \ (+ i 1)))\n        ((< i (length s)))\n      (set! alpha (rotate! alpha i #\\\
    a)))\n    (do ((i 0 (+ i 1)))\n        ((< i (length s)))\n      (set! alpha (rotate!\
    \ alpha i #\\b)))\n    (do ((i 0 (+ i 1)))\n        ((< i (length s)))\n     \
    \ (set! alpha (rotate! alpha i #\\c)))\n    (do ((i 0 (+ i 1)))\n        ((< i\
    \ (length s)))\n      (set! alpha (rotate! alpha i #\\d)))\n    (do ((i 0 (+ i\
    \ 1)))\n        ((< i (length s)))\n      (set! alpha (rotate! alpha i #\\e)))\n\
    \    (do ((i 0 (+ i 1)))\n        ((< i (length s)))\n      (set! alpha (rotate!\
    \ alpha i #\\f)))\n    (do ((i 0 (+ i 1)))\n        ((< i (length s)))\n     \
    \ (set! alpha (rotate! alpha i #\\g)))\n    (do ((i 0 (+ i 1)))\n        ((< i\
    \ (length s)))\n      (set! alpha (rotate! alpha i #\\h)))\n    (do ((i 0 (+ i\
    \ 1)))\n        ((< i (length s)))\n      (set! alpha (rotate! alpha i #\\i)))\n\
    \    (do ((i 0 (+ i 1)))\n        ((< i (length s)))\n      (set! alpha (rotate!\
    \ alpha i #\\j)))\n    (do ((i 0 (+ i 1)))\n        ((< i (length s)))\n     \
    \ (set! alpha (rotate! alpha i #\\k)))\n    (do ((i 0 (+ i 1)))\n        ((< i\
    \ (length s)))\n      (set! alpha (rotate! alpha i #\\l)))\n    (do ((i 0 (+ i\
    \ 1)))\n        ((< i (length s)))\n      (set! alpha (rotate! alpha i #\\m)))\n\
    \    (do ((i 0 (+ i 1)))\n        ((< i (length s)))\n      (set! alpha (rotate!\
    \ alpha i #\\n)))\n    (do ((i 0 (+ i 1)))\n        ((< i (length s)))\n     \
    \ (set! alpha (rotate! alpha i #\\o)))\n    (do ((i 0 (+ i 1)))\n        ((< i\
    \ (length s)))\n      (set! alpha (rotate! alpha i #\\p)))\n", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s)\
    \ do\n      (let ((alpha (make-array 26 :initial-element #\\a)))\n        (loop\
    \ for j from 0 to (length s) do\n          (set! alpha (rotate! alpha 2))\n  \
    \        (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate! alpha\
    \ 0))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate!\
    \ alpha -2))\n          (set! alpha (rotate! alpha -3))\n          (set! alpha\
    \ (rotate! alpha -4))\n          (set! alpha (rotate! alpha -5))\n          (set!\
    \ alpha (rotate! alpha -6))\n          (set! alpha (rotate! alpha -7))\n     \
    \     (set! alpha (rotate! alpha -8))\n          (set! alpha (rotate! alpha -9))\n\
    \          (set! alpha (rotate! alpha -10))\n          (set! alpha (rotate! alpha\
    \ -11))\n          (set! alpha (rotate! alpha -12))\n          (set! alpha (rotate!\
    \ alpha -13))\n          (set! alpha (rotate! alpha -14))\n          (set! alpha\
    \ (rotate! alpha -15))\n          (set! alpha (rotate! alpha -16))\n         \
    \ (set! alpha (rotate! alpha -17))\n          (set! alpha (rotate! alpha -18))\n\
    \          (set! alpha (rotate! alpha -19))\n          (set! alpha (rotate! alpha\
    \ -20))\n          (set! alpha (rotate! alpha -21))\n          (set! alpha (rotate!\
    \ alpha -22))\n          (set! alpha (rotate! alpha -23))\n          (set! alpha\
    \ (rotate! alpha -24))\n          (set! alpha (rotate! alpha -25))\n         \
    \ (set! alpha (rotate! alpha -26))\n          (set! alpha (rotate! alpha -27))\n\
    \          (set! alpha (rotate! alpha -28))\n          (set! alpha (rotate! alpha\
    \ -29))\n          (set! alpha (rotate! alpha -30))\n          (set! alpha (rotate!\
    \ alpha -31))\n          (set! alpha (rotate! alpha -32))\n          (set! alpha\
    \ (rotate! alpha -33))\n          (set! alpha (rotate! alpha -34))\n         \
    \ (set! alpha (", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n  \
    \  (cond [(empty? s) \"\"]\n          [(char-alphabet (first s)) (substring (first\
    \ s) 0 1)]\n          [else (substring (first s) 0 1)\n             (cond [(char-alphabet\
    \ (first s)) (substring (first s) 1 2)]\n                   [else (substring (first\
    \ s) 1 2)\n                        (cond [(char-alphabet (first s)) (substring\
    \ (first s) 2 3)]\n                               [else (substring (first s) 2\
    \ 3)\n                                      (cond [(char-alphabet (first s)) (substring\
    \ (first s) 3 4)]\n                                             [else (substring\
    \ (first s) 3 4)\n                                                  (cond [(char-alphabet\
    \ (first s)) (substring (first s) 4 5)]\n                                    \
    \                     [else (substring (first s) 4 5)\n                      \
    \                                       (cond [(char-alphabet (first s)) (substring\
    \ (first s) 5 6)]\n                                                          \
    \         [else (substring (first s) 5 6)\n                                  \
    \                                     (cond [(char-alphabet (first s)) (substring\
    \ (first s) 6 7)]\n                                                          \
    \                 [else (substring (first s) 6 7)\n                          \
    \                                                      (cond [(char-alphabet (first\
    \ s)) (substring (first s) 7 8)]\n                                           \
    \                                            [else (substring (first s) 7 8)\n\
    \                                                                            \
    \                 (cond [(char-alphabet (first s)) (substring (first s) 8 9)]\n\
    \                                                                            \
    \                       [else (substring (first s) 8 9)\n                    \
    \                                                                            \
    \        (cond [(char-alphabet (first s)) (substring (first s) 9 10)]\n      \
    \                                                                            \
    \                             [else (substring (first s) 9 10)\n             \
    \                                                                            \
    \                           (cond [(char-alphabet (first s)) (substring (first\
    \ s) 10 11)]\n                                                               \
    \                                                            [else (substring\
    \ (first s) 10 11)\n                                                         \
    \                                                                         (cond\
    \ [(char-alphabet (first s)) (substring (first s) 11 12)]\n                  \
    \                                                                            \
    \                                           [else (substring (first s) 11 12)\n\
    \                                                                            \
    \                                                                   (cond [(char-alphabet\
    \ (first s)) (substring (first s) 12 13)]\n                                  \
    \                                                                            \
    \                     [else (substring (first s) 12 13)\n                    \
    \                                                                            \
    \                                      (cond [(char-alphabet (first s)) (substring\
    \ (first s) 13 14)]\n                                                        \
    \                                                                            \
    \         [else (substring (first s) 13 14)\n                                \
    \                                                                            \
    \                                      (cond [(char-alphabet (first s)) (substring\
    \ (first s) 14 15)]\n                                                        \
    \                                                                            \
    \                     [", "  (let ((alpha (make-array 26 :initial-element #\\\
    a)))\n    (loop for i from 0 to (length s) do\n      (set! alpha (rotate! alpha\
    \ 2))\n      (set! alpha (rotate! alpha 1))\n      (set! alpha (rotate! alpha\
    \ 0))\n      (set! alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha\
    \ -2))\n      (set! alpha (rotate! alpha -3))\n      (set! alpha (rotate! alpha\
    \ -4))\n      (set! alpha (rotate! alpha -5))\n      (set! alpha (rotate! alpha\
    \ -6))\n      (set! alpha (rotate! alpha -7))\n      (set! alpha (rotate! alpha\
    \ -8))\n      (set! alpha (rotate! alpha -9))\n      (set! alpha (rotate! alpha\
    \ -10))\n      (set! alpha (rotate! alpha -11))\n      (set! alpha (rotate! alpha\
    \ -12))\n      (set! alpha (rotate! alpha -13))\n      (set! alpha (rotate! alpha\
    \ -14))\n      (set! alpha (rotate! alpha -15))\n      (set! alpha (rotate! alpha\
    \ -16))\n      (set! alpha (rotate! alpha -17))\n      (set! alpha (rotate! alpha\
    \ -18))\n      (set! alpha (rotate! alpha -19))\n      (set! alpha (rotate! alpha\
    \ -20))\n      (set! alpha (rotate! alpha -21))\n      (set! alpha (rotate! alpha\
    \ -22))\n      (set! alpha (rotate! alpha -23))\n      (set! alpha (rotate! alpha\
    \ -24))\n      (set! alpha (rotate! alpha -25))\n      (set! alpha (rotate! alpha\
    \ -26))\n      (set! alpha (rotate! alpha -27))\n      (set! alpha (rotate! alpha\
    \ -28))\n      (set! alpha (rotate! alpha -29))\n      (set! alpha (rotate! alpha\
    \ -30))\n      (set! alpha (rotate! alpha -31))\n      (set! alpha (rotate! alpha\
    \ -32))\n      (set! alpha (rotate! alpha -33))\n      (set! alpha (rotate! alpha\
    \ -34))\n      (set! alpha (rotate! alpha -35))\n      (set! alpha (rotate! alpha\
    \ -36))\n      (set! alpha (rotate! alpha -37))\n      (set! alpha (rotate! alpha\
    \ -38))\n      (set! alpha (rotate! alpha -39))\n      (set! alpha (rotate! alpha\
    \ -40", "  (let ((alpha (make-array 26 \n                          :initial-contents\
    \ '(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\\
    o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z))\n        (shift (make-array\
    \ 26 \n                        :initial-contents '(#\\1 #\\2 #\\3 #\\4 #\\5 #\\\
    6 #\\7 #\\8 #\\9 #\\10 #\\11 #\\12 #\\13 #\\14 #\\15 #\\16 #\\17 #\\18 #\\19 #\\\
    20 #\\21 #\\22 #\\23 #\\24 #\\25 #\\26 #\\27 #\\28 #\\29 #\\30 #\\31 #\\32 #\\\
    33 #\\34 #\\35 #\\36 #\\37 #\\38 #\\39 #\\40))\n        (result (make-array (length\
    \ s) \n                         :initial-contents '())))\n    (do ((i 0 (+ i 1))\n\
    \         (j 0 (+ j 1)))\n        ((< i 26)\n         (do ((a alpha (+ i 1))\n\
    \               (b alpha (+ j 1)))\n             ((< a 26)\n               (do\
    \ ((a alpha (+ a 1)))\n                 ((b alpha (+ b 1)))\n                \
    \ ((< b 26)\n                  (do ((a alpha (+ a 2)))\n                     ((b\
    \ alpha (+ b 2)))\n                     ((< b 26)\n                      (do ((a\
    \ alpha (+ a 3)))\n                         ((b alpha (+ b 3)))\n            \
    \             ((< b 26)\n                          (do ((a alpha (+ a 4)))\n \
    \                           ((b alpha (+ b 4)))\n                            ((<\
    \ b 26)\n                             (do ((a alpha (+ a 5)))\n              \
    \                  ((b alpha (+ b 5)))\n                                ((< b\
    \ 26)\n                                 (do ((a alpha (+ a 6)))\n            \
    \                        ((b alpha (+ b 6)))\n                               \
    \     ((< b 26)\n                                     (do ((a alpha (+ a 7)))\n\
    \                                        ((b alpha (+ b 7)))\n               \
    \                         ((< b 26)\n                                        \
    \ (do ((a alpha (+ a 8)))\n                                            ((b alph",
  "  (let ((alpha (make-alphabet (length s))))\n    (loop for i from 0 to (length\
    \ s) do\n      (set! alpha (rotate-alpha (substring alpha (+ i 1) (+ i 1))))\n\
    \      (set! s (substring s (+ i 1) (+ i 1))))\n    (string s)))\n", "  (let loop\
    \ ((s s)\n             (result '()))\n    (cond [(empty? s) result]\n        \
    \  [(char-alphabet (first s)) (loop (rest s) (cons (first s) result))]\n     \
    \     [else (loop (rest s) (cons (first s) result))])))\n", "  (let ((alpha (make-array\
    \ 26 \n                          :initial-contents '(a b c d e f g h i j k l m\
    \ n o p q r s t u v w x y z))))\n    (loop for i from 0 to (length s) do\n   \
    \       (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate! alpha 1))\n\
    \          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate! alpha\
    \ -1))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate!\
    \ alpha -3))\n          (set! alpha (rotate! alpha -4))\n          (set! alpha\
    \ (rotate! alpha -5))\n          (set! alpha (rotate! alpha -6))\n          (set!\
    \ alpha (rotate! alpha -7))\n          (set! alpha (rotate! alpha -8))\n     \
    \     (set! alpha (rotate! alpha -9))\n          (set! alpha (rotate! alpha -10))\n\
    \          (set! alpha (rotate! alpha -11))\n          (set! alpha (rotate! alpha\
    \ -12))\n          (set! alpha (rotate! alpha -13))\n          (set! alpha (rotate!\
    \ alpha -14))\n          (set! alpha (rotate! alpha -15))\n          (set! alpha\
    \ (rotate! alpha -16))\n          (set! alpha (rotate! alpha -17))\n         \
    \ (set! alpha (rotate! alpha -18))\n          (set! alpha (rotate! alpha -19))\n\
    \          (set! alpha (rotate! alpha -20))\n          (set! alpha (rotate! alpha\
    \ -21))\n          (set! alpha (rotate! alpha -22))\n          (set! alpha (rotate!\
    \ alpha -23))\n          (set! alpha (rotate! alpha -24))\n          (set! alpha\
    \ (rotate! alpha -25))\n          (set! alpha (rotate! alpha -26))\n         \
    \ (set! alpha (rotate! alpha -27))\n          (set! alpha (rotate! alpha -28))\n\
    \          (set! alpha (rotate! alpha -29))\n          (set! alpha (rotate! alpha\
    \ -30))\n          (set! alpha (rotate! alpha -31))\n          (set! alpha (rotate!\
    \ alpha -32))\n          (set! alpha (rotate! alpha -33))\n          (set! alpha\
    \ (rotate! alpha -34))\n          (set! alpha (", "  (let ((alpha (make-alphabet\
    \ (length s))))\n    (let loop ((i 0) (alpha (make-alphabet (length s))))\n  \
    \    (if (< i length)\n          (let ((char (char-ref s i)))\n            (set!\
    \ alpha (rotate-alpha (char-ref alpha char) (char-ref alpha char)))\n        \
    \    (loop (+ i 1) alpha))\n          (set! alpha (rotate-alpha (char-ref alpha\
    \ char) (char-ref alpha char)))))\n    (make-string (reverse (map char-ref alpha\
    \ s)))))\n", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop\
    \ for i from 0 to (length s) do\n      (set! alpha (rotate! alpha 2))\n      (set!\
    \ alpha (rotate! alpha 1))\n      (set! alpha (rotate! alpha 0))\n      (set!\
    \ alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set!\
    \ alpha (rotate! alpha -3))\n      (set! alpha (rotate! alpha -4))\n      (set!\
    \ alpha (rotate! alpha -5))\n      (set! alpha (rotate! alpha -6))\n      (set!\
    \ alpha (rotate! alpha -7))\n      (set! alpha (rotate! alpha -8))\n      (set!\
    \ alpha (rotate! alpha -9))\n      (set! alpha (rotate! alpha -10))\n      (set!\
    \ alpha (rotate! alpha -11))\n      (set! alpha (rotate! alpha -12))\n      (set!\
    \ alpha (rotate! alpha -13))\n      (set! alpha (rotate! alpha -14))\n      (set!\
    \ alpha (rotate! alpha -15))\n      (set! alpha (rotate! alpha -16))\n      (set!\
    \ alpha (rotate! alpha -17))\n      (set! alpha (rotate! alpha -18))\n      (set!\
    \ alpha (rotate! alpha -19))\n      (set! alpha (rotate! alpha -20))\n      (set!\
    \ alpha (rotate! alpha -21))\n      (set! alpha (rotate! alpha -22))\n      (set!\
    \ alpha (rotate! alpha -23))\n      (set! alpha (rotate! alpha -24))\n      (set!\
    \ alpha (rotate! alpha -25))\n      (set! alpha (rotate! alpha -26))\n      (set!\
    \ alpha (rotate! alpha -27))\n      (set! alpha (rotate! alpha -28))\n      (set!\
    \ alpha (rotate! alpha -29))\n      (set! alpha (rotate! alpha -30))\n      (set!\
    \ alpha (rotate! alpha -31))\n      (set! alpha (rotate! alpha -32))\n      (set!\
    \ alpha (rotate! alpha -33))\n      (set! alpha (rotate! alpha -34))\n      (set!\
    \ alpha (rotate! alpha -35))\n      (set! alpha (rotate! alpha -36))\n      (set!\
    \ alpha (rotate! alpha -37))\n      (set! alpha (rotate! alpha -38))\n      (set!\
    \ alpha (rotate! alpha -39))\n      (set! alpha (rotate! alpha -40", "  (cond\n\
    \    [(empty? s) \"\"]\n    [(equal? (first s) 'a) (cons (first s) (encrypt (substring\
    \ s (+ 1 1)))]\n    [(equal? (first s) 'b) (cons (first s) (encrypt (substring\
    \ s (+ 1 1)))]\n    [(equal? (first s) 'c) (cons (first s) (encrypt (substring\
    \ s (+ 1 1)))]\n    [(equal? (first s) 'd) (cons (first s) (encrypt (substring\
    \ s (+ 1 1)))]\n    [(equal? (first s) 'e) (cons (first s) (encrypt (substring\
    \ s (+ 1 1)))]\n    [(equal? (first s) 'f) (cons (first s) (encrypt (substring\
    \ s (+ 1 1)))]\n    [(equal? (first s) 'g) (cons (first s) (encrypt (substring\
    \ s (+ 1 1)))]\n    [(equal? (first s) 'h) (cons (first s) (encrypt (substring\
    \ s (+ 1 1)))]\n    [(equal? (first s) 'i) (cons (first s) (encrypt (substring\
    \ s (+ 1 1)))]\n    [(equal? (first s) 'j) (cons (first s) (encrypt (substring\
    \ s (+ 1 1)))]\n    [(equal? (first s) 'k) (cons (first s) (encrypt (substring\
    \ s (+ 1 1)))]\n    [(equal? (first s) 'l) (cons (first s) (encrypt (substring\
    \ s (+ 1 1)))]\n    [(equal? (first s) 'm) (cons (first s) (encrypt (substring\
    \ s (+ 1 1)))]\n    [(equal? (first s) 'n) (cons (first s) (encrypt (substring\
    \ s (+ 1 1)))]\n    [(equal? (first s) 'o) (cons (first s) (encrypt (substring\
    \ s (+ 1 1)))]\n    [(equal? (first s) 'p) (cons (first s) (encrypt (substring\
    \ s (+ 1 1)))]\n    [(equal? (first s) 'q) (cons (first s) (encrypt (substring\
    \ s (+ 1 1)))]\n    [(equal? (first s) 'r) (cons (first s) (encrypt (substring\
    \ s (+ 1 1)))]\n    [(equal? (first s) 's) (cons (first s) (encrypt (substring\
    \ s (+ 1 1)))]\n    [(equal? (first s) 't) (cons (first s) (encrypt (substring\
    \ s (+ 1 1)))]\n    [(", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n\
    \    (loop for i from 0 to (length s) do\n      (set! alpha (rotate! alpha 2))\n\
    \      (set! alpha (rotate! alpha 1))\n      (set! alpha (rotate! alpha 0))\n\
    \      (set! alpha (rotate! alpha 3))\n      (set! alpha (rotate! alpha 6))\n\
    \      (set! alpha (rotate! alpha 9))\n      (set! alpha (rotate! alpha 12))\n\
    \      (set! alpha (rotate! alpha 15))\n      (set! alpha (rotate! alpha 18))\n\
    \      (set! alpha (rotate! alpha 21)))\n    (string-append (substring s 0 i)\
    \ (substring alpha (length s) i))))\n", "  (let ((alpha (make-alphabet (length\
    \ s))))\n    (let loop ((i 0) (acc '()))\n      (if (< i length)\n          (let\
    \ ((char (char-ref s i)))\n            (if (char-alphabet char)\n            \
    \    (loop (+ i 1) (cons char acc))\n                (loop (+ i 1) acc)))))\n\
    \    (reverse acc)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
