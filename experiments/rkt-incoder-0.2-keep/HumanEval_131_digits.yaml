name: HumanEval_131_digits
language: racket
prompt: "#lang racket\n\n;; Given a positive integer n, return the product of the\
  \ odd digits.\n;; Return 0 if all digits are even.\n;; For example:\n;; digits(1)\
  \  == 1\n;; digits(4)  == 0\n;; digits(235) == 15\n(define (digits n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digits))\n\
  \    (check-equal? (candidate 5) 5)\n    (check-equal? (candidate 54) 5)\n    (check-equal?\
  \ (candidate 120) 1)\n    (check-equal? (candidate 5014) 5)\n    (check-equal? (candidate\
  \ 98765) 315)\n    (check-equal? (candidate 5576543) 2625)\n    (check-equal? (candidate\
  \ 2468) 0)\n))\n\n(test-humaneval)"
completions: ["  (if (= n 0)\n      0\n      (* n (digits (remainder n 10))))) ;;\
    \ #lang racket\n", "  (if (even? n)\n      0\n      (* n (digits (quotient n 2)))))\n",
  "  (if (even? n)\n      (* n (digits (rem n 2)))\n      0))\n", "  (if (= n 0)\n\
    \      0\n      (* n (digits (quotient n 10))))) ;; #lang racket\n", "  (if (=\
    \ n 0)\n      0\n      (* n (digits (quotient n 10)))))\n", "  (if (= n 0)\n \
    \     0\n      (* n (digits (quotient n 10))))) ;; #lang racket\n", "  (cond [(=\
    \ n 0) 0]\n        [(even? (remainder n 10)) (remainder n 10)]\n        [else\
    \ (* 1 (digits (remainder n 10)))]))\n", "  (if (= n 0)\n      0\n      (* n (digits\
    \ (quotient n 10))))) ;; #lang racket\n", "  (if (= n 0)\n      0\n      (* n\
    \ (digits (quotient n 10))))) ;; #lang racket\n", "  (if (= n 0)\n      0\n  \
    \    (* n (digits (quotient n 10))))) ;; #lang racket\n", "  (if (= n 0)\n   \
    \   0\n      (* n (digits (quotient n 10))))) ;; #lang racket\n", "  (if (= n\
    \ 0)\n      0\n      (* n (digits (quotient n 10)))))\n", "  (if (= n 0)\n   \
    \   0\n      (* n (digits (quotient n 10))))) ;; #lang racket\n", "  (if (= n\
    \ 0)\n      0\n      (* n (digits (quotient n 10))))) ;; #lang racket\n", "  (if\
    \ (even? n)\n      (* n (digits (/ n 2)))\n      0))\n", "  (if (even? n)\n  \
    \    (* n (digits (quotient n 2)))\n      0))\n", "  (cond [(= n 0) 1]\n     \
    \   [(even? (remainder n 2)) (* n 3)]\n        [else 0]))\n", "  (if (even? n)\n\
    \      (* n (digits (remainder n 10)))\n      0))\n", "  (cond [(= n 0) 1]\n \
    \       [(even? (remainder n 10)) (* 10 (digits (remainder n 10)))]\n        [else\
    \ 0]))\n", "  (if (= n 0)\n      0\n      (* n (digits (quotient n 10))))) ;;\
    \ #lang racket\n", "  (if (even? n)\n      (* n (digits (remainder n 10)))\n \
    \     0))\n", "  (if (even? n)\n      (* n (digits (remainder n 10)))\n      0))\n",
  "  (if (even? n)\n      (* n (digits (remainder n 10)))\n      0))\n", "  (if (even?\
    \ n)\n      (* n (digits (remainder n 10)))\n      0))\n", "  (cond [(= n 0) 1]\n\
    \        [(even? (remainder n 10)) (* 10 (digits (remainder n 10)))]\n       \
    \ [else 0]))\n", "  (if (even? n)\n      (* n (digits (quotient n 2)))\n     \
    \ 0))\n", "  (if (= n 0)\n      0\n      (* n (digits (quotient n 10))))) ;; #lang\
    \ racket\n", "  (if (= n 0)\n      0\n      (* n (digits (remainder n 10)))))\
    \ ;; #lang racket\n", "  (if (even? n)\n      0\n      (* n (digits (quotient\
    \ n 2)))))\n", "  (if (even? n)\n      (* n (digits (remainder n 10)))\n     \
    \ 0))\n", "  (if (even? n)\n      0\n      (* n (digits (quotient n 2)))))\n",
  "  (if (even? n)\n      0\n      (* n (digits (quotient n 2)))))\n", "  (if (= n\
    \ 0)\n      0\n      (* n (digits (quotient n 10))))) ;; #lang racket\n", "  (if\
    \ (= n 0)\n      0\n      (* n (digits (quotient n 10)))))\n", "  (if (= n 0)\n\
    \      0\n      (* n (digits (quotient n 10))))) ;; #lang racket\n", "  (if (=\
    \ n 0)\n      0\n      (* n (digits (quotient n 10)))))\n", "  (if (= n 0)\n \
    \     0\n      (* n (digits (quotient n 10))))) ;; #lang racket\n", "  (cond [(=\
    \ n 0) 1]\n        [(even? (remainder n 10)) (* 2 (digits (remainder n 10)))]\n\
    \        [else 0]))\n", "  (if (= n 0)\n      0\n      (* n (digits (quotient\
    \ n 10))))) ;; #lang racket\n", "  (if (= n 0)\n      0\n      (* n (digits (quotient\
    \ n 10))))) ;; #lang racket\n", "  (if (= n 0)\n      0\n      (* n (digits (quotient\
    \ n 10))))) ;; #lang racket\n", "  (if (= n 0)\n      0\n      (* n (digits (quotient\
    \ n 10))))) ;; #lang racket\n", "  (if (= n 0)\n      0\n      (* n (digits (quotient\
    \ n 10))))) ;; #lang racket\n", "  (if (= n 0)\n      0\n      (* n (digits (quotient\
    \ n 10))))) ;; #lang racket\n", "  (if (= n 0)\n      0\n      (* n (digits (remainder\
    \ n 10))))) ;; #lang racket\n", "  (if (= n 0)\n      0\n      (* n (digits (quotient\
    \ n 10))))) ;; #lang racket\n", "  (if (= n 0)\n      0\n      (* n (digits (quotient\
    \ n 10))))) ;; #lang racket\n", "  (cond [(= n 0) 1]\n        [(= (modulo n 10)\
    \ 0) 0]\n        [else (* 10 (digits (remainder n 10)))]))\n", "  (if (= n 0)\n\
    \      0\n      (* n (digits (quotient n 10)))))\n", "  (if (= n 0)\n      0\n\
    \      (* n (digits (quotient n 10))))) ;; #lang racket\n", "  (if (= n 0)\n \
    \     0\n      (* n (digits (quotient n 10))))) ;; #lang racket\n", "  (if (even?\
    \ n)\n      (* n (digits (remainder n 10)))\n      0))\n", "  (if (= n 0)\n  \
    \    0\n      (* n (digits (quotient n 10))))) ;; #lang racket\n", "  (if (= n\
    \ 0)\n      0\n      (* n (digits (quotient n 2)))))\n", "  (if (= n 0)\n    \
    \  0\n      (* n (digits (quotient n 10))))) ;; #lang racket\n", "  (if (= n 0)\n\
    \      0\n      (* n (digits (quotient n 10))))) ;; #lang racket\n", "  (if (=\
    \ n 0)\n      0\n      (* n (digits (remainder n 10))))) ;; #lang racket\n", " \
    \ (if (= n 0)\n      0\n      (* n (digits (quotient n 10))))) ;; #lang racket\n",
  "  (if (= n 0)\n      0\n      (* n (digits (quotient n 10))))) ;; #lang racket\n",
  "  (if (even? n)\n      (* n (digits (remainder n 10)))\n      0))\n", "  (if (=\
    \ n 0)\n      0\n      (* n (digits (quotient n 2)))))\n", "  (if (= n 0)\n  \
    \    0\n      (* n (digits (quotient n 2)))))\n", "  (if (= n 0)\n      0\n  \
    \    (* n (digits (quotient n 10)))))\n", "  (if (= n 0)\n      0\n      (* n\
    \ (digits (quotient n 10)))))\n", "  (if (= n 0)\n      0\n      (* n (digits\
    \ (quotient n 10))))) ;; #lang racket\n", "  (cond [(= n 0) 1]\n        [(even?\
    \ (modulo n 10)) (* n (digits (quotient n 10)))]\n        [else 0]))\n", "  (if\
    \ (= n 0)\n      0\n      (* n (digits (quotient n 10)))))\n", "  (if (= n 0)\n\
    \      0\n      (* n (digits (quotient n 10))))) ;; #lang racket\n", "  (if (=\
    \ n 0)\n      0\n      (* n (digits (quotient n 10)))))\n", "  (if (= n 0)\n \
    \     0\n      (* n (digits (remainder n 10))))) ;; #lang racket\n", "  (if (even?\
    \ n)\n      (* n (digits (remainder n 10)))\n      0))\n", "  (if (= n 0)\n  \
    \    0\n      (* n (digits (quotient n 10))))) ;; #lang racket\n", "  (cond [(=\
    \ n 0) 1]\n        [(even? (remainder n 10)) (* 10 (digits (remainder n 10)))]\n\
    \        [else 0]))\n", "  (if (even? n)\n      (* n (digits (/ n 2)))\n     \
    \ 0))\n", "  (if (= n 0)\n      0\n      (* n (digits (quotient n 10))))) ;; #lang\
    \ racket\n", "  (if (= n 0)\n      0\n      (* n (digits (quotient n 10))))) ;;\
    \ #lang racket\n", "  (if (= n 0)\n      0\n      (* n (digits (quotient n 10)))))\
    \ ;; #lang racket\n", "  (if (even? n)\n      (* n (digits (remainder n 10)))\n\
    \      0))\n", "  (if (= n 0)\n      0\n      (* n (digits (quotient n 10)))))\
    \ ;; #lang racket\n", "  (if (= n 0)\n      0\n      (* n (digits (quotient n\
    \ 10))))) ;; #lang racket\n", "  (if (= n 0)\n      0\n      (* n (digits (quotient\
    \ n 10)))))\n", "  (if (= n 0)\n      0\n      (* n (digits (quotient n 10)))))\
    \ ;; #lang racket\n", "  (cond [(= n 0) 1]\n        [(even? (remainder n 10))\
    \ (* 10 (digits (remainder n 10)))]\n        [else 0]))\n", "  (if (even? n)\n\
    \      (* n (digits (remainder n 10)))\n      0))\n", "  (if (= n 0)\n      0\n\
    \      (* n (digits (quotient n 10))))) ; #lang racket\n", "  (if (= n 0)\n  \
    \    0\n      (* n (digits (quotient n 10))))) ;; #lang racket\n", "  (cond [(=\
    \ n 0) 1]\n        [(even? (modulo n 10)) (* n (digits (quotient n 10)))]\n  \
    \      [else 0]))\n", "  (if (even? n)\n      (* n (digits (remainder n 10)))\n\
    \      0))\n", "  (if (= n 0)\n      0\n      (* n (digits (quotient n 10)))))\
    \ ;; #lang racket\n", "  (if (= n 0)\n      0\n      (* n (digits (quotient n\
    \ 10))))) ;; #lang racket\n", "  (if (= n 0)\n      0\n      (* n (digits (quotient\
    \ n 10))))) ;; #lang racket\n", "  (if (= n 0)\n      0\n      (* n (digits (remainder\
    \ n 10))))) ;; #lang racket\n", "  (if (= n 0)\n      0\n      (* n (digits (quotient\
    \ n 2)))))\n", "  (if (= n 0)\n      0\n      (* n (digits (quotient n 2)))))\n",
  "  (if (= n 0)\n      0\n      (* n (digits (quotient n 10))))) ;; #lang racket\n",
  "  (if (even? n)\n      (* n (digits (remainder n 10)))\n      0))\n", "  (if (=\
    \ n 0)\n      0\n      (* n (digits (quotient n 10))))) ;; #lang racket\n", " \
    \ (if (= n 0)\n      0\n      (* n (digits (quotient n 10))))) ;; #lang racket\n",
  "  (if (= n 0)\n      0\n      (* n (digits (quotient n 10))))) ;; #lang racket\n",
  "  (if (= n 0)\n      0\n      (* n (digits (remainder n 10))))) ;; #lang racket\n",
  "  (cond [(= n 0) 1]\n        [(even? (remainder n 10)) (remainder n 10)]\n    \
    \    [else 0]))\n", "  (if (= n 0)\n      0\n      (* n (digits (quotient n 10)))))\
    \ ; #lang racket\n", "  (cond [(= n 0) 1]\n        [(even? (modulo n 10)) (* 10\
    \ (digits (remainder n 10)))]\n        [else 0]))\n", "  (if (= n 0)\n      0\n\
    \      (* n (digits (remainder n 10))))) ;; #lang racket\n", "  (if (= n 0)\n\
    \      0\n      (* n (digits (quotient n 10))))) ;; #lang racket\n", "  (if (=\
    \ n 0)\n      0\n      (* n (digits (quotient n 10))))) ;; #lang racket\n", " \
    \ (if (= n 0)\n      0\n      (* n (digits (quotient n 2)))))\n", "  (if (= n\
    \ 0)\n      0\n      (* n (digits (remainder n 10))))) ;; #lang racket\n", " \
    \ (cond [(= n 0) 1]\n        [(even? (modulo n 10)) (* n (digits (quotient n 10)))]\n\
    \        [else 0]))\n", "  (if (= n 0)\n      0\n      (* n (digits (quotient\
    \ n 10))))) ;; #lang racket\n", "  (if (= n 0)\n      0\n      (* n (digits (remainder\
    \ n 10))))) ;; #lang racket\n", "  (if (= n 0)\n      0\n      (* n (digits (quotient\
    \ n 10))))) ;; #lang racket\n", "  (if (= n 0)\n      0\n      (* n (digits (quotient\
    \ n 2)))))\n", "  (if (even? n)\n      0\n      (* n (digits (quotient n 2)))))\n",
  "  (if (even? n)\n      (* n (digits (remainder n 10)))\n      0))\n", "  (if (=\
    \ n 0)\n      0\n      (* n (digits (quotient n 10))))) ;; #lang racket\n", " \
    \ (if (= n 0)\n      0\n      (* n (digits (quotient n 2)))))\n", "  (if (= n\
    \ 0)\n      0\n      (* n (digits (quotient n 10))))) ;; #lang racket\n", "  (if\
    \ (= n 0)\n      0\n      (* n (digits (quotient n 2)))))\n", "  (if (= n 0)\n\
    \      0\n      (* n (digits (quotient n 10))))) ;; #lang racket\n", "  (if (=\
    \ n 0)\n      0\n      (* n (digits (quotient n 10))))) ;; #lang racket\n", " \
    \ (if (even? n)\n      0\n      (* n (digits (quotient n 2)))))\n", "  (if (even?\
    \ n)\n      (* n (digits (remainder n 10)))\n      0))\n", "  (if (= n 0)\n  \
    \    0\n      (* n (digits (quotient n 10))))) ;; #lang racket\n", "  (if (= n\
    \ 0)\n      0\n      (* n (digits (quotient n 2)))))\n", "  (if (= n 0)\n    \
    \  0\n      (* n (digits (remainder n 10))))) ;; #lang racket\n", "  (cond [(=\
    \ n 0) 1]\n        [(even? (remainder n 10)) (remainder n 10)]))\n", "  (if (=\
    \ n 0)\n      0\n      (* n (digits (remainder n 10))))) ;; #lang racket\n", " \
    \ (if (= n 0)\n      0\n      (* n (digits (quotient n 10))))) ;; #lang racket\n",
  "  (if (= n 0)\n      0\n      (* n (digits (quotient n 2)))))\n", "  (if (= n 0)\n\
    \      0\n      (* n (digits (quotient n 2)))))\n", "  (if (= n 0)\n      0\n\
    \      (* n (digits (quotient n 10)))))\n", "  (if (even? n)\n      (* n (digits\
    \ (remainder n 10)))\n      0))\n", "  (if (= n 0)\n      0\n      (* n (digits\
    \ (quotient n 10)))))\n", "  (if (= n 0)\n      0\n      (* n (digits (quotient\
    \ n 10))))) ;; #lang racket\n", "  (if (= n 0)\n      0\n      (* n (digits (quotient\
    \ n 10))))) ;; #lang racket\n", "  (if (= n 0)\n      0\n      (* n (digits (quotient\
    \ n 10))))) ;; #lang racket\n", "  (if (= n 0)\n      0\n      (* n (digits (quotient\
    \ n 10))))) ;; #lang racket\n", "  (if (= n 0)\n      0\n      (* n (digits (quotient\
    \ n 10)))))\n", "  (if (= n 0)\n      0\n      (* n (digits (quotient n 10)))))\
    \ ;; #lang racket\n", "  (if (even? n)\n      0\n      (* n (digits (quotient\
    \ n 2)))))\n", "  (cond [(= n 0) 1]\n        [(even? (modulo n 10)) (* n (digits\
    \ (quotient n 10)))]\n        [else 0]))\n", "  (if (even? n)\n      (* n (digits\
    \ (remainder n 10)))\n      0))\n", "  (if (= n 0)\n      0\n      (* n (digits\
    \ (quotient n 10))))) ;; #lang racket\n", "  (if (= n 0)\n      0\n      (* n\
    \ (digits (quotient n 2)))))\n", "  (cond [(= n 0) 1]\n        [(even? (remainder\
    \ n 10)) (* 10 (digits (remainder n 10)))]\n        [else 0]))\n", "  (if (= n\
    \ 0)\n      0\n      (* n (digits (quotient n 2)))))\n", "  (if (= n 0)\n    \
    \  0\n      (* n (digits (quotient n 2)))))\n", "  (if (= n 0)\n      0\n    \
    \  (* n (digits (quotient n 10))))) ;; #lang racket\n", "  (cond [(= n 0) 1]\n\
    \        [(even? (remainder n 10)) (* 10 (digits (remainder n 10)))]\n       \
    \ [else 0]))\n", "  (if (even? n)\n      0\n      (* n (digits (quotient n 2)))))\n",
  "  (if (= n 0)\n      0\n      (* n (digits (quotient n 10))))) ;; #lang racket\n",
  "  (if (= n 0)\n      0\n      (* n (digits (quotient n 10))))) ;; #lang racket\n",
  "  (if (= n 0)\n      0\n      (* n (digits (quotient n 10))))) ;; #lang racket\n",
  "  (if (= n 0)\n      0\n      (* n (digits (quotient n 10))))) ;; #lang racket\n",
  "  (if (= n 0)\n      0\n      (* n (digits (quotient n 10))))) ;; #lang racket\n",
  "  (if (= n 0)\n      0\n      (* n (digits (quotient n 10))))) ;; #lang racket\n",
  "  (if (= n 0)\n      0\n      (* n (digits (quotient n 10))))) ;; #lang racket\n",
  "  (if (even? n)\n      0\n      (* n (digits (remainder n 10))))) ;; #lang racket\n",
  "  (if (= n 0)\n      0\n      (* n (digits (remainder n 10))))) ;; #lang racket\n",
  "  (cond [(= n 0) 1]\n        [(= (modulo n 10) 0) 0]\n        [else (* 10 (digits\
    \ (remainder n 10)))))\n", "  (if (= n 0)\n      0\n      (* n (digits (quotient\
    \ n 10))))) ;; #lang racket\n", "  (if (even? n)\n      (* n (digits (remainder\
    \ n 10)))\n      0))\n", "  (if (= n 0)\n      0\n      (* n (digits (quotient\
    \ n 2)))))\n", "  (if (= n 0)\n      0\n      (* n (digits (quotient n 10)))))\
    \ ;; #lang racket\n", "  (if (= n 0)\n      0\n      (* n (digits (quotient n\
    \ 2)))))\n", "  (cond [(= n 0) 1]\n        [(even? (remainder n 10)) (* 10 (digits\
    \ (remainder n 10)))]\n        [else 0]))\n", "  (if (= n 0)\n      0\n      (*\
    \ n (digits (quotient n 10))))) ;; #lang racket\n", "  (cond [(= n 0) 0]\n   \
    \     [(= (modulo n 10) 0) (* n (digits (remainder n 10)))]\n        [else (*\
    \ n (digits (quotient n 10)))]))\n", "  (if (even? n)\n      (* n (digits (remainder\
    \ n 10)))\n      0))\n", "  (if (= n 0)\n      0\n      (* n (digits (quotient\
    \ n 10))))) ;; #lang racket\n", "  (if (= n 0)\n      0\n      (* n (digits (quotient\
    \ n 10))))) ;; #lang racket\n", "  (if (= n 0)\n      0\n      (* n (digits (quotient\
    \ n 10))))) ;; #lang racket\n", "  (if (= n 0)\n      0\n      (* n (digits (quotient\
    \ n 10))))) ;; #lang racket\n", "  (if (= n 0)\n      0\n      (* n (digits (quotient\
    \ n 10))))) ;; #lang racket\n", "  (if (= n 0)\n      0\n      (* n (digits (quotient\
    \ n 10))))) ;; #lang racket\n", "  (if (= n 0)\n      0\n      (* n (digits (remainder\
    \ n 10))))) ;; #lang racket\n", "  (if (even? n)\n      (* n (digits (rem n 2)))\n\
    \      0))\n", "  (if (= n 0)\n      0\n      (* n (digits (quotient n 10)))))\n",
  "  (if (= n 0)\n      0\n      (* n (digits (quotient n 10))))) ;; #lang racket\n",
  "  (if (= n 0)\n      0\n      (* n (digits (quotient n 10))))) ;; #lang racket\n",
  "  (if (= n 0)\n      0\n      (* n (digits (quotient n 10))))) ;; #lang racket\n",
  "  (if (= n 0)\n      0\n      (* n (digits (quotient n 10))))) ;; #lang racket\n",
  "  (if (= n 0)\n      0\n      (* n (digits (quotient n 10))))) ; n is even\n",
  "  (if (even? n)\n      (* n (digits (remainder n 10)))\n      0))\n", "  (if (=\
    \ n 0)\n      0\n      (* n (digits (quotient n 10))))) ;; #lang racket\n", " \
    \ (if (even? n)\n      0\n      (* n (digits (remainder n 10))))) ;; #lang racket\n",
  "  (if (even? n)\n      (* n (digits (quotient n 2)))\n      0))\n", "  (if (= n\
    \ 0)\n      0\n      (* n (digits (quotient n 10))))) ;; #lang racket\n", "  (cond\
    \ [(= n 0) 1]\n        [(even? (remainder n 10)) (remainder n 10)]))\n", "  (cond\
    \ [(= n 0) 1]\n        [(= (modulo n 10) 0) 0]\n        [else (* 10 (digits (quotient\
    \ n 10)))]))\n", "  (if (= n 0)\n      0\n      (* n (digits (quotient n 10)))))\
    \ ;; #lang racket\n", "  (if (= n 0)\n      0\n      (* n (digits (quotient n\
    \ 10))))) ;; #lang racket\n", "  (if (= n 0)\n      0\n      (* n (digits (remainder\
    \ n 10))))) ;; #lang racket\n", "  (if (= n 0)\n      0\n      (* n (digits (quotient\
    \ n 10))))) ;; #lang racket\n", "  (if (even? n)\n      (* n (digits (remainder\
    \ n 10)))\n      0))\n", "  (if (= n 0)\n      0\n      (* n (digits (quotient\
    \ n 10))))) ;; #lang racket\n", "  (cond [(= n 0) 1]\n        [(= (modulo n 10)\
    \ 0) 0]\n        [else (* 10 (digits (quotient n 10)))]))\n", "  (if (= n 0)\n\
    \      0\n      (* n (digits (quotient n 10))))) ;; #lang racket\n", "  (if (=\
    \ n 0)\n      0\n      (* n (digits (quotient n 2)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
