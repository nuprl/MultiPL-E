name: HumanEval_55_fib
language: racket
results:
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp07qb6n3f.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp07qb6n3f.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp07qb6n3f.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp07qb6n3f.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvhm4xia6.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpvhm4xia6.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpvhm4xia6.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpvhm4xia6.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    1\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpuhdkz5z4.rkt:13:45: read-syntax: missing `]` to close preceding\
    \ `[`, found instead `)`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdppx8o3v.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpdppx8o3v.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpdppx8o3v.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpdppx8o3v.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9mbxx2k2.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp9mbxx2k2.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp9mbxx2k2.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp9mbxx2k2.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppcqv5b0b.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmppcqv5b0b.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmppcqv5b0b.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmppcqv5b0b.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp974axw3k.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp974axw3k.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp974axw3k.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp974axw3k.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp64jyg767.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp64jyg767.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp64jyg767.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp64jyg767.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeoikwq8g.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpeoikwq8g.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpeoikwq8g.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpeoikwq8g.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxgdlp46c.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpxgdlp46c.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpxgdlp46c.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpxgdlp46c.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy2ii1cs7.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpy2ii1cs7.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpy2ii1cs7.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpy2ii1cs7.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))))])\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpjbakzpm4.rkt:13:45: read-syntax: missing `]` to close preceding\
    \ `[`, found instead `)`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpawlaliea.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpawlaliea.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpawlaliea.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpawlaliea.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpwqv_g3kw.rkt:13:45: read-syntax: missing `]` to close preceding\
    \ `[`, found instead `)`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv_v9hvp0.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpv_v9hvp0.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpv_v9hvp0.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpv_v9hvp0.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc5ty63g9.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpc5ty63g9.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpc5ty63g9.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpc5ty63g9.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuivxx6oy.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpuivxx6oy.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpuivxx6oy.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpuivxx6oy.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdv98js83.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpdv98js83.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpdv98js83.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpdv98js83.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2))))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpb46i5j6b.rkt:13:45: read-syntax: missing `]` to close preceding\
    \ `[`, found instead `)`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0vifvkrz.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp0vifvkrz.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp0vifvkrz.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp0vifvkrz.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbtyvylz0.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpbtyvylz0.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpbtyvylz0.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpbtyvylz0.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpide74cg3.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpide74cg3.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpide74cg3.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpide74cg3.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzj_buym.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpzzj_buym.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpzzj_buym.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpzzj_buym.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpl_7fn3_s.rkt:13:45: read-syntax: missing `]` to close preceding\
    \ `[`, found instead `)`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp64pv21ph.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp64pv21ph.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp64pv21ph.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp64pv21ph.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpyfib47hj.rkt:13:45: read-syntax: missing `]` to close preceding\
    \ `[`, found instead `)`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpngpreej3.rkt:13:45: read-syntax: missing `]` to close preceding\
    \ `[`, found instead `)`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvtde4u3a.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpvtde4u3a.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpvtde4u3a.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpvtde4u3a.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2osjpsad.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp2osjpsad.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp2osjpsad.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp2osjpsad.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (< n 2)\n  \
    \    n\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxgljdfng.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpxgljdfng.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpxgljdfng.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpxgljdfng.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnukv_k6d.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpnukv_k6d.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpnukv_k6d.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpnukv_k6d.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbt47cm46.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpbt47cm46.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpbt47cm46.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpbt47cm46.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3v_oeii6.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp3v_oeii6.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp3v_oeii6.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp3v_oeii6.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_5c0t_uf.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp_5c0t_uf.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp_5c0t_uf.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp_5c0t_uf.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3fnlgzii.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp3fnlgzii.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp3fnlgzii.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp3fnlgzii.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcq7_f10k.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpcq7_f10k.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpcq7_f10k.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpcq7_f10k.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpunji2w4h.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpunji2w4h.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpunji2w4h.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpunji2w4h.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbeq340cx.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpbeq340cx.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpbeq340cx.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpbeq340cx.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1zzgfe2x.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp1zzgfe2x.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp1zzgfe2x.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp1zzgfe2x.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))))])\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpiqmovvu0.rkt:13:45: read-syntax: missing `]` to close preceding\
    \ `[`, found instead `)`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1k5l_giq.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp1k5l_giq.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp1k5l_giq.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp1k5l_giq.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ynzrz6e.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp4ynzrz6e.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp4ynzrz6e.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp4ynzrz6e.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8jv097cy.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp8jv097cy.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp8jv097cy.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp8jv097cy.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2))))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpjncio9cc.rkt:13:45: read-syntax: missing `]` to close preceding\
    \ `[`, found instead `)`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))))])\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp6fhdvw6w.rkt:13:45: read-syntax: missing `]` to close preceding\
    \ `[`, found instead `)`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp0cn4wmbj.rkt:13:45: read-syntax: missing `]` to close preceding\
    \ `[`, found instead `)`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpnlnfhmmy.rkt:13:45: read-syntax: missing `]` to close preceding\
    \ `[`, found instead `)`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    1\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphc5osy3p.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmphc5osy3p.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmphc5osy3p.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmphc5osy3p.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyfu2nt4n.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpyfu2nt4n.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpyfu2nt4n.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpyfu2nt4n.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3t_eulay.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp3t_eulay.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp3t_eulay.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp3t_eulay.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6ikd79ch.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp6ikd79ch.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp6ikd79ch.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp6ikd79ch.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm1jadnlc.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpm1jadnlc.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpm1jadnlc.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpm1jadnlc.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg4jn3kx7.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpg4jn3kx7.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpg4jn3kx7.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpg4jn3kx7.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjz8ytf_g.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpjz8ytf_g.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpjz8ytf_g.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpjz8ytf_g.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4gj843dl.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp4gj843dl.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp4gj843dl.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp4gj843dl.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfw2ke33v.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpfw2ke33v.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpfw2ke33v.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpfw2ke33v.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2))))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp0h894f1_.rkt:13:45: read-syntax: missing `]` to close preceding\
    \ `[`, found instead `)`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdiv5o3lx.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpdiv5o3lx.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpdiv5o3lx.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpdiv5o3lx.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    1\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp1ib4gfr.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpp1ib4gfr.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpp1ib4gfr.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpp1ib4gfr.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (< n 2)\n  \
    \    n\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn1107zpx.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpn1107zpx.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpn1107zpx.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpn1107zpx.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    1\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2))))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpl_9cbaow.rkt:13:45: read-syntax: missing `]` to close preceding\
    \ `[`, found instead `)`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyqr8lr_l.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpyqr8lr_l.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpyqr8lr_l.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpyqr8lr_l.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2))))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmppjrr_jdp.rkt:13:45: read-syntax: missing `]` to close preceding\
    \ `[`, found instead `)`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2))))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpjwjkwff0.rkt:13:45: read-syntax: missing `]` to close preceding\
    \ `[`, found instead `)`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz4s2l38c.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpz4s2l38c.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpz4s2l38c.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpz4s2l38c.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy4kjxok6.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpy4kjxok6.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpy4kjxok6.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpy4kjxok6.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0mvoia4l.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp0mvoia4l.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp0mvoia4l.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp0mvoia4l.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp88h0r313.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp88h0r313.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp88h0r313.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp88h0r313.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsxvmtc_g.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpsxvmtc_g.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpsxvmtc_g.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpsxvmtc_g.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoongabhz.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpoongabhz.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpoongabhz.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpoongabhz.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3j4q1sku.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp3j4q1sku.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp3j4q1sku.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp3j4q1sku.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvzo2dbvc.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpvzo2dbvc.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpvzo2dbvc.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpvzo2dbvc.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp46i27a4l.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp46i27a4l.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp46i27a4l.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp46i27a4l.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxaa0e2ep.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpxaa0e2ep.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpxaa0e2ep.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpxaa0e2ep.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqb_7ehm7.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpqb_7ehm7.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpqb_7ehm7.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpqb_7ehm7.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpw0sbfow4.rkt:13:45: read-syntax: missing `]` to close preceding\
    \ `[`, found instead `)`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeuzght_i.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpeuzght_i.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpeuzght_i.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpeuzght_i.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp64jlpne_.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp64jlpne_.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp64jlpne_.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp64jlpne_.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposblgevu.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmposblgevu.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmposblgevu.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmposblgevu.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps_hwtojh.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmps_hwtojh.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmps_hwtojh.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmps_hwtojh.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpccba8fwf.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpccba8fwf.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpccba8fwf.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpccba8fwf.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb25imyba.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpb25imyba.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpb25imyba.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpb25imyba.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6kxqzfl6.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp6kxqzfl6.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp6kxqzfl6.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp6kxqzfl6.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7sr2o1k4.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp7sr2o1k4.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp7sr2o1k4.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp7sr2o1k4.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmokemtjg.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpmokemtjg.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpmokemtjg.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpmokemtjg.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp46s5ixs1.rkt:13:45: read-syntax: missing `]` to close preceding\
    \ `[`, found instead `)`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpktbsl8il.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpktbsl8il.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpktbsl8il.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpktbsl8il.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5op9wj_4.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp5op9wj_4.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp5op9wj_4.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp5op9wj_4.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwxdw_2zq.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpwxdw_2zq.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpwxdw_2zq.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpwxdw_2zq.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb3uqwva4.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpb3uqwva4.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpb3uqwva4.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpb3uqwva4.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpssy_njhr.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpssy_njhr.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpssy_njhr.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpssy_njhr.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpew229g61.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpew229g61.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpew229g61.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpew229g61.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpyeckjokh.rkt:13:45: read-syntax: missing `]` to close preceding\
    \ `[`, found instead `)`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjb3n0127.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpjb3n0127.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpjb3n0127.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpjb3n0127.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprnvuvxqz.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmprnvuvxqz.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmprnvuvxqz.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmprnvuvxqz.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3hzf2ndm.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp3hzf2ndm.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp3hzf2ndm.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp3hzf2ndm.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy_k9sz3h.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpy_k9sz3h.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpy_k9sz3h.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpy_k9sz3h.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpwrox1xre.rkt:13:45: read-syntax: missing `]` to close preceding\
    \ `[`, found instead `)`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpts46ldvs.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpts46ldvs.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpts46ldvs.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpts46ldvs.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj9rrtle7.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpj9rrtle7.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpj9rrtle7.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpj9rrtle7.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppkfdbpiv.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmppkfdbpiv.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmppkfdbpiv.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmppkfdbpiv.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeeio6_kl.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpeeio6_kl.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpeeio6_kl.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpeeio6_kl.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgkeig5t4.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpgkeig5t4.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpgkeig5t4.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpgkeig5t4.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm3w2qy22.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpm3w2qy22.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpm3w2qy22.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpm3w2qy22.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2))))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpd76seocq.rkt:13:45: read-syntax: missing `]` to close preceding\
    \ `[`, found instead `)`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpr9j224to.rkt:13:45: read-syntax: missing `]` to close preceding\
    \ `[`, found instead `)`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp7ne9vi08.rkt:13:45: read-syntax: missing `]` to close preceding\
    \ `[`, found instead `)`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa0b0w6af.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpa0b0w6af.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpa0b0w6af.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpa0b0w6af.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    1\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp892t6f69.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp892t6f69.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp892t6f69.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp892t6f69.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9g1_nxe2.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp9g1_nxe2.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp9g1_nxe2.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp9g1_nxe2.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    1\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptqgjssga.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmptqgjssga.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmptqgjssga.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmptqgjssga.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    0\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8qksf0s4.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp8qksf0s4.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp8qksf0s4.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp8qksf0s4.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps5nhfr4t.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmps5nhfr4t.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmps5nhfr4t.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmps5nhfr4t.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp5ymyyjav.rkt:13:45: read-syntax: missing `]` to close preceding\
    \ `[`, found instead `)`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp9jarvwzl.rkt:13:45: read-syntax: missing `]` to close preceding\
    \ `[`, found instead `)`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (cond [(= n 0) 1]\n\
    \        [(= n 1) 1]\n        [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal?\
    \ (candidate 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 8) 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppqs9kliv.rkt:20:4\n\
    actual:     89\nexpected:   55\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmppqs9kliv.rkt:22:4\nactual:     34\n\
    expected:   21\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmppqs9kliv.rkt:23:4\nactual:     144\nexpected:\
    \   89\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmppqs9kliv.rkt:24:4\nactual:     233\nexpected:   144\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return n-th Fibonacci number.\n;; >>> fib(10)\n;; 55\n\
    ;; >>> fib(1)\n;; 1\n;; >>> fib(8)\n;; 21\n(define (fib n)\n  (if (= n 0)\n  \
    \    1\n      (+ (fib (- n 1)) (fib (- n 2)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib))\n    (check-equal? (candidate\
    \ 10) 55)\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 8)\
    \ 21)\n    (check-equal? (candidate 11) 89)\n    (check-equal? (candidate 12)\
    \ 144)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
