name: HumanEval_22_filter_integers
language: racket
prompt: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
  ;; >>> filter_integers(['a', 3.14, 5])\n;; [5]\n;; >>> filter_integers([1, 2, 3,\
  \ 'abc', {}, []])\n;; [1, 2, 3]\n(define (filter_integers values)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
  \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate (list\
  \ 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
  \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
completions: ["  (filter (lambda (x) (number? x))\n          values))\n", "  (filter\
    \ (lambda (x) (number? x))\n          values))\n", "  (filter (lambda (x y)\n\
    \            (and (number? x)\n                 (number? y))\n            (integer?\
    \ x) (integer? y))\n          values))\n", "  (filter (lambda (x) (and (number?\
    \ x) (integer? x))) values))\n", "  (filter (lambda (x) (and (number? x) (integer?\
    \ x))) values))\n", "  (filter (lambda (x) (and (number? x) x)) values))\n", " \
    \ (filter (lambda (x) (and (number? x) (integer? x))) values))\n", "  (filter\
    \ (lambda (x) (and (number? x) (integer? x))) values))\n", "  (filter (lambda\
    \ (x) (and (number? x) (integer? x))) values))\n", "  (filter (lambda (x) (and\
    \ (number? x) (integer? x))) values))\n", "  (filter (lambda (x) (number? x))\n\
    \          values))\n", "  (filter (lambda (x) (and (number? x) (integer? x)))\
    \ values))\n", "  (cond\n    [(empty? values) '()]\n    [(number? (car values))\
    \ (cons (car values) (filter_integers (cdr values)))]\n    [else (cons (car values)\
    \ (filter_integers (cdr values)))]))\n", "  (filter (lambda (x) (and (number?\
    \ x) (integer? x))) values))\n", "  (filter (lambda (x) (number? x))\n       \
    \  values))\n", "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n",
  "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n", "  (filter (lambda\
    \ (x) (and (number? x) (integer? x))) values))\n", "  (filter (lambda (x) (and\
    \ (number? x) (integer? x))) values))\n", "  (filter (lambda (item)\n        \
    \    (and (number? item)\n                 (not (list? item)))\n            item))\n\
    \  values)\n", "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n",
  "  (filter (lambda (x) (number? x))\n          values))\n", "  (filter (lambda (x)\
    \ (and (number? x) (integer? x))) values))\n", "  (filter (lambda (x) (and (number?\
    \ x) (integer? x))) values))\n", "  (filter (lambda (x) (and (number? x) (in?\
    \ x '(#inst #xx #oo #bl #tl #fl #dbl #dl #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt\
    \ #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt\
    \ #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt\
    \ #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt\
    \ #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt\
    \ #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt\
    \ #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt\
    \ #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt\
    \ #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt\
    \ #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt\
    \ #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt\
    \ #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt\
    \ #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #",
  "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n", "  (filter (lambda\
    \ (x) (and (number? x) (integer? x))) values))\n", "  (filter (lambda (x) (and\
    \ (number? x) (integer? x))) values))\n", "  (filter (lambda (x) (and (number?\
    \ x) (integer? x))) values))\n", "  (filter (lambda (x) (and (number? x) (integer?\
    \ x))) values))\n", "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n",
  "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n", "  (filter (lambda\
    \ (x) (and (number? x) (integer? x))) values))\n", "  (filter (lambda (x) (number?\
    \ x))\n          values))\n", "  (filter (lambda (x) (and (number? x) (integer?\
    \ x))) values))\n", "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n",
  "  (filter (lambda (x) (and (number? x) \n                           (not (integer?\
    \ x)))) values))\n", "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n",
  "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n", "  (filter (lambda\
    \ (item)\n            (and (number? item)\n                 (not (number? (car\
    \ item))))) values))\n", "  (filter (lambda (x) (number? x))\n          values))\n",
  "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n", "  (filter (lambda\
    \ (x) (and (number? x) (integer? x))) values))\n", "  (filter (lambda (x) (number?\
    \ x))\n         values))\n", "  (filter (lambda (item)\n            (and (number?\
    \ item) (integer? item)))\n          values))\n", "  (filter (lambda (x) (number?\
    \ x))\n          values))\n", "  (filter (lambda (x) (number? x))\n          values))\n",
  "  (filter (lambda (x) (number? x))\n         values))\n", "  (filter (lambda (x)\
    \ (and (number? x) (integer? x))) values))\n", "  (cond\n    [(empty? values)\
    \ '()]\n    [(number? (car values)) (cons (car values) (filter_integers (cdr values)))]\n\
    \    [else (cons (car values) (filter_integers (cdr values)))]))\n", "  (filter\
    \ (lambda (x) (and (number? x) (in? x '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\\
    7 #\\8 #\\9 #\\10 #\\11 #\\12 #\\13 #\\14 #\\15 #\\16 #\\17 #\\18 #\\19 #\\20\
    \ #\\21 #\\22 #\\23 #\\24 #\\25 #\\26 #\\27 #\\28 #\\29 #\\30 #\\31 #\\32 #\\\
    33 #\\34 #\\35 #\\36 #\\37 #\\38 #\\39 #\\40))) values))\n", "  (filter (lambda\
    \ (x) (and (number? x) (integer? x))) values))\n", "  (filter (lambda (x) (and\
    \ (number? x) (integer? x))) values))\n", "  (filter (lambda (x) (and (number?\
    \ x) (integer? x))) values))\n", "  (cond\n    [(empty? values) '()]\n    [(number?\
    \ (car values)) (cons (car values) (filter_integers (cdr values)))]\n    [else\
    \ (filter_integers (cdr values))]))\n", "  (filter (lambda (x) (and (number? x)\
    \ (integer? x))) values))\n", "  (cond\n    [(empty? values) '()]\n    [(number?\
    \ (car values)) (cons (car values) (filter_integers (cdr values)))]\n    [else\
    \ (cons (car values) (filter_integers (cdr values)))]))\n", "  (filter (lambda\
    \ (x) (and (number? x) (integer? x))) values))\n", "  (filter (lambda (x) (number?\
    \ x))\n          values))\n", "  (filter (lambda (x) (number? x))\n          values))\n",
  "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n", "  (filter (lambda\
    \ (x) (and (number? x) (integer? x))) values))\n", "  (filter (lambda (x) (and\
    \ (number? x) (integer? x))) values))\n", "  (filter (lambda (x) (and (number?\
    \ x) integer? x))\n         values))\n", "  (filter (lambda (x) (and (number?\
    \ x) (integer? x))) values))\n", "  (filter (lambda (x) (and (number? x) (integer?\
    \ x))) values))\n", "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n",
  "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n", "  (filter (lambda\
    \ (x) (and (number? x) (integer? x))) values))\n", "  (filter (lambda (x) (number?\
    \ x))\n         values))\n", "  (cond\n    [(empty? values) '()]\n    [(number?\
    \ (car values)) (cons (car values) (filter_integers (cdr values)))]\n    [else\
    \ (filter_integers (cdr values))]))\n", "  (filter (lambda (x) (number? x))\n\
    \          values))\n", "  (filter (lambda (x) (number? x))\n          values))\n",
  "  (filter (lambda (x) (number? x))\n          values))\n", "  (filter (lambda (x)\
    \ (number? x))\n          values))\n", "  (filter (lambda (x) (and (number? x)\
    \ (integer? x))) values))\n", "  (filter (lambda (x) (and (number? x) (integer?\
    \ x))) values))\n", "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n",
  "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n", "  (filter (lambda\
    \ (x) (and (number? x) (in? x '(#inst #xx #oo #bl #tl #fl #dbl #dt #dt #dt #dt\
    \ #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt\
    \ #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt\
    \ #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt\
    \ #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt\
    \ #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt\
    \ #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt\
    \ #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt\
    \ #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt\
    \ #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt\
    \ #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt\
    \ #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt\
    \ #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt #dt\
    \ #dt #dt #dt #dt #dt #dt #dt ", "  (filter (lambda (x) (and (number? x) (integer?\
    \ x))) values))\n", "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n",
  "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n", "  (filter (lambda\
    \ (x) (and (number? x) (integer? x))) values))\n", "  (filter (lambda (x) (number?\
    \ x))\n         values))\n", "  (filter (lambda (x) (number? x))\n          values))\n",
  "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n", "  (filter (lambda\
    \ (x) (number? x))\n          values))\n", "  (filter (lambda (x) (and (number?\
    \ x) (integer? x))) values))\n", "  (filter (lambda (x) (and (number? x) x)) values))\n",
  "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n", "  (filter (lambda\
    \ (x) (and (number? x) (integer? x))) values))\n", "  (filter (lambda (x) (and\
    \ (number? x) (integer? x))) values))\n", "  (cond\n    [(empty? values) '()]\n\
    \    [(number? (car values)) (cons (car values) (filter_integers (cdr values)))]\n\
    \    [else (cons (car values) (filter_integers (cdr values)))]))\n", "  (filter\
    \ (lambda (x) (number? x))\n         values))\n", "  (filter (lambda (x) (and\
    \ (number? x) (integer? x))) values))\n", "  (filter (lambda (x) (number? x))\n\
    \         values))\n", "  (filter (lambda (x) (and (number? x) (in? x '(#\\0 #\\\
    1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9 #\\10 #\\11 #\\12 #\\13 #\\14 #\\15\
    \ #\\16 #\\17 #\\18 #\\19 #\\20 #\\21 #\\22 #\\23 #\\24 #\\25 #\\26 #\\27 #\\\
    28 #\\29 #\\30 #\\31 #\\32 #\\33 #\\34 #\\35 #\\36 #\\37 #\\38 #\\39 #\\40)))\
    \ values))\n", "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n",
  "  (filter (lambda (x) (number? x))\n          values))\n", "  (filter (lambda (x)\
    \ (and (number? x) x)) values))\n", "  (filter (lambda (x) (number? x)) values))\n",
  "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n", "  (filter (lambda\
    \ (x) (number? x))\n          values))\n", "  (filter (lambda (x) (number? x))\n\
    \          values))\n", "  (filter (lambda (x) (number? x))\n         values))\n",
  "  (filter (lambda (x) (number? x))\n          values))\n", "  (filter (lambda (x)\
    \ (number? x))\n          values))\n", "  (filter (lambda (x) (number? x))\n \
    \         values))\n", "  (filter (lambda (x) (number? x))\n          values))\n",
  "  (filter (lambda (x) (number? x))\n         values))\n", "  (filter (lambda (x)\
    \ (number? x)) values))\n", "  (filter (lambda (x) (and (number? x) (integer?\
    \ x))) values))\n", "  (filter (lambda (x) (number? x))\n          values))\n",
  "  (filter (lambda (x) (number? x))\n          values))\n", "  (filter (lambda (x)\
    \ (and (number? x) (integer? x))) values))\n", "  (filter (lambda (item)\n   \
    \         (and (number? item)\n                 (not (number? (car item))))\n\
    \            values)\n          values))\n", "  (filter (lambda (x) (and (number?\
    \ x) (integer? x))) values))\n", "  (filter (lambda (x) (and (number? x) (integer?\
    \ x))) values))\n", "  (filter (lambda (item)\n            (and (number? item)\n\
    \                 (not (number? (car item))))\n            values))\n  )\n", " \
    \ (filter (lambda (x) (and (number? x) (integer? x))) values))\n", "  (filter\
    \ (lambda (x) (and (number? x) (integer? x))) values))\n", "  (filter (lambda\
    \ (x) (and (number? x) (integer? x))) values))\n", "  (filter (lambda (x) (and\
    \ (number? x) (in? x '(integer rational)))))\n  values)\n", "  (filter (lambda\
    \ (x) (number? x))\n          values))\n", "  (filter (lambda (x) (number? x))\n\
    \         values))\n", "  (filter (lambda (x) (and (number? x) (integer? x)))\
    \ values))\n", "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n",
  "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n", "  (filter (lambda\
    \ (x y)\n            (and (number? x) (number? y))\n            (not (number?\
    \ x) (number? y)))\n          values))\n", "  (filter (lambda (x) (number? x))\n\
    \          values))\n", "  (filter (lambda (x) (number? x))\n         values))\n",
  "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n", "  (filter (lambda\
    \ (x) (number? x))\n          values))\n", "  (filter (lambda (x) (and (number?\
    \ x) (integer? x))) values))\n", "  (filter (lambda (x) (and (number? x) (integer?\
    \ x))) values))\n", "  (cond\n    [(empty? values) '()]\n    [(number? (car values))\
    \ (cons (car values) (filter_integers (cdr values)))]\n    [else (cons (car values)\
    \ (filter_integers (cdr values)))]))\n", "  (filter (lambda (x) (and (number?\
    \ x) (integer? x))) values))\n", "  (filter (lambda (x) (number? x))\n       \
    \   values))\n", "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n",
  "  (filter (lambda (x) (number? x))\n          values))\n", "  (filter (lambda (x)\
    \ (number? x))\n          values))\n", "  (filter (lambda (x) (and (number? x)\
    \ integer? x))\n         values))\n", "  (filter (lambda (item)\n            (and\
    \ (number? item)\n                 (not (number? (car item))))\n            values))\n\
    )\n", "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n", "  (filter\
    \ (lambda (x) (number? x))\n         values))\n", "  (filter (lambda (x) (number?\
    \ x))\n          values))\n", "  (filter (lambda (x) (and (number? x) (integer?\
    \ x))) values))\n", "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n",
  "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n", "  (filter (lambda\
    \ (x) (and (number? x) (integer? x))) values))\n", "  (filter (lambda (x) (number?\
    \ x))\n          values))\n", "  (cond\n    [(empty? values) '()]\n    [(number?\
    \ (first values)) (cons (first values) (filter_integers (rest values)))]\n   \
    \ [else (filter_integers (rest values))]))\n", "  (filter (lambda (x) (number?\
    \ x))\n          values))\n", "  (filter (lambda (x) (and (number? x) (integer?\
    \ x))) values))\n", "  (filter (lambda (item)\n            (and (number? item)\n\
    \                 (not (number? (car item))))\n            values))\n)\n", " \
    \ (filter (lambda (x) (and (number? x) (integer? x))) values))\n", "  (filter\
    \ (lambda (x) (number? x))\n          values))\n", "  (filter (lambda (x) (and\
    \ (number? x) (integer? x))) values))\n", "  (filter (lambda (x) (number? x))\n\
    \          values))\n", "  (filter (lambda (x) (number? x))\n          values))\n",
  "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n", "  (filter (lambda\
    \ (x) (number? x))\n          values))\n", "  (filter (lambda (x) (and (number?\
    \ x) (integer? x))) values))\n", "  (filter (lambda (x) (number? x))\n       \
    \   values))\n", "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n",
  "  (filter (lambda (x) (and (number? x) (in? x '(#\\- #\\+ #\\0 #\\1 #\\2 #\\3 #\\\
    4 #\\5 #\\6 #\\7 #\\8 #\\9))))\n          values))\n", "  (filter (lambda (x)\
    \ (number? x))\n          values))\n", "  (filter (lambda (x) (and (number? x)\
    \ integer? x))\n         values))\n", "  (filter (lambda (item)\n            (and\
    \ (number? item)\n                 (not (number? (car item))))\n            item))\n\
    \  values)\n", "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n",
  "  (filter (lambda (x) (number? x))\n          values))\n", "  (filter (lambda (x)\
    \ (and (number? x) (integer? x))) values))\n", "  (filter (lambda (x) (and (number?\
    \ x) (integer? x))) values))\n", "  (filter (lambda (x) (number? x))\n       \
    \   values))\n", "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n",
  "  (filter (lambda (x) (number? x))\n         values))\n", "  (filter (lambda (x)\
    \ (number? x))\n         values))\n", "  (filter (lambda (x) (and (number? x)\
    \ (integer? x))) values))\n", "  (filter (lambda (x) (number? x))\n          values))\n",
  "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n", "  (filter (lambda\
    \ (x) (and (number? x) (integer? x))) values))\n", "  (filter (lambda (x) (and\
    \ (number? x) (integer? x))) values))\n", "  (filter (lambda (x) (number? x))\n\
    \         values))\n", "  (filter (lambda (x) (number? x))\n          values))\n",
  "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n", "  (filter (lambda\
    \ (x) (and (number? x) (integer? x))) values))\n", "  (filter (lambda (x) (number?\
    \ x))\n         values))\n", "  (filter (lambda (x) (and (number? x) (integer?\
    \ x))) values))\n", "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n",
  "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n", "  (filter (lambda\
    \ (x) (number? x))\n          values))\n", "  (filter (lambda (x) (and (number?\
    \ x) (string? x)))\n         values))\n", "  (filter (lambda (x) (number? x))\n\
    \          values))\n", "  (filter (lambda (x) (and (number? x) (integer? x)))\
    \ values))\n", "  (cond\n    [(empty? values) '()]\n    [(number? (car values))\
    \ (cons (car values) (filter_integers (cdr values)))]\n    [else (filter_integers\
    \ (cdr values))]))\n", "  (filter (lambda (x) (and (number? x) (integer? x)))\
    \ values))\n", "  (filter (lambda (x) (number? x))\n         values))\n", "  (filter\
    \ (lambda (x y)\n            (and (number? x)\n                 (number? y))\n\
    \            (integer? x))\n          values))\n", "  (filter (lambda (x) (and\
    \ (number? x) (integer? x))) values))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
