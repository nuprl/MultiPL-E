name: HumanEval_58_common
language: racket
results:
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpj5c3lw68.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpj5c3lw68.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpxrxxvahy.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpxrxxvahy.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp7vlhyx0e.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmp7vlhyx0e.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)) \n        (lambda (x) (< (length l1) (length l2)))))\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=racket,scheme |>\n<code>\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal? (candidate\
    \ (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n    (check-equal?\
    \ (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate (list\
    \ 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpha4cnxc9.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpha4cnxc9.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp_brodsor.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmp_brodsor.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmppsi1nqi8.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmppsi1nqi8.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          #:key (lambda (x) (first l1)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpqscxv2bc.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpqscxv2bc.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)) \n        (lambda (x) (equal? (first l1) x))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmppt7id737.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmppt7id737.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpwzqfo5jp.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpwzqfo5jp.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp_45b3295.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmp_45b3295.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (member x l2))\
    \ l1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ common))\n    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5\
    \ 9 653 121)) (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list\
    \ 3 2)) (list 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4))\
    \ (list 2 3 4))\n    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpd6e7esfs.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpd6e7esfs.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (let ([l1 (sort l1 '<)\n        l2 (sort l2 '<)])\n    (if (null? l1)\n   \
    \     (reverse l2)\n        (if (null? l2)\n            (reverse l1)\n       \
    \     (let ([head (car l1)\n                  tail (cdr l1)])\n              (if\
    \ (equal? (car l2) head)\n                  (common (cdr l1) l2)\n           \
    \       (common (cdr l1) (cons (car l2) tail))))))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal? (candidate\
    \ (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n    (check-equal?\
    \ (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate (list\
    \ 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpio_6ipjh.rkt:9:8: let: bad syntax (not an identifier and expression\
    \ for a binding)\n  at: (l1 (sort l1 (quote <)) l2 (sort l2 (quote <)))\n  in:\
    \ (let ((l1 (sort l1 (quote <)) l2 (sort l2 (quote <)))) (if (null? l1) (reverse\
    \ l2) (if (null? l2) (reverse l1) (let ((head (car l1) tail (cdr l1))) (if (equal?\
    \ (car l2) head) (common (cdr l1) l2) (common (cdr l1) (cons (car l2) tail)))))))\n\
    \  location...:\n   /tmp/tmpio_6ipjh.rkt:9:8\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/private/qq-and-or.rkt:101:61:\
    \ loop\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/private/qq-and-or.rkt:50:20:\
    \ go\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpv_p8rotg.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpv_p8rotg.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmplcj9ccq4.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmplcj9ccq4.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmparqixe18.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmparqixe18.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpbi54fqhl.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpbi54fqhl.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          #:key (lambda (x) (first l1)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpo3o7eiy7.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpo3o7eiy7.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp6jkzrkwn.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmp6jkzrkwn.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpbl1fm9ur.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpbl1fm9ur.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp2ijxfwf7.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmp2ijxfwf7.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpwsh8l7rx.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpwsh8l7rx.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpb7g4jziz.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpb7g4jziz.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpm3yjmfjh.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpm3yjmfjh.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpguulgwin.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpguulgwin.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (member x l2))\
    \ l1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ common))\n    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5\
    \ 9 653 121)) (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list\
    \ 3 2)) (list 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4))\
    \ (list 2 3 4))\n    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpe91ozspe.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpe91ozspe.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp70oa7tan.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmp70oa7tan.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (let loop ((l1 l1) (l2 l2) (acc '()))\n    (cond\n      [(null? l1) acc]\n\
    \      [(null? l2) acc]\n      [(equal? (car l1) (car l2)) (loop (cdr l1) (cdr\
    \ l2) (cons (car l1) acc))]\n      [else (loop (cdr l1) l2 (cons (car l1) acc))])))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg8g4pbb1.rkt:21:4\n\
    actual:     '(5 2 653 34 3 4 1)\nexpected:   '(1 5 653)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg8g4pbb1.rkt:22:4\n\
    actual:     '(2 3 5)\nexpected:   '(2 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg8g4pbb1.rkt:23:4\nactual:\
    \     '(8 2 3 4)\nexpected:   '(2 3 4)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpdgpq0ksx.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpdgpq0ksx.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp7y9npf0v.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmp7y9npf0v.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpu6n2fken.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpu6n2fken.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (member x l1))\
    \ l2))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ common))\n    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5\
    \ 9 653 121)) (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list\
    \ 3 2)) (list 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4))\
    \ (list 2 3 4))\n    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpiqz3muxx.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpiqz3muxx.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          #:key (lambda (x) (first l1)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpj9qchotp.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpj9qchotp.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpdhwa7q8p.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpdhwa7q8p.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp4u7ytlqd.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmp4u7ytlqd.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)) \n        (lambda (x) (equal? (first l1) x))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpxcitsxsg.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpxcitsxsg.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpd6dstlao.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpd6dstlao.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (member x l2))\
    \ l1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ common))\n    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5\
    \ 9 653 121)) (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list\
    \ 3 2)) (list 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4))\
    \ (list 2 3 4))\n    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpki8686v5.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpki8686v5.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpi33qf8tu.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpi33qf8tu.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (member x l2))\
    \ l1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ common))\n    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5\
    \ 9 653 121)) (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list\
    \ 3 2)) (list 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4))\
    \ (list 2 3 4))\n    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpoas_bdo1.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpoas_bdo1.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpoi0dccn3.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpoi0dccn3.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)) \n        (lambda (x) (< (length l1) (length l2)))))\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=racket,scheme |>\n<code>\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal? (candidate\
    \ (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n    (check-equal?\
    \ (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate (list\
    \ 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp_x8huymi.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmp_x8huymi.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpde2a0fr6.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpde2a0fr6.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp4luajjdg.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmp4luajjdg.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates (fold-left (lambda (x y)\n                       \
    \              (if (equal? (first x) y)\n                                    \
    \     (cons (first x) y)\n                                         (cons x y)))\n\
    \                                     (reverse l1)\n                         \
    \            (reverse l2)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate common))\n    (check-equal? (candidate (list 1 4 3 34\
    \ 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n    (check-equal? (candidate\
    \ (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal? (candidate (list 4\
    \ 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate (list 4 3 2\
    \ 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp5xzcp14y.rkt:9:28: fold-left: unbound identifier\n  in: fold-left\n\
    \  location...:\n   /tmp/tmp5xzcp14y.rkt:9:28\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpv2lmc0n6.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpv2lmc0n6.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          #:key (lambda (x) (first l1)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp2fhgh7kz.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmp2fhgh7kz.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpigloiy5w.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpigloiy5w.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp9b4s1gko.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmp9b4s1gko.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpz80thm8y.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpz80thm8y.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpm71nt44o.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpm71nt44o.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpsuzfwa7_.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpsuzfwa7_.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpohmfa0td.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpohmfa0td.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpq18osmxp.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpq18osmxp.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmplwm767xd.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmplwm767xd.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpez6f7bej.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpez6f7bej.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp_ex5hbe1.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmp_ex5hbe1.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpbj7p_kx9.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpbj7p_kx9.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpanjj8iir.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpanjj8iir.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpdo6gav12.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpdo6gav12.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpf4hzonf3.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpf4hzonf3.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpe9mmqqh6.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpe9mmqqh6.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (member x l2))\
    \ l1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ common))\n    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5\
    \ 9 653 121)) (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list\
    \ 3 2)) (list 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4))\
    \ (list 2 3 4))\n    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpetj5ecmd.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpetj5ecmd.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmptvchs6j0.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmptvchs6j0.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpibvexok8.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpibvexok8.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (member x l2))\
    \ l1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ common))\n    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5\
    \ 9 653 121)) (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list\
    \ 3 2)) (list 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4))\
    \ (list 2 3 4))\n    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp1e2n3klv.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmp1e2n3klv.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (let ([l1 (sort l1)\n         l2 (sort l2)])\n    (cond [(null? l1) l2]\n \
    \         [(null? l2) l1]\n          [else (if (equal? (first l1) (first l2))\n\
    \                  (common (rest l1) (rest l2))\n                  (cons (first\
    \ l1) (common (rest l1) l2)))])))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate common))\n    (check-equal? (candidate (list 1 4 3 34\
    \ 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n    (check-equal? (candidate\
    \ (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal? (candidate (list 4\
    \ 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate (list 4 3 2\
    \ 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpib895mnu.rkt:9:8: let: bad syntax (not an identifier and expression\
    \ for a binding)\n  at: (l1 (sort l1) l2 (sort l2))\n  in: (let ((l1 (sort l1)\
    \ l2 (sort l2))) (cond ((null? l1) l2) ((null? l2) l1) (else (if (equal? (first\
    \ l1) (first l2)) (common (rest l1) (rest l2)) (cons (first l1) (common (rest\
    \ l1) l2))))))\n  location...:\n   /tmp/tmpib895mnu.rkt:9:8\n  context...:\n \
    \  /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/private/qq-and-or.rkt:101:61:\
    \ loop\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/private/qq-and-or.rkt:50:20:\
    \ go\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpekjxhnen.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpekjxhnen.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)) \n        (lambda (x) (equal? (first l1) x))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpyp8jozcw.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpyp8jozcw.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (member x l2))\
    \ l1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ common))\n    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5\
    \ 9 653 121)) (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list\
    \ 3 2)) (list 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4))\
    \ (list 2 3 4))\n    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp2hg6ypgn.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmp2hg6ypgn.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpbke4q9ok.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpbke4q9ok.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (member x l2))\
    \ l1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ common))\n    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5\
    \ 9 653 121)) (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list\
    \ 3 2)) (list 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4))\
    \ (list 2 3 4))\n    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmprfztg4nu.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmprfztg4nu.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp0jtvgu8i.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmp0jtvgu8i.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp3t4mugn9.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmp3t4mugn9.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpeizozkci.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpeizozkci.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpnwzz5uk1.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpnwzz5uk1.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmps49s64nd.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmps49s64nd.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpxe7qjy18.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpxe7qjy18.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpg4cun8n0.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpg4cun8n0.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp_k13fe0k.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmp_k13fe0k.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpseop_6no.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpseop_6no.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpy_fi_fpo.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpy_fi_fpo.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmplrm7s95n.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmplrm7s95n.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpne4nxnix.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpne4nxnix.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpw7toii98.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpw7toii98.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp4cvdqdtr.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmp4cvdqdtr.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpuounai8i.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpuounai8i.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpi58p354e.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpi58p354e.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpo4mjvh_t.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpo4mjvh_t.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpp72y7kl9.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpp72y7kl9.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpw_f0feoj.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpw_f0feoj.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpju8rabhk.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpju8rabhk.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (member x l2))\
    \ l1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ common))\n    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5\
    \ 9 653 121)) (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list\
    \ 3 2)) (list 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4))\
    \ (list 2 3 4))\n    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpj2wxcoxs.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpj2wxcoxs.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates (fold-left (lambda (x y)\n                       \
    \                (if (equal? x y)\n                                          \
    \ x\n                                           #t\n                         \
    \                  (cons x y))\n                                       l1 l2))\n\
    \                 l1))\n</code>\n<|/ a dscore=2 |>\n<| a tags=racket,scheme |>\n\
    <code>\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ common))\n    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5\
    \ 9 653 121)) (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list\
    \ 3 2)) (list 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4))\
    \ (list 2 3 4))\n    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp0m5kdy3i.rkt:8:0: read-syntax: expected a `)` to close `(`\n  possible\
    \ cause: indentation suggests a missing `)` before line 16\n  context...:\n  \
    \ /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmptbw80jhp.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmptbw80jhp.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpv0o1jpak.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpv0o1jpak.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpfdiqfdec.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpfdiqfdec.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp8r925n_3.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmp8r925n_3.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpmracce56.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpmracce56.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpfpus3jp5.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpfpus3jp5.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp2n_5gku2.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmp2n_5gku2.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpag5drj5n.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpag5drj5n.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpkv0c29ar.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpkv0c29ar.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp7zpeshro.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmp7zpeshro.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (member x l2))\
    \ l1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ common))\n    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5\
    \ 9 653 121)) (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list\
    \ 3 2)) (list 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4))\
    \ (list 2 3 4))\n    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpbqg9jn3n.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpbqg9jn3n.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpr3ggv3xo.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpr3ggv3xo.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpwyajthym.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpwyajthym.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)) \n        (lambda (x) (equal? (first l1) x))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp4cpbgrrp.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmp4cpbgrrp.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp5bn9euxu.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmp5bn9euxu.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp6_6pnvcg.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmp6_6pnvcg.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpnclnkjgj.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpnclnkjgj.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (let loop ((l1 l1) (l2 l2) (acc '()))\n    (if (null? l1) acc\n        (if\
    \ (null? l2) acc\n            (loop (cdr l1) (cdr l2) (cons (car l1) acc)))))\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nThanks so much for this! I really appreciate\
    \ it!\n<|/ c |>\n<| a tags=racket,scheme |>\n<code>\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal? (candidate\
    \ (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n    (check-equal?\
    \ (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate (list\
    \ 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpduunlkdq.rkt:8:0: read-syntax: expected a `)` to close `(`\n  possible\
    \ cause: indentation suggests a missing `)` before line 13\n  context...:\n  \
    \ /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)) \n        (lambda (x) (< (length l1) (length l2)))))\n</code>\n\
    <|/ a tags=racket,scheme |>\n<| c |>\nThanks, I added a solution that uses `remove-duplicates`\
    \ and `remove-if-not`.\n<|/ c |>\n<| a tags=racket,scheme |>\nI came up with this\
    \ solution:\n<code>\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate common))\n    (check-equal? (candidate (list 1 4 3 34 653 2 5)\
    \ (list 5 7 1 5 9 653 121)) (list 1 5 653))\n    (check-equal? (candidate (list\
    \ 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal? (candidate (list 4 3 2 8)\
    \ (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate (list 4 3 2 8) (list\
    \ )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp84hpgrti.rkt:15:76: read-syntax: illegal use of `.`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates (fold-left (lambda (x y)\n                       \
    \                (if (equal? (first x) y)\n                                  \
    \         x\n                                           y))\n                \
    \                       (reverse l1)\n                                       (reverse\
    \ l2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ common))\n    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5\
    \ 9 653 121)) (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list\
    \ 3 2)) (list 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4))\
    \ (list 2 3 4))\n    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpl2b8f13v.rkt:9:28: fold-left: unbound identifier\n  in: fold-left\n\
    \  location...:\n   /tmp/tmpl2b8f13v.rkt:9:28\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp2mdag5i_.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmp2mdag5i_.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates (fold-left (lambda (x y)\n                       \
    \              (if (null? y)\n                                         (list x)\n\
    \                                         (if (equal? (car x) (car y))\n     \
    \                                        (cons (car x) (cdr x))\n            \
    \                                 (cons (car y) (cdr y))))))\n            (remove-duplicates\
    \ (fold-left (lambda (x y)\n                                           (if (null?\
    \ y)\n                                               (list x)\n              \
    \                                 (if (equal? (car x) (car y))\n             \
    \                                      (cons (car x) (cdr x))\n              \
    \                                     (cons (car y) (cdr y))))))\n           \
    \                   l1 l2)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate common))\n    (check-equal? (candidate (list 1 4 3 34\
    \ 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n    (check-equal? (candidate\
    \ (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal? (candidate (list 4\
    \ 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate (list 4 3 2\
    \ 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpulinc4pw.rkt:8:0: read-syntax: expected a `)` to close `(`\n  possible\
    \ cause: indentation suggests a missing `)` before line 23\n  context...:\n  \
    \ /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmphsti3l3u.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmphsti3l3u.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpek8vrws4.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpek8vrws4.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpceca2lig.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpceca2lig.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          #:key (lambda (x) (first l1)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp9x_zofls.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmp9x_zofls.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpt4wq64r0.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpt4wq64r0.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpcqnbble2.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpcqnbble2.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpammrr93l.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpammrr93l.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp4ioam6ru.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmp4ioam6ru.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmperahbae8.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmperahbae8.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpghouibsn.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpghouibsn.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp5ab1oy1s.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmp5ab1oy1s.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)) \n        (lambda (x) (equal? (first l1) x))))\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a dscore=0 |>\n<code>\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate common))\n    (check-equal? (candidate (list 1 4 3 34\
    \ 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n    (check-equal? (candidate\
    \ (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal? (candidate (list 4\
    \ 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate (list 4 3 2\
    \ 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmphc3416ic.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmphc3416ic.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp67v8v67g.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmp67v8v67g.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (let loop ((l1 l1) (l2 l2) (acc '()))\n    (cond\n      [(empty? l1) acc]\n\
    \      [(empty? l2) acc]\n      [(equal? (first l1) (first l2)) (loop (rest l1)\
    \ (rest l2) (cons (first l1) acc))]\n      [else (loop (rest l1) (rest l2) (cons\
    \ (first l1) acc))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate common))\n    (check-equal? (candidate (list 1 4 3 34 653\
    \ 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n    (check-equal? (candidate\
    \ (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal? (candidate (list 4\
    \ 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate (list 4 3 2\
    \ 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpza_0_jrl.rkt:21:4\n\
    actual:     '(5 2 653 34 3 4 1)\nexpected:   '(1 5 653)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpza_0_jrl.rkt:22:4\n\
    actual:     '(3 5)\nexpected:   '(2 3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp_i2uj4uo.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmp_i2uj4uo.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpfpy9c8yk.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpfpy9c8yk.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpsfamm3fc.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpsfamm3fc.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpnunn188r.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpnunn188r.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpwg3wtzr8.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpwg3wtzr8.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp9rjlw42e.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmp9rjlw42e.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates (fold-left (lambda (x y)\n                       \
    \              (if (equal? (first x) y)\n                                    \
    \     (cons (first x) (cons (first y) '()))\n                                \
    \         (cons (first x) '())))\n                                 (remove-duplicates\
    \ (fold-left (lambda (x y)\n                                                 \
    \           (if (equal? (first x) y)\n                                       \
    \                         (cons (first x) (cons (first y) '()))\n            \
    \                                                    '()))\n                 \
    \                                        (remove-duplicates (fold-left (lambda\
    \ (x y)\n                                                                (if (equal?\
    \ (first x) y)\n                                                             \
    \       (cons (first x) (cons (first y) '()))\n                              \
    \                                  '()))\n                                 (remove-duplicates\
    \ (fold-left (lambda (x y)\n                                                 \
    \           (if (equal? (first x) y)\n                                       \
    \                         (cons (first x) (cons (first y) '()))\n            \
    \                                                    '()))\n                 \
    \                                        (remove-duplicates (fold-left (lambda\
    \ (x y)\n                                                                (if (equal?\
    \ (first x) y)\n                                                             \
    \       (cons (first x) (cons (first y) '()))\n                              \
    \                                  '()))\n                                 (remove-duplicates\
    \ (fold-left (lambda (x y)\n                                                 \
    \           (if (equal? (first x) y)\n                                       \
    \                         (cons (first x) (cons (first y) '()))\n            \
    \                                                    '()))\n                 \
    \                                        (remove-duplicates (fold-left (lambda\
    \ (x y)\n                                                                (if (equal?\
    \ (first x) y)\n                                                             \
    \       (cons (first x) (cons (first y) '()))\n                              \
    \                                  '()))\n                                 (remove-duplicates\
    \ (fold-left (lambda (x y)\n                                                 \
    \           (if (equal? (first x) y)\n                                       \
    \                         (cons (first x) (cons (first y) '()))\n            \
    \                                                    '()))\n                 \
    \                                        (remove-duplicates (fold-left (lambda\
    \ (x y)\n                                                                (if (equal?\
    \ (first x) y)\n                                                             \
    \       (cons (first x) (cons (first y) '()))\n                              \
    \                                  '()))\n                                 (remove-duplicates\
    \ (fold-left (lambda (x y)\n                                                 \
    \           (if (equal? (first x) y)\n                                       \
    \                         (cons (first x) (cons (first y) '()))\n            \
    \                                                    '()))\n                 \
    \                                        (remove-duplicates (fold-left (lambda\
    \ (x y)\n                                                                (if (equal?\
    \ (first x) y)\n                                                             \
    \       (cons (first x) (cons (first y) '()))\n                              \
    \                                  '()))\n                                 (remove-duplicates\
    \ (fold-left (lambda (x y)\n                                                 \
    \           (if (equal? (first x) y)\n                                       \
    \                         (cons (first x) (\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate common))\n    (check-equal? (candidate (list 1 4 3 34\
    \ 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n    (check-equal? (candidate\
    \ (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal? (candidate (list 4\
    \ 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate (list 4 3 2\
    \ 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpkmbc8ny0.rkt:55:80: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 56\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpr77nym7o.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpr77nym7o.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpqxdb8g0o.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpqxdb8g0o.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmphbujujp4.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmphbujujp4.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates (fold-left (lambda (x y) (if (equal? x y) x y)) l1\
    \ l2))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ common))\n    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5\
    \ 9 653 121)) (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list\
    \ 3 2)) (list 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4))\
    \ (list 2 3 4))\n    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpmp65o94a.rkt:9:28: fold-left: unbound identifier\n  in: fold-left\n\
    \  location...:\n   /tmp/tmpmp65o94a.rkt:9:28\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)) \n        (lambda (x) (equal? (first l1) x))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmph0jyyl41.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmph0jyyl41.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp7v9r7vca.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmp7v9r7vca.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp27egarw3.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmp27egarw3.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpsnaca97_.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpsnaca97_.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpdoar1lf1.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpdoar1lf1.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpkybc5bgx.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpkybc5bgx.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (let loop ((l1 l1) (l2 l2) (result '()))\n    (cond ((null? l1) l2)\n     \
    \     ((null? l2) l1)\n          ((equal? (car l1) (car l2)) (loop (cdr l1) (cdr\
    \ l2) (cons (car l1) result)))\n          (else (loop (cdr l1) (cdr l2) result)))\n\
    \    (reverse result)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate common))\n    (check-equal? (candidate (list 1 4 3 34 653\
    \ 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n    (check-equal? (candidate\
    \ (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal? (candidate (list 4\
    \ 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate (list 4 3 2\
    \ 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpagybqabr.rkt:21:4\n\
    actual:     '()\nexpected:   '(1 5 653)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpagybqabr.rkt:22:4\nactual:\
    \     '()\nexpected:   '(2 3)\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpagybqabr.rkt:23:4\nactual:     '()\n\
    expected:   '(2 3 4)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp13mljr9o.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmp13mljr9o.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpm3_nz9bs.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpm3_nz9bs.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmplghv1zc1.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmplghv1zc1.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmped5z8ej9.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmped5z8ej9.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp3zp8yzws.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmp3zp8yzws.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmptnz2rvk_.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmptnz2rvk_.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpojc1_iq0.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpojc1_iq0.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp4j9gqnlq.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmp4j9gqnlq.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmphl4m44iv.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmphl4m44iv.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates (fold-left (lambda (x y)\n                       \
    \                (if (equal? (car x) (car y))\n                              \
    \             x\n                                           (cons (car x) y)))\n\
    \                                     (remove-duplicates l1)\n               \
    \                      (remove-duplicates l2))\n                     #f)))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpa9p05nvj.rkt:9:28: fold-left: unbound identifier\n  in: fold-left\n\
    \  location...:\n   /tmp/tmpa9p05nvj.rkt:9:28\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpkitt9tdg.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpkitt9tdg.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp3_xgtukc.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmp3_xgtukc.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)) \n        (lambda (x) (equal? (first l1) x))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpbevj8o1i.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpbevj8o1i.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (member x l2))\
    \ l1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ common))\n    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5\
    \ 9 653 121)) (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list\
    \ 3 2)) (list 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4))\
    \ (list 2 3 4))\n    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpmmp_6i_w.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpmmp_6i_w.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpxgf4ks9q.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpxgf4ks9q.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpgj2iufgj.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpgj2iufgj.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpw94746lj.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpw94746lj.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          #:key (lambda (x) (first l1)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp_o3toihh.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmp_o3toihh.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpz7z8ywmm.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpz7z8ywmm.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmppqg6p2pn.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmppqg6p2pn.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpnvohb21z.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpnvohb21z.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp6fbrr711.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmp6fbrr711.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp4l8bz5qe.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmp4l8bz5qe.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpbwaxs8_4.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpbwaxs8_4.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp4v6lgg53.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmp4v6lgg53.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)) \n        (lambda (x) (equal? (first l1) x))))\n</code>\n<|/ a\
    \ tags=racket,scheme |>\n<| a tags=racket,scheme |>\n<code>\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp8n2dpi4h.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmp8n2dpi4h.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp1ibj8xuk.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmp1ibj8xuk.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmph1ybkijh.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmph1ybkijh.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpay0xx_94.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpay0xx_94.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpvn65nlhq.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpvn65nlhq.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpi_06g806.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpi_06g806.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpc54hxeal.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpc54hxeal.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp7fkmucg2.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmp7fkmucg2.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          #:key (lambda (x) (first l1)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp1p87kfrp.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmp1p87kfrp.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates (fold-left (lambda (x y)\n                       \
    \              (if (equal? x y)\n                                         x\n\
    \                                         (cons x y))\n                      \
    \               (cons x '()))\n                                 (remove-duplicates\
    \ l1)\n                                 (remove-duplicates l2))\n            \
    \ <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ common))\n    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5\
    \ 9 653 121)) (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list\
    \ 3 2)) (list 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4))\
    \ (list 2 3 4))\n    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp2a41zdoz.rkt:8:0: read-syntax: expected a `)` to close `(`\n  possible\
    \ cause: indentation suggests a missing `)` before line 18\n  context...:\n  \
    \ /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp3cwo1a61.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmp3cwo1a61.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpn1rqugxh.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpn1rqugxh.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp2tmbfni2.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmp2tmbfni2.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpx_4z3rv0.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpx_4z3rv0.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp92av3vil.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmp92av3vil.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpjw2ezenv.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpjw2ezenv.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp5g9tn_2p.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmp5g9tn_2p.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpf0cho8t6.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpf0cho8t6.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (let loop ((l1 l1) (l2 l2) (acc '()))\n    (cond\n      [(empty? l1) (cons\
    \ l2 acc)]\n      [(empty? l2) (cons l1 acc)]\n      [(equal? (first l1) (first\
    \ l2)) (loop (rest l1) (rest l2) (cons (first l1) acc))]\n      [else (loop (rest\
    \ l1) (rest l2) (cons (first l1) acc))])))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate common))\n    (check-equal? (candidate (list 1 4 3 34\
    \ 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n    (check-equal? (candidate\
    \ (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal? (candidate (list 4\
    \ 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate (list 4 3 2\
    \ 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx8jdd9g1.rkt:21:4\n\
    actual:     '(() 5 2 653 34 3 4 1)\nexpected:   '(1 5 653)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx8jdd9g1.rkt:22:4\n\
    actual:     '((2 8) 3 5)\nexpected:   '(2 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx8jdd9g1.rkt:23:4\nactual:\
    \     '((8) 2 3 4)\nexpected:   '(2 3 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx8jdd9g1.rkt:24:4\nactual:\
    \     '((4 3 2 8))\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpir0supxy.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpir0supxy.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpdg66_v25.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpdg66_v25.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpjd1ov013.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpjd1ov013.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp29ft7ah8.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmp29ft7ah8.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp8dr0r1l7.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmp8dr0r1l7.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpy36x2wu1.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpy36x2wu1.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmposyjaxml.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmposyjaxml.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates \n          (remove-if-not (lambda (x) (equal? (first\
    \ l1) x)) l2)\n          (remove-if-not (lambda (x) (equal? (first l2) x)) l1))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpi01kmo4z.rkt:10:11: remove-if-not: unbound identifier\n  in: remove-if-not\n\
    \  location...:\n   /tmp/tmpi01kmo4z.rkt:10:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5,\
    \ 653]\n;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n\
    \  (sort (remove-duplicates (fold-left (lambda (x y)\n                       \
    \                (if (equal? x y)\n                                          \
    \ x\n                                           (cons x y)))\n               \
    \                    (remove-duplicates l1)\n                                \
    \   (remove-duplicates l2))\n                 <))\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThis doesn't work. Try it with `(common '(1 2 3) '(1 2 3 4))`.\n<|/ c\
    \ |>\n<| c |>\nYes, I noticed that and fixed it.  Thanks for pointing it out.\n\
    <|/ c |>\n<| a tags=racket,scheme |>\n<code>\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate common))\n    (check-equal? (candidate (list 1 4 3 34\
    \ 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n    (check-equal? (candidate\
    \ (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal? (candidate (list 4\
    \ 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate (list 4 3 2\
    \ 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpa47jkv5j.rkt:19:61: read-syntax: illegal use of `.`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
