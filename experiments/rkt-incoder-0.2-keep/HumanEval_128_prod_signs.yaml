name: HumanEval_128_prod_signs
language: racket
prompt: "#lang racket\n\n;; You are given an array arr of integers and you need to\
  \ return\n;; sum of magnitudes of integers multiplied by product of all signs\n\
  ;; of each number in the array, represented by 1, -1 or 0.\n;; Note: return None\
  \ for empty arr.\n;; Example:\n;; >>> prod_signs([1, 2, 2, -4]) == -9\n;; >>> prod_signs([0,\
  \ 1]) == 0\n;; >>> prod_signs([]) == None\n(define (prod_signs arr)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate prod_signs))\n\
  \    (check-equal? (candidate (list 1 2 2 -4)) -9)\n    (check-equal? (candidate\
  \ (list 0 1)) 0)\n    (check-equal? (candidate (list 1 1 1 2 3 -1 1)) -10)\n   \
  \ (check-equal? (candidate (list )) #f)\n    (check-equal? (candidate (list 2 4\
  \ 1 2 -1 -1 9)) 20)\n    (check-equal? (candidate (list -1 1 -1 1)) 4)\n    (check-equal?\
  \ (candidate (list -1 1 1 1)) -4)\n    (check-equal? (candidate (list -1 1 1 0))\
  \ 0)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? arr) None]\n    [(positive? (first arr)) (* 1\
    \ (prod_signs (rest arr)))]\n    [(negative? (first arr)) (* -1 (prod_signs (rest\
    \ arr)))]\n    [else (* 0 (prod_signs (rest arr)))]))\n", "  (cond\n    [(empty?\
    \ arr) None]\n    [(positive? (first arr)) (* 1 (prod_signs (rest arr)))]\n  \
    \  [(negative? (first arr)) (* -1 (prod_signs (rest arr)))]\n    [else (* 0 (prod_signs\
    \ (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n    [(= (length arr)\
    \ 1) (* arr (first arr))]\n    [else (+ (* (first arr) (first arr)) (prod_signs\
    \ (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n    [(= (length arr)\
    \ 1) (* arr (first arr))]\n    [else (+ (* (first arr) (first arr)) (prod_signs\
    \ (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n    [(= (first arr) 0)\
    \ 0]\n    [(= (first arr) 1) 1]\n    [else (* -1 (magnitude (first arr)) (prod_signs\
    \ (rest arr)))]))\n", "  (if (empty? arr)\n      None\n      (+ (magnitude (first\
    \ arr))\n         (* (prod_signs (rest arr))\n             (sign (first arr))))))\n",
  "  (cond\n    [(empty? arr) None]\n    [(positive? (first arr)) (* 1 (prod_signs\
    \ (rest arr)))]\n    [(negative? (first arr)) (* -1 (prod_signs (rest arr)))]\n\
    \    [else (* 0 (prod_signs (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n\
    \    [(= (first arr) 0) 0]\n    [else (+ (magnitude (first arr)) (prod_signs (rest\
    \ arr)))]))\n", "  (cond\n    [(empty? arr) None]\n    [(= (first arr) 0) 0]\n\
    \    [else (+ (* (first arr) 1) (prod_signs (rest arr)))]))\n", "  (cond\n   \
    \ [(empty? arr) None]\n    [(= (length arr) 1) (* arr arr)]\n    [else (+ (* arr\
    \ (* 1 (car arr)))\n            (prod_signs (cdr arr)))]))\n", "  (cond\n    [(empty?\
    \ arr) None]\n    [(positive? (first arr)) (* 1 (prod_signs (rest arr)))]\n  \
    \  [(negative? (first arr)) (* -1 (prod_signs (rest arr)))]\n    [else (* 0 (prod_signs\
    \ (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n    [(positive? (first\
    \ arr)) (* 1 (prod_signs (rest arr)))]\n    [(negative? (first arr)) (* -1 (prod_signs\
    \ (rest arr)))]\n    [else (* 0 (prod_signs (rest arr)))]))\n", "  (cond\n   \
    \ [(empty? arr) None]\n    [(= (first arr) 0) 0]\n    [(= (first arr) 1) 1]\n\
    \    [else (+ (* (first arr) -1) (prod_signs (rest arr)))]))\n", "  (cond\n  \
    \  [(empty? arr) None]\n    [(zero? (first arr)) (first arr)]\n    [else (+ (*\
    \ (first arr) (sign (first arr))) (prod_signs (rest arr)))]))\n", "  (cond\n \
    \   [(empty? arr) None]\n    [(zero? (car arr)) 0]\n    [(positive? (car arr))\
    \ (* 1 (prod_signs (cdr arr)))]\n    [(negative? (car arr)) (* -1 (prod_signs\
    \ (cdr arr)))]\n    [else (* 0 (prod_signs (cdr arr)))]))\n", "  (cond\n    [(empty?\
    \ arr) None]\n    [(positive? (first arr)) (* 1 (prod_signs (rest arr)))]\n  \
    \  [(negative? (first arr)) (* -1 (prod_signs (rest arr)))]\n    [else (* 0 (prod_signs\
    \ (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n    [(positive? (first\
    \ arr)) (* 1 (prod_signs (rest arr)))]\n    [(negative? (first arr)) (* -1 (prod_signs\
    \ (rest arr)))]\n    [else (* 0 (prod_signs (rest arr)))]))\n", "  (cond\n   \
    \ [(empty? arr) None]\n    [(= (first arr) 0) 0]\n    [else (+ (* (first arr)\
    \ 1) (prod_signs (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n    [(=\
    \ (first arr) 0) 0]\n    [(= (first arr) -1) 1]\n    [else (+ (magnitude (first\
    \ arr)) (prod_signs (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n  \
    \  [(= (length arr) 1) (* arr arr)]\n    [else (+ (* (first arr) 1) (prod_signs\
    \ (rest arr)))]))\n", "  (if (empty? arr)\n      None\n      (let ((sum (+ (abs\
    \ (first arr)) (abs (second arr)))))\n        (if (or (zero? sum) (negative? sum))\n\
    \            None\n            (let ((product (* sum -1)))\n              (if\
    \ (or (zero? product) (negative? product))\n                  None\n         \
    \         (cons product (prod_signs (rest arr))))))))))\n", "  (cond\n    [(empty?\
    \ arr) None]\n    [(zero? (car arr)) (* 1 (car arr))]\n    [else (+ (* (car arr)\
    \ -1) (prod_signs (cdr arr)))]))\n", "  (cond\n    [(empty? arr) None]\n    [(=\
    \ (first arr) 0) 0]\n    [else (+ (* (first arr) -1) (prod_signs (rest arr)))]))\n",
  "  (cond\n    [(empty? arr) None]\n    [(positive? (first arr)) (* 1 (prod_signs\
    \ (rest arr)))]\n    [(negative? (first arr)) (* -1 (prod_signs (rest arr)))]\n\
    \    [else (* 0 (prod_signs (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n\
    \    [(zero? (first arr)) (* 1 (first arr))]\n    [else (* -1 (prod_signs (rest\
    \ arr)))]))\n", "  (cond\n    [(empty? arr) None]\n    [(positive? (first arr))\
    \ (* 1 (prod_signs (rest arr)))]\n    [(negative? (first arr)) (* -1 (prod_signs\
    \ (rest arr)))]\n    [else (* 0 (prod_signs (rest arr)))]))\n", "  (cond\n   \
    \ [(empty? arr) None]\n    [(= (first arr) 0) 0]\n    [else (+ (magnitude (first\
    \ arr)) (prod_signs (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n  \
    \  [(= (first arr) 0) 0]\n    [else (+ (magnitude (first arr)) (prod_signs (rest\
    \ arr)))]))\n", "  (cond\n    [(empty? arr) None]\n    [else (+ (magnitude (first\
    \ arr))\n            (prod_signs (rest arr)))]))\n", "  (cond\n    [(empty? arr)\
    \ None]\n    [(= (first arr) 0) 0]\n    [else (+ (* (first arr) -1) (prod_signs\
    \ (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n    [(positive? (first\
    \ arr)) (* 1 (prod_signs (rest arr)))]\n    [(negative? (first arr)) (* -1 (prod_signs\
    \ (rest arr)))]\n    [else (* 0 (prod_signs (rest arr)))]))\n", "  (if (null?\
    \ arr)\n      None\n      (let ([sum (+ 0 (apply * (map (lambda (x) (* x x)) arr)))])\n\
    \        (if (= sum 0)\n            None\n            (cons sum (prod_signs (filter\
    \ (lambda (x) (not (= x 0)) arr)))))))\n", "  (cond [(empty? arr) None]\n    \
    \    [(positive? (first arr)) (* 1 (prod_signs (rest arr)))]\n        [(negative?\
    \ (first arr)) (* -1 (prod_signs (rest arr)))]\n        [else (* 0 (prod_signs\
    \ (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n    [(zero? (first arr))\
    \ (* 1 (first arr))]\n    [else (* -1 (prod_signs (rest arr)))]))\n", "  (cond\n\
    \    [(empty? arr) None]\n    [(zero? (first arr)) (first arr)]\n    [else (+\
    \ (* (first arr) (sign (first arr)))\n              (prod_signs (rest arr)))]))\n",
  "  (cond\n    [(empty? arr) None]\n    [(zero? (car arr)) 0]\n    [else (+ (* (car\
    \ arr) (car arr)) (prod_signs (cdr arr)))]))\n", "  (cond [(empty? arr) None]\n\
    \        [(positive? (first arr)) (* 1 (prod_signs (rest arr)))]\n        [(negative?\
    \ (first arr)) (* -1 (prod_signs (rest arr)))]\n        [else (* 0 (prod_signs\
    \ (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n    [else (+ (magnitude\
    \ (first arr)) (prod_signs (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n\
    \    [else (+ (magnitude (first arr)) (prod_signs (rest arr)))]))\n", "  (if (empty?\
    \ arr)\n      None\n      (let ([sum (+ 0 (abs (first arr)))])\n        (loop\
    \ for el in arr\n              for sign in (if (< el 0) -1 1)\n              for\
    \ sum = (+ sum (* sign (abs el)))\n              collect sum))))\n", "  (if (empty?\
    \ arr)\n      None\n      (+ (magnitude (first arr))\n         (* (prod_signs\
    \ (rest arr))\n            (magnitude (first arr)))))) \n", "  (cond [(empty?\
    \ arr) None]\n        [(number? (car arr)) (* 1 (prod_signs (cdr arr)))]\n   \
    \     [else (* -1 (prod_signs (cdr arr)))]))\n", "  (cond\n    [(empty? arr) None]\n\
    \    [(= (length arr) 1) (* arr (first arr))]\n    [else (+ (* (first arr) (first\
    \ arr)) (prod_signs (rest arr)))]))\n", "  (cond [(empty? arr) None]\n       \
    \ [(number? (car arr)) (* 1 (prod_signs (cdr arr)))]\n        [else (* -1 (prod_signs\
    \ (cdr arr)))]))\n", "  (cond\n    [(empty? arr) None]\n    [(positive? (first\
    \ arr)) (* 1 (prod_signs (rest arr)))]\n    [(negative? (first arr)) (* -1 (prod_signs\
    \ (rest arr)))]\n    [else (* 0 (prod_signs (rest arr)))]))\n", "  (cond\n   \
    \ [(empty? arr) None]\n    [(= (length arr) 1) (* arr (first arr))]\n    [else\
    \ (+ (magnitude (first arr)) (prod_signs (rest arr)))]))\n", "  (cond\n    [(empty?\
    \ arr) None]\n    [(= (length arr) 1) (* arr arr)]\n    [else (+ (* (first arr)\
    \ 1) (prod_signs (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n    [(positive?\
    \ (first arr)) (* 1 (prod_signs (rest arr)))]\n    [(negative? (first arr)) (*\
    \ -1 (prod_signs (rest arr)))]\n    [else (* 0 (prod_signs (rest arr)))]))\n",
  "  (cond\n    [(empty? arr) None]\n    [(zero? (first arr)) (* 0 (first arr))]\n\
    \    [else (+ (* (first arr) (first arr)) (prod_signs (rest arr)))]))\n", "  (cond\n\
    \    [(empty? arr) None]\n    [(zero? (first arr)) 0]\n    [else (+ (* (first\
    \ arr) (sign (first arr)))\n            (prod_signs (rest arr)))]))\n", "  (cond\
    \ [(empty? arr) None]\n        [(= 0 (abs (first arr))) (* 1 (prod_signs (rest\
    \ arr)))]\n        [else (* -1 (prod_signs (rest arr)))]))\n", "  (cond [(empty?\
    \ arr) None]\n        [(positive? (first arr)) (+ (magnitude (first arr)) (prod_signs\
    \ (rest arr)))]\n        [(negative? (first arr)) (+ (magnitude (first arr)) (prod_signs\
    \ (rest arr)))]\n        [else (+ (magnitude (first arr)) (prod_signs (rest arr)))]))\n",
  "  (cond\n    [(empty? arr) None]\n    [else (+ (magnitude (first arr)) (prod_signs\
    \ (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n    [(positive? (first\
    \ arr)) (* 1 (prod_signs (rest arr)))]\n    [(negative? (first arr)) (* -1 (prod_signs\
    \ (rest arr)))]\n    [else (* 0 (prod_signs (rest arr)))]))\n", "  (cond\n   \
    \ [(empty? arr) None]\n    [(positive? (first arr)) (* 1 (prod_signs (rest arr)))]\n\
    \    [(negative? (first arr)) (* -1 (prod_signs (rest arr)))]\n    [else (* 0\
    \ (prod_signs (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n    [(positive?\
    \ (first arr)) (* 1 (prod_signs (rest arr)))]\n    [(negative? (first arr)) (*\
    \ -1 (prod_signs (rest arr)))]\n    [else (* 0 (prod_signs (rest arr)))]))\n",
  "  (cond\n    [(empty? arr) None]\n    [else (+ (magnitude (first arr)) (prod_signs\
    \ (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n    [(zero? (car arr))\
    \ (* 1 (prod_signs (cdr arr)))]\n    [else (* -1 (prod_signs (cdr arr)))]))\n",
  "  (if (empty? arr)\n      None\n      (let ([sum (+ (abs (first arr)) (abs (second\
    \ arr)))])\n        (if (= (abs (first arr)) (abs (second arr)))\n           \
    \ (* sum 1)\n            (* sum -1))))))\n", "  (cond\n    [(empty? arr) None]\n\
    \    [(zero? (first arr)) (* 0 (first arr))]\n    [else (+ (* (first arr) (first\
    \ arr)) (prod_signs (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n  \
    \  [(= (first arr) 0) 0]\n    [else (+ (magnitude (first arr)) (prod_signs (rest\
    \ arr)))]))\n", "  (cond [(empty? arr) None]\n        [(number? (first arr)) (*\
    \ 1 (prod_signs (rest arr)))]\n        [else (+ (* -1 (prod_signs (rest arr)))\
    \ (* 1 (first arr)))]))\n", "  (if (empty? arr)\n      None\n      (let ((sum\
    \ (+ (abs (first arr)) (abs (second arr)))\n             (product (* 1 (first\
    \ arr))\n                      (* -1 (second arr))))\n            (signs (map\
    \ (lambda (x) (if (< x 0) 1 -1)) arr)))\n        (if (= sum 0)\n            None\n\
    \            (cons sum (cons product signs))))))\n", "  (cond [(empty? arr) None]\n\
    \        [(positive? (first arr)) (* 1 (prod_signs (rest arr)))]\n        [(negative?\
    \ (first arr)) (* -1 (prod_signs (rest arr)))]\n        [else (* 0 (prod_signs\
    \ (rest arr)))]))\n", "  (if (null? arr)\n      None\n      (let ([sum (+ (abs\
    \ (first arr)) (abs (second arr)))])\n        (if (= (abs (first arr)) (abs (second\
    \ arr)))\n            (* sum 1)\n            (* sum -1))))))\n", "  (cond\n  \
    \  [(empty? arr) None]\n    [(zero? (first arr)) (first arr)]\n    [else (+ (*\
    \ (first arr) (sign (first arr)))\n              (prod_signs (rest arr)))]))\n",
  "  (cond [(empty? arr) None]\n        [(number? (car arr)) (* 1 (prod_signs (cdr\
    \ arr)))]\n        [else (* -1 (prod_signs (cdr arr)))]))\n", "  (cond\n    [(empty?\
    \ arr) None]\n    [(= (first arr) 0) 0]\n    [else (+ (* (first arr) -1) (prod_signs\
    \ (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n    [(positive? (first\
    \ arr)) (* 1 (prod_signs (rest arr)))]\n    [(negative? (first arr)) (* -1 (prod_signs\
    \ (rest arr)))]\n    [else (* 0 (prod_signs (rest arr)))]))\n", "  (cond\n   \
    \ [(empty? arr) None]\n    [(zero? (first arr)) (first arr)]\n    [else (+ (*\
    \ (first arr) (sign (first arr))) (prod_signs (rest arr)))]))\n", "  (cond\n \
    \   [(empty? arr) None]\n    [(positive? (first arr)) (* 1 (prod_signs (rest arr)))]\n\
    \    [(negative? (first arr)) (* -1 (prod_signs (rest arr)))]\n    [else (* 0\
    \ (prod_signs (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n    [(zero?\
    \ (first arr)) (* 1 (first arr))]\n    [else (* -1 (prod_signs (rest arr)))]))\n",
  "  (cond\n    [(empty? arr) None]\n    [(= (first arr) 0) 0]\n    [else (+ (magnitude\
    \ (first arr)) (prod_signs (rest arr)))]))\n", "  (cond [(empty? arr) None]\n\
    \        [(positive? (first arr)) (* 1 (prod_signs (rest arr)))]\n        [(negative?\
    \ (first arr)) (* -1 (prod_signs (rest arr)))]\n        [else (* 0 (prod_signs\
    \ (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n    [(positive? (first\
    \ arr)) (* 1 (prod_signs (rest arr)))]\n    [(negative? (first arr)) (* -1 (prod_signs\
    \ (rest arr)))]\n    [else (* 0 (prod_signs (rest arr)))]))\n", "  (cond [(empty?\
    \ arr) None]\n        [(positive? (first arr)) (* 1 (prod_signs (rest arr)))]\n\
    \        [(negative? (first arr)) (* -1 (prod_signs (rest arr)))]\n        [else\
    \ (* 0 (prod_signs (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n   \
    \ [else (+ (magnitude (first arr)) (prod_signs (rest arr)))]))\n", "  (if (empty?\
    \ arr)\n      None\n      (let ([sum (+ (abs (first arr)) (abs (second arr)))])\n\
    \        (if (zero? sum)\n            None\n            (let ([sign (if (< sum\
    \ 0) -1 1)])\n              (cons sign (prod_signs (rest arr))))))))\n", "  (cond\n\
    \    [(empty? arr) None]\n    [(positive? (first arr)) (* 1 (prod_signs (rest\
    \ arr)))]\n    [(negative? (first arr)) (* -1 (prod_signs (rest arr)))]\n    [else\
    \ (* 0 (prod_signs (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n   \
    \ [(positive? (first arr)) (* 1 (prod_signs (rest arr)))]\n    [(negative? (first\
    \ arr)) (* -1 (prod_signs (rest arr)))]\n    [else (* 0 (prod_signs (rest arr)))]))\n",
  "  (if (empty? arr)\n      None\n      (let ([sum (+ (abs (first arr)) (abs (second\
    \ arr)))])\n        (if (empty? arr)\n            sum\n            (if (> (abs\
    \ (first arr)) (abs (second arr)))\n                (* sum (prod_signs (rest arr)))\n\
    \                (* sum (prod_signs (rest arr))))))))\n", "  (cond\n    [(empty?\
    \ arr) None]\n    [(= (length arr) 1) (* arr (first arr))]\n    [else (* arr (prod_signs\
    \ (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n    [(zero? (first arr))\
    \ (first arr)]\n    [else (+ (* (first arr) (sign (first arr)))\n            (prod_signs\
    \ (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n    [(= (first arr) 0)\
    \ 0]\n    [else (+ (magnitude (first arr)) (prod_signs (rest arr)))]))\n", " \
    \ (cond\n    [(empty? arr) None]\n    [(positive? (first arr)) (* 1 (prod_signs\
    \ (rest arr)))]\n    [(negative? (first arr)) (* -1 (prod_signs (rest arr)))]\n\
    \    [else (* 0 (prod_signs (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n\
    \    [(zero? (first arr)) (first arr)]\n    [else (+ (* (first arr) (sign (first\
    \ arr)))\n               (prod_signs (rest arr)))]))\n", "  (cond\n    [(empty?\
    \ arr) None]\n    [(positive? (first arr)) (* 1 (prod_signs (rest arr)))]\n  \
    \  [(negative? (first arr)) (* -1 (prod_signs (rest arr)))]\n    [else (* 0 (prod_signs\
    \ (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n    [(zero? (first arr))\
    \ (* 0 (first arr))]\n    [else (+ (* (first arr) (first arr)) (prod_signs (rest\
    \ arr)))]))\n", "  (cond [(empty? arr) None]\n        [(positive? (first arr))\
    \ (* 1 (prod_signs (rest arr)))]\n        [(negative? (first arr)) (* -1 (prod_signs\
    \ (rest arr)))]\n        [else (* 0 (prod_signs (rest arr)))]))\n", "  (cond\n\
    \    [(empty? arr) None]\n    [(zero? (first arr)) (* 0 (first arr))]\n    [else\
    \ (+ (* (first arr) (first arr))\n             (prod_signs (rest arr)))]))\n",
  "  (if (empty? arr)\n      None\n      (let ([sum (+ (abs (first arr)) (abs (second\
    \ arr)))])\n        (if (or (= 0 (first arr)) (= 0 (second arr)))\n          \
    \  sum\n            (if (= 1 (first arr))\n                (* sum (abs (second\
    \ arr)))\n                (* sum (abs (first arr)))))\n        (if (= 1 (first\
    \ arr))\n            (* sum (abs (second arr)))\n            (* sum (abs (first\
    \ arr)))))))\n", "  (cond [(empty? arr) None]\n        [(= 0 (abs (first arr)))\
    \ (* 1 (prod_signs (rest arr)))]\n        [else (* -1 (prod_signs (rest arr)))]))\n",
  "  (cond [(empty? arr) None]\n        [(number? (first arr)) (* 1 (prod_signs (rest\
    \ arr)))]\n        [else (* -1 (prod_signs (rest arr)))]))\n", "  (cond\n    [(empty?\
    \ arr) None]\n    [(= (first arr) 0) 0]\n    [else (+ (magnitude (first arr))\
    \ (prod_signs (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n    [(= (length\
    \ arr) 1) (* arr (first arr))]\n    [else (+ (* (first arr) (first arr)) (prod_signs\
    \ (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n    [(= (first arr) 0)\
    \ 0]\n    [else (+ (* (first arr) -1) (prod_signs (rest arr)))]))\n", "  (cond\n\
    \    [(empty? arr) None]\n    [(zero? (first arr)) (* 1 (first arr))]\n    [else\
    \ (+ (* 1 (first arr)) (prod_signs (rest arr)))]))\n", "  (cond [(empty? arr)\
    \ None]\n        [(positive? (first arr)) (* 1 (prod_signs (rest arr)))]\n   \
    \     [(negative? (first arr)) (* -1 (prod_signs (rest arr)))]\n        [else\
    \ (* 0 (prod_signs (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n   \
    \ [(= (length arr) 1) (* arr arr)]\n    [else (+ (* (first arr) (first arr))\n\
    \               (prod_signs (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n\
    \    [(= (length arr) 1) (* arr (first arr))]\n    [else (+ (* (first arr) (first\
    \ arr)) (prod_signs (rest arr)))]))\n", "  (cond [(empty? arr) None]\n       \
    \ [(zero? (first arr)) (first arr)]\n        [else (+ (* (first arr) (sign (first\
    \ arr)))\n                   (prod_signs (rest arr)))]))\n", "  (cond\n    [(empty?\
    \ arr) None]\n    [(zero? (first arr)) 0]\n    [else (+ (* (first arr) (sign (first\
    \ arr)))\n            (prod_signs (rest arr)))]))\n", "  (cond\n    [(empty? arr)\
    \ None]\n    [else (+ (magnitude (first arr)) (prod_signs (rest arr)))]))\n",
  "  (cond [(empty? arr) None]\n        [(positive? (first arr)) (* 1 (prod_signs\
    \ (rest arr)))]\n        [(negative? (first arr)) (* -1 (prod_signs (rest arr)))]\n\
    \        [else (* 0 (prod_signs (rest arr)))]))\n", "  (cond\n    [(empty? arr)\
    \ None]\n    [(positive? (first arr)) (* 1 (prod_signs (rest arr)))]\n    [(negative?\
    \ (first arr)) (* -1 (prod_signs (rest arr)))]\n    [else (* 0 (prod_signs (rest\
    \ arr)))]))\n", "  (cond\n    [(empty? arr) None]\n    [(zero? (first arr)) (first\
    \ arr)]\n    [else (+ (magnitude (first arr)) (prod_signs (rest arr)))]))\n",
  "  (cond\n    [(empty? arr) None]\n    [(positive? (first arr)) (* 1 (prod_signs\
    \ (rest arr)))]\n    [(negative? (first arr)) (* -1 (prod_signs (rest arr)))]\n\
    \    [else (* 0 (prod_signs (rest arr)))]))\n", "  (cond [(empty? arr) None]\n\
    \        [(positive? (first arr)) (* 1 (prod_signs (rest arr)))]\n        [(negative?\
    \ (first arr)) (* -1 (prod_signs (rest arr)))]\n        [else (* 0 (prod_signs\
    \ (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n    [(positive? (first\
    \ arr)) (* 1 (prod_signs (rest arr)))]\n    [(negative? (first arr)) (* -1 (prod_signs\
    \ (rest arr)))]\n    [else (* 0 (prod_signs (rest arr)))]))\n", "  (cond\n   \
    \ [(empty? arr) None]\n    [(positive? (first arr)) (* 1 (prod_signs (rest arr)))]\n\
    \    [(negative? (first arr)) (* -1 (prod_signs (rest arr)))]\n    [else (* 0\
    \ (prod_signs (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n    [(positive?\
    \ (first arr)) (* 1 (prod_signs (rest arr)))]\n    [(negative? (first arr)) (*\
    \ -1 (prod_signs (rest arr)))]\n    [else (* 0 (prod_signs (rest arr)))]))\n",
  "  (if (empty? arr)\n      None\n      (let ([sum (+ (magnitude (first arr)) (magnitude\
    \ (last arr)))])\n        (if (and (positive? (first arr)) (positive? (last arr)))\n\
    \            (* sum 1)\n            (* sum (- 1))\n            (* sum 0)))))\n",
  "  (cond\n    [(empty? arr) None]\n    [(= (length arr) 1) (* arr arr)]\n    [else\
    \ (+ (* (expt (first arr) (- (length arr) 1)) (- (length arr) 2))\n          \
    \    (prod_signs (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n    [(=\
    \ (length arr) 1) (* arr (first arr))]\n    [else (* -1 (prod_signs (rest arr)))]))\n",
  "  (cond\n    [(empty? arr) None]\n    [(= (first arr) 0) 0]\n    [(= (first arr)\
    \ 1) 1]\n    [else (* -1 (magnitude (first arr))\n              (prod_signs (rest\
    \ arr)))]))\n", "  (cond\n    [(empty? arr) None]\n    [else (+ (magnitude (first\
    \ arr)) (prod_signs (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n  \
    \  [(positive? (first arr)) (* 1 (prod_signs (rest arr)))]\n    [(negative? (first\
    \ arr)) (* -1 (prod_signs (rest arr)))]\n    [else (* 0 (prod_signs (rest arr)))]))\n",
  "  (cond\n    [(empty? arr) None]\n    [(= (first arr) 0) 0]\n    [else (+ (magnitude\
    \ (first arr)) (prod_signs (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n\
    \    [(zero? (first arr)) (* 1 (first arr))]\n    [else (+ (* (first arr) (first\
    \ arr)) (prod_signs (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n  \
    \  [(positive? (first arr)) (* 1 (prod_signs (rest arr)))]\n    [(negative? (first\
    \ arr)) (* -1 (prod_signs (rest arr)))]\n    [else (* 0 (prod_signs (rest arr)))]))\n",
  "  (cond\n    [(empty? arr) None]\n    [(= (first arr) 0) 0]\n    [else (+ (* (first\
    \ arr) 1) (prod_signs (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n\
    \    [(positive? (first arr)) (* 1 (prod_signs (rest arr)))]\n    [(negative?\
    \ (first arr)) (* -1 (prod_signs (rest arr)))]\n    [else (* 0 (prod_signs (rest\
    \ arr)))]))\n", "  (cond\n    [(empty? arr) None]\n    [(zero? (first arr)) (first\
    \ arr)]\n    [else (+ (* (first arr) (sign (first arr)))\n             (prod_signs\
    \ (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n    [(= (length arr)\
    \ 1) (* arr (first arr))]\n    [else (+ (* (first arr) (first arr)) (prod_signs\
    \ (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n    [(= (first arr) 0)\
    \ 0]\n    [else (+ (* (first arr) -1) (prod_signs (rest arr)))]))\n", "  (cond\n\
    \    [(empty? arr) None]\n    [(positive? (first arr)) (* 1 (prod_signs (rest\
    \ arr)))]\n    [(negative? (first arr)) (* -1 (prod_signs (rest arr)))]\n    [else\
    \ (* 0 (prod_signs (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n   \
    \ [(zero? (first arr)) (* 1 (first arr))]\n    [else (* -1 (prod_signs (rest arr)))]))\n",
  "  (cond\n    [(empty? arr) None]\n    [(= (first arr) 0) 0]\n    [(= (first arr)\
    \ 1) 1]\n    [else (+ (* (first arr) -1) (prod_signs (rest arr)))]))\n", "  (cond\n\
    \    [(empty? arr) None]\n    [(zero? (first arr)) (* 1 (first arr))]\n    [else\
    \ (* -1 (prod_signs (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n  \
    \  [(zero? (first arr)) (* 0 (first arr))]\n    [else (+ (* -1 (first arr) (first\
    \ arr))\n            (prod_signs (rest arr)))]))\n", "  (cond\n    [(empty? arr)\
    \ None]\n    [(zero? (first arr)) (* 0 (first arr))]\n    [else (+ (* (first arr)\
    \ (first arr))\n             (prod_signs (rest arr)))]))\n", "  (cond\n    [(empty?\
    \ arr) None]\n    [else (+ (magnitude (first arr)) (prod_signs (rest arr)))]))\n",
  "  (cond [(empty? arr) None]\n        [(positive? (first arr)) (* 1 (prod_signs\
    \ (rest arr)))]\n        [(negative? (first arr)) (* -1 (prod_signs (rest arr)))]\n\
    \        [else (* 0 (prod_signs (rest arr)))]))\n", "  (cond\n    [(empty? arr)\
    \ None]\n    [(zero? (first arr)) (* 0 (first arr))]\n    [else (+ (* (first arr)\
    \ (first arr))\n               (prod_signs (rest arr)))]))\n", "  (cond [(empty?\
    \ arr) None]\n        [(zero? (first arr)) 0]\n        [else (+ (magnitude (first\
    \ arr))\n                (prod_signs (rest arr)))]))\n", "  (cond\n    [(empty?\
    \ arr) None]\n    [else (+ (magnitude (first arr))\n            (prod_signs (rest\
    \ arr)))]))\n", "  (cond\n    [(empty? arr) None]\n    [else (+ (magnitude (first\
    \ arr))\n            (prod_signs (rest arr)))]))\n", "  (cond\n    [(empty? arr)\
    \ None]\n    [(zero? (first arr)) (* 0 (first arr))]\n    [else (+ (* (first arr)\
    \ (first arr))\n               (prod_signs (rest arr)))]))\n", "  (cond\n    [(empty?\
    \ arr) None]\n    [(positive? (first arr)) (* 1 (prod_signs (rest arr)))]\n  \
    \  [(negative? (first arr)) (* -1 (prod_signs (rest arr)))]\n    [else (* 0 (prod_signs\
    \ (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n    [(positive? (first\
    \ arr)) (* 1 (prod_signs (rest arr)))]\n    [(negative? (first arr)) (* -1 (prod_signs\
    \ (rest arr)))]\n    [else (* 0 (prod_signs (rest arr)))]))\n", "  (cond\n   \
    \ [(empty? arr) None]\n    [(zero? (first arr)) (* 0 (first arr))]\n    [else\
    \ (* 1 (prod_signs (rest arr)))]))\n", "  (cond [(empty? arr) None]\n        [(positive?\
    \ (first arr)) (* 1 (prod_signs (rest arr)))]\n        [(negative? (first arr))\
    \ (* -1 (prod_signs (rest arr)))]\n        [else (* 0 (prod_signs (rest arr)))]))\n",
  "  (cond [(empty? arr) None]\n        [(positive? (first arr)) (* 1 (prod_signs\
    \ (rest arr)))]\n        [(negative? (first arr)) (* -1 (prod_signs (rest arr)))]\n\
    \        [else (* 0 (prod_signs (rest arr)))]))\n", "  (cond\n    [(empty? arr)\
    \ None]\n    [(= (length arr) 1) (* arr arr)]\n    [else (* -1 (prod_signs (rest\
    \ arr)))]))\n", "  (cond\n    [(empty? arr) None]\n    [(= (first arr) 0) 0]\n\
    \    [(= (first arr) 1) 1]\n    [else (+ (* (first arr) -1) (prod_signs (rest\
    \ arr)))]))\n", "  (cond\n    [(empty? arr) None]\n    [(positive? (first arr))\
    \ (* 1 (prod_signs (rest arr)))]\n    [(negative? (first arr)) (* -1 (prod_signs\
    \ (rest arr)))]\n    [else (* 0 (prod_signs (rest arr)))]))\n", "  (cond\n   \
    \ [(empty? arr) None]\n    [(zero? (first arr)) (first arr)]\n    [else (+ (*\
    \ (first arr) -1) (prod_signs (rest arr)))]))\n", "  (if (empty? arr)\n      None\n\
    \      (let ([sum (+ (abs (first arr)) (abs (second arr)))])\n        (if (or\
    \ (< 0 sum) (> 0 sum))\n            sum\n            (prod_signs (rest arr))))))\
    \ ; #lang racket\n", "  (if (empty? arr)\n      None\n      (let ([sum (+ (abs\
    \ (first arr)) (abs (second arr)))])\n        (if (zero? sum)\n            None\n\
    \            (let ([sign (if (< sum 0) -1 1)])\n              (if (zero? sign)\n\
    \                  (* sum sign)\n                  (* sum (* sign sign)))))))\n",
  "  (cond\n    [(empty? arr) None]\n    [(= (length arr) 1) (* arr (first arr))]\n\
    \    [else (+ (* (first arr) (first arr)) (prod_signs (rest arr)))]))\n", "  (cond\n\
    \    [(empty? arr) None]\n    [(zero? (first arr)) (first arr)]\n    [else (+\
    \ (* (first arr) (sign (first arr)))\n            (prod_signs (rest arr)))]))\n",
  "  (cond\n    [(empty? arr) None]\n    [(zero? (car arr)) (* 1 (car arr))]\n   \
    \ [else (* -1 (prod_signs (cdr arr)))]))\n", "  (cond\n    [(empty? arr) None]\n\
    \    [(positive? (first arr)) (* 1 (prod_signs (rest arr)))]\n    [(negative?\
    \ (first arr)) (* -1 (prod_signs (rest arr)))]\n    [else (* 0 (prod_signs (rest\
    \ arr)))]))\n", "  (cond\n    [(empty? arr) None]\n    [(positive? (first arr))\
    \ (* 1 (prod_signs (rest arr)))]\n    [(negative? (first arr)) (* -1 (prod_signs\
    \ (rest arr)))]\n    [else (* 0 (prod_signs (rest arr)))]))\n", "  (cond\n   \
    \ [(empty? arr) None]\n    [(= (length arr) 1) (* arr (first arr))]\n    [else\
    \ (+ (* (first arr) (first arr)) (prod_signs (rest arr)))]))\n", "  (cond\n  \
    \  [(empty? arr) None]\n    [(= (first arr) 0) 0]\n    [else (+ (magnitude (first\
    \ arr)) (prod_signs (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n  \
    \  [(positive? (first arr)) (* 1 (prod_signs (rest arr)))]\n    [(negative? (first\
    \ arr)) (* -1 (prod_signs (rest arr)))]\n    [else (* 0 (prod_signs (rest arr)))]))\n",
  "  (cond\n    [(empty? arr) None]\n    [(zero? (first arr)) (* 0 (first arr))]\n\
    \    [else (+ (* (first arr) (first arr))\n             (prod_signs (rest arr)))]))\n",
  "  (cond\n    [(empty? arr) None]\n    [(= (first arr) 0) 0]\n    [else (+ (magnitude\
    \ (first arr)) (prod_signs (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n\
    \    [(zero? (car arr)) 0]\n    [else (+ (* (car arr) (car arr)) (prod_signs (cdr\
    \ arr)))]))\n", "  (cond [(empty? arr) None]\n        [(positive? (first arr))\
    \ (* 1 (prod_signs (rest arr)))]\n        [(negative? (first arr)) (* -1 (prod_signs\
    \ (rest arr)))]\n        [else (* 0 (prod_signs (rest arr)))]))\n", "  (cond\n\
    \    [(empty? arr) None]\n    [(positive? (first arr)) (* 1 (prod_signs (rest\
    \ arr)))]\n    [(negative? (first arr)) (* -1 (prod_signs (rest arr)))]\n    [else\
    \ (* 0 (prod_signs (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n   \
    \ [(= (length arr) 1) (* arr arr)]\n    [else (+ (* (first arr) 1) (prod_signs\
    \ (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n    [(= (first arr) 0)\
    \ 0]\n    [(= (first arr) -1) 1]\n    [else (* -1 (magnitude (first arr)))]))\n",
  "  (cond\n    [(empty? arr) None]\n    [(= (length arr) 1) (* arr (first arr))]\n\
    \    [else (+ (* (first arr) (first arr)) (prod_signs (rest arr)))]))\n", "  (cond\n\
    \    [(empty? arr) None]\n    [(zero? (first arr)) (first arr)]\n    [else (+\
    \ (* (first arr) (sign (first arr)))\n            (prod_signs (rest arr)))]))\n",
  "  (cond\n    [(empty? arr) None]\n    [(positive? (first arr)) (* 1 (prod_signs\
    \ (rest arr)))]\n    [(negative? (first arr)) (* -1 (prod_signs (rest arr)))]\n\
    \    [else (* 0 (prod_signs (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n\
    \    [(= (first arr) 0) 0]\n    [else (+ (* (first arr) -1) (prod_signs (rest\
    \ arr)))]))\n", "  (cond\n    [(empty? arr) None]\n    [(positive? (first arr))\
    \ (* 1 (prod_signs (rest arr)))]\n    [(negative? (first arr)) (* -1 (prod_signs\
    \ (rest arr)))]\n    [else (* 0 (prod_signs (rest arr)))]))\n", "  (cond\n   \
    \ [(empty? arr) None]\n    [(= (first arr) 0) 0]\n    [else (+ (magnitude (first\
    \ arr)) (prod_signs (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n  \
    \  [(positive? (first arr)) (* 1 (prod_signs (rest arr)))]\n    [(negative? (first\
    \ arr)) (* -1 (prod_signs (rest arr)))]\n    [else (* 0 (prod_signs (rest arr)))]))\n",
  "  (cond\n    [(empty? arr) None]\n    [(positive? (first arr)) (* 1 (prod_signs\
    \ (rest arr)))]\n    [(negative? (first arr)) (* -1 (prod_signs (rest arr)))]\n\
    \    [else (* 0 (prod_signs (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n\
    \    [else (+ (magnitude (first arr))\n            (prod_signs (rest arr)))]))\n",
  "  (cond\n    [(empty? arr) None]\n    [(= (first arr) 0) 0]\n    [(= (first arr)\
    \ -1) 1]\n    [else (* -1 (magnitude (first arr)))]\n    [else (+ (magnitude (first\
    \ arr)) (prod_signs (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n  \
    \  [(zero? (first arr)) (* 0 (first arr))]\n    [else (+ (* (first arr) (first\
    \ arr)) (prod_signs (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n  \
    \  [else (+ (magnitude (first arr)) (prod_signs (rest arr)))]))\n", "  (cond\n\
    \    [(empty? arr) None]\n    [(zero? (first arr)) (first arr)]\n    [else (+\
    \ (* (first arr) (sign (first arr))) (prod_signs (rest arr)))]))\n", "  (cond\n\
    \    [(empty? arr) None]\n    [(zero? (first arr)) (first arr)]\n    [else (+\
    \ (* (first arr) (sign (first arr)))\n               (prod_signs (rest arr)))]))\n",
  "  (cond [(empty? arr) None]\n        [(positive? (first arr)) (* 1 (prod_signs\
    \ (rest arr)))]\n        [(negative? (first arr)) (* -1 (prod_signs (rest arr)))]\n\
    \        [else (* 0 (prod_signs (rest arr)))]))\n", "  (cond\n    [(empty? arr)\
    \ None]\n    [(= (length arr) 1) (* arr (first arr))]\n    [else (* -1 (prod_signs\
    \ (rest arr)))]))\n", "  (cond [(empty? arr) None]\n        [(zero? (first arr))\
    \ (* 0 (first arr))]\n        [else (* 1 (prod_signs (rest arr)))]))\n", "  (cond\n\
    \    [(empty? arr) None]\n    [(positive? (first arr)) (* 1 (prod_signs (rest\
    \ arr)))]\n    [(negative? (first arr)) (* -1 (prod_signs (rest arr)))]\n    [else\
    \ (* 0 (prod_signs (rest arr)))]))\n", "  (cond [(empty? arr) None]\n        [(zero?\
    \ (first arr)) (first arr)]\n        [else (+ (* (first arr) (sign (first arr)))\n\
    \                (prod_signs (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n\
    \    [(= (first arr) 0) 0]\n    [(= (first arr) 1) 1]\n    [else (* -1 (magnitude\
    \ (first arr)))]\n    [else (+ (magnitude (first arr)) (prod_signs (rest arr)))]\n\
    \    [else (* -1 (magnitude (first arr)))]\n    [else (+ (magnitude (first arr))\
    \ (prod_signs (rest arr)))]\n    [else (* -1 (magnitude (first arr)))]\n    [else\
    \ (+ (magnitude (first arr)) (prod_signs (rest arr)))]\n    [else (* -1 (magnitude\
    \ (first arr)))]\n    [else (+ (magnitude (first arr)) (prod_signs (rest arr)))]\n\
    \    [else (* -1 (magnitude (first arr)))]\n    [else (+ (magnitude (first arr))\
    \ (prod_signs (rest arr)))]\n    [else (* -1 (magnitude (first arr)))]\n    [else\
    \ (+ (magnitude (first arr)) (prod_signs (rest arr)))]\n    [else (* -1 (magnitude\
    \ (first arr)))]\n    [else (+ (magnitude (first arr)) (prod_signs (rest arr)))]\n\
    \    [else (* -1 (magnitude (first arr)))]\n    [else (+ (magnitude (first arr))\
    \ (prod_signs (rest arr)))]\n    [else (* -1 (magnitude (first arr)))]\n    [else\
    \ (+ (magnitude (first arr)) (prod_signs (rest arr)))]\n    [else (* -1 (magnitude\
    \ (first arr)))]\n    [else (+ (magnitude (first arr)) (prod_signs (rest arr)))]\n\
    \    [else (* -1 (magnitude (first arr)))]\n    [else (+ (magnitude (first arr))\
    \ (prod_signs (rest arr)))]\n    [else (* -1 (magnitude (first arr)))]\n    [else\
    \ (+ (magnitude (first arr)) (prod_signs (rest arr)))]\n    [else (* -1 (magnitude\
    \ (first arr)))]\n    [else (+ (magnitude (first arr)) (prod_signs (rest arr)))]\n\
    \    [else (* -1 (magnitude (first arr)))]\n    [else (+ (magnitude (first arr))\
    \ (prod_signs (rest arr)))]\n    [else (* -1 (magnitude (first arr)))]\n    [else\
    \ (+ (magn", "  (cond\n    [(empty? arr) None]\n    [(zero? (first arr)) (* 1\
    \ (first arr))]\n    [else (+ (* (first arr) (first arr))\n             (prod_signs\
    \ (rest arr)))]))\n", "  (cond [(empty? arr) None]\n        [(positive? (first\
    \ arr)) (+ (magnitude (first arr)) (prod_signs (rest arr)))]\n        [(negative?\
    \ (first arr)) (+ (magnitude (first arr)) (prod_signs (rest arr)))]\n        [else\
    \ (+ (magnitude (first arr)) (prod_signs (rest arr)))]))\n", "  (cond\n    [(empty?\
    \ arr) None]\n    [(zero? (first arr)) (first arr)]\n    [else (+ (* (first arr)\
    \ (sign arr))\n               (* (* (first arr) (sign arr)) (sign arr)))]))\n",
  "  (cond\n    [(empty? arr) None]\n    [(= (first arr) 0) 0]\n    [(= (first arr)\
    \ -1) 1]\n    [else (+ (magnitude (first arr)) (prod_signs (rest arr)))]))\n",
  "  (cond\n    [(empty? arr) None]\n    [(= (first arr) 0) 0]\n    [else (+ (magnitude\
    \ (first arr)) (prod_signs (rest arr)))]))\n", "  (cond [(empty? arr) None]\n\
    \        [(positive? (first arr)) (* 1 (prod_signs (rest arr)))]\n        [(negative?\
    \ (first arr)) (* -1 (prod_signs (rest arr)))]\n        [else (* 0 (prod_signs\
    \ (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n    [else (+ (magnitude\
    \ (first arr)) (prod_signs (rest arr)))]))\n", "  (if (empty? arr)\n      None\n\
    \      (let ([sum (+ (abs (first arr)) (abs (second arr)))])\n        (if (or\
    \ (zero? sum) (negative? sum))\n            (- (abs (first arr)) (abs (second\
    \ arr)))\n            (abs (first arr)) (abs (second arr)))))\n  )\n)\n", "  (cond\n\
    \    [(empty? arr) None]\n    [(positive? (first arr)) (* 1 (prod_signs (rest\
    \ arr)))]\n    [(negative? (first arr)) (* -1 (prod_signs (rest arr)))]\n    [else\
    \ (* 0 (prod_signs (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n   \
    \ [(positive? (first arr)) (* 1 (prod_signs (rest arr)))]\n    [(negative? (first\
    \ arr)) (* -1 (prod_signs (rest arr)))]\n    [else (* 0 (prod_signs (rest arr)))]))\n",
  "  (cond\n    [(empty? arr) None]\n    [(positive? (first arr)) (* 1 (prod_signs\
    \ (rest arr)))]\n    [(negative? (first arr)) (* -1 (prod_signs (rest arr)))]\n\
    \    [else (* 0 (prod_signs (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n\
    \    [(= (first arr) 0) 0]\n    [(= (first arr) -1) 1]\n    [else (* -1 (magnitude\
    \ (first arr)))]))\n", "  (cond\n    [(empty? arr) None]\n    [(positive? (first\
    \ arr)) (* 1 (prod_signs (rest arr)))]\n    [(negative? (first arr)) (* -1 (prod_signs\
    \ (rest arr)))]\n    [else (* 0 (prod_signs (rest arr)))]))\n", "  (cond\n   \
    \ [(empty? arr) None]\n    [(positive? (first arr)) (* 1 (prod_signs (rest arr)))]\n\
    \    [(negative? (first arr)) (* -1 (prod_signs (rest arr)))]\n    [else (* 0\
    \ (prod_signs (rest arr)))]))\n", "  (cond\n    [(empty? arr) None]\n    [else\
    \ (+ (magnitude (first arr)) (prod_signs (rest arr)))]))\n", "  (cond [(empty?\
    \ arr) None]\n        [(zero? (first arr)) 0]\n        [else (+ (magnitude (first\
    \ arr)) (prod_signs (rest arr)))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
