language: racket
name: HumanEval_57_monotonic
results:
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [(> (car\
    \ l) (cadr l)) #f]\n        [else (monotonic (cdr l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkkcoozc5.rkt:23:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpkkcoozc5.rkt:24:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpkkcoozc5.rkt:25:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpkkcoozc5.rkt:26:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkkcoozc5.rkt:28:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (monotonic (car l)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx5na_82u.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpx5na_82u.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx5na_82u.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpx5na_82u.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx5na_82u.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (monotonic (car l)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyhmhr1e3.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpyhmhr1e3.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyhmhr1e3.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpyhmhr1e3.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyhmhr1e3.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [(> (car\
    \ l) (cadr l)) #f]\n        [else (monotonic (cdr l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc7k66ivi.rkt:23:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpc7k66ivi.rkt:24:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpc7k66ivi.rkt:25:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpc7k66ivi.rkt:26:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc7k66ivi.rkt:28:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l))\n                  (or (< car l (car l))\n        \
    \              (< car l (cadr l))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3s8ncjf1.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp3s8ncjf1.rkt:25:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3s8ncjf1.rkt:26:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp3s8ncjf1.rkt:27:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3s8ncjf1.rkt:29:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l))\n                  (or (< car l (car l))\n        \
    \              (< car l (cadr l))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprdv59y6r.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmprdv59y6r.rkt:25:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprdv59y6r.rkt:26:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmprdv59y6r.rkt:27:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprdv59y6r.rkt:29:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (monotonic (car l)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdmlwyyvy.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpdmlwyyvy.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdmlwyyvy.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpdmlwyyvy.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdmlwyyvy.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [(> (car\
    \ l) (cadr l)) #f]\n        [else (monotonic (cdr l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqfw7tved.rkt:23:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpqfw7tved.rkt:24:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpqfw7tved.rkt:25:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpqfw7tved.rkt:26:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqfw7tved.rkt:28:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [(> (car\
    \ l) (cadr l)) #f]\n        [else (monotonic (cdr l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgl6t_hf_.rkt:23:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpgl6t_hf_.rkt:24:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpgl6t_hf_.rkt:25:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpgl6t_hf_.rkt:26:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgl6t_hf_.rkt:28:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (let loop ((l l) (i 0))\n    (cond\n      [(null? l) true]\n      [(<\
    \ l (car l)) (loop (cdr l) (+ i 1))]\n      [else (loop (cdr l) (+ i 1))]\n  \
    \    )))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz3vb__p_.rkt:23:4\n\
    \n<: contract violation\n  expected: real?\n  given: '(1 2 4 10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz3vb__p_.rkt:24:4\n\
    \n<: contract violation\n  expected: real?\n  given: '(1 2 4 20)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz3vb__p_.rkt:25:4\n\
    \n<: contract violation\n  expected: real?\n  given: '(1 20 4 10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz3vb__p_.rkt:26:4\n\
    \n<: contract violation\n  expected: real?\n  given: '(4 1 0 -10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz3vb__p_.rkt:27:4\n\
    \n<: contract violation\n  expected: real?\n  given: '(4 1 1 0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz3vb__p_.rkt:28:4\n\
    \n<: contract violation\n  expected: real?\n  given: '(1 2 3 2 5 60)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz3vb__p_.rkt:29:4\n\
    \n<: contract violation\n  expected: real?\n  given: '(1 2 3 4 5 60)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz3vb__p_.rkt:30:4\n\
    \n<: contract violation\n  expected: real?\n  given: '(9 9 9 9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) true]\n        [(null? (cdr l)) true]\n        [(< (car\
    \ l) (car (cdr l))) (monotonic (cdr l))]\n        [else (monotonic (cdr l))]\n\
    \        ))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp421fn9_6.rkt:24:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp421fn9_6.rkt:27:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l))\n                   (not (< (car l) (cadr l))))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe4i0mycd.rkt:23:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpe4i0mycd.rkt:24:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe4i0mycd.rkt:25:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpe4i0mycd.rkt:26:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe4i0mycd.rkt:28:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (< (car l) (cadr l)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwfz6cutf.rkt:20:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwfz6cutf.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwfz6cutf.rkt:22:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwfz6cutf.rkt:23:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwfz6cutf.rkt:25:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [(> (car\
    \ l) (cadr l)) #f]\n        [else (monotonic (cdr l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyv62hfl8.rkt:23:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpyv62hfl8.rkt:24:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpyv62hfl8.rkt:25:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpyv62hfl8.rkt:26:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyv62hfl8.rkt:28:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [(> (car\
    \ l) (cadr l)) #f]\n        [else (monotonic (cdr l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpplt4gh_g.rkt:23:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpplt4gh_g.rkt:24:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpplt4gh_g.rkt:25:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpplt4gh_g.rkt:26:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpplt4gh_g.rkt:28:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l))\n                   (not (< (car l) (cadr l))))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6vromgc4.rkt:23:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp6vromgc4.rkt:24:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6vromgc4.rkt:25:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp6vromgc4.rkt:26:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6vromgc4.rkt:28:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) true]\n        [(< (car l) (cadr l)) false]\n       \
    \ [else (monotonic (cdr l))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz_yot82p.rkt:20:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpz_yot82p.rkt:21:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmpz_yot82p.rkt:23:4\n\ncadr: contract violation\n\
    \  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpz_yot82p.rkt:24:4\n\ncadr:\
    \ contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz_yot82p.rkt:26:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpz_yot82p.rkt:27:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l))\n                   (or (< car l (car l))\n       \
    \                (< car l (cadr l))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7msum0d9.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp7msum0d9.rkt:25:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7msum0d9.rkt:26:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp7msum0d9.rkt:27:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7msum0d9.rkt:29:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (or (< car l (car l)) (< car l (cadr l))))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnwu3li3y.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpnwu3li3y.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnwu3li3y.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpnwu3li3y.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnwu3li3y.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (or (< car l (car l)) (< car l (cadr l))))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb11c709k.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpb11c709k.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb11c709k.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpb11c709k.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb11c709k.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) true]\n        [(< (car l) (cadr l)) false]\n       \
    \ [else (monotonic (cdr l))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmezi339n.rkt:20:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpmezi339n.rkt:21:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmpmezi339n.rkt:23:4\n\ncadr: contract violation\n\
    \  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmezi339n.rkt:24:4\n\ncadr:\
    \ contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmezi339n.rkt:26:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpmezi339n.rkt:27:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) true]\n        [(< (car l) (cadr l)) false]\n       \
    \ [else (monotonic (cdr l))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpexcwg3hp.rkt:20:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpexcwg3hp.rkt:21:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmpexcwg3hp.rkt:23:4\n\ncadr: contract violation\n\
    \  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpexcwg3hp.rkt:24:4\n\ncadr:\
    \ contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpexcwg3hp.rkt:26:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpexcwg3hp.rkt:27:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) true]\n    [(< (first l) (first l)) false]\n  \
    \  [else (monotonic (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps8rwiglw.rkt:23:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps8rwiglw.rkt:26:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) false]\n        [(< (car l) (cadr l)) (monotonic (cdr\
    \ l))]\n        [else (monotonic (cdr l))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3sc7tyz1.rkt:20:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3sc7tyz1.rkt:21:4\n\ncadr: contract violation\n  expected:\
    \ (cons/c any/c pair?)\n  given: '(20)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3sc7tyz1.rkt:22:4\n\ncadr:\
    \ contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3sc7tyz1.rkt:23:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3sc7tyz1.rkt:24:4\n\ncadr: contract violation\n  expected:\
    \ (cons/c any/c pair?)\n  given: '(0)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3sc7tyz1.rkt:25:4\n\ncadr:\
    \ contract violation\n  expected: (cons/c any/c pair?)\n  given: '(60)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3sc7tyz1.rkt:26:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(60)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3sc7tyz1.rkt:27:4\n\ncadr: contract violation\n  expected:\
    \ (cons/c any/c pair?)\n  given: '(9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l))\n                   (not (< (car l) (cadr l))))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjg6358sa.rkt:23:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpjg6358sa.rkt:24:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjg6358sa.rkt:25:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpjg6358sa.rkt:26:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjg6358sa.rkt:28:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [(> (car\
    \ l) (cadr l)) #f]\n        [else (monotonic (cdr l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpalqf1cv9.rkt:23:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpalqf1cv9.rkt:24:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpalqf1cv9.rkt:25:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpalqf1cv9.rkt:26:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpalqf1cv9.rkt:28:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l))\n                   (not (< (car l) (cadr l))))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbjenrm6z.rkt:23:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpbjenrm6z.rkt:24:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbjenrm6z.rkt:25:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpbjenrm6z.rkt:26:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbjenrm6z.rkt:28:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (monotonic (car l)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvm8_m00c.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpvm8_m00c.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvm8_m00c.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpvm8_m00c.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvm8_m00c.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l))\n                  (or (< (car l) (cadr l))\n     \
    \                 (< (cadr l) (car l))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy_n10umi.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpy_n10umi.rkt:25:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy_n10umi.rkt:26:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpy_n10umi.rkt:27:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy_n10umi.rkt:29:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l))\n                   (or (< (car l) (cadr l))\n    \
    \                   (> (car l) (cadr l))))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp20080hpj.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp20080hpj.rkt:25:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp20080hpj.rkt:26:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp20080hpj.rkt:27:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp20080hpj.rkt:29:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond ((null? l) true)\n        ((< (car l) (cadr l)) true)\n        (else\
    \ (monotonic (cdr l)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10))\
    \ #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpseiaxwhg.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpseiaxwhg.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpseiaxwhg.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpseiaxwhg.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpseiaxwhg.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (or (< car l (car l)) (< car l (cadr l))))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy3_j4vb7.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpy3_j4vb7.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy3_j4vb7.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpy3_j4vb7.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy3_j4vb7.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(null? (cdr l)) #t]\n        [(< (car l)\
    \ (car (cdr l)))\n         (and (monotonic (cdr l))\n               (not (monotonic\
    \ (cdr l))))]\n        [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpiop5ff5g.rkt:23:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpiop5ff5g.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpiop5ff5g.rkt:26:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpiop5ff5g.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpiop5ff5g.rkt:29:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpiop5ff5g.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) true]\n        [(< (car l) (cadr l)) false]\n       \
    \ [else (monotonic (cdr l))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu2srr2ll.rkt:20:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpu2srr2ll.rkt:21:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmpu2srr2ll.rkt:23:4\n\ncadr: contract violation\n\
    \  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpu2srr2ll.rkt:24:4\n\ncadr:\
    \ contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu2srr2ll.rkt:26:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpu2srr2ll.rkt:27:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l))\n                  (or (not (< (car l) (cadr l)))\n\
    \                      (and (monotonic (cdr l))\n                          (or\
    \ (not (< (car l) (cadr l))))))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpd56wk68n.rkt:16:60: read-syntax: missing `]` to close preceding\
    \ `[`, found instead `)`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l))\n                  (or (< car l (car l))\n        \
    \              (< car l (cadr l))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp75bs0kst.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp75bs0kst.rkt:25:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp75bs0kst.rkt:26:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp75bs0kst.rkt:27:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp75bs0kst.rkt:29:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    ((< (car l) (car\
    \ (cdr l)))\n     (and (monotonic (cdr l))\n          (or (null? (cdr l))\n  \
    \            (and (< (car l) (car (cdr l)))\n                  (monotonic (cdr\
    \ l))))))\n    (else (and (monotonic (cdr l))\n              (or (null? (cdr l))\n\
    \                  (and (< (car l) (car (cdr l)))\n                      (monotonic\
    \ (cdr l))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppi7xrtu6.rkt:29:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppi7xrtu6.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppi7xrtu6.rkt:32:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppi7xrtu6.rkt:33:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppi7xrtu6.rkt:35:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppi7xrtu6.rkt:36:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) true]\n        [(< (car l) (cadr l)) false]\n       \
    \ [else (monotonic (cdr l))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7d7p_p6_.rkt:20:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp7d7p_p6_.rkt:21:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmp7d7p_p6_.rkt:23:4\n\ncadr: contract violation\n\
    \  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7d7p_p6_.rkt:24:4\n\ncadr:\
    \ contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7d7p_p6_.rkt:26:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp7d7p_p6_.rkt:27:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (let loop ((l l) (i 0))\n    (if (null? l)\n        #t\n        (let ((x\
    \ (car l)))\n          (if (< x i)\n              #f\n              (if (> x i)\n\
    \                  (loop (cdr l) (+ i 1))\n                  (loop (cdr l) (+\
    \ i 1))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n \
    \   (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0zwm91de.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0zwm91de.rkt:29:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0zwm91de.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l))\n                   (not (< (car l) (cadr l))))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgef0df6f.rkt:23:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpgef0df6f.rkt:24:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgef0df6f.rkt:25:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpgef0df6f.rkt:26:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgef0df6f.rkt:28:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) true]\n        [(< (car l) (cadr l)) false]\n       \
    \ [else (monotonic (cdr l))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt5r457bh.rkt:20:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpt5r457bh.rkt:21:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmpt5r457bh.rkt:23:4\n\ncadr: contract violation\n\
    \  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpt5r457bh.rkt:24:4\n\ncadr:\
    \ contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt5r457bh.rkt:26:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpt5r457bh.rkt:27:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (monotonic (cdr l)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl2wae6z3.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpl2wae6z3.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl2wae6z3.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpl2wae6z3.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl2wae6z3.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l))\n                   (not (< (car l) (cadr l))))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp43n6sosh.rkt:23:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp43n6sosh.rkt:24:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp43n6sosh.rkt:25:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp43n6sosh.rkt:26:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp43n6sosh.rkt:28:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l))\n                  (or (< car l (car l))\n        \
    \              (< car l (cadr l))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ahr3vtr.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp3ahr3vtr.rkt:25:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ahr3vtr.rkt:26:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp3ahr3vtr.rkt:27:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ahr3vtr.rkt:29:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (monotonic (cdr l)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjp5lerae.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpjp5lerae.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjp5lerae.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpjp5lerae.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjp5lerae.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond ((null? l) #f)\n        ((null? (cdr l)) #t)\n        (else (and\
    \ (< (car l) (car (cdr l)))\n                   (monotonic (cdr l))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpce1nxick.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpce1nxick.rkt:25:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpce1nxick.rkt:28:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(null? (cdr l)) #t]\n        [(< (car l)\
    \ (car (cdr l)))\n         (and (monotonic (cdr l))\n               (not (< (car\
    \ l) (car (cdr l))))))]\n        [else #f]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpw06819dd.rkt:15:47: read-syntax: missing `]` to close `[` on line\
    \ 13, found instead `)`\n  possible cause: indentation suggests a missing `]`\
    \ before line 14\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (monotonic (cdr l)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqak4_dk5.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpqak4_dk5.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqak4_dk5.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpqak4_dk5.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqak4_dk5.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [(> (car\
    \ l) (cadr l)) #f]\n        [else (monotonic (cdr l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqlb_1wc2.rkt:23:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpqlb_1wc2.rkt:24:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpqlb_1wc2.rkt:25:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpqlb_1wc2.rkt:26:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqlb_1wc2.rkt:28:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (monotonic (cdr l)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp275qqq_3.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp275qqq_3.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp275qqq_3.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp275qqq_3.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp275qqq_3.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l))\n                  (or (< car l (car l))\n        \
    \               (< car l (cadr l))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3gschpkx.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp3gschpkx.rkt:25:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3gschpkx.rkt:26:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp3gschpkx.rkt:27:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3gschpkx.rkt:29:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l))\n                  (or (< car l (car l))\n        \
    \              (< car l (cadr l))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmponezht4z.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmponezht4z.rkt:25:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmponezht4z.rkt:26:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmponezht4z.rkt:27:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmponezht4z.rkt:29:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [(> (car\
    \ l) (cadr l)) #f]\n        [else (monotonic (cdr l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp67ld57tu.rkt:23:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp67ld57tu.rkt:24:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp67ld57tu.rkt:25:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp67ld57tu.rkt:26:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp67ld57tu.rkt:28:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond ((null? l) #f)\n        ((< (car l) (cadr l)) #t)\n        (else\
    \ (monotonic (cdr l)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10))\
    \ #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpksxl12uo.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpksxl12uo.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpksxl12uo.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpksxl12uo.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpksxl12uo.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [(> (car\
    \ l) (cadr l)) #f]\n        [else (monotonic (cdr l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb4e2kdp6.rkt:23:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpb4e2kdp6.rkt:24:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpb4e2kdp6.rkt:25:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpb4e2kdp6.rkt:26:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb4e2kdp6.rkt:28:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) true]\n    [(null? (rest l)) false]\n    [(< (car\
    \ l) (cadr l)) (monotonic (rest l))]\n    [else (monotonic (rest l))]\n  ))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy4nmxc36.rkt:23:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy4nmxc36.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy4nmxc36.rkt:26:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy4nmxc36.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy4nmxc36.rkt:29:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy4nmxc36.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (monotonic (car l)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmq1bwh31.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpmq1bwh31.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmq1bwh31.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpmq1bwh31.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmq1bwh31.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond ((null? l) true)\n        ((< (car l) (cadr l)) true)\n        (else\
    \ (monotonic (cdr l)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10))\
    \ #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfu9d7d_n.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpfu9d7d_n.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfu9d7d_n.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpfu9d7d_n.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfu9d7d_n.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond ((null? l) #f)\n        ((null? (cdr l)) #t)\n        (else (and\
    \ (< (car l) (car (cdr l)))\n                   (monotonic (cdr l))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3tkkyv3v.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3tkkyv3v.rkt:25:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3tkkyv3v.rkt:28:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (monotonic (car l)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf3js0zxm.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpf3js0zxm.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf3js0zxm.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpf3js0zxm.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf3js0zxm.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (monotonic (car l)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjy7300r.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmptjy7300r.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptjy7300r.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmptjy7300r.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptjy7300r.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (monotonic (car l)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj1baet5k.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpj1baet5k.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj1baet5k.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpj1baet5k.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj1baet5k.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [(> (car\
    \ l) (cadr l)) #f]\n        [else (monotonic (cdr l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmwooyib4.rkt:23:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpmwooyib4.rkt:24:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpmwooyib4.rkt:25:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpmwooyib4.rkt:26:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmwooyib4.rkt:28:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (< (car l) (cadr l)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgs7pulfy.rkt:20:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgs7pulfy.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgs7pulfy.rkt:22:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgs7pulfy.rkt:23:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgs7pulfy.rkt:25:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [(> (car\
    \ l) (cadr l)) #f]\n        [else (monotonic (cdr l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq5zatysr.rkt:23:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpq5zatysr.rkt:24:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpq5zatysr.rkt:25:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpq5zatysr.rkt:26:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq5zatysr.rkt:28:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (monotonic (car l)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0xipy6zm.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp0xipy6zm.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0xipy6zm.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp0xipy6zm.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0xipy6zm.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    ((null? l) #f)\n    ((null? (cdr l)) #t)\n    ((< (car l) (cadr\
    \ l)) #t)\n    ((> (car l) (cadr l)) #f)\n    (else (monotonic (cdr l)))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpty5fp02g.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpty5fp02g.rkt:26:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpty5fp02g.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpty5fp02g.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (monotonic (car l)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq80xucj5.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpq80xucj5.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq80xucj5.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpq80xucj5.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq80xucj5.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond ((null? l) true)\n        ((< (car l) (cadr l)) true)\n        (else\
    \ (monotonic (cdr l)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10))\
    \ #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbz15_rp7.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpbz15_rp7.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbz15_rp7.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpbz15_rp7.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbz15_rp7.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l))\n                   (< (car l) (cadr l)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuvuvh5u0.rkt:23:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpuvuvh5u0.rkt:24:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuvuvh5u0.rkt:25:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpuvuvh5u0.rkt:26:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuvuvh5u0.rkt:28:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (let loop ((l l) (i 0) (j 0))\n    (if (null? l)\n        #t\n       \
    \ (let ((x (car l)))\n          (if (< x j)\n              (loop (cdr l) (+ i\
    \ 1) j)\n              (loop (cdr l) i x)))))) ; #lang racket\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdrfiyicd.rkt:26:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdrfiyicd.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (monotonic (cdr l)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpimeicz81.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpimeicz81.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpimeicz81.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpimeicz81.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpimeicz81.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (monotonic (cdr l)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2oyn0q8_.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp2oyn0q8_.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2oyn0q8_.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp2oyn0q8_.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2oyn0q8_.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond ((null? l) true)\n        ((< (car l) (cadr l)) (monotonic (cdr\
    \ l)))\n        (else (monotonic (cdr l)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_pvn4ott.rkt:20:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_pvn4ott.rkt:21:4\n\ncadr: contract violation\n  expected:\
    \ (cons/c any/c pair?)\n  given: '(20)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_pvn4ott.rkt:22:4\n\ncadr:\
    \ contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_pvn4ott.rkt:23:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_pvn4ott.rkt:24:4\n\ncadr: contract violation\n  expected:\
    \ (cons/c any/c pair?)\n  given: '(0)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_pvn4ott.rkt:25:4\n\ncadr:\
    \ contract violation\n  expected: (cons/c any/c pair?)\n  given: '(60)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_pvn4ott.rkt:26:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(60)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_pvn4ott.rkt:27:4\n\ncadr: contract violation\n  expected:\
    \ (cons/c any/c pair?)\n  given: '(9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l))\n                   (not (< (car l) (cadr l))))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqy6tjpph.rkt:23:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpqy6tjpph.rkt:24:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqy6tjpph.rkt:25:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpqy6tjpph.rkt:26:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqy6tjpph.rkt:28:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (monotonic (car l)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfyb_32y7.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpfyb_32y7.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfyb_32y7.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpfyb_32y7.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfyb_32y7.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l))\n                  (or (< car l (car l))\n        \
    \              (< car l (cadr l))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjfk1dw2p.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpjfk1dw2p.rkt:25:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjfk1dw2p.rkt:26:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpjfk1dw2p.rkt:27:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjfk1dw2p.rkt:29:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (monotonic (cdr (cdr l))))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpltx5oc7t.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpltx5oc7t.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpltx5oc7t.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpltx5oc7t.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpltx5oc7t.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [(> (car\
    \ l) (cadr l)) #f]\n        [else (monotonic (cdr l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0lni8h46.rkt:23:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp0lni8h46.rkt:24:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp0lni8h46.rkt:25:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp0lni8h46.rkt:26:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0lni8h46.rkt:28:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [(> (car\
    \ l) (cadr l)) #f]\n        [else (monotonic (cdr l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmporx48kh4.rkt:23:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmporx48kh4.rkt:24:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmporx48kh4.rkt:25:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmporx48kh4.rkt:26:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmporx48kh4.rkt:28:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [(> (car\
    \ l) (cadr l)) #f]\n        [else (monotonic (cdr l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpobrfwb2t.rkt:23:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpobrfwb2t.rkt:24:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpobrfwb2t.rkt:25:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpobrfwb2t.rkt:26:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpobrfwb2t.rkt:28:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (let loop ((l l) (acc #t) (i 0))\n    (cond ((null? l) acc)\n        \
    \  ((< i (length l)) (not acc))\n          (else (loop (cdr l) (not (< i (length\
    \ l))) (add1 i))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr96xdtka.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr96xdtka.rkt:22:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr96xdtka.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr96xdtka.rkt:25:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr96xdtka.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr96xdtka.rkt:28:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (monotonic (cdr (cdr l))))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsbgvqpyn.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpsbgvqpyn.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsbgvqpyn.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpsbgvqpyn.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsbgvqpyn.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [(> (car\
    \ l) (cadr l)) #f]\n        [else (monotonic (cdr l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6v40_1u2.rkt:23:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp6v40_1u2.rkt:24:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp6v40_1u2.rkt:25:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp6v40_1u2.rkt:26:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6v40_1u2.rkt:28:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    ((< (car l) (car\
    \ (cdr l)))\n     (and (monotonic (cdr l)) (or (not (< (car l) (car (cdr l))))\n\
    \                              (monotonic (cdr (cdr l))))))\n    (else (and (monotonic\
    \ (cdr l)) (or (not (> (car l) (car (cdr l))))\n                             \
    \      (monotonic (cdr (cdr l))))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoka8gwpd.rkt:25:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoka8gwpd.rkt:26:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoka8gwpd.rkt:28:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoka8gwpd.rkt:29:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoka8gwpd.rkt:31:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoka8gwpd.rkt:32:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (monotonic (car l)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6_hzcrk0.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp6_hzcrk0.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6_hzcrk0.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp6_hzcrk0.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6_hzcrk0.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l))\n                  (or (< car l (car l))\n        \
    \              (< car l (cadr l))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8fs7xq70.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp8fs7xq70.rkt:25:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8fs7xq70.rkt:26:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp8fs7xq70.rkt:27:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8fs7xq70.rkt:29:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [(> (car\
    \ l) (cadr l)) #f]\n        [else (monotonic (cdr l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfpfn45e5.rkt:23:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpfpfn45e5.rkt:24:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpfpfn45e5.rkt:25:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpfpfn45e5.rkt:26:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfpfn45e5.rkt:28:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(null? (cdr l)) #t]\n        [(< (car l)\
    \ (cadr l)) #t]\n        [else (and (monotonic (cdr l)) (monotonic (cdr (cdr l))))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2otgpzsp.rkt:23:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2otgpzsp.rkt:26:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l))\n                   (not (< (car l) (cadr l))))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzi4_oux3.rkt:23:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpzi4_oux3.rkt:24:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzi4_oux3.rkt:25:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpzi4_oux3.rkt:26:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzi4_oux3.rkt:28:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(null? (cdr l)) #t]\n        [(< (car l)\
    \ (car (cdr l)))\n         (and (monotonic (cdr l))\n               (not (monotonic\
    \ (cdr l))))]\n        [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpc8f3d421.rkt:23:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpc8f3d421.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpc8f3d421.rkt:26:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpc8f3d421.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpc8f3d421.rkt:29:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpc8f3d421.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (or (< car l (car l)) (< car l (cadr l))))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq0elouim.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpq0elouim.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq0elouim.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpq0elouim.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq0elouim.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (monotonic (cdr l)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvwjx0bsi.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpvwjx0bsi.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvwjx0bsi.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpvwjx0bsi.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvwjx0bsi.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) true]\n        [(< (car l) (cadr l)) false]\n       \
    \ [else (monotonic (cdr l))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplx63ktn8.rkt:20:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmplx63ktn8.rkt:21:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmplx63ktn8.rkt:23:4\n\ncadr: contract violation\n\
    \  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmplx63ktn8.rkt:24:4\n\ncadr:\
    \ contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplx63ktn8.rkt:26:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmplx63ktn8.rkt:27:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) true]\n        [(< (car l) (cadr l)) false]\n       \
    \ [else (monotonic (cdr l))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl8j3b94a.rkt:20:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpl8j3b94a.rkt:21:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmpl8j3b94a.rkt:23:4\n\ncadr: contract violation\n\
    \  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpl8j3b94a.rkt:24:4\n\ncadr:\
    \ contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl8j3b94a.rkt:26:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpl8j3b94a.rkt:27:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (let loop ((l l) (i 0) (j 0))\n    (if (null? l)\n        #t\n       \
    \ (let ((x (car l))\n              (y (cadr l)))\n          (if (< x y)\n    \
    \          (loop (cdr l) (+ i 1) j)\n              (loop (cdr l) i j)))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmptccb4p_8.rkt:10:0: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 20\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) true]\n        [(< (car l) (cadr l)) false]\n       \
    \ [else (monotonic (cdr l))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgmfzg69q.rkt:20:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpgmfzg69q.rkt:21:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmpgmfzg69q.rkt:23:4\n\ncadr: contract violation\n\
    \  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgmfzg69q.rkt:24:4\n\ncadr:\
    \ contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgmfzg69q.rkt:26:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpgmfzg69q.rkt:27:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l))\n                   (not (< (car l) (cadr l))))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp71ihqzsf.rkt:23:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp71ihqzsf.rkt:24:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp71ihqzsf.rkt:25:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp71ihqzsf.rkt:26:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp71ihqzsf.rkt:28:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(null? (rest l)) #t]\n    [(< (car l)\
    \ (cadr l)) #t]\n    [(> (car l) (cadr l)) #f]\n    [else (and (monotonic (cdr\
    \ l)) (monotonic (rest l)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpet1_ffqf.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpet1_ffqf.rkt:26:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpet1_ffqf.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpet1_ffqf.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (monotonic (cdr l)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp87kft74o.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp87kft74o.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp87kft74o.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp87kft74o.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp87kft74o.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (or (< car l (car l)) (< car l (cadr l))))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp85qx8ych.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp85qx8ych.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp85qx8ych.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp85qx8ych.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp85qx8ych.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l))\n                  (or (< car l (car l))\n        \
    \               (< car l (cadr l))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpko6y54er.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpko6y54er.rkt:25:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpko6y54er.rkt:26:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpko6y54er.rkt:27:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpko6y54er.rkt:29:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) true]\n        [(< (car l) (cadr l)) false]\n       \
    \ [else (monotonic (cdr l))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg9_8sr45.rkt:20:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpg9_8sr45.rkt:21:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmpg9_8sr45.rkt:23:4\n\ncadr: contract violation\n\
    \  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpg9_8sr45.rkt:24:4\n\ncadr:\
    \ contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg9_8sr45.rkt:26:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpg9_8sr45.rkt:27:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (or (< car l (car l)) (< car l (cadr l))))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5pfrkm95.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp5pfrkm95.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5pfrkm95.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp5pfrkm95.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5pfrkm95.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) true]\n        [(< (car l) (cadr l)) false]\n       \
    \ [else (monotonic (cdr l))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_sj8j7_6.rkt:20:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp_sj8j7_6.rkt:21:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmp_sj8j7_6.rkt:23:4\n\ncadr: contract violation\n\
    \  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_sj8j7_6.rkt:24:4\n\ncadr:\
    \ contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_sj8j7_6.rkt:26:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp_sj8j7_6.rkt:27:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (or (< car l (car l)) (< car l (cadr l))))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp607wuywv.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp607wuywv.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp607wuywv.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp607wuywv.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp607wuywv.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (monotonic (cdr (cdr l))))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8dxs2uc2.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp8dxs2uc2.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8dxs2uc2.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp8dxs2uc2.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8dxs2uc2.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (let loop ((l l) (i 0) (acc #t) (next #t))\n    (if (null? l)\n      \
    \  acc\n        (loop (cdr l) (+ i 1) (or (< i 0) (< i (car l))) (or (> i 0) (>\
    \ i (car l)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp709w8sbw.rkt:23:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp709w8sbw.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp709w8sbw.rkt:25:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp709w8sbw.rkt:26:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l))\n                   (not (< (car l) (cadr l))))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9fkb0mo4.rkt:23:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp9fkb0mo4.rkt:24:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9fkb0mo4.rkt:25:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp9fkb0mo4.rkt:26:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9fkb0mo4.rkt:28:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l))\n                  (or (< car l (car l))\n        \
    \               (< car l (cadr l))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe2rh7f12.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpe2rh7f12.rkt:25:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe2rh7f12.rkt:26:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpe2rh7f12.rkt:27:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe2rh7f12.rkt:29:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l))\n                  (or (< car l (car l))\n        \
    \              (< car l (cadr l))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7egqo6_4.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp7egqo6_4.rkt:25:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7egqo6_4.rkt:26:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp7egqo6_4.rkt:27:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7egqo6_4.rkt:29:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l))\n                   (not (< (car l) (cadr l))))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpafog1yw7.rkt:23:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpafog1yw7.rkt:24:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafog1yw7.rkt:25:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpafog1yw7.rkt:26:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpafog1yw7.rkt:28:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond ((null? l) #f)\n        ((null? (cdr l)) #t)\n        ((< (car l)\
    \ (car (cdr l)))\n         (and (monotonic (cdr l))\n               (not (monotonic\
    \ (cdr (cdr l)))))\n        (else (and (monotonic (cdr l))\n                 \
    \ (monotonic (cdr (cdr l)))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpljluzu4s.rkt:10:0: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 19\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l))\n                  (or (> (car l) (cadr l))\n     \
    \                 (< (car l) (cadr l))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmputj49npl.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmputj49npl.rkt:25:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmputj49npl.rkt:26:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmputj49npl.rkt:27:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmputj49npl.rkt:29:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) true]\n        [(< (car l) (cadr l)) false]\n       \
    \ [else (monotonic (cdr l))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ecfexrx.rkt:20:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp4ecfexrx.rkt:21:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmp4ecfexrx.rkt:23:4\n\ncadr: contract violation\n\
    \  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ecfexrx.rkt:24:4\n\ncadr:\
    \ contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ecfexrx.rkt:26:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp4ecfexrx.rkt:27:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l))\n                  (or (< car l (car l))\n        \
    \              (< car l (cadr l))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpghsttnuy.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpghsttnuy.rkt:25:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpghsttnuy.rkt:26:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpghsttnuy.rkt:27:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpghsttnuy.rkt:29:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l))\n                  (or (< car l (car l))\n        \
    \               (< car l (cadr l))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9v3ymv16.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp9v3ymv16.rkt:25:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9v3ymv16.rkt:26:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp9v3ymv16.rkt:27:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9v3ymv16.rkt:29:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l))\n                  (or (< car l (car l))\n        \
    \              (< car l (cadr l))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpukju3wpi.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpukju3wpi.rkt:25:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpukju3wpi.rkt:26:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpukju3wpi.rkt:27:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpukju3wpi.rkt:29:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [(> (car\
    \ l) (cadr l)) #f]\n        [else (monotonic (cdr l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjib819sb.rkt:23:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpjib819sb.rkt:24:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpjib819sb.rkt:25:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpjib819sb.rkt:26:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjib819sb.rkt:28:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (or (< car l (car l)) (< car l (cadr l))))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd0siodm2.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpd0siodm2.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpd0siodm2.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpd0siodm2.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpd0siodm2.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (monotonic (cdr l)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppw8pruae.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmppw8pruae.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppw8pruae.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmppw8pruae.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppw8pruae.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) true]\n        [(< (car l) (cadr l)) false]\n       \
    \ [else (monotonic (cdr l))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpltsx93je.rkt:20:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpltsx93je.rkt:21:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmpltsx93je.rkt:23:4\n\ncadr: contract violation\n\
    \  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpltsx93je.rkt:24:4\n\ncadr:\
    \ contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpltsx93je.rkt:26:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpltsx93je.rkt:27:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l))\n                  (or (< (car l) (cadr l))\n     \
    \                 (< (cadr l) (car l))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprk0k6_15.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmprk0k6_15.rkt:25:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprk0k6_15.rkt:26:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmprk0k6_15.rkt:27:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprk0k6_15.rkt:29:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (or (< car l (car l)) (< car l (cadr l))))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwu8d_0sz.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpwu8d_0sz.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwu8d_0sz.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpwu8d_0sz.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwu8d_0sz.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (monotonic (cdr l)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp38q1nllv.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp38q1nllv.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp38q1nllv.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp38q1nllv.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp38q1nllv.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l))\n                  (or (< car l (car l))\n        \
    \               (< car l (cadr l))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo9erbdhi.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpo9erbdhi.rkt:25:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo9erbdhi.rkt:26:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpo9erbdhi.rkt:27:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo9erbdhi.rkt:29:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (monotonic (car l)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8owkprt1.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp8owkprt1.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8owkprt1.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp8owkprt1.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8owkprt1.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    ((null? l) #t)\n    ((< (car l) (cadr l)) #t)\n    ((> (car\
    \ l) (cadr l)) #f)\n    (else (monotonic (cdr l)))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptygirbd0.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmptygirbd0.rkt:25:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmptygirbd0.rkt:26:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmptygirbd0.rkt:27:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptygirbd0.rkt:29:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) true]\n        [(< (car l) (cadr l)) (monotonic (cdr\
    \ l))]\n        [else false]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvhrt3_oi.rkt:20:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpvhrt3_oi.rkt:21:4\n\ncadr: contract violation\n  expected:\
    \ (cons/c any/c pair?)\n  given: '(20)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvhrt3_oi.rkt:23:4\nactual:\
    \     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpvhrt3_oi.rkt:24:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmpvhrt3_oi.rkt:26:4\n\ncadr: contract violation\n\
    \  expected: (cons/c any/c pair?)\n  given: '(60)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvhrt3_oi.rkt:27:4\nactual:\
    \     #f\nexpected:   #t\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l))\n                   (< (car l) (cadr l)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp56r8uqxe.rkt:23:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp56r8uqxe.rkt:24:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp56r8uqxe.rkt:25:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp56r8uqxe.rkt:26:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp56r8uqxe.rkt:28:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (< (car l) (cadr l)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpeinsrwqz.rkt:20:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpeinsrwqz.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpeinsrwqz.rkt:22:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpeinsrwqz.rkt:23:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpeinsrwqz.rkt:25:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l))\n                   (not (< (car l) (cadr l))))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpapwm2fyk.rkt:23:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpapwm2fyk.rkt:24:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpapwm2fyk.rkt:25:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpapwm2fyk.rkt:26:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpapwm2fyk.rkt:28:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (or (not (< (car l) (cadr l)))\n                  \
    \                     (not (> (car l) (cadr l)))))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpgw0uigp7.rkt:14:67: read-syntax: missing `]` to close preceding\
    \ `[`, found instead `)`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l))\n                   (not (< (car l) (cadr l))))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw6h_guci.rkt:23:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpw6h_guci.rkt:24:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw6h_guci.rkt:25:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpw6h_guci.rkt:26:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw6h_guci.rkt:28:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (< (car l) (cadr l)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3b9g1eui.rkt:20:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3b9g1eui.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3b9g1eui.rkt:22:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3b9g1eui.rkt:23:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3b9g1eui.rkt:25:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) true]\n        [(< (car l) (cadr l)) false]\n       \
    \ [else (monotonic (cdr l))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62fxi65v.rkt:20:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp62fxi65v.rkt:21:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmp62fxi65v.rkt:23:4\n\ncadr: contract violation\n\
    \  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp62fxi65v.rkt:24:4\n\ncadr:\
    \ contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62fxi65v.rkt:26:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp62fxi65v.rkt:27:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond ((null? l) #f)\n        ((< (car l) (cadr l)) #t)\n        (else\
    \ (monotonic (cdr l)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10))\
    \ #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpefvijbn7.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpefvijbn7.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpefvijbn7.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpefvijbn7.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpefvijbn7.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) true]\n        [(< (car l) (cadr l)) false]\n       \
    \ [else (monotonic (cdr l))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl22ftwzr.rkt:20:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpl22ftwzr.rkt:21:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmpl22ftwzr.rkt:23:4\n\ncadr: contract violation\n\
    \  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpl22ftwzr.rkt:24:4\n\ncadr:\
    \ contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl22ftwzr.rkt:26:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpl22ftwzr.rkt:27:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) true]\n        [(< (car l) (cadr l)) false]\n       \
    \ [else (monotonic (cdr l))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpprw98_f1.rkt:20:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpprw98_f1.rkt:21:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmpprw98_f1.rkt:23:4\n\ncadr: contract violation\n\
    \  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpprw98_f1.rkt:24:4\n\ncadr:\
    \ contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpprw98_f1.rkt:26:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpprw98_f1.rkt:27:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(< (first l) (first l)) #t]\n    [else\
    \ (and (monotonic (rest l))\n               (not (< (first l) (first l))))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpten_g9z4.rkt:24:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpten_g9z4.rkt:27:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) false]\n        [(< (car l) (cadr l)) (monotonic (cdr\
    \ l))]\n        [else (monotonic (cdr l))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpimu2nym9.rkt:20:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpimu2nym9.rkt:21:4\n\ncadr: contract violation\n  expected:\
    \ (cons/c any/c pair?)\n  given: '(20)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpimu2nym9.rkt:22:4\n\ncadr:\
    \ contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpimu2nym9.rkt:23:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpimu2nym9.rkt:24:4\n\ncadr: contract violation\n  expected:\
    \ (cons/c any/c pair?)\n  given: '(0)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpimu2nym9.rkt:25:4\n\ncadr:\
    \ contract violation\n  expected: (cons/c any/c pair?)\n  given: '(60)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpimu2nym9.rkt:26:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(60)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpimu2nym9.rkt:27:4\n\ncadr: contract violation\n  expected:\
    \ (cons/c any/c pair?)\n  given: '(9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (or (not (< (car l) (cadr l)))\n                  \
    \                     (monotonic (cdr l))))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt348erp9.rkt:23:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpt348erp9.rkt:24:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt348erp9.rkt:25:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpt348erp9.rkt:26:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt348erp9.rkt:28:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond ((null? l) #f)\n        ((null? (cdr l)) #t)\n        (else (and\
    \ (< (car l) (car (cdr l)))\n                   (monotonic (cdr l))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpt4tnmuqb.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpt4tnmuqb.rkt:25:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpt4tnmuqb.rkt:28:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (monotonic (car l)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfcth8nim.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpfcth8nim.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfcth8nim.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpfcth8nim.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfcth8nim.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond ((null? l) #f)\n        ((null? (cdr l)) #t)\n        (else (and\
    \ (< (car l) (car (cdr l)))\n                   (monotonic (cdr l))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpurqx1odg.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpurqx1odg.rkt:25:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpurqx1odg.rkt:28:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (< (car l) (cadr l)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp57xbtv51.rkt:20:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp57xbtv51.rkt:21:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp57xbtv51.rkt:22:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp57xbtv51.rkt:23:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp57xbtv51.rkt:25:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (monotonic (car l)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf2z91t7h.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpf2z91t7h.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf2z91t7h.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpf2z91t7h.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf2z91t7h.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    ((< (car l) (car\
    \ (cdr l)))\n     (and (monotonic (cdr l))\n          (or (null? (cdr l)) (< (car\
    \ l) (car (cdr l))))))\n    (else (and (monotonic (cdr l))\n               (or\
    \ (null? (cdr l)) (> (car l) (car (cdr l))))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpk9o0go6r.rkt:25:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpk9o0go6r.rkt:26:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpk9o0go6r.rkt:28:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpk9o0go6r.rkt:29:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpk9o0go6r.rkt:31:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpk9o0go6r.rkt:32:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (monotonic (cdr l)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppmmsx6z7.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmppmmsx6z7.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppmmsx6z7.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmppmmsx6z7.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppmmsx6z7.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (monotonic (car l)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6jqt255y.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp6jqt255y.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6jqt255y.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp6jqt255y.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6jqt255y.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(null? (cdr l)) #t]\n        [(< (car l)\
    \ (cadr l)) #t]\n        [else (and (monotonic (cdr l)) (monotonic (cdr l)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7loxn7b6.rkt:23:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7loxn7b6.rkt:26:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (monotonic (cdr (cdr l))))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg6lb8r49.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpg6lb8r49.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg6lb8r49.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpg6lb8r49.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg6lb8r49.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [(> (car\
    \ l) (cadr l)) #f]\n        [else (monotonic (cdr l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8s0t1v5p.rkt:23:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp8s0t1v5p.rkt:24:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp8s0t1v5p.rkt:25:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp8s0t1v5p.rkt:26:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8s0t1v5p.rkt:28:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(null? (rest l)) #t]\n    [(< (car l)\
    \ (cadr l)) #t]\n    [(> (car l) (cadr l)) #f]\n    [else (monotonic (rest l))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpu0rx2mps.rkt:25:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpu0rx2mps.rkt:26:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpu0rx2mps.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpu0rx2mps.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l))\n                   (not (< (car l) (cadr l))))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvb3t7amh.rkt:23:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpvb3t7amh.rkt:24:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvb3t7amh.rkt:25:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpvb3t7amh.rkt:26:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvb3t7amh.rkt:28:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l))\n                   (or (< car l (car l))\n       \
    \                (< car l (cadr l))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzynvg63w.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpzynvg63w.rkt:25:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzynvg63w.rkt:26:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpzynvg63w.rkt:27:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzynvg63w.rkt:29:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond ((null? l) true)\n        ((< (car l) (cadr l)) (monotonic (cdr\
    \ l)))\n        (else (monotonic (cdr l)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo39a6drc.rkt:20:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpo39a6drc.rkt:21:4\n\ncadr: contract violation\n  expected:\
    \ (cons/c any/c pair?)\n  given: '(20)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo39a6drc.rkt:22:4\n\ncadr:\
    \ contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo39a6drc.rkt:23:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpo39a6drc.rkt:24:4\n\ncadr: contract violation\n  expected:\
    \ (cons/c any/c pair?)\n  given: '(0)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo39a6drc.rkt:25:4\n\ncadr:\
    \ contract violation\n  expected: (cons/c any/c pair?)\n  given: '(60)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo39a6drc.rkt:26:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(60)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpo39a6drc.rkt:27:4\n\ncadr: contract violation\n  expected:\
    \ (cons/c any/c pair?)\n  given: '(9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    ((null? l) #f)\n    ((null? (cdr l)) #t)\n    ((< (car l) (cadr\
    \ l)) #t)\n    (else (monotonic (cdr l)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgcracu9c.rkt:24:4

    actual:     #t

    expected:   #f

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgcracu9c.rkt:27:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (monotonic (car l)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpknujme9g.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpknujme9g.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpknujme9g.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpknujme9g.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpknujme9g.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l))\n                   (not (< (car l) (cadr l))))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp45wysp66.rkt:23:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp45wysp66.rkt:24:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp45wysp66.rkt:25:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp45wysp66.rkt:26:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp45wysp66.rkt:28:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l))\n                  (or (< car l (car l))\n        \
    \               (< car l (cadr l))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps13acccy.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmps13acccy.rkt:25:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps13acccy.rkt:26:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmps13acccy.rkt:27:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps13acccy.rkt:29:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond ((null? l) #f)\n        ((< (car l) (cadr l)) #t)\n        (else\
    \ (monotonic (cdr l)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10))\
    \ #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpao5bpt7l.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpao5bpt7l.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpao5bpt7l.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpao5bpt7l.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpao5bpt7l.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (monotonic (cdr l)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5_rn_e57.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp5_rn_e57.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5_rn_e57.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp5_rn_e57.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5_rn_e57.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l))\n                  (or (< (car l) (cadr l))\n     \
    \                  (> (car l) (cadr l))))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe_pqfb8u.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpe_pqfb8u.rkt:25:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_pqfb8u.rkt:26:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpe_pqfb8u.rkt:27:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_pqfb8u.rkt:29:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (monotonic (cdr l)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmafjhiq4.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpmafjhiq4.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmafjhiq4.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpmafjhiq4.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmafjhiq4.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond ((null? l) true)\n        ((< (car l) (cadr l)) true)\n        (else\
    \ (monotonic (cdr l)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10))\
    \ #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprohy2k5c.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmprohy2k5c.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprohy2k5c.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmprohy2k5c.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprohy2k5c.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (monotonic (cdr l)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptyc07rh3.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmptyc07rh3.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptyc07rh3.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmptyc07rh3.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptyc07rh3.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (monotonic (cdr l)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_fci3a_q.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp_fci3a_q.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_fci3a_q.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp_fci3a_q.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_fci3a_q.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (monotonic (car l)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpukrmm20u.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpukrmm20u.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpukrmm20u.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpukrmm20u.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpukrmm20u.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l))\n                  (or (< car l (car l))\n        \
    \              (< car l (cadr l))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpekcwkzx_.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpekcwkzx_.rkt:25:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpekcwkzx_.rkt:26:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpekcwkzx_.rkt:27:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpekcwkzx_.rkt:29:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (monotonic (car l)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps6pfh_9r.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmps6pfh_9r.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps6pfh_9r.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmps6pfh_9r.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps6pfh_9r.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (monotonic (car l)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgu1pokd8.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpgu1pokd8.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgu1pokd8.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpgu1pokd8.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgu1pokd8.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (monotonic (cdr l)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsag9j217.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpsag9j217.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsag9j217.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpsag9j217.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsag9j217.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [(> (car\
    \ l) (cadr l)) #f]\n        [else (monotonic (cdr l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4364kess.rkt:23:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp4364kess.rkt:24:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp4364kess.rkt:25:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp4364kess.rkt:26:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4364kess.rkt:28:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (monotonic (car l)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzkar4ep.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpzzkar4ep.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzzkar4ep.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpzzkar4ep.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzzkar4ep.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    ((< (car l) (car\
    \ (cdr l)))\n     (and (monotonic (cdr l))\n          (or (null? (cdr l))\n  \
    \            (< (car l) (car (cdr l))))))\n    (else (and (monotonic (cdr l))\n\
    \              (or (null? (cdr l))\n                  (< (car l) (car (cdr l))))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnvv50829.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnvv50829.rkt:28:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnvv50829.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnvv50829.rkt:31:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnvv50829.rkt:33:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnvv50829.rkt:34:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l))\n                   (not (< (car l) (cadr l))))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe14cz4x5.rkt:23:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpe14cz4x5.rkt:24:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe14cz4x5.rkt:25:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpe14cz4x5.rkt:26:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe14cz4x5.rkt:28:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond ((null? l) #f)\n        ((null? (cdr l)) #t)\n        (else (and\
    \ (< (car l) (car (cdr l)))\n                    (monotonic (cdr l))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpne9kr2hg.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpne9kr2hg.rkt:25:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpne9kr2hg.rkt:28:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    ((< (car l) (car\
    \ (cdr l)))\n     (and (monotonic (cdr l))\n          (or (null? (cdr l))\n  \
    \            (< (car l) (car (cdr l))))))\n    (else (and (monotonic (cdr l))\n\
    \              (or (null? (cdr l))\n                  (< (car l) (car (cdr l))))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpng7pzj9s.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpng7pzj9s.rkt:28:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpng7pzj9s.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpng7pzj9s.rkt:31:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpng7pzj9s.rkt:33:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpng7pzj9s.rkt:34:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) true]\n        [(< (car l) (cadr l)) (monotonic (cdr\
    \ l))]\n        [else false]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpskylr8ok.rkt:20:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpskylr8ok.rkt:21:4\n\ncadr: contract violation\n  expected:\
    \ (cons/c any/c pair?)\n  given: '(20)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpskylr8ok.rkt:23:4\nactual:\
    \     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpskylr8ok.rkt:24:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmpskylr8ok.rkt:26:4\n\ncadr: contract violation\n\
    \  expected: (cons/c any/c pair?)\n  given: '(60)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpskylr8ok.rkt:27:4\nactual:\
    \     #f\nexpected:   #t\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) true]\n        [(< (car l) (cadr l)) false]\n       \
    \ [else (monotonic (cdr l))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdx7ayrs5.rkt:20:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpdx7ayrs5.rkt:21:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmpdx7ayrs5.rkt:23:4\n\ncadr: contract violation\n\
    \  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdx7ayrs5.rkt:24:4\n\ncadr:\
    \ contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdx7ayrs5.rkt:26:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpdx7ayrs5.rkt:27:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(null? (cdr l)) #t]\n        [(< (car l)\
    \ (car (cdr l)))\n         (and (monotonic (cdr l))\n               (not (monotonic\
    \ (cdr l))))]\n        [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpan0_36dz.rkt:23:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpan0_36dz.rkt:24:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpan0_36dz.rkt:26:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpan0_36dz.rkt:27:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpan0_36dz.rkt:29:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpan0_36dz.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (or (not (< (car l) (cadr l)))\n                  \
    \                      (monotonic (cdr l))))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_r7h1rza.rkt:23:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp_r7h1rza.rkt:24:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_r7h1rza.rkt:25:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp_r7h1rza.rkt:26:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_r7h1rza.rkt:28:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (monotonic (car l)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpot4zbwb5.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpot4zbwb5.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpot4zbwb5.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpot4zbwb5.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpot4zbwb5.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l))\n                  (or (< (car l) (cadr l))\n     \
    \                 (< (cadr l) (car l))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp31wd3ja9.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp31wd3ja9.rkt:25:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp31wd3ja9.rkt:26:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp31wd3ja9.rkt:27:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp31wd3ja9.rkt:29:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond ((null? l) true)\n        ((< (car l) (cadr l)) true)\n        (else\
    \ (monotonic (cdr l)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10))\
    \ #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2qowfnot.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp2qowfnot.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2qowfnot.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp2qowfnot.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2qowfnot.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) true]\n        [(< (car l) (cadr l)) false]\n       \
    \ [else (monotonic (cdr l))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppk3l8mdx.rkt:20:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmppk3l8mdx.rkt:21:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmppk3l8mdx.rkt:23:4\n\ncadr: contract violation\n\
    \  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppk3l8mdx.rkt:24:4\n\ncadr:\
    \ contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppk3l8mdx.rkt:26:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmppk3l8mdx.rkt:27:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) true]\n        [(< (car l) (cadr l)) false]\n       \
    \ [else (monotonic (cdr l))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9ltr8n3v.rkt:20:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp9ltr8n3v.rkt:21:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmp9ltr8n3v.rkt:23:4\n\ncadr: contract violation\n\
    \  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9ltr8n3v.rkt:24:4\n\ncadr:\
    \ contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9ltr8n3v.rkt:26:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp9ltr8n3v.rkt:27:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (monotonic (cdr l)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7qnnom5j.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp7qnnom5j.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7qnnom5j.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp7qnnom5j.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7qnnom5j.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l))\n                   (not (< (car l) (cadr l))))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps7rom_kv.rkt:23:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmps7rom_kv.rkt:24:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps7rom_kv.rkt:25:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmps7rom_kv.rkt:26:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps7rom_kv.rkt:28:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    ((null? l) #t)\n    ((null? (cdr l)) #f)\n    ((< (car l) (car\
    \ (cdr l)))\n     (and (monotonic (cdr l))\n          (or (null? (cdr l))\n  \
    \            (and (monotonic (cdr l))\n                  (or (null? (cdr l))\n\
    \                      (and (monotonic (cdr l))\n                          (or\
    \ (null? (cdr l))\n                              (and (monotonic (cdr l))\n  \
    \                                (or (null? (cdr l))\n                       \
    \               (and (monotonic (cdr l))\n                                   \
    \       (or (null? (cdr l))\n                                              (and\
    \ (monotonic (cdr l))\n                                                  (or (null?\
    \ (cdr l))\n                                                      (and (monotonic\
    \ (cdr l))\n                                                          (or (null?\
    \ (cdr l))\n                                                              (and\
    \ (monotonic (cdr l))\n                                                      \
    \            (or (null? (cdr l))\n                                           \
    \                           (and (monotonic (cdr l))\n                       \
    \                                                   (or (null? (cdr l))\n    \
    \                                                                          (and\
    \ (monotonic (cdr l))\n                                                      \
    \                            (or (null? (cdr l))\n                           \
    \                                                           (and (monotonic (cdr\
    \ l))\n                                                                      \
    \                    (or (null? (cdr l))\n                                   \
    \                                                           (and (monotonic (cdr\
    \ l))\n                                                                      \
    \                            (or (null? (cdr l))\n                           \
    \                                                                           (and\
    \ (monotonic (cdr l))\n                                                      \
    \                                                    (or (null? (cdr l))\n   \
    \                                                                            \
    \                               (and (monotonic (cdr l))\n                   \
    \                                                                            \
    \                   (or (null? (cdr l))\n                                    \
    \                                                                            \
    \      (and (monotonic (cdr l))\n                                            \
    \                                                                            \
    \  (or (null? (cdr l))\n                                                     \
    \                                                                         (and\
    \ (monotonic (cdr l))\n                                                      \
    \                                                                            (or\
    \ (null? (cdr l))\n                                                          \
    \                                                                            (and\
    \ (monotonic (cdr l))\n                                                      \
    \                                                                            \
    \        (or (null? (cdr l))\n                                               \
    \                                                                            \
    \                                                   (and (monotonic (cdr l))\n\
    \                                                                            \
    \                                                                            \
    \                          (or (null? (cdr l))\n                             \
    \                                                                            \
    \                                                                            \
    \ (and (monotonic (cdr l))\n                                                 \
    \                                                                            \
    \                                                             (or (null? (cdr\
    \ l))\n                                                                      \
    \                                                                            \
    \                                            (and (monotonic (cdr l))\n      \
    \                                                                            \
    \                                                                            \
    \                                    (or (null? (cdr l))\n                   \
    \                                                                            \
    \                                                                            \
    \                           (and (monotonic (cdr l))\n                       \
    \                                                                            \
    \                                                                            \
    \                                                           (or (null? (cdr l))\n\
    \                                                                            \
    \                                                                            \
    \                                        \n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp6dpuz78x.rkt:56:234: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 58\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [(> (car\
    \ l) (cadr l)) #f]\n        [else (monotonic (cdr l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptf801sr2.rkt:23:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmptf801sr2.rkt:24:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmptf801sr2.rkt:25:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmptf801sr2.rkt:26:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptf801sr2.rkt:28:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [(> (car\
    \ l) (cadr l)) #f]\n        [else (monotonic (cdr l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdqhmsxmj.rkt:23:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpdqhmsxmj.rkt:24:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpdqhmsxmj.rkt:25:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpdqhmsxmj.rkt:26:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdqhmsxmj.rkt:28:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (monotonic (cdr l)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf0wc3pu5.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpf0wc3pu5.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf0wc3pu5.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpf0wc3pu5.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf0wc3pu5.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (monotonic (car l)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2b859j_4.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp2b859j_4.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2b859j_4.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp2b859j_4.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2b859j_4.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (monotonic (cdr l)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf2lftfmc.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpf2lftfmc.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf2lftfmc.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpf2lftfmc.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf2lftfmc.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (monotonic (car l)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpscbaw93h.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpscbaw93h.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpscbaw93h.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpscbaw93h.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpscbaw93h.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l))\n                  (or (< car l (car l))\n        \
    \              (< car l (cadr l))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8fhepygk.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp8fhepygk.rkt:25:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8fhepygk.rkt:26:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp8fhepygk.rkt:27:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8fhepygk.rkt:29:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(< (car l) (cadr l)) #t]\n        [else\
    \ (and (monotonic (cdr l)) (or (< car l (car l)) (< car l (cadr l))))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcl_bcn7p.rkt:22:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpcl_bcn7p.rkt:23:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(-10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcl_bcn7p.rkt:24:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(0)\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpcl_bcn7p.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcl_bcn7p.rkt:27:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    ((null? l) #f)\n    ((< (car l) (cadr l)) #t)\n    ((> (car\
    \ l) (cadr l)) #f)\n    (else (monotonic (cdr l)))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuyg4fp0f.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpuyg4fp0f.rkt:25:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpuyg4fp0f.rkt:26:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpuyg4fp0f.rkt:27:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuyg4fp0f.rkt:29:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(9)\n\
    --------------------\n"
  stdout: ''
