name: HumanEval_67_fruit_distribution
language: sh
prompt: "#!/bin/bash\n# In this task, you will be given a string that represents a\
  \ number of apples and oranges \n# that are distributed in a basket of fruit this\
  \ basket contains \n# apples, oranges, and mango fruits. Given the string that represents\
  \ the total number of \n# the oranges and apples and an integer that represent the\
  \ total number of the fruits \n# in the basket return the number of the mango fruits\
  \ in the basket.\n# for examble:\n# fruit_distribution(\"5 apples and 6 oranges\"\
  , 19) ->19 - 5 - 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\",3) -> 3\
  \ - 0 - 1 = 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2\
  \ - 3 = 95\n# fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100\
  \ - 1 = 19\n#\n# $1 is a string\n# $2 is an integer\nfruit_distribution() {\n"
tests: "}\n\ncandidate() {\n    fruit_distribution \"$@\"\n}\n\nset -e\nrun_test()\
  \ {\n    [[ $(candidate \"5 apples and 6 oranges\" \"19\") = \"8\" ]]\n    [[ $(candidate\
  \ \"5 apples and 6 oranges\" \"21\") = \"10\" ]]\n    [[ $(candidate \"0 apples\
  \ and 1 oranges\" \"3\") = \"2\" ]]\n    [[ $(candidate \"1 apples and 0 oranges\"\
  \ \"3\") = \"2\" ]]\n    [[ $(candidate \"2 apples and 3 oranges\" \"100\") = \"\
  95\" ]]\n    [[ $(candidate \"2 apples and 3 oranges\" \"5\") = \"0\" ]]\n    [[\
  \ $(candidate \"1 apples and 100 oranges\" \"120\") = \"19\" ]]\n}\n\nrun_test"
completions: ['    # write your code here', "    number_apples=\"$(echo $1 | egrep\
    \ -o '[0-9]+ apples' | grep -o '[0-9]+')\"\n    number_oranges=\"$(echo $1 | egrep\
    \ -o '[0-9]+ oranges' | grep -o '[0-9]+')\"\n    echo $2 - $number_apples - $number_oranges",
  "\t# TODO: check if $1 is a string, check if $2 is an integer\n\tstring=\"$1\"\n\
    \tnumOfFruits=\"$2\"\n\t# TODO: start writing your solution\n\t# TODO: return\
    \ the number of mango fruits in the basket\n\tIFS=' ' read -ra ARR <<< \"$string\"\
    \n\tnumOfApples=${ARR[0]}\n\tnumOfOranges=${ARR[3]}\n\ttotal=$((numOfFruits -\
    \ numOfApples - numOfOranges))\n\techo $total", "    if [[ $# -eq 2 ]]; then\n\
    \        local -i total_fruit_num=$2\n        local -i total_apple_num=$(echo\
    \ $1 | grep -Po '\\d+ apples' | cut -d ' ' -f 1)\n        local -i total_orange_num=$(echo\
    \ $1 | grep -Po '\\d+ oranges' | cut -d ' ' -f 1)\n        local -i total_mango_num=$((total_fruit_num\
    \ - total_apple_num - total_orange_num))\n        echo $total_mango_num\n    else\n\
    \        echo -1\n    fi", "    apples=${1%% apples*}\n    oranges=${1##*oranges}\n\
    \    oranges=${oranges##*and }\n    echo $2 - $apples - $oranges", '    # your
    code goes here', "    \n    # variables used to store the number of apples, oranges\
    \ and mango in the basket\n    local num_of_apple\n    local num_of_orange\n \
    \   local num_of_mango\n    \n    # variables used to store the total number of\
    \ fruits in the basket\n    local total_fruits\n    \n    # remove spaces before\
    \ and after the string\n    local apple_and_orange_string=\"$(echo $1 | sed -e\
    \ 's/^[ \\t]*//')\"\n    \n    # store the number of apples in the basket\n  \
    \  num_of_apple=\"$(echo $apple_and_orange_string | cut -d ' ' -f 1)\"\n    \n\
    \    # store the number of oranges in the basket\n    num_of_orange=\"$(echo $apple_and_orange_string\
    \ | cut -d ' ' -f 5)\"\n    \n    # store the total number of fruits in the basket\n\
    \    total_fruits=$2\n    \n    # calculate the number of mango fruits in the\
    \ basket\n    num_of_mango=$((total_fruits - num_of_apple - num_of_orange))\n\
    \    \n    # return the number of mango fruits in the basket\n    echo $num_of_mango",
  "  # add your code here\n  #remove last word\n  firsthalf=\"${1%and*}\"\n  secondhalf=\"\
    ${1#*and }\"\n  lastnum=\"${secondhalf% oranges}\"\n  one=\"${firsthalf#* }\"\n\
    \  two=\"${lastnum#* }\"\n  three=\"$((($2 - $one - $two)))\"\n  echo $three",
  "    # Write your code here...\n    # You should return the number of the mango\
    \ fruits in the basket\n    # ======================================== #\n   \
    \ echo \"check an input parameter is correct or not\"\n    if [ $# -ne 2 ]; then\n\
    \        echo \"ERR: input parameter number is $#, valid number is 2\"\n     \
    \   exit 1\n    fi\n    if [[ $1 != *\"oranges\"* ]]; then\n        echo \"ERR:\
    \ input parameter1 is $1, valid value is a string includes 'oranges'\"\n     \
    \   exit 1\n    fi\n    if [[ $2 != ?(-)+([0-9]) ]]; then\n        echo \"ERR:\
    \ input parameter2 is $2, valid value is an integer\"\n        exit 1\n    fi\n\
    \    # ======================================== #\n    echo \"Get total number\
    \ of orange and apple\"\n    ORANGE=`echo $1 | cut -d ' ' -f 5`\n    APPLE=`echo\
    \ $1 | cut -d ' ' -f 1`\n    echo $ORANGE\n    echo $APPLE\n    # ========================================\
    \ #\n    echo \"Calculate the total number of mango\"\n    MANGO=`expr $2 - $ORANGE\
    \ - $APPLE`\n    echo $MANGO\n    # ======================================== #\n\
    \    return $MANGO", "\t#create an array of words and an empty array to hold the\
    \ numbers\n\tIFS=' ' read -ra words <<< \"$1\"\n\tdeclare -a numbers\n\t#iterate\
    \ over the list of words and add any number found to the numbers array\n\tfor\
    \ i in \"${words[@]}\"; do\n\t\tif [[ $i =~ ^[0-9]+$ ]]; then\n\t\t\tnumbers+=(\"\
    $i\")\n\t\tfi\n\tdone\n\t#check if the amount of numbers in the numbers array\
    \ equals 2\n\tif [ ${#numbers[@]} == 2 ]; then\n\t\t#convert all numbers in the\
    \ numbers array to integers and calculate the remaining number of mango fruits\n\
    \t\t#if the number of mango fruits is not below 0 return it as an integer\n\t\t\
    if [ $(expr $2 - ${numbers[0]} - ${numbers[1]}) -ge 0 ]; then\n\t\t\techo $(expr\
    \ $2 - ${numbers[0]} - ${numbers[1]})\n\t\telse\n\t\t\techo \"${numbers[0]} and\
    \ ${numbers[1]} cannot be higher than the total amount of fruits\"\n\t\tfi\n\t\
    #if the amount of numbers in the numbers array is not equal to 2 print an error\
    \ message\n\telse\n\t\techo \"The string does not contain valid numbers\"\n\t\
    fi", "\techo \"$2 - $(echo $1 | tr -cd '[0-9]')\" | bc", "\tlocal -i apples=0\n\
    \tlocal -i oranges=0\n\tlocal -i mangoes=0\n\tlocal -i total_fruits=0\n\tlocal\
    \ -i string_length=$((${#1} - 1))\n\tlocal -i number_length=0\n\tlocal -i i=0\n\
    \tlocal number_string=''\n\tlocal -i j=0\n\t\n\tfor (( i=0; i<=string_length;\
    \ i++ ))\n\tdo\n\t\t\n\t\tif [[ ${1:$i:1} == [[:digit:]] ]]\n\t\tthen\n\t\t\t\
    while [[ ${1:$i:1} == [[:digit:]] ]]\n\t\t\tdo\n\t\t\t\tnumber_string=\"$number_string${1:$i:1}\"\
    \n\t\t\t\t((++i))\n\t\t\tdone\n\t\t\t((--i))\n\t\tfi\n\t\t\n\t\tif [[ ${1:$i:6}\
    \ == ' apples' ]]\n\t\tthen\n\t\t\tapples=$number_string\n\t\t\tnumber_string=''\n\
    \t\tfi\n\t\t\n\t\tif [[ ${1:$i:8} == ' oranges' ]]\n\t\tthen\n\t\t\toranges=$number_string\n\
    \t\t\tnumber_string=''\n\t\tfi\n\tdone\n\t\n\t((total_fruits=$2-$apples-$oranges))\n\
    \t\n\techo $total_fruits", "    # your code here\n    echo $2-$(echo $1 | sed\
    \ -e 's/[^0-9]/ /g' | awk '{sum += $1} END {print sum}')", '', "  echo -n \"Enter\
    \ the string: \"\n  read str\n  echo -n \"Enter the total amount of fruits: \"\
    \n  read num\n  local apples=`echo $str | awk '{print $1}'`\n  local oranges=`echo\
    \ $str | awk '{print $4}'`\n  echo $((num - apples - oranges))", '    # WRITE
    YOUR CODE HERE', "    #your solution is here\n    # you can use echo", "    #\
    \ your code here \n    apples_count=$( echo $1 | grep -o -E '[[:digit:]]+ apples'\
    \ | grep -o -E '[[:digit:]]+' )\n    oranges_count=$( echo $1 | grep -o -E '[[:digit:]]+\
    \ oranges' | grep -o -E '[[:digit:]]+' )\n    echo $(( $2 - $apples_count - $oranges_count\
    \ ))", "  # Write your solution here\n  #\n  # For example:\n  #\n  # echo 'Hello,\
    \ World!'\n  ", "  if [ $# -ne 2 ]; then\n    echo \"Usage: $0 'string' integer\"\
    \n    exit 1\n  fi\n  local num_apples=`echo $1 | grep -Po '\\d+\\s+apples' |\
    \ grep -Po '\\d+'`\n  local num_oranges=`echo $1 | grep -Po '\\d+\\s+oranges'\
    \ | grep -Po '\\d+'`\n  let \"result=$2 - $num_apples - $num_oranges\"\n  echo\
    \ $result"]
stop_tokens:
- "\n}"
