name: HumanEval_88_sort_array
language: sh
prompt: "#!/bin/bash\n# Given an array of non-negative integers, return a copy of\
  \ the given array after sorting,\n# you will sort the given array in ascending order\
  \ if the sum( first index value, last index value) is odd,\n# or sort it in descending\
  \ order if the sum( first index value, last index value) is even.\n# Note:\n# *\
  \ don't change the given array.\n# Examples:\n# * sort_array([]) => []\n# * sort_array([5])\
  \ => [5]\n# * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n# * sort_array([2,\
  \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n#\n# $1 is a space-separated list\n\
  sort_array() {\n"
tests: "}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n   \
  \ [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
  \ \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") =\
  \ \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
  \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23\
  \ 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
completions: ["  echo $1 | tr \" \" \"\\n\" |\n  sort -t\" \" -nr |\n  tr \"\\n\"\
    \ \" \"", "  local IFS=\" \"\n  local result=($1)\n  local n=$((${#result[@]}-1))\n\
    \  local odd=0\n  local tmp\n  (( $(( ${result[0]} + ${result[n]} )) % 2 )) &&\
    \ odd=1\n  for (( i=0; i<$((n/2)); i++ )); do\n    tmp=${result[i]}\n    result[i]=${result[n-i]}\n\
    \    result[n-i]=$tmp\n  done\n  (( odd )) && IFS=\",\" && echo \"${result[*]}\"\
    \ || IFS=\",\" && echo \"${result[*]}\" | rev", "  [ $# -lt 1 ] && echo \"Usage:\
    \ $0 <space-separated list>\" && return 1\n  declare -a lst=( $1 )\n  declare\
    \ -a lst2=()\n  declare -i i=0\n  declare -i is_odd=0\n  declare -i lst_l=${#lst[@]}\n\
    \  if [ $lst_l -eq 1 ]; then\n    echo ${lst[0]}\n    return 0\n  fi\n  # is odd\n\
    \  [[ $(( (${lst[0]} + ${lst[-1]}) % 2 )) -eq 1 ]] && is_odd=1 || is_odd=0\n \
    \ for i in $(seq 0 $(($lst_l - 1))); do\n    if [ $is_odd -eq 1 ]; then\n    \
    \  lst2[$i]=${lst[$(($lst_l - 1 - $i))]}\n    else\n      lst2[$i]=${lst[$i]}\n\
    \    fi\n  done\n  echo ${lst2[@]}", "    local sorted=()\n\n    if [ $# -eq 0\
    \ ]; then\n        echo \"No arguments provided\"\n        return 1\n    fi\n\n\
    \    local arr=( $@ )\n    local sum=$(( arr[0] + arr[-1] ))\n\n    if [ $(( sum\
    \ % 2 )) -eq 0 ]; then\n        sorted=( $(printf \"%s\\n\" \"${arr[@]}\" | sort\
    \ -nr) )\n    else\n        sorted=( $(printf \"%s\\n\" \"${arr[@]}\" | sort -n)\
    \ )\n    fi\n\n    printf \"%s \" \"${sorted[@]}\"", "    local -a array=()\n\
    \    local -i i=0\n    local -i j=0\n    local -i n=0\n    local -i s=0\n    local\
    \ -i t=0\n    local -i o=0\n    local -i q=0\n    local -i r=0\n    local -i a=0\n\
    \    local -i p=0\n    # Read the space-separated list and build the array\n \
    \   for n in $1; do\n        array+=( $n )\n    done\n    # loop through the array\n\
    \    for (( i=0; i<${#array[@]}; i++ )); do\n        for (( j=0; j<${#array[@]}-1;\
    \ j++ )); do\n            p=$(($j+1))\n            # If the sum of the first element\
    \ is odd, sort in ascending order\n            if [[ $(( array[$j] + array[$p]\
    \ ))%2 -ne 0 ]]; then\n                [[ $array[$j] -gt $array[$p] ]] && t=${array[$j]}\
    \ && array[$j]=${array[$p]} && array[$p]=$t\n            # If the sum of the first\
    \ element is even, sort in descending order\n            else\n              \
    \  [[ $array[$j] -lt $array[$p] ]] && t=${array[$j]} && array[$j]=${array[$p]}\
    \ && array[$p]=$t\n            fi\n        done\n    done\n    echo ${array[@]}",
  "    IFS=' ' read -ra ARR <<< \"$1\"\n    if (( (${ARR[0]} + ${ARR[-1]}) % 2 ==\
    \ 0 )); then\n        printf '%s\\n' \"${ARR[@]}\" | sort -r\n    else\n     \
    \   printf '%s\\n' \"${ARR[@]}\" | sort\n    fi", "    local -a array=($1)\n \
    \   local sum=0\n    local len=${#array[@]}\n    local i=0\n    while [ $i -lt\
    \ $len ]; do\n        sum=$(($sum + ${array[$i]}))\n        i=$(($i + 1))\n  \
    \  done\n    if [ $(($sum % 2)) -eq 0 ]; then\n        echo \"${array[@]}\" |\
    \ tr ' ' '\\n' | sort -nr | tr '\\n' ' '\n    else\n        echo \"${array[@]}\"\
    \ | tr ' ' '\\n' | sort -n | tr '\\n' ' '\n    fi", "  if [[ $1 == \"\" ]]; then\n\
    \    echo \"\"\n  else\n    local array=()\n    # convert string to array using\
    \ space as delimiter\n    IFS=' ' read -r -a array <<< \"$1\"\n    local last=${#array[@]}\n\
    \    local odd=0\n    let odd=${array[0]}+${array[$last-1]}\n    if (( odd % 2\
    \ )); then\n      # odd\n      echo $(printf '%s\\n' \"${array[@]}\" | sort -n\
    \ )\n    else\n      # even\n      echo $(printf '%s\\n' \"${array[@]}\" | sort\
    \ -nr )\n    fi\n  fi", "    local arr=($1)\n    local tmp\n    local i\n\n  \
    \  # first index value plus last index value\n    if [[ $((${arr[0]} + ${arr[$((${#arr[@]}\
    \ - 1))]})) -gt 0 ]]; then\n        # sum is odd, sort in ascending order\n  \
    \      for ((i = 0; i < ${#arr[@]}; i++)); do\n            for ((j = ${i}; j <\
    \ ${#arr[@]}; j++)); do\n                if [[ ${arr[$i]} -gt ${arr[$j]} ]]; then\n\
    \                    tmp=${arr[$i]}\n                    arr[$i]=${arr[$j]}\n\
    \                    arr[$j]=$tmp\n                fi\n            done\n    \
    \    done\n    else\n        # sum is even, sort in descending order\n       \
    \ for ((i = 0; i < ${#arr[@]}; i++)); do\n            for ((j = ${i}; j < ${#arr[@]};\
    \ j++)); do\n                if [[ ${arr[$i]} -lt ${arr[$j]} ]]; then\n      \
    \              tmp=${arr[$i]}\n                    arr[$i]=${arr[$j]}\n      \
    \              arr[$j]=$tmp\n                fi\n            done\n        done\n\
    \    fi\n\n    echo ${arr[@]}", "    local -a r\n    local -a p=$(IFS=' '; echo\
    \ \"$*\")\n    for ((i=0; i<${#p[@]}; i++)); do\n        r[i]=${p[$i]}\n    done\n\
    \    local l=$(( ${#r[@]} - 1 ))\n    if (( (${r[0]} + ${r[$l]}) % 2 == 0 ));\
    \ then\n        echo $(IFS=' '; echo \"${r[@]}\")\n    else\n        for ((i=0;\
    \ i<${#r[@]}; i++)); do\n            local -i j=$(( $i + 1 ))\n            local\
    \ -i k=$(( ${#r[@]} - $i - 1 ))\n            local -i m=$(( ${#r[@]} - $i - 2\
    \ ))\n            while (( j < ${#r[@]} )); do\n                if (( ${r[$i]}\
    \ > ${r[$j]} )); then\n                    local -i t=${r[$i]}\n             \
    \       r[$i]=${r[$j]}\n                    r[$j]=$t\n                fi\n   \
    \             j=$(( $j + 1 ))\n            done\n            while (( k > $i ));\
    \ do\n                if (( ${r[$k]} > ${r[$m]} )); then\n                   \
    \ local -i t=${r[$k]}\n                    r[$k]=${r[$m]}\n                  \
    \  r[$m]=$t\n                fi\n                k=$(( $k - 1 ))\n           \
    \     m=$(( $m - 1 ))\n            done\n        done\n        echo $(IFS=' ';\
    \ echo \"${r[@]}\")\n    fi", "    [ $# -lt 1 ] && return\n    local -n arr=$1\n\
    \    local -i a=$((${arr[0]} + ${arr[-1]}))\n    [ $((a % 2)) -eq 0 ] && {\n \
    \       sorted=($(sort -r <<< \"${arr[*]}\"))\n    } || {\n        sorted=($(sort\
    \ <<< \"${arr[*]}\"))\n    }\n    echo \"${sorted[*]}\"", "  local -a arr=(${1//[^0-9\
    \ ]/})\n  (( ${#arr[@]} <= 1 )) && echo \"$1\" && return 0\n  local -a even=()\
    \ odd=()\n  for (( i=0; i<${#arr[@]}; i++ )); do\n    (( arr[i] % 2 == 0 )) &&\
    \ even+=(\"${arr[i]}\") || odd+=(\"${arr[i]}\")\n  done\n  (( (${#even[@]} + ${#odd[@]})\
    \ % 2 == 0 )) && {\n    echo -n \"${even[@]}\"\n    echo -n \" \"\n    echo -n\
    \ \"${odd[@]}\" | tac\n  } || {\n    echo -n \"${odd[@]}\"\n    echo -n \" \"\n\
    \    echo -n \"${even[@]}\" | tac\n  }", "    local -n array=$1\n    # array.sort()\
    \ {\n    #   for (( i = 0; i < ${#array[@]} - 1; i++ )); do\n    #     for ((\
    \ j = i + 1; j < ${#array[@]}; j++ )); do\n    #       if (( $(( (i + j) % 2 ))\
    \ && (( ${array[i]} > ${array[j]} )) ||\n    #              !($(( (i + j) % 2\
    \ )) && (( ${array[i]} < ${array[j]} ))) )); then\n    #         tmp=${array[i]}\n\
    \    #         array[i]=${array[j]}\n    #         array[j]=$tmp\n    #      \
    \ fi\n    #     done\n    #   done\n    # }\n    tmp=()\n    for (( i = 0; i <\
    \ ${#array[@]}; i++ )); do\n        if (( $(( (i + ${#array[@]} - 1) % 2 )) ));\
    \ then\n            tmp+=( ${array[${#array[@]} - 1 - i]} )\n        else\n  \
    \          tmp+=( ${array[i]} )\n        fi\n    done\n    array=( ${tmp[@]} )",
  "  input=(\"$@\")\n  # echo \"input: $@\"\n  # echo \"type: ${!input[@]}\"\n  #\
    \ echo \"value: ${input[@]}\"\n  # echo \"length: ${#input[@]}\"\n  # echo \"\
    sum: $(( ${input[0]} + ${input[$(( ${#input[@]} - 1 ))]} ))\"\n  if [[ $(( ${input[0]}\
    \ + ${input[$(( ${#input[@]} - 1 ))]} ))%2 -eq 0 ]]; then\n    desc=true\n  else\n\
    \    desc=false\n  fi\n  # echo \"sort: $desc\"\n  IFS=$'\\n' sorted=($(sort <<<\"\
    ${input[*]}\"))\n  if $desc; then\n    echo \"${sorted[*]}\"\n  else\n    echo\
    \ \"${sorted[*]}\" | tac\n  fi", "  local -n _array=\"$1\"\n  local _n=${#_array[@]}\n\
    \  local -a _work=()\n  local -i _sum=0\n  local -i _i=0\n  for _i in $(seq 0\
    \ $(($_n - 1))); do\n    _sum=$((_sum + _array[_i]))\n  done\n  if ((_sum % 2));\
    \ then\n    printf \"%s\\n\" \"${_array[@]}\" | sort -n | tr '\\n' ' '\n  else\n\
    \    printf \"%s\\n\" \"${_array[@]}\" | sort -nr | tr '\\n' ' '\n  fi", "   \
    \ local -a numbers\n    local -i i\n    numbers=($1)\n    if ((numbers[0] + numbers[-1]))\
    \ & 1; then\n        echo ${numbers[@]} | tr ' ' '\\n' | sort\n    else\n    \
    \    echo ${numbers[@]} | tr ' ' '\\n' | sort -r\n    fi", "    local -r a=($1)\
    \ # create an array\n    local -i b # sum of first and last elements\n    local\
    \ -i n=${#a[@]} # length of the array\n    local -i i=0 # index\n    local -i\
    \ j=0 # index\n\n    if ((n<2)); then # if array has less than 2 elements\n  \
    \      # just return itself\n        echo ${a[@]}\n        return\n    fi\n\n\
    \    # get sum of the first and last elements\n    b=$((a[0]+a[n-1]))\n\n    if\
    \ ((b%2==0)); then # if the sum is even\n        # sort the array in descending\
    \ order\n        for ((i=0; i<n-1; i++)); do\n            for ((j=i+1; j<n; j++));\
    \ do\n                if ((a[i]<a[j])); then\n                    # swap values\n\
    \                    a[i]=$((a[i]+a[j]))\n                    a[j]=$((a[i]-a[j]))\n\
    \                    a[i]=$((a[i]-a[j]))\n                fi\n            done\n\
    \        done\n    else # if the sum is odd\n        # sort the array in ascending\
    \ order\n        for ((i=0; i<n-1; i++)); do\n            for ((j=i+1; j<n; j++));\
    \ do\n                if ((a[i]>a[j])); then\n                    # swap values\n\
    \                    a[i]=$((a[i]+a[j]))\n                    a[j]=$((a[i]-a[j]))\n\
    \                    a[i]=$((a[i]-a[j]))\n                fi\n            done\n\
    \        done\n    fi\n\n    # output array elements\n    echo ${a[@]}", "  declare\
    \ -a arr=($1)\n  len=${#arr[@]}\n  even=$(( (${arr[0]} + ${arr[-1]}) % 2 ))\n\
    \  if [ $even -eq 0 ]; then\n    IFS=$'\\n' sorted=($(sort -r <<<\"${arr[*]}\"\
    ))\n  else\n    IFS=$'\\n' sorted=($(sort <<<\"${arr[*]}\"))\n  fi\n  echo \"\
    ${sorted[*]}\"", "  local -a ar=(${1// / })\n  local -a arr\n\n  (( (${ar[0]}\
    \ + ${ar[-1]}) % 2 )) && {\n    for ((i = 0; i < ${#ar[@]}; i++)); do\n      arr[i]=${ar[$i]}\n\
    \    done\n    echo \"${arr[@]}\" | tr ' ' '\\n' | sort -r\n  } || {\n    for\
    \ ((i = 0; i < ${#ar[@]}; i++)); do\n      arr[i]=${ar[$i]}\n    done\n    echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n\n  }", "    test_string=\"$1\"\n    length=$(echo\
    \ \"$1\" | wc -w)\n    #echo \"length is $length\"\n    if [ $length -eq 0 ];\
    \ then\n        echo \"\"\n    elif [ $length -eq 1 ]; then\n        echo \"$1\"\
    \n    else\n        # get first element\n        first_element=$(echo \"$1\" |\
    \ awk '{print $1}')\n        #echo \"first element is $first_element\"\n     \
    \   # remove first element\n        test_string=$(echo \"$1\" | sed 's/[^ ]* //')\n\
    \        # get last element\n        last_element=$(echo \"$test_string\" | awk\
    \ '{print $NF}')\n        #echo \"last element is $last_element\"\n        # remove\
    \ last element\n        test_string=$(echo \"$test_string\" | sed 's/ [^ ]*$//')\n\
    \        #echo \"test_string is $test_string\"\n        # sort array\n       \
    \ if [ $(($first_element + $last_element)) -eq 0 ]; then\n            answer=$(sort_array\
    \ \"$test_string\")\n            echo \"$answer\"\n        elif [ $(($first_element\
    \ + $last_element)) -eq 1 ]; then\n            answer=$(sort_array \"$test_string\"\
    )\n            echo \"$answer\"\n        elif [ $(($first_element + $last_element))\
    \ -eq 2 ]; then\n            answer=$(sort_array \"$test_string\")\n         \
    \   echo \"$answer\"\n        elif [ $(($first_element + $last_element)) -eq 3\
    \ ]; then\n            answer=$(sort_array \"$test_string\")\n            echo\
    \ \"$answer\"\n        elif [ $(($first_element + $last_element)) -eq 4 ]; then\n\
    \            answer=$(sort_array \"$test_string\")\n            echo \"$answer\"\
    \n        elif [ $(($first_element + $last_element)) -eq 5 ]; then\n         \
    \   answer=$(sort_array \"$test_string\")\n            echo \"$answer\"\n    \
    \    elif [ $(($first_element + $last_element)) -eq 6 ]; then\n            answer=$(sort_array\
    \ \"$test_string\")\n            echo \"$answer\"\n        el"]
stop_tokens:
- "\n}"
