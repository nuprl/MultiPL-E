language: sh
name: HumanEval_56_correct_bracketing
results:
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"\
    <\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\n#\n# $1 is a string\n\
    correct_bracketing() {\n  local brackets=$1\n  local num_open=0\n  local num_close=0\n\
    \  local length=${#brackets}\n  local i\n  for ((i=0; i<length; i++)); do\n  \
    \  local character=${brackets:$i:1}\n    if [[ $character == \"<\" ]]; then\n\
    \      ((num_open++))\n    elif [[ $character == \">\" ]]; then\n      ((num_close++))\n\
    \    fi\n  done\n  ((num_open == num_close))\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020409
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"\
    <\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\n#\n# $1 is a string\n\
    correct_bracketing() {\n  # count of \"<\"\n  local l\n  # count of \">\"\n  local\
    \ r\n  # initialize l and r\n  l=0\n  r=0\n  # loop throuth every character in\
    \ $1\n  for (( i=0; i<${#1}; i++ )); do\n    if [[ ${1:$i:1} == \"<\" ]]; then\n\
    \      (( l++ ))\n    elif [[ ${1:$i:1} == \">\" ]]; then\n      (( r++ ))\n \
    \   fi\n  done\n  if [[ $l == $r ]]; then\n    echo \"True\"\n  else\n    echo\
    \ \"False\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020409
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"\
    <\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\n#\n# $1 is a string\n\
    correct_bracketing() {\n    if [ \"${1:0:1}\" = \">\" ]\n    then\n        echo\
    \ \"False\"\n        return\n    fi\n    if [ \"${1: -1}\" = \"<\" ]\n    then\n\
    \        echo \"False\"\n        return\n    fi\n    if [ \"${1/><}\" = \"$1\"\
    \ ]\n    then\n        echo \"True\"\n        return\n    fi\n    correct_bracketing\
    \ \"${1/><}\"\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"\
    <<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020409
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"\
    <\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\n#\n# $1 is a string\n\
    correct_bracketing() {\n    local brackets=$1\n    local counter=0\n    local\
    \ char=\"\"\n    for (( i=0; i<${#brackets}; i++ )); do\n        char=${brackets:$i:1}\n\
    \        if [[ $char == \"<\" ]]; then\n            counter=$((counter+1))\n \
    \       elif [[ $char == \">\" ]]; then\n            counter=$((counter-1))\n\
    \        fi\n        if [[ $counter -lt 0 ]]; then\n            break\n      \
    \  fi\n    done\n    if [[ $counter -eq 0 ]]; then\n        echo \"True\"\n  \
    \  else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020409
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"\
    <\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\n#\n# $1 is a string\n\
    correct_bracketing() {\n    local stack=\"\"\n    for (( i=0; i<${#1}; i++ ));\
    \ do\n        local char=${1:$i:1}\n        if [[ \"$char\" == \"<\" ]]; then\n\
    \            stack=\"${stack}${char}\"\n        elif [[ \"$char\" == \">\" ]];\
    \ then\n            if [[ -z \"$stack\" ]]; then\n                echo \"False\"\
    \n                return\n            fi\n            stack=${stack%?}\n     \
    \   fi\n    done\n    if [[ -z \"$stack\" ]]; then\n        echo \"True\"\n  \
    \  else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020409
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"\
    <\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\n#\n# $1 is a string\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local pattern='[<>]'\n\
    \    for((i=0;i<${#brackets};i++)); do\n        [[ \"${brackets:$i:1}\" =~ $pattern\
    \ ]] || return 1\n    done\n    local index=0\n    for((i=0;i<${#brackets};i++));\
    \ do\n        if [[ \"${brackets:$i:1}\" == '<' ]]; then\n            ((index++))\n\
    \        else\n            ((index--))\n        fi\n        if [[ $index -lt 0\
    \ ]]; then\n            return 1\n        fi\n    done\n    [[ $index -eq 0 ]]\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020409
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"\
    <\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\n#\n# $1 is a string\n\
    correct_bracketing() {\n    local brackets=$1\n    if [ \"${brackets}\" == \"\
    >\" ]; then\n        echo False\n        return\n    fi\n    if [ \"${brackets}\"\
    \ == \"<>\" ]; then\n        echo True\n        return\n    fi\n    local counter=0\n\
    \    for (( i=0; i<${#brackets}; i++ )); do\n        if [ \"${brackets:i:1}\"\
    \ == \"<\" ]; then\n            (( counter++ ))\n        elif [ \"${brackets:i:1}\"\
    \ == \">\" ]; then\n            (( counter-- ))\n        fi\n        if [ \"${counter}\"\
    \ -lt 0 ]; then\n            echo False\n            return\n        fi\n    done\n\
    \    if [ \"${counter}\" -eq 0 ]; then\n        echo True\n    else\n        echo\
    \ False\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"\
    <<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020409
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"\
    <\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\n#\n# $1 is a string\n\
    correct_bracketing() {\n  local brackets=$1\n  if [[ \"$brackets\" == \"<\"*\"\
    >>\"* ]]; then\n    local end=${brackets##*>}\n    if [[ \"$end\" == \">>\"* ]];\
    \ then\n      return 1\n    else\n      return 0\n    fi\n  elif [[ \"$brackets\"\
    \ == \">\"*\"<\"* ]]; then\n    local start=${brackets%%<*}\n    if [[ \"$start\"\
    \ == \">\"* ]]; then\n      return 1\n    else\n      return 0\n    fi\n  else\n\
    \    return 1\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020409
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"\
    <\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\n#\n# $1 is a string\n\
    correct_bracketing() {\n    local brackets=$1\n    if [ \"${brackets//[<>]/}\"\
    \ ]; then\n        return 1\n    fi\n    local count=$(echo \"$brackets\" | sed\
    \ 's/[^<]//g' | wc -c)\n    local count_opposite=$(echo \"$brackets\" | sed 's/[^>]//g'\
    \ | wc -c)\n    if [ $count -ne $count_opposite ]; then\n        return 1\n  \
    \  fi\n    return 0\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020409
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"\
    <\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\n#\n# $1 is a string\n\
    correct_bracketing() {\n    local count=0\n    local brackets=$1\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        if [[ ${brackets:$i:1} == \"<\" ]]; then\n\
    \            ((count++))\n        elif [[ ${brackets:$i:1} == \">\" ]]; then\n\
    \            ((count--))\n        fi\n        if [[ $count -lt 0 ]]; then\n  \
    \          return 1\n        fi\n    done\n    if [[ $count -eq 0 ]]; then\n \
    \       return 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020409
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"\
    <\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\n#\n# $1 is a string\n\
    correct_bracketing() {\n  local stack=\"\"\n  local result=1\n\n  for i in `seq\
    \ 0 $((${#1} - 1))`; do\n    if [ \"${1:$i:1}\" == \"<\" ]; then\n      stack=\"\
    ${stack}<\"\n    elif [ \"${1:$i:1}\" == \">\" ]; then\n      if [ \"${#stack}\"\
    \ -eq 0 ]; then\n        result=0\n        break\n      else\n        stack=\"\
    ${stack:0:$((${#stack} - 1))}\"\n      fi\n    fi\n  done\n\n  if [ \"${#stack}\"\
    \ -gt 0 ]; then\n    result=0\n  fi\n\n  echo $result\n}\n\ncandidate() {\n  \
    \  correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020409
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"\
    <\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\n#\n# $1 is a string\n\
    correct_bracketing() {\n    # use a counter to keep track of all pairs.\n    count=0\n\
    \    # iterate over the string\n    for (( i=0; i<${#1}; i++ )); do\n        #\
    \ count opening bracket\n        if [[ ${1:$i:1} == \"<\" ]]; then\n         \
    \   (( count++ ))\n        # count closing bracket\n        elif [[ ${1:$i:1}\
    \ == \">\" ]]; then\n            (( count-- ))\n        fi\n        # if count\
    \ goes negative,\n        # that means we have more closing brackets than opening\
    \ ones.\n        if [[ $count -lt 0 ]]; then\n            echo \"False\"\n   \
    \         return\n        fi\n    done\n    # check the final count.\n    # If\
    \ it is 0, we have the same number of opening and closing brackets.\n    # Otherwise,\
    \ it is not correct bracketing.\n    if [[ $count -eq 0 ]]; then\n        echo\
    \ \"True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020409
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"\
    <\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\n#\n# $1 is a string\n\
    correct_bracketing() {\n\tif [ -z \"$1\" ]; then\n\t\techo \"False\"\n\t\treturn\n\
    \tfi\n\tbracket_stack=\"\"\n\tfor (( i=0; i<${#1}; i++ )); do\n\t\tc=${1:$i:1}\n\
    \t\tif [ \"$c\" == \"<\" ]; then\n\t\t\tbracket_stack=\"$bracket_stack$c\"\n\t\
    \telse\n\t\t\tif [ -z \"$bracket_stack\" ]; then\n\t\t\t\techo \"False\"\n\t\t\
    \t\treturn\n\t\t\tfi\n\t\t\tbracket_stack=${bracket_stack%?}\n\t\tfi\n\tdone\n\
    \tif [ -z \"$bracket_stack\" ]; then\n\t\techo \"True\"\n\telse\n\t\techo \"False\"\
    \n\tfi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020409
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"\
    <\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\n#\n# $1 is a string\n\
    correct_bracketing() {\n    echo $1 | grep -E -q \"^<*>>*$\"\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020409
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"\
    <\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\n#\n# $1 is a string\n\
    correct_bracketing() {\n  # TODO: write code that returns True if the input string\
    \ has no unmatched brackets.\n  # A bracket is \"matched\" if the number of opening\
    \ brackets is equal to the number of closing brackets.\n  declare -i left_count=0\n\
    \  declare -i right_count=0\n  # or ($1 | grep -i \"<\")\n  left_count=$(echo\
    \ $1 | tr -dc \"<\" | wc -c)\n  right_count=$(echo $1 | tr -dc \">\" | wc -c)\n\
    \  echo left=$left_count right=$right_count\n  if [ $left_count -eq $right_count\
    \ ]; then\n    return 0\n  else\n    return 1\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020409
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"\
    <\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\n#\n# $1 is a string\n\
    correct_bracketing() {\n    local input=\"$1\"\n    local open=0\n    local close=0\n\
    \    for (( i=0; i<${#input}; i++ )); do\n        local ch=${input:$i:1}\n   \
    \     if [[ $ch == \"<\" ]]; then\n            open=$(( open + 1 ))\n        elif\
    \ [[ $ch == \">\" ]]; then\n            close=$(( close + 1 ))\n        fi\n \
    \       if [[ $close -gt $open ]]; then\n            echo \"False\"\n        \
    \    return\n        fi\n    done\n    if [[ $open -eq $close ]]; then\n     \
    \   echo \"True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020409
- exit_code: 2
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"\
    <\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\n#\n# $1 is a string\n\
    correct_bracketing() {\n    [[ ! $1 =~ <[^>]*> ]] && return 0\n    return 1\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp91a_cht3.sh: line 15: syntax error in conditional expression: unexpected
    token `<''

    /tmp/tmp91a_cht3.sh: line 15: syntax error near `<[''

    /tmp/tmp91a_cht3.sh: line 15: `    [[ ! $1 =~ <[^>]*> ]] && return 0''

    '
  stdout: ''
  timestamp: 1660020409
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"\
    <\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\n#\n# $1 is a string\n\
    correct_bracketing() {\n  for (( i=0; i<${#1}; i++ )); do\n    [[ ${1:i:1} ==\
    \ \"<\" ]] && (( open++ ))\n    [[ ${1:i:1} == \">\" ]] && (( close++ ))\n   \
    \ [[ $open -lt $close ]] && return 1\n  done\n  [[ $open -eq $close ]] && return\
    \ 0\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020409
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"\
    <\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\n#\n# $1 is a string\n\
    correct_bracketing() {\n  # put the string into an array by splitting the string\
    \ on\n  # an empty string.\n  IFS= read -ra x <<< \"$1\"\n  len=${#x[@]}\n  if\
    \ [ $len -eq 0 ]; then\n    echo \"False\"\n    return\n  fi\n  # if there is\
    \ an odd number of elements then return false.\n  if [ $((len%2)) -eq 1 ]; then\n\
    \    echo \"False\"\n    return\n  fi\n  # create a list of integers from 0 to\
    \ len-1\n  local -a list=()\n  for (( i=0; i<len; i++ )); do\n    list[$i]=$i\n\
    \  done\n  # iterate through the list\n  for i in \"${list[@]}\"; do\n    # if\
    \ the opening bracket is at an even index\n    if [ $((i%2)) -eq 0 ]; then\n \
    \     # if the index is an opening bracket\n      if [ \"${x[$i]}\" = \"<\" ];\
    \ then\n        # search for a matching closing bracket\n        j=$((i+1))\n\
    \        while [ \"${x[$j]}\" != \">\" ]; do\n          j=$((j+1))\n        done\n\
    \        # found a matching closing bracket.\n        # swap the opening bracket\
    \ with the closing bracket.\n        tmp=${x[$i]}\n        x[$i]=${x[$j]}\n  \
    \      x[$j]=$tmp\n      else\n        # found a closing bracket at an even index.\n\
    \        # return false\n        echo \"False\"\n        return\n      fi\n  \
    \  fi\n  done\n  # if every element is \">\" then return true\n  if [ \"${x[*]}\"\
    \ = \">\" ]; then\n    echo \"True\"\n  else\n    echo \"False\"\n  fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"\
    <><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020409
- exit_code: 2
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"\
    <\")\n# False\n# >>> correct_bracketing(\"<>\")\n# True\n# >>> correct_bracketing(\"\
    <<><>>\")\n# True\n# >>> correct_bracketing(\"><<>\")\n# False\n#\n# $1 is a string\n\
    correct_bracketing() {\n    local brackets=$1\n    if [[ ! $brackets =~ ^[<>]+$\
    \ ]]; then\n        return 1\n    fi\n    local len=${#brackets}\n    local left_cnt=0\n\
    \    local right_cnt=0\n    for ((i=0; i<len; i++)); do\n        if [[ ${brackets:$i:1}\
    \ == \"<\" ]]; then\n            left_cnt=$((left_cnt+1))\n        else\n    \
    \        right_cnt=$((right_cnt+1))\n        fi\n        if [[ $left_cnt -lt $right_cnt\
    \ ]]; then\n            return 1\n        fi\n    done\n    if [[ $left_cnt -eq\
    \ $right_cnt ]]; then\n        return 0\n    else\n        return 1\n    fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnlvdm7rt.sh: line 16: syntax error in conditional expression: unexpected
    token `<>''

    /tmp/tmpnlvdm7rt.sh: line 16: syntax error near `^[<>]''

    /tmp/tmpnlvdm7rt.sh: line 16: `    if [[ ! $brackets =~ ^[<>]+$ ]]; then''

    '
  stdout: ''
  timestamp: 1660020409
