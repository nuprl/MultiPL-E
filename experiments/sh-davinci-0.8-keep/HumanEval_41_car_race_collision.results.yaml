language: sh
name: HumanEval_41_car_race_collision
results:
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    if [[ $1 =~ ^-?[0-9]+$ ]]; then\n  \
    \      # code\n        echo $(( $1 * ($1 - 1) / 2 ))\n    else\n        echo \"\
    You must enter an integer\"\n    fi\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020371
- exit_code: 2
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    # this answer is wrong\n    # echo \"\
    $(( $1*($1+1)/2 ))\"\n    # However, the correct solution is\n    # $1*($1-1)/2\n\
    \    # why?  because the two sets of cars start out being very far from each other,\n\
    \    # that is, they start out infinitely far from each other.  That means, when\n\
    \    # you start a car going left-to-right at position $i, it takes a finite amount\n\
    \    # of time before it hits a car going right-to-left at position $i.  This\
    \ means\n    # that, as long as there's a car going right-to-left at position\
    \ $i, there can\n    # only be one car going left-to-right at position $i, for\
    \ each position $i.\n    # This means, for each position $i, there can only be\
    \ one collision between\n    # a car going left-to-right and a car going right-to-left,\
    \ for each position $i.\n    # So, the number of collisions is $1, because there\
    \ are $1 positions.\n    # This is wrong;  the correct answer is $1*($1-1)/2,\
    \ because each car going left-to-right\n    # can collide with each car going\
    \ right-to-left, except itself, and each car going\n    # right-to-left can collide\
    \ with each car going left-to-right, except itself.\n    # However, cars cannot\
    \ collide with themselves, and two cars cannot collide twice\n    # in the same\
    \ position.\n    # So, the number of collisions is $1*($1-1)/2.\n    # Example:\
    \  if there are 4 cars (going left-to-right) in the first set,\n    # and 4 cars\
    \ (going right-to-left) in the second set, then there are\n    # 3*4/2=6 collisions.\
    \  You can work out the number of collisions for\n    # any number of cars;  you\
    \ will always get $1*($1-1)/2\n    #\n    # If you want to compute the number\
    \ of collisions without using a calculator,\n    # you can use the following observation:\
    \  if there are n cars in the first set,\n    # and n cars in the second set,\
    \ then\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpkw3m95zx.sh: line 40: syntax error near unexpected token `}''

    /tmp/tmpkw3m95zx.sh: line 40: `}''

    '
  stdout: ''
  timestamp: 1660020371
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local n_prev=$((n-1))\n\
    \    local n_prev_prev=$((n-2))\n    if [[ $n -eq 0 ]]; then\n        echo 0\n\
    \    elif [[ $n -eq 1 ]]; then\n        echo 0\n    elif [[ $n -eq 2 ]]; then\n\
    \        echo 1\n    else\n        # the last two are impossible to collide (since\
    \ they are already in the opposite direction)\n        local num_collision=$((\
    \ ($n_prev * $n_prev_prev) / 2 ))\n        echo $num_collision\n    fi\n}\n\n\
    candidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[\
    \ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[\
    \ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020371
- exit_code: -1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  awk -v len=$1 '{\n    if (NR <= len) {\n\
    \      car[$1] = $2\n    } else {\n      if (car[$1] == $2) {\n        count++\n\
    \      }\n    }\n  }\n  END {\n    print count\n  }'\n}\n\ncandidate() {\n   \
    \ car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\"\
    ) = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\"\
    ) = \"100\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=6 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=11 encoding='utf-8'>
  timestamp: 1660020376
- exit_code: 2
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  # A car race collision can be seen as\
    \ the inversion of a coin-flip, where\n  # the inversion is equivalent to shifting\
    \ the entire sequence over by one\n  # value to the right.  In other words, if\
    \ we were to shift all the \"head\"\n  # flips by 1 to the right, and all the\
    \ \"tail\" flips by 1 to the left, the\n  # result would be a sequence of the\
    \ same length with the same number of\n  # heads and tails.\n  #\n  # The number\
    \ of car race collisions is the same as the number of \"heads\"\n  # (car moving\
    \ left to right) followed by a \"tail\" (car moving right to left).\n  # The number\
    \ of heads followed by a tail is equivalent to the\n  # number of heads, since\
    \ after we have calculated the number of heads,\n  # each head is followed by\
    \ a tail.\n  #\n  # Mathematically, we have n + 1 - 2 * number_of_heads, and we\
    \ seek to find\n  # the number of heads (number_of_heads).\n  #\n  # Calling \"\
    car_race_collision 5\" gives us (5 + 1 - 2 * number_of_heads)\n  # and we seek\
    \ to find the value of number_of_heads.\n  #\n  #      +---+---+---+---+---+\n\
    \  #      |   |   |   |   |   |\n  #      | H | H | H | H | H |\n  #      |  \
    \ |   |   |   |   |\n  #      +---+---+---+---+---+\n  #\n  #      +---+---+---+---+---+\n\
    \  #      |   |   |   |   |   |\n  #      | H | H | H | H | H |\n  #      |  \
    \ |   |   |   |   |\n  #      +---+---+---+---+---+\n  #      |\n  #      |\n\
    \  #      v\n  #\n  #      +---+---+---+---+---+\n  #      |   |   |   |   | \
    \  |\n  #      | H | H | H | H | H |\n  #      |   |   |   |\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpfdk06mj0.sh: line 51: syntax error near unexpected token `}''

    /tmp/tmpfdk06mj0.sh: line 51: `}''

    '
  stdout: ''
  timestamp: 1660020371
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n\techo $(echo $1 | awk '{print ($1-1)*$1/2}')\n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020371
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    # Fill in this part\n    #t=$(cat \"\
    $1\" | grep -c \"^\")\n    t=$(cat \"$1\" | awk '{print $1}' | grep -c \"^\")\n\
    \    if [[ \"$t\" = \"\" ]]; then\n        echo 0\n    else\n        echo \"$t\"\
    \n    fi\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'cat: 2: No such file or directory

    '
  stdout: ''
  timestamp: 1660020371
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=\"$1\"\n    local collisions=0\n\
    \    local right_car_index=0\n    local left_car_index=$(( n - 1 ))\n    local\
    \ right_to_left_moving_cars=()\n    local left_to_right_moving_cars=()\n    while\
    \ [ $left_car_index -ge 0 ]; do\n        right_to_left_moving_cars[$right_car_index]=$((\
    \ $RANDOM % 100 + 1 ))\n        left_to_right_moving_cars[$left_car_index]=$((\
    \ $RANDOM % 100 + 1 ))\n        left_car_index=$(( left_car_index - 1 ))\n   \
    \     right_car_index=$(( right_car_index + 1 ))\n    done\n    right_car_index=0\n\
    \    left_car_index=$(( n - 1 ))\n    while [ $left_car_index -ge 0 ]; do\n  \
    \      if [ ${right_to_left_moving_cars[$right_car_index]} -lt ${left_to_right_moving_cars[$left_car_index]}\
    \ ]; then\n            collisions=$(( collisions + 1 ))\n        fi\n        left_car_index=$((\
    \ left_car_index - 1 ))\n        right_car_index=$(( right_car_index + 1 ))\n\
    \    done\n    echo $collisions\n}\n\ncandidate() {\n    car_race_collision \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[\
    \ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[\
    \ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020371
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=\"$1\"\n    declare -a left_to_right\n\
    \    declare -a right_to_left\n    for (( i=0; i<n; i++ )); do\n        left_to_right[$i]=$((\
    \ $RANDOM % 1000 ))\n        right_to_left[$i]=$(( $RANDOM % 1000 ))\n    done\n\
    \    IFS=$'\\n' left_to_right=($(sort -n <<<\"${left_to_right[*]}\"))\n    IFS=$'\\\
    n' right_to_left=($(sort -n <<<\"${right_to_left[*]}\"))\n    local i j n_collisions\n\
    \    n_collisions=0\n    i=0\n    j=0\n    while (( i < n && j < n )); do\n  \
    \      if (( left_to_right[i] < right_to_left[j] )); then\n            i=$(( i\
    \ + 1 ))\n        elif (( left_to_right[i] > right_to_left[j] )); then\n     \
    \       j=$(( j + 1 ))\n        else\n            n_collisions=$(( n_collisions\
    \ + 1 ))\n            i=$(( i + 1 ))\n            j=$(( j + 1 ))\n        fi\n\
    \    done\n    echo \"$n_collisions\"\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020371
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n\t# Your code goes here\n\n\t# This should\
    \ be one of the last commands in the function:\n\treturn $number_of_collisions\n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020371
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  echo \"$(($1 * ($1 - 1)))\"\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020371
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local -i n\n  local -i x\n  let n=$1\n\
    \  if [ $n -le 0 ]; then\n    echo 0\n    return\n  fi\n  let x=2*$n-1\n  echo\
    \ $x\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020371
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  if [[ $1 -lt 0 ]]; then\n    echo \"Error:\
    \  Negative input not allowed.\"\n    return 1\n  fi\n  #This function returns\
    \ the number of possible pairs using a formula:\n  # nC2 = n!/(2!(n-2)!) = n*(n-1)/2\n\
    \  # This formula is used because we have to find the number of pairs in\n  #\
    \ n and n, meaning n!/(2!(n-2)!)\n  local N=$1\n  local n_factorial=1\n  local\
    \ two_factorial=1\n  local n_minus_two_factorial=1\n  for ((i=1; i<=$N; i++));\
    \ do\n    n_factorial=$((n_factorial*i))\n  done\n  for ((i=1; i<=2; i++)); do\n\
    \    two_factorial=$((two_factorial*i))\n  done\n  for ((i=1; i<=$((N-2)); i++));\
    \ do\n    n_minus_two_factorial=$((n_minus_two_factorial*i))\n  done\n  echo \"\
    $N!/(2!($N-2)!) = $n_factorial/($two_factorial*$n_minus_two_factorial) = $((n_factorial/(two_factorial*n_minus_two_factorial)))\"\
    \n  return 0\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\")\
    \ = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\"\
    ) = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020371
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    (( $1 < 2 )) && return 1\n    (( $1\
    \ % 2 == 0 )) && return $(($1 * ($1-2) / 2))\n    return $(($1 * ($1-1) / 2))\n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020371
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  if [ $1 -le 0 ]; then\n    echo 0\n  else\n\
    \    echo $1\n  fi\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"\
    3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"\
    8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020371
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    # first car moving left to right\n \
    \   n_l2r=1\n\n    # first car moving right to left\n    n_r2l=0\n\n    # For\
    \ example: n_l2r=1, n_r2l=0 means 1 car moving left to right\n    # and 0 cars\
    \ moving right to left\n    # This means the first car will collide with its self.\n\
    \    # However, for n_l2r=1, n_r2l=1, no car will collide, since\n    # the second\
    \ car moving left to right will first pass the first car moving\n    # left to\
    \ right, before the second car moving right to left hits it.\n\n    # So the number\
    \ of cars moving left to right is irrelevant to the\n    # number of collisions.\
    \  For example, n_l2r=1, n_r2l=0 has the same\n    # number of collisions as n_l2r=2,\
    \ n_r2l=0.\n\n    # Let's just focus on the number of cars moving right to left.\n\
    \    # In the above example, there are 0 cars moving right to left.\n    # The\
    \ first car moving left to right will collide with its self.\n    # Adding an\
    \ additional car moving right to left will not change anything.\n    # That is,\
    \ there is 1 collision for n_r2l=0.\n\n    # Adding an additional car moving right\
    \ to left will affect the number of\n    # collisions.  For example, for n_r2l=1,\
    \ the first car moving left to right\n    # will collide with the first car moving\
    \ right to left.  The second car moving\n    # left to right will collide with\
    \ the second car moving right to left.  So\n    # there are 2 collisions for n_r2l=1.\n\
    \n    # For n_r2l=2, the first car moving left to right will collide with the\
    \ first\n    # car moving right to left.  The second car moving left to right\
    \ will collide\n    # with the second car moving right to left.  The third car\
    \ moving left to right\n    # will collide with the third car moving right to\
    \ left.  So there are 3 collisions\n    # for n_r2l=2.\n\n    # For n_r2l=3, the\
    \ first car moving left to\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020371
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  if [[ $1 -lt 1 ]]; then\n    echo -1\n\
    \    return\n  fi\n  if [[ $1 -eq 1 ]]; then\n    echo 0\n    return\n  fi\n \
    \ #echo $(( $1 * ($1 - 1) / 2 ))\n  echo $(($1 * ($1 - 1) / 2))\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020371
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  if [ $1 -lt 0 ]; then\n    return 1\n\
    \  fi\n  echo $1\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"\
    3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"\
    8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020371
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  declare -i i\n  local -i result=0\n\n\
    \  for ((i=1; i<=n; i++))\n  do\n    ((result=result + ((n-i+1) * i)))\n  done\n\
    \n  echo $result\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"\
    3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"\
    8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020371
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    if [ $1 -le 0 ]; then\n        echo\
    \ 0\n    else\n        echo $1\n    fi\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020371
