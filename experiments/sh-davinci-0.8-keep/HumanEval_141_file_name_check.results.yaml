language: sh
name: HumanEval_141_file_name_check
results:
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ file_name_check(\"example.txt\") # => 'Yes'\n# file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n#\n# $1 is a\
    \ string\nfile_name_check() {\n    if [[ -n $(echo $1 | grep -P \"\\d{3}\") ]];\
    \ then\n        echo \"No\"\n        return\n    fi\n    if [[ -z $(echo $1 |\
    \ grep -P \"\\w+\\.\\w+\") ]]; then\n        echo \"No\"\n        return\n   \
    \ fi\n    if [[ -z $(echo $1 | grep -P \"\\w+\\.txt$\") && -z $(echo $1 | grep\
    \ -P \"\\w+\\.exe$\") && -z $(echo $1 | grep -P \"\\w+\\.dll$\") ]]; then\n  \
    \      echo \"No\"\n        return\n    fi\n    echo \"Yes\"\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020447
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ file_name_check(\"example.txt\") # => 'Yes'\n# file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n#\n# $1 is a\
    \ string\nfile_name_check() {\n    # Your code starts here.\n    echo $1\n}\n\n\
    candidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020447
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ file_name_check(\"example.txt\") # => 'Yes'\n# file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n#\n# $1 is a\
    \ string\nfile_name_check() {\n  # fail test if no param supplied\n  [ -z \"$1\"\
    \ ] && return 1\n  # fail test if there are more than 3 numbers in the string\n\
    \  [ \"$(echo \"$1\" | tr -d -c '0-9' | wc -c)\" -gt 3 ] && return 1\n  # fail\
    \ test if there is not exactly one dot in the string\n  [ \"$(echo \"$1\" | tr\
    \ -d -c '.' | wc -c)\" -ne 1 ] && return 1\n  # fail test if first char is not\
    \ a letter\n  [[ ! \"${1:0:1}\" =~ ^[a-zA-Z]$ ]] && return 1\n  # fail test if\
    \ file extension is not .txt .exe or .dll\n  [[ ! \"${1##*.}\" =~ ^(txt|exe|dll)$\
    \ ]] && return 1\n  # all tests passed, return 'Yes'\n  echo \"Yes\"\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020447
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ file_name_check(\"example.txt\") # => 'Yes'\n# file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n#\n# $1 is a\
    \ string\nfile_name_check() {\n    if [ $# -ne 1 ]; then\n        echo \"You must\
    \ specify exactly one parameter\"\n        return 1\n    fi\n    local name=$1\n\
    \    local -i count=0\n    local IFS='.'\n    for field in $name; do\n       \
    \ count=$count+1\n    done\n    if [ $count -ne 2 ]; then\n        echo \"No\"\
    \n        return\n    fi\n    if [[ $name =~ [0-9]{4} ]]; then\n        echo \"\
    No\"\n        return\n    fi\n    local name_ext=\"${name##*.}\"\n    if [[ $name_ext\
    \ != 'txt' && $name_ext != 'exe' && $name_ext != 'dll' ]]; then\n        echo\
    \ \"No\"\n        return\n    fi\n    if [[ $name =~ ^[a-zA-Z]+$ ]]; then\n  \
    \      echo \"No\"\n        return\n    fi\n    echo \"Yes\"\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020447
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ file_name_check(\"example.txt\") # => 'Yes'\n# file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n#\n# $1 is a\
    \ string\nfile_name_check() {\n  if [[ \"$1\" =~ ^[a-zA-Z][^0-9]*\\.txt$|^[a-zA-Z][^0-9]*\\\
    .exe$|^[a-zA-Z][^0-9]*\\.dll$ ]]; then\n    echo \"Yes\"\n  else\n    echo \"\
    No\"\n  fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020447
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ file_name_check(\"example.txt\") # => 'Yes'\n# file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n#\n# $1 is a\
    \ string\nfile_name_check() {\n    local filename=\"$1\"\n    # you code goes\
    \ here\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020447
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ file_name_check(\"example.txt\") # => 'Yes'\n# file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n#\n# $1 is a\
    \ string\nfile_name_check() {\n  # write your code here\n  # hint: to find the\
    \ substring before the dot, you can use '%'. \n  # For example:\n  # str=\"example.txt\"\
    \n  # pre_dot=${str%%.*}\n  # will return:\n  # pre_dot=\"example\"\n  # and to\
    \ find the substring after the dot, you can use '#'. \n  # For example:\n  # str=\"\
    example.txt\"\n  # post_dot=${str#*.}\n  # will return:\n  # post_dot=\"txt\"\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpin_mzeh4.sh: line 30: syntax error near unexpected token `}''

    /tmp/tmpin_mzeh4.sh: line 30: `}''

    '
  stdout: ''
  timestamp: 1660020447
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ file_name_check(\"example.txt\") # => 'Yes'\n# file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n#\n# $1 is a\
    \ string\nfile_name_check() {\n    # check if the string has more than 3 numbers\n\
    \    if [[ $1 =~ [0-9]{4} ]]; then\n        echo \"No\"\n        return\n    fi\n\
    \n    # check if the string has exactly one dot\n    if [[ ! $1 =~ \\. ]]; then\n\
    \        echo \"No\"\n        return\n    fi\n\n    # check if the substring before\
    \ the dot is not empty and starts with a letter\n    if [[ ! $1 =~ ^[a-zA-Z] ]];\
    \ then\n        echo \"No\"\n        return\n    fi\n\n    # check if the substring\
    \ after the dot is one of the listed\n    if [[ ! $1 =~ (txt|exe|dll)$ ]]; then\n\
    \        echo \"No\"\n        return\n    fi\n\n    echo \"Yes\"\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020447
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ file_name_check(\"example.txt\") # => 'Yes'\n# file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n#\n# $1 is a\
    \ string\nfile_name_check() {\n\t# To be done.\n\tif [ $# -ne 1 ]; then\n\t\t\
    echo \"Provide one argument\"\n\telif [[ $1 =~ ^[a-zA-Z]{1}([a-zA-Z0-9]*[.]{1}(txt|exe|dll))$\
    \ ]]; then\n\t\techo \"Yes\"\n\telse\n\t\techo \"No\"\n\tfi\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020447
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ file_name_check(\"example.txt\") # => 'Yes'\n# file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n#\n# $1 is a\
    \ string\nfile_name_check() {\n  if [[ $1 =~ ^([a-zA-Z])([a-zA-Z0-9]*)([.][txt|exe|dll])$\
    \ ]]; then\n    echo 'Yes'\n  else\n    echo 'No'\n  fi\n}\n\ncandidate() {\n\
    \    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n\
    \    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020447
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ file_name_check(\"example.txt\") # => 'Yes'\n# file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n#\n# $1 is a\
    \ string\nfile_name_check() {\n    if [[ $1 =~ ^[a-zA-Z]+[a-zA-Z0-9]{0,2}\\.[a-zA-Z]{3}$\
    \ ]]; then\n        if [[ $1 =~ \\.exe$ ]] || [[ $1 =~ \\.txt$ ]] || [[ $1 =~\
    \ \\.dll$ ]]; then\n            echo \"Yes\"\n        else\n            echo \"\
    No\"\n        fi\n    else\n        echo \"No\"\n    fi\n}\n\ncandidate() {\n\
    \    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n\
    \    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020447
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ file_name_check(\"example.txt\") # => 'Yes'\n# file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n#\n# $1 is a\
    \ string\nfile_name_check() {\n  local file_name=\"$1\"\n  local file_extensions=('txt'\
    \ 'exe' 'dll')\n  local digits_allowed=3\n  local found_extension=0\n  local found_digits=0\n\
    \  local found_alphapet=0\n  local extension_check=0\n  local file_name_check=0\n\
    \  local array_length=${#file_extensions[@]}\n  local i=0\n  local tmp=\"\"\n\
    \  local tmp_digit=\"\"\n  local tmp_extension=\"\"\n  local tmp_name=\"\"\n \
    \ local extension_check=0\n  local file_name_check=0\n  local return_string=\"\
    \"\n\n  if [[ $file_name =~ [^a-zA-Z0-9\\.] ]]; then\n    return_string=\"No\"\
    \n  else\n    for (( i=0; i<${#file_name}; i++ )); do\n      tmp=\"${file_name:$i:1}\"\
    \n      if [[ $tmp =~ [\\.] ]]; then\n        found_extension=1\n        continue\n\
    \      fi\n      if [[ $tmp =~ [0-9] ]]; then\n        found_digits=1\n      \
    \  tmp_digit=\"$tmp\"\n        continue\n      fi\n      if [[ $tmp =~ [a-zA-Z]\
    \ ]]; then\n        found_alphapet=1\n        continue\n      fi\n    done\n \
    \   if [ $found_extension -eq 1 ] && [ $found_digits -eq 1 ] && [ $found_alphapet\
    \ -eq 1 ]; then\n      if [[ $file_name =~ [0-9]{$digits_allowed} ]]; then\n \
    \       return_string=\"No\"\n      else\n        tmp_extension=\"${file_name##*.}\"\
    \n        tmp_name=\"${file_name%.*}\"\n        for (( i=0; i<${array_length};\
    \ i++ )); do\n          if [ \"${file_extensions[$i]}\" == \"$tmp_extension\"\
    \ ]; then\n            extension_check=1\n            break\n          fi\n  \
    \      done\n        if [ $extension_check -eq 1 ]; then\n          if [[ $tmp_name\
    \ =\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpf7004jyu.sh: line 67: unexpected argument `newline'' to conditional
    binary operator

    /tmp/tmpf7004jyu.sh: line 67: syntax error near `=''

    /tmp/tmpf7004jyu.sh: line 67: `          if [[ $tmp_name =''

    '
  stdout: ''
  timestamp: 1660020447
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ file_name_check(\"example.txt\") # => 'Yes'\n# file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n#\n# $1 is a\
    \ string\nfile_name_check() {\n    # Your code is here...\n}\n\ncandidate() {\n\
    \    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n\
    \    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp68_tm84a.sh: line 18: syntax error near unexpected token `}''

    /tmp/tmp68_tm84a.sh: line 18: `}''

    '
  stdout: ''
  timestamp: 1660020447
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ file_name_check(\"example.txt\") # => 'Yes'\n# file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n#\n# $1 is a\
    \ string\nfile_name_check() {\n\tif [[ $1 =~ ^[a-zA-Z]+[[:digit:]]{0,3}\\.txt$\
    \ ]]; then\n\t\techo \"Yes\"\n\telif [[ $1 =~ ^[a-zA-Z]+[[:digit:]]{0,3}\\.exe$\
    \ ]]; then\n\t\techo \"Yes\"\n\telif [[ $1 =~ ^[a-zA-Z]+[[:digit:]]{0,3}\\.dll$\
    \ ]]; then\n\t\techo \"Yes\"\n\telse\n\t\techo \"No\"\n\tfi\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020447
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ file_name_check(\"example.txt\") # => 'Yes'\n# file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n#\n# $1 is a\
    \ string\nfile_name_check() {\n    local fname=\"$1\"\n    if [ \"$(echo \"$fname\"\
    \ | grep -E '[0-9]{4}')\" ]\n    then\n        echo \"No\"\n        return\n \
    \   fi\n    if [ \"$(echo \"$fname\" | grep -E -c '^[a-zA-Z]')\" -eq 0 ]\n   \
    \ then\n        echo \"No\"\n        return\n    fi\n    if [ \"$(echo \"$fname\"\
    \ | grep -E -c '\\.[a-z]{3}$')\" -eq 0 ]\n    then\n        echo \"No\"\n    \
    \    return\n    fi\n    if [ \"$(echo \"$fname\" | grep -E -c '\\..*\\.')\" -ne\
    \ 0 ]\n    then\n        echo \"No\"\n        return\n    fi\n    echo \"Yes\"\
    \n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020447
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ file_name_check(\"example.txt\") # => 'Yes'\n# file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n#\n# $1 is a\
    \ string\nfile_name_check() {\n  [ \"$#\" -ne 1 ] && {\n    echo \"The number\
    \ of argument is illegal, the function must have one argument.\"\n    return 1\n\
    \  }\n  expr match \"$1\" '^[a-zA-Z]\\{1\\}[0-9]\\{0,3\\}\\.\\(txt\\|exe\\|dll\\\
    )$' > /dev/null\n  if [ $? -eq 0 ]; then\n    echo \"Yes\"\n  else\n    echo \"\
    No\"\n  fi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020447
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ file_name_check(\"example.txt\") # => 'Yes'\n# file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n#\n# $1 is a\
    \ string\nfile_name_check() {\n  local FILE_NAME=\"$1\"\n  local VALID_EXTENSIONS=('txt'\
    \ 'exe' 'dll')\n  local NEW_NAME\n  local SUB_NAME\n  local EXTENSION\n  local\
    \ ONE_COUNT=0\n  local DOT_COUNT=0\n  local LEN_EXTENSION\n  local NUM_COUNT=0\n\
    \  local I\n\n  # Replace all alphapet with '1'\n  NEW_NAME=$(echo \"$FILE_NAME\"\
    \ | sed 's/[a-zA-Z]/1/g')\n  # Count digits\n  NUM_COUNT=$(echo \"$NEW_NAME\"\
    \ | sed 's/[^0-9]//g' | wc -m)\n  # Count dot\n  DOT_COUNT=$(echo \"$NEW_NAME\"\
    \ | sed 's/[^.]//g' | wc -m)\n  # Check file name\n  if [ $NUM_COUNT -gt 3 ] ||\
    \ [ $DOT_COUNT -ne 1 ]; then\n    echo 'No'\n    return\n  fi\n\n  # Split sub\
    \ name and extension\n  SUB_NAME=$(echo \"$FILE_NAME\" | cut -d '.' -f 1)\n  EXTENSION=$(echo\
    \ \"$FILE_NAME\" | cut -d '.' -f 2)\n  LEN_EXTENSION=${#EXTENSION}\n  # Check\
    \ extension\n  for ((I=0; I<${#VALID_EXTENSIONS[@]}; I++)); do\n    if [ \"${VALID_EXTENSIONS[$I]}\"\
    \ = \"$EXTENSION\" ]; then\n      ONE_COUNT=1\n      break\n    fi\n  done\n \
    \ # Check sub name\n  if [ \"${SUB_NAME:0:1}\" = '1' ] || [ ${#SUB_NAME} -eq 0\
    \ ] || [ $ONE_COUNT -eq 0 ]; then\n    echo 'No'\n    return\n  fi\n\n  echo 'Yes'\n\
    }\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
    \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[\
    \ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
    ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
    all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020447
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ file_name_check(\"example.txt\") # => 'Yes'\n# file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n#\n# $1 is a\
    \ string\nfile_name_check() {\n    # write your code here\n}\n\ncandidate() {\n\
    \    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\" ]]\n\
    \    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp11lo5jjn.sh: line 18: syntax error near unexpected token `}''

    /tmp/tmp11lo5jjn.sh: line 18: `}''

    '
  stdout: ''
  timestamp: 1660020447
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ file_name_check(\"example.txt\") # => 'Yes'\n# file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n#\n# $1 is a\
    \ string\nfile_name_check() {\n  # if the file name is valid, return \"Yes\",\
    \ otherwise return \"No\"\n  if [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}(\\.[txt|exe|dll])$\
    \ ]]; then\n    echo \"Yes\"\n  else\n    echo \"No\"\n  fi\n}\n\ncandidate()\
    \ {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\") = \"No\"\
    \ ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate \"K.dll\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n\
    \    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\"\
    ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate\
    \ \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n   \
    \ [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"\
    this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\")\
    \ = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\")\
    \ = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\"\
    \ ]]\n    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
    ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"\
    s.\") = \"No\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020447
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which takes a string representing a file's\
    \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n# A file's name is considered to be valid if and only if all the\
    \ following conditions \n# are met:\n# - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot\
    \ '.'\n# - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n#\
    \ file_name_check(\"example.txt\") # => 'Yes'\n# file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n#\n# $1 is a\
    \ string\nfile_name_check() {\n\t# write your solution here\n\tname=$1\n\tstart_with_letter=^[a-zA-Z]\n\
    \tend_with_extension=^[a-zA-Z]*[.](txt|exe|dll)$\n\tno_more_than_three_digits=^[a-zA-Z]*[^0-9]*$\n\
    \tif [[ \"$name\" =~ $start_with_letter ]] && [[ \"$name\" =~ $end_with_extension\
    \ ]] && [[ \"$name\" =~ $no_more_than_three_digits ]]; then\n\t\techo \"Yes\"\n\
    \telse\n\t\techo \"No\"\n\tfi\n}\n\ncandidate() {\n    file_name_check \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n\
    \    [[ $(candidate \"1example.dll\") = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\"\
    ) = \"No\" ]]\n    [[ $(candidate \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"MY16FILE3.exe\") = \"Yes\" ]]\n    [[ $(candidate \"His12FILE94.exe\") = \"\
    No\" ]]\n    [[ $(candidate \"_Y.txt\") = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\"\
    ) = \"No\" ]]\n    [[ $(candidate \"/this_is_valid.dll\") = \"No\" ]]\n    [[\
    \ $(candidate \"this_is_valid.wow\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\"\
    ) = \"Yes\" ]]\n    [[ $(candidate \"this_is_valid.txtexe\") = \"No\" ]]\n   \
    \ [[ $(candidate \"#this2_i4s_5valid.ten\") = \"No\" ]]\n    [[ $(candidate \"\
    @this1_is6_valid.exe\") = \"No\" ]]\n    [[ $(candidate \"this_is_12valid.6exe4.txt\"\
    ) = \"No\" ]]\n    [[ $(candidate \"all.exe.txt\") = \"No\" ]]\n    [[ $(candidate\
    \ \"I563_No.exe\") = \"Yes\" ]]\n    [[ $(candidate \"Is3youfault.txt\") = \"\
    Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\") = \"Yes\" ]]\n    [[ $(candidate\
    \ \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate \"I563_Yes3.txtt\") = \"\
    No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n    [[ $(candidate \"\
    final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\") = \"No\" ]]\n\
    \    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\") = \"No\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "/tmp/tmph3pydpw9.sh: line 20: syntax error near unexpected token `('\n\
    /tmp/tmph3pydpw9.sh: line 20: `\tend_with_extension=^[a-zA-Z]*[.](txt|exe|dll)$'\n"
  stdout: ''
  timestamp: 1660020447
