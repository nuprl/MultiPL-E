name: HumanEval_15_string_sequence
language: sh
prompt: "#!/bin/bash\n# Return a string containing space-delimited numbers starting\
  \ from 0 upto n inclusive.\n# >>> string_sequence(0)\n# '0'\n# >>> string_sequence(5)\n\
  # '0 1 2 3 4 5'\n#\n# $1 is an integer\nstring_sequence() {\n"
tests: "}\n\ncandidate() {\n    string_sequence \"$@\"\n}\n\nset -e\nrun_test() {\n\
  \    [[ $(candidate \"0\") = \"0\" ]]\n    [[ $(candidate \"3\") = \"0 1 2 3\" ]]\n\
  \    [[ $(candidate \"10\") = \"0 1 2 3 4 5 6 7 8 9 10\" ]]\n}\n\nrun_test"
completions: ["    test -n \"$1\" || return 1\n    test -z \"${1##*[!0-9]*}\" && return\
    \ 1\n    test \"$1\" -ge 0 || return 1\n    ( for ((i=0; i<=$1; i++)); do echo\
    \ $i; done )", "    [[ \"$1\" =~ ^-?[0-9]+$ ]] || return $EX_SOFTWARE\n    local\
    \ i\n    for ((i=0; i<=$1; i++)); do\n        printf '%s ' \"$i\"\n    done\n\
    \    printf '\\n'", "    seq -s ' ' 0 \"$1\"", "    if [ $# -ne 1 ]; then\n  \
    \      echo \"$(basename $0): 1 argument required, $# provided\" >&2\n       \
    \ exit 1\n    fi\n    if [ $1 -lt 0 ]; then\n        echo \"$(basename $0): argument\
    \ must be positive, $1 provided\" >&2\n        exit 1\n    fi\n    if [ $1 -eq\
    \ 0 ]; then\n        echo '0'\n    else\n        seq 0 $1\n    fi", "    if ((\
    \ $1 == 0 )); then\n        echo \"0\"\n    else\n        for (( i=0; i<=$1; i++\
    \ )); do\n            echo -n \"$i \"\n        done\n    fi", "    local __doc__='Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.'\n\
    \    local start=0\n    local end=$1\n    local str=''\n    for ((i=start; i<=end;\
    \ i++)); do\n        str=\"$str $i\"\n    done\n    echo \"$str\"", "    python\
    \ -c \"print(' '.join(map(str, range($1+1))))\"", "    # print $1 th field of\
    \ the special variable IFS\n    set -- $(echo $IFS | cut -d' ' -f1-$1)\n    #\
    \ print all arguments to this function\n    echo \"$*\"", "  local -i x=$1\n \
    \ local i\n  # Use a while loop to iterate from 0 to n:\n  i=0\n  while (( i <=\
    \ x )); do\n    # For each iteration, print the value of i followed by a space:\n\
    \    printf -v x '%s%d ' \"$x\" \"$i\"\n    # Increment i by 1:\n    (( i++ ))\n\
    \  done\n  # Remove the trailing space.\n  printf '%s' \"${x% }\"", "    if [\
    \ $# -ne 1 ]; then\n        raise \"string_sequence() requires 1 argument, got\
    \ $#\"\n    fi\n    local max=$1\n    local i\n    for ((i=0; i<=max; i++)); do\n\
    \        echo -n \"$i \"\n    done\n    echo", "    echo $(seq -s ' ' 0 $1)",
  "    if (( $1 < 0 )); then\n        echo '-1'\n    else\n        local -a i\n  \
    \      for (( i=0; i<=$1; i++ )); do\n            i[$i]=$i\n        done\n   \
    \     echo \"${i[*]}\"\n    fi", "  test \"$#\" -eq 1 || _fatal\n  test \"$1\"\
    \ -ge 0 || _fatal\n  # Use brace-enclosed list for efficiency.\n  echo $(seq -s\
    \ ' ' \"$1\")", '    echo $(seq 0 $1)', "    [[ $# == 1 ]] || { echo \"Usage:\
    \ string_sequence(n)\"; exit 1; }\n    local n=$1\n    [[ $n =~ ^[0-9]+$ ]] ||\
    \ { echo \"Usage: string_sequence(n)\"; exit 1; }\n    seq -s ' ' 0 $n", "   \
    \ test $# -eq 1 || {\n        echo \"${FUNCNAME[0]}: usage: string_sequence n\"\
    \ >&2\n        return 1\n    }\n    local n=$1\n    test ${n} -ge 0 || {\n   \
    \     echo \"${FUNCNAME[0]}: n must be non-negative\" >&2\n        return 1\n\
    \    }\n    local seq=$(seq -s' ' ${n})\n    echo ${seq}", "    # Parse input\n\
    \    if [[ ! \"$1\" =~ ^[0-9]+$ ]]; then\n        echo \"$1 is not an integer.\"\
    \n        exit 1\n    fi\n    local n=\"$1\"\n\n    # Create sequence\n    local\
    \ sequence=\"\"\n    for i in $(seq 0 \"$n\"); do\n        sequence=\"$sequence$i\
    \ \"\n    done\n\n    # Trim last space and return\n    echo \"${sequence%?}\"",
  "    local n=\"$1\"\n    local i\n    local p\n    for ((i=0; i<=n; i++)); do\n\
    \        p=\"$p $i\"\n    done\n    echo \"$p\"", "    if [ $# -ne 1 ]; then\n\
    \        echo \"$FUNCNAME: usage: $FUNCNAME <integer>\"\n        return 1\n  \
    \  fi\n    local n=$1\n    local i\n    for ((i=0; i<=n; i++)); do\n        echo\
    \ -n \"$i \"\n    done\n    echo", "    if [ $# -eq 0 ]; then\n        echo \"\
    Usage: ${FUNCNAME[0]} <n>\" >&2\n        return 1\n    fi\n    local s\n    for\
    \ ((i=0; i<=$1; i++)); do\n        s+=\" $i\"\n    done\n    echo \"$s\""]
stop_tokens:
- "\n}"
