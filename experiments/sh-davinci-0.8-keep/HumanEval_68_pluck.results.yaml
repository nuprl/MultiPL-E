language: sh
name: HumanEval_68_pluck
results:
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n# Example 2:\n\
    # Input: [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n    local -i\
    \ min=0x7fffffff result\n    result=$(\n        while (( $# )); do\n         \
    \   if [[ $1 -eq 0 ]]; then\n                echo 0 0\n                break\n\
    \            elif (( ($1 & 1) == 0 && $1 < min )); then\n                min=$1\n\
    \                echo $1 $#\n            fi\n            shift\n        done\n\
    \    )\n    echo \"$result\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9rdohd_u.sh: line 44: [[: 4 2 3: syntax error in expression (error
    token is "2 3")

    /tmp/tmp9rdohd_u.sh: line 47: ((: (4 2 3 & 1) == 0 && 4 2 3 < min : missing `)''
    (error token is "2 3 & 1) == 0 && 4 2 3 < min ")

    '
  stdout: ''
  timestamp: 1660020364
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n# Example 2:\n\
    # Input: [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n  local smallest=\n\
    \  local idx=0\n  for x in $1; do\n    if (( x % 2 == 0 )) && [[ -z $smallest\
    \ || $x -lt $smallest ]]; then\n      smallest=$x\n      smallest_idx=$idx\n \
    \   fi\n    (( idx++ ))\n  done\n  if [[ -z $smallest ]]; then\n    echo \"[]\"\
    \n  else\n    echo \"[ $smallest, $smallest_idx ]\"\n  fi\n}\n\ncandidate() {\n\
    \    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") =\
    \ \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020364
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n# Example 2:\n\
    # Input: [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n  local ci=0\n\
    \  local smallest=0x7fffffff\n  local result\n  local temp\n  for i in $1; do\n\
    \    if [ $((i%2)) -eq 0 ] && [ $i -lt $smallest ]; then\n      temp=$(echo $i)\n\
    \      smallest=$i\n      result=$(echo \"$temp $ci\")\n    fi\n    ci=$((ci+1))\n\
    \  done\n  if [ $smallest -eq 0x7fffffff ]; then\n    echo \"[]\"\n  else\n  \
    \  echo \"[$result]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp251aynkf.sh: line 35: [: 0x7fffffff: integer expression expected

    /tmp/tmp251aynkf.sh: line 35: [: 0x7fffffff: integer expression expected

    /tmp/tmp251aynkf.sh: line 42: [: 0x7fffffff: integer expression expected

    '
  stdout: ''
  timestamp: 1660020364
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n# Example 2:\n\
    # Input: [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n    local nodes=(\
    \ $1 )\n    local result=()\n    local even_index=0\n    local even_index_found=false\n\
    \    local i=0\n    while [[ $i -lt ${#nodes[@]} ]]; do\n        if [[ ${nodes[$i]}\
    \ -eq 0 ]]; then\n            result+=( $i )\n            (( ++i ))\n        \
    \    continue\n        fi\n        if [[ ${nodes[$i]} -ge 2 && $((${nodes[$i]}\
    \ % 2)) -eq 0 ]]; then\n            if [[ $even_index_found == false ]]; then\n\
    \                even_index=$i\n                even_index_found=true\n      \
    \      else\n                if [[ ${nodes[$even_index]} -gt ${nodes[$i]} ]];\
    \ then\n                    even_index=$i\n                fi\n            fi\n\
    \        fi\n        (( ++i ))\n    done\n    if [[ $even_index_found == true\
    \ ]]; then\n        result+=( ${nodes[$even_index]} )\n    fi\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020364
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n# Example 2:\n\
    # Input: [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n  local -a vals=()\n\
    \  local i=0\n  local min=\n  local m_idx=\n  local valid=0\n  local temp\n  while\
    \ [[ -n \"$1\" ]]; do\n    temp=$1\n    [[ \"$temp\" -eq 0 ]] && {\n      echo\
    \ \"[0, $i]\"\n      return\n    }\n    [[ \"$temp\" -lt 0 ]] && temp=$((-$temp))\n\
    \    [[ \"$temp\" -eq 1 ]] && {\n      shift\n      ((i++))\n      continue\n\
    \    }\n    [[ \"$((temp % 2))\" -eq 0 ]] && {\n      vals+=(\"$temp\")\n    \
    \  [[ -z \"$min\" || \"$temp\" -lt \"$min\" ]] && {\n        min=\"$temp\"\n \
    \       m_idx=\"$i\"\n      }\n      ((valid++))\n    }\n    shift\n    ((i++))\n\
    \  done\n  [[ \"$valid\" -eq 0 ]] && echo \"[]\" || echo \"[$min, $m_idx]\"\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpt4tvyssv.sh: line 38: [[: 4 2 3: syntax error in expression (error
    token is "2 3")

    /tmp/tmpt4tvyssv.sh: line 42: [[: 4 2 3: syntax error in expression (error token
    is "2 3")

    /tmp/tmpt4tvyssv.sh: line 43: [[: 4 2 3: syntax error in expression (error token
    is "2 3")

    /tmp/tmpt4tvyssv.sh: line 48: 4 2 3: syntax error in expression (error token is
    "2 3")

    '
  stdout: ''
  timestamp: 1660020364
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n# Example 2:\n\
    # Input: [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n  local input=$1\n\
    \  local output=\"[]\"\n  local -i nodes=0\n  local -i number=0\n  local -i min=1000000000\n\
    \  local -i min_idx=0\n  local -i max=0\n  local -i max_idx=0\n  local -i i=0\n\
    \  local -i j=0\n  local -i k=0\n  local -i count=0\n  local -i even=0\n  local\
    \ -i odd=0\n  local -i even_count=0\n  local -i odd_count=0\n  local -i sum=0\n\
    \  local -i sum_even=0\n  local -i sum_odd=0\n  local -i sum_min=0\n  local -i\
    \ sum_max=0\n  local -i sum_even_min=0\n  local -i sum_even_max=0\n  local -i\
    \ sum_odd_min=0\n  local -i sum_odd_max=0\n  local -i sum_even_count=0\n  local\
    \ -i sum_odd_count=0\n  local -i min_even=1000000000\n  local -i min_even_idx=0\n\
    \  local -i max_even=0\n  local -i max_even_idx=0\n  local -i min_odd=1000000000\n\
    \  local -i min_odd_idx=0\n  local -i max_odd=0\n  local -i max_odd_idx=0\n  local\
    \ -i max_even_count=0\n  local -i max_odd_count=0\n  local -i min_even_count=0\n\
    \  local -i min_odd_count=0\n  local -i sum_even_count=0\n  local -i sum_odd_count=0\n\
    \  local -i sum_even_min_count=0\n  local -i sum_even_max_count=0\n  local -i\
    \ sum_odd_min_count=0\n  local -i sum_odd_max_count=0\n  local -i min_even_count=0\n\
    \  local -i min_odd_count=0\n  local -i max_\n}\n\ncandidate() {\n    pluck \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020364
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n# Example 2:\n\
    # Input: [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n    local -a\
    \ list=($1)\n    local min=$((__MAX__))\n    local minIndex=\n    for ((i=0; i<${#list[@]};\
    \ i++)); do\n        if [[ ${list[$i]} -eq 0 ]]; then\n            echo \"[0,\
    \ $i]\"\n            return\n        fi\n        if [[ $((${list[$i]} % 2)) -eq\
    \ 0 ]]; then\n            if [[ ${list[$i]} -lt $min ]]; then\n              \
    \  min=${list[$i]}\n                minIndex=$i\n            fi\n        fi\n\
    \    done\n    if [[ -z $minIndex ]]; then\n        echo \"[]\"\n    else\n  \
    \      echo \"[$min, $minIndex]\"\n    fi\n}\n\ncandidate() {\n    pluck \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0\
    \ 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020364
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n# Example 2:\n\
    # Input: [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\t# FIXME this\
    \ needs to be optimized\n\t# Need to add some more sanity checks\n\t# make sure\
    \ $1 is not empty\n\t# make sure $1 contains only number\n\tvalue=$(echo \"$1\"\
    \ | grep -E '\\b([0-9]*[02468])\\b' | sort -n | head -n 1)\n\tindex=$(echo \"\
    $1\" | awk -v value=\"$value\" '{ for (i=1; i<=NF; i++) { if ($i == value) { print\
    \ i-1; break } } }')\n\techo \"[$value, $index]\"\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020364
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n# Example 2:\n\
    # Input: [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\t# use the in-built\
    \ sort, where -n is numeric sort, -r is reverse\n\t# and the first field contains\
    \ the column used for sorting.\n\t# -o is the sort field.\n\t# From the man page:\n\
    \t# The options -n and -r are ignored if any field-specifier uses a\n\t# relational\
    \ operator other than -.\n\tsorted=$(printf '%s\\n' $1 | sort -nr -k1.1)\n\t#\
    \ now get the minimum even\n\tmin_even=$(echo \"$sorted\" | awk '$1%2==0{if(!min\
    \ || $1<min) min=$1}END{print min}')\n\t# finally return the first field and the\
    \ index from the sorted list\n\techo \"$sorted\" | awk -v m=$min_even '$1==m{print\
    \ $1, NR; exit}'\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020364
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n# Example 2:\n\
    # Input: [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n    # here we\
    \ use a for-loop with \"in\"\n    for v in $@\n    do\n        if [ $((v % 2))\
    \ == 0 ]\n        then\n            echo $v\n            break\n        fi\n \
    \   done\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020364
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n# Example 2:\n\
    # Input: [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n  declare smallest=\"\
    \" smallest_index=\"\" smallest_index_value=\"\" i=0\n  for token in $1\n  do\n\
    \    # check for empty value\n    if [ -z \"$token\" ]; then\n      continue\n\
    \    fi\n    # check for even value\n    if [ $(( token % 2 )) -eq 0 ]; then\n\
    \      # assign the first value if it is even\n      if [ -z \"$smallest\" ];\
    \ then\n        smallest=$token\n        smallest_index=$i\n        smallest_index_value=$token\n\
    \      # if value is smaller than the assigned value, update\n      elif [ $token\
    \ -lt $smallest ]; then\n        smallest=$token\n        smallest_index=$i\n\
    \        smallest_index_value=$token\n      # if value is the same, check for\
    \ the index\n      elif [ $token -eq $smallest ]; then\n        if [ $i -lt $smallest_index\
    \ ]; then\n          smallest_index=$i\n          smallest_index_value=$token\n\
    \        fi\n      fi\n    fi\n    i=$(( i + 1 ))\n  done\n  # print the result\n\
    \  if [ -z \"$smallest_index_value\" ]; then\n    echo \"[]\"\n  else\n    echo\
    \ \"[ $smallest_index_value, $smallest_index ]\"\n  fi\n}\n\ncandidate() {\n \
    \   pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020364
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n# Example 2:\n\
    # Input: [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n    local values=($1)\n\
    \    local result=\n    local smallest_even=\n    local smallest_even_idx=\n \
    \   local idx=1\n    for n in \"${values[@]}\"; do\n        if [[ -z \"$result\"\
    \ ]]; then\n            if [[ \"$n\" -eq 0 ]]; then\n                result=\"\
    $n $idx\"\n            elif [[ \"$n\" -eq 2 ]]; then\n                result=\"\
    $n $idx\"\n                smallest_even=\"$n\"\n                smallest_even_idx=\"\
    $idx\"\n            elif [[ \"$n\" -gt 2 ]] && [[ \"$((n % 2))\" -eq 0 ]]; then\n\
    \                result=\"$n $idx\"\n                smallest_even=\"$n\"\n  \
    \              smallest_even_idx=\"$idx\"\n            fi\n        else\n    \
    \        if [[ \"$n\" -eq 0 ]]; then\n                if [[ \"${result:0:1}\"\
    \ -eq 0 ]]; then\n                    if [[ \"${result:2:1}\" -gt \"$idx\" ]];\
    \ then\n                        result=\"$n $idx\"\n                    fi\n \
    \               fi\n            elif [[ \"$n\" -eq 2 ]]; then\n              \
    \  if [[ \"${result:0:1}\" -eq 0 ]]; then\n                    result=\"$n $idx\"\
    \n                    smallest_even=\"$n\"\n                    smallest_even_idx=\"\
    $idx\"\n                elif [[ \"${result:0:1}\" -eq 2 ]]; then\n           \
    \         if [[ \"${result:2:1}\" -gt \"$idx\" ]]; then\n                    \
    \    result=\"$n $idx\"\n                        smallest_even=\"$n\"\n      \
    \                  smallest_even_idx=\"$idx\"\n                    fi\n      \
    \          else\n                    result=\"$n $idx\"\n                    smallest_even=\"\
    $n\"\n                    smallest_even_idx=\"$idx\"\n                fi\n   \
    \         elif [[ \"$n\" -gt 2 ]] && [[ \"$((n % 2))\" -eq 0 ]]; then\n      \
    \          if [[ \"${result:0:1}\" -eq 0 ]]; then\n                    result=\"\
    $n $idx\"\n                    smallest_even=\"$n\"\n                    smallest_even\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgk9shzmr.sh: line 76: syntax error near unexpected token `}''

    /tmp/tmpgk9shzmr.sh: line 76: `}''

    '
  stdout: ''
  timestamp: 1660020364
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n# Example 2:\n\
    # Input: [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\t# double up\
    \ spaces so that just numbers are separated (assuming no numbers have spaces)\n\
    \t# replace spaces with newlines and sort the even numbers only\n\t# remove leading\
    \ spaces and remove newlines (to print a single space)\n\t# if any remaining,\
    \ then print that and its index \n\tlocal newlist=$(printf \"%s\" \"$1\" | sed\
    \ 's/ /  /g' | tr ' ' '\\n' | sort -g | sed -n '/^[0-9]*[02468]$/p' | tr -d '\\\
    n' | sed 's/^ *//')\n\tif [ -n \"$newlist\" ]; then\n\t\tlocal -a vals=($newlist)\n\
    \t\techo \"[${vals[0]}, $(expr \"${#vals[@]}\" - 1)]\"\n\telse\n\t\techo \"[]\"\
    \n\tfi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\")\
    \ = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020364
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n# Example 2:\n\
    # Input: [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n    [ $# -gt\
    \ 0 ] || return\n    a=( $1 )\n    res=()\n    for i in \"${!a[@]}\"; do\n   \
    \     if [ ${a[$i]} -gt 0 ] && [ $(( ${a[$i]} % 2 )) -eq 0 ]; then\n         \
    \   if [ ${#res[@]} -eq 0 ]; then\n                res=( ${a[$i]} $i )\n     \
    \       elif [ ${a[$i]} -lt ${res[0]} ]; then\n                res=( ${a[$i]}\
    \ $i )\n            fi\n        fi\n    done\n    echo ${res[@]}\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020364
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n# Example 2:\n\
    # Input: [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\t[ $# -eq 0\
    \ ] && echo \"[]\" && return 0\n\tvalue=$(echo \"$1\" | tr ' ' '\\n' | sort -n\
    \ | grep -P \"^[0-9]*[02468]$\" | head -n 1)\n\tindex=$(echo \"$1\" | tr ' ' '\\\
    n' | grep -n \"^$value$\" | sort -t ':' -k 2n | head -n 1 | cut -d ':' -f 1)\n\
    \t[ -z \"$value\" ] && echo \"[]\" && return 0\n\techo \"[ $value, $index ]\"\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020364
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n# Example 2:\n\
    # Input: [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n    local n=\"\
    $1\"\n    local _m=\"\"\n    local _i=\"\"\n    local _w=\"\"\n    if [[ $n !=\
    \ \"\" ]]; then\n        for _w in $n; do\n            if [[ $(( _w % 2 )) -eq\
    \ 0 ]]; then\n                if [[ $_m = \"\" ]]; then\n                    _m=$_w\n\
    \                    _i=$i\n                elif [[ $_w -lt $_m ]]; then\n   \
    \                 _m=$_w\n                    _i=$i\n                fi\n    \
    \        fi\n            i=$(( i + 1 ))\n        done\n    fi\n    echo -n \"\
    [$_m, $_i]\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020364
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n# Example 2:\n\
    # Input: [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n    local arr=()\n\
    \    local lowest=$(awk '{print $1}' <<<\"$1\")\n    for v in $1; do\n       \
    \ if (( v % 2 == 0 && v < lowest )); then\n            lowest=$v\n        fi\n\
    \    done\n    for ((i=0; i<${#1}; i++)); do\n        if (( ${1:$i:1} == lowest\
    \ )); then\n            arr+=(${1:$i:1} $i)\n            break\n        fi\n \
    \   done\n    echo ${arr[@]}\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpexqn8okw.sh: line 38: ((: == lowest : syntax error: operand expected
    (error token is "== lowest ")

    '
  stdout: ''
  timestamp: 1660020364
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n# Example 2:\n\
    # Input: [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n  # List of even\
    \ numbers\n  list=()\n  # Loop through list\n  for x in $1\n  do\n    # Test if\
    \ number is even\n    if [ $(($x % 2)) == 0 ]\n    then\n      # Add value to\
    \ list of even numbers\n      list+=($x)\n    fi\n  done\n  # Test if list is\
    \ empty\n  if [ ${#list[@]} == 0 ]\n  then\n    # Return empty list\n    echo\
    \ \"[]\"\n  else\n    # Get smallest value in list\n    smallest=${list[0]}\n\
    \    # Loop through list\n    for x in \"${list[@]}\"\n    do\n      # Test if\
    \ value is smaller than smallest\n      if [ $x -lt $smallest ]\n      then\n\
    \        # Update smallest\n        smallest=$x\n      fi\n    done\n    # Get\
    \ index of smallest value\n    index=`echo $1 | tr ' ' '\\n' | grep -n $smallest\
    \ | cut -d ':' -f 1`\n    # Return [ smallest, index ]\n    echo \"[ $smallest,\
    \ $index ]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020364
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n# Example 2:\n\
    # Input: [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n  local -a a\n\
    \  IFS=\" \" read -r -a a <<< \"$1\"\n  local smallest_even_value=$((2**31))\n\
    \  local smallest_even_index=-1\n  for i in \"${!a[@]}\"; do\n    if [[ ${a[$i]}\
    \ -gt 0 && $((a[$i] % 2)) -eq 0 ]]; then\n      if [[ ${a[$i]} -lt $smallest_even_value\
    \ ]]; then\n        smallest_even_value=${a[$i]}\n        smallest_even_index=$i\n\
    \      fi\n    fi\n  done\n  if [[ $smallest_even_index -eq -1 ]]; then\n    echo\
    \ \"[]\"\n  else\n    echo \"[$smallest_even_value, $smallest_even_index]\"\n\
    \  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\")\
    \ = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020364
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n# Example 2:\n\
    # Input: [1,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index. \n# Example 3:\n# Input: []\n# Output: []\n# Example\
    \ 4:\n# Input: [5, 0, 3, 0, 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n# so we will choose the first zero, which\
    \ has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# *\
    \ 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n\tdeclare -a\
    \ array=(\"$@\")\n\tdeclare -i mindex=${#array[@]}\n\tdeclare -i mvalue=-1\n\t\
    declare -i index=0\n\tfor value in \"${array[@]}\"; do\n\t\tif (( $value % 2 ==\
    \ 0 && $value < $mvalue )); then\n\t\t\tmvalue=$value\n\t\t\tmindex=$index\n\t\
    \tfi\n\t\t((index++))\n\tdone\n\tif (( $mvalue >= 0 )); then\n\t\techo \"[$mvalue,\
    \ $mindex]\"\n\telse\n\t\techo \"[]\"\n\tfi\n}\n\ncandidate() {\n    pluck \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp99kx4m6g.sh: line 35: ((: 4 2 3 % 2 == 0 && 4 2 3 < -1 : syntax
    error in expression (error token is "2 3 % 2 == 0 && 4 2 3 < -1 ")

    '
  stdout: ''
  timestamp: 1660020364
