name: HumanEval_43_pairs_sum_to_zero
language: sh
prompt: "#!/bin/bash\n# pairs_sum_to_zero takes a list of integers as an input.\n\
  # it returns True if there are two distinct elements in the list that\n# sum to\
  \ zero, and False otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n#\
  \ >>> pairs_sum_to_zero([1, 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2,\
  \ 3, 7])\n# False\n# >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n\
  # False\n#\n# $1 is a space-separated list\npairs_sum_to_zero() {\n"
tests: "}\n\ncandidate() {\n    pairs_sum_to_zero \"$@\"\n}\n\nset -e\nrun_test()\
  \ {\n    [[ $(candidate \"1 3 5 0\") = \"false\" ]]\n    [[ $(candidate \"1 3 -2\
  \ 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 7\") = \"false\" ]]\n    [[ $(candidate\
  \ \"2 4 -5 3 5 7\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"false\" ]]\n  \
  \  [[ $(candidate \"-3 9 -1 3 2 30\") = \"true\" ]]\n    [[ $(candidate \"-3 9 -1\
  \ 3 2 31\") = \"true\" ]]\n    [[ $(candidate \"-3 9 -1 4 2 30\") = \"false\" ]]\n\
  \    [[ $(candidate \"-3 9 -1 4 2 31\") = \"false\" ]]\n}\n\nrun_test"
completions: ["\t# your code here\n\tif [[ $# == 1 ]]; then\n\t\tif [[ $(echo \"$@\"\
    \ | wc -w) == 1 ]]; then\n\t\t\treturn 1\n\t\tfi\n\t\tfor (( i=1; i<$(echo \"\
    $@\" | wc -w); i++ )); do\n\t\t\teval a${i}=\"$(echo \"$@\" | cut -d ' ' -f $i)\"\
    \n\t\tdone\n\t\tfor (( i=1; i<$(echo \"$@\" | wc -w); i++ )); do\n\t\t\teval a=\\\
    $a${i}\n\t\t\t# echo $a\n\t\t\tfor (( j=i+1; j<=$(echo \"$@\" | wc -w); j++ ));\
    \ do\n\t\t\t\teval b=\\$a${j}\n\t\t\t\t# echo $b\n\t\t\t\tif [[ $(expr $a + $b)\
    \ == 0 ]]; then\n\t\t\t\t\treturn 0\n\t\t\t\tfi\n\t\t\tdone\n\t\tdone\n\t\treturn\
    \ 1\n\telse\n\t\techo \"Please enter one argument\"\n\tfi", "  local -a numbers=($1)\n\
    \  local -a negative_numbers=()\n  local seen_numbers=()\n  local negative_seen_numbers=()\n\
    \  local current_number\n  local negative_number\n  local is_zero_sum\n  is_zero_sum=0\n\
    \  for current_number in \"${numbers[@]}\"; do\n    if [[ ${current_number} -lt\
    \ 0 ]]; then\n      negative_numbers+=(${current_number})\n    fi\n  done\n  for\
    \ current_number in \"${numbers[@]}\"; do\n    if [[ \"${seen_numbers[*]}\" ==\
    \ *\"${current_number}\"* ]]; then\n      continue\n    fi\n    if [[ ${current_number}\
    \ -eq 0 ]]; then\n      if [[ \"${seen_numbers[*]}\" == *\"0\"* ]]; then\n   \
    \     is_zero_sum=1\n        break\n      fi\n      seen_numbers+=(${current_number})\n\
    \      continue\n    fi\n    if [[ ${current_number} -gt 0 ]]; then\n      negative_number=$((\
    \ 0 - ${current_number} ))\n      if [[ \"${negative_numbers[*]}\" == *\"${negative_number}\"\
    * ]]; then\n        is_zero_sum=1\n        break\n      fi\n    fi\n    seen_numbers+=(${current_number})\n\
    \  done\n  for current_number in \"${negative_numbers[@]}\"; do\n    if [[ \"\
    ${negative_seen_numbers[*]}\" == *\"${current_number}\"* ]]; then\n      continue\n\
    \    fi\n    if [[ ${current_number} -lt 0 ]]; then\n      negative_number=$((\
    \ 0 - ${current_number} ))\n      if [[ \"${numbers[*]}\" == *\"${negative_number}\"\
    * ]]; then\n        is_zero_sum=1\n        break\n      fi\n    fi\n    negative_seen_numbers+=(${current_number})\n\
    \  done\n  if [[ ${is_zero_sum} -eq 1 ]]; then\n    echo 'True'\n  else\n    echo\
    \ 'False'\n  fi", "  for i in $1; do\n    for j in $1; do\n      if [ $i != $j\
    \ ]; then\n        [[ $(($i + $j)) -eq 0 ]] && echo true && return\n      fi\n\
    \    done\n  done\n  echo false", "    local numbers=($1)\n    local i j k sum\n\
    \n    ((${#numbers[@]} >= 2)) || return 1\n\n    for ((i=0; i<${#numbers[@]};\
    \ i++)); do\n        for ((j=i+1; j<${#numbers[@]}; j++)); do\n            ((sum\
    \ = numbers[i] + numbers[j]))\n            ((sum == 0)) && return 0\n        done\n\
    \    done\n\n    return 1", "  local list=\"$1\"\n  local n\n  local i\n  # read\
    \ all the integers into array n\n  while read -r n; do\n    n[i++]=$n\n  done\
    \ <<< \"$list\"\n  local x\n  local y\n  # for every integer x in the list, check\
    \ if -x is also in the list\n  for ((i=0; i<${#n[@]}; i++)); do\n    x=${n[i]}\n\
    \    for ((j=0; j<${#n[@]}; j++)); do\n      y=${n[j]}\n      if [[ $x = -$y ]];\
    \ then\n        echo \"True\"\n        return\n      fi\n    done\n  done\n  echo\
    \ \"False\"", "  # Complete this function\n  for i in $1; do\n    for j in $1;\
    \ do\n      if [[ \"$i\" -eq \"$j\" ]]; then\n        continue\n      fi\n   \
    \   if [[ $((i + j)) -eq 0 ]]; then\n        echo True\n        return\n     \
    \ fi\n    done\n  done\n  echo False", "    numbers=()\n    for number in $1;\
    \ do\n        numbers+=(\"$number\")\n    done\n    for i in $(seq 0 $((${#numbers[@]}\
    \ - 1))); do\n        for j in $(seq 0 $((${#numbers[@]} - 1))); do\n        \
    \    if [[ $i -ne $j ]]; then\n                if [[ $((numbers[$i] + numbers[$j]))\
    \ -eq 0 ]]; then\n                    return 0\n                fi\n         \
    \   fi\n        done\n    done\n    return 1", "\tall=$(echo $1 | tr \" \" \"\\\
    n\")\n\tfor first in $all\n\tdo\n\t\tfor second in $all\n\t\tdo\n\t\t\tif [ $first\
    \ != $second ] && [ $((first + second)) -eq 0 ]\n\t\t\tthen\n\t\t\t\techo \"True\"\
    \n\t\t\t\treturn\n\t\t\tfi\n\t\tdone\n\tdone\n\techo \"False\"", "    # Your solution\
    \ here\n    if [ -z \"$1\" ]; then\n        return 0\n    fi\n    for i in $@;\
    \ do\n        for j in $@; do\n            if [ \"$i\" -eq \"$j\" ]; then\n  \
    \              continue\n            fi\n            if [ \"$((i + j))\" -eq 0\
    \ ]; then\n                return 0\n            fi\n        done\n    done\n\
    \    return 1", "    local elem_array=($1)\n    local length=${#elem_array[@]}\n\
    \    local first_elem\n    local second_elem\n    local sum\n    local index\n\
    \    local index2\n    for index in `seq 0 $((length-1))`; do\n        first_elem=${elem_array[$index]}\n\
    \        for index2 in `seq $((index+1)) $((length-1))`; do\n            second_elem=${elem_array[$index2]}\n\
    \            sum=$((first_elem+second_elem))\n            if [ $sum -eq 0 ]; then\n\
    \                echo 'True'\n                return\n            fi\n       \
    \ done\n    done\n    echo 'False'", '    return 0', "    local -i input=( $1\
    \ )\n    for ((i=0; i<${#input[@]}; i++)); do\n        for ((j=i+1; j<${#input[@]};\
    \ j++)); do\n            if [[ ${input[i]} + ${input[j]} -eq 0 ]]; then\n    \
    \            echo \"True\"\n                return\n            fi\n        done\n\
    \    done\n    echo \"False\"", "  # your code goes here\n  for i in $(seq 1 $(($#-1)))\n\
    \  do\n    for j in $(seq $(($i+1)) $#)\n    do\n      if [ $((${@:$i:1}+${@:$j:1}))\
    \ -eq 0 ]\n      then\n        echo \"True\"\n        return\n      fi\n    done\n\
    \  done\n  echo \"False\"", "  local array=(\"$@\")\n  local length=${#array[@]}\n\
    \  local i j\n  for ((i=0; i<$length; i++)); do\n    for ((j=i+1; j<$length; j++));\
    \ do\n      if [ $((${array[$i]} + ${array[$j]})) == 0 ]; then\n        echo \"\
    True\"\n        return\n      fi\n    done\n  done\n  echo \"False\"", "  sort\
    \ $1 |\n  uniq -d |\n  while read n; do\n    if echo $1 | grep -qw \"-$n\"; then\n\
    \      echo \"True\"\n      return\n    fi\n  done\n  echo \"False\"", "  res=0\n\
    \  for (( i=0; i<$#; i++ )); do\n    for (( j=i+1; j<$#; j++ )); do\n      if\
    \ [ $(( $1 + ${!j} )) -eq 0 ]; then\n        res=1\n      fi\n    done\n    shift\n\
    \  done\n  echo $res", "  # Complete this function\n  # The function takes in\
    \ a list of numbers\n  # It returns either True or False\n\n  # declare a hash\
    \ table (k,v) pair\n  # declare a loop, for each element in the array\n  #  -\
    \ if the element is in the hash table then return True\n  #  - if not, put the\
    \ element as the key, and put the opposite of the element as the value\n  # return\
    \ False\n  \n  declare -A pair_table\n  list=$@\n  array=($list)\n  for element\
    \ in ${array[@]}\n  do\n    if [ ${pair_table[$element]} ]\n    then\n      return\
    \ 0\n    else\n      pair_table[$element]=$(($element * -1))\n    fi\n  done\n\
    \  return 1", "    echo \"$1\" | awk '\n        BEGIN {\n            sum = 0;\n\
    \        }\n        {\n            for (i = 1; i <= NF; i++) {\n             \
    \   numbers[$i] = $i;\n            }\n        }\n        END {\n            for\
    \ (i in numbers) {\n                if (numbers[-i] != \"\") {\n             \
    \       sum++;\n                }\n            }\n            if (sum > 0) {\n\
    \                print \"True\";\n            } else {\n                print\
    \ \"False\";\n            }\n        }\n    '", "    if [ $# -le 1 ]; then\n \
    \       return 1\n    fi\n    for i in $@; do\n        shift 1\n        for j\
    \ in $@; do\n            if [ $i + $j -eq 0 ]; then\n                return 0\n\
    \            fi\n        done\n    done\n    return 1", "  local -a num_list\n\
    \  IFS=' ' read -a num_list <<< \"$1\"\n  for i in \"${num_list[@]}\"; do\n  \
    \  for j in \"${num_list[@]}\"; do\n      if [ $i -eq $j ]; then\n        continue\n\
    \      fi\n      if [ $((i + j)) -eq 0 ]; then\n        echo \"True\"\n      \
    \  return\n      fi\n    done\n  done\n  echo \"False\""]
stop_tokens:
- "\n}"
