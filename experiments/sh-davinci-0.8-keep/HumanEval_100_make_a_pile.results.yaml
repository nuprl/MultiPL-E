language: sh
name: HumanEval_100_make_a_pile
results:
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> make_a_pile(3)\n# [3, 5, 7]\n#\n# $1 is an integer\nmake_a_pile()\
    \ {\n  n=$1\n  out=()\n  for (( i=0; i<$n; i++ )); do\n    out[$i]=$(( $n - $i\
    \ ))\n    if [[ $(( $n - $i ))%2 -eq 0 ]]; then\n      out[$i]=$(( ${out[$i]}\
    \ + 1 ))\n    fi\n  done\n  printf \"%s\\n\" \"${out[@]}\"\n}\n\ncandidate() {\n\
    \    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\")\
    \ = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020285
- exit_code: 0
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> make_a_pile(3)\n# [3, 5, 7]\n#\n# $1 is an integer\nmake_a_pile()\
    \ {\n    local n=$1\n    local num_of_stones=()\n    local i\n    for ((i=0; i<n;\
    \ i++)); do\n        num_of_stones[$i]=$((n+2*i))\n    done\n    echo \"${num_of_stones[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> make_a_pile(3)\n# [3, 5, 7]\n#\n# $1 is an integer\nmake_a_pile()\
    \ {\n    local n=\"$1\"\n    local arr=( \"$n\" )\n    local next\n\n    while\
    \ [ \"$n\" -gt 1 ]; do\n        n=$((n - 1))\n        if [ $((n % 2)) -eq 0 ];\
    \ then\n            next=$((n + 2))\n        else\n            next=$((n + 1))\n\
    \        fi\n        arr+=( \"$next\" )\n    done\n\n    printf \"%s\\n\" \"${arr[@]}\"\
    \n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> make_a_pile(3)\n# [3, 5, 7]\n#\n# $1 is an integer\nmake_a_pile()\
    \ {\n  local i=0 stones=()\n  while [ $i -lt $1 ]; do\n    if [ $((i % 2)) -eq\
    \ 0 ]; then\n      stones+=( $((i + 2)) )\n    else\n      stones+=( $((i + 1))\
    \ )\n    fi\n    i=$((i + 1))\n  done\n  echo \"${stones[@]}\"\n}\n\ncandidate()\
    \ {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> make_a_pile(3)\n# [3, 5, 7]\n#\n# $1 is an integer\nmake_a_pile()\
    \ {\n    local n=$1\n    local result=\"\"\n    for ((i=1; i<=n; i++)); do\n \
    \       if [[ $((i%2)) -eq 0 ]]; then\n            result+=\" $((i+1))\"\n   \
    \     else\n            result+=\" $((i+2))\"\n        fi\n    done\n    echo\
    \ \"$result\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"\
    4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate\
    \ \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16\
    \ 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> make_a_pile(3)\n# [3, 5, 7]\n#\n# $1 is an integer\nmake_a_pile()\
    \ {\n  local n=$1\n  local res=\"\"\n  local i\n  for ((i=1; i<=$n; i++)); do\n\
    \    res+=\"$i \"\n    ((i%2)) && ((++i))\n  done\n  echo $res\n}\n\ncandidate()\
    \ {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020285
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> make_a_pile(3)\n# [3, 5, 7]\n#\n# $1 is an integer\nmake_a_pile()\
    \ {\n    n=$1\n    result=()\n    while [ $n -gt 0 ]; do\n        result+=(\"\
    $n\")\n        # if n is odd, then n + 2 is even, and vice versa\n        n=$((\
    \ n + (n+1) % 2 ))\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n\
    \    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\")\
    \ = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=16 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=12 encoding='utf-8'>
  timestamp: 1660020290
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> make_a_pile(3)\n# [3, 5, 7]\n#\n# $1 is an integer\nmake_a_pile()\
    \ {\n  if (( $1 <= 0 )); then\n    return 1\n  fi\n  result=($1)\n  x=$(( $1 %\
    \ 2 ))\n  if (( $x == 0 )); then\n    x=$(( $1 + 2 ))\n  else\n    x=$(( $1 +\
    \ 1 ))\n  fi\n  while (( $x <= $1 * 2 )); do\n    result+=($x)\n    x=$(( $x +\
    \ 2 ))\n  done\n  echo ${result[@]}\n}\n\ncandidate() {\n    make_a_pile \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[\
    \ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11\
    \ 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020285
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> make_a_pile(3)\n# [3, 5, 7]\n#\n# $1 is an integer\nmake_a_pile()\
    \ {\n  local -i i input output\n\n  input=\"$1\"\n  i=0\n  output[$i]=\"$input\"\
    \n  while [ \"$input\" -gt 0 ]; do\n    if [ $((input%2)) -eq 0 ]; then\n    \
    \  let input+=1\n    else\n      let input+=2\n    fi\n    let i+=1\n    output[$i]=\"\
    $input\"\n  done\n  echo \"${output[@]}\"\n}\n\ncandidate() {\n    make_a_pile\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n\
    \    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5\
    \ 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=22 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=20 encoding='utf-8'>
  timestamp: 1660020290
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> make_a_pile(3)\n# [3, 5, 7]\n#\n# $1 is an integer\nmake_a_pile()\
    \ {\n    # Write your code here\n    if [[ $1 -lt 1 ]]; then\n        echo \"\
    Invalid Input!\"\n        return 1\n    fi\n    local -a result_array\n    result_array+=(\"\
    $1\")\n    while [[ ${result_array[-1]} -gt 1 ]]; do\n        if [[ $(( ${result_array[-1]}\
    \ % 2 )) -eq 0 ]]; then\n            result_array+=(\"$(( ${result_array[-1]}\
    \ - 1 ))\")\n        else\n            result_array+=(\"$(( ${result_array[-1]}\
    \ + 1 ))\")\n        fi\n    done\n    echo \"${result_array[@]}\"\n}\n\ncandidate()\
    \ {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=14 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=4 encoding='utf-8'>
  timestamp: 1660020290
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> make_a_pile(3)\n# [3, 5, 7]\n#\n# $1 is an integer\nmake_a_pile()\
    \ {\n  if [ \"$1\" -gt 0 ]; then\n    local pile\n    #loop through $1 times,\
    \ storing the result in pile\n    for ((i=1; i<=$1; i++)); do\n      # if $i is\
    \ odd\n      if [ $(($i % 2)) -ne 0 ]; then\n        pile+=($i)\n      # if $i\
    \ is even\n      else\n        pile+=($(( $i + 1 )))\n      fi\n    done\n   \
    \ echo \"${pile[@]}\"\n  else\n    echo \"You must enter a positive integer as\
    \ an argument\"\n  fi\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"\
    4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[\
    \ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"\
    8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> make_a_pile(3)\n# [3, 5, 7]\n#\n# $1 is an integer\nmake_a_pile()\
    \ {\n    local n=$1\n    local level=1\n    local stones=0\n    local ret\n\n\
    \    while ((n > 0)); do\n        stones=$((level * (level + 1)))\n        ret+=($stones)\n\
    \        ((n--))\n        ((level++))\n    done\n\n    echo \"${ret[@]}\"\n}\n\
    \ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> make_a_pile(3)\n# [3, 5, 7]\n#\n# $1 is an integer\nmake_a_pile()\
    \ {\n    # Returns the next number (odd or even) depending on the given number\n\
    \    next_num() {\n        if [ $(( $1 % 2 )) -eq 0 ]; then\n            echo\
    \ $(($1 + 2))\n        else\n            echo $(($1 + 1))\n        fi\n    }\n\
    \n    stones_in_level=()\n    current_level=1\n    stones=1\n    while [ $current_level\
    \ -le $1 ]; do\n        stones_in_level+=($stones)\n        current_level=$(($current_level\
    \ + 1))\n        stones=$(next_num $stones)\n    done\n    echo ${stones_in_level[@]}\n\
    }\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\"\
    ) = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20\
    \ 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> make_a_pile(3)\n# [3, 5, 7]\n#\n# $1 is an integer\nmake_a_pile()\
    \ {\n  local n=$1\n  if [[ ! $n =~ ^[0-9]+$ ]]; then\n    echo \"Invalid input.\"\
    \n    return\n  fi\n  if [[ $n -lt 1 ]]; then\n    echo \"The input number must\
    \ be positive.\"\n    return\n  fi\n  local stack=()\n  local i\n  local stones\n\
    \  for ((i=0; i<n; i++)); do\n    stones=$((i * 2 + 1))\n    if [[ $((i%2)) -eq\
    \ 0 ]]; then\n      stones=$((stones + 1))\n    fi\n    stack+=($stones)\n  done\n\
    \  printf '%s\\n' \"${stack[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate\
    \ \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n \
    \   [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\")\
    \ = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> make_a_pile(3)\n# [3, 5, 7]\n#\n# $1 is an integer\nmake_a_pile()\
    \ {\n    # Complete the function here\n    echo \"Not implemented\"\n}\n\ncandidate()\
    \ {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> make_a_pile(3)\n# [3, 5, 7]\n#\n# $1 is an integer\nmake_a_pile()\
    \ {\n  local -r number=\"$1\"\n  local -r half_number=$((number / 2))\n  local\
    \ -r level_count=$((number % 2))\n  local -r levels=$((number + 1))\n  local -r\
    \ odd_number=$((number + 2))\n  local -r even_number=$((number + 4))\n  local\
    \ -r initial=$(\n    eval 'echo {'\"$number\"'..'\"$half_number\"',}'\n  )\n \
    \ local -r odd_pair=$(\n    eval 'echo {'\"$odd_number\"'..'\"$half_number\"',}'\n\
    \  )\n  local -r even_pair=$(\n    eval 'echo {'\"$even_number\"'..'\"$half_number\"\
    ',}'\n  )\n  local -r odd_list=\"$(sed 's/ /,/g' <<< \"$odd_pair\")\"\n  local\
    \ -r even_list=\"$(sed 's/ /,/g' <<< \"$even_pair\")\"\n  local -r odd=\"$(sed\
    \ 's/ /,/g' <<< \"$initial,$odd_list\")\"\n  local -r even=\"$(sed 's/ /,/g' <<<\
    \ \"$initial,$even_list\")\"\n  echo -n '['\n  if [[ \"$level_count\" -eq 0 ]];\
    \ then\n    eval 'echo {'\"$even\"',}'\n  else\n    eval 'echo {'\"$odd\"',}'\n\
    \  fi\n  echo ']'\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"\
    4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate\
    \ \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16\
    \ 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> make_a_pile(3)\n# [3, 5, 7]\n#\n# $1 is an integer\nmake_a_pile()\
    \ {\n    local n=\"$1\"\n    local stones\n    local num\n    local res=()\n \
    \   for ((i=0; i<n; i++)); do\n        num=$((i+1))\n        stones=$((num*2-1))\n\
    \        if (((num%2)==0)); then\n            stones=$((stones+1))\n        fi\n\
    \        res+=(\"$stones\")\n    done\n    echo \"${res[@]}\"\n}\n\ncandidate()\
    \ {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\"\
    \ ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> make_a_pile(3)\n# [3, 5, 7]\n#\n# $1 is an integer\nmake_a_pile()\
    \ {\n    local n=$1\n    local levels=()\n    local stones=0\n    for ((level=0;\
    \ level<n; level++)); do\n        stones=$((n+(level%2==0?1:-1)))\n        levels+=($stones)\n\
    \    done\n    printf '%s\\n' \"${levels[@]}\"\n}\n\ncandidate() {\n    make_a_pile\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n\
    \    [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5\
    \ 7 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> make_a_pile(3)\n# [3, 5, 7]\n#\n# $1 is an integer\nmake_a_pile()\
    \ {\n  local n=$1\n  local pile=(\"$n\")\n  local i=0\n  while [[ $i -lt $n ]];\
    \ do\n    local last=$(( ${pile[$i]} - 1 ))\n    local next=$(( $last % 2 == 0\
    \ ? $last + 2 : $last + 1 ))\n    pile[$(( i + 1 ))]=$next\n    i=$(( i + 1 ))\n\
    \  done\n  echo \"${pile[@]}\"\n}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate\
    \ \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n \
    \   [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\")\
    \ = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020285
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\n# The first level has n stones.\n# The number of stones\
    \ in the next level is:\n# - the next odd number if n is odd.\n# - the next even\
    \ number if n is even.\n# Return the number of stones in each level in a list,\
    \ where element at index\n# i represents the number of stones in the level (i+1).\n\
    # Examples:\n# >>> make_a_pile(3)\n# [3, 5, 7]\n#\n# $1 is an integer\nmake_a_pile()\
    \ {\n  if [ $1 -eq 0 ]; then\n    echo 1\n  else\n    local stn=1\n    local list=()\n\
    \    while [ $stn -lt $1 ]; do\n      list+=( $stn )\n      ((stn += 2))\n   \
    \ done\n    echo \"${list[@]}\"\n  fi\n}\n\ncandidate() {\n    make_a_pile \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"3 5 7\" ]]\n  \
    \  [[ $(candidate \"4\") = \"4 6 8 10\" ]]\n    [[ $(candidate \"5\") = \"5 7\
    \ 9 11 13\" ]]\n    [[ $(candidate \"6\") = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"8 10 12 14 16 18 20 22\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020285
