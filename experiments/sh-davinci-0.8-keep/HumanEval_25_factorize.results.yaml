language: sh
name: HumanEval_25_factorize
results:
- exit_code: 0
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n  local number=$1\n  local divider=2\n \
    \ local factors\n  while [ $number -gt 1 ]; do\n    if [ $((number % divider))\
    \ -eq 0 ]; then\n      number=$((number / divider))\n      factors+=($divider)\n\
    \    else\n      divider=$((divider + 1))\n    fi\n  done\n  echo ${factors[@]}\n\
    }\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020311
- exit_code: 0
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    # your code here\n    if [ $1 -lt 0\
    \ ]; then\n        echo \"negative number.\"\n        exit 1\n    fi\n    num=$1\n\
    \    i=2\n    list_factor=\"\"\n    while [ $i -le $num ]; do\n        if [ $(($num\
    \ % $i)) -eq 0 ]; then\n            num=$(($num / $i))\n            list_factor=\"\
    $list_factor $i\"\n        else\n            i=$(($i + 1))\n        fi\n    done\n\
    \    echo ${list_factor[@]}\n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"\
    4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020311
- exit_code: 0
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    # Try to use factors command, if available.\n\
    \    if hash factors 2>/dev/null; then\n        factors $1 | cut -d \":\" -f 2\
    \ | tr \" \" \"\\n\" | sort -n\n    else\n        # Without factors, loop from\
    \ 2 to sqrt($1) until $1 is 1.\n        local i=$1\n        local factors=\"\"\
    \n        local d=2\n        while [ \"$i\" -gt 1 ]; do\n            while [ \"\
    $(($i % $d))\" -eq 0 ]; do\n                factors=\"$factors $d\"\n        \
    \        i=$(($i / $d))\n            done\n            d=$(($d + 1))\n       \
    \ done\n        echo $factors\n    fi\n}\n\ncandidate() {\n    factorize \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020311
- exit_code: -1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    integer=$1\n    # loop through all numbers\
    \ from 2 to $integer, in steps of 1\n    for (( n=2; n<=$integer; n++ )); do\n\
    \        # if number divides $integer without a remainder\n        if (( $integer\
    \ % $n == 0 )); then\n            # get all prime factors of $n\n            prime_factors=($(factorize\
    \ $n))\n            # print out factor(s)\n            for i in ${prime_factors[@]};\
    \ do\n                echo $i\n            done\n            # and update the\
    \ remaining integer\n            integer=$((integer/n))\n            # and reset\
    \ $n to 1\n            n=1\n        fi\n    done\n}\n\ncandidate() {\n    factorize\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n\
    \    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3\
    \ 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[\
    \ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"\
    2 3 3\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=24 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=22 encoding='utf-8'>
  timestamp: 1660020316
- exit_code: 0
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    #n=25\n    #n=70\n    #n=8\n    #n=21\n\
    \n    # $1=70\n    n=$1\n    # n=2\n    # n=4\n    # n=7\n    prime=2\n    # answer=()\n\
    \    # $answe=25\n    # answer=70\n    # answer=8\n    # answer=21\n    answer=()\n\
    \    # $n=25\n    # n=70\n    # n=8\n    # n=21\n    while [ $n -gt 1 ]\n    do\n\
    \        # $n=70\n        # n=8\n        # n=5\n        # n=2\n        # prime=2\n\
    \        # prime=3\n        # prime=5\n        # prime=7\n        while [ $((\
    \ n % prime )) -eq 0 ]\n        do\n            # $n=70\n            # n=35\n\
    \            # n=10\n            # n=5\n            # $prime=2\n            #\
    \ prime=2\n            # prime=2\n            # prime=2\n            answer+=($prime)\n\
    \            # $answer=2\n            # answer=2 2\n            # answer=2 2 2\n\
    \            # answer=2 2 2 2\n            n=$(( n / prime ))\n            # $n=35\n\
    \            # n=10\n            # n=5\n            # n=2\n        done\n    \
    \    # $prime=2\n        # prime=3\n        # prime=5\n        # prime=7\n   \
    \     prime=$(( prime + 1 ))\n        # $prime=3\n        # prime=4\n        #\
    \ prime=6\n        # prime=8\n    done\n    # answer=2 2 2 2\n    # answer=2 2\
    \ 5 7\n    # answer=2 2 2\n    # answer=3 7\n    echo \"${answer[@]}\"\n}\n\n\
    candidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020311
- exit_code: -1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    if [[ ! $1 =~ ^-?[0-9]+$ ]]; then\n\
    \        echo \"Error! Argument must be integer.\"\n        exit 1\n    fi\n \
    \   if [[ $1 -lt 2 ]]; then\n        echo \"Error! Input should be greater than\
    \ 1.\"\n        exit 1\n    fi\n    if [[ $1 -eq 2 ]]; then\n        echo $1\n\
    \        exit 0\n    fi\n    if [[ $1 -gt 2 ]]; then\n        prime=2\n      \
    \  while [[ $(($1 % $prime)) -eq 0 ]]; do\n            echo $prime\n         \
    \   let $1/=$prime\n        done\n        let prime+=1\n        while [[ $prime\
    \ -lt $1 ]]; do\n            if [[ $(($1 % $prime)) -eq 0 ]]; then\n         \
    \       echo $prime\n                let $1/=$prime\n            else\n      \
    \          let prime+=1\n            fi\n        done\n        if [[ $1 -ne 1\
    \ ]]; then\n            echo $1\n        fi\n    fi\n}\n\ncandidate() {\n    factorize\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n\
    \    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3\
    \ 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[\
    \ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"\
    2 3 3\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=20 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=18 encoding='utf-8'>
  timestamp: 1660020316
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local num=$1\n    i=2\n    while [[\
    \ $num -ne 1 ]]; do\n        if [[ $(( num % i )) -eq 0 ]]; then\n           \
    \ echo -n \"$i \"\n            num=$(( num / i ))\n        else\n            i=$((\
    \ i + 1 ))\n        fi\n    done\n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020311
- exit_code: -1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    echo \"$1\" | awk '{ print int($1^(1/2))\
    \ }' | while read n; do\n        if [[ 0 -eq $(expr $1 % $n) ]]; then\n      \
    \      echo $n\n            factorize $(expr $1 / $n)\n            exit\n    \
    \    fi\n    done\n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\"\
    \ ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"\
    3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate\
    \ \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19\
    \ 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=6 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=10 encoding='utf-8'>
  timestamp: 1660020316
- exit_code: 2
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    # 1. Create a function 'is_prime', which\
    \ returns:\n    # - true if number is prime\n    # - false if number is not prime\n\
    \    # - false if number is not integer\n    # 1.1. Check, that number is integer\n\
    \    [[ \"$1\" =~ ^-?[0-9]+$ ]] || return 1\n    # 1.2. Check, that number is\
    \ prime\n    is_prime() {\n        # 1.2.1. 1 is not prime\n        if [[ \"$1\"\
    \ -eq 1 ]]; then\n            return 1\n        fi\n        # 1.2.2. If any number\
    \ from 2 to n-1 divides n then n is not prime\n        # For example, if n=5 and\
    \ any number from 2 to 4 divides 5, then n is not prime\n        # If any number\
    \ from 2 to 4 doesn't divide 5, then n is prime\n        # Note: range 2 to n-1\
    \ is equivalent to 2 to sqrt(n)\n        max_check_n=$(($1/2))\n        # 1.2.3.\
    \ Check, that n is divided by any number from 2 to sqrt(n)\n        for (( i=2;\
    \ i<=max_check_n; i++ )); do\n            # 1.2.3.1. If any number from 2 to sqrt(n)\
    \ divides n then n is not prime\n            if [[ $(( $1 % $i )) -eq 0 ]]; then\n\
    \                return 1\n            fi\n        done\n        # 1.2.4. Otherwise\
    \ n is prime\n        return 0\n    }\n    # 2. Create a function 'find_first_prime_factor',\
    \ which returns first prime factor of given number\n    # 2.1. If given number\
    \ equals 1, then 1 is the first prime factor\n    # 2.2. Otherwise if given number\
    \ is prime, then given number is the first prime factor\n    if [[ \"$1\" -eq\
    \ 1 ]]; then\n        echo 1\n        return 0\n    elif is_prime \"$1\"; then\n\
    \        echo \"$1\"\n        return 0\n    fi\n    # 2.3. Otherwise find first\
    \ prime factor of given number\n    # 2.3.1. Check, that given number is not 1\
    \ and is not prime\n    [[\n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"\
    4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpevyxnied.sh: line 54: unexpected token `newline'', conditional
    binary operator expected

    /tmp/tmpevyxnied.sh: line 54: syntax error near `}''

    /tmp/tmpevyxnied.sh: line 54: `}''

    '
  stdout: ''
  timestamp: 1660020311
- exit_code: -1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n  if [ $1 -le 0 ]; then\n    echo \"Use\
    \ positive integer numbers\"\n    return\n  fi\n  i=2\n  result=\"\"\n  while\
    \ [ $i -le $1 ]; do\n    if [ $(($1 % $i)) -eq 0 ]; then\n      result=\"$result\
    \ $i\"\n      $1=$(($1 / $i))\n    else\n      ((i++))\n    fi\n  done\n  echo\
    \ $result\n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n\
    \    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\"\
    \ ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\"\
    ) = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n\
    \    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=25 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=12 encoding='utf-8'>
  timestamp: 1660020316
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local NUM=$1\n    local FACTORS=\"\"\
    \n    local DIVISOR=2\n    local PRIME=\"true\"\n    local NUM_DIVISOR=0\n   \
    \ local NUM_FACTORS=0\n    local FACTOR=\"\"\n    local FUNC_RET=\"\"\n\n    #\
    \ Your code here\n    while [ $NUM -gt 1 ]; do\n        PRIME=\"true\"\n     \
    \   for (( i=2; i<$DIVISOR; i++ ))\n        do\n            if [ $(( $DIVISOR\
    \ % $i )) -eq 0 ]; then\n                PRIME=\"false\"\n                break\n\
    \            fi\n        done\n        if [ $PRIME == \"true\" ]; then\n     \
    \       while [ $(( $NUM % $DIVISOR )) -eq 0 ]; do\n                NUM=$(( $NUM\
    \ / $DIVISOR ))\n                FACTORS=\"$FACTORS $DIVISOR\"\n            done\n\
    \        fi\n        DIVISOR=$(( $DIVISOR + 1 ))\n    done\n\n    # Convert FACTORS\
    \ string to array\n    IFS=' ' read -ra FACTORS_ARRAY <<< \"$FACTORS\"\n    NUM_FACTORS=${#FACTORS_ARRAY[@]}\n\
    \n    # Remove duplicates and count the number of occurrences of each unique number\n\
    \    for (( i=0; i<$NUM_FACTORS; i++ ))\n    do\n        NUM_DIVISOR=0\n     \
    \   FACTOR=${FACTORS_ARRAY[$i]}\n        for (( j=0; j<$NUM_FACTORS; j++ ))\n\
    \        do\n            if [ $FACTOR -eq ${FACTORS_ARRAY[$j]} ]; then\n     \
    \           (( NUM_DIVISOR++ ))\n            fi\n        done\n        # Append\
    \ to FUNC_RET only unique factor with the count of occurrences\n        if [ $NUM_DIVISOR\
    \ -gt 0 ]; then\n            for (( j=0; j<$NUM_DIVISOR; j++ ))\n            do\n\
    \                FUNC_RET=\"$FUNC_RET $FACTOR\"\n            done\n        fi\n\
    \    done\n\n    echo \"$FUNC_RET\"\n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020311
- exit_code: 0
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    if [ \"$#\" -ne 1 ]; then\n        echo\
    \ \"Usage: $0 <integer>\"\n        exit\n    fi\n    number=$1\n    answer=\"\"\
    \n    divider=2\n    while [ $number -gt 1 ]; do\n        while [ $(($number %\
    \ $divider)) -eq 0 ]; do\n            number=$(($number / $divider))\n       \
    \     answer=\"$answer $divider\"\n        done\n        divider=$(($divider +\
    \ 1))\n    done\n    echo $answer\n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020311
- exit_code: 0
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    if [[ $1 =~ ^-?[0-9]+$ ]]; then\n  \
    \      local int=$1\n        local factors=()\n        local factor=2\n      \
    \  while [[ int -gt 1 ]]; do\n            if ((int % factor == 0)); then\n   \
    \             factors+=($factor)\n                int=$((int / factor))\n    \
    \        else\n                factor=$((factor + 1))\n            fi\n      \
    \  done\n        echo ${factors[@]}\n    else\n        echo \"\u0412\u0432\u0435\
    \u0434\u0438\u0442\u0435 \u0446\u0435\u043B\u043E\u0435 \u0447\u0438\u0441\u043B\
    \u043E\"\n    fi\n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\"\
    \ ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"\
    3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate\
    \ \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19\
    \ 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020311
- exit_code: 0
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n  local factors=()\n  local maxFactor\n\
    \  local testNum\n  local testFactor\n  local i\n\n  testNum=$1\n  maxFactor=$(($testNum/2))\n\
    \  # echo \"testNum: $testNum\"\n  # echo \"maxFactor: $maxFactor\"\n\n  for ((\
    \ i=2; i<=$maxFactor; i++ )); do\n    if [ $(($testNum%$i)) -eq 0 ]; then\n  \
    \    # echo \"i: $i\"\n      testFactor=$(factorize $i)\n      factors+=($testFactor)\n\
    \      testNum=$(($testNum/$i))\n      maxFactor=$(($testNum/2))\n      i=1\n\
    \    fi\n  done\n\n  factors+=($testNum)\n  echo ${factors[@]}\n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020311
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local num=$1\n    local i=2\n    while\
    \ (( num != 1 )); do\n        if ((num % i == 0)); then\n            echo -n $i\n\
    \            ((num = num / i))\n        else\n            ((i++))\n        fi\n\
    \    done\n    echo\n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\"\
    \ ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"\
    3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate\
    \ \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19\
    \ 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020311
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n  # Check arguments\n  if [[ ! $1 =~ ^[0-9]+$\
    \ ]]; then\n    echo \"Usage: $0 number\"\n    return 1\n  fi\n\n  # If $1 is\
    \ odd, then it must be prime, so there is no need to divide by anything\n  # but\
    \ 1 and $1\n  local number=\"$1\"\n  local factor=\"\"\n  local factors=\"\"\n\
    \  while [ $number -gt 1 ]; do\n    if [ $(($number % 2)) -eq 0 ]; then\n    \
    \  factor=2\n    else\n      # If $number is odd and greater than 1, then it is\
    \ prime\n      # and the only necessary factor is $number itself\n      factor=$number\n\
    \    fi\n    number=$(($number / $factor))\n    factors=\"$factors $factor\"\n\
    \  done\n  # Remove extra space from the beginning of the string\n  echo \"${factors#\"\
    \ \"}\"\n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n\
    \    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\"\
    \ ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\"\
    ) = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n\
    \    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020311
- exit_code: -1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    if [ $1 -lt 1 ]; then\n        echo\
    \ \"Invalid number\"\n        return 1\n    fi\n    echo $1 | awk '{print int($1/2)}'\
    \ | gawk '$1!=1 {print $1}' | factorize | sort -nu | gawk '{if ($1!=p) {if (p)\
    \ print p; p=$1; a=1} else a++; while (a--) print $1}' | sort -nu\n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=35 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=23 encoding='utf-8'>
  timestamp: 1660020316
- exit_code: -1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n  result=()\n  if [[ $1 -eq 1 ]]; then\n\
    \    echo \"1\"\n    return\n  fi\n  if [[ $1 -le 0 ]]; then\n    echo \"invalid\
    \ input\"\n    return\n  fi\n  local divisor=2\n  while [[ $1 -gt 1 ]]; do\n \
    \   if [[ $(( $1 % $divisor )) -eq 0 ]]; then\n      result+=($divisor)\n    \
    \  local quotient=$(( $1 / $divisor ))\n      1=$quotient\n    else\n      ((divisor++))\n\
    \    fi\n  done\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n    factorize \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[\
    \ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n\
    \    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3\
    \ 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[\
    \ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"\
    2 3 3\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=28 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=16 encoding='utf-8'>
  timestamp: 1660020316
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n  if [[ $1 -le 0 ]]; then\n    echo \"Given\
    \ integer must be positive.\"\n    exit 1\n  fi\n  if [[ $1 -le 3 ]]; then\n \
    \   echo \"[$1]\"\n    exit 0\n  fi\n  # All factors of number $1\n  declare -a\
    \ factors\n  # Current prime factor\n  prime_factor=2\n  # Current dividend\n\
    \  dividend=$1\n  while [[ $dividend -gt 1 ]]; do\n    # If remainder of division\
    \ is equal to 0, then prime factor is a factor of the number.\n    # Add the prime\
    \ factor to the list of all factors, divide dividend by the prime factor, and\
    \ divide prime factor by itself\n    if [[ $((dividend % prime_factor)) -eq 0\
    \ ]]; then\n      factors+=($prime_factor)\n      dividend=$((dividend / prime_factor))\n\
    \      prime_factor=$((prime_factor / prime_factor))\n    fi\n    # Increase prime\
    \ factor by 1 and repeat until the dividend is equal to 1\n    prime_factor=$((prime_factor\
    \ + 1))\n  done\n  # Echo array of factors.\n  # Since the factors are sorted\
    \ in ascending order, there is no need to sort them again.\n  echo \"${factors[@]}\"\
    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[\
    \ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n\
    \    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\"\
    ) = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n\
    \    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020311
- exit_code: 0
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    # you code here\n    number=$1\n   \
    \ divisor=2\n    i=0\n    while [ $number -gt 1 ]\n    do\n        while [[ $((number%divisor))\
    \ -eq 0 ]]\n        do\n            primeFactors[$i]=$divisor\n            ((i++))\n\
    \            number=$((number/divisor))\n        done\n        ((divisor++))\n\
    \    done\n    echo ${primeFactors[@]}\n}\n\ncandidate() {\n    factorize \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020311
