name: HumanEval_3_below_zero
language: sh
prompt: "#!/bin/bash\n# You're given a list of deposit and withdrawal operations on\
  \ a bank account that starts with\n# zero balance. Your task is to detect if at\
  \ any point the balance of account fallls below zero, and\n# at that point function\
  \ should return True. Otherwise it should return False.\n# >>> below_zero([1, 2,\
  \ 3])\n# False\n# >>> below_zero([1, 2, -4, 5])\n# True\n#\n# $1 is a space-separated\
  \ list\nbelow_zero() {\n"
tests: "}\n\ncandidate() {\n    below_zero \"$@\"\n}\n\nset -e\nrun_test() {\n   \
  \ [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"1 2 -3 1 2 -3\") = \"\
  false\" ]]\n    [[ $(candidate \"1 2 -4 5 6\") = \"true\" ]]\n    [[ $(candidate\
  \ \"1 -1 2 -2 5 -5 4 -4\") = \"false\" ]]\n    [[ $(candidate \"1 -1 2 -2 5 -5 4\
  \ -5\") = \"true\" ]]\n    [[ $(candidate \"1 -2 2 -2 5 -5 4 -4\") = \"true\" ]]\n\
  }\n\nrun_test"
completions: ["  # Use parameter expansion and bash's built-in arithmetic evaluation\
    \ to count the sum\n  # of the list items\n  s=0\n  for i in $1; do\n    s=$((s+i))\n\
    \  done\n  # Use test to see if the sum is less than 0\n  if [ $s -lt 0 ]; then\n\
    \    echo True\n  else\n    echo False\n  fi", "    echo \"seq $* | awk '{z+=$1}END{print\
    \ z}'\" | bc", "  local sum=0;\n  local value;\n  for value in $1; do\n    if\
    \ [ $sum -lt 0 ]; then\n      echo \"True\";\n      return 0;\n    fi\n    sum=$((sum\
    \ + value));\n  done\n  echo \"False\";", "  # balance starts with zero\n  balance=0\n\
    \  # Loop through the list of numbers\n  for num in $1; do\n    # Add or subtract\
    \ each number\n    balance=$((balance + num))\n    # If the balance ever goes\
    \ below zero, it's True, otherwise False\n    if [[ $balance -lt 0 ]]; then\n\
    \      echo \"True\"\n      return\n    fi\n  done\n  echo \"False\"", "    local\
    \ balance=0\n    local input=$@\n    local change\n    for change in $input; do\n\
    \        ((balance+=$change))\n        if ((balance<0)); then\n            echo\
    \ \"True\"\n            return\n        fi\n    done\n    echo \"False\"", "\t\
    sum=0\n\tfor num in $@; do\n\t\tsum=$((sum + num))\n\t\tif [ $sum -lt 0 ]; then\n\
    \t\t\techo True\n\t\t\treturn\n\t\tfi\n\tdone\n\techo False", '  echo $(($((${1//
    /+}))))', "  local -a arr=(\"$@\")\n  for i in ${arr[@]}; do\n    ((sum += i))\n\
    \    if ((sum < 0)); then\n      echo \"True\"\n      return 0\n    fi\n  done\n\
    \  echo \"False\"", "    local num\n    local sum=0\n    for num in $1\n    do\n\
    \        let sum=$sum+$num\n        if [ $sum -lt 0 ]\n        then\n        \
    \    return 0\n        fi\n    done\n    return 1", "    local sum=0\n    for\
    \ num in $1; do\n        ((sum += num))\n        if ((sum < 0)); then\n      \
    \      echo \"True\"\n            return\n        fi\n    done\n    echo \"False\"",
  "  sum=0\n  for val in $1; do\n    sum=$((sum + val))\n    if [[ $sum -lt 0 ]];\
    \ then\n      echo \"True\"\n      return\n    fi\n  done\n  echo \"False\"",
  "  read -a intArray <<< \"$1\"\n  for i in \"${intArray[@]}\"\n  do\n    if [[ $((\
    \ $i+$balance )) -lt 0 ]]; then\n      echo \"true\"\n      break\n    else\n\
    \      balance=$(( $i+$balance ))\n    fi\n  done", "    balance=0\n    for each_value\
    \ in $1\n    do\n        if [ $each_value -lt 0 ]\n        then\n            balance=$((balance\
    \ + each_value))\n            if [ $balance -lt 0 ]\n            then\n      \
    \          echo True\n                return\n            fi\n        else\n \
    \           balance=$((balance + each_value))\n        fi\n    done\n    echo\
    \ False", "    running_total=0\n    for n in $1; do\n        (( running_total\
    \ += n ))\n        if (( running_total < 0 )); then\n            echo \"True\"\
    \n            return\n        fi\n    done\n    echo \"False\"", "    awk 'BEGIN\
    \ {FS = OFS = \" \"}\n        { for (i = 1; i <= NF; i++) sum += $i;\n       \
    \   if (sum < 0) { print \"True\"; exit }\n        }\n        END { print \"False\"\
    \ }'", "    sum=0\n    for i in $1; do\n        sum=$((sum + i))\n        if [\
    \ $sum -lt 0 ]; then\n            echo \"True\"\n            return 0\n      \
    \  fi\n    done\n    echo \"False\"", "  local balance=0\n  for x in $1; do\n\
    \    ((balance+=x))\n    if ((balance<0)); then\n      echo True\n      return\n\
    \    fi\n  done\n  echo False", "    declare -a arr=(\"$@\")\n    echo \"Array\
    \ is ${arr[@]}\"\n    local -i balance=0\n    for i in \"${arr[@]}\"; do\n   \
    \     balance=$((balance + i))\n        if [ $balance -lt 0 ]; then\n        \
    \    echo \"True\"\n            exit 0\n        fi\n    done\n    echo \"False\"",
  "  nums=$1\n  balance=0\n  for i in $nums; do\n    balance=$((balance + i))\n  \
    \  if [[ balance -lt 0 ]]; then\n      echo true\n      return\n    fi\n  done\n\
    \  echo false", "  local sum=0\n  local cnt=0\n  for a in $1\n  do\n    cnt=$(expr\
    \ $cnt + 1)\n    sum=$(expr $sum + $a)\n    if [ $sum -lt 0 ]\n    then\n    \
    \  echo \"True\"\n      return 0\n    fi\n  done\n  echo \"False\"\n  return 0"]
stop_tokens:
- "\n}"
