name: HumanEval_133_sum_squares
language: sh
prompt: "#!/bin/bash\n# You are given a list of numbers.\n# You need to return the\
  \ sum of squared numbers in the given list,\n# round each element in the list to\
  \ the upper int(Ceiling) first.\n# Examples:\n# For lst = [1,2,3] the output should\
  \ be 14\n# For lst = [1,4,9] the output should be 98\n# For lst = [1,3,5,7] the\
  \ output should be 84\n# For lst = [1.4,4.2,0] the output should be 29\n# For lst\
  \ = [-2.4,1,1] the output should be 6\n#\n# $1 is a space-separated list\nsum_squares()\
  \ {\n"
tests: "}\n\ncandidate() {\n    sum_squares \"$@\"\n}\n\nset -e\nrun_test() {\n  \
  \  [[ $(candidate \"1.0 2.0 3.0\") = \"14\" ]]\n    [[ $(candidate \"1.0 2.0 3.0\"\
  ) = \"14\" ]]\n    [[ $(candidate \"1.0 3.0 5.0 7.0\") = \"84\" ]]\n    [[ $(candidate\
  \ \"1.4 4.2 0.0\") = \"29\" ]]\n    [[ $(candidate \"-2.4 1.0 1.0\") = \"6\" ]]\n\
  \    [[ $(candidate \"100.0 1.0 15.0 2.0\") = \"10230\" ]]\n    [[ $(candidate \"\
  10000.0 10000.0\") = \"200000000\" ]]\n    [[ $(candidate \"-1.4 4.6 6.3\") = \"\
  75\" ]]\n    [[ $(candidate \"-1.4 17.9 18.9 19.9\") = \"1086\" ]]\n    [[ $(candidate\
  \ \"0.0\") = \"0\" ]]\n    [[ $(candidate \"-1.0\") = \"1\" ]]\n    [[ $(candidate\
  \ \"-1.0 1.0 0.0\") = \"2\" ]]\n}\n\nrun_test"
completions: ["  echo $(echo $1 | \\\n    tr ' ' '\\n' | \\\n    awk '{ printf \"\
    %.0f\\n\", $1**2 }' | \\\n    awk '{ sum += $1 } END { print sum }')", "  declare\
    \ -a arr=(\"$@\")\n  result=0\n  for i in \"${arr[@]}\"; do\n    n=${i%.*}\n \
    \   m=${i#*.}\n    if [ $m -eq 0 ]; then\n      result=$((result + n * n))\n \
    \   else\n      result=$((result + ($n + 1) * ($n + 1)))\n    fi\n  done\n  echo\
    \ $result", "  local sum=0\n  local tmp=$(echo \"$1\" | tr ' ' '\\n')\n  for n\
    \ in $tmp; do\n    sum=$((sum + (${n%.*} + 1) ** 2))\n  done\n  echo $sum", " \
    \ local square=0\n  local sum=0\n  local num=0\n  for num in \"$@\"; do\n    square=$(printf\
    \ \"%.0f\" $(echo \"scale=2;$num*$num\" | bc))\n    sum=$(echo \"scale=2;$sum+$square\"\
    \ | bc)\n  done\n  echo $sum", "    local tot=0 num\n    for num in $1\n    do\n\
    \tnum=${num%.*}\n\tlet tot+=$((num ** 2))\n    done\n    echo $tot", "\t# your\
    \ code here\n\tlocal suma=0\n\tfor i in $1; do\n\t\tsuma=$((suma+$(($(echo $i\
    \ | cut -d '.' -f 1)+1))**2))\n\tdone\n\techo $suma", "    #$1 | awk 'BEGIN {FS=\"\
    \ \"; sum=0} {sum+=(int($1)+1)^2} END {print sum}'\n    local sum=0\n    for i\
    \ in $1; do\n        sum=$((sum+$((int($i)+1))**2))\n    done\n    echo $sum",
  "  local tmp=\"$(echo $1 | tr ' ' '\\n' | while read line; do\n    echo \"$(echo\
    \ \"$line\" | awk '{printf \"%d\\n\",$1+.5}') ^ 2\" | bc -l\n  done | paste -sd+)\"\
    \n  echo \"($tmp) / 1\" | bc -l", "    declare -a input=($1)\n    total=0\n  \
    \  for i in \"${input[@]}\"; do\n        sum=$(echo \"scale=3;$i^2\" | bc)\n \
    \       echo $sum\n        sum=$(echo \"scale=0;$sum/1\" | bc)\n        total=$(echo\
    \ \"$total+$sum\" | bc)\n    done\n    echo $total", "    lst=$(echo $1 | sed\
    \ 's/[a-z\\.]//g')\n    total=0\n    for num in $lst; do\n        total=$((total\
    \ + (ceil $num)**2))\n    done\n    echo $total", "  echo $1 | sed -e 's/ /+/g'\
    \ | bc -l | sed -e 's/^\\(.*\\)\\./\\1/' | tr '\\n' '+' | sed -e 's/\\+$//' |\
    \ bc -l", "  local lst=($1)\n  local sum=0\n  for elm in ${lst[@]}; do\n    if\
    \ [[ $elm =~ ^-?[0-9]*\\.[0-9]+$ ]]; then\n      elm=$(echo \"($elm+0.5)/1\" |\
    \ bc)\n    fi\n    sum=$((sum+elm*elm))\n  done\n  echo $sum", "  local list=(\
    \ $1 )\n  local total=0\n  for elem in \"${list[@]}\"; do\n    total=$(( $total\
    \ + (($elem + 0.5 | bc) ** 2) ))\n  done\n  echo $total", "  local local_sum=0\n\
    \  while IFS= read -r number; do\n    number=${number%.*}\n    (( local_sum +=\
    \ number * number ))\n  done < <(printf \"%s\\n\" \"$1\")\n  echo \"$local_sum\"",
  "    local answer=0\n    for number in $1; do\n        # Round each number in the\
    \ list to the upper int(Ceiling) first.\n        answer=$(( ${answer} + ${number%%.*}**2\
    \ ))\n    done\n    echo ${answer}", "  local newlist=\"\"\n  for i in $1; do\n\
    \    newlist+=\"$(printf \"%.0f \" \"$(printf \"%.0f\\n\" \"$(bc <<< \"scale=2;\
    \ $i + 0.5\")\")\")\"\n  done\n  echo \"scale=0; ($(echo $newlist | sed 's/ /\
    \ ^ 2 + /g') 0) ^ 2\" | bc", "  awk '{\n  for (i=1; i<=NF; i++) {\n    a[i] =\
    \ ceil($i)\n  }\n  sum = 0\n  for (i=1; i<=NF; i++) {\n    sum += a[i] * a[i]\n\
    \  }\n  print sum", "    for element in $1; do\n        sum=$((sum + ${element%.*}\
    \ * ${element%.*}))\n    done\n    echo $sum", "  local sum=0\n  IFS=\" \" read\
    \ -r -a arr <<< \"$1\"\n  for i in \"${arr[@]}\"; do\n    sum=$((sum + i * i))\n\
    \  done\n  echo $sum", "  #TODO: implement function\n  echo $1"]
stop_tokens:
- "\n}"
