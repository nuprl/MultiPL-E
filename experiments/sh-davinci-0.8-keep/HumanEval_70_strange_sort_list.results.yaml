language: sh
name: HumanEval_70_strange_sort_list
results:
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    # strange_sort_list([]) == []\n#\n# $1 is a space-separated list\nstrange_sort_list()\
    \ {\n\tnumbers=$(echo $1 | sed 's/\\([0-9]\\+\\)/\\1 /g')\n\tfor number in $numbers;\
    \ do\n\t\techo $number\n\tdone | sort -n | tr '\\n' ' ' | tr -s ' ' | cut -d'\
    \ ' -f1,3,2,4\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5\
    \ 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[\
    \ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate\
    \ \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\"\
    ) = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020384
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    # strange_sort_list([]) == []\n#\n# $1 is a space-separated list\nstrange_sort_list()\
    \ {\n    [ $# -eq 0 ] && return 0\n    [ $# -eq 1 ] && echo $1 && return 0\n \
    \   local -a list=()\n    for i in $1; do\n        list=(${list[@]} $i)\n    done\n\
    \    local -a odd=()\n    local -a even=()\n    for ((i=0; i<${#list[@]}; i++));\
    \ do\n        (( i % 2 == 0 )) && even=(${even[@]} ${list[$i]}) || odd=(${odd[@]}\
    \ ${list[$i]})\n    done\n    sort_list \"${even[@]}\"\n    sort_list \"${odd[@]}\"\
    \n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020384
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    # strange_sort_list([]) == []\n#\n# $1 is a space-separated list\nstrange_sort_list()\
    \ {\n    values=($1)\n    sorted=()\n    for ((i=0; i<${#values[@]}; i++)); do\n\
    \        if ((i % 2 == 0)); then\n            sorted+=($(echo \"${values[@]}\"\
    \ | tr ' ' '\\n' | sort -n | head -n 1))\n            values=($(echo \"${values[@]}\"\
    \ | tr ' ' '\\n' | grep -v \"${sorted[-1]}\"))\n        else\n            sorted+=($(echo\
    \ \"${values[@]}\" | tr ' ' '\\n' | sort -n | tail -n 1))\n            values=($(echo\
    \ \"${values[@]}\" | tr ' ' '\\n' | grep -v \"${sorted[-1]}\"))\n        fi\n\
    \    done\n    echo \"${sorted[@]}\"\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020384
- exit_code: -1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    # strange_sort_list([]) == []\n#\n# $1 is a space-separated list\nstrange_sort_list()\
    \ {\n    [[ $# -eq 0 ]] && return\n    local unsorted_list=($@)\n    local sorted_list=()\n\
    \    local minimum=$(printf \"%s\\n\" \"${unsorted_list[@]}\" | sort -n | head\
    \ -n 1)\n    local maximum=$(printf \"%s\\n\" \"${unsorted_list[@]}\" | sort -nr\
    \ | head -n 1)\n    local done=0\n    sorted_list+=($minimum)\n    while [[ $done\
    \ -eq 0 ]]; do\n        done=1\n        for i in \"${!unsorted_list[@]}\"; do\n\
    \            if [[ ${unsorted_list[$i]} -eq $maximum ]]; then\n              \
    \  sorted_list+=($maximum)\n                unsorted_list[$i]=0\n            \
    \    maximum=$(printf \"%s\\n\" \"${unsorted_list[@]}\" | sort -nr | head -n 1)\n\
    \                done=0\n            elif [[ ${unsorted_list[$i]} -eq $minimum\
    \ ]]; then\n                sorted_list+=($minimum)\n                unsorted_list[$i]=0\n\
    \                minimum=$(printf \"%s\\n\" \"${unsorted_list[@]}\" | sort -n\
    \ | head -n 1)\n                done=0\n            fi\n        done\n    done\n\
    \    echo ${sorted_list[@]}\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n\
    \    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5\
    \ 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=14 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=22 encoding='utf-8'>
  timestamp: 1660020389
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    # strange_sort_list([]) == []\n#\n# $1 is a space-separated list\nstrange_sort_list()\
    \ {\n  if [ \"$1\" == \"\" ]; then\n    echo \"\"\n    return\n  fi\n  # If there\
    \ is only one element in the list, echo the element back.\n  if echo \"$1\" |\
    \ grep -q \" \"; then\n    :\n  else\n    echo \"$1\"\n    return\n  fi\n  # Otherwise,\
    \ start sorting.\n  min=$(echo \"$1\" | tr \" \" \"\\n\" | sort -n | head -n 1)\n\
    \  # Remove the first minimum element from the string.\n  echo \"$1\" | sed \"\
    s/^$min//\" | sed \"s/^ *//\" | sed \"s/ *$//\" | sed \"s/  */ /g\" > \"$(mktemp)\"\
    \n  rest=$(cat \"$(mktemp)\")\n  # Now we have everything but the first minimum\
    \ element in $rest.\n  # Run strange_sort_list() on $rest.\n  max=$(echo \"$rest\"\
    \ | tr \" \" \"\\n\" | sort -n | tail -n 1)\n  # Remove the last maximum element\
    \ from the string.\n  echo \"$rest\" | sed \"s/$max$//\" | sed \"s/^ *//\" | sed\
    \ \"s/ *$//\" | sed \"s/  */ /g\" > \"$(mktemp)\"\n  rest2=$(cat \"$(mktemp)\"\
    )\n  # Now we have everything but the first minimum and last maximum element in\
    \ $rest2.\n  # Run strange_sort_list() on $rest2.\n  rest2=$(strange_sort_list\
    \ \"$rest2\")\n  # Finally, add the first minimum and last maximum element to\
    \ $rest2.\n  echo \"$min $rest2 $max\"\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020384
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    # strange_sort_list([]) == []\n#\n# $1 is a space-separated list\nstrange_sort_list()\
    \ {\n  for n in $1; do\n    echo $n\n  done | sort -n | (\n    min=1\n    max=1\n\
    \    while read n; do\n      if [ $min -eq 1 ]; then\n        echo $n\n      \
    \  min=0\n        max=1\n      else\n        echo $n\n        min=1\n        max=0\n\
    \      fi\n    done\n  )\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n   \
    \ [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6\
    \ 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020384
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    # strange_sort_list([]) == []\n#\n# $1 is a space-separated list\nstrange_sort_list()\
    \ {\n    input=($1)\n    output=()\n    ((n = ${#input[@]} - 1))\n    for ((i\
    \ = 0; i <= n; i++)); do\n        if (($i % 2 == 0)); then\n            output+=(\"\
    $(min ${input[@]})\")\n        else\n            output+=(\"$(max ${input[@]})\"\
    )\n        fi\n        input=(${input[@]/${output[$i]}})\n    done\n    echo ${output[@]}\n\
    }\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmptpzetk51.sh: line 17: min: command not found

    /tmp/tmptpzetk51.sh: line 19: max: command not found

    /tmp/tmptpzetk51.sh: line 17: min: command not found

    /tmp/tmptpzetk51.sh: line 19: max: command not found

    '
  stdout: ''
  timestamp: 1660020384
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    # strange_sort_list([]) == []\n#\n# $1 is a space-separated list\nstrange_sort_list()\
    \ {\n  declare -a list=($(echo $1 | sed 's/ /\\n/g' | sort -n))\n  local max_item=${#list[@]}\n\
    \  local small=0\n  local big=1\n  declare -a result\n  result=()\n  while ((small\
    \ < ${#list[@]} && big < ${#list[@]})); do\n    result+=(${list[$small]})\n  \
    \  if ((big < ${#list[@]})); then\n      result+=(${list[${#list[@]} - $big]})\n\
    \    fi\n    small=$((small + 1))\n    big=$((big + 1))\n  done\n  echo ${result[@]}\n\
    }\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020384
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    # strange_sort_list([]) == []\n#\n# $1 is a space-separated list\nstrange_sort_list()\
    \ {\n    list=($1)\n    result=()\n    while [ ${#list[@]} -gt 0 ]; do\n     \
    \   min=${list[0]}\n        max=${list[0]}\n        min_index=0\n        max_index=0\n\
    \        # Calculate min and max value\n        for ((i=0; i<${#list[@]}; i++));\
    \ do\n            if [ ${list[$i]} -lt $min ]; then\n                min=${list[$i]}\n\
    \                min_index=$i\n            fi\n            if [ ${list[$i]} -gt\
    \ $max ]; then\n                max=${list[$i]}\n                max_index=$i\n\
    \            fi\n        done\n        # Add min and max values to result list\n\
    \        result=(\"${result[@]}\" $min $max)\n        # Remove min and max values\
    \ from list\n        unset list[$min_index]\n        list=(${list[@]})\n     \
    \   unset list[$max_index]\n        list=(${list[@]})\n    done\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020384
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    # strange_sort_list([]) == []\n#\n# $1 is a space-separated list\nstrange_sort_list()\
    \ {\n  local SORT_LIST=\"\"\n  for i in $1; do\n    if [ -z \"$SORT_LIST\" ];\
    \ then\n      SORT_LIST=\"$i\"\n    else\n      SORT_LIST=\"$SORT_LIST $i\"\n\
    \    fi\n  done\n  SORT_LIST=($SORT_LIST)\n  local K=1\n  while ((${#SORT_LIST[@]}\
    \ > 0)); do\n    local TEMP_LIST=()\n    local U=0\n    for i in ${SORT_LIST[@]};\
    \ do\n      if (($K % 2 == 1)); then\n        TEMP_LIST[$U]=$i\n      else\n \
    \       TEMP_LIST[$((U - 1))]=$i\n      fi\n      ((K++))\n      ((U++))\n   \
    \ done\n    SORT_LIST=()\n    for i in ${TEMP_LIST[@]}; do\n      SORT_LIST=\"\
    $SORT_LIST $i\"\n    done\n    SORT_LIST=($SORT_LIST)\n  done\n  echo \"$SORT_LIST\"\
    \n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpu9jc6g8z.sh: line 29: TEMP_LIST[$((U - 1))]: bad array subscript

    '
  stdout: ''
  timestamp: 1660020384
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    # strange_sort_list([]) == []\n#\n# $1 is a space-separated list\nstrange_sort_list()\
    \ {\n  declare -a list\n  local min max min_idx max_idx tmp\n  list=( $1 )\n \
    \ max=${list[0]} max_idx=0\n  for idx in ${!list[@]}; do\n    [[ ${list[$idx]}\
    \ -gt $max ]] && max=${list[$idx]} max_idx=$idx\n  done\n  min=${list[0]} min_idx=0\n\
    \  for idx in ${!list[@]}; do\n    [[ ${list[$idx]} -lt $min ]] && min=${list[$idx]}\
    \ min_idx=$idx\n  done\n  tmp=${list[0]}\n  list[0]=$min list[$min_idx]=$tmp\n\
    \  tmp=${list[$max_idx]}\n  list[$max_idx]=${list[1]} list[1]=$tmp\n  if [[ ${#list[@]}\
    \ -gt 2 ]]; then\n    unset list[$min_idx] unset list[$max_idx]\n    list=($(strange_sort_list\
    \ \"${list[@]}\"))\n  fi\n  echo ${list[@]}\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020384
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    # strange_sort_list([]) == []\n#\n# $1 is a space-separated list\nstrange_sort_list()\
    \ {\n    input=\"$1\"\n    local input_len=`echo \"$input\" | wc -w`\n    local\
    \ res=\"$input\"\n    for ((i=0; i<$input_len; i+=2)); do\n        local sorted=\"\
    $res\"\n        local num=`echo \"$sorted\" | tr ' ' '\\n' | sort -n | sed -n\
    \ 1p`\n        local num_count=`echo \"$sorted\" | tr ' ' '\\n' | grep -c \"^$num$\"\
    `\n        if (($num_count > 1)); then\n            res=`echo \"$sorted\" | tr\
    \ ' ' '\\n' | sort -nr | tr '\\n' ' '`\n        else\n            res=`echo \"\
    $sorted\" | tr ' ' '\\n' | sort -n | tr '\\n' ' '`\n        fi\n    done\n   \
    \ echo \"$res\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5\
    \ 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[\
    \ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate\
    \ \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\"\
    ) = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020384
- exit_code: -1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    # strange_sort_list([]) == []\n#\n# $1 is a space-separated list\nstrange_sort_list()\
    \ {\n    list=($1)\n    if [ ${#list[@]} -lt 2 ]; then\n        echo $1\n    \
    \    return\n    fi\n    min=${list[0]}\n    for i in ${list[@]}; do\n       \
    \ if [ $i -lt $min ]; then\n            min=$i\n        fi\n    done\n    res=\"\
    $min\"\n    for i in ${list[@]}; do\n        if [ $i -ne $min ]; then\n      \
    \      res=\"$res $i\"\n        fi\n    done\n    r=$(strange_sort_list \"$res\"\
    )\n    if [ ${#list[@]} -eq 2 ]; then\n        r=$(echo $r | tr ' ' '\\n' | tac)\n\
    \    fi\n    echo $r\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[\
    \ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\"\
    \ ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n\
    \    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[\
    \ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=21 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=10 encoding='utf-8'>
  timestamp: 1660020389
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    # strange_sort_list([]) == []\n#\n# $1 is a space-separated list\nstrange_sort_list()\
    \ {\n    if [ -z \"$1\" ]; then\n        echo \"\"\n        return\n    fi\n \
    \   sorted=$(echo \"$1\" | tr ' ' '\\n' | sort -n)\n    middle=$(echo \"$sorted\"\
    \ | wc -l)\n    middle=$((middle / 2))\n    odd=$((middle % 2))\n    if [ $odd\
    \ -eq 1 ]; then\n        middle=$((middle + 1))\n    fi\n    min=$(echo \"$sorted\"\
    \ | head -n$middle)\n    max=$(echo \"$sorted\" | tail -n$middle)\n    result=$(echo\
    \ -e \"$min\\n$max\" | tr '\\n' ' ')\n    echo \"$result\"\n}\n\ncandidate() {\n\
    \    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020384
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    # strange_sort_list([]) == []\n#\n# $1 is a space-separated list\nstrange_sort_list()\
    \ {\n    [ $# -eq 0 ] && return\n    local data=( $1 )\n    local res=()\n   \
    \ for (( i=0; i<${#data[@]}; i++ )); do\n        local min=${data[0]} max=${data[0]}\n\
    \        local min_idx=0 max_idx=0\n        for (( j=0; j<${#data[@]}; j++ ));\
    \ do\n            if (( i%2==0 )); then\n                (( ${data[j]} < min ))\
    \ && min=${data[j]} min_idx=$j\n            else\n                (( ${data[j]}\
    \ > max )) && max=${data[j]} max_idx=$j\n            fi\n        done\n      \
    \  res[i]=$(( i%2==0 ? min : max ))\n        data=( \"${data[@]:0:$(( i%2==0 ?\
    \ min_idx : max_idx ))}\" \"${data[@]:$(( i%2==0 ? min_idx+1 : max_idx+1 ))}\"\
    \ )\n    done\n    echo ${res[@]}\n}\n\ncandidate() {\n    strange_sort_list \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020384
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    # strange_sort_list([]) == []\n#\n# $1 is a space-separated list\nstrange_sort_list()\
    \ {\n    local -a arr=($1)\n    local result=\"\"\n    local i=0\n    while true;\
    \ do\n        if [ \"${#arr[@]}\" -eq 0 ]; then\n            break\n        fi\n\
    \        local min=${arr[0]}\n        local min_idx=0\n        local max=${arr[0]}\n\
    \        local max_idx=0\n        for i in \"${!arr[@]}\"; do\n            if\
    \ [ ${arr[$i]} -lt $min ]; then\n                min=${arr[$i]}\n            \
    \    min_idx=$i\n            fi\n            if [ ${arr[$i]} -gt $max ]; then\n\
    \                max=${arr[$i]}\n                max_idx=$i\n            fi\n\
    \        done\n        result=\"$result $min\"\n        arr=( \"${arr[@]:0:$min_idx}\"\
    \ \"${arr[@]:$((min_idx + 1))}\" )\n        if [ \"${#arr[@]}\" -eq 0 ]; then\n\
    \            break\n        fi\n        result=\"$result $max\"\n        arr=(\
    \ \"${arr[@]:0:$max_idx}\" \"${arr[@]:$((max_idx + 1))}\" )\n    done\n    echo\
    \ $result\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5\
    \ 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020384
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    # strange_sort_list([]) == []\n#\n# $1 is a space-separated list\nstrange_sort_list()\
    \ {\n    local IFS=' '\n    local -a array=($*)\n    local -a result\n    local\
    \ i\n\n    for ((i=0; i<${#array[@]}; i++)); do\n        local min=${array[0]}\n\
    \        local min_index=0\n        local max=${array[0]}\n        local max_index=0\n\
    \        local j\n\n        for ((j=0; j<${#array[@]}; j++)); do\n           \
    \ if [[ ${array[j]} -lt $min ]]; then\n                min=${array[j]}\n     \
    \           min_index=$j\n            fi\n            if [[ ${array[j]} -gt $max\
    \ ]]; then\n                max=${array[j]}\n                max_index=$j\n  \
    \          fi\n        done\n\n        if (($i % 2 == 0)); then\n            result+=($min)\n\
    \            unset array[$min_index]\n        else\n            result+=($max)\n\
    \            unset array[$max_index]\n        fi\n    done\n\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020384
- exit_code: -1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    # strange_sort_list([]) == []\n#\n# $1 is a space-separated list\nstrange_sort_list()\
    \ {\n  local lst=($(echo $1 | xargs))\n  # $lst is an array\n  local l=${#lst[@]}\n\
    \  local res=()\n  if [ $l -eq 0 ]; then\n    res=(${res[@]} ${lst[@]})\n  else\n\
    \    local sm=0\n    local lg=0\n    local m=0\n    for i in ${lst[@]}; do\n \
    \     if [ $i -lt ${lst[$sm]} ]; then\n        sm=$m\n      fi\n      if [ $i\
    \ -gt ${lst[$lg]} ]; then\n        lg=$m\n      fi\n      m=$((m+1))\n    done\n\
    \    res=(${res[@]} ${lst[$sm]})\n    lst[$sm]=999999999\n    res=(${res[@]} ${lst[$lg]})\n\
    \    lst[$lg]=999999999\n    res=(${res[@]} $(strange_sort_list \"${lst[@]}\"\
    ) )\n  fi\n  echo ${res[@]}\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n\
    \    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5\
    \ 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=24 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=11 encoding='utf-8'>
  timestamp: 1660020389
- exit_code: 2
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    # strange_sort_list([]) == []\n#\n# $1 is a space-separated list\nstrange_sort_list()\
    \ {\n  # Write your code here\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n\
    \    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5\
    \ 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8upzj2gd.sh: line 13: syntax error near unexpected token `}''

    /tmp/tmp8upzj2gd.sh: line 13: `}''

    '
  stdout: ''
  timestamp: 1660020384
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
    # strange_sort_list([]) == []\n#\n# $1 is a space-separated list\nstrange_sort_list()\
    \ {\n  local t sorted\n  read -a t <<< \"$@\"\n  [ ${#t[@]} -gt 0 ] || return\n\
    \  for (( i=0; i<=${#t[@]}; i++ )); do\n    sorted=\"$sorted ${t[$i]}\"\n    t=(${t[@]:0:$i}\
    \ ${t[@]:$(($i+1))})\n    for (( j=0; j<${#t[@]}; j++ )); do\n      if [ ${t[$j]}\
    \ -lt ${t[$i]} ]; then\n        i=$j\n      fi\n    done\n  done\n  echo \"$sorted\"\
    \n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpweluo09g.sh: line 19: [: 2: unary operator expected

    '
  stdout: ''
  timestamp: 1660020384
