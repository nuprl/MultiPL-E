name: HumanEval_130_tri
language: sh
prompt: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply by\
  \ mathematicians in \n# the last couple centuries. However, what people don't know\
  \ is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
  # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
  \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
  # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
  \ given a non-negative integer number n, you have to a return a list of the \n#\
  \ first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# tri(3) = [1, 3,\
  \ 2, 8]\n#\n# $1 is an integer\ntri() {\n"
tests: "}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
  \ \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[\
  \ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2\
  \ 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
  \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15\
  \ 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63\
  \ 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate\
  \ \"1\") = \"1 3\" ]]\n}\n\nrun_test"
completions: ["    [[ $1 =~ ^[0-9]+$ ]] || { echo 'Parameter $1 must be a non-negative\
    \ integer' ; exit 1 ; }\n    echo -n \"[1\"\n    for ((i=1; i <= $1; i++)); do\n\
    \        if [[ $((i % 2)) -eq 0 ]]; then\n            echo -n \", $((1 + i / 2))\"\
    \n        else\n            echo -n \", $((i + 2))\"\n        fi\n    done\n \
    \   echo \"]\"", "    if [[ $1 -eq 1 ]]; then\n        echo \"3\"\n    elif [[\
    \ $1 -eq 2 ]]; then\n        echo \"1 3\"\n    elif [[ $1 -eq 3 ]]; then\n   \
    \     echo \"1 3 2\"\n    else\n        echo \"1 3 2\"\n        for (( i = 3;\
    \ i < $1; i++ )); do\n            result=$(( $(echo $(tri $i) | awk '{print $NF}')\
    \ + $(echo $(tri $(( $i - 1 ))) | awk '{print $NF}') + $(echo $(tri $(( $i - 2\
    \ ))) | awk '{print $NF}') ))\n            echo $result\n        done\n    fi",
  "    n=$1\n    i=1\n    a=1\n    b=3\n    c=2\n    while [ $i -le $n ]\n    do\n\
    \        echo -n \"$a \"\n        if [ $i -eq 1 ]\n        then\n            i=$((i+1))\n\
    \            continue\n        fi\n        if [ $((i%2)) -eq 0 ]\n        then\n\
    \            d=$((a+i/2))\n        else\n            d=$((a+b+c))\n        fi\n\
    \        a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo",
  "  if [ $1 -eq 0 ]; then\n    echo \"0\"\n  else\n    local count=1\n    local sum=0\n\
    \    local sum1=1\n    local sum2=0\n    local sum3=0\n    echo $sum1\n    while\
    \ [ $count -le $1 ]; do\n      sum=$(( $sum1 + $sum2 + $sum3 ))\n      sum3=$sum2\n\
    \      sum2=$sum1\n      sum1=$sum\n      echo $sum\n      count=$(( $count +\
    \ 1 ))\n    done\n  fi", "\tlocal ans=()\n\tlocal -i n=$1\n\tans+=(1)\n\tif ((\
    \ n == 0 )); then\n\t\techo \"${ans[@]}\"\n\t\treturn\n\tfi\n\tans+=(3)\n\tif\
    \ (( n == 1 )); then\n\t\techo \"${ans[@]}\"\n\t\treturn\n\tfi\n\tans+=(2)\n\t\
    if (( n == 2 )); then\n\t\techo \"${ans[@]}\"\n\t\treturn\n\tfi\n\tlocal -i i=2\n\
    \tlocal -i tri1=2\n\tlocal -i tri2=3\n\tlocal -i tri3=1\n\tlocal -i t=0\n\twhile\
    \ (( i <= n )); do\n\t\tt=$(( tri1 + tri2 + tri3 ))\n\t\tans+=($t)\n\t\ttri3=$tri2\n\
    \t\ttri2=$tri1\n\t\ttri1=$t\n\t\t(( i++ ))\n\tdone\n\techo \"${ans[@]}\"", " \
    \   tri[0]=0\n    tri[1]=1\n    tri[2]=1\n    if [ $1 -lt 3 ]; then\n        echo\
    \ ${tri[@]:0:$1}\n    else\n        echo ${tri[@]:0:3}\n        for ((i=3; i<$1;\
    \ i++)); do\n            if (( $i % 2 == 0 )); then\n                tri[$i]=$((\
    \ $i / 2 ))\n            else\n                tri[$i]=$(( ${tri[$i-1]} + ${tri[$i-2]}\
    \ + ${tri[$i+1]} ))\n            fi\n        done\n        echo ${tri[@]:0:$1}\n\
    \    fi", "  if [[ $1 -eq 1 ]]; then\n    echo \"3\"\n  elif [[ $1 -eq 2 ]]; then\n\
    \    echo \"1 3\"\n  elif [[ $1 -eq 3 ]]; then\n    echo \"1 3 2\"\n  else\n \
    \   local buf=\"\"\n    local count=3\n    buf=\"1 3 2\"\n    while [[ $count\
    \ -lt $1 ]]; do\n      if [[ $((count % 2)) -eq 0 ]]; then\n        buf=\"$buf\
    \ $(($count / 2))\"\n      else\n        local first=$(echo $buf | cut -d' ' -f-$(($count\
    \ - 2)))\n        local first_last=$(echo $first | cut -d' ' -f-1)\n        local\
    \ second_last=$(echo $first | cut -d' ' -f2)\n        local third_last=$(echo\
    \ $first | cut -d' ' -f3)\n        buf=\"$buf $(($second_last + $third_last +\
    \ $first_last))\"\n      fi\n      count=$(($count + 1))\n    done\n    echo $buf\n\
    \  fi", "  if [ $1 -gt 0 ]; then\n    seq 0 $1 | xargs -I % bash -c \\\n     \
    \ \"echo -n $(echo \"scale=2; 3 + ( % / 2 )\" | bc -l) ' '; \"\n  fi", "    if\
    \ [ $1 -gt 0 ]; then\n        if [ $1 -eq 1 ]; then\n            echo \"3\"\n\
    \        else\n            echo \"$(tri $(( $1 - 1 )))\"\n            echo \"\
    $(tri $(( $1 - 2 )))\"\n            echo \"$(tri $(( $1 - 3 )))\"\n        fi\n\
    \    fi", "    number=\"$1\"\n    result=\"\"\n    if [ \"$number\" -lt 0 ]; then\n\
    \        echo \"The number must be non-negative integer.\"\n        exit 1\n \
    \   fi\n    if [ \"$number\" -eq 0 ]; then\n        echo -n 1\n    else\n    \
    \    echo -n \"$result\"\n        a=1\n        b=1\n        c=1\n        for ((i=1;\
    \ i<=$number; i++)); do\n            result=$(( a + b + c ))\n            a=$b\n\
    \            b=$c\n            c=$result\n            echo -n \"$result \"\n \
    \       done\n    fi", "    a=3\n    b=2\n    c=1\n    for ((i=0; i<=$1; i++));\
    \ do\n        case $i in\n            0)\n                echo 1;;\n         \
    \   1)\n                echo 3;;\n            2)\n                echo 2;;\n \
    \           *)\n                echo $((($a + $b + $c) % 10000000007))\n     \
    \           a=$b\n                b=$c\n                c=$((($a + $b + $c) %\
    \ 10000000007))\n                ;;\n        esac\n    done", "    if [[ ! $1\
    \ =~ ^[0-9]+$ ]]; then\n        echo \"$1 is not an integer\"\n        return\
    \ 1\n    fi\n    local t3 t2 t1\n    local n=$1\n    t3=3\n    t2=1\n    t1=1\n\
    \    local j\n    local i=0\n    local out\n    while [ $i -le $n ]; do\n    \
    \    if [ $i -eq 0 ]; then\n            out=\"1\"\n        elif [ $i -eq 1 ];\
    \ then\n            out=\"$out 3\"\n        elif [ $i -eq 2 ]; then\n        \
    \    out=\"$out 2\"\n        else\n            if [ $((i % 2)) -eq 0 ]; then\n\
    \                j=$(( i / 2 ))\n                t3=$(( 1 + j ))\n           \
    \ else\n                t3=$(( t1 + t2 + t3 ))\n            fi\n            out=\"\
    $out $t3\"\n            t1=$t2\n            t2=$t3\n        fi\n        i=$((\
    \ i + 1 ))\n    done\n    echo \"$out\"", "\tlocal result=(\"3\")\n\tlocal num_1=1\n\
    \tlocal num_2=3\n\tlocal num_3=2\n\tlocal num_4=0\n\tif [ \"$1\" -eq 0 ]; then\n\
    \t\tresult=(\"1\")\n\telse\n\t\tfor ((i=1; i<$1; i++)); do\n\t\t\tif [ $((i %\
    \ 2)) -eq 0 ]; then\n\t\t\t\tnum_4=$((i/2))\n\t\t\telse\n\t\t\t\tnum_4=$((num_1\
    \ + num_2 + num_3))\n\t\t\t\tnum_1=$num_2\n\t\t\t\tnum_2=$num_3\n\t\t\t\tnum_3=$num_4\n\
    \t\t\tfi\n\t\t\tresult+=(\"$num_4\")\n\t\tdone\n\tfi\n\techo \"${result[@]}\"",
  "  if [[ $1 -eq 0 ]]; then\n    echo 1\n  elif [[ $1 -eq 1 ]]; then\n    echo 3\n\
    \  elif [[ $1 -eq 2 ]]; then\n    echo 2\n  else\n    local f1=1\n    local f2=3\n\
    \    local f3=2\n    local i\n    local f4\n    for ((i=0; i<$1; i++)); do\n \
    \     f4=$((f1+f2+f3))\n      f1=$f2\n      f2=$f3\n      f3=$f4\n    done\n \
    \   echo $f4\n  fi", "    case $1 in\n        1)\n            echo '3'\n     \
    \       ;;\n        2)\n            echo '1 3'\n            ;;\n        3)\n \
    \           echo '1 3 2'\n            ;;\n        *)\n            echo '1 3 2'\n\
    \            i=2\n            while [ $i -lt $1 ]; do\n                j=$(($i-1))\n\
    \                k=$(($i-2))\n                sum=$(($(echo \"$(echo \"$(tri $i)\"\
    ) + $(echo \"$(tri $j)\") + $(echo \"$(tri $k)\")\" | bc)))\n                echo\
    \ $sum\n                i=$(($i+1))\n            done\n            ;;\n    esac",
  "    # Fill this in\n    case $1 in\n        1) echo 1;;\n        2) echo 1;;\n\
    \        3) echo 2;;\n        *) echo $(((($1 + 1) / 2) + $1));;\n    esac", " \
    \ local array=(1 3 2)\n  # local i=3\n  local arraySize=${#array[@]}\n  while\
    \ [ $arraySize -le $1 ]; do\n    # echo $arraySize\n    if [ $(($arraySize % 2))\
    \ -eq 0 ]; then\n      local array[$arraySize]=$(($arraySize / 2 + 1))\n    else\n\
    \      local array[$arraySize]=$((${array[$(($arraySize - 1))]} + ${array[$(($arraySize\
    \ - 2))]} + ${array[$(($arraySize + 1))]}))\n    fi\n    let arraySize+=1\n  done\n\
    \  echo ${array[@]}", "    if (( $1 == 0 )); then\n        echo 1\n    elif ((\
    \ $1 == 1 )); then\n        echo 3\n    elif (( $1 == 2 )); then\n        echo\
    \ 2\n    else\n        if (( $1 % 2 == 0 )); then\n            echo $(( 1 + $1\
    \ / 2 ))\n        else\n            tri $(( $1 - 1 ))\n            tri $(( $1\
    \ - 2 ))\n            tri $(( $1 + 1 ))\n        fi\n    fi", "    local -a arr\n\
    \    arr[0]=1\n    arr[1]=3\n    arr[2]=2\n    if [ \"$1\" -eq 1 ]; then\n   \
    \     echo \"${arr[0]}\"\n    elif [ \"$1\" -eq 2 ]; then\n        echo \"${arr[1]}\"\
    \n    elif [ \"$1\" -eq 3 ]; then\n        echo \"${arr[2]}\"\n    elif [ \"$1\"\
    \ -gt 3 ]; then\n        local i\n        for ((i=3; i<=$1; i++)); do\n      \
    \      if [ $(( i % 2 )) -eq 0 ]; then\n                arr[$i]=$(( i / 2 ))\n\
    \            else\n                arr[$i]=$(( arr[$(( i - 1 ))] + arr[$(( i -\
    \ 2 ))] + arr[$(( i + 1 ))] ))\n            fi\n        done\n        echo \"\
    ${arr[@]}\"\n    fi", "    if (( $1 == 0 )); then\n        echo \"Error: argument\
    \ must be > 0\"\n        return 1\n    fi\n    list=(1 3 2)\n    for (( i = 0;\
    \ i < $1; i++ )); do\n        list[${#list[@]}]=`calc ${list[$i]} + ${list[$i+1]}\
    \ + ${list[$i+2]}`\n    done\n    echo ${list[@]}"]
stop_tokens:
- "\n}"
