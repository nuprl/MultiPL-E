name: HumanEval_19_sort_numbers
language: sh
prompt: "#!/bin/bash\n# Input is a space-delimited string of numberals from 'zero'\
  \ to 'nine'.\n# Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
  \ 'six', 'seven', 'eight' and 'nine'.\n# Return the string with numbers sorted from\
  \ smallest to largest\n# >>> sort_numbers('three one five')\n# 'one three five'\n\
  #\n# $1 is a string\nsort_numbers() {\n"
tests: "}\n\ncandidate() {\n    sort_numbers \"$@\"\n}\n\nset -e\nrun_test() {\n \
  \   [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"three\") = \"three\" ]]\n\
  \    [[ $(candidate \"three five nine\") = \"three five nine\" ]]\n    [[ $(candidate\
  \ \"five zero four seven nine eight\") = \"zero four five seven eight nine\" ]]\n\
  \    [[ $(candidate \"six five four three two one zero\") = \"zero one two three\
  \ four five six\" ]]\n}\n\nrun_test"
completions: ["  echo $1 | \\\n    sed -e 's/zero/0/g' -e 's/one/1/g' -e 's/two/2/g'\
    \ -e 's/three/3/g' -e 's/four/4/g' -e 's/five/5/g' -e 's/six/6/g' -e 's/seven/7/g'\
    \ -e 's/eight/8/g' -e 's/nine/9/g' | \\\n    tr ' ' '\\n' | \\\n    sort -n |\
    \ \\\n    tr '\\n' ' ' | \\\n    sed -e 's/0/zero/g' -e 's/1/one/g' -e 's/2/two/g'\
    \ -e 's/3/three/g' -e 's/4/four/g' -e 's/5/five/g' -e 's/6/six/g' -e 's/7/seven/g'\
    \ -e 's/8/eight/g' -e 's/9/nine/g'", "    # 1. Create a hash table that is mapping\
    \ the numbers to its ordinal position.\n    # 2. Use this hash table to sort the\
    \ numbers.\n    # 3. Print the output.\n    mapfile -t numbers_list < <(echo \"\
    $1\" | tr ' ' '\\n')\n    declare -A number_map\n    number_map=(\n        [\"\
    zero\"]=0\n        [\"one\"]=1\n        [\"two\"]=2\n        [\"three\"]=3\n \
    \       [\"four\"]=4\n        [\"five\"]=5\n        [\"six\"]=6\n        [\"seven\"\
    ]=7\n        [\"eight\"]=8\n        [\"nine\"]=9\n    )\n    # This is a trick\
    \ to sort array by its value.\n    # See https://stackoverflow.com/questions/1951506/sorting-an-array-of-strings-according-to-a-list-of-values-in-bash\n\
    \    sorted_numbers_list=( $(for i in \"${numbers_list[@]}\"; do echo \"${number_map[$i]}\
    \ $i\"; done | sort -n | cut -d' ' -f2) )\n    echo \"${sorted_numbers_list[@]}\"\
    \ | tr ' ' '\\n'", "  # Write your code here\n  echo \"Hello World!\"", '    #
    your code here', "\tlocal in=$(echo $1 | awk '{print tolower($0)}')\n\tlocal out=$(echo\
    \ $in | sed -e 's/zero/0/g' -e 's/one/1/g' -e 's/two/2/g' -e 's/three/3/g' -e\
    \ 's/four/4/g' -e 's/five/5/g' -e 's/six/6/g' -e 's/seven/7/g' -e 's/eight/8/g'\
    \ -e 's/nine/9/g')\n\tout=$(echo $out | sed -e 's/\\([0-9]*\\) \\([0-9]*\\)/\\\
    2 \\1/g' -e 's/\\([0-9]*\\) \\([0-9]*\\)/\\2 \\1/g' -e 's/\\([0-9]*\\) \\([0-9]*\\\
    )/\\2 \\1/g' -e 's/\\([0-9]*\\) \\([0-9]*\\)/\\2 \\1/g' -e 's/\\([0-9]*\\) \\\
    ([0-9]*\\)/\\2 \\1/g' -e 's/\\([0-9]*\\) \\([0-9]*\\)/\\2 \\1/g' -e 's/\\([0-9]*\\\
    ) \\([0-9]*\\)/\\2 \\1/g' -e 's/\\([0-9]*\\) \\([0-9]*\\)/\\2 \\1/g' -e 's/\\\
    ([0-9]*\\) \\([0-9]*\\)/\\2 \\1/g')\n\tout=$(echo $out | sed -e 's/0/zero/g' -e\
    \ 's/1/one/g' -e 's/2/two/g' -e 's/3/three/g' -e 's/4/four/g' -e 's/5/five/g'\
    \ -e 's/6/six/g' -e 's/7/seven/g' -", "    echo \"$1\" | awk '{split($0,a,\" \"\
    );s=\"\";for(i=1;i<=9;i++)for(j in a)if(a[j]==i)s=s\" \"i;print substr(s,2)}'",
  "  local NUMBERS=()\n  local SORTED_NUMBERS=()\n  local NUMBER\n  IFS=' ' read -r\
    \ -a NUMBERS <<< \"$1\"\n  for NUMBER in \"${NUMBERS[@]}\"; do\n    SORTED_NUMBERS+=(\"\
    $(numeral_to_number \"$NUMBER\")\")\n  done\n  IFS=$'\\n' SORTED_NUMBERS=($(sort\
    \ <<< \"${SORTED_NUMBERS[*]}\"))\n  for (( i=0; i<${#SORTED_NUMBERS[@]}; i++ ));\
    \ do\n    SORTED_NUMBERS[$i]=\"$(number_to_numeral \"${SORTED_NUMBERS[$i]}\")\"\
    \n  done\n  echo \"${SORTED_NUMBERS[*]}\"", "    if [ \"$#\" -ne 1 ]; then\n \
    \       echo \"Usage: $0 <string>\"\n        exit 1\n    fi\n\n    # Use cut to\
    \ remove anything after a space\n    # Sort the list\n    # Use tr to re-insert\
    \ spaces\n    echo \"$1\" | cut -d' ' -f1 | sort | tr '\\n' ' '", "\tlocal -a\
    \ temp_array\n\tIFS=' ' read -r -a temp_array <<< \"$1\"\n\t\n\t# sort numerically.\n\
    \ttemp_array=($(printf '%s\\n' \"${temp_array[@]}\" | sort -n))\n\t\n\t# convert\
    \ numbers to word.\n\tfor i in \"${!temp_array[@]}\"; do\n\t\tcase \"${temp_array[$i]}\"\
    \ in\n\t\t\t0) temp_array[$i]='zero' ;;\n\t\t\t1) temp_array[$i]='one' ;;\n\t\t\
    \t2) temp_array[$i]='two' ;;\n\t\t\t3) temp_array[$i]='three' ;;\n\t\t\t4) temp_array[$i]='four'\
    \ ;;\n\t\t\t5) temp_array[$i]='five' ;;\n\t\t\t6) temp_array[$i]='six' ;;\n\t\t\
    \t7) temp_array[$i]='seven' ;;\n\t\t\t8) temp_array[$i]='eight' ;;\n\t\t\t9) temp_array[$i]='nine'\
    \ ;;\n\t\tesac\n\tdone\n\t\n\t# return joined string\n\tprintf '%s\\n' \"${temp_array[@]}\"\
    \ | tr '\\n' ' '", "    local numbers=($1)\n    local num_dict=([zero]=0 [one]=1\
    \ [two]=2 [three]=3 [four]=4 [five]=5 [six]=6 [seven]=7 [eight]=8 [nine]=9)\n\
    \    # Your code here\n    # Thanks to http://tldp.org/LDP/abs/html/arrays.html\n\
    \    local -a sorted_numbers\n    local -i num\n    local -i i=0\n    for number\
    \ in ${numbers[@]}; do\n        num=${num_dict[$number]}\n        sorted_numbers[$num]=$number\n\
    \    done\n    #echo ${sorted_numbers[@]}\n    for number in ${sorted_numbers[@]};\
    \ do\n        #echo $number\n        if [ \"$number\" != \"\" ]; then\n      \
    \      if [ $i -gt 0 ]; then\n                echo -n \" \"\n            fi\n\
    \            echo -n $number\n            i=$i+1\n        fi\n    done\n    echo",
  "  echo -n $1 | tr ' ' '\\n' | sort -n | tr '\\n' ' '", "  for i in $1; do\n   \
    \ echo $i\n  done | sort -n | tr '\\n' ' '", "    local -A nums\n    local x\n\
    \    nums=([zero]=0 [one]=1 [two]=2 [three]=3 [four]=4 [five]=5 [six]=6 [seven]=7\
    \ [eight]=8 [nine]=9)\n    for x in $(echo $1); do\n        echo -n \"${nums[$x]}\
    \ \"\n    done | sort -n | xargs -n1 | while read x; do\n        echo -n \"${!nums[$x]}\
    \ \"\n    done\n    echo", "    local numbers=\"$1\"\n    local number=\"\"\n\
    \    local -a sorted_numbers\n    local -a ordered_numbers\n    local i\n\n  \
    \  for number in ${numbers}; do\n        case \"${number}\" in\n            zero)\
    \ ordered_numbers+=(0) ;;\n            one) ordered_numbers+=(1) ;;\n        \
    \    two) ordered_numbers+=(2) ;;\n            three) ordered_numbers+=(3) ;;\n\
    \            four) ordered_numbers+=(4) ;;\n            five) ordered_numbers+=(5)\
    \ ;;\n            six) ordered_numbers+=(6) ;;\n            seven) ordered_numbers+=(7)\
    \ ;;\n            eight) ordered_numbers+=(8) ;;\n            nine) ordered_numbers+=(9)\
    \ ;;\n            *) ordered_numbers+=(999) ;;\n        esac\n    done\n\n   \
    \ i=0\n    for number in $(printf \"%s\\n\" \"${ordered_numbers[@]}\" | sort -n);\
    \ do\n        case \"${number}\" in\n            0) sorted_numbers[$i]=\"zero\"\
    \ ;;\n            1) sorted_numbers[$i]=\"one\" ;;\n            2) sorted_numbers[$i]=\"\
    two\" ;;\n            3) sorted_numbers[$i]=\"three\" ;;\n            4) sorted_numbers[$i]=\"\
    four\" ;;\n            5) sorted_numbers[$i]=\"five\" ;;\n            6) sorted_numbers[$i]=\"\
    six\" ;;\n            7) sorted_numbers[$i]=\"seven\" ;;\n            8) sorted_numbers[$i]=\"\
    eight\" ;;\n            9) sorted_numbers[$i]=\"nine\" ;;\n            *) sorted_numbers[$i]=\"\
    ???\" ;;\n        esac\n        i=$((i+1))\n    done\n\n    echo \"${sorted_numbers[@]}\"",
  "\tif [[ \"$#\" -ne 1 ]]; then\n\t\techo 'Input must be a string.'\n\telse\n\t\t\
    local -A map=(\n\t\t\t[zero]=0\n\t\t\t[one]=1\n\t\t\t[two]=2\n\t\t\t[three]=3\n\
    \t\t\t[four]=4\n\t\t\t[five]=5\n\t\t\t[six]=6\n\t\t\t[seven]=7\n\t\t\t[eight]=8\n\
    \t\t\t[nine]=9\n\t\t)\n\t\tlocal -n arr=$1\n\t\tfor i in \"${!arr[@]}\"; do\n\t\
    \t\tlocal -n num=$i\n\t\t\tarr[$i]=${map[$num]}\n\t\tdone\n\t\techo ${arr[@]}\
    \ | tr ' ' '\\n' | sort -n | tr '\\n' ' '\n\tfi", '    echo "$1" | tr " " "\n"
    | sort -n | tr "\n" " " | tr -d [:space:]', '  # Write your code here', "  local\
    \ new_line\n  while read -r new_line\n  do\n    echo $new_line | tr ' ' '\\n'\
    \ | sort | tr '\\n' ' '\n  done", '    echo "$1" | tr " " "\n" | sort -n | tr
    "\n" " "', "    if [[ $# -eq 0 ]]; then\n        exit 1\n    fi\n    nums=\"zero\
    \ one two three four five six seven eight nine\"\n    for i in $nums; do\n   \
    \     echo \"$1\" | grep -q $i\n        if [[ $? -eq 0 ]]; then\n            echo\
    \ -n $i\n            [[ $1 =~ \\ $i ]] && echo -n \" \"\n        fi\n    done"]
stop_tokens:
- "\n}"
