name: HumanEval_159_eat
language: sh
prompt: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
  \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
  \ meals.\n# you should return an array of [ total number of eaten carrots after\
  \ your meals,\n# the number of carrots left after your meals ]\n# if there are not\
  \ enough remaining carrots, you will eat all remaining carrots, but will still be\
  \ hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n\
  # * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number\
  \ : integer\n# the number of carrots that you have eaten.\n# @need : integer\n#\
  \ the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
  \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
  # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
  \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n"
tests: "}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
  \ \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"\
  12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate\
  \ \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9\
  \ 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
completions: ["    if [ $# -ne 3 ]; then\n        echo \"Usage: eat number need remaining\"\
    \n        exit 1\n    fi\n    _arr_count=($(($1+$2)))\n    if [ ${_arr_count}\
    \ -gt $3 ]; then\n        echo \"[$3, 0]\"\n    else\n        echo \"[${_arr_count},\
    \ $(($3-${_arr_count}))]\"\n    fi", "    # @param {int} $1\n    # @param {int}\
    \ $2\n    # @param {int} $3\n    local number=$1\n    local need=$2\n    local\
    \ remaining=$3\n    if [[ $(( $number + $need )) -gt $remaining ]]; then\n   \
    \     echo \"[$(( $remaining )), $(( $remaining - $number ))]\"\n    else\n  \
    \      echo \"[$(( $number + $need )), $(( $remaining - $number - $need ))]\"\n\
    \    fi", "  # your code here\n  if [ $3 -ge $2 ]\n  then\n    echo \"[$(( $1\
    \ + $2 )), $(( $3 - $2 ))]\"\n  else\n    echo \"[$(( $1 + $3 )), 0]\"\n  fi",
  "    local number=$1\n    local need=$2\n    local remaining=$3\n    local total=$((need+number))\n\
    \    [ $remaining -gt $total ] && echo \"[$total, $((remaining-total))]\" || echo\
    \ \"[$remaining, 0]\"", "  echo \"[$1, $2, $3]\"\n  if [[ ($1 + $2) -gt $3 ]];\
    \ then\n    echo \"[$3, 0]\"\n  else\n    echo \"[$(($1 + $2)), $3]\"\n  fi",
  "  number=$1\n  need=$2\n  remaining=$3\n  echo $((number+remaining)) | tr \" \"\
    \ \"\\n\" | sort -nr | tr \"\\n\" \" \"", "  local num=$1\n  local need=$2\n \
    \ local remain=$3\n  if [ \"$remain\" -eq 0 ]; then\n    echo [$num, 0]\n  elif\
    \ [ \"$remain\" -gt \"$need\" ]; then\n    echo [$((num + need)), $((remain -\
    \ need))]\n  else\n    echo [$((num + remain)), 0]\n  fi", "    if [ $1 -le 0\
    \ ] || [ $2 -le 0 ] || [ $3 -le 0 ]; then\n        echo \"Use a positive integer\"\
    \n        return\n    fi\n    if [ $3 -le $2 ]; then\n        echo \"There are\
    \ not enough remaining carrots to complete the day's meals\"\n        return\n\
    \    fi\n    if [ $1 -ge $2 ]; then\n        echo \"There are no need to eat\"\
    \n        return\n    fi\n    a=$1\n    b=$2\n    c=$3\n    eaten=$((a+b))\n \
    \   remain=$((c-b))\n    echo \"[$eaten, $remain]\"", "  echo $1 $2 $3 | awk '{print\
    \ ($1+$2<=$3)?$1+$2,$3-($1+$2):$1+$2-($3+$1),0}'", "\t# TODO : your code here\n\
    \tif [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ] && [ $1 -le 1000 ] && [ $2 -le\
    \ 1000 ] && [ $3 -le 1000 ]\n\tthen\n\t\tif [ $2 -lt $3 ]\n\t\tthen\n\t\t\td=$(($1\
    \ + $2))\n\t\t\tc=$(($3 - $2))\n\t\t\techo \"[$d, $c]\"\n\t\telse\n\t\t\td=$(($1\
    \ + $3))\n\t\t\tc=0\n\t\t\techo \"[$d, $c]\"\n\t\tfi\n\telse\n\t\techo \"Constrain\
    \ non respect\xE9 !\"\n\tfi", "  # Write your code here ...\n  echo $1\n  echo\
    \ $2\n  echo $3\n  # Return an array, e.g: (42, 9)\n  res=$(( $1 + $2 ))\n  if\
    \ [ $res -gt $3 ]; then\n    echo [ $3, 0 ]\n  else\n    echo [ $res, $(( $3 -\
    \ $res )) ]\n  fi", "    local number=\"$1\"\n    local need=\"$2\"\n    local\
    \ remaining=\"$3\"\n    # your code here\n    totalCarrots=$((number + remaining))\n\
    \    leftCarrots=$((totalCarrots - need))\n    if [[ ${totalCarrots} -ge ${need}\
    \ ]]; then\n        printf \"You ate a total of %s carrots and have %s carrots\
    \ left.\" ${need} ${leftCarrots}\n    else\n        printf \"You ate a total of\
    \ %s carrots and have %s carrots left.\" ${totalCarrots} 0\n    fi", "  if [[\
    \ $2 -lt $3 ]]; then\n    echo \"[$(($1 + $2)), $(( $3 - $2 ))]\"\n  else\n  \
    \  echo \"[$(($1 + $3)), 0]\"\n  fi", "\tlocal -i tot=($1+$2)\n\n\tif [ $tot -le\
    \ $3 ]; then\n\t\techo $1 $tot\n\telif [ $tot -le 1000 ]; then\n\t\techo $1 $3\n\
    \telse\n\t\techo \"Attention: Your rabbit ate too much\"\n\tfi", "    number=$1\n\
    \    need=$2\n    remaining=$3\n    total=$(( $number + $need ))\n    carrots=$((\
    \ $remaining - $need ))\n    echo \"[$total, $carrots]\"", "  carrots=$1\n  need=$2\n\
    \  remain=$3\n  if [[ $need -le $remain ]]; then\n    need=0\n    remain=$(($remain-$need))\n\
    \  else\n    need=$(($need-$remain))\n    remain=0\n  fi\n  echo \"[$(($carrots+$remain)),\
    \ $need]\"", "  local number=$1\n  local need=$2\n  local remaining=$3\n  if [\
    \ $remaining -gt $need ]; then\n    echo \"[$((need + number)), $((remaining -\
    \ need))]\"\n  else\n    echo \"[$((remaining + number)), 0]\"\n  fi", "    #\
    \ Write your code here\n    return [$(($1+$2)),$(($3-$2))]", "    declare -i number=$1\n\
    \    declare -i need=$2\n    declare -i remaining=$3\n    array=($number $need\
    \ $remaining)\n    for (( i=0; i<${#array[@]}; i++ )); do\n        if (( ${array[$i]}\
    \ < 0 )) || (( ${array[$i]} > 1000 )); then\n            echo \"Input is not correct\"\
    \n            return 1\n        fi\n    done\n    if (( $need > $remaining ));\
    \ then\n        echo \"[$(( number + remaining )), 0]\"\n    else\n        echo\
    \ \"[$(( number + need )), $(( remaining - need ))]\"\n    fi", "  total_eaten=$(($1\
    \ + $2))\n  left=$(($3 - $2))\n  if [[ $left -ge 0 ]]; then\n    echo \"[$total_eaten,\
    \ $left]\"\n  else\n    echo \"[$total_eaten, 0]\"\n  fi"]
stop_tokens:
- "\n}"
