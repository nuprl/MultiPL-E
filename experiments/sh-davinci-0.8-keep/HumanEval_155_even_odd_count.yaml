name: HumanEval_155_even_odd_count
language: sh
prompt: "#!/bin/bash\n# Given an integer. return a tuple that has the number of even\
  \ and odd digits respectively.\n# Example:\n# even_odd_count(-12) ==> (1, 1)\n#\
  \ even_odd_count(123) ==> (1, 2)\n#\n# $1 is an integer\neven_odd_count() {\n"
tests: "}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n\
  \    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\" ]]\n\
  \    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\") = \"\
  3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate \"-2\"\
  ) = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
  \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
completions: ["    test $1 -lt 0 && echo \"($(even_odd_count \"$(($1 * -1))\"), 0)\"\
    \ || (\n        echo \"$1\" | sed 's/./&\\n/g' | grep -cvE '[13579]'\n       \
    \ echo \"$1\" | sed 's/./&\\n/g' | grep -cE '[13579]'\n    ) | paste -s -d','\
    \ -", "    num=$1\n    even=0\n    odd=0\n    for ((i=1; i<${#num}; i++)); do\n\
    \        if [[ $((i%2)) -eq 0 ]]; then\n            even=$((even+1))\n       \
    \ else\n            odd=$((odd+1))\n        fi\n    done\n    echo \"($even, $odd)\"",
  "  #\n  # Write your code here\n  #\n  if (( $1 < 0 )); then\n    value=$(( $1 *\
    \ -1 ))\n  else\n    value=$1\n  fi\n  even=0\n  odd=0\n  # This loop will split\
    \ each digit and echo it\n  for (( i=1; i<=$(echo $value | wc -c); i++ )); do\n\
    \    digit=$(echo $value | cut -c $i)\n    if (( $digit % 2 == 0 )); then\n  \
    \    (( even++ ))\n    else\n      (( odd++ ))\n    fi\n  done\n  # Even and odd\
    \ digits\n  echo \"($even, $odd)\"", "    even_count=0\n    odd_count=0\n    abs_n=$(printf\
    \ \"%.0f\" $(echo \"$1 < 0 ? -$1 : $1\" | bc))\n    #echo \"$abs_n\"\n    while\
    \ [ $abs_n -gt 0 ]; do\n        digit=$(expr $abs_n % 10)\n        if [ $(expr\
    \ $digit % 2) -eq 0 ]; then\n            let even_count++\n        else\n    \
    \        let odd_count++\n        fi\n        abs_n=$(expr $abs_n / 10)\n    done\n\
    \    echo \"($even_count, $odd_count)\"", "    echo \"($(echo $1 | sed -E 's/[13579]//g'\
    \ | wc -m), $(echo $1 | sed -E 's/[02468]//g' | wc -m))\"", "    if [[ \"$1\"\
    \ =~ ^-?[0-9]+$ ]]; then\n        local even=0\n        local odd=0\n        for\
    \ (( i=0; i<${#1}; i++ )); do\n            digit=${1:$i:1}\n            if [[\
    \ $(( digit % 2 )) -eq 0 ]]; then\n                even=$(( even + 1 ))\n    \
    \        else\n                odd=$(( odd + 1 ))\n            fi\n        done\n\
    \        echo \"($even, $odd)\"\n    else\n        echo \"ValueError\"\n    fi",
  "    local number=$1\n    local even_count=0\n    local odd_count=0\n    local n\n\
    \    if [ \"$number\" -lt 0 ]; then\n        number=$((-number))\n    fi\n   \
    \ while [ \"$number\" -gt 0 ]; do\n        n=$((number % 10))\n        if [ $((n\
    \ % 2)) -eq 0 ]; then\n            even_count=$((even_count + 1))\n        else\n\
    \            odd_count=$((odd_count + 1))\n        fi\n        number=$((number\
    \ / 10))\n    done\n    echo \"($even_count, $odd_count)\"", "  int=$1\n  if [\
    \ $int -lt 0 ]; then\n    int=$(( $int * -1 ))\n  fi\n  evens=0\n  odds=0\n  while\
    \ [ $int -gt 0 ]; do\n    if [ $(( $int % 2 )) -eq 0 ]; then\n      evens=$((\
    \ $evens + 1 ))\n    else\n      odds=$(( $odds + 1 ))\n    fi\n    int=$(( $int\
    \ / 10 ))\n  done\n  echo \"($evens, $odds)\"", "    local num=$1\n    local even=0\n\
    \    local odd=0\n    local digit\n    while [[ $num -ne 0 ]]; do\n        digit=$((\
    \ num % 10 ))\n        if [[ $(( digit % 2 )) -eq 0 ]]; then\n            even=$((\
    \ even + 1 ))\n        else\n            odd=$(( odd + 1 ))\n        fi\n    \
    \    num=$(( num / 10 ))\n    done\n    echo \"($even, $odd)\"", '  # your code
    here', "  # break down $1 to an array of digit\n  x=$1\n  _list=()\n  while [\
    \ $x -ne 0 ]; do\n    _list+=($((x % 10)))\n    x=$((x / 10))\n  done\n  #  echo\
    \ ${_list[@]}\n  even=0\n  odd=0\n  for i in ${_list[@]}; do\n    if [ $((i %\
    \ 2)) -eq 0 ]; then\n      even=$((even + 1))\n    else\n      odd=$((odd + 1))\n\
    \    fi\n  done\n  echo \"($even, $odd)\"", "    local count_even=0\n    local\
    \ count_odd=0\n    local value=$1\n    while [ $value -ne 0 ]; do\n        local\
    \ digit=$((value % 10))\n        if [ $((digit % 2)) -eq 0 ]; then\n         \
    \   count_even=$((count_even + 1))\n        else\n            count_odd=$((count_odd\
    \ + 1))\n        fi\n        value=$((value / 10))\n    done\n    echo \"($count_even,\
    \ $count_odd)\"", "    even=0\n    odd=0\n    for d in $(echo $1 | grep -o .);\
    \ do\n        if [[ $(( d % 2 )) -eq 0 ]]; then\n            even=$(( even + 1\
    \ ))\n        else\n            odd=$(( odd + 1 ))\n        fi\n    done\n   \
    \ echo \"( $even, $odd )\"", "    local even_count=0\n    local odd_count=0\n\
    \    for digit in $(echo $1 | sed 's/[^0-9]//g'); do\n        if (($digit % 2\
    \ == 0)); then\n            even_count=$((even_count + 1))\n        else\n   \
    \         odd_count=$((odd_count + 1))\n        fi\n    done\n    echo \"( $even_count,\
    \ $odd_count )\"", "    even=0\n    odd=0\n    integer=${1}\n    if [[ ${integer}\
    \ -lt 0 ]]; then\n        integer=$(( integer * -1 ))\n    fi\n    while [[ ${integer}\
    \ -gt 0 ]]; do\n        # get modulo 10 of integer\n        modulo=$(( integer\
    \ % 10 ))\n        if [[ ${modulo} -eq 0 ]]; then\n            even=$(( even +\
    \ 1 ))\n        elif [[ ${modulo} -eq 1 ]]; then\n            odd=$(( odd + 1\
    \ ))\n        else\n            rem=$(( modulo % 2 ))\n            if [[ ${rem}\
    \ -eq 0 ]]; then\n                even=$(( even + 1 ))\n            else\n   \
    \             odd=$(( odd + 1 ))\n            fi\n        fi\n        integer=$((\
    \ integer / 10 ))\n    done\n    printf \"(%d, %d)\\n\" ${even} ${odd}", "  local\
    \ num=\"$1\"\n  local even_count=0\n  local odd_count=0\n  while [ \"$num\" -ne\
    \ 0 ]; do\n    if [ $(($num % 2)) -eq 0 ]; then\n      even_count=$(($even_count\
    \ + 1))\n    else\n      odd_count=$(($odd_count + 1))\n    fi\n    num=$(($num\
    \ / 10))\n  done\n  echo $even_count $odd_count", "    even_cnt=0\n    odd_cnt=0\n\
    \    for digit in `echo \"$1\" | grep -o .`; do\n        if echo \"$digit\" |\
    \ grep -q \"[[:digit:]]\"; then\n            # $digit is a digit.\n          \
    \  if test $((digit % 2)) -eq 0; then\n                even_cnt=$((even_cnt +\
    \ 1))\n            else\n                odd_cnt=$((odd_cnt + 1))\n          \
    \  fi\n        fi\n    done\n    echo -n \"($even_cnt, $odd_cnt)\"", "  # Declare\
    \ an empty array\n  evens=0\n  odds=0\n  # Use a regex to find the digits and\
    \ save them in an array\n  ARRAY=($(echo $1 | sed 's/\\-//g' | grep -o .))\n \
    \ # Loop over the array and do the comparison\n  for num in ${ARRAY[@]}; do\n\
    \    # Bash does not have a remainder operator so we have to use mod instead\n\
    \    if [ $((num % 2)) -eq 0 ]; then\n      # Increment the evens variable\n \
    \     ((evens++))\n    else\n      # Increment the odds variable\n      ((odds++))\n\
    \    fi\n  done\n  # Print the results\n  echo \"($evens, $odds)\"", "    local\
    \ even=0\n    local odd=0\n    # loop through every digit\n    for (( i=0; i<${#1};\
    \ i++ )); do\n        local digit=\"${1:$i:1}\"\n        if [ $(( digit % 2 ))\
    \ -eq 0 ]; then\n            ((even++))\n        else\n            ((odd++))\n\
    \        fi\n    done\n    echo \"( $even, $odd )\"", "\tlocal digits=( $(echo\
    \ $1 | sed -E 's/[-]*([0-9])/\\1/g') )\n\tlocal evens=0\n\tlocal odds=0\n\tfor\
    \ digit in ${digits[@]}; do\n\t\t[ $(( digit % 2 )) -eq 0 ] && let evens++ ||\
    \ let odds++\n\tdone\n\techo \"[$evens, $odds]\""]
stop_tokens:
- "\n}"
