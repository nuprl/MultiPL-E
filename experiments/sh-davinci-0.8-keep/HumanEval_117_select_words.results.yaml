language: sh
name: HumanEval_117_select_words
results:
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    # select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"\
    simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n#\n# $1 is a string\n# $2\
    \ is an integer\nselect_words() {\n  local str=\"$1\"\n  local n=\"$2\"\n  # Your\
    \ code here\n  for word in $str; do\n      consonants=$(echo \"$word\" | grep\
    \ -o [bcdfghjklmnpqrstvwxyz] | wc -l)\n      if [ $consonants -eq $n ]; then\n\
    \          echo \"$word\"\n      fi\n  done\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020438
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    # select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"\
    simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n#\n# $1 is a string\n# $2\
    \ is an integer\nselect_words() {\n    IFS=\" \"\n    local -a arr\n    for word\
    \ in $1\n    do\n        if [ $(grep -o '[^aeiou]' <<< \"$word\" | wc -l) -eq\
    \ $2 ]\n        then\n            arr+=(\"$word\")\n        fi\n    done\n   \
    \ echo \"${arr[@]}\"\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\"\
    \ ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n\
    \    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020438
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    # select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"\
    simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n#\n# $1 is a string\n# $2\
    \ is an integer\nselect_words() {\n    local s=${1,,} # Case insensitive\n   \
    \ local n=$2\n    local word\n    local consonants\n    local output=()\n    local\
    \ vowels=\"a|e|i|o|u\"\n\n    for word in $s; do\n        consonants=$(echo $word\
    \ | sed \"s/\\($vowels\\)//g\")\n        if [ ${#consonants} -eq $n ]; then\n\
    \            output+=(\"$word\")\n        fi\n    done\n\n    echo \"${output[@]}\"\
    \n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020438
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    # select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"\
    simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n#\n# $1 is a string\n# $2\
    \ is an integer\nselect_words() {\n    echo \"$1\" | tr ' ' '\\n' | awk -v n=$2\
    \ 'length($0) - length($0 ~ /[aeiou]/g) == n'\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020438
- exit_code: 0
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    # select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"\
    simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n#\n# $1 is a string\n# $2\
    \ is an integer\nselect_words() {\n    local -a words=()\n    local word\n   \
    \ local num_consonants=0\n    local char\n\n    for word in ${1//[^[:alnum:]]/\
    \ }; do\n        for (( i=0; i<${#word}; i++ )); do\n            char=${word:$i:1}\n\
    \            if [[ $char =~ [^aeiouAEIOU] ]]; then\n                (( num_consonants++\
    \ ))\n            fi\n        done\n        if [[ $num_consonants -eq $2 ]]; then\n\
    \            words+=($word)\n        fi\n        num_consonants=0\n    done\n\
    \    echo ${words[@]}\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\"\
    \ ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n\
    \    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020438
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    # select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"\
    simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n#\n# $1 is a string\n# $2\
    \ is an integer\nselect_words() {\n  s=$1\n  n=$2\n  echo $s | tr ' ' '\\n' |\
    \ grep -E \"^[^aeiouy]{$n}$\"\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") =\
    \ \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary\
    \ lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[\
    \ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle\
    \ sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[\
    \ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020438
- exit_code: 2
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    # select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"\
    simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n#\n# $1 is a string\n# $2\
    \ is an integer\nselect_words() {\n  # Put code here\n}\n\ncandidate() {\n   \
    \ select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little\
    \ lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\"\
    \ \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n\
    \    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\
    \" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8duwyel6.sh: line 18: syntax error near unexpected token `}''

    /tmp/tmp8duwyel6.sh: line 18: `}''

    '
  stdout: ''
  timestamp: 1660020438
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    # select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"\
    simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n#\n# $1 is a string\n# $2\
    \ is an integer\nselect_words() {\n  [[ -z $1 ]] && return 0\n  local words=(${1//,/\
    \ })\n  local num_cons=$2\n  local letters\n  local consonants=0\n  local tmp\n\
    \  local word\n  for word in \"${words[@]}\"; do\n    letters=(${word// / })\n\
    \    consonants=0\n    for (( i=0; i<${#letters[@]}; i++ )); do\n      case ${letters[$i]}\
    \ in\n        [^aeiou]) ((consonants++)) ;;\n      esac\n    done\n    if [[ $consonants\
    \ -eq $num_cons ]]; then\n      echo -n \"$word \"\n    fi\n  done\n  echo\n}\n\
    \ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020438
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    # select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"\
    simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n#\n# $1 is a string\n# $2\
    \ is an integer\nselect_words() {\n    for word in $1; do\n        consonants=0\n\
    \        for ((j=0; j<${#word}; j++)); do\n            case ${word:$j:1} in\n\
    \                [aeiouAEIOU]) ;;\n                *) consonants=$((consonants+1))\
    \ ;;\n            esac\n        done\n        if [[ $consonants -eq $2 ]]; then\n\
    \            echo $word\n        fi\n    done\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020438
- exit_code: -1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    # select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"\
    simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n#\n# $1 is a string\n# $2\
    \ is an integer\nselect_words() {\n  awk '{\n    consonants = \"BbCcDdFfGgHhJjKkLlMmNnPpQqRrSsTtVvWwXxYyZz\"\
    \n    s = toupper($0)\n    sep = \"\";\n    for (i = 1; i <= length(s); i++) {\n\
    \      letter = substr(s, i, 1)\n      if (index(consonants, letter) != 0) {\n\
    \        nb_consonants++\n      }\n    }\n    if (nb_consonants == n) {\n    \
    \  print $0\n    }\n    nb_consonants = 0\n  }' n=$2\n}\n\ncandidate() {\n   \
    \ select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little\
    \ lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\"\
    \ \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n\
    \    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\
    \" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n\
    }\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=31 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=29 encoding='utf-8'>
  timestamp: 1660020443
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    # select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"\
    simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n#\n# $1 is a string\n# $2\
    \ is an integer\nselect_words() {\n   # For output, use array\n   local count\n\
    \   local words\n   local word\n   local selected\n   count=0\n   selected=()\n\
    \   words=$(echo \"$1\" | tr -s ' ' '\\n')\n   for word in $words; do\n      count=$(echo\
    \ \"$word\" | grep -o '[^aeiou]' | wc -l)\n      if [ $count -eq $2 ]; then\n\
    \         selected+=(\"$word\")\n      fi\n   done\n   echo \"${selected[@]}\"\
    \n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020438
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    # select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"\
    simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n#\n# $1 is a string\n# $2\
    \ is an integer\nselect_words() {\n    local input=$1\n    local string=\"${input}\"\
    \n    local consonants=${2}\n    local result=\"\"\n    local words=\"${string//[^[:alnum:]]/\
    \ }\"\n    for word in ${words}; do\n        local count=0\n        local temp=\"\
    ${word}\"\n        while [[ $temp =~ (.*[[:alpha:]])(.)(.*) ]]; do\n         \
    \   temp=\"${BASH_REMATCH[1]}${BASH_REMATCH[3]}\"\n            case \"${BASH_REMATCH[2]}\"\
    \ in\n                [b-df-hj-np-tv-zB-DF-HJ-NP-TV-Z]) count=$((count+1)) ;;\n\
    \            esac\n        done\n        if [ ${count} -eq ${consonants} ]; then\n\
    \            result=\"${result} ${word}\"\n        fi\n    done\n    echo ${result}\n\
    }\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020438
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    # select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"\
    simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n#\n# $1 is a string\n# $2\
    \ is an integer\nselect_words() {\n  if [ $# -ne 2 ]; then\n    echo \"Usage:\
    \ $0 <string> <integer>\"\n    exit 1\n  fi\n  if [ -z \"$1\" ]; then\n    echo\
    \ \"string: $1\"\n    echo \"integer: $2\"\n    echo \"\"\n    echo \"The string\
    \ is empty. Exiting...\"\n    exit 1\n  fi\n  # get string length \n  string_length=${#1}\n\
    \  # use grep to remove all vowels\n  # pipes result to wc to count number of\
    \ characters\n  # stores output in variable\n  result=$(echo \"$1\" | grep -io\
    \ \"[^aeiouyAEIOUY]\" | wc -c)\n  # check if result is equal to 2\n  if [ $result\
    \ -eq $2 ]; then\n    echo \"$1\"\n  fi\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020438
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    # select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"\
    simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n#\n# $1 is a string\n# $2\
    \ is an integer\nselect_words() {\n\tif [ -z \"$1\" ]; then\n\t\techo \"[]\"\n\
    \t\treturn\n\tfi\n\tinput_string=$1\n\tnum_consonants=$2\n\tinput_array=(`echo\
    \ $input_string | sed -e 's/[a-zA-Z]\\+/\\n&\\n/g'`)\n\tcurr_word=\"\"\n\tresult_array=()\n\
    \tconsonants_count=0\n\tconsonants=\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n\tfor word in \"${input_array[@]}\"; do\n\t\tconsonants_count=0\n\t\t# echo\
    \ \"--\"\n\t\t# echo \"word: $word\"\n\t\t# echo \"num_consonants: $num_consonants\"\
    \n\t\tfor (( i=0; i<${#word}; i++ )); do\n\t\t\t# echo \"index: $i\"\n\t\t\t#\
    \ echo \"char: ${word:$i:1}\"\n\t\t\tif [[ $consonants =~ \"${word:$i:1}\" ]];\
    \ then\n\t\t\t\tconsonants_count=$((consonants_count+1))\n\t\t\tfi\n\t\tdone\n\
    \t\t# echo \"consonants_count: $consonants_count\"\n\t\tif [ $consonants_count\
    \ -eq $num_consonants ]; then\n\t\t\tresult_array+=(\"$word\")\n\t\tfi\n\tdone\n\
    \techo ${result_array[@]}\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"\
    little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\"\
    \ ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020438
- exit_code: 2
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    # select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"\
    simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n#\n# $1 is a string\n# $2\
    \ is an integer\nselect_words() {\n\nlocal str=$1\nlocal val=$2\n\necho $str |\
    \ awk '{\n    for(i=1;i<=NF;i++) {\n        if(match($i, /[aeiou]/g)==0 && length($i)=='$val')\
    \ {\n            print $i\n        }\n    }\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpq7efmjh9.sh: line 23: unexpected EOF while looking for matching
    `''''

    /tmp/tmpq7efmjh9.sh: line 45: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660020438
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    # select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"\
    simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n#\n# $1 is a string\n# $2\
    \ is an integer\nselect_words() {\n        echo $1 | tr -d ' ' | sed 's/[aeiou]//g'\
    \ | grep -o '[^ ]\\{'$2'\\}'\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") =\
    \ \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary\
    \ lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[\
    \ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle\
    \ sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[\
    \ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020438
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    # select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"\
    simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n#\n# $1 is a string\n# $2\
    \ is an integer\nselect_words() {\n    (\n        IFS=' '\n        words=()\n\
    \        [[ -n $1 ]] && {\n            for w in $1; do\n                count=0\n\
    \                for ((i=0; i<${#w}; i++)); do\n                    [[ ${w:i:1}\
    \ =~ [bcdfghjklmnpqrstvwxyz] ]] && ((count++))\n                done\n       \
    \         ((count == $2)) && words+=(\"$w\")\n            done\n        }\n  \
    \      printf \"%s\\n\" \"${words[@]}\"\n    )\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020438
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    # select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"\
    simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n#\n# $1 is a string\n# $2\
    \ is an integer\nselect_words() {\n    for w in $1; do\n        y=$(echo $w |\
    \ tr -cd '[aeiou]' | wc -c)\n        x=$(echo $w | tr -cd '[^aeiou]' | wc -c)\n\
    \        echo $x, $y\n        if [ $x -eq $2 ]; then\n            echo $w\n  \
    \      fi\n    done\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\"\
    \ ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n\
    \    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020438
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    # select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"\
    simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n#\n# $1 is a string\n# $2\
    \ is an integer\nselect_words() {\n    vowel=\"a e i o u\"\n    array=($1)\n \
    \   result=()\n    for i in \"${array[@]}\"; do\n        count=0\n        for\
    \ j in $(seq 0 $((${#i}-1))); do\n            letter=${i:$j:1}\n            if\
    \ [[ ! $vowel =~ $letter ]]; then\n                count=$((count+1))\n      \
    \      fi\n        done\n        if [[ $count -eq $2 ]]; then\n            result+=(\"\
    $i\")\n        fi\n    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020438
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    # select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"\
    simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n#\n# $1 is a string\n# $2\
    \ is an integer\nselect_words() {\n  # Is the string empty?\n  if [ ${#1} -eq\
    \ 0 ]; then\n    return []\n  fi\n  # Get the list of words\n  words=$(echo $1\
    \ | tr \" \" \"\\n\")\n  # Number of consonants in each word.\n  numCons=0\n \
    \ result=()\n  # For each word\n  for word in $words; do\n    # Get the number\
    \ of consonants in that word\n    numCons=$(echo $word | sed -E 's/[aeiou]+//g'\
    \ | wc -c)\n    # If that number is equal to $2\n    if [ $numCons -eq $2 ]; then\n\
    \      # Add that word to result array\n      result+=($word)\n    fi\n  done\n\
    \  # Return the result array\n  echo ${result[@]}\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020438
