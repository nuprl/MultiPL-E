name: HumanEval_119_match_parens
language: sh
prompt: "#!/bin/bash\n# You are given a list of two strings, both strings consist\
  \ of open\n# parentheses '(' or close parentheses ')' only.\n# Your job is to check\
  \ if it is possible to concatenate the two strings in\n# some order, that the resulting\
  \ string will be good.\n# A string S is considered to be good if and only if all\
  \ parentheses in S\n# are balanced. For example: the string '(())()' is good, while\
  \ the string\n# '())' is not.\n# Return 'Yes' if there's a way to make a good string,\
  \ and return 'No' otherwise.\n# Examples:\n# match_parens(['()(', ')']) == 'Yes'\n\
  # match_parens([')', ')']) == 'No'\n#\n# $1 is a space-separated list\nmatch_parens()\
  \ {\n"
tests: "}\n\ncandidate() {\n    match_parens \"$@\"\n}\n\nset -e\nrun_test() {\n \
  \   [[ $(candidate \"()( )\") = \"Yes\" ]]\n    [[ $(candidate \") )\") = \"No\"\
  \ ]]\n    [[ $(candidate \"(()(()) ())())\") = \"No\" ]]\n    [[ $(candidate \"\
  )()) (()()(\") = \"Yes\" ]]\n    [[ $(candidate \"(()))) (()())((\") = \"Yes\" ]]\n\
  \    [[ $(candidate \"() ())\") = \"No\" ]]\n    [[ $(candidate \"(()( ()))()\"\
  ) = \"Yes\" ]]\n    [[ $(candidate \"(((( ((())\") = \"No\" ]]\n    [[ $(candidate\
  \ \")(() (()(\") = \"No\" ]]\n    [[ $(candidate \")( )(\") = \"No\" ]]\n    [[\
  \ $(candidate \"( )\") = \"Yes\" ]]\n    [[ $(candidate \") (\") = \"Yes\" ]]\n\
  }\n\nrun_test"
completions: []
stop_tokens:
- "\n}"
