name: HumanEval_16_count_distinct_characters
language: sh
prompt: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
  \ of case) does it consist of\n# >>> count_distinct_characters('xyzXYZ')\n# 3\n\
  # >>> count_distinct_characters('Jerry')\n# 4\n#\n# $1 is a string\ncount_distinct_characters()\
  \ {\n"
tests: "}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test()\
  \ {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\"\
  \ ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\"\
  ) = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
completions: ["  if [ $# -ne 1 ]; then\n    echo \"Usage: $0 STRING\"\n    return\
    \ 1\n  fi\n\n  echo -n $1 | tr -s '[:upper:]' '[:lower:]' | fold -w1 | sort |\
    \ uniq | wc -l", "  if [ $# -eq 0 ]; then\n    echo 'Usage: count_distinct_characters\
    \ STRING'\n    return 1\n  fi\n\n  echo \"$1\" | tr '[:upper:]' '[:lower:]' |\
    \ fold -w1 | sort | uniq | wc -l", "  echo -n \"$1\" | tr '[:upper:]' '[:lower:]'\
    \ | fold -w1 | sort | uniq | wc -l", "\t# wc -m : Count the number of characters\
    \ in a file or stdin\n\t# tr -d : Deletes all characters specified in set\n\t\
    echo -n \"$1\" | tr -d '\\n' | wc -m", "    echo -n \"$1\" | tr -d -c 'a-zA-Z'\
    \ | sort -u | wc -c", "  # wc -m counts the number of characters in a string\n\
    \  # tr converts all characters to lower case and then\n  # sorts the string\n\
    \  # uniq counts the number of distinct characters in a string\n  # $(( $1 - 1\
    \ )) removes the trailing space in a string\n  local result=$(echo \"$1\" | tr\
    \ '[:upper:]' '[:lower:]' | sort | uniq | wc -m)\n  echo $(( $result - 1 ))",
  "    local str=$1\n    local -i strLen=${#str}\n    local uniqueCharList=\n    local\
    \ -i uniqueCharListLen=0\n    local curChar=\n    local -i curCharLoc=0\n    local\
    \ -i i=0\n    local -i j=0\n    local -i ret=0\n\n    if [[ ! ${str} =~ ^[a-zA-Z]+$\
    \ ]]; then\n        echo \"Please pass in a string, consisting only of characters\
    \ a-z or A-Z\"\n        return 1\n    fi\n\n    for ((i=0; i<strLen; i++)); do\n\
    \        curChar=${str:$i:1}\n        curCharLoc=$(echo $uniqueCharList | grep\
    \ -i -n $curChar | cut -d ':' -f 1)\n        if [[ -z $curCharLoc ]]; then\n \
    \           uniqueCharList=\"${uniqueCharList}${curChar}\"\n            ((uniqueCharListLen++))\n\
    \        fi\n    done\n\n    echo $uniqueCharListLen\n    return 0", '    echo
    "$1" | grep -o . | sort -u | wc -l', "  # Write your code here\n  echo ${1,,}\
    \ | fold -w1 | sort | uniq | wc -l", "    # echo \"$1\" | sed 's/\\(.\\)/\\1\\\
    n/g' | sort | uniq | wc -l\n    echo \"$1\" | grep -o . | sort | uniq | wc -l",
  "    local -l name=\"$1\"\n    local -A letter\n    for ((i=0; i<${#name}; i++));\
    \ do\n        letter[${name:i:1}]=1\n    done\n    echo \"${#letter[@]}\"", "\t\
    echo \"$1\" | grep -o \"[[:alpha:]]\" | tr '[:upper:]' '[:lower:]' | sort | uniq\
    \ | wc -l", "    local char_array\n    local count=0\n    local check_map=()\n\
    \    char_array=`echo \"$1\" | fold -w1`\n    for char in $char_array; do\n  \
    \      char=`echo $char | tr '[:upper:]' '[:lower:]'`\n        if [ ! ${check_map[$char]}\
    \ ]; then\n            check_map[$char]=1\n            count=$((count+1))\n  \
    \      fi\n    done\n    echo $count", "  echo $1 | tr -d [:space:] | tr 'A-Z'\
    \ 'a-z' | fold -w1 | sort | uniq | wc -l", "  declare -A char_to_count\n  for\
    \ ((i=0; i<${#1}; i++)); do\n    char_to_count[${1:i:1}]=1\n  done\n  echo ${#char_to_count[@]}",
  "  tr '[:upper:]' '[:lower:]' <<< $1 | grep -o . | sort | uniq | wc -l", "  lowercase=`echo\
    \ $1 | tr '[:upper:]' '[:lower:]'`\n  echo $lowercase | fold -w1 | sort | uniq\
    \ | wc -l", "    echo $1 | tr -s '[:upper:]' '[:lower:]' | fold -w1 | sort | uniq\
    \ | wc -l", '    echo "$1" | grep -ioE "[a-z]" | sort | uniq | wc -l', "  echo\
    \ \"$1\" | egrep -o '\\S' | tr '[:upper:]' '[:lower:]' | sort | uniq | wc -l"]
stop_tokens:
- "\n}"
