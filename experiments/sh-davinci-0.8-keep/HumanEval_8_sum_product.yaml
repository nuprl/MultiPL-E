name: HumanEval_8_sum_product
language: sh
prompt: "#!/bin/bash\n# For a given list of integers, return a tuple consisting of\
  \ a sum and a product of all the integers in a list.\n# Empty sum should be equal\
  \ to 0 and empty product should be equal to 1.\n# >>> sum_product([])\n# (0, 1)\n\
  # >>> sum_product([1, 2, 3, 4])\n# (10, 24)\n#\n# $1 is a space-separated list\n\
  sum_product() {\n"
tests: "}\n\ncandidate() {\n    sum_product \"$@\"\n}\n\nset -e\nrun_test() {\n  \
  \  [[ $(candidate \"\") = \"0 1\" ]]\n    [[ $(candidate \"1 1 1\") = \"3 1\" ]]\n\
  \    [[ $(candidate \"100 0\") = \"100 0\" ]]\n    [[ $(candidate \"3 5 7\") = \"\
  15 105\" ]]\n    [[ $(candidate \"10\") = \"10 10\" ]]\n}\n\nrun_test"
completions: ["\tlocal sum=0\n\tlocal product=1\n\tfor number in $1; do\n\t\tsum=$((sum\
    \ + number))\n\t\tproduct=$((product * number))\n\tdone\n\techo \"( $sum, $product\
    \ )\"", "    echo \"($(echo \"$1\" | tr ' ' '+'),\"\n    echo \"$(echo \"$1\"\
    \ | tr ' ' '*')\"\n    echo \")\"", "  if [ -z \"$1\" ]; then\n    echo \"(0,\
    \ 1)\"\n  else\n    sum=$(echo \"$1\" | xargs | sed 's/ /+/g' | bc)\n    product=$(echo\
    \ \"$1\" | xargs | sed 's/ /\\*/g' | bc)\n    echo \"($sum, $product)\"\n  fi",
  "    local prod=1\n    local sum=0\n    for i in $1; do\n        prod=$((prod *\
    \ i))\n        sum=$((sum + i))\n    done\n    echo $sum $prod", "  sum=0\n  product=1\n\
    \  for num in $1; do\n    sum=$((sum + num))\n    product=$((product * num))\n\
    \  done\n  echo \"($sum, $product)\"", "    echo $1\n    sum=0\n    product=1\n\
    \    for i in ${1[@]}; do\n        sum=$(($sum + $i))\n        product=$(($product\
    \ * $i))\n    done\n    echo \"($sum, $product)\"", "    sum=0\n    prod=1\n \
    \   for num in $1; do\n        ((sum += num))\n        ((prod *= num))\n    done\n\
    \    echo \"( $sum, $prod )\"", "  local sum=0\n  local prod=1\n  for i in $@;\
    \ do\n    sum=$((sum + i))\n    prod=$((prod * i))\n  done\n  echo \"($sum, $prod)\"",
  "    local sum_product=\"$1\" sum=0 product=1\n    for (( i=0; i<${#sum_product};\
    \ i++ )); do\n        sum=$(( $sum + ${sum_product:$i:1} ))\n        product=$((\
    \ $product * ${sum_product:$i:1} ))\n    done\n    echo \"($sum, $product)\"",
  "  sum=$(printf \"%s\\n\" $1 | awk '{ sum += $1 } END { print sum }')\n  product=$(printf\
    \ \"%s\\n\" $1 | awk '{ sum *= $1 } END { print sum }')\n  echo \"($sum, $product)\"",
  "    local -i sum product\n    for n in $1; do\n        (( sum += n ))\n       \
    \ (( product *= n ))\n    done\n    echo $sum $product", "    if [ -z \"$1\" ];\
    \ then\n        echo '(0, 1)'\n    else\n        sum=$(echo \"$1\" | tr ' ' '+'\
    \ | bc)\n        product=$(echo \"$1\" | tr ' ' '*' | bc)\n        echo \"($sum,\
    \ $product)\"\n    fi", "\tlocal sum=0 prod=1\n\tfor i in $1; do\n\t\tlet sum+=$i\
    \ prod*=$i\n\tdone\n\techo \"($sum, $prod)\"", "    sum=0\n    product=1\n   \
    \ for i in $1; do\n        ((sum=sum+i))\n        ((product=product*i))\n    done\n\
    \    echo \"(\\\"$sum\\\", \\\"$product\\\")\"", "    sum=0\n    product=1\n \
    \   for i in $1; do\n        let sum=$sum+$i\n        let product=$product*$i\n\
    \    done\n    echo $(($sum, $product))", "\techo $1 | tr ' ' '\\n' | {\n\t\t\
    local sum=$(cat | paste -sd+ - | bc)\n\t\tlocal product=$(cat | paste -sd\\* -\
    \ | bc)\n\t\techo \"($sum, $product)\"\n\t}", "    sum=0\n    product=1\n    for\
    \ i in $1; do\n        let sum+=i\n        let product*=i\n    done\n    echo\
    \ \"($sum, $product)\"", "    declare -a list\n    declare sum product\n    sum=0\n\
    \    product=1\n    IFS=' ' read -ra list <<< \"$1\"\n    for num in \"${list[@]}\"\
    ; do\n        ((sum+=num))\n        ((product*=num))\n    done\n    echo \"($sum,\
    \ $product)\"", "    local -i result_sum=0\n    local -i result_product=1\n  \
    \  for i in $1; do\n        ((result_sum+=$i))\n        ((result_product*=$i))\n\
    \    done\n    echo \"($result_sum, $result_product)\"", "    # Write your code\
    \ here\n    # To print results to the standard output you can use print\n    #\
    \ Example: print \"Hello world!\"\n    s=0\n    p=1\n    for i in $1\n    do\n\
    \    let s=$s+$i\n    let p=$p*$i\n    done\n    echo \"($s, $p)\""]
stop_tokens:
- "\n}"
