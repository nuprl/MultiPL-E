name: HumanEval_93_encode
language: sh
prompt: "#!/bin/bash\n# Write a function that takes a message, and encodes in such\
  \ a \n# way that it swaps case of all letters, replaces all vowels in \n# the message\
  \ with the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
  \ \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>>\
  \ encode('This is a message')\n# 'tHKS KS C MGSSCGG'\n#\n# $1 is a string\nencode()\
  \ {\n"
tests: "}\n\ncandidate() {\n    encode \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
  \ \"TEST\") = \"tgst\" ]]\n    [[ $(candidate \"Mudasir\") = \"mWDCSKR\" ]]\n  \
  \  [[ $(candidate \"YES\") = \"ygs\" ]]\n    [[ $(candidate \"This is a message\"\
  ) = \"tHKS KS C MGSSCGG\" ]]\n    [[ $(candidate \"I DoNt KnOw WhAt tO WrItE\")\
  \ = \"k dQnT kNqW wHcT Tq wRkTg\" ]]\n}\n\nrun_test"
completions: ["    echo \"$1\" | tr '[:lower:]' '[:upper:]' | sed 's/[AEIOU]/\\0\\\
    0/g'", "    # first convert all lowercase to uppercase and vice versa\n    # then\
    \ swap vowels with the next 2 characters \n    echo \"$1\" | tr '[a-zA-Z]' '[ZYXWVUTSRQPONMLKJIHGFEDCBAzyxwvutsrqponmlkjihgfedcba]'\
    \ | tr 'aeiou' 'ceglnr'", "  local input=$1\n  local output=\"\"\n  for (( i=0;\
    \ i<${#input}; i++ )); do\n    c=${input:$i:1}\n    c2=$(printf \"%x\" \"'$c\"\
    )\n    if [ $c2 -ge 97 -a $c2 -le 122 ]; then\n      c=$(printf \\\\$(($c2-32)))\n\
    \    elif [ $c2 -ge 65 -a $c2 -le 90 ]; then\n      c=$(printf \\\\$(($c2+32)))\n\
    \    elif [ $c2 -ge 97 -a $c2 -le 101 ]; then\n      c=$(printf \\\\$(($c2+20)))\n\
    \    elif [ $c2 -ge 101 -a $c2 -le 122 ]; then\n      c=$(printf \\\\$(($c2-4)))\n\
    \    fi\n    output=\"$output$c\"\n  done\n  echo $output", "    str=$1\n    vowels=\"\
    a\"\n    encodedStr=\"\"\n    # loop through the string and change each character\n\
    \    for ((i=0; i<${#str}; i++)); do\n        # create the encoded character\n\
    \        char=${str:$i:1}\n        if [[ \"$char\" =~ [A-Z] ]]; then\n       \
    \     encChar=`echo $char | tr [A-Z] [a-z]`\n        elif [[ \"$char\" =~ [a-z]\
    \ ]]; then\n            encChar=`echo $char | tr [a-z] [A-Z]`\n        else\n\
    \            encChar=$char\n        fi\n        # add the encoded character to\
    \ encodedStr\n        encodedStr=\"$encodedStr$encChar\"\n    done\n    echo $encodedStr",
  "    # $1 is our input string\n    # loop through each letter in the string\n  \
    \  # this is a loop that will execute once for each letter in the string\n   \
    \ # the loop will set the variable $letter to the current letter as we loop\n\
    \    for letter in $(seq 0 $((${#1} - 1))); do\n        # ${1:$letter:1} is a\
    \ substring function that extracts a substring of length 1\n        # from our\
    \ input string ($1) starting at index $letter\n        # this is our current letter\n\
    \n        # we need to isolate if the letter is uppercase or lowercase\n     \
    \   # we can do this by comparing the lowercase and uppercase versions\n     \
    \   # of the letter against each other\n\n        # we can use the lowercase and\
    \ uppercase functions to convert the\n        # letter to lowercase or uppercase\
    \ respectively\n\n        # ${letter,,} converts the letter to lowercase\n   \
    \     # ${letter^^} converts the letter to uppercase\n\n        # we can compare\
    \ the lowercase and uppercase letters against each other\n        # to see if\
    \ they are equal. If they are equal, then we know the letter\n        # is lowercase.\
    \ If they are not equal, then we know the letter is uppercase.\n\n        # if\
    \ the original letter is lowercase\n        if [ \"${1:$letter:1}\" == \"${1:$letter:1,,}\"\
    \ ]; then\n            # $newletter is a new letter that we will print out\n \
    \           # this is a copy of the original letter, but converted to uppercase\n\
    \            newletter=\"${1:$letter:1^^}\"\n        else\n            # if the\
    \ original letter is uppercase\n            # $newletter is a new letter that\
    \ we will print out\n            # this is a copy of the original letter, but\
    \ converted to lowercase\n            newletter=\"${1:$letter:1,,}\"\n       \
    \ fi\n\n        # detect if this is a vowel\n        # the vowels are: a, e, i,\
    \ o, u\n        # we can use the case statement to check if this letter matches\
    \ any of the vowels\n        # and then replace it with the letter 2 places ahead\n\
    \        case \"${1:$letter:1}\" in\n            a|A)\n                # a is\
    \ replaced with c\n", "  echo $1 | tr 'A-Za-z' 'N-ZA-Mn-za-m'", "    echo $1 |\
    \ tr 'a-zA-Z' 'c-za-bC-ZA-B'", "    #your code goes here\n    local encoded=\"\
    \"\n    local message=$1\n    local lowercase=\"abcdefghijklmnopqrstuvwxyz\"\n\
    \    local uppercase=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    for ((i=0; i<${#message};\
    \ i++)); do\n        local char=${message:$i:1}\n        local index\n       \
    \ if [[ $lowercase =~ (.*)$char(.*) ]]; then\n            index=${#BASH_REMATCH[1]}\n\
    \            char=${uppercase:$index:1}\n        elif [[ $uppercase =~ (.*)$char(.*)\
    \ ]]; then\n            index=${#BASH_REMATCH[1]}\n            char=${lowercase:$index:1}\n\
    \        fi\n        if [[ $lowercase =~ (.*)$char(.*) ]]; then\n            index=${#BASH_REMATCH[1]}\n\
    \            char=${lowercase:$index:1}\n        elif [[ $uppercase =~ (.*)$char(.*)\
    \ ]]; then\n            index=${#BASH_REMATCH[1]}\n            char=${uppercase:$index:1}\n\
    \        fi\n        if [[ $lowercase =~ (.*)[aeiou](.*) ]]; then\n          \
    \  index=${#BASH_REMATCH[1]}\n            index=$(( $index + 2 ))\n          \
    \  char=${lowercase:$index:1}\n        elif [[ $uppercase =~ (.*)[AEIOU](.*) ]];\
    \ then\n            index=${#BASH_REMATCH[1]}\n            index=$(( $index +\
    \ 2 ))\n            char=${uppercase:$index:1}\n        fi\n        encoded=$encoded$char\n\
    \    done\n    echo $encoded", "\tstr=\"\"\n\tfor ((i=0; i<${#1}; i++)); do\n\t\
    \tif [[ \"${1:$i:1}\" =~ [a-z] ]]; then\n\t\t\tstr=\"$str${1:$i:1^^}\"\n\t\telif\
    \ [[ \"${1:$i:1}\" =~ [A-Z] ]]; then\n\t\t\tstr=\"$str${1:$i:1,,}\"\n\t\telse\n\
    \t\t\tstr=\"$str${1:$i:1}\"\n\t\tfi\n\tdone\n\techo \"$str\"", "  local input=${1,,}\
    \ # lowercase\n  local output=\"\"\n  for (( i=0; i<${#input}; i++ )); do\n  \
    \  if [[ \"${input:$i:1}\" =~ [aeiou] ]]; then\n      output+=\"${ALPHABET:$((\
    \ (${ALPHABET_OFFSET}+$i+2)%${#ALPHABET} )):1}\"\n    else\n      output+=\"${input:$i:1}\"\
    \n    fi\n  done\n  echo \"${output^^}\" # uppercase", "    local vowels=aeiou\n\
    \    local encoded_msg=\"\"\n    local offset=2\n    local new_msg=\"\"\n    local\
    \ char=\"\"\n    local new_char=\"\"\n    local new_idx=0\n    local vowl_idx=0\n\
    \    local new_vowl_idx=0\n    local upper_chars=ABCDEFGHIJKLMNOPQRSTUVWXYZ\n\
    \    local lower_chars=abcdefghijklmnopqrstuvwxyz\n    local check_upper=\"\"\n\
    \    local check_lower=\"\"\n    local upper_vowels=AEIOU\n    local lower_vowels=aeiou\n\
    \    local new_vowl=\"\"\n    local new_vowl_idx=0\n    #new_msg=$(tr '[:lower:]'\
    \ '[:upper:]' <<< $1)\n    for (( i=0; i<${#1}; i++ )); do\n        char=${1:$i:1}\n\
    \        # checking if char is a vowel\n        if [ \"${vowels/#$char/}\" !=\
    \ \"$vowels\" ]; then\n            # checking if upper case vowel\n          \
    \  if [ \"${upper_vowels/#$char/}\" != \"$upper_vowels\" ]; then\n           \
    \     # calculating new vowel index for upper case\n                vowl_idx=$((${#upper_vowels}-${upper_vowels/#$char/}))\n\
    \                new_vowl_idx=$((($vowl_idx+$offset)%${#upper_vowels}))\n    \
    \            new_vowl=${upper_vowels:$new_vowl_idx:1}\n                new_msg+=$new_vowl\n\
    \            # checking if lower case vowel\n            elif [ \"${lower_vowels/#$char/}\"\
    \ != \"$lower_vowels\" ]; then\n                # calculating new vowel index\
    \ for lower case\n                vowl_idx=$((${#lower_vowels}-${lower_vowels/#$char/}))\n\
    \                new_vowl_idx=$((($vowl_idx+$offset)%${#lower_vowels}))\n    \
    \            new", "    # local is a function scoped variable\n    local a=\"\"\
    \n    local b=\"\"\n    # $a is the variable being set,\n    # $b is the variable\
    \ being returned\n    a=$(echo $1 | tr '[:lower:]' '[:upper:]')\n    b=$(echo\
    \ $a | tr '[:upper:]' '[D-ZA-C]')\n    echo $b", "    #echo \"arg 1: $1\"\n  \
    \  if [ $# -ne 1 ]; then\n        echo \"ERROR: $0 requires 1 argument.\"\n  \
    \      exit 1\n    fi\n    declare -l myStr=\"$1\"\n    myStr=\"${myStr//a/c}\"\
    \n    myStr=\"${myStr//e/g}\"\n    myStr=\"${myStr//i/k}\"\n    myStr=\"${myStr//o/q}\"\
    \n    myStr=\"${myStr//u/w}\"\n    myStr=\"${myStr//A/C}\"\n    myStr=\"${myStr//E/G}\"\
    \n    myStr=\"${myStr//I/K}\"\n    myStr=\"${myStr//O/Q}\"\n    myStr=\"${myStr//U/W}\"\
    \n    echo \"$myStr\"", "    local LETTERS=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n  \
    \  local NEW_LETTERS=\"CDEFGHIJKLMNOPQRSTUVWXYZAB\"\n    local new_message=\"\"\
    \n    for i in $(seq 1 ${#1}); do\n        # Grab the letter\n        local letter=${1:i-1:1}\n\
    \        # Check if it's uppercase\n        if [[ $letter == [A-Z] ]]; then\n\
    \            local new_letter=${NEW_LETTERS:${LETTERS%%${letter}*}+1:1}\n    \
    \        new_message=\"${new_message}${new_letter}\"\n        else\n         \
    \   local new_letter=${NEW_LETTERS:${LETTERS%%${letter}*}+1:1}\n            new_message=\"\
    ${new_message}${new_letter,,}\"\n        fi\n    done\n    echo $new_message",
  "    #echo $1 | tr '[a-z][A-Z]' '[A-Z][a-z]'\n    echo $1 | tr 'a-zA-Z' 'bcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'",
  "\techo $1 | sed 'y/abcdefghijklmnopqrstuvwxyz/bcdefghijklmnopqrstuvwxyza/' | sed\
    \ 'y/aeiou/eoiuae/'", "  echo \"$1\" | sed 'y/abcdefghijklmnopqrstuvwxyz/cdefghijklmnopqrstuvwxyzab/'\
    \ | sed 'y/aeiou/eoiu/'", "    for ((i=0; i<${#1}; i++)); do\n        CHAR=${1:$i:1}\n\
    \        #echo -e \"$CHAR\"\n        if [[ $CHAR =~ ^[a-zA-Z]*$ ]]; then\n   \
    \         if [[ $CHAR =~ ^[a-z]*$ ]]; then\n                LETTER=$(echo \"$CHAR\"\
    \ | tr \"[a-z]\" \"[A-Z]\")\n            else\n                LETTER=$(echo \"\
    $CHAR\" | tr \"[A-Z]\" \"[a-z]\")\n            fi\n            case $LETTER in\n\
    \                [aeiouAEIOU])\n                    CHAR=$(echo \"$LETTER\" |\
    \ tr \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\" \"cdefghijklmnopqrstuvwxyzabCDEFGHIJKLMNOPQRSTUVWXYZAB\"\
    )\n                    ;;\n                *)\n                    ;;\n      \
    \      esac\n        fi\n        echo -ne \"$CHAR\"\n    done\n    echo \"\"",
  "  #1. Convert the string to uppercase\n  str=$(echo $1 | tr [:lower:] [:upper:])\n\
    \  #2. Convert vowels in the uppercase string with the next 2 alphabets\n  str2=$(echo\
    \ $str | tr 'AEIOU' 'CGFKQ')\n  #3. Convert the string back to lowercase\n  echo\
    \ $str2 | tr [:upper:] [:lower:]", "    echo \"$1\" | tr 'a-zA-Z' 'c-za-bC-ZA-B'"]
stop_tokens:
- "\n}"
