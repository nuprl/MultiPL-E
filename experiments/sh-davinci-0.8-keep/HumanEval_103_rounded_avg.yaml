name: HumanEval_103_rounded_avg
language: sh
prompt: "#!/bin/bash\n# You are given two positive integers n and m, and your task\
  \ is to compute the\n# average of the integers from n through m (including n and\
  \ m). \n# Round the answer to the nearest integer and convert that to binary.\n\
  # If n is greater than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\
  \n# rounded_avg(7, 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20,\
  \ 33) => \"0b11010\"\n#\n# $1 is an integer\n# $2 is an integer\nrounded_avg() {\n"
tests: "}\n\ncandidate() {\n    rounded_avg \"$@\"\n}\n\nset -e\nrun_test() {\n  \
  \  [[ $(candidate \"1\" \"5\") = \"0b11\" ]]\n    [[ $(candidate \"7\" \"13\") =\
  \ \"0b1010\" ]]\n    [[ $(candidate \"964\" \"977\") = \"0b1111001010\" ]]\n   \
  \ [[ $(candidate \"996\" \"997\") = \"0b1111100100\" ]]\n    [[ $(candidate \"560\"\
  \ \"851\") = \"0b1011000010\" ]]\n    [[ $(candidate \"185\" \"546\") = \"0b101101110\"\
  \ ]]\n    [[ $(candidate \"362\" \"496\") = \"0b110101101\" ]]\n    [[ $(candidate\
  \ \"350\" \"902\") = \"0b1001110010\" ]]\n    [[ $(candidate \"197\" \"233\") =\
  \ \"0b11010111\" ]]\n    [[ $(candidate \"7\" \"5\") = \"-1\" ]]\n    [[ $(candidate\
  \ \"5\" \"1\") = \"-1\" ]]\n    [[ $(candidate \"5\" \"5\") = \"0b101\" ]]\n}\n\n\
  run_test"
completions: ["    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n        sum=$((($1\
    \ + $2)*($2 - $1 + 1)/2))\n        avg=$((sum/($2 - $1 + 1)))\n        echo \"\
    0b$(echo \"obase=2; $avg\" | bc)\"\n    fi", '  # Place your code here', "  if\
    \ [ $1 -gt $2 ]; then\n    echo -1\n  else\n    avg=$((($1 + $2) / 2))\n    echo\
    \ \"ob$(echo \"obase=2;$avg\" | bc)\"\n  fi", "    if [ $1 -gt $2 ]; then\n  \
    \      echo -1\n    else\n        echo -n \"0b\"\n        echo $(((($1 + $2) /\
    \ 2) | 0)) | awk '{print toupper($0)}'\n    fi", "  if [ $1 -gt $2 ]; then\n \
    \   echo -1\n  else\n    sum=$((($1 + $2)*($2 - $1 + 1)/2))\n    echo \"ob$(printf\
    \ '%b' $((sum/($2 - $1 + 1))))\"\n  fi", "    avg=$(( ($1 + $2) / 2 ))\n    if\
    \ [ $1 -gt $2 ]; then\n        echo \"-1\"\n    else\n        echo \"ob$(echo\
    \ \"obase=2;$avg\" | bc)\"\n    fi", "    if [ $1 -gt $2 ]; then\n        echo\
    \ -1\n    else\n        # let() function is used for arithmetic operations \n\
    \        let \"A = ($1 + $2) / 2\"\n        # format A to the binary form\n  \
    \      echo \"ob$(echo \"obase=2; $A\" | bc)\"\n    fi", "    n=$1\n    m=$2\n\
    \    sum=0\n    avg=0\n    if [ $n -gt $m ]; then\n        echo -1\n    else\n\
    \        for i in $(seq $n $m); do\n            sum=$((sum + i))\n        done\n\
    \        avg=$((sum / (m - n + 1)))\n        echo \"ob\"$(echo \"obase=2; $avg\"\
    \ | bc)\n    fi", "  if [ $1 -gt $2 ]; then\n    echo -1\n  else\n    echo $((\
    \ ($1 + $2) / 2 )) | awk '{ printf \"0b%b\\n\", $1 }'\n  fi", "    # Calculate\
    \ the average of the two numbers\n    n=$1\n    m=$2\n    # Return -1 if $1 is\
    \ greater than $2\n    if [ $n -gt $m ]; then\n        echo \"-1\"\n    else\n\
    \        avg=$(((n+m)/2))\n        # Return the rounded average in binary\n  \
    \      echo \"0b$(echo \"obase=2;$avg\" | bc)\"\n    fi", '    echo $(($1+$2))',
  "    if [ $1 -gt $2 ]; then \n        echo \"0b-\"\n        return\n    fi\n\n \
    \   let \"sum = $1\"\n    let \"count = 1\"\n    for i in $(seq $1 $2); do\n \
    \       let \"sum = $sum + $i\"\n        let \"count = $count + 1\"\n    done\n\
    \n    let \"avg = $sum / $count\"\n    printf \"0b%b\\n\" $avg", " \tif [ $1 -gt\
    \ $2 ]; then\n \t\techo -1\n \telse\n \t\techo -e \"ob$(echo \"($1+$2)/2\" | bc)\"\
    \ | tr -d '.'\n \tfi", '    echo "obase=2;$(($1+$2))/2" | bc', "  if [[ $1 -lt\
    \ $2 ]]; then\n    echo $((($1 + $2) / 2)) | base64\n  else\n    echo -1\n  fi",
  "    if [[ $1 -gt $2 ]]; then\n        echo -1\n    else\n        sum=$(($1 + $2))\n\
    \        rounded=$((sum / 2))\n        echo \"0b\"$(echo \"obase=2;$rounded\"\
    \ | bc)\n    fi", "  local n=$1\n  local m=$2\n  local sum=0\n  local length=$(echo\
    \ \"scale=0;l($n)/l(2)\" | bc -l)\n  local tmp=$(($length/8))\n  local byte=${tmp%%.*}\n\
    \  byte=$(($byte+1))\n  local rounded_average\n  local binary_average\n  if [\
    \ $n -gt $m ]; then\n    echo -1\n  else\n    for (( i=$n; i<=$m; i++ )); do\n\
    \      sum=$(($sum+$i))\n    done\n    rounded_average=$(echo \"scale=0;$sum/($m-$n+1)\"\
    \ | bc -l)\n    binary_average=$(echo \"obase=2;$rounded_average\" | bc)\n   \
    \ length=$(echo \"scale=0;l($rounded_average)/l(2)\" | bc -l)\n    tmp=$(($length/8))\n\
    \    byte=${tmp%%.*}\n    byte=$(($byte+1))\n    binary_average=$(printf %0${byte}d\
    \ \"$binary_average\")\n    echo \"0b$binary_average\"\n  fi", "  if [ $1 -gt\
    \ $2 ]; then\n    echo \"-1\"\n  else\n    avg=$((($1 + $2) / 2))\n    dec2bin\
    \ $avg\n  fi", "    # your code here\n    local sum=0\n    local count=0\n   \
    \ local i=0\n    for ((i = $1; i <= $2; i++)); do\n        sum=$((sum + i))\n\
    \        count=$((count + 1))\n    done\n    local avg=$((sum / count))\n    echo\
    \ \"ob$(printf \"%b\" $avg)\"", "    if [[ $1 -gt $2 ]]; then\n        echo -1\n\
    \    else\n        sum=$(((($1 + $2) * ($2 - $1 + 1)) / 2))\n        printf \"\
    0b%s\\n\" \"$((2#$(printf \"%b\" \"$sum\" | cut -c1-$(($(printf \"%b\" \"$sum\"\
    \ | wc -c)-1)))))\";\n    fi"]
stop_tokens:
- "\n}"
