language: sh
name: HumanEval_80_is_happy
results:
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is happy or not.\n# A string is happy if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# is_happy(a) => False\n\
    # is_happy(aa) => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n\
    # is_happy(adb) => True\n# is_happy(xyy) => False\n#\n# $1 is a string\nis_happy()\
    \ {\n    c=${#1}\n    if [[ $c -lt 3 ]]; then\n        return 1\n    fi\n    f=1\n\
    \    while [[ $f -le $c ]]; do\n        if [[ ${1:$f:1} == ${1:$((f-1)):1} ]];\
    \ then\n            return 1\n        fi\n        ((f++))\n    done\n    return\
    \ 0\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"\
    false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\"\
    ) = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate\
    \ \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020301
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is happy or not.\n# A string is happy if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# is_happy(a) => False\n\
    # is_happy(aa) => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n\
    # is_happy(adb) => True\n# is_happy(xyy) => False\n#\n# $1 is a string\nis_happy()\
    \ {\n  # echo $1 | grep -vE '.{3}(.)\\1{2}' > /dev/null\n  [[ ${#1} -ge 3 && !\
    \ $1 =~ (.)\\1{2} ]]\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020301
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is happy or not.\n# A string is happy if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# is_happy(a) => False\n\
    # is_happy(aa) => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n\
    # is_happy(adb) => True\n# is_happy(xyy) => False\n#\n# $1 is a string\nis_happy()\
    \ {\n    local re='^([a-z])([a-z])([a-z])$'\n    [[ $1 =~ $re ]] && [[ ${BASH_REMATCH[1]}\
    \ != ${BASH_REMATCH[2]} ]] && [[ ${BASH_REMATCH[2]} != ${BASH_REMATCH[3]} ]] &&\
    \ [[ ${BASH_REMATCH[1]} != ${BASH_REMATCH[3]} ]]\n}\n\ncandidate() {\n    is_happy\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n\
    \    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"\
    true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"\
    adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020301
- exit_code: 0
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is happy or not.\n# A string is happy if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# is_happy(a) => False\n\
    # is_happy(aa) => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n\
    # is_happy(adb) => True\n# is_happy(xyy) => False\n#\n# $1 is a string\nis_happy()\
    \ {\n  local str=$1\n  local len=${#str}\n  if [ $len -lt 3 ]; then\n    echo\
    \ 'false'\n    return\n  fi\n  for i in `seq 3 $len`; do\n    local substr=${str:i-3:3}\n\
    \    for ((j=0; j<${#substr}; j++)); do\n      for ((k=j+1; k<${#substr}; k++));\
    \ do\n        if [ \"${substr:j:1}\" == \"${substr:k:1}\" ]; then\n          echo\
    \ 'false'\n          return\n        fi\n      done\n    done\n  done\n  echo\
    \ 'true'\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\"\
    ) = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020301
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is happy or not.\n# A string is happy if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# is_happy(a) => False\n\
    # is_happy(aa) => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n\
    # is_happy(adb) => True\n# is_happy(xyy) => False\n#\n# $1 is a string\nis_happy()\
    \ {\n\tlocal len=$(echo $1 | wc -c)\n\tif [ $len -lt 3 ]; then\n\t\techo \"False\"\
    \n\t\treturn\n\tfi\n\tfor i in $(seq 1 $len); do\n\t\tx=$(echo $1 | cut -c $i)\n\
    \t\ty=$(echo $1 | cut -c $((i+1)))\n\t\tz=$(echo $1 | cut -c $((i+2)))\n\t\tif\
    \ [ \"$x\" == \"$y\" ] || [ \"$x\" == \"$z\" ] || [ \"$y\" == \"$z\" ]; then\n\
    \t\t\techo \"False\"\n\t\t\treturn\n\t\tfi\n\tdone\n\techo \"True\"\n}\n\ncandidate()\
    \ {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\"\
    ) = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020301
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is happy or not.\n# A string is happy if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# is_happy(a) => False\n\
    # is_happy(aa) => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n\
    # is_happy(adb) => True\n# is_happy(xyy) => False\n#\n# $1 is a string\nis_happy()\
    \ {\n    str=$1\n    len=${#str}\n    [ $len -lt 3 ] && echo \"False\" && return\n\
    \    echo \"True\"\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020301
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is happy or not.\n# A string is happy if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# is_happy(a) => False\n\
    # is_happy(aa) => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n\
    # is_happy(adb) => True\n# is_happy(xyy) => False\n#\n# $1 is a string\nis_happy()\
    \ {\n    [[ ${#1} -lt 3 ]] && echo 0 && return 0\n    for (( i=0; i<${#1}-2; i++\
    \ )); do\n        [[ ${1:i:1} == ${1:i+1:1} ]] && echo 0 && return 0\n       \
    \ [[ ${1:i:1} == ${1:i+2:1} ]] && echo 0 && return 0\n    done\n    echo 1\n}\n\
    \ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020301
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is happy or not.\n# A string is happy if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# is_happy(a) => False\n\
    # is_happy(aa) => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n\
    # is_happy(adb) => True\n# is_happy(xyy) => False\n#\n# $1 is a string\nis_happy()\
    \ {\n    # Get a string and return true if it is happy, false otherwise\n    #\
    \ Start with this code\n    if [ \"${#1}\" -lt 3 ]; then\n        echo \"False\"\
    \n        return\n    fi\n    echo \"True\"\n}\n\ncandidate() {\n    is_happy\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n\
    \    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"\
    true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"\
    adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020301
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is happy or not.\n# A string is happy if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# is_happy(a) => False\n\
    # is_happy(aa) => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n\
    # is_happy(adb) => True\n# is_happy(xyy) => False\n#\n# $1 is a string\nis_happy()\
    \ {\n    if [[ -z \"$1\" ]]; then\n        echo 'Error: parameter missing'\n \
    \       exit 1\n    fi\n    if [[ ${#1} -lt 3 ]]; then\n        echo 'False'\n\
    \        exit 0\n    fi\n    echo \"$1\" | grep -qo \".\\{3\\}\" | sort | uniq\
    \ -d | grep -q . && echo 'False' || echo 'True'\n}\n\ncandidate() {\n    is_happy\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n\
    \    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"\
    true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"\
    adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020301
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is happy or not.\n# A string is happy if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# is_happy(a) => False\n\
    # is_happy(aa) => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n\
    # is_happy(adb) => True\n# is_happy(xyy) => False\n#\n# $1 is a string\nis_happy()\
    \ {\n  # create a list of chars and assign it to a variable\n  local a=($(echo\
    \ $1 | sed -r 's/(.)/\\1 /g'))\n  # get the length of the list\n  local len=${#a[@]}\n\
    \  # if the length is less than 3 then return false\n  [[ $len -lt 3 ]] && return\
    \ 1\n  # loop from 0 to the length of the list - 3 since we need 3 consecutive\
    \ letters\n  for ((i=0; i<$len-2; i++)); do\n    # if the 3 consecutive letters\
    \ are the same then return false\n    [[ ${a[$i]} == ${a[$i+1]} ]] && [[ ${a[$i]}\
    \ == ${a[$i+2]} ]] && return 1\n  done\n  # everything is ok then return true\n\
    \  return 0\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020301
- exit_code: 2
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is happy or not.\n# A string is happy if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# is_happy(a) => False\n\
    # is_happy(aa) => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n\
    # is_happy(adb) => True\n# is_happy(xyy) => False\n#\n# $1 is a string\nis_happy()\
    \ {\n  # YOUR CODE HERE\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"\
    aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpjkpy5r6s.sh: line 16: syntax error near unexpected token `}''

    /tmp/tmpjkpy5r6s.sh: line 16: `}''

    '
  stdout: ''
  timestamp: 1660020301
- exit_code: 2
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is happy or not.\n# A string is happy if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# is_happy(a) => False\n\
    # is_happy(aa) => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n\
    # is_happy(adb) => True\n# is_happy(xyy) => False\n#\n# $1 is a string\nis_happy()\
    \ {\n   # Add your code here\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwp2sxhz6.sh: line 16: syntax error near unexpected token `}''

    /tmp/tmpwp2sxhz6.sh: line 16: `}''

    '
  stdout: ''
  timestamp: 1660020301
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is happy or not.\n# A string is happy if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# is_happy(a) => False\n\
    # is_happy(aa) => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n\
    # is_happy(adb) => True\n# is_happy(xyy) => False\n#\n# $1 is a string\nis_happy()\
    \ {\n\tlocal str=$1\n\tlen=${#str}\n\t# echo \"LENGTH: $len\"\n\tif [[ $len -lt\
    \ 3 ]]; then\n\t\techo \"False\"\n\t\treturn 1\n\tfi\n\tfor (( i=0; i < len; i++\
    \ )); do\n\t\t# echo \"index: $i\"\n\t\t# echo \"char: ${str:$i:1}\"\n\t\tfor\
    \ (( j=0; j < len; j++ )); do\n\t\t\t# echo \"char: ${str:$j:1}\"\n\t\t\tif [[\
    \ $j -ne $i ]]; then\n\t\t\t\t# echo \"char: ${str:$j:1}\"\n\t\t\t\t# echo \"\
    char: ${str:$j+1:1}\"\n\t\t\t\t# echo \"char: ${str:$j+2:1}\"\n\t\t\t\t# echo\
    \ \"char: ${str:$i:1}\"\n\t\t\t\tif [[ \"${str:$j:1}\" == \"${str:$i:1}\" ]];\
    \ then\n\t\t\t\t\t# echo \"FALSE\"\n\t\t\t\t\techo \"False\"\n\t\t\t\t\treturn\
    \ 1\n\t\t\t\tfi\n\t\t\tfi\n\t\tdone\n\tdone\n\techo \"True\"\n\treturn 0\n}\n\n\
    candidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020301
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is happy or not.\n# A string is happy if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# is_happy(a) => False\n\
    # is_happy(aa) => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n\
    # is_happy(adb) => True\n# is_happy(xyy) => False\n#\n# $1 is a string\nis_happy()\
    \ {\n  local str_len=$(expr length \"$1\")\n  if [ $str_len -lt 3 ]; then\n  \
    \  echo \"False\"\n    return 0\n  fi\n  local str=$1\n  local idx=0\n  while\
    \ [ $idx -lt $str_len ]; do\n    if [ $idx -gt $((str_len - 3)) ]; then\n    \
    \  break\n    fi\n    local curr=${str:$idx:1}\n    if [ ${str:$((idx + 1)):1}\
    \ == $curr ]; then\n      echo \"False\"\n      return 0\n    fi\n    idx=$((idx\
    \ + 1))\n  done\n  echo \"True\"\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020301
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is happy or not.\n# A string is happy if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# is_happy(a) => False\n\
    # is_happy(aa) => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n\
    # is_happy(adb) => True\n# is_happy(xyy) => False\n#\n# $1 is a string\nis_happy()\
    \ {\n  # TODO\n  str=$1\n  len=${#str}\n  if [[ $len -lt 3 ]]; then\n    echo\
    \ False\n    return\n  fi\n  for ((i=0; i<$len-2; i++)); do\n    if [[ ${str:$i:1}\
    \ == ${str:$((i+1)):1} ]] || [[ ${str:$i:1} == ${str:$((i+2)):1} ]] || [[ ${str:$((i+1)):1}\
    \ == ${str:$((i+2)):1} ]]; then\n      echo False\n      return\n    fi\n  done\n\
    \  echo True\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020301
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is happy or not.\n# A string is happy if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# is_happy(a) => False\n\
    # is_happy(aa) => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n\
    # is_happy(adb) => True\n# is_happy(xyy) => False\n#\n# $1 is a string\nis_happy()\
    \ {\n    local str=$1\n    local len=$((${#str} - 2))\n    for ((i=0; i<$len;\
    \ i++)); do\n        local triplet=${str:$i:3}\n        if [ $(echo \"$triplet\"\
    \ | grep -o . | sort | uniq | wc -l) -lt 3 ]; then\n            echo False\n \
    \           return\n        fi\n    done\n    echo True\n}\n\ncandidate() {\n\
    \    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"\
    false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate\
    \ \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020301
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is happy or not.\n# A string is happy if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# is_happy(a) => False\n\
    # is_happy(aa) => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n\
    # is_happy(adb) => True\n# is_happy(xyy) => False\n#\n# $1 is a string\nis_happy()\
    \ {\n  [[ $# -ne 1 ]] && echo \"Usage: is_happy <string>\" && return 1\n  [[ ${#1}\
    \ -lt 3 ]] && echo \"Usage: is_happy <string>\" && return 1\n  for (( i=0; i<${#1}-2;\
    \ i++ )); do\n    s=$(cut -c $((i+1))-$((i+3)) <<<\"$1\")\n    [[ $(uniq <<<\"\
    $s\") == $s ]] && echo \"True\" && return 0\n  done\n  echo \"False\"\n}\n\ncandidate()\
    \ {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\"\
    ) = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020301
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is happy or not.\n# A string is happy if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# is_happy(a) => False\n\
    # is_happy(aa) => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n\
    # is_happy(adb) => True\n# is_happy(xyy) => False\n#\n# $1 is a string\nis_happy()\
    \ {\n    local str=\"$1\"\n    str=${str:0:3}\n    if [ $(echo \"$str\" | wc -c)\
    \ -lt 4 ]; then\n        echo \"False\"\n    else\n        local -i count=0\n\
    \        for ((i=0; i<${#str}; i++)); do\n            if [[ ${str:$i:1} != ${str:$((i+1)):1}\
    \ ]]; then\n                count+=1\n            fi\n        done\n        if\
    \ [[ $count -eq 2 ]]; then\n            echo \"True\"\n        else\n        \
    \    echo \"False\"\n        fi\n    fi\n}\n\ncandidate() {\n    is_happy \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[\
    \ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\"\
    \ ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\"\
    ) = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020301
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is happy or not.\n# A string is happy if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# is_happy(a) => False\n\
    # is_happy(aa) => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n\
    # is_happy(adb) => True\n# is_happy(xyy) => False\n#\n# $1 is a string\nis_happy()\
    \ {\n    # Write your code here\n    if [[ -z $1 ]]; then\n        echo \"False\"\
    \n        return\n    fi\n    if [[ ${#1} -lt 3 ]]; then\n        echo \"False\"\
    \n        return\n    fi\n    for (( i=0; i<${#1}-2; i++ )); do\n        if [[\
    \ $1 =~ ^${1:i:3}.*${1:i:3}.*${1:i:3} ]]; then\n            echo \"False\"\n \
    \           return\n        fi\n    done\n    echo \"True\"\n}\n\ncandidate()\
    \ {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\"\
    ) = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020301
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is happy or not.\n# A string is happy if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# is_happy(a) => False\n\
    # is_happy(aa) => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n\
    # is_happy(adb) => True\n# is_happy(xyy) => False\n#\n# $1 is a string\nis_happy()\
    \ {\n    # regex to check consecutive letters\n    # if string length is at least\
    \ 3 and regex for consecutive letters has no match, string is happy\n    # eg:\
    \ abc -> abc -> no match\n    # eg: aaa -> aaa -> match\n    if [[ ${#1} -ge 3\
    \ && $1 =~ (.).\\1.\\1 ]]; then\n        echo \"False\"\n    else\n        echo\
    \ \"True\"\n    fi\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020301
