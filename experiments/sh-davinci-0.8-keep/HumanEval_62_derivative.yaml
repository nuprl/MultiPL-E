name: HumanEval_62_derivative
language: sh
prompt: "#!/bin/bash\n# xs represent coefficients of a polynomial.\n# xs[0] + xs[1]\
  \ * x + xs[2] * x^2 + ....\n# Return derivative of this polynomial in the same form.\n\
  # >>> derivative([3, 1, 2, 4, 5])\n# [1, 4, 12, 20]\n# >>> derivative([1, 2, 3])\n\
  # [2, 6]\n#\n# $1 is a space-separated list\nderivative() {\n"
tests: "}\n\ncandidate() {\n    derivative \"$@\"\n}\n\nset -e\nrun_test() {\n   \
  \ [[ $(candidate \"3 1 2 4 5\") = \"1 4 12 20\" ]]\n    [[ $(candidate \"1 2 3\"\
  ) = \"2 6\" ]]\n    [[ $(candidate \"3 2 1\") = \"2 2\" ]]\n    [[ $(candidate \"\
  3 2 1 0 4\") = \"2 2 0 16\" ]]\n    [[ $(candidate \"1\") = \"\" ]]\n}\n\nrun_test"
completions: ["    # derive() compute a[n] * n, starting from a[1] * 1\n    derive()\
    \ {\n        local i\n        local rtn\n        for ((i = 1; i < ${#xs[@]}; i++));\
    \ do\n            rtn=\"$rtn $((xs[i] * i))\"\n        done\n        echo \"$rtn\"\
    \n    }\n    IFS=' ' read -r -a xs <<< \"$1\"\n    derive", "    declare -a xs=(\"\
    $@\")\n    res=()\n    for ((i=1; i<${#xs[@]}; i++)); do\n        res+=(\"$((i\
    \ * xs[i]))\")\n    done\n    echo \"${res[@]}\"", "    local -a xs=($1)\n   \
    \ local -a ys=()\n    local i\n    for ((i=1; i<${#xs[@]}; i++)); do\n       \
    \ ys[i-1]=$((i * xs[i]))\n    done\n    echo \"${ys[@]}\"", "    local xs=\"$1\"\
    \n    local x\n    local i\n    local result=\"\"\n    i=1\n    for x in $xs;\
    \ do\n        [ $i -gt 1 ] && result=\"$result \"\n        result=\"$result$((\
    \ i * x ))\"\n        i=$(( i + 1 ))\n    done\n    echo \"$result\"", "    local\
    \ xs i=0\n    # convert to array\n    read -a xs <<< \"${1// /$'\\n'}\"\n    #\
    \ print array except last element\n    for x in \"${xs[@]:0:${#xs[@]}-1}\"; do\n\
    \        (( i++ ))\n        printf \"%d%s\" \"$(( i * x ))\"\n        [[ $i -lt\
    \ ${#xs[@]}-1 ]] && printf \" \"\n    done\n    printf \"\\n\"", "    local xs=(\"\
    $@\")\n    if [[ ${#xs[@]} == 0 ]]; then\n        echo \"Input cannot be empty.\"\
    \n        return 1\n    fi\n    local ys=()\n    for ((i=1; i<${#xs[@]}; i++));\
    \ do\n        ys+=(\"$((i * xs[i]))\")\n    done\n    echo \"${ys[@]}\"", "  \
    \  local xs=($@)\n    local i\n    for ((i=1; i<${#xs[@]}; i++)); do\n       \
    \ xs[$i-1]=$((xs[i] * i))\n    done\n    unset xs[${#xs[@]}-1]\n    echo ${xs[@]}",
  "    xs=($1)\n\n    # derivative of c is 0\n    if [ ${#xs[@]} -eq 1 ]; then\n \
    \       echo 0\n        return\n    fi\n\n    result=\"\"\n    for i in $(seq\
    \ 1 $((${#xs[@]} - 1))); do\n        result=\"$result $(( i * xs[i] ))\"\n   \
    \ done\n    echo $result", "    local xs=($1)\n    local tmps=()\n    local len=${#xs[@]}\n\
    \    local i\n    for ((i=1; i<len; i++)); do\n        tmps+=($((${xs[$i]} * $i)))\n\
    \    done\n    echo ${tmps[@]}", "  echo \"$1\" | awk '{ for (i = 2; i <= NF;\
    \ i++) print $(i - 1) * (i - 1); }'", "    local xs=($1)\n    local ys=()\n  \
    \  local n=${#xs[@]}\n    for ((i=1; i<n; i++)); do\n        ys[$((i-1))]=$((i\
    \ * xs[i]))\n    done\n    echo ${ys[@]}", "    xs=($1)\n    for ((i=0; i<${#xs[@]};\
    \ i++)); do\n        printf \"%d \" $((xs[i] * (i+1)))\n    done\n    echo", " \
    \ xs=(\"$@\")\n  for (( i=1; i<${#xs[@]}; i++ ))\n  do\n    printf '%d ' $((${xs[$i]}\
    \ * $i))\n  done", "  declare -a xs=($1)\n  declare -a ys=()\n  ys[0]=0\n  for\
    \ (( i=1; i<${#xs[@]}; i++ )); do\n    ys[$i]=$(( xs[$i] * i ))\n  done\n  echo\
    \ ${ys[@]}", "  local xs=($1)\n  local num_xs=${#xs[@]}\n  local ret_xs=()\n \
    \ for ((i=1; i<num_xs; i++)); do\n    ret_xs+=($((i * xs[i])))\n  done\n  echo\
    \ ${ret_xs[@]}", "  xs=($1)\n  ret=()\n  degree=${#xs[@]}\n  for (( i=1; i<degree;\
    \ i++ )); do\n    ret+=($(( i * xs[i] )))\n  done\n  printf \"%s \" \"${ret[@]}\"",
  "    read -a xs <<< \"$1\"\n    new_xs=($xs)\n    for ((i=0; i<$((${#xs[@]}-1));\
    \ i++)); do\n        if (($i > 0)); then\n            new_xs[$i]=$((${xs[$i]}\
    \ * $(($i+1))))\n        fi\n    done\n    new_xs=(\"${new_xs[@]:1}\")\n    echo\
    \ \"${new_xs[@]}\"", "    xs=(\"$@\")\n    n=${#xs[@]}\n    for i in $(seq 1 $((n-1)));\
    \ do\n        xs[$i]=$((xs[$i] * i))\n    done\n    echo ${xs[@]:1}", "    # Write\
    \ your code here\n    local xs=($1)\n    local ys=()\n    for ((i=1; i<${#xs[@]};\
    \ i++)); do\n        local y=$((i * ${xs[i]}))\n        ys[i-1]=$y\n    done\n\
    \    echo ${ys[@]}", "    if [ $# -ne 1 ]; then\n        echo \"Usage: derivative\
    \ [space-separated-list]\" >&2\n        return 1\n    fi\n    input=$1\n    xs=($input)\n\
    \    output=()\n    for (( i=1; i<${#xs[@]}; i++ )); do\n        output[$((i-1))]=$((xs[i]\
    \ * i))\n    done\n    echo ${output[@]}"]
stop_tokens:
- "\n}"
