name: HumanEval_136_largest_smallest_integers
language: sh
prompt: "#!/bin/bash\n# Create a function that returns a tuple (a, b), where 'a' is\n\
  # the largest of negative integers, and 'b' is the smallest\n# of positive integers\
  \ in a list.\n# If there is no negative or positive integers, return them as None.\n\
  # Examples:\n# largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n# largest_smallest_integers([])\
  \ == (None, None)\n# largest_smallest_integers([0]) == (None, None)\n#\n# $1 is\
  \ a space-separated list\nlargest_smallest_integers() {\n"
tests: "}\n\ncandidate() {\n    largest_smallest_integers \"$@\"\n}\n\nset -e\nrun_test()\
  \ {\n    [[ $(candidate \"2 4 1 3 5 7\") = \"None 1\" ]]\n    [[ $(candidate \"\
  2 4 1 3 5 7 0\") = \"None 1\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 -2\") = \"-2\
  \ 1\" ]]\n    [[ $(candidate \"4 5 3 6 2 7 -7\") = \"-7 2\" ]]\n    [[ $(candidate\
  \ \"7 3 8 4 9 2 5 -9\") = \"-9 2\" ]]\n    [[ $(candidate \"\") = \"None None\"\
  \ ]]\n    [[ $(candidate \"0\") = \"None None\" ]]\n    [[ $(candidate \"-1 -3 -5\
  \ -6\") = \"-1 None\" ]]\n    [[ $(candidate \"-1 -3 -5 -6 0\") = \"-1 None\" ]]\n\
  \    [[ $(candidate \"-6 -4 -4 -3 1\") = \"-3 1\" ]]\n    [[ $(candidate \"-6 -4\
  \ -4 -3 -100 1\") = \"-3 1\" ]]\n}\n\nrun_test"
completions: ["  if [[ $# -eq 0 ]]; then\n    echo '(None, None)'\n    return\n  fi\n\
    \n  max_neg=None\n  min_pos=None\n\n  for x in $@; do\n    if [[ $x -lt 0 ]];\
    \ then\n      if [[ $max_neg == None ]] || [[ $x -gt $max_neg ]]; then\n     \
    \   max_neg=$x\n      fi\n    elif [[ $x -gt 0 ]]; then\n      if [[ $min_pos\
    \ == None ]] || [[ $x -lt $min_pos ]]; then\n        min_pos=$x\n      fi\n  \
    \  fi\n  done\n\n  echo \"($max_neg, $min_pos)\"", "  min=0\n  max=0\n  if [ -z\
    \ \"$1\" ]; then\n    echo \"(None, None)\"\n    return\n  fi\n  for i in $(echo\
    \ $1 | tr \" \" \"\\n\"); do\n    if [[ $i =~ ^[0-9]+$ ]]; then\n      if [ $i\
    \ -lt 0 ]; then\n        if [ $i -gt $max ]; then\n          max=$i\n        fi\n\
    \      else\n        if [ $i -lt $min ] || [ $min -eq 0 ]; then\n          min=$i\n\
    \        fi\n      fi\n    fi\n  done\n  if [ $min -eq 0 ]; then\n    min=None\n\
    \  fi\n  if [ $max -eq 0 ]; then\n    max=None\n  fi\n  echo \"($max, $min)\"",
  "    local pos=$(echo $1 | tr ' ' '\\n' | sort -n | grep '^[0-9]\\+$' | head -n\
    \ 1)\n    local neg=$(echo $1 | tr ' ' '\\n' | sort -rn | grep '^-[0-9]\\+$' |\
    \ head -n 1)\n    local pos_t=$(echo $1 | tr ' ' '\\n' | sort -n | grep '^[0-9]\\\
    +$' | tail -n 1)\n    local neg_t=$(echo $1 | tr ' ' '\\n' | sort -rn | grep '^-[0-9]\\\
    +$' | tail -n 1)\n    # start with a positive value\n    echo \"${neg:-None},${pos:-None}\"\
    \n    # start with a negative value\n    echo \"${neg_t:-None},${pos_t:-None}\"",
  "  if [ -z \"$1\" ]; then\n    echo \"(None, None)\"\n    return\n  fi\n\n  input=\"\
    $1\"\n  IFS=' '\n  read -ra input_array <<< \"$input\"\n\n  negative_integers=()\n\
    \  positive_integers=()\n\n  for element in \"${input_array[@]}\"; do\n    if\
    \ [ \"$element\" -ge 0 ]; then\n      positive_integers+=(\"$element\")\n    else\n\
    \      negative_integers+=(\"$element\")\n    fi\n  done\n\n  if [ -z \"$negative_integers\"\
    \ ]; then\n    negative_integers=\"None\"\n  else\n    negative_integers=$(echo\
    \ \"${negative_integers[@]}\" | sort -n | head -n 1)\n  fi\n\n  if [ -z \"$positive_integers\"\
    \ ]; then\n    positive_integers=\"None\"\n  else\n    positive_integers=$(echo\
    \ \"${positive_integers[@]}\" | sort -n | tail -n 1)\n  fi\n\n  echo \"($negative_integers,\
    \ $positive_integers)\"", "    local min_positive=\n    local max_negative=\n\
    \    local x=\n    for x in $1\n    do\n        if [ -z \"$min_positive\" ] &&\
    \ [ $x -gt 0 ]\n        then\n            min_positive=$x\n        elif [ $x -gt\
    \ 0 ] && [ $x -lt $min_positive ]\n        then\n            min_positive=$x\n\
    \        fi\n        if [ -z \"$max_negative\" ] && [ $x -lt 0 ]\n        then\n\
    \            max_negative=$x\n        elif [ $x -lt 0 ] && [ $x -gt $max_negative\
    \ ]\n        then\n            max_negative=$x\n        fi\n    done\n    if [\
    \ -z \"$min_positive\" ]\n    then\n        min_positive=None\n    fi\n    if\
    \ [ -z \"$max_negative\" ]\n    then\n        max_negative=None\n    fi\n    echo\
    \ $(echo $max_negative, $min_positive)", "    # replace this for solution\n  \
    \  max=None\n    min=None\n    for a in $1; do\n        if [[ $a -lt 0 ]]; then\n\
    \            if [[ $max == None ]] || [[ $a -gt $max ]]; then\n              \
    \  max=$a\n            fi\n        elif [[ $a -gt 0 ]]; then\n            if [[\
    \ $min == None ]] || [[ $a -lt $min ]]; then\n                min=$a\n       \
    \     fi\n        fi\n    done\n    echo \"($max, $min)\"", "  echo \"Your function\
    \ call: largest_smallest_integers $1\"\n  # Fill in your function here", "   \
    \ a=$(seq -s' ' 0 0 $1)\n    b=$(echo $a | sed -E 's/([^ ]+) ([^ ]+)/\\2 \\1/')\n\
    \    if [[ $b =~ ^[0-9] ]]; then\n        echo \"($(echo $b | awk '{print $1}'),\
    \ $(echo $b | awk '{print $2}'))\"\n    else\n        echo \"(None, None)\"\n\
    \    fi", "    echo $(\n        echo \"$1\" |\n        tr ' ' '\\n' |\n      \
    \  sort -n |\n        awk -v OFS= '\n            BEGIN {\n                sm =\
    \ 0;\n                lr = 0;\n            }\n            {\n                if\
    \ ($1 > 0) {\n                    if (sm == 0) {\n                        sm =\
    \ $1;\n                    }\n                } else if ($1 < 0) {\n         \
    \           if (lr == 0) {\n                        lr = $1;\n               \
    \     }\n                }\n            }\n            END {\n               \
    \ if (sm == 0) {\n                    sm = \"None\";\n                }\n    \
    \            if (lr == 0) {\n                    lr = \"None\";\n            \
    \    }\n                print sm, lr;\n            }\n        '\n    )", "  #\
    \ Write your code here\n  local list=\"$1\"\n  local largest=\"$(echo $list |\
    \ tr ' ' '\\n' | sort -n | tail -n 1)\"\n  local smallest=\"$(echo $list | tr\
    \ ' ' '\\n' | sort -n | head -n 1)\"\n  if [ $largest -gt 0 ]; then\n    largest=''\n\
    \  fi\n  if [ $smallest -lt 0 ]; then\n    smallest=''\n  fi\n  echo \"($largest,\
    \ $smallest)\"", "  local largest_negative\n  local smallest_positive\n  for num\
    \ in $1; do\n    if [ $num -lt 0 ] && ( [ -z \"$largest_negative\" ] || [ $num\
    \ -gt $largest_negative ] ); then\n      largest_negative=$num\n    elif [ $num\
    \ -gt 0 ] && ( [ -z \"$smallest_positive\" ] || [ $num -lt $smallest_positive\
    \ ] ); then\n      smallest_positive=$num\n    fi\n  done\n  echo \"($largest_negative,\
    \ $smallest_positive)\"", "  a=`echo $1 | tr \" \" \"\\n\" | grep '^-' | sort\
    \ -nr | head -n 1`\n  b=`echo $1 | tr \" \" \"\\n\" | grep -v '^-' | sort -n |\
    \ head -n 1`\n  echo \"($a, $b)\"", "  neg_int=\n  neg_int_val=\n  pos_int=\n\
    \  pos_int_val=\n  # Loop through list of ints\n  for i in $1; do\n    # For positive\
    \ ints, if we don't have a positive int yet, or the\n    # current positive int\
    \ is greater than the positive int_val, make\n    # the current positive int the\
    \ smallest positive int.\n    if [ $i -gt 0 ]; then\n      if [ -z $pos_int ]\
    \ || [ $i -lt $pos_int_val ]; then\n        pos_int=$i\n        pos_int_val=$i\n\
    \      fi\n    # For negative ints, if we don't have a negative int yet, or the\n\
    \    # current negative int is less than the negative int_val, make\n    # the\
    \ current negative int the largest negative int.\n    elif [ $i -lt 0 ]; then\n\
    \      if [ -z $neg_int ] || [ $i -gt $neg_int_val ]; then\n        neg_int=$i\n\
    \        neg_int_val=$i\n      fi\n    fi\n  done\n  # Return both negative and\
    \ positive ints\n  if [ -z $neg_int ]; then\n    neg_int=None\n  fi\n  if [ -z\
    \ $pos_int ]; then\n    pos_int=None\n  fi\n  echo \"($neg_int, $pos_int)\"",
  "    positive=\n    negative=\n    for i in $1; do\n        if [ $i -lt 0 ]; then\n\
    \            if [ -z \"$negative\" ] || [ $i -gt $negative ]; then\n         \
    \       negative=$i\n            fi\n        elif [ $i -gt 0 ]; then\n       \
    \     if [ -z \"$positive\" ] || [ $i -lt $positive ]; then\n                positive=$i\n\
    \            fi\n        fi\n    done\n    if [ -z \"$positive\" ]; then\n   \
    \     positive=None\n    fi\n    if [ -z \"$negative\" ]; then\n        negative=None\n\
    \    fi\n    echo \"( $negative, $positive )\"", "  max=0\n  min=0\n  for i in\
    \ $1; do\n    if [ $i -gt 0 ]; then\n      if [ $i -le $min ]; then\n        min=$i\n\
    \      fi\n    elif [ $i -lt 0 ]; then\n      if [ $i -ge $max ]; then\n     \
    \   max=$i\n      fi\n    fi\n  done\n  echo \"($max, $min)\"", "    min=\n  \
    \  max=\n    for i in $1; do\n        # These lines will be executed for each\
    \ word in the list.\n        # Use the following commands to save the largest\
    \ negative\n        # number and the smallest positive number.\n        #\n  \
    \      # echo \"The number is: $i\"\n        # echo \"The minimum number is: $min\"\
    \n        # echo \"The maximum number is: $max\"\n        # echo \"\"\n      \
    \  if [[ $i -gt 0 ]]; then\n            if [[ $min -eq \"\" ]]; then\n       \
    \         min=$i\n            elif [[ $i -lt $min ]]; then\n                min=$i\n\
    \            fi\n        elif [[ $i -lt 0 ]]; then\n            if [[ $max -eq\
    \ \"\" ]]; then\n                max=$i\n            elif [[ $i -gt $max ]]; then\n\
    \                max=$i\n            fi\n        fi\n    done\n    echo \"($max,\
    \ $min)\"", "    a=`echo $1 | tr ' ' '\\n' | sort -n | awk 'NR==1{print}'`\n \
    \   b=`echo $1 | tr ' ' '\\n' | sort -n | awk 'NR==1{print}'`\n    if [[ \"$a\"\
    \ != \"\" ]]; then\n        echo \"($a, $b)\"\n    else\n        echo \"(None,\
    \ None)\"\n    fi", "  local list_str=$1\n  local -a list\n  read -ra list <<<\"\
    $list_str\"\n  # store min/max value as positive and negative.\n  local min_pos=\n\
    \  local max_neg=\n  for el in \"${list[@]}\"; do\n    if (( el > 0 )); then\n\
    \      if [[ -z $min_pos ]] || (( el < min_pos )); then\n        min_pos=$el\n\
    \      fi\n    elif (( el < 0 )); then\n      if [[ -z $max_neg ]] || (( el >\
    \ max_neg )); then\n        max_neg=$el\n      fi\n    fi\n  done\n  echo \"(\
    \ $max_neg, $min_pos )\"", "    if [[ $# -eq 0 ]]; then\n        echo \"(None,\
    \ None)\"\n        return\n    fi\n\n    local max_neg=None\n    local min_pos=None\n\
    \    local -a arr=(\"$@\")\n\n    for i in \"${arr[@]}\"; do\n        if [[ $i\
    \ -lt 0 ]]; then\n            if [[ $max_neg == None ]]; then\n              \
    \  max_neg=$i\n            else\n                max_neg=$((max_neg < i ? i :\
    \ max_neg))\n            fi\n        elif [[ $i -gt 0 ]]; then\n            if\
    \ [[ $min_pos == None ]]; then\n                min_pos=$i\n            else\n\
    \                min_pos=$((min_pos > i ? i : min_pos))\n            fi\n    \
    \    fi\n    done\n\n    echo \"($max_neg, $min_pos)\"", "    largest_negative_num=\n\
    \    smallest_positive_num=\n    is_first_num=true\n    for num in $1; do\n  \
    \      if ((num > 0)); then\n            if [[ \"$is_first_num\" == true ]]; then\n\
    \                smallest_positive_num=$num\n                is_first_num=false\n\
    \            else\n                if ((num < smallest_positive_num)); then\n\
    \                    smallest_positive_num=$num\n                fi\n        \
    \    fi\n        else\n            if [[ \"$is_first_num\" == true ]]; then\n\
    \                largest_negative_num=$num\n                is_first_num=false\n\
    \            else\n                if ((num > largest_negative_num)); then\n \
    \                   largest_negative_num=$num\n                fi\n          \
    \  fi\n        fi\n    done\n    if [[ \"$largest_negative_num\" == \"\" ]]; then\n\
    \        largest_negative_num=\"None\"\n    fi\n    if [[ \"$smallest_positive_num\"\
    \ == \"\" ]]; then\n        smallest_positive_num=\"None\"\n    fi\n    echo \"\
    ($largest_negative_num, $smallest_positive_num)\""]
stop_tokens:
- "\n}"
