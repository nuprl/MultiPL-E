language: sh
name: HumanEval_77_iscube
results:
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local -i num=$1\n\
    \    local -i cubed\n    local -i test_num=1\n    while (( cubed < num )); do\n\
    \        cubed=$(( test_num * test_num * test_num ))\n        (( test_num += 1\
    \ ))\n    done\n    [[ $cubed -eq $num ]] && echo True || echo False\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020363
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n  # Your code here.\n\
    }\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxhk9lflg.sh: line 16: syntax error near unexpected token `}''

    /tmp/tmpxhk9lflg.sh: line 16: `}''

    '
  stdout: ''
  timestamp: 1660020363
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    echo $1 | grep\
    \ -Eq \"^-?[0-9]+$\"\n    if [[ $? -ne 0 ]]; then\n        # Not a number\n  \
    \      return 1\n    fi\n    # if $1 is negative then make it positive\n    if\
    \ [[ $1 -lt 0 ]]; then\n        abs=$(echo \"$1 * -1\" | bc)\n    else\n     \
    \   abs=$1\n    fi\n    # find the cube root\n    cube_root=$(echo \"scale=0;\
    \ $abs ^ (1/3)\" | bc)\n    # cube the root\n    cube=$(echo \"$cube_root ^ 3\"\
    \ | bc)\n    # if the cube is equal to the absolute value then it's a cube\n \
    \   if [[ $cube -eq $abs ]]; then\n        return 0\n    else\n        return\
    \ 1\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020363
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    result=$(echo\
    \ \"scale=0; $1 ^ (1/3)\" | bc)\n    if [ $result -eq $1 ]; then\n        echo\
    \ \"True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n   \
    \ iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"\
    true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020363
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    # your code here\n\
    \    return\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020363
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    # 1st condition: if num is negative, cube it\n    if [ \"$num\" -lt 0 ];\
    \ then\n        num=$(( $num * $num * $num ))\n    fi\n    # 2nd condition: if\
    \ number is 0 or 1, it is a cube\n    if [ \"$num\" -eq 0 ] || [ \"$num\" -eq\
    \ 1 ]; then\n        echo \"true\"\n        return\n    fi\n    # 3rd condition:\
    \ if the cube root of num is an integer, num is a cube\n    if [[ \"0$(bc <<<\
    \ \"scale=0; ${num}^(1/3)\")\" == \"0$(bc <<< \"scale=0; ${num}^(1/3)+1\")\" ]];\
    \ then\n        echo \"true\"\n        return\n    fi\n    echo \"false\"\n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020363
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n  if [ $1 -ge 0 ];\
    \ then\n    a=`echo \"scale=0; sqrt($1) ^ 3\" | bc`\n    if [ $a -eq $1 ]; then\n\
    \      echo \"True\"\n    else\n      echo \"False\"\n    fi\n  else\n    echo\
    \ \"False\"\n  fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020363
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local tmp=`echo\
    \ \"c($1)/c(1)\" | bc -l`\n    echo \"$tmp\" | grep -q '[0-9]'\n    return $?\n\
    }\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020363
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   local i=0\n    local j=0\n    for ((i=0; $((i*i*i)) <= $a; i++)); do\n   \
    \     if [[ $((i*i*i)) -eq $a ]]; then\n            j=1\n            break\n \
    \       fi\n    done\n    if [[ $j -eq 1 ]]; then\n        echo True\n    else\n\
    \        echo False\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020363
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    echo '2^3 == 8:\
    \ '\n    echo \"scale=5; 2^3\" | bc\n    echo 'scale == 5: '\n    echo \"scale=5;\
    \ 2^3\" | bc\n    echo '3^3 == 27: '\n    echo \"scale=5; 3^3\" | bc\n    echo\
    \ '3^3 == 27: '\n    echo \"scale=5; 3^3\" | bc\n    echo 'sqrt(27) == 3: '\n\
    \    echo \"scale=5; sqrt(27)\" | bc\n    echo 'sqrt(28) == 5.29: '\n    echo\
    \ \"scale=5; sqrt(28)\" | bc\n    echo 'sqrt(1) == 1: '\n    echo \"scale=5; sqrt(1)\"\
    \ | bc\n    echo 'sqrt(9) == 3: '\n    echo \"scale=5; sqrt(9)\" | bc\n    echo\
    \ 'sqrt(8) == 2.83: '\n    echo \"scale=5; sqrt(8)\" | bc\n    echo 'sqrt(64)\
    \ == 8: '\n    echo \"scale=5; sqrt(64)\" | bc\n    echo 'sqrt(63) == 7.91: '\n\
    \    echo \"scale=5; sqrt(63)\" | bc\n    echo '63^(1/3) == 4.5: '\n    echo \"\
    scale=5; 63^(1/3)\" | bc\n    echo '64^(1/3) == 4: '\n    echo \"scale=5; 64^(1/3)\"\
    \ | bc\n    echo '1^(1/3) == 1: '\n    echo \"scale=5; 1^(1/3)\" | bc\n    echo\
    \ '12^(1/3) == 2: '\n    echo \"scale=5; 12^(1/3)\" | bc\n    echo '27^(1/3) ==\
    \ 3: '\n    echo \"scale=5; 27^(1/3)\" | bc\n    echo '28^(1/3) == 3.53: '\n \
    \   echo \"scale=5; 28^(1/3)\" | bc\n    echo '81^(1/3) == 3: '\n\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: 'Runtime warning (func=(main), adr=16): non-zero scale in exponent

    Runtime warning (func=(main), adr=16): non-zero scale in exponent

    Runtime warning (func=(main), adr=13): non-zero scale in exponent

    Runtime warning (func=(main), adr=16): non-zero scale in exponent

    Runtime warning (func=(main), adr=16): non-zero scale in exponent

    Runtime warning (func=(main), adr=16): non-zero scale in exponent

    '
  stdout: ''
  timestamp: 1660020363
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local input=$1\n\
    \    if [ $input -lt 0 ]; then\n        input=$((input * -1))\n    fi\n    local\
    \ test=0\n    while [ $((test * test * test)) -le $input ]; do\n        if [ $((test\
    \ * test * test)) -eq $input ]; then\n            echo True\n            return\n\
    \        fi\n        test=$((test + 1))\n    done\n    echo False\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020363
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    result=false\n\
    \    if [[ $1 == 0 ]]; then\n        result=true\n    elif [[ $1 < 0 ]]; then\n\
    \        abs=$((-$1))\n        [ $(echo \"sqrt(c($abs)) % 1\" | bc -l) == 0 ]\
    \ && result=true\n    else\n        [ $(echo \"sqrt(c($1)) % 1\" | bc -l) == 0\
    \ ] && result=true\n    fi\n    echo $result\n}\n\ncandidate() {\n    iscube \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n   \
    \ [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'Runtime error (func=(main), adr=9): Square root of a negative number

    /tmp/tmp4ewekpz7.sh: line 22: [: ==: unary operator expected

    Runtime error (func=(main), adr=11): Square root of a negative number

    /tmp/tmp4ewekpz7.sh: line 22: [: ==: unary operator expected

    '
  stdout: ''
  timestamp: 1660020363
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n   [ $1 -eq $(($1**(1/3)+0))**3\
    \ ] && echo true || echo false\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmptdw3eoxp.sh: line 15: [: 1**3: integer expression expected

    '
  stdout: ''
  timestamp: 1660020363
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    local val=$1\n\
    \    if [[ $val == 0 ]]; then\n        echo True\n        return\n    fi\n   \
    \ local x=1\n    while (( $x**3 < $val )); do\n        (( x++ ))\n    done\n \
    \   if (( $x**3 == $val )); then\n        echo True\n    else\n        echo False\n\
    \    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020363
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n  echo \"$1\" | grep\
    \ -q -v '^[0-9]\\+$' && return 1\n  local a=$(echo \"scale=0; $1^(1/3)\" | bc)\n\
    \  [ \"$a\" -eq \"$(echo \"scale=0; $a^3\" | bc)\" ] && return 0\n  return 1\n\
    }\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020363
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    echo \"$1 = $((($1\
    \ * $1 * $1)))\"\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020363
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n  if [[ $(( $1 **\
    \ (1 / 3) )) -eq $(( $1 ** (1 / 3) )) ]]; then\n    echo true\n  else\n    echo\
    \ false\n  fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020363
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n\tnum=$1\n\tnum=$(echo\
    \ \"$num > 0\" | bc) #convert to positive\n\tfor (( i=0; i<$((num+1)); i++ ))\
    \ do\n\t\tif [ $((i*i*i)) -eq $num ]; then\n\t\t\techo True\n\t\t\treturn\n\t\t\
    fi\n\tdone\n\techo False\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020363
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    # return true\
    \ if $1 is a cube\n    #\n    # @param integer\n    local number=$1\n    local\
    \ c=0\n    local s=0\n    local e=0\n    if [ $number -eq 0 ]; then\n        echo\
    \ \"true\"\n        return 0\n    fi\n    if [ $number -lt 0 ]; then\n       \
    \ number=$((-$number))\n    fi\n    s=$((number**1/3))\n    e=$((s+1))\n    while\
    \ ((s<=e)); do\n        c=$((s*s*s))\n        if [ $c -eq $number ]; then\n  \
    \          echo \"true\"\n            return 0\n        fi\n        if [ $c -gt\
    \ $number ]; then\n            echo \"false\"\n            return 1\n        fi\n\
    \        s=$((s+1))\n    done\n    echo \"false\"\n    return 1\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020363
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==>\
    \ False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n\
    # iscube(180) ==> False\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ] || [ $1 -eq 1 ] || [ $1 -eq -1 ]; then\n        echo \"true\"\n    else\n\
    \        r=$(echo \"scale=0; $1 / $1 / $1\" | bc)\n        if [ $r -eq $1 ]; then\n\
    \            echo \"true\"\n        else\n            echo \"false\"\n       \
    \ fi\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020363
