name: HumanEval_24_largest_divisor
language: sh
prompt: "#!/bin/bash\n# For a given number n, find the largest number that divides\
  \ n evenly, smaller than n\n# >>> largest_divisor(15)\n# 5\n#\n# $1 is an integer\n\
  largest_divisor() {\n"
tests: "}\n\ncandidate() {\n    largest_divisor \"$@\"\n}\n\nset -e\nrun_test() {\n\
  \    [[ $(candidate \"3\") = \"1\" ]]\n    [[ $(candidate \"7\") = \"1\" ]]\n  \
  \  [[ $(candidate \"10\") = \"5\" ]]\n    [[ $(candidate \"100\") = \"50\" ]]\n\
  \    [[ $(candidate \"49\") = \"7\" ]]\n}\n\nrun_test"
completions: ["  test $1 -eq 0 && echo \"Division by zero.\" && return 1\n  echo $((\
    \ $(($1 / 2)) + 1 ))", "\tlocal num=$1\n\tlocal div=2\n\tlocal max=0\n\twhile\
    \ [ $div -lt $num ]; do\n\t\tlocal var=$(($num % $div))\n\t\tif [ $var -eq 0 ];\
    \ then\n\t\t\tlet max=$div\n\t\tfi\n\t\tlet div=$div+1\n\tdone\n\techo $max",
  "    local num=$1\n    local i=2\n    while [ $i -lt $num ]; do\n        if [ $(bc\
    \ <<< \"$num % $i\") == 0 ]; then\n            i=$(bc <<< \"$num / $i\")\n   \
    \     else\n            i=$(bc <<< \"$i + 1\")\n        fi\n    done\n    echo\
    \ $i", "  for ((i=$1/2; i>0; i--)); do\n    if [ $(( $1 % $i )) -eq 0 ]; then\n\
    \      echo $i\n      return\n    fi\n  done", "    local n=$1\n    local i=$((n-1))\n\
    \    while [[ $((n%i)) -ne 0 ]]; do\n        let i-=1\n    done\n    echo $i",
  "    local n=$1\n    # while loop until we find a number that n can be divided by\
    \ evenly\n    local i=2\n    while (( $i <= $n/2 )); do\n        if (( $n % $i\
    \ == 0 )); then\n            echo $i\n            break\n        fi\n        ((\
    \ i+=1 ))\n    done", "\tif [[ $1 -eq 1 ]]; then\n\t\techo \"1\"\n\t\treturn\n\
    \tfi\n\ti=$(($1-1))\n\twhile [[ $i -gt 1 ]]; do\n\t\tif [[ $(( $1 % $i )) -eq\
    \ 0 ]]; then\n\t\t\techo \"$i\"\n\t\t\treturn\n\t\tfi\n\t\ti=$(($i-1))\n\tdone",
  "    local n=$1\n    local i\n    for ((i=n/2; i>1; i--)); do\n        if [[ $((n%i))\
    \ -eq 0 ]]; then\n            echo $i\n            return\n        fi\n    done\n\
    \    echo 1", "    if [[ -z $1 ]]; then\n        echo \"Missing argument\"\n \
    \       return 1\n    fi\n    if [[ ! $1 =~ ^[0-9]+$ ]]; then\n        echo \"\
    Argument is not an integer\"\n        return 1\n    fi\n    let n=$1-1\n    while\
    \ [[ $(($1%$n)) -ne 0 ]]; do\n        let n-=1\n    done\n    echo $n", "  local\
    \ -i n=\"$1\" d=2\n\n  while (( n % d != 0 )); do\n    (( d++ ))\n  done\n\n \
    \ echo \"$d\"", "    local _n=$1\n    local _d=$((${_n}-1))\n    local _remainder=1\n\
    \    local _result=1\n    # loop until we have a remainder of 0 or the divisor\
    \ is 1\n    while [[ ${_remainder} -ne 0 && ${_d} -gt 1 ]]; do\n        _remainder=$((${_n}\
    \ % ${_d}))\n        # if there is no remainder, save the result\n        if [[\
    \ ${_remainder} -eq 0 ]]; then\n            _result=${_d}\n        fi\n      \
    \  # decrement the divisor\n        _d=$((${_d}-1))\n    done\n    echo ${_result}",
  '  echo "scale=0; $1 / 2" | bc -l', "  if [ -z \"$1\" ]; then\n    echo \"Usage:\
    \ $0 [integer] \"\n    return 1\n  fi\n  local integer=$1\n  local largest=2\n\
    \n  for (( i = 3; i < $integer; i++ )); do\n    local remainder=$(( $integer %\
    \ $i ))\n    if [ $remainder -eq 0 ]; then\n      local largest=$i\n    fi\n \
    \ done\n\n  echo $largest", "  local n=$1\n  local i=$n\n  local gcd=1\n  while\
    \ [ $i -gt 1 ]; do\n    [ $((n % i)) -eq 0 ] && gcd=$i\n    i=$((i - 1))\n  done\n\
    \  echo $gcd", "    local i=$(($1-1))\n    while [ $i -gt 0 ]; do\n        if\
    \ [[ $(( $1 % $i )) -eq 0 ]]; then\n            echo $i\n            return\n\
    \        fi\n        ((i--))\n    done", "    numbers=`seq $1`\n    for divisor\
    \ in $numbers; do\n        if [ $(( $1 % $divisor )) -eq 0 ]; then\n         \
    \   echo $divisor\n        fi\n    done | sort -rn | head -1", "  # Pseudocode\n\
    \  #    1. Get largest integer smaller than $1.\n  #    2. While $1 % $2 is not\
    \ zero, subtract 1 from $2.\n  #    3. Return $2.\n  lower=$(($1 - 1))\n  while\
    \ [ $(($1 % $lower)) -ne 0 ]; do\n    lower=$(($lower - 1))\n  done\n  echo $lower",
  "  local -i n=$1\n  for ((d=n-1; d>0; d--)); do\n    [[ $((n%d)) == 0 ]] && echo\
    \ $d && return\n  done", "    for (( i=$1-1; i > 0; i-- ))\n    do\n        if\
    \ [ $(($1 % $i)) -eq 0 ]\n        then\n            return $i\n        fi\n  \
    \  done", "  n=$1\n  half=$((n/2))\n  while [[ half -gt 0 ]]; do\n    if [[ $((n%half))\
    \ -eq 0 ]]; then\n      echo $half\n      return\n    fi\n    half=$((half-1))\n\
    \  done"]
stop_tokens:
- "\n}"
