name: HumanEval_14_all_prefixes
language: sh
prompt: "#!/bin/bash\n# Return list of all prefixes from shortest to longest of the\
  \ input string\n# >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\n#\n# $1 is a string\n\
  all_prefixes() {\n"
tests: "}\n\ncandidate() {\n    all_prefixes \"$@\"\n}\n\nset -e\nrun_test() {\n \
  \   [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"asdfgh\") = \"a as asd\
  \ asdf asdfg asdfgh\" ]]\n    [[ $(candidate \"WWW\") = \"W WW WWW\" ]]\n}\n\nrun_test"
completions: ["    [ -z \"$1\" ] && return 0\n    echo \"$1\" | sed -r '1{h;d};G;s/(.*)\\\
    n(.*)/\\2\\n\\1/;h;x;s/^(.*)\\n(.*)/\\1\\n\\2\\n\\1\\2/;G;s/\\n(.*)$/\\1/;s/^(.*)\\\
    n(.*)$/\\1\\n\\2/;s/\\n//g;h;d'", "    local str=$1\n    local length=\"${#str}\"\
    \n    for (( i=1; i<=length; i++ )); do\n        echo \"${str:0:i}\"\n    done",
  '    echo "${1:0:$((${#1} + 1))}"', "    string=$1\n    prefixes=()\n    while [[\
    \ -n $string ]]; do\n        prefixes+=(\"$string\")\n        string=\"${string%?}\"\
    \n    done\n    echo \"${prefixes[@]}\"", "    local -r s=$1\n    local -r len=$(strlen\
    \ \"$s\")\n    local ret\n    for ((i=1; i<=len; i++)); do\n        ret+=( \"\
    ${s:0:i}\" )\n    done\n    echo \"${ret[@]}\"", "  local str=\"$1\"\n  local\
    \ -a prefixes\n  local -i i=1\n  while [[ $i -le ${#str} ]]; do\n    prefixes+=(\"\
    ${str:0:i}\")\n    (( i++ ))\n  done\n  echo \"${prefixes[@]}\"", "    # Create\
    \ variable to hold string\n    local str=\"$1\"\n    # Create variable to hold\
    \ list of prefixes\n    local prefixes=()\n    # If string is non-empty\n    if\
    \ [ -n \"$str\" ]; then\n        # For each length from 1 to length of string\n\
    \        for ((i=1; i<=${#str}; i++)); do\n            # Add substring to list\
    \ of prefixes\n            prefixes+=(\"${str:0:i}\")\n        done\n    fi\n\
    \    # Return prefixes\n    echo \"${prefixes[@]}\"", "    local input=$1\n  \
    \  local output=()\n    local i\n\n    for ((i=0; i<${#input}; i++)); do\n   \
    \     output+=(${input:0:$((i+1))})\n    done\n\n    printf '%s\\n' \"${output[@]}\"",
  "    local prefixes=()\n    local i=0\n    local ilen=${#1}\n    while [ $i -lt\
    \ $ilen ]; do\n        prefixes+=(\"${1:0:$((i+1))}\")\n        i=$((i+1))\n \
    \   done\n    echo \"${prefixes[@]}\"", "    local input=${1}\n    local input_length=${#input}\n\
    \    local idx=0\n    local -a prefixes=()\n    while [ $idx -lt $input_length\
    \ ]; do\n        local prefix=${input:0:$idx}\n        prefixes+=( \"$prefix\"\
    \ )\n        idx=$(( idx + 1 ))\n    done\n    echo \"${prefixes[@]}\"", "   \
    \ [ $# -eq 1 ] || return 1\n    local i\n    local result=()\n    for ((i=1; i<=${#1};\
    \ i++)); do\n        result+=(\"${1:0:i}\")\n    done\n    echo \"${result[@]}\"",
  "    result=()\n    for ((i=1; i<=${#1}; i++)); do\n        result+=(${1:0:i})\n\
    \    done\n    echo \"${result[@]}\"", "    local in=$1\n\n    local len=${#in}\n\
    \    for ((i=1; i<=len; i++)); do\n        echo ${in:0:i}\n    done", "    word=$1\n\
    \    # In bash we use:\n    #   ${parameter:offset:length}\n    # to get a substring\
    \ of a string.\n    # If you don't specify length, it will take the whole string.\n\
    \    # If you don't specify offset, it will take from the beginning.\n    # Note\
    \ that there is also a substring function, ${parameter#word},\n    # which gives\
    \ you the part of the string after 'word'.\n    # This is a common idiom used\
    \ to strip the directory from a path.\n    # For example, '/path/to/file.txt'\
    \ -> 'file.txt'\n    #\n    # But note this only strips off the first instance\
    \ of word if the string\n    # contains more than one of them.\n    local start=1\n\
    \    local end=0\n    local len=${#word}\n    while [[ \"$start\" -le \"$len\"\
    \ ]]; do\n        ((end++))\n        echo \"${word:0:$end}\"\n        ((start++))\n\
    \    done", "    local prefixes\n    for ((i=0; i<${#1}; i++)); do\n        prefixes=\"\
    $prefixes ${1:0:$i+1}\"\n    done\n    echo $prefixes", "    s=$1;\n    i=0;\n\
    \    while [ $i -lt ${#s} ]; do\n        echo ${s:0:$((i+1))};\n        i=$((i+1));\n\
    \    done;", "    local input=$1\n    local prefixes=()\n    for ((i=1; i<=${#input};\
    \ i++)); do\n        prefixes+=(\"${input:0:i}\")\n    done\n    echo \"${prefixes[@]}\"",
  "    [[ \"$#\" != \"1\" ]] && return\n    local l c p r\n    l=\"${#1}\"\n    c=0\n\
    \    while (( c < l )); do\n        c=$(( c + 1 ))\n        p=\"${1:0:c}\"\n \
    \       echo \"$p\"\n    done", '    echo $(seq 1 $((${#1}))) | xargs -I{} echo
    -n "{} " | xargs -I{} echo {} | xargs -I{} echo ${1:0:${#1}}', "    [ -z \"$1\"\
    \ ] && return\n    local r\n    local i\n    for ((i=1; i<=${#1}; i++)); do\n\
    \        r=\"$r ${1:0:$i}\"\n    done\n    echo $r"]
stop_tokens:
- "\n}"
