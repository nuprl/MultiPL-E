language: sh
name: HumanEval_74_total_match
results:
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# total_match([], []) \u279E []\n# total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n# total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n# total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n# total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n#\n# $1 is a space-separated list\n\
    # $2 is a space-separated list\ntotal_match() {\n    local total_count=0\n   \
    \ for word in $1; do\n        local count=0\n        for ((i=0; i<${#word}; i++));\
    \ do\n            ((count++))\n        done\n        ((total_count+=count))\n\
    \    done\n    echo $total_count\n}\n\ncandidate() {\n    total_match \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020291
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# total_match([], []) \u279E []\n# total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n# total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n# total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n# total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n#\n# $1 is a space-separated list\n\
    # $2 is a space-separated list\ntotal_match() {\n  local -a a=()\n  local -a b=()\n\
    \  # initialize a and b\n  for i in ${1}\n  do\n    a+=(${i})\n  done\n  for i\
    \ in ${2}\n  do\n    b+=(${i})\n  done\n  if [[ ${#a[@]} -lt ${#b[@]} ]]\n  then\n\
    \    # if a is smaller, then b is the bigger\n    # we will print b\n    for i\
    \ in ${b[@]}\n    do\n      echo -n \"${i} \"\n    done\n    echo\n  elif [[ ${#a[@]}\
    \ -gt ${#b[@]} ]]\n  then\n    # if a is bigger, then a is the bigger\n    # we\
    \ will print a\n    for i in ${a[@]}\n    do\n      echo -n \"${i} \"\n    done\n\
    \    echo\n  else\n    # if a is equal in size, we need to check the sum of lengths\n\
    \    local asum=0\n    local bsum=0\n    for i in ${a[@]}\n    do\n      asum=$((\
    \ ${asum} + ${#i} ))\n    done\n    for i in ${b[@]}\n    do\n      bsum=$(( ${bsum}\
    \ + ${#i} ))\n    done\n    if [[ ${asum} -lt ${bsum} ]]\n    then\n      # if\
    \ a is smaller, then b is the bigger\n      # we will print b\n      for i in\
    \ ${b[@]}\n      do\n        echo -n \"${i} \"\n      done\n      echo\n    else\n\
    \      # if a is bigger, then a is the bigger\n      # we will print a\n     \
    \ for i in ${a[@]}\n      do\n        echo -n \"${i} \"\n      done\n      echo\n\
    \    fi\n  fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020291
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# total_match([], []) \u279E []\n# total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n# total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n# total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n# total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n#\n# $1 is a space-separated list\n\
    # $2 is a space-separated list\ntotal_match() {\n    # TODO\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpkzo6x4dj.sh: line 16: syntax error near unexpected token `}''

    /tmp/tmpkzo6x4dj.sh: line 16: `}''

    '
  stdout: ''
  timestamp: 1660020291
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# total_match([], []) \u279E []\n# total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n# total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n# total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n# total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n#\n# $1 is a space-separated list\n\
    # $2 is a space-separated list\ntotal_match() {\n\tlocal len1=0\n\tlocal len2=0\n\
    \tfor str in $1\n\tdo\n\t\t((len1+=${#str}))\n\tdone\n\tfor str in $2\n\tdo\n\t\
    \t((len2+=${#str}))\n\tdone\n\tif [ $len1 -lt $len2 ]\n\tthen\n\t\techo $1\n\t\
    else\n\t\techo $2\n\tfi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020291
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# total_match([], []) \u279E []\n# total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n# total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n# total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n# total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n#\n# $1 is a space-separated list\n\
    # $2 is a space-separated list\ntotal_match() {\n   local l1=$(echo $1 | wc -w)\n\
    \   local l2=$(echo $2 | wc -w)\n   if [ $l1 -lt $l2 ]; then\n      echo $1\n\
    \   else\n      echo $2\n   fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020291
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# total_match([], []) \u279E []\n# total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n# total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n# total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n# total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n#\n# $1 is a space-separated list\n\
    # $2 is a space-separated list\ntotal_match() {\n  IFS=' ' read -r -a array1 <<<\
    \ \"$1\"\n  IFS=' ' read -r -a array2 <<< \"$2\"\n  array1Len=${#array1[@]}\n\
    \  array2Len=${#array2[@]}\n  if [[ $array1Len -lt $array2Len ]]; then\n    echo\
    \ \"$1\"\n  elif [[ $array1Len -gt $array2Len ]]; then\n    echo \"$2\"\n  else\n\
    \    for ((i=0; i<$array1Len; i++)); do\n      array1LenString=${#array1[$i]}\n\
    \      array2LenString=${#array2[$i]}\n      if [[ $array1LenString -lt $array2LenString\
    \ ]]; then\n        echo \"$1\"\n        return\n      elif [[ $array1LenString\
    \ -gt $array2LenString ]]; then\n        echo \"$2\"\n        return\n      fi\n\
    \    done\n    echo \"$1\"\n  fi\n}\n\ncandidate() {\n    total_match \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020291
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# total_match([], []) \u279E []\n# total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n# total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n# total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n# total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n#\n# $1 is a space-separated list\n\
    # $2 is a space-separated list\ntotal_match() {\n    # split arguments into arrays\n\
    \    list1=($1)\n    list2=($2)\n    # length of each array\n    len1=${#list1[@]}\n\
    \    len2=${#list2[@]}\n    # initialize total char counter\n    sum1=0\n    sum2=0\n\
    \    # loop through the arrays to sum chars in the strings\n    for i in $(seq\
    \ 0 $((len1-1))); do\n        str=${list1[$i]}\n        sum1=$((sum1+${#str}))\n\
    \    done\n    for i in $(seq 0 $((len2-1))); do\n        str=${list2[$i]}\n \
    \       sum2=$((sum2+${#str}))\n    done\n    # compare sums and return the appropriate\
    \ list\n    if [[ $sum1 -gt $sum2 ]]; then\n        echo \"$2\"\n    else\n  \
    \      echo \"$1\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020291
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# total_match([], []) \u279E []\n# total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n# total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n# total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n# total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n#\n# $1 is a space-separated list\n\
    # $2 is a space-separated list\ntotal_match() {\n    local x;\n    local y;\n\
    \    local sum_x;\n    local sum_y;\n    local i;\n    local -a arr_x;\n    local\
    \ -a arr_y;\n    read -ra arr_x <<< \"$1\";\n    read -ra arr_y <<< \"$2\";\n\
    \    #echo \"${arr_x[*]}\";\n    #echo \"${arr_y[*]}\";\n    #echo ${#arr_x[@]};\n\
    \    #echo ${#arr_y[@]};\n    for ((i=0; i<${#arr_x[@]}; i++)); do\n        x=${arr_x[$i]};\n\
    \        sum_x=${sum_x}${#x};\n    done\n    for ((i=0; i<${#arr_y[@]}; i++));\
    \ do\n        y=${arr_y[$i]};\n        sum_y=${sum_y}${#y};\n    done\n    if\
    \ [[ \"$sum_x\" -eq \"$sum_y\" ]]; then\n        echo \"$1\";\n    elif [[ \"\
    $sum_x\" -lt \"$sum_y\" ]]; then\n        echo \"$1\";\n    else\n        echo\
    \ \"$2\";\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020291
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# total_match([], []) \u279E []\n# total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n# total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n# total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n# total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n#\n# $1 is a space-separated list\n\
    # $2 is a space-separated list\ntotal_match() {\n    # FIXME\n    return 0\n}\n\
    \ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\"\
    \ ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"\
    hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi\
    \ hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020291
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# total_match([], []) \u279E []\n# total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n# total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n# total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n# total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n#\n# $1 is a space-separated list\n\
    # $2 is a space-separated list\ntotal_match() {\n\t\tif [ $# -eq 2 ]; then\n\t\
    \t\t\tif [ \"$1\" = \"\" ] && [ \"$2\" = \"\" ]; then\n\t\t\t\t\t\techo \"\"\n\
    \t\t\t\telif [ \"$1\" = \"\" ]; then\n\t\t\t\t\t\techo \"$2\"\n\t\t\t\telif [\
    \ \"$2\" = \"\" ]; then\n\t\t\t\t\t\techo \"$1\"\n\t\t\t\telse\n\t\t\t\t\t\ts1=0\n\
    \t\t\t\t\t\ts2=0\n\t\t\t\t\t\tfor word in $1; do\n\t\t\t\t\t\t\t\ts1=$((s1+${#word}))\n\
    \t\t\t\t\t\tdone\n\t\t\t\t\t\tfor word in $2; do\n\t\t\t\t\t\t\t\ts2=$((s2+${#word}))\n\
    \t\t\t\t\t\tdone\n\t\t\t\t\t\tif [ $s1 -lt $s2 ]; then\n\t\t\t\t\t\t\t\techo \"\
    $1\"\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\techo \"$2\"\n\t\t\t\t\t\tfi\n\t\t\t\t\
    fi\n\t\telse\n\t\t\t\techo \"ERROR: Illegal number of parameters.\"\n\t\tfi\n\
    }\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020291
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# total_match([], []) \u279E []\n# total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n# total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n# total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n# total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n#\n# $1 is a space-separated list\n\
    # $2 is a space-separated list\ntotal_match() {\n\tlocal c1=0 c2=0\n\tfor i in\
    \ $1\n\tdo\n\t\tlet c1=c1+${#i}\n\tdone\n\tfor i in $2\n\tdo\n\t\tlet c2=c2+${#i}\n\
    \tdone\n\tif [ $c1 -lt $c2 ]\n\tthen\n\t\techo $1\n\telse\n\t\techo $2\n\tfi\n\
    }\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020291
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# total_match([], []) \u279E []\n# total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n# total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n# total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n# total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n#\n# $1 is a space-separated list\n\
    # $2 is a space-separated list\ntotal_match() {\n  local l1=$(echo $1 | wc -w)\n\
    \  local l2=$(echo $2 | wc -w)\n  local count1=0\n  local count2=0\n  for word\
    \ in $1; do\n    count1=$((count1 + ${#word}))\n  done\n  for word in $2; do\n\
    \    count2=$((count2 + ${#word}))\n  done\n  if [[ count1 -lt count2 ]]; then\n\
    \    echo $1\n  elif [[ count1 -gt count2 ]]; then\n    echo $2\n  else\n    echo\
    \ $1\n  fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020291
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# total_match([], []) \u279E []\n# total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n# total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n# total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n# total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n#\n# $1 is a space-separated list\n\
    # $2 is a space-separated list\ntotal_match() {\n    local l=()\n    for i in\
    \ $1; do l+=(\"$i\"); done\n    for i in $2; do l+=(\"$i\"); done\n    local min=1000000000000\n\
    \    local result=$1\n    local sum=0\n    for i in ${l[@]}; do \n        ((sum\
    \ += ${#i}))\n        if [ $sum -lt $min ]; then\n            min=$sum\n     \
    \       result=$i\n        fi\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\
    \") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n   \
    \ [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n   \
    \ [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020291
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# total_match([], []) \u279E []\n# total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n# total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n# total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n# total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n#\n# $1 is a space-separated list\n\
    # $2 is a space-separated list\ntotal_match() {\n  ##############################################################################\n\
    \  first_list_chars=0\n  for first_list_item in $1; do\n    first_list_chars=$((\
    \ first_list_chars + ${#first_list_item} ))\n  done\n  ##############################################################################\n\
    \  second_list_chars=0\n  for second_list_item in $2; do\n    second_list_chars=$((\
    \ second_list_chars + ${#second_list_item} ))\n  done\n  ##############################################################################\n\
    \  if [[ $first_list_chars -gt $second_list_chars ]]; then\n    echo \"$2\"\n\
    \  else\n    echo \"$1\"\n  fi\n  ##############################################################################\n\
    }\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020291
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# total_match([], []) \u279E []\n# total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n# total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n# total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n# total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n#\n# $1 is a space-separated list\n\
    # $2 is a space-separated list\ntotal_match() {\n  sum_list1=0\n  sum_list2=0\n\
    \  # loop to sum the length of each element in $1\n  for var in $1; do\n    sum_list1=$((sum_list1\
    \ + ${#var}))\n  done\n  # loop to sum the length of each element in $2\n  for\
    \ var in $2; do\n    sum_list2=$((sum_list2 + ${#var}))\n  done\n  # compare the\
    \ two sums to determine which list has less chars\n  if [ $sum_list1 -eq $sum_list2\
    \ ]; then\n    echo $1\n  elif [ $sum_list1 -lt $sum_list2 ]; then\n    echo $1\n\
    \  else\n    echo $2\n  fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020291
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# total_match([], []) \u279E []\n# total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n# total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n# total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n# total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n#\n# $1 is a space-separated list\n\
    # $2 is a space-separated list\ntotal_match() {\n    local str1=$1 str2=$2\n \
    \   local len1=$(expr 0 ${str1// /+}) len2=$(expr 0 ${str2// /+})\n    [ $len1\
    \ -le $len2 ] && echo \"$1\" || echo \"$2\"\n}\n\ncandidate() {\n    total_match\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\")\
    \ = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\
    \" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "expr: syntax error: unexpected argument \u2018hi+admin\u2019\nexpr: syntax\
    \ error: unexpected argument \u2018hi+hi\u2019\n"
  stdout: ''
  timestamp: 1660020291
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# total_match([], []) \u279E []\n# total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n# total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n# total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n# total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n#\n# $1 is a space-separated list\n\
    # $2 is a space-separated list\ntotal_match() {\n  total1=0\n  total2=0\n  # build\
    \ an array of each list\n  IFS=' ' read -r -a list1 <<< \"$1\"\n  IFS=' ' read\
    \ -r -a list2 <<< \"$2\"\n  # get the total chars in each list\n  for i in \"\
    ${list1[@]}\"; do \n    total1=$((total1 + ${#i}))\n  done\n  for i in \"${list2[@]}\"\
    ; do \n    total2=$((total2 + ${#i}))\n  done\n  # decide which list to return\n\
    \  if [[ total1 -lt total2 ]]; then\n    echo \"$1\"\n  else\n    echo \"$2\"\n\
    \  fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020291
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# total_match([], []) \u279E []\n# total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n# total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n# total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n# total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n#\n# $1 is a space-separated list\n\
    # $2 is a space-separated list\ntotal_match() {\n    # write your code here\n\
    \    total1=0\n    total2=0\n    for i in $1\n    do\n        ((total1+=${#i}))\n\
    \    done\n    for i in $2\n    do\n        ((total2+=${#i}))\n    done\n    if\
    \ [ $total1 -lt $total2 ]\n    then\n        echo $1\n    else\n        echo $2\n\
    \    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020291
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# total_match([], []) \u279E []\n# total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n# total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n# total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n# total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n#\n# $1 is a space-separated list\n\
    # $2 is a space-separated list\ntotal_match() {\n    for i in $1; do\n       \
    \ firstLen=$(( $firstLen + ${#i} ))\n    done\n    for i in $2; do\n        secondLen=$((\
    \ $secondLen + ${#i} ))\n    done\n    if [ $firstLen -lt $secondLen ]; then\n\
    \        echo $1\n    elif [ $firstLen -gt $secondLen ]; then\n        echo $2\n\
    \    else\n        echo $1\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpnbjnh0_o.sh: line 21: [: -lt: unary operator expected

    /tmp/tmpnbjnh0_o.sh: line 23: [: -gt: unary operator expected

    /tmp/tmpnbjnh0_o.sh: line 21: [: 4: unary operator expected

    /tmp/tmpnbjnh0_o.sh: line 23: [: 4: unary operator expected

    '
  stdout: ''
  timestamp: 1660020291
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# total_match([], []) \u279E []\n# total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n# total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n# total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n# total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n#\n# $1 is a space-separated list\n\
    # $2 is a space-separated list\ntotal_match() {\n    # todo\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp90n7tnkz.sh: line 16: syntax error near unexpected token `}''

    /tmp/tmp90n7tnkz.sh: line 16: `}''

    '
  stdout: ''
  timestamp: 1660020291
