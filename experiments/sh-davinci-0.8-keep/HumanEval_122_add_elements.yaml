name: HumanEval_122_add_elements
language: sh
prompt: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer k,\
  \ return\n# the sum of the elements with at most two digits from the first k elements\
  \ of arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
  \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
  \ len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
  \ {\n"
tests: "}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n \
  \   [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate\
  \ \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6\
  \ 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"\
  4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
completions: ["  arr=$1\n  k=$2\n  # split\n  IFS=\" \" read -r -a array <<< \"$arr\"\
    \n  local sum=0\n  for i in ${array[@]:0:$k}; do\n    if [[ $i -lt 100 ]]; then\n\
    \      sum=$((sum + i))\n    fi\n  done\n  echo $sum", "    local array=($1)\n\
    \    local max_elems=$2\n    local sum=0\n    local re='^[0-9]+$'\n    local i=0\n\
    \    while [ $i -lt $max_elems ]; do\n        if [[ ${array[$i]} =~ $re ]]; then\n\
    \            if [ ${#array[$i]} -le 2 ]; then\n                ((sum+=array[$i]))\n\
    \            fi\n        fi\n        ((i++))\n    done\n    echo $sum", "  local\
    \ var=\"$1\"\n  local k=\"$2\"\n  local i=0\n  local result=0\n  local element=0\n\
    \  local n_digits=0\n  for element in $var; do\n    n_digits=${#element}\n   \
    \ if [ $n_digits -le 2 ]; then\n      ((result += element))\n    fi\n    ((i +=\
    \ 1))\n    if [ $i -eq $k ]; then\n      break\n    fi\n  done\n  echo $result",
  "    # Create a new array from the space-separated list\n    local -a my_array=($1)\n\
    \    local -i k=$2\n    local -i sum=0\n    local -i i=0\n    while [ $i -lt $k\
    \ ]; do\n        if [ ${#my_array[$i]} -le 2 ]; then\n            ((sum+=my_array[$i]))\n\
    \        fi\n        ((i++))\n    done\n    echo $sum", "\tlocal result=\"0\"\n\
    \tlocal counter=0\n\tfor i in $1; do\n\t\tif [[ $i -lt 100 ]]; then\n\t\t\t((result+=i))\n\
    \t\tfi\n\t\t((counter++))\n\t\tif ((counter == $2)); then\n\t\t\tbreak\n\t\tfi\n\
    \tdone\n\techo $result", "    local int_string=()\n    local int_sum=0\n    local\
    \ i=0\n    local len_arr=\"$#\"\n    # set up array of integers\n    for i in\
    \ $@; do\n        int_string+=(\"$i\")\n    done\n    # get sum of at most two\
    \ integers\n    for ((i=0; i<len_arr; i++)); do\n        if [[ ${int_string[$i]}\
    \ -lt 100 ]]; then\n            ((int_sum+=${int_string[$i]}))\n        fi\n \
    \   done\n    echo $int_sum", "  declare -a array=(\"$@\")\n  k=${array[-1]}\n\
    \  array=(\"${array[@]:0:${#array[@]}-1}\")\n  sum=0\n  for i in \"${array[@]}\"\
    ; do\n    if [ ${#i} -le 2 ]; then\n      ((sum += i))\n    fi\n  done\n  echo\
    \ $sum", "    local arr=(\"$@\")\n    local arr_length=${#arr[@]}\n    local k=${arr[$arr_length-1]}\n\
    \    local res=0\n    for ((i=0; i<k; i++)); do\n        local temp=${arr[$i]}\n\
    \        if [[ ${#temp} -le 2 ]]; then\n            res=$(( res + temp ))\n  \
    \      fi\n    done\n    echo $res", "  local arr=\"$1\"\n  local k=\"$2\"\n \
    \ local sum=0\n  local i=0\n  local tmp\n  for num in $arr; do\n    if [ $i -ge\
    \ $k ]; then\n      break\n    fi\n    # shellcheck disable=SC2086\n    # We do\
    \ want wordsplitting on $num\n    tmp=$(echo $num | tr -dc '[:digit:]')\n    if\
    \ [ ${#tmp} -le 2 ]; then\n      sum=$((sum + num))\n    fi\n    i=$((i + 1))\n\
    \  done\n  echo \"$sum\"", "    arr=(\"$@\")\n    for i in ${arr[@]:0:$2}; do\n\
    \        [[ $i =~ ^[0-9]{1,2}$ ]] && echo -n \"$i+\"\n    done | sed 's/\\+$//'\
    \ | bc", "  local elements=\"$1\"\n  local sum=0\n  for i in $elements; do\n \
    \   if [[ $i -lt 100 ]]; then\n      sum=$((sum + i))\n    fi\n  done\n  echo\
    \ $sum", "    # Declare a map for storing digits counts for each number.\n   \
    \ declare -A digits_count\n\n    # Create a map between a number and its digits\
    \ count\n    for number in $1; do\n        digits_count[$number]=${#number}\n\
    \    done\n\n    # Sort the numbers in the map by its digits count\n    sorted_digits_count=$(for\
    \ number in \"${!digits_count[@]}\"; do echo \"${digits_count[$number]} $number\"\
    ; done | sort -n)\n\n    total=0\n    count=0\n    for number in $sorted_digits_count;\
    \ do\n        if [ $count -lt $2 ]; then\n            if [ ${#number} -le 2 ];\
    \ then\n                total=$((total + number))\n            fi\n          \
    \  count=$((count + 1))\n        else\n            break\n        fi\n    done\n\
    \n    echo $total", "  local arr=\"$1\"\n  local k=\"$2\"\n  local sum=0\n  local\
    \ count=0\n  for i in $arr; do\n    if [[ $i -gt 9 && $i -lt 100 ]]; then\n  \
    \    sum=$(( sum + i ))\n      (( count++ ))\n    fi\n    [[ $count -eq $k ]]\
    \ && break\n  done\n  echo $sum", "    echo \"$1\" | awk '{ split($0, arr, \"\
    \ \"); result = 0; for (i = 1; i <= '$2'; i++) { if (length(arr[i]) <= 2) { result\
    \ += arr[i] } } print result }'", "  [[ -z $1 ]] && { echo \"Invalid arguments\
    \ passed to 'add_elements'.\"; exit 1; }\n  # Remove anything that isn't a digit\
    \ or a space\n  arr=(${1//[^0-9 ]/})\n  [[ -z ${arr[@]} ]] && { echo \"Invalid\
    \ arguments passed to 'add_elements'.\"; exit 1; }\n  # Check if $2 is an integer\n\
    \  [[ ! $2 =~ ^[0-9]+$ ]] && { echo \"Invalid arguments passed to 'add_elements'.\"\
    ; exit 1; }\n  sum=0\n  for (( i=0; i<$2; i++ )); do\n    [[ ${#arr[$i]} -le 2\
    \ ]] && sum=$((sum+arr[$i]))\n  done\n  echo \"$sum\"", "    arr=(\"$@\")\n  \
    \  n=${#arr[@]}\n    for ((i=0; i<n; i++)); do\n        num=${arr[$i]}\n     \
    \   if [ ${#num} -gt 2 ]; then\n            arr[$i]=${num:0:2}\n        fi\n \
    \   done\n    echo \"${arr[@]}\" | tr ' ' '+' | bc", "    local -n arr=$1\n  \
    \  local k=$2\n    local sum=0\n    if [[ $k -gt ${#arr[@]} ]]; then\n       \
    \ echo \"Error: k cannot be greater than the length of arr\" >&2\n        return\
    \ 1\n    fi\n    for i in $(seq 1 $k); do\n        if [[ ${arr[$i]} -lt 100 ]];\
    \ then\n            sum=$((sum + ${arr[$i]}))\n        fi\n    done\n    echo\
    \ $sum", "    local k=$2\n    local sum=0\n    local n\n    for n in $1; do\n\
    \        ((n<100)) && ((k--)) && ((sum+=n))\n        ((k==0)) && break\n    done\n\
    \    echo $sum", "    #\n    # we use bc to evaluate the sum\n    #\n    local\
    \ sum=0\n    local arr=(${1// / })\n    #\n    # the loop iterates over arr using\
    \ $i as an index\n    #\n    for ((i=0; i<=${#arr[@]}; i++)); do\n        local\
    \ val=${arr[$i]}\n        #\n        # if val is not null and has 1 or 2 digits\n\
    \        # then add to the sum\n        #\n        if [[ -n $val && ${#val} -le\
    \ 2 ]]; then\n            sum=$(bc <<< \"$sum + $val\")\n        fi\n    done\n\
    \    #\n    # print out the sum\n    #\n    echo $sum", "    local k\n    k=$2\n\
    \    [[ $k -eq 0 ]] && return\n\n    while read -r num; do\n        if [[ $num\
    \ -ge 0 && $num -le 99 ]]; then\n            add_elements_helper $num\n      \
    \  fi\n        k=$(( k - 1 ))\n        [[ $k -eq 0 ]] && break\n    done <<< \"\
    $1\""]
stop_tokens:
- "\n}"
