language: sh
name: HumanEval_92_any_int
results:
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# any_int(5,\
    \ 2, 7) \u279E True\n# any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E\
    \ True\n# any_int(3.6, -2.2, 2) \u279E False\n#\n# $1 is a floating point\n# $2\
    \ is a floating point\n# $3 is a floating point\nany_int() {\n    if (( $(bc <<<\
    \ \"$1 == $2 + $3\") )) && [[ $1 =~ ^[+-]?[0-9]+$ ]] && [[ $2 =~ ^[+-]?[0-9]+$\
    \ ]] && [[ $3 =~ ^[+-]?[0-9]+$ ]]; then\n        echo \"True\"\n    elif (( $(bc\
    \ <<< \"$2 == $1 + $3\") )) && [[ $1 =~ ^[+-]?[0-9]+$ ]] && [[ $2 =~ ^[+-]?[0-9]+$\
    \ ]] && [[ $3 =~ ^[+-]?[0-9]+$ ]]; then\n        echo \"True\"\n    elif (( $(bc\
    \ <<< \"$3 == $1 + $2\") )) && [[ $1 =~ ^[+-]?[0-9]+$ ]] && [[ $2 =~ ^[+-]?[0-9]+$\
    \ ]] && [[ $3 =~ ^[+-]?[0-9]+$ ]]; then\n        echo \"True\"\n    else\n   \
    \     echo \"False\"\n    fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[\
    \ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\"\
    \ \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"\
    2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[\
    \ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"\
    4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020447
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# any_int(5,\
    \ 2, 7) \u279E True\n# any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E\
    \ True\n# any_int(3.6, -2.2, 2) \u279E False\n#\n# $1 is a floating point\n# $2\
    \ is a floating point\n# $3 is a floating point\nany_int() {\n  test $(echo \"\
    $1 + $2 + $3\" | bc | awk '{ print int($1) }') = $(echo \"$1 + $2 + $3\" | bc\
    \ | awk '{ print $1 }')\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"\
    2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") =\
    \ \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020447
- exit_code: 2
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# any_int(5,\
    \ 2, 7) \u279E True\n# any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E\
    \ True\n# any_int(3.6, -2.2, 2) \u279E False\n#\n# $1 is a floating point\n# $2\
    \ is a floating point\n# $3 is a floating point\nany_int() {\n  if [[ $1 -eq $2\
    \ + $3 ]] || [[ $2 -eq $1 + $3 ]] || [[ $3 -eq $1 + $2 ]]; then\n    echo \"True\"\
    \n  else\n    echo \"False\"\n  fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"\
    1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"\
    false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"\
    2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[\
    \ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"\
    4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpuya9mz2g.sh: line 15: syntax error in conditional expression

    /tmp/tmpuya9mz2g.sh: line 15: syntax error near `+''

    /tmp/tmpuya9mz2g.sh: line 15: `  if [[ $1 -eq $2 + $3 ]] || [[ $2 -eq $1 + $3
    ]] || [[ $3 -eq $1 + $2 ]]; then''

    '
  stdout: ''
  timestamp: 1660020447
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# any_int(5,\
    \ 2, 7) \u279E True\n# any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E\
    \ True\n# any_int(3.6, -2.2, 2) \u279E False\n#\n# $1 is a floating point\n# $2\
    \ is a floating point\n# $3 is a floating point\nany_int() {\n  if [ \"$1\" =\
    \ \"0\" ] || [ \"$2\" = \"0\" ] || [ \"$3\" = \"0\" ]; then\n    isZero=true\n\
    \  else\n    isZero=false\n  fi\n  if $isZero; then\n    if [ -z \"$(echo \"$1\"\
    \ | awk 'index($0, \".\")')\" ] && [ -z \"$(echo \"$2\" | awk 'index($0, \".\"\
    )')\" ] && [ -z \"$(echo \"$3\" | awk 'index($0, \".\")')\" ]; then\n      echo\
    \ \"true\"\n    else\n      echo \"false\"\n    fi\n  else\n    if [ -z \"$(echo\
    \ \"$1\" | awk 'index($0, \".\")')\" ] && [ -z \"$(echo \"$2\" | awk 'index($0,\
    \ \".\")')\" ] && [ -z \"$(echo \"$3\" | awk 'index($0, \".\")')\" ]; then\n \
    \     if [ $1 -eq $(($2 + $3)) ] || [ $2 -eq $(($1 + $3)) ] || [ $3 -eq $(($1\
    \ + $2)) ]; then\n        echo \"true\"\n      else\n        echo \"false\"\n\
    \      fi\n    else\n      echo \"false\"\n    fi\n  fi\n}\n\ncandidate() {\n\
    \    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n\
    \    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"\
    true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[\
    \ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n\
    \    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020447
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# any_int(5,\
    \ 2, 7) \u279E True\n# any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E\
    \ True\n# any_int(3.6, -2.2, 2) \u279E False\n#\n# $1 is a floating point\n# $2\
    \ is a floating point\n# $3 is a floating point\nany_int() {\n  if [ $1 -eq $2\
    \ + $3 ] || [ $2 -eq $1 + $3 ] || [ $3 -eq $1 + $2 ]; then\n    echo true\n  else\n\
    \    echo false\n  fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"\
    2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") =\
    \ \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpoky6jqap.sh: line 15: [: too many arguments

    /tmp/tmpoky6jqap.sh: line 15: [: too many arguments

    /tmp/tmpoky6jqap.sh: line 15: [: too many arguments

    '
  stdout: ''
  timestamp: 1660020447
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# any_int(5,\
    \ 2, 7) \u279E True\n# any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E\
    \ True\n# any_int(3.6, -2.2, 2) \u279E False\n#\n# $1 is a floating point\n# $2\
    \ is a floating point\n# $3 is a floating point\nany_int() {\n  if [ $# -ne 3\
    \ ]; then\n    echo \"Number of parameters should be 3\"\n    return 1\n  fi\n\
    \  if [ $1 -eq $2 ]; then\n    return 0\n  elif [ $1 -eq $3 ]; then\n    return\
    \ 0\n  elif [ $2 -eq $3 ]; then\n    return 0\n  else\n    return 1\n  fi\n}\n\
    \ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n   \
    \ [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"\
    2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"\
    true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020447
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# any_int(5,\
    \ 2, 7) \u279E True\n# any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E\
    \ True\n# any_int(3.6, -2.2, 2) \u279E False\n#\n# $1 is a floating point\n# $2\
    \ is a floating point\n# $3 is a floating point\nany_int() {\n  if [[ \"$1\" -eq\
    \ \"$(( $2 + $3 ))\" ]] || [[ \"$2\" -eq \"$(( $1 + $3 ))\" ]] || [[ \"$3\" -eq\
    \ \"$(( $1 + $2 ))\" ]]; then\n    echo \"True\"\n  else\n    echo \"False\"\n\
    \  fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\"\
    \ \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"\
    false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020447
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# any_int(5,\
    \ 2, 7) \u279E True\n# any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E\
    \ True\n# any_int(3.6, -2.2, 2) \u279E False\n#\n# $1 is a floating point\n# $2\
    \ is a floating point\n# $3 is a floating point\nany_int() {\n    echo -n \"Function\
    \ in action: \"\n    if (( $1+$2==$3 || $1+$3==$2 || $2+$3==$1 )) && [ $(($1+$2+$3))\
    \ == $(($1+$2+$3)) ]\n    then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"\
    2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") =\
    \ \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020447
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# any_int(5,\
    \ 2, 7) \u279E True\n# any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E\
    \ True\n# any_int(3.6, -2.2, 2) \u279E False\n#\n# $1 is a floating point\n# $2\
    \ is a floating point\n# $3 is a floating point\nany_int() {\n    if [[ $1 =~\
    \ ^[0-9]+$ ]] && [[ $2 =~ ^[0-9]+$ ]] && [[ $3 =~ ^[0-9]+$ ]]; then\n        if\
    \ [ $1 -eq $2 + $3 ] || [ $2 -eq $1 + $3 ] || [ $3 -eq $1 + $2 ]; then\n     \
    \       echo \"True\"\n        else\n            echo \"False\"\n        fi\n\
    \    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    any_int \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\"\
    \ \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpwxupmo7_.sh: line 16: [: too many arguments

    /tmp/tmpwxupmo7_.sh: line 16: [: too many arguments

    /tmp/tmpwxupmo7_.sh: line 16: [: too many arguments

    '
  stdout: ''
  timestamp: 1660020447
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# any_int(5,\
    \ 2, 7) \u279E True\n# any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E\
    \ True\n# any_int(3.6, -2.2, 2) \u279E False\n#\n# $1 is a floating point\n# $2\
    \ is a floating point\n# $3 is a floating point\nany_int() {\n  if [[ \"$1\" =~\
    \ ^[-+]?[0-9]+\\.?[0-9]*$ ]] && [[ \"$2\" =~ ^[-+]?[0-9]+\\.?[0-9]*$ ]] && [[\
    \ \"$3\" =~ ^[-+]?[0-9]+\\.?[0-9]*$ ]]; then\n    if [ $1 -eq $(($2 + $3)) ] ||\
    \ [ $2 -eq $(($1 + $3)) ] || [ $3 -eq $(($1 + $2)) ]; then\n      echo \"True\"\
    \n    else\n      echo \"False\"\n    fi\n  else\n    echo \"False\"\n  fi\n}\n\
    \ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n   \
    \ [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"\
    2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"\
    true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020447
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# any_int(5,\
    \ 2, 7) \u279E True\n# any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E\
    \ True\n# any_int(3.6, -2.2, 2) \u279E False\n#\n# $1 is a floating point\n# $2\
    \ is a floating point\n# $3 is a floating point\nany_int() {\n    if [[ \"$1\"\
    \ =~ ^[0-9]+$ ]] && [[ \"$2\" =~ ^[0-9]+$ ]] && [[ \"$3\" =~ ^[0-9]+$ ]]; then\n\
    \        if [ \"$1\" -eq \"$2\" ] || [ \"$1\" -eq \"$3\" ] || [ \"$2\" -eq \"\
    $3\" ]; then\n            if [ $1 -eq $(($2 + $3)) ] || [ $2 -eq $(($1 + $3))\
    \ ] || [ $3 -eq $(($1 + $2)) ]; then\n                echo true\n            else\n\
    \                echo false\n            fi\n        else\n            echo false\n\
    \        fi\n    else\n        echo false\n    fi\n}\n\ncandidate() {\n    any_int\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\"\
    \ \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020447
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# any_int(5,\
    \ 2, 7) \u279E True\n# any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E\
    \ True\n# any_int(3.6, -2.2, 2) \u279E False\n#\n# $1 is a floating point\n# $2\
    \ is a floating point\n# $3 is a floating point\nany_int() {\n  if [ $1 -eq $2\
    \ ]; then\n    if [ $3 -eq 0 ]; then\n      echo true\n    else\n      echo false\n\
    \    fi\n  elif [ $1 -eq $3 ]; then\n    if [ $2 -eq 0 ]; then\n      echo true\n\
    \    else\n      echo false\n    fi\n  elif [ $2 -eq $3 ]; then\n    if [ $1 -eq\
    \ 0 ]; then\n      echo true\n    else\n      echo false\n    fi\n  else\n   \
    \ echo false\n  fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"\
    2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") =\
    \ \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020447
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# any_int(5,\
    \ 2, 7) \u279E True\n# any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E\
    \ True\n# any_int(3.6, -2.2, 2) \u279E False\n#\n# $1 is a floating point\n# $2\
    \ is a floating point\n# $3 is a floating point\nany_int() {\n  if [ $(echo \"\
    $1\" | grep -oE '[0-9]+') ] &&\n     [ $(echo \"$2\" | grep -oE '[0-9]+') ] &&\n\
    \     [ $(echo \"$3\" | grep -oE '[0-9]+') ]; then\n    if [ $(bc <<< \"$1 ==\
    \ $2 + $3\") -eq 1 ] ||\n       [ $(bc <<< \"$2 == $1 + $3\") -eq 1 ] ||\n   \
    \    [ $(bc <<< \"$3 == $1 + $2\") -eq 1 ]; then\n      echo true\n    else\n\
    \      echo false\n    fi\n  else\n    echo false\n  fi\n}\n\ncandidate() {\n\
    \    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n\
    \    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"\
    true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[\
    \ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n\
    \    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: '/tmp/tmp2jvw7bje.sh: line 15: [: 2: unary operator expected

    /tmp/tmp2jvw7bje.sh: line 15: [: 1: unary operator expected

    /tmp/tmp2jvw7bje.sh: line 15: [: 2: unary operator expected

    /tmp/tmp2jvw7bje.sh: line 15: [: 3: unary operator expected

    '
  stdout: ''
  timestamp: 1660020447
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# any_int(5,\
    \ 2, 7) \u279E True\n# any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E\
    \ True\n# any_int(3.6, -2.2, 2) \u279E False\n#\n# $1 is a floating point\n# $2\
    \ is a floating point\n# $3 is a floating point\nany_int() {\n  # check if $1\
    \ is an integer (if it is not a floating point)\n  if [[ $1 =~ ^-?[0-9]+$ ]];\
    \ then\n    # check if $2 is an integer (if it is not a floating point)\n    if\
    \ [[ $2 =~ ^-?[0-9]+$ ]]; then\n      # check if $3 is an integer (if it is not\
    \ a floating point)\n      if [[ $3 =~ ^-?[0-9]+$ ]]; then\n        # check if\
    \ $1 is equal to the sum of $2 and $3\n        if [[ $1 -eq $2+$3 ]]; then\n \
    \         # $1 is equal to the sum of $2 and $3\n          return 0 # true\n \
    \       fi\n        # check if $2 is equal to the sum of $1 and $3\n        if\
    \ [[ $2 -eq $1+$3 ]]; then\n          # $2 is equal to the sum of $1 and $3\n\
    \          return 0 # true\n        fi\n        # check if $3 is equal to the\
    \ sum of $1 and $2\n        if [[ $3 -eq $1+$2 ]]; then\n          # $3 is equal\
    \ to the sum of $1 and $2\n          return 0 # true\n        fi\n      fi\n \
    \   fi\n  fi\n  # $1, $2, and $3 are not all integers or the sums are not equal\n\
    \  return 1 # false\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"\
    2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") =\
    \ \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020447
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# any_int(5,\
    \ 2, 7) \u279E True\n# any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E\
    \ True\n# any_int(3.6, -2.2, 2) \u279E False\n#\n# $1 is a floating point\n# $2\
    \ is a floating point\n# $3 is a floating point\nany_int() {\n\tlocal result=0\n\
    \tif [ -z \"$1\" ]; then\n\t\techo \"Need 3 arguments\"\n\t\treturn 1\n\tfi\n\t\
    if [ -z \"$2\" ]; then\n\t\techo \"Need 3 arguments\"\n\t\treturn 1\n\tfi\n\t\
    if [ -z \"$3\" ]; then\n\t\techo \"Need 3 arguments\"\n\t\treturn 1\n\tfi\n\t\
    if [ $(( $1+0 )) -eq $1 ] 2>/dev/null; then\n\t\tresult=$(( result+1 ))\n\tfi\n\
    \tif [ $(( $2+0 )) -eq $2 ] 2>/dev/null; then\n\t\tresult=$(( result+1 ))\n\t\
    fi\n\tif [ $(( $3+0 )) -eq $3 ] 2>/dev/null; then\n\t\tresult=$(( result+1 ))\n\
    \tfi\n\tif [ $result -ne 3 ]; then\n\t\techo \"All 3 arguments need to be whole\
    \ numbers\"\n\t\treturn 1\n\tfi\n\tif [ $1 -eq $(( $2+$3 )) ]; then\n\t\techo\
    \ \"True\"\n\t\treturn 0\n\tfi\n\tif [ $2 -eq $(( $1+$3 )) ]; then\n\t\techo \"\
    True\"\n\t\treturn 0\n\tfi\n\tif [ $3 -eq $(( $1+$2 )) ]; then\n\t\techo \"True\"\
    \n\t\treturn 0\n\tfi\n\techo \"False\"\n\treturn 0\n}\n\ncandidate() {\n    any_int\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\"\
    \ \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020447
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# any_int(5,\
    \ 2, 7) \u279E True\n# any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E\
    \ True\n# any_int(3.6, -2.2, 2) \u279E False\n#\n# $1 is a floating point\n# $2\
    \ is a floating point\n# $3 is a floating point\nany_int() {\n   if [[ \"$1\"\
    \ =~ ^-?[0-9]+$ ]] && [[ \"$2\" =~ ^-?[0-9]+$ ]] && [[ \"$3\" =~ ^-?[0-9]+$ ]];\
    \ then\n      if [[ $(($1 + $2)) -eq $3 ]] || [[ $(($1 + $3)) -eq $2 ]] || [[\
    \ $(($2 + $3)) -eq $1 ]]; then\n         echo true\n      else\n         echo\
    \ false\n      fi\n   else\n      echo false\n   fi\n}\n\ncandidate() {\n    any_int\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\"\
    \ \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020447
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# any_int(5,\
    \ 2, 7) \u279E True\n# any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E\
    \ True\n# any_int(3.6, -2.2, 2) \u279E False\n#\n# $1 is a floating point\n# $2\
    \ is a floating point\n# $3 is a floating point\nany_int() {\n    # int_sum=\n\
    \    # real_sum=\n    if [ $1 -eq 0 ] 2>/dev/null; then\n        int_sum=$(( $2\
    \ + $3 ))\n        real_sum=$(bc <<< \"scale=2; $2 + $3\")\n    elif [ $2 -eq\
    \ 0 ] 2>/dev/null; then\n        int_sum=$(( $1 + $3 ))\n        real_sum=$(bc\
    \ <<< \"scale=2; $1 + $3\")\n    elif [ $3 -eq 0 ] 2>/dev/null; then\n       \
    \ int_sum=$(( $1 + $2 ))\n        real_sum=$(bc <<< \"scale=2; $1 + $2\")\n  \
    \  fi\n    if [ \"$int_sum\" -eq \"$real_sum\" ]; then\n        echo True\n  \
    \  else\n        echo False\n    fi\n}\n\ncandidate() {\n    any_int \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"\
    1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"\
    false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"\
    2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[\
    \ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"\
    4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp4rxv21ao.sh: line 27: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660020447
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# any_int(5,\
    \ 2, 7) \u279E True\n# any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E\
    \ True\n# any_int(3.6, -2.2, 2) \u279E False\n#\n# $1 is a floating point\n# $2\
    \ is a floating point\n# $3 is a floating point\nany_int() {\n  (( $(echo \"$1\
    \ + $2 == $3\" | bc -l) )) || (( $(echo \"$2 + $3 == $1\" | bc -l) )) || (( $(echo\
    \ \"$1 + $3 == $2\" | bc -l) ))\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n  \
    \  [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\"\
    \ \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"\
    2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[\
    \ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"\
    4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020447
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# any_int(5,\
    \ 2, 7) \u279E True\n# any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E\
    \ True\n# any_int(3.6, -2.2, 2) \u279E False\n#\n# $1 is a floating point\n# $2\
    \ is a floating point\n# $3 is a floating point\nany_int() {\n    # create bool\
    \ conditions\n    bool_a=$(( $1 + $2 == $3 ))\n    bool_b=$(( $1 + $3 == $2 ))\n\
    \    bool_c=$(( $2 + $3 == $1 ))\n    bool_d=$(( $1 == $2 ))\n    bool_e=$(( $1\
    \ == $3 ))\n    bool_f=$(( $2 == $3 ))\n    # update condition to include integer\
    \ check\n    bool_a=$(($bool_a && $1 - $1 == 0 && $2 - $2 == 0 && $3 - $3 == 0))\n\
    \    bool_b=$(($bool_b && $1 - $1 == 0 && $2 - $2 == 0 && $3 - $3 == 0))\n   \
    \ bool_c=$(($bool_c && $1 - $1 == 0 && $2 - $2 == 0 && $3 - $3 == 0))\n    bool_d=$(($bool_d\
    \ && $1 - $1 == 0 && $2 - $2 == 0 && $3 - $3 == 0))\n    bool_e=$(($bool_e &&\
    \ $1 - $1 == 0 && $2 - $2 == 0 && $3 - $3 == 0))\n    bool_f=$(($bool_f && $1\
    \ - $1 == 0 && $2 - $2 == 0 && $3 - $3 == 0))\n    # return condition\n    if\
    \ [[ \"$bool_a\" = \"1\" ]] || [[ \"$bool_b\" = \"1\" ]] || [[ \"$bool_c\" = \"\
    1\" ]] || [[ \"$bool_d\" = \"1\" ]] || [[ \"$bool_e\" = \"1\" ]] || [[ \"$bool_f\"\
    \ = \"1\" ]]; then\n        echo \"True\"\n    else\n        echo \"False\"\n\
    \    fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\"\
    \ \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"\
    false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020447
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# any_int(5,\
    \ 2, 7) \u279E True\n# any_int(3, 2, 2) \u279E False\n# any_int(3, -2, 1) \u279E\
    \ True\n# any_int(3.6, -2.2, 2) \u279E False\n#\n# $1 is a floating point\n# $2\
    \ is a floating point\n# $3 is a floating point\nany_int() {\n  if (( $(echo \"\
    $1 + $2\" | bc) == $3 ))\n  then\n    echo \"true\"\n  elif (( $(echo \"$1 + $3\"\
    \ | bc) == $2 ))\n  then\n    echo \"true\"\n  elif (( $(echo \"$2 + $3\" | bc)\
    \ == $1 ))\n  then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\n\
    candidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n   \
    \ [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"\
    2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"\
    true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: '/tmp/tmprf2pwwoa.sh: line 15: ((: 4.5 == 3 : syntax error: invalid arithmetic
    operator (error token is ".5 == 3 ")

    /tmp/tmprf2pwwoa.sh: line 18: ((: 5.5 == 2 : syntax error: invalid arithmetic
    operator (error token is ".5 == 2 ")

    /tmp/tmprf2pwwoa.sh: line 21: ((: 5 == 2.5 : syntax error: invalid arithmetic
    operator (error token is ".5 ")

    /tmp/tmprf2pwwoa.sh: line 15: ((: 6.5 == 3.5 : syntax error: invalid arithmetic
    operator (error token is ".5 == 3.5 ")

    /tmp/tmprf2pwwoa.sh: line 18: ((: 5.0 == 5 : syntax error: invalid arithmetic
    operator (error token is ".0 == 5 ")

    /tmp/tmprf2pwwoa.sh: line 21: ((: 8.5 == 1.5 : syntax error: invalid arithmetic
    operator (error token is ".5 == 1.5 ")

    /tmp/tmprf2pwwoa.sh: line 15: ((: 4.4 == 2.2 : syntax error: invalid arithmetic
    operator (error token is ".4 == 2.2 ")

    /tmp/tmprf2pwwoa.sh: line 18: ((: 4.4 == 2.2 : syntax error: invalid arithmetic
    operator (error token is ".4 == 2.2 ")

    /tmp/tmprf2pwwoa.sh: line 21: ((: 4.4 == 2.2 : syntax error: invalid arithmetic
    operator (error token is ".4 == 2.2 ")

    /tmp/tmprf2pwwoa.sh: line 15: ((: 7.0 == 7 : syntax error: invalid arithmetic
    operator (error token is ".0 == 7 ")

    /tmp/tmprf2pwwoa.sh: line 18: ((: 10.0 == 4 : syntax error: invalid arithmetic
    operator (error token is ".0 == 4 ")

    /tmp/tmprf2pwwoa.sh: line 21: ((: 11 == 3.0 : syntax error: invalid arithmetic
    operator (error token is ".0 ")

    '
  stdout: ''
  timestamp: 1660020447
