name: HumanEval_153_Strongest_Extension
language: sh
prompt: "#!/bin/bash\n# You will be given the name of a class (a string) and a list\
  \ of extensions.\n# The extensions are to be used to load additional classes to\
  \ the class. The\n# strength of the extension is as follows: Let CAP be the number\
  \ of the uppercase\n# letters in the extension's name, and let SM be the number\
  \ of lowercase letters \n# in the extension's name, the strength is given by the\
  \ fraction CAP - SM. \n# You should find the strongest extension and return a string\
  \ in this \n# format: ClassName.StrongestExtensionName.\n# If there are two or more\
  \ extensions with the same strength, you should\n# choose the one that comes first\
  \ in the list.\n# For example, if you are given \"Slices\" as the class and a list\
  \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
  # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
  \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class', ['AA',\
  \ 'Be', 'CC']) == 'my_class.AA'\n#\n# $1 is a string\n# $2 is a space-separated\
  \ list\nStrongest_Extension() {\n"
tests: "}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
  \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
  \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
  Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00\
  \ NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\"\
  \ \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123\
  \ 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123\
  \ WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\"\
  \ \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb\
  \ 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\"\
  \ ]]\n}\n\nrun_test"
completions: ["  local IFS=''\n  local class=${1}\n  local extensions=(${2})\n  local\
    \ strongest=0\n  local best_extension=''\n  local -i score\n  for extension in\
    \ \"${extensions[@]}\"; do\n    score=$( echo \"${extension}\" | sed -r 's/[^A-Z]//g'\
    \ | wc -c )\n    score=${score}- $( echo \"${extension}\" | sed -r 's/[^a-z]//g'\
    \ | wc -c )\n    if (( score > strongest )); then\n      strongest=${score}\n\
    \      best_extension=${extension}\n    fi\n  done\n  echo \"${class}.${best_extension}\"",
  "    local class=$1\n    shift\n    local extensions=($*)\n    local strength=0\n\
    \    local strongest=${extensions[0]}\n    for e in ${extensions[@]}; do\n   \
    \     local cap=$( echo $e | grep -o [A-Z] | wc -l )\n        local sm=$( echo\
    \ $e | grep -o [a-z] | wc -l )\n        local strength_e=$(( $cap - $sm ))\n \
    \       if [[ $strength_e -gt $strength ]]; then\n            strongest=$e\n \
    \           strength=$strength_e\n        fi\n    done\n    echo \"$class.$strongest\"",
  "    local name=$1\n    local extensions=($2)\n    local strongest_strength=0\n\
    \    local strongest_extension=''\n    local strength=0\n    for extension in\
    \ \"${extensions[@]}\"; do\n        strength=$(echo \"$extension\" | sed -r 's/[a-z]//g'\
    \ | wc -c)\n        strength=$((strength - $(echo \"$extension\" | sed -r 's/[A-Z]//g'\
    \ | wc -c)))\n        if (($strength > $strongest_strength)); then\n         \
    \   strongest_strength=$strength\n            strongest_extension=$extension\n\
    \        fi\n    done\n    echo \"$name.$strongest_extension\"", "    local my_class=\"\
    $1\"\n    local extensions=\"$2\"\n    local strongest_extension strength\n  \
    \  strength=0\n    for extension in $extensions; do\n        [[ \"$extension\"\
    \ =~ [A-Z] ]] && caps=$((caps+${#BASH_REMATCH[0]}))\n        [[ \"$extension\"\
    \ =~ [a-z] ]] && smalls=$((smalls+${#BASH_REMATCH[0]}))\n        local ext_strength=$((caps-smalls))\n\
    \        if [[ $ext_strength -gt $strength ]]; then\n            strongest_extension=\"\
    $extension\"\n            strength=$ext_strength\n        fi\n    done\n    echo\
    \ \"$my_class.$strongest_extension\"", "\techo \"Not implemented yet\"", "   \
    \ local -i strength=0 strength2=0 N=0 M=0\n    local strongest=() class=${1//\
    \ /_}\n    for extension in $2; do\n        extension=${extension// /_}\n    \
    \    N=${#extension}\n        while [[ $N -gt 0 ]]; do\n            if [[ ${extension:N-1:1}\
    \ =~ [A-Z] ]]; then\n                ((strength+=1))\n            elif [[ ${extension:N-1:1}\
    \ =~ [a-z] ]]; then\n                ((strength-=1))\n            fi\n       \
    \     ((N-=1))\n        done\n        if [[ $strength -gt $strength2 ]]; then\n\
    \            strength2=$strength\n            strongest=$extension\n        fi\n\
    \        strength=0\n    done\n    echo \"$class.$strongest\"", "    local _clss=$1;\
    \ shift\n    local -a _extn=($*)\n    local -i _str=$#\n    local -i _strg=${#_extn[0]}\n\
    \    local -i _cnt\n    for(( _cnt=0; _cnt<_str; _cnt++ )) {\n        local -i\
    \ _len=${#_extn[$_cnt]}\n        local -i _cap=`echo ${_extn[$_cnt]} | sed -e\
    \ 's/[^A-Z]//g' | wc -c`\n        local -i _sm=`echo ${_extn[$_cnt]} | sed -e\
    \ 's/[^a-z]//g' | wc -c`\n        [ $_cap -eq 0 ] && _cap=1\n        if [ $((\
    \ _cap - _sm )) -lt $_strg ]; then\n            _strg=$(( _cap - _sm ))\n    \
    \        _str=$_cnt\n        fi\n    }\n    echo \"$_clss.${_extn[$_str]}\"",
  "  local str=$1\n  local arr=( $2 )\n  local i_min=1\n  local i_max=${#arr[@]}\n\
    \  local i_now=1\n  local val_min=1\n  local val_now=1\n  local result=\"$str.${arr[0]}\"\
    \n  while [ $i_now -lt $i_max ]; do\n    val_now=$(($(tr -d -c '[:upper:]' <<<\
    \ ${arr[$i_now]})-$(tr -d -c '[:lower:]' <<< ${arr[$i_now]})))\n    if [ $val_now\
    \ -lt $val_min ]; then\n      val_min=$val_now\n      i_min=$i_now\n      result=\"\
    $str.${arr[$i_now]}\"\n    fi\n    (( i_now++ ))\n  done\n  echo $result", " \
    \ # Enter your code here\n  class_name=$1\n  declare -a exts=($2)\n  for ext in\
    \ ${exts[@]}; do\n    caps_num=$(echo $ext | grep -o \"[A-Z]\" | wc -l)\n    smalls_num=$(echo\
    \ $ext | grep -o \"[a-z]\" | wc -l)\n    strengths[$ext]=$(echo \"scale=3; $caps_num\
    \ / $smalls_num\" | bc)\n  done\n  output=\"$class_name.${!strengths[@]}\"\n \
    \ echo $output", "    IFS=' ' read -r -a arr <<< \"$2\"\n    max_strength=0\n\
    \    max_strength_index=0\n    for (( i=0; i<${#arr[@]}; i++ )); do\n        strength=$(echo\
    \ ${arr[$i]} | grep -io [[:upper:]] | tr -d '\\n' | wc -m)\n        strength=$((\
    \ $strength - $(echo ${arr[$i]} | grep -io [[:lower:]] | tr -d '\\n' | wc -m)\
    \ ))\n        if [[ $strength -gt $max_strength ]]; then\n            max_strength=$strength\n\
    \            max_strength_index=$i\n        fi\n    done\n    echo \"$1.${arr[$max_strength_index]}\"",
  "    strength=\"0\"\n    ext=\"$1\"\n    class=$(echo \"$1\" | cut -d'.' -f1)\n\
    \    shift\n    for i in \"$@\"; do\n        a=\"$(echo \"$i\" | tr '[:lower:]'\
    \ '[:upper:]' | tr -d -c '[:upper:]')\"\n        b=\"$(echo \"$i\" | tr -d -c\
    \ '[:lower:]')\"\n        strength=\"$(echo \"${#a}-${#b}\" | bc)\"\n        if\
    \ [[ \"$strength\" -ge \"0\" ]]; then\n            continue\n        fi\n    \
    \    if [[ \"$strength\" -lt \"$(echo \"$class$ext\" | tr '[:lower:]' '[:upper:]'\
    \ | tr -d -c '[:upper:]')\" ]]; then\n            ext=\"$i\"\n        fi\n   \
    \ done\n    echo \"$class.$ext\"", '    # write your code here', "  STR=$1\n \
    \ EXT=$2\n  S=0\n  C=0\n  echo \"$EXT\" |\n  while read SEXT\n  do\n    CAP=$(echo\
    \ $SEXT | tr -cd '[[:upper:]]' | wc -c)\n    SM=$(echo $SEXT | tr -cd '[[:lower:]]'\
    \ | wc -c)\n    let S_0=CAP-SM\n    if [[ $S_0 -ge $S ]]\n    then\n      S=$S_0\n\
    \      C=$SEXT\n    fi\n  done\n  echo \"$STR.$C\"", "  LC=\"${1,,}\"\n  UPPER=\"\
    ${1^^}\"\n  EXTENSIONS=$2\n  IFS=' ' read -ra LIST <<< \"$EXTENSIONS\"\n\n  STRENGTH=0\n\
    \  STRONGEST=\"$LC\"\n  for i in \"${LIST[@]}\"; do\n    IFS=' ' read -ra EXT\
    \ <<< \"$i\"\n    CAP=$(echo \"${EXT^^}\" | tr -cd '[:upper:]' | wc -c)\n    SM=$(echo\
    \ \"${EXT,,}\" | tr -cd '[:lower:]' | wc -c)\n    DIFF=$(echo \"$CAP-$SM\" | bc)\n\
    \    if [ \"$DIFF\" -gt \"$STRENGTH\" ]; then\n      STRENGTH=$DIFF\n      STRONGEST=\"\
    $i\"\n    fi\n  done\n  echo \"$LC.$STRONGEST\"", "    # The actual name of the\
    \ class\n    local class=\"$1\"\n    # The list of extensions\n    local -a extensions=(\"\
    $2\")\n    # The strongest strength (fraction of uppercase letters - lowercase\
    \ letters)\n    local maxstrength=0\n    # The name of the strongest extension\n\
    \    local extension_name=\n    # Loop through the extensions array.\n    for\
    \ extension in \"${extensions[@]}\"; do\n        # Get the strength of this extension\n\
    \        local strength=$(Strength $extension)\n        # If the strength is stronger\
    \ than the current max\n        if (( $strength > $maxstrength )); then\n    \
    \        # Set the new max strength and remember the name\n            maxstrength=$strength\n\
    \            extension_name=$extension\n        fi\n    done\n    # Return the\
    \ result in the requested format\n    echo $class.$extension_name", "  local class=\"\
    $1\"\n  local extensions=\"$2\"\n  echo \"$extensions\" | awk '\n  BEGIN { FS=\"\
    \ \"; class=\"'$class'\"; } \n  { \n    for (i=1; i<=NF; i++) {\n      gsub(/[a-z]/,\
    \ \"\", $i); \n      ext=$i;\n      gsub(/[A-Z]/, \"\", $i); \n      strength=length(ext)-length($i);\n\
    \      if (strength>max) { \n        max=strength; \n        extName=ext; \n \
    \     }\n    }\n  }\n  END { print class\".\"extName; }'", "    local class=$1;\
    \ shift\n    local -a ext=($*)\n    local strongest_ext=${ext[0]}\n    local strongest_ext_strength=0\n\
    \n    for i in ${ext[@]}; do\n        local upcase_num=$(grep -o '[A-Z]' <<< \"\
    $i\" | wc -l)\n        local lowcase_num=$(grep -o '[a-z]' <<< \"$i\" | wc -l)\n\
    \        local current_strength=$(echo \"scale=2; $upcase_num - $lowcase_num\"\
    \ | bc)\n        if [[ $current_strength -gt $strongest_ext_strength ]]; then\n\
    \            strongest_ext=$i\n            strongest_ext_strength=$current_strength\n\
    \        fi\n    done\n\n    echo \"$class.$strongest_ext\"", "  local max_strength=-1\n\
    \  local class=$1\n  local strongest_extension=''\n  local strength=0\n  shift\n\
    \  for ext in $@\n  do\n    strength=$(($(tr -d -c '[:upper:]' <<<\"$ext\") -\
    \ $(tr -d -c '[:lower:]' <<<\"$ext\")))\n    if [[ $strength -gt $max_strength\
    \ ]]\n    then\n      max_strength=$strength\n      strongest_extension=$ext\n\
    \    fi\n  done\n  echo \"$class.$strongest_extension\"", "  local -r class=\"\
    $1\"\n  shift 1\n  local -r extensions=(\"$@\")\n  local -r exts_in_lowercase=$(echo\
    \ \"${extensions[@]}\" | tr '[:upper:]' '[:lower:]')\n  local -r caps_in_exts=$(echo\
    \ \"${extensions[@]}\" | sed -E 's/([a-z]|\\.)//g')\n  local -r sm_in_exts=$(echo\
    \ \"${exts_in_lowercase[@]}\" | sed -E 's/([A-Z]|\\.)//g')\n  local caps_sum=0\n\
    \  local sm_sum=0\n  local ratios=()\n  local max_ratio=0\n  local -r max_index=$((${#extensions[@]}\
    \ - 1))\n  local -r current_indices=($(seq 0 ${max_index}))\n  local strongest_ext=\"\
    \"\n  for i in ${!extensions[@]}; do\n    let caps_sum+=$(echo \"${caps_in_exts[i]}\"\
    \ | tr -cd 'A-Z' | wc -c)\n    let sm_sum+=$(echo \"${sm_in_exts[i]}\" | tr -cd\
    \ 'a-z' | wc -c)\n    ratios[i]=$(echo \"scale=2;${caps_sum}/${sm_sum}\" | bc)\n\
    \  done\n  max_ratio=${ratios[0]}\n  strongest_ext=${extensions[0]}\n  for i in\
    \ \"${current_indices[@]}\"; do\n    if (( $(echo \"${ratios[i]}>${max_ratio}\"\
    \ | bc -l) )); then\n      max_ratio=${ratios[i]}\n      strongest_ext=${extensions[i]}\n\
    \    fi\n  done\n  echo \"${class}.${strongest_ext}\"", "  # Create a value variable\
    \ to put the result in\n  value=''\n  # Create a variable to store the strength\
    \ of the value\n  strength=0\n  # Loop through all of the passed arguments after\
    \ $1\n  for arg in \"${@:2}\"\n  do\n    # If the strength of this argument is\
    \ greater than the current value\n    if [[ $(Strength $arg) -gt $strength ]]\n\
    \    then\n      # Save the strength of this argument to the strength variable\n\
    \      strength=$(Strength $arg)\n      # Set value to this argument\n      value=$arg\n\
    \    fi\n  done\n  # Echo the result in ClassName.StrongestExtensionName format\n\
    \  echo \"$1.$value\""]
stop_tokens:
- "\n}"
