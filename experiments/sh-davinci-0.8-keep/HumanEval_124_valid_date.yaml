name: HumanEval_124_valid_date
language: sh
prompt: "#!/bin/bash\n# You have to write a function which validates a given date\
  \ string and\n# returns True if the date is valid otherwise False.\n# The date is\
  \ valid if all of the following rules are satisfied:\n# 1. The date string is not\
  \ empty.\n# 2. The number of days is not less than 1 or higher than 31 days for\
  \ months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than\
  \ 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
  \ than 29 for the month 2.\n# 3. The months should not be less than 1 or higher\
  \ than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n# for example: \n\
  # valid_date('03-11-2000') => True\n# valid_date('15-01-2012') => False\n# valid_date('04-0-2040')\
  \ => False\n# valid_date('06-04-2020') => True\n# valid_date('06/04/2020') => False\n\
  #\n# $1 is a string\nvalid_date() {\n"
tests: "}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n   \
  \ [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
  ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
  \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n\
  \    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
  false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate\
  \ \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\"\
  \ ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\"\
  ) = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate\
  \ \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n\
  \    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
completions: ["    # add your code here\n    declare -a months=(0 31 29 31 30 31 30\
    \ 31 31 30 31 30 31)\n    declare -a month_names=(\"NAN\" \"January\" \"February\"\
    \ \"March\" \"April\" \"May\" \"June\" \"July\" \"August\" \"September\" \"October\"\
    \ \"November\" \"December\")\n    declare date=\"$1\"\n    declare month_str=\"\
    ${date:0:2}\"\n    declare day_str=\"${date:3:2}\"\n    declare year_str=\"${date:6:4}\"\
    \n    declare month=\"${month_str:0:1}${month_str:1:1}\"\n    declare day=\"${day_str:0:1}${day_str:1:1}\"\
    \n    declare year=\"${year_str:0:1}${year_str:1:1}${year_str:2:1}${year_str:3:1}\"\
    \n    declare fmt=\"${date:2:1}\"\n    declare res=true\n    declare is_leap=false\n\
    \    if [ \"$date\" == \"\" ]; then\n        res=false\n    fi\n    if [ \"$year\"\
    \ -lt 1 ] || [ \"$year\" -gt 9999 ]; then\n        res=false\n    fi\n    if [\
    \ \"$fmt\" != \"-\" ]; then\n        res=false\n    fi\n    if [ \"$month\" -lt\
    \ 1 ] || [ \"$month\" -gt 12 ]; then\n        res=false\n    fi\n    if [ \"$month\"\
    \ -eq 2 ]; then\n        if [ \"$(($year % 4))\" -eq 0 ]; then\n            if\
    \ [ \"$(($year % 100))\" -eq 0 ]; then\n                if [ \"$(($year % 400))\"\
    \ -eq 0 ]; then\n                    is_leap=true\n                fi\n      \
    \      else\n                is_leap=true\n            fi\n        fi\n    fi\n\
    \    if [ \"$is_leap\" == \"true\" ] && [ \"$day\" -gt 29 ]; then\n        res=false\n\
    \    fi\n    if [ \"$is_leap\" == \"false\" ] && [ \"$day\" -gt ${months[$month]}\
    \ ]; then\n        res=false\n    fi\n    echo \"${res}\"", "\tif [[ $1 =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\
    \ ]]; then\n\t\treturn 0\n\telse\n\t\treturn 1\n\tfi", "  local date=$1\n  [[\
    \ $date =~ ^(0[1-9]|1[0-2])-([0-2][0-9]|3[0-1])-([0-9]{4})$ ]] &&\n  if [[ ${BASH_REMATCH[1]}\
    \ -eq 2 ]]; then\n    (( ${BASH_REMATCH[3]} % 4 == 0 && ${BASH_REMATCH[3]} % 100\
    \ != 0 || ${BASH_REMATCH[3]} % 400 == 0 )) &&\n    (( ${BASH_REMATCH[2]} <= 29\
    \ ))\n  else\n    (( ${BASH_REMATCH[2]} <= ((${BASH_REMATCH[1]} % 2) + 28) ))\n\
    \  fi", "    VALID_DATE=$(echo \"$1\" | egrep -q '^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$';\
    \ echo $?)\n    case \"$VALID_DATE\" in\n        0)\n            echo \"True\"\
    \n            ;;\n        1)\n            echo \"False\"\n            ;;\n   \
    \ esac", '  date -d "$1" +"%F" > /dev/null 2>&1', "    if [[ $1 =~ ^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-20[0-9]{2}$\
    \ ]]; then\n        m=$(echo $1 | cut -d'-' -f1)\n        d=$(echo $1 | cut -d'-'\
    \ -f2)\n        y=$(echo $1 | cut -d'-' -f3)\n        if [ $m -eq 1 ] || [ $m\
    \ -eq 3 ] || [ $m -eq 5 ] || [ $m -eq 7 ] || [ $m -eq 8 ] || [ $m -eq 10 ] ||\
    \ [ $m -eq 12 ]; then\n            if [ $d -gt 31 ] || [ $d -lt 1 ]; then\n  \
    \              echo \"False\"\n            else\n                echo \"True\"\
    \n            fi\n        elif [ $m -eq 4 ] || [ $m -eq 6 ] || [ $m -eq 9 ] ||\
    \ [ $m -eq 11 ]; then\n            if [ $d -gt 30 ] || [ $d -lt 1 ]; then\n  \
    \              echo \"False\"\n            else\n                echo \"True\"\
    \n            fi\n        elif [ $m -eq 2 ]; then\n            if [ $d -gt 29\
    \ ] || [ $d -lt 1 ]; then\n                echo \"False\"\n            else\n\
    \                echo \"True\"\n            fi\n        else\n            echo\
    \ \"False\"\n        fi\n    else\n        echo \"False\"\n    fi", "    # Your\
    \ code here\n    # For example:\n    # echo \"True\"\n    # echo \"False\"", "\t\
    local month=$(echo $1 | cut -d'-' -f1)\n\tlocal day=$(echo $1 | cut -d'-' -f2)\n\
    \tlocal year=$(echo $1 | cut -d'-' -f3)\n\t#check for empty string\n\tif [ $#\
    \ -eq 0 ]; then\n\t\treturn 1\n\tfi\n\t#check for correct number of days in each\
    \ month\n\tif [ $month -eq 1 ] || [ $month -eq 3 ] || [ $month -eq 5 ] || [ $month\
    \ -eq 7 ] || [ $month -eq 8 ] || [ $month -eq 10 ] || [ $month -eq 12 ]; then\n\
    \t\tif [ $day -lt 1 ] || [ $day -gt 31 ]; then\n\t\t\treturn 1\n\t\tfi\n\telif\
    \ [ $month -eq 4 ] || [ $month -eq 6 ] || [ $month -eq 9 ] || [ $month -eq 11\
    \ ]; then\n\t\tif [ $day -lt 1 ] || [ $day -gt 30 ]; then\n\t\t\treturn 1\n\t\t\
    fi\n\telif [ $month -eq 2 ]; then\n\t\tif [ $day -lt 1 ] || [ $day -gt 29 ]; then\n\
    \t\t\treturn 1\n\t\tfi\n\tfi\n\t#check for valid months\n\tif [ $month -lt 1 ]\
    \ || [ $month -gt 12 ]; then\n\t\treturn 1\n\tfi\n\t#check for correct format\n\
    \tif [ \"$1\" != \"${month}-${day}-${year}\" ]; then\n\t\treturn 1\n\tfi\n\treturn\
    \ 0", "  #if [[ -z \"$1\" ]]; then echo False; return; fi;\n  if ! [[ \"$1\" =~\
    \ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$ ]]; then echo False; return; fi;\n  months=(31\
    \ 31 28 31 30 31 30 31 31 30 31 30 31)\n  month=\"$(echo \"$1\" | cut -f1 -d\"\
    -\")\"\n  month=$((month + 0))\n  day=\"$(echo \"$1\" | cut -f2 -d\"-\")\"\n \
    \ day=$((day + 0))\n  year=\"$(echo \"$1\" | cut -f3 -d\"-\")\"\n  year=$((year\
    \ + 0))\n  if [[ $month -lt 1 || $month -gt 12 ]]; then echo False; return; fi;\n\
    \  if [[ \"$month\" == 2 ]]; then\n    if [[ $((year % 4)) -eq 0 ]]; then\n  \
    \    if [[ $day -lt 1 || $day -gt 29 ]]; then echo False; return; fi;\n    else\n\
    \      if [[ $day -lt 1 || $day -gt 28 ]]; then echo False; return; fi;\n    fi;\n\
    \  else\n    if [[ $day -lt 1 || $day -gt ${months[$month]} ]]; then echo False;\
    \ return; fi;\n  fi;\n  echo True", "    # echo \"$1\"\n    if [[ $1 =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\
    \ ]]; then\n\t# echo \"match\"\n\tdate -d \"$1\" > /dev/null 2>&1 && echo \"True\"\
    \ || echo \"False\"\n    else\n\techo \"False\"\n    fi", "    if [ -z \"$1\"\
    \ ]; then\n        echo \"False\"\n        return\n    fi\n    ddmmyyyy=(${1//-/\
    \ })\n    if [ ${#ddmmyyyy[@]} -ne 3 ]; then\n        echo \"False\"\n       \
    \ return\n    fi\n    mm=${ddmmyyyy[0]}\n    dd=${ddmmyyyy[1]}\n    yyyy=${ddmmyyyy[2]}\n\
    \    if [ $mm -lt 1 ] || [ $mm -gt 12 ]; then\n        echo \"False\"\n      \
    \  return\n    fi\n    if [[ $mm =~ 3|5|7|8|10|12 ]]; then\n        max_day=31\n\
    \    elif [[ $mm =~ 4|6|9|11 ]]; then\n        max_day=30\n    else\n        if\
    \ (( yyyy % 4 == 0 && yyyy % 100 != 0 )) || (( yyyy % 400 == 0 )); then\n    \
    \        max_day=29\n        else\n            max_day=28\n        fi\n    fi\n\
    \    if [ $dd -lt 1 ] || [ $dd -gt $max_day ]; then\n        echo \"False\"\n\
    \        return\n    fi\n    echo \"True\"", "  # your code\n  if [[ \"$#\" -ne\
    \ 1 ]]; then\n    echo \"One string argument is required\"\n    return 1\n  fi\n\
    \  local regex=\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\n  if\
    \ [[ $1 =~ $regex ]]; then\n    local year=${1:6:4}\n    local month=${1:0:2}\n\
    \    local day=${1:3:2}\n    if [[ $(($year % 4)) -eq 0 ]]; then\n      if [[\
    \ $month -eq 2 ]]; then\n        if [[ $day -eq 29 ]]; then\n          return\
    \ 0\n        else\n          return 1\n        fi\n      fi\n    fi\n    if [[\
    \ $month -eq 1 || $month -eq 3 || $month -eq 5 || $month -eq 7 || $month -eq 8\
    \ || $month -eq 10 || $month -eq 12 ]]; then\n      if [[ $day -le 31 ]]; then\n\
    \        return 0\n      else\n        return 1\n      fi\n    elif [[ $month\
    \ -eq 4 || $month -eq 6 || $month -eq 9 || $month -eq 11 ]]; then\n      if [[\
    \ $day -le 30 ]]; then\n        return 0\n      else\n        return 1\n     \
    \ fi\n    else\n      return 1\n    fi\n  else\n    return 1\n  fi", "  local\
    \ date=$1\n  local date_regex='^((0[1-9])|(1[0-2]))-((0[1-9])|([1-2][0-9])|(3[0-1]))-([0-9]{4})$'\n\
    \  if [[ $date =~ $date_regex ]]; then\n    local month=${BASH_REMATCH[1]}\n \
    \   local day=${BASH_REMATCH[4]}\n    local year=${BASH_REMATCH[7]}\n    local\
    \ max_days=0\n    if [[ $month == 01 || $month == 03 || $month == 05 || $month\
    \ == 07 || $month == 08 || $month == 10 || $month == 12 ]]; then\n      max_days=31\n\
    \    elif [[ $month == 04 || $month == 06 || $month == 09 || $month == 11 ]];\
    \ then\n      max_days=30\n    elif [[ $month == 02 ]]; then\n      if [[ $year%4\
    \ -eq 0 && ($year%100 -ne 0 || $year%400 -eq 0) ]]; then\n        max_days=29\n\
    \      else\n        max_days=28\n      fi\n    fi\n    if [[ $day -gt 0 && $day\
    \ -le $max_days ]]; then\n      echo True\n    else\n      echo False\n    fi\n\
    \  else\n    echo False\n  fi", "\tdate=$1\n\tmonth=${date:0:2}\n\tday=${date:3:2}\n\
    \tyear=${date:6:4}\n\tif [[ ${date:2:1} != \"-\" || ${date:5:1} != \"-\" ]]; then\n\
    \t\treturn 1\n\tfi\n\tif [[ ${date:0:2} -lt 1 || ${date:0:2} -gt 12 ]]; then\n\
    \t\treturn 1\n\tfi\n\tif [[ ${date:0:2} == 1 || ${date:0:2} == 3 || ${date:0:2}\
    \ == 5 || ${date:0:2} == 7 || ${date:0:2} == 8 || ${date:0:2} == 10 || ${date:0:2}\
    \ == 12 ]]; then\n\t\tif [[ ${date:3:2} -lt 1 || ${date:3:2} -gt 31 ]]; then\n\
    \t\t\treturn 1\n\t\tfi\n\tfi\n\tif [[ ${date:0:2} == 4 || ${date:0:2} == 6 ||\
    \ ${date:0:2} == 9 || ${date:0:2} == 11 ]]; then\n\t\tif [[ ${date:3:2} -lt 1\
    \ || ${date:3:2} -gt 30 ]]; then\n\t\t\treturn 1\n\t\tfi\n\tfi\n\tif [[ ${date:0:2}\
    \ == 2 ]]; then\n\t\tif [[ ${date:3:2} -lt 1 || ${date:3:2} -gt 29 ]]; then\n\t\
    \t\treturn 1\n\t\tfi\n\tfi\n\treturn 0", "  if [[ $1 =~ ^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-[0-9]{4}$\
    \ ]]; then\n    case ${BASH_REMATCH[1]} in\n      1|3|5|7|8|10|12)\n        [[\
    \ ${BASH_REMATCH[2]} -le 31 ]] && echo \"True\" || echo \"False\"\n        ;;\n\
    \      4|6|9|11)\n        [[ ${BASH_REMATCH[2]} -le 30 ]] && echo \"True\" ||\
    \ echo \"False\"\n        ;;\n      2)\n        [[ ${BASH_REMATCH[2]} -le 29 ]]\
    \ && echo \"True\" || echo \"False\"\n        ;;\n    esac\n  else\n    echo \"\
    False\"\n  fi", "    format=\"[0-9]{2}-[0-9]{2}-[0-9]{4}\"\n    if [[ $1 =~ $format\
    \ ]]; then\n        mm=${1:0:2}\n        dd=${1:3:2}\n        yyyy=${1:6:4}\n\
    \        if [ $mm -eq 1 ] || [ $mm -eq 3 ] || [ $mm -eq 5 ] || [ $mm -eq 7 ] ||\
    \ [ $mm -eq 8 ] || [ $mm -eq 10 ] || [ $mm -eq 12 ]; then\n            echo $dd\n\
    \            if [ $dd -lt 1 ] || [ $dd -gt 31 ]; then\n                return\
    \ 1\n            fi\n        elif [ $mm -eq 4 ] || [ $mm -eq 6 ] || [ $mm -eq\
    \ 9 ] || [ $mm -eq 11 ]; then\n            if [ $dd -lt 1 ] || [ $dd -gt 30 ];\
    \ then\n                return 1\n            fi\n        elif [ $mm -eq 2 ];\
    \ then\n            if [ $dd -lt 1 ] || [ $dd -gt 29 ]; then\n               \
    \ return 1\n            fi\n        fi\n        if [ $mm -lt 1 ] || [ $mm -gt\
    \ 12 ]; then\n            return 1\n        fi\n        return 0\n    else\n \
    \       return 1\n    fi", "  # return True or False\n  # write your code here\n\
    \n  string=$1\n  # array=(${string//[^0-9]/ })\n  # array=(${string//[^0-9\\-]/\
    \ })\n  array=(${string//[^0-9\\/]/ })\n  len=${#array[@]}\n  # echo $len\n  if\
    \ [ $len -ne 3 ]; then\n    return False\n  fi\n\n  month=${array[0]}\n  day=${array[1]}\n\
    \  year=${array[2]}\n\n  # echo $month\n  # echo $day\n  # echo $year\n\n  if\
    \ [ $month -le 0 -o $month -gt 12 ]; then\n    return False\n  fi\n\n  if [ $day\
    \ -le 0 ]; then\n    return False\n  fi\n\n  if [ $month -eq 1 -o $month -eq 3\
    \ -o $month -eq 5 -o $month -eq 7 -o $month -eq 8 -o $month -eq 10 -o $month -eq\
    \ 12 ]; then\n    if [ $day -gt 31 ]; then\n      return False\n    fi\n  elif\
    \ [ $month -eq 4 -o $month -eq 6 -o $month -eq 9 -o $month -eq 11 ]; then\n  \
    \  if [ $day -gt 30 ]; then\n      return False\n    fi\n  elif [ $month -eq 2\
    \ ]; then\n    if [ $day -gt 29 ]; then\n      return False\n    fi\n  fi\n\n\
    \  if [ ${#year} -ne 4 ]; then\n    return False\n  fi\n\n  return True\n", " \
    \   [[ $1 =~ ^([0-1][0-9]|2[0-9]|3[0-1])-(0[1-9]|1[0-2])-[0-9]{4}$ ]] && {\n \
    \       month=${BASH_REMATCH[2]}\n        day=${BASH_REMATCH[1]}\n        if ((\
    \ month==1 || month==3 || month==5 || month==7 || month==8 || month==10 || month==12\
    \ )); then\n            (( day <= 31 ))\n        elif (( month==4 || month==6\
    \ || month==9 || month==11 )); then\n            (( day <= 30 ))\n        elif\
    \ (( month==2 )); then\n            (( day <= 29 ))\n        else\n          \
    \  false\n        fi\n    }", '  [[ $1 =~ ^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-([0-9]{4})$
    ]] && date -d "$1" +%F > /dev/null', '  echo "Not implemented"']
stop_tokens:
- "\n}"
