language: sh
name: HumanEval_158_find_max
results:
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# find_max([\"name\"\
    , \"of\", \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"\
    ]) == \"enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n#\n\
    # $1 is a space-separated list\nfind_max() {\n    max_len=0\n    max_str=\"\"\n\
    \    for s in $1\n    do\n        len=$(echo -n $s | tr -d -c 'a-zA-Z' | wc -c)\n\
    \        if [ $len -gt $max_len ]\n        then\n            max_len=$len\n  \
    \          max_str=$s\n        fi\n    done\n    echo $max_str\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020325
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# find_max([\"name\"\
    , \"of\", \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"\
    ]) == \"enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n#\n\
    # $1 is a space-separated list\nfind_max() {\n    maxlen=0\n    maxword=\"\"\n\
    \    for word in $1\n    do\n        # Extract unique characters from each word\
    \ and count its length\n        wordlen=`echo $word | tr -cd \"[:alpha:]\" | wc\
    \ -c`\n        if [ $wordlen -gt $maxlen ]\n        then\n            maxlen=$wordlen\n\
    \            maxword=$word\n        fi\n    done\n    echo $maxword\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020325
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# find_max([\"name\"\
    , \"of\", \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"\
    ]) == \"enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n#\n\
    # $1 is a space-separated list\nfind_max() {\n    local max=\"\"\n    local maxlen=0\n\
    \    local len\n    local -A chars\n    local c\n\n    for w in $1; do\n     \
    \   chars=()\n        len=0\n        for ((i=0; i<${#w}; i++)); do\n         \
    \   c=${w:$i:1}\n            if [[ -z ${chars[$c]} ]]; then\n                chars[$c]=1\n\
    \                ((len++))\n            fi\n        done\n        if [[ $len -gt\
    \ $maxlen ]]; then\n            max=$w\n            maxlen=$len\n        fi\n\
    \    done\n    echo $max\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020325
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# find_max([\"name\"\
    , \"of\", \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"\
    ]) == \"enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n#\n\
    # $1 is a space-separated list\nfind_max() {\n    max=\"\"\n    for arg in $1;\
    \ do\n        size=$(echo $arg | tr -cd '\\n' | wc -c)\n        if [ -z \"$max\"\
    \ ] || [ $size -gt $max_size ]; then\n            max=$arg\n            max_size=$size\n\
    \        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    find_max \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020325
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# find_max([\"name\"\
    , \"of\", \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"\
    ]) == \"enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n#\n\
    # $1 is a space-separated list\nfind_max() {\n    local max unique_char_count\
    \ new_unique_char_count max_word max_len\n    for word in $1\n    do\n       \
    \ unique_char_count=$(echo $word | xargs -n1 | sort -u | tr -d '\\n')\n      \
    \  new_unique_char_count=${#unique_char_count}\n        if [[ $new_unique_char_count\
    \ -gt $max ]]\n        then\n            max=$new_unique_char_count\n        \
    \    max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020325
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# find_max([\"name\"\
    , \"of\", \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"\
    ]) == \"enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n#\n\
    # $1 is a space-separated list\nfind_max() {\n    local max_string=\n    local\
    \ max_num=0\n    local unique_chars\n    local current_num\n    for string in\
    \ $1\n    do\n        unique_chars=`echo $string | grep -o . | sort | uniq | tr\
    \ -d '\\n'`\n        current_num=`echo -n $unique_chars | wc -c`\n        if [\
    \ $current_num -gt $max_num ]\n        then\n            max_num=$current_num\n\
    \            max_string=$string\n        fi\n    done\n    echo $max_string\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020325
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# find_max([\"name\"\
    , \"of\", \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"\
    ]) == \"enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n#\n\
    # $1 is a space-separated list\nfind_max() {\n\t# Sort the list in lexicographical\
    \ order\n\t# -u uniq to remove duplicate entries\n\t# -c to show the count\n\t\
    # -r sort in reverse order\n\t# -k2 2 is the field to sort\n\t# -t to use character\
    \ as the delimiter\n\t# -n to sort in numeric order\n\t# head -1 to take the first\
    \ line\n\t# cut -f1 -d' ' to take the first field delimited by a space.\n\tsorted=$(\
    \ echo \"$1\" | sort -r | uniq -c | sort -r -k2 -t' ' | head -1 | cut -f1 -d'\
    \ ' )\n\techo $sorted\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020325
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# find_max([\"name\"\
    , \"of\", \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"\
    ]) == \"enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n#\n\
    # $1 is a space-separated list\nfind_max() {\n    if (( \"$#\" == 0 )); then\n\
    \        echo \"\"\n        return\n    fi\n    local max=1\n    local max_string=\"\
    $1\"\n    local len=0\n    local unique=0\n    local word\n    for word in \"\
    $@\"; do\n        (( len = ${#word} ))\n        unique=$(echo \"$word\" | fold\
    \ -w1 | sort -u | wc -l)\n        if (( unique > max )); then\n            max=$unique\n\
    \            max_string=\"$word\"\n        elif (( unique == max )); then\n  \
    \          if [[ \"$word\" < \"$max_string\" ]]; then\n                max_string=\"\
    $word\"\n            fi\n        fi\n    done\n    echo \"$max_string\"\n}\n\n\
    candidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020325
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# find_max([\"name\"\
    , \"of\", \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"\
    ]) == \"enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n#\n\
    # $1 is a space-separated list\nfind_max() {\n  max_value=0\n  for word in $@;\
    \ do\n    num_unique_characters=0\n    for char in $(echo \"$word\" | grep -o\
    \ .); do\n      echo \"$word\" | grep -q \"$char\" && num_unique_characters=$((num_unique_characters\
    \ + 1))\n    done\n    [ $num_unique_characters -gt $max_value ] && max_value=$num_unique_characters\n\
    \  done\n  echo \"The max number of unique characters is: $max_value\"\n}\n\n\
    candidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020325
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# find_max([\"name\"\
    , \"of\", \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"\
    ]) == \"enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n#\n\
    # $1 is a space-separated list\nfind_max() {\n    max_word=\"\"\n    max_chars=\"\
    \"\n    for word in $1; do\n        # get the unique characters for this word\n\
    \        chars=`echo $word | fold -w1 | sort -u | tr -d '\\n'`\n        #echo\
    \ \"word: $word, chars: $chars\"\n        # if this is the first word, set it\
    \ as max\n        if [ -z \"$max_word\" ]; then\n            max_word=$word\n\
    \            max_chars=$chars\n        else\n            # if there are more chars,\
    \ this is the new max\n            if [ ${#chars} -gt ${#max_chars} ]; then\n\
    \                max_word=$word\n                max_chars=$chars\n          \
    \  # if there are the same number of chars and the lexicographical\n         \
    \   # order is after the current word, it's the new max\n            elif [ ${#chars}\
    \ -eq ${#max_chars} ] && [ \"$chars\" \\> \"$max_chars\" ]; then\n           \
    \     max_word=$word\n                max_chars=$chars\n            fi\n     \
    \   fi\n    done\n    echo $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020325
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# find_max([\"name\"\
    , \"of\", \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"\
    ]) == \"enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n#\n\
    # $1 is a space-separated list\nfind_max() {\n    max_len=0\n    max_word=\"\"\
    \n    for word in $@; do\n        # Create a list with the unique characters in\
    \ the word and count the elements\n        count=$(echo \"$word\" | fold -w1 |\
    \ sort -u | wc -l)\n        # If the count is greater than the current max, set\
    \ it to the new max and\n        # set the word to max_word\n        if [[ $count\
    \ -gt $max_len ]]; then\n            max_len=$count\n            max_word=$word\n\
    \        # If the word has the same number of unique characters as the current\
    \ max,\n        # compare the words alphabetically and set max_word to the first\
    \ word\n        elif [[ $count -eq $max_len ]]; then\n            if [[ $word\
    \ < $max_word ]]; then\n                max_word=$word\n            fi\n     \
    \   fi\n    done\n    echo $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020325
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# find_max([\"name\"\
    , \"of\", \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"\
    ]) == \"enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n#\n\
    # $1 is a space-separated list\nfind_max() {\n    max_u=0\n    max_w=\"\"\n  \
    \  for word in $1; do\n        len_u=`echo $word | grep -o . | sort | uniq | wc\
    \ -c`\n        if [[ $len_u -gt $max_u ]]; then\n            max_u=$len_u\n  \
    \          max_w=$word\n        fi\n    done\n    echo $max_w\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020325
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# find_max([\"name\"\
    , \"of\", \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"\
    ]) == \"enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n#\n\
    # $1 is a space-separated list\nfind_max() {\n  # Sort so that list items are\
    \ in alphabetical order\n  local sorted=\"$(for i in $1; do echo $i; done | sort)\"\
    \n  echo \"$sorted\"\n  echo \"-----------\"\n  echo \"$(for i in $sorted; do\
    \ echo $i $(tr -d -c [:alpha:] <<< $i | fold -w1 | sort | uniq | wc -l); done\
    \ | sort -nk2 -t' ' | tail -n1 | cut -d' ' -f1)\"\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020325
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# find_max([\"name\"\
    , \"of\", \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"\
    ]) == \"enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n#\n\
    # $1 is a space-separated list\nfind_max() {\n    local w\n    for w in $1; do\n\
    \        if [ -z $w ]; then\n            continue\n        fi\n        if [ -z\
    \ $max ]; then\n            max=$w\n            continue\n        fi\n       \
    \ if [[ $(echo -n $w | grep -o . | sort | uniq | wc -l) -gt $(echo -n $max | grep\
    \ -o . | sort | uniq | wc -l) ]]; then\n            max=$w\n        fi\n    done\n\
    \    echo $max\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020325
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# find_max([\"name\"\
    , \"of\", \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"\
    ]) == \"enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n#\n\
    # $1 is a space-separated list\nfind_max() {\n    # 1. If the string is only 1\
    \ letter, it has the max unique characters\n    # 2. If the string is longer than\
    \ 1, we'll find the unique characters\n    # 3. If the string is longer than 1,\
    \ we'll find the unique characters\n    #    and count them and compare them to\
    \ the current max\n    # 4. If it's higher than the current max, we set the current\
    \ max to\n    #    the string and set the current count to the one we just found\n\
    \    # 5. Rinse and repeat\n    # 6. Return the max string if found\n    # 7.\
    \ Return \"\" if not found\n\n    cur_max=\"\"\n    cur_count=0\n    max_count=0\n\
    \n    for word in $1; do\n        cur_count=`echo \"$word\" | sed -e 's/\\(.\\\
    )/\\1\\n/g' | sort | uniq | wc -l`\n        if [ $cur_count -gt $max_count ];\
    \ then\n            max_count=$cur_count\n            cur_max=$word\n        fi\n\
    \    done\n\n    if [ $max_count -gt 0 ]; then\n        echo $cur_max\n    else\n\
    \        echo \"\"\n    fi\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n \
    \   [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020325
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# find_max([\"name\"\
    , \"of\", \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"\
    ]) == \"enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n#\n\
    # $1 is a space-separated list\nfind_max() {\n  all_words=$(echo $1 | tr ' ' '\\\
    n')\n  max_word=\"\"\n  max_len=0\n  for w in $all_words; do\n    len=`echo $w\
    \ | fold -w1 | sort | uniq | wc -l`\n    if [ $len -gt $max_len ]; then\n    \
    \  max_len=$len\n      max_word=$w\n    fi\n  done\n  echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020325
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# find_max([\"name\"\
    , \"of\", \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"\
    ]) == \"enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n#\n\
    # $1 is a space-separated list\nfind_max() {\n  local list_of_words\n  list_of_words=$1\n\
    \  local max_uniq=\"\"\n  local max_count=0\n  for word in $list_of_words; do\n\
    \    count=0\n    for (( i=0; i<${#word}; i++ )); do\n      for (( j=0; j<${#word};\
    \ j++ )); do\n        if [[ ${word:$i:1} == ${word:$j:1} ]]; then\n          count=$((\
    \ count + 1 ))\n        fi\n      done\n    done\n    if [[ $count -gt $max_count\
    \ ]]; then\n      max_count=$count\n      max_uniq=$word\n    fi\n  done\n  echo\
    \ $max_uniq\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020325
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# find_max([\"name\"\
    , \"of\", \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"\
    ]) == \"enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n#\n\
    # $1 is a space-separated list\nfind_max() {\n  local max=\"\"\n  local max_chars=\"\
    \"\n  for word in $1\n  do\n    chars=\"$(echo \"$word\" | fold -w1 | sort | uniq\
    \ | tr -d \"\\n\")\"\n    if [ -z \"$max\" ]\n    then\n      max=\"$word\"\n\
    \      max_chars=\"$chars\"\n    else\n      if [ ${#chars} -gt ${#max_chars}\
    \ ]\n      then\n        max=\"$word\"\n        max_chars=\"$chars\"\n      fi\n\
    \    fi\n  done\n  echo \"$max\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020325
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# find_max([\"name\"\
    , \"of\", \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"\
    ]) == \"enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n#\n\
    # $1 is a space-separated list\nfind_max() {\n    # Using grep, sed, tr and awk\n\
    \    # unique_chars=$(echo \"$1\" | tr ' ' '\\n' | sed -e 's/\\(.\\)/\\1\\n/g'\
    \ | awk '{freq[$0]++} END {for (c in freq) {print c, freq[c]}}' | grep -v '[0-9]'\
    \ | sort -t ' ' -k2 -nr | head -n 1 | cut -d ' ' -f1)\n    # max_occurrences=$(echo\
    \ \"$1\" | tr ' ' '\\n' | sed -e 's/\\(.\\)/\\1\\n/g' | awk '{freq[$0]++} END\
    \ {for (c in freq) {print c, freq[c]}}' | grep -v '[0-9]' | sort -t ' ' -k2 -nr\
    \ | head -n 1 | cut -d ' ' -f2)\n    # echo \"$1\" | tr ' ' '\\n' | grep -e \"\
    .\\{$unique_chars\\}\" | grep -m 1 \".\\{$max_occurrences\\}\"\n    # Using only\
    \ bash\n    # First separate the words into an array\n    words=($1)\n    # Now\
    \ iterate over each word\n    i=0\n    while [ $i -lt ${#words[@]} ]; do\n   \
    \     word=${words[$i]}\n        # For each word, iterate over each character\n\
    \        j=0\n        while [ $j -lt ${#word} ]; do\n            char=${word:$j:1}\n\
    \            # If a character is not present in the unique_chars variable\n  \
    \          # append it\n            if ! echo \"$unique_chars\" | grep -q \"$char\"\
    ; then\n                unique_chars+=\"$char\"\n            fi\n            j=$((j+1))\n\
    \        done\n        # If unique_chars has more characters, reset max_occurrences\
    \ and the\n        # max_word to the current word's\n        if [ \"${#unique_chars}\"\
    \ -gt \"$max_occurrences\" ]; then\n            max_occurrences=${#unique_\n}\n\
    \ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpio6wxlhv.sh: line 59: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660020325
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# find_max([\"name\"\
    , \"of\", \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"\
    ]) == \"enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n#\n\
    # $1 is a space-separated list\nfind_max() {\n   echo $1\n   echo \"#######\"\n\
    \   echo $2\n   echo \"#######\"\n   local L=$2\n   local MAX=0\n   local MAX_WORD=\"\
    \"\n   for WORD in $L; do\n      echo $WORD\n      echo \"#######\"\n      local\
    \ LEN=$(tr -dc '\\n' <<<\"$WORD\" | wc -l)\n      if [ $LEN -gt $MAX ]; then\n\
    \         MAX=$LEN\n         MAX_WORD=$WORD\n      fi\n   done\n   echo $MAX_WORD\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020325
