language: sh
name: HumanEval_47_median
results:
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\nlocal l=($@)\n#echo $l\necho \"${l[@]}\"\
    \ | tr ' ' '\\n' | sort -n | awk '{arr[NR]=$0}END{if(NR%2){print arr[(NR+1)/2]}else{i=NR/2;print\
    \ (arr[i]+arr[i+1])/2}}'\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020326
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l t n v i\n    t=`echo \"$@\"\
    \ | tr ' ' '\\n' | sort -n`\n    n=`echo \"$t\" | wc -l`\n    for (( i=1; i<=n;\
    \ i++ )); do\n        v=`echo \"$t\" | sed -n \"${i}p\"`\n        if (( i == n/2\
    \ + 1 )); then\n            echo \"$v\"\n            return\n        fi\n    done\n\
    }\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020326
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n\tlocal sort_arr=$(echo \"$1\" | tr \"\
    \ \" \"\\n\" | sort -n)\n\tlocal len=$(echo \"$sort_arr\" | wc -l)\n\tlocal mid=$((\
    \ len / 2 ))\n\tif (( len % 2 == 0 )); then\n\t\techo $(echo \"$sort_arr\" | head\
    \ -n $mid | tail -n 1)\n\telse\n\t\techo $(echo \"$sort_arr\" | head -n $mid |\
    \ tail -n 1)\n\tfi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4\
    \ 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020326
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n  l=($1)\n  n=${#l[@]}\n  if ((n == 0));\
    \ then\n    echo \"ERROR: median: empty list\"\n    return 1\n  fi\n  l=($(printf\
    \ '%s\\n' \"${l[@]}\" | sort -n))\n  echo \"${l[$((n/2))]}\"\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020326
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local sum=$(($(wc -w <<< \"$1\")\
    \ / 2))\n    echo \"$1\" | sed 's/ /\\n/g' | sort -n | head -$sum | tail -1\n\
    }\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020326
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local m=($1)\n    for ((i=0; i<${#m[@]};\
    \ i++)); do\n        m[i]=$(python -c \"print(float(${m[i]}))\")\n    done\n \
    \   m=($(for n in \"${m[@]}\"; do echo $n; done | sort -n))\n    if (( ${#m[@]}\
    \ % 2 == 1 )); then\n        (( i = ${#m[@]} / 2 ))\n        echo \"${m[$i]}\"\
    \n    else\n        (( i = ${#m[@]} / 2 - 1 ))\n        (( j = ${#m[@]} / 2 ))\n\
    \        echo $(python -c \"print(0.5 * (${m[$i]} + ${m[$j]}))\")\n    fi\n}\n\
    \ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020326
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n  local list=($1)\n\n  if [ ${#list[@]}\
    \ -eq 0 ]; then\n    echo \"No value supplied\" >&2\n    return 1\n  fi\n\n  local\
    \ s_list=$(printf \"%s\\n\" \"${list[@]}\" | sort -n)\n  local mid=${#list[@]}/2\n\
    \n  if [ $((mid * 2)) -eq ${#list[@]} ]; then\n    # Even number of elements.\n\
    \    local i=$((mid - 1))\n    echo $(((${list[i]} + ${list[i+1]})/2))\n  else\n\
    \    # Odd number of elements.\n    echo ${list[mid]}\n  fi\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020326
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=(\"$@\")\n    echo \"${l[*]}\"\
    \ | tr ' ' '\\n' | sort -n | awk ' { a[i++]=$1; } END { x=int((i+1)/2); if (x\
    \ < (i+1)/2) print (a[x-1]+a[x])/2; else print a[x-1]; }'\n}\n\ncandidate() {\n\
    \    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n  \
    \  [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020326
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local t=$(echo \"$1\" | tr ' ' '\\\
    n' | sort -n)\n    echo $t\n    echo $t | awk '{a[i++]=$1;s+=$1}END{print (s/i-a[int(i/2)]>a[int(i/2)]-s/(i+1-a[int(i/2)])?s/(i+1-a[int(i/2)]):a[int(i/2)])}'\n\
    }\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020326
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    l=($1)\n    a=($(IFS=' '; echo \"\
    ${l[*]}\" | tr ' ' '\\n' | sort -n))\n    n=${#a[@]}\n    h=$((n/2))\n    if [[\
    \ $((n%2)) -eq 0 ]]; then\n        echo \"$((${a[$h-1]}+${a[$h]}))/2\" | bc -l\n\
    \    else\n        echo \"${a[$h]}\"\n    fi\n}\n\ncandidate() {\n    median \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n\
    \    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020326
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n\tl=( $1 )\n\tt=${#l[@]}\n\tv=${l[0]}\n\
    \tfor(( i=1; i<t; i++ )); do\n\t\tv=$v\" \"${l[$i]}\n\tdone\n\techo \"$v\" | awk\
    \ '{ if (NR % 2 == 1) print $(((NR+1)/2)); else print ($(NR/2)+$((NR/2+1)))/2.0}'\n\
    }\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020326
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    if [ $# -eq 0 ]; then\n        echo\
    \ \"median(): no argument\"\n        return\n    fi\n    L=($1)\n    n=${#L[@]}\n\
    \    if [ $n -eq 1 ]; then\n        echo ${L[0]}\n        return\n    fi\n   \
    \ # echo \"L: ${L[@]}\"\n    sorted=($(printf \"%s\\n\" \"${L[@]}\" | sort -n))\n\
    \    # echo \"sorted: ${sorted[@]}\"\n    if [ $((n % 2)) -eq 1 ]; then\n    \
    \    echo ${sorted[$((n / 2))]}\n    else\n        i=$((n / 2))\n        echo\
    \ $(((sorted[i - 1] + sorted[i]) / 2))\n    fi\n}\n\ncandidate() {\n    median\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020326
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n  echo $1 | tr ' ' '\\n' | sort -n |\
    \ awk '{a[i++]=$1;\n                                         if (n%2==1)\n   \
    \                                        { print a[n/2] }\n                  \
    \                       else\n                                           { printf(\"\
    %0.1f\\n\",(a[n/2]+a[n/2-1])/2); }\n                                         }'\
    \ | head -n 1\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4\
    \ 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020326
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($1)\n    echo \"${l[@]}\"\
    \ | tr ' ' '\\n' | sort -n | head -n $(( ${#l[@]} / 2 )) | tail -n 1\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020326
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l\n    read -a l <<< \"$@\"\
    \n    for ((i=1; i<${#l[@]}; i++)); do\n        t=${l[i]}\n        j=$((i-1))\n\
    \        while ((j>=0 && l[j]>t)); do\n            l[j+1]=${l[j]}\n          \
    \  j=$((j-1))\n        done\n        l[j+1]=$t\n    done\n    echo ${l[@]}\n \
    \   local index=$(( ${#l[@]} / 2 ))\n    if (( ${#l[@]} % 2 == 0 )); then\n  \
    \      echo $(( ${l[index]} + ${l[index-1]} ))\n        echo $(( (${l[index]}\
    \ + ${l[index-1]})*1.0 / 2 ))\n    else\n        echo ${l[index]}\n    fi\n}\n\
    \ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020326
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local a=($1)\n    local t\n    for\
    \ ((i=0; i<${#a[@]}; i++)); do\n        for ((j=i; j<${#a[@]}; j++)); do\n   \
    \         if ((${a[i]} > ${a[j]})); then\n                t=${a[i]}\n        \
    \        a[i]=${a[j]}\n                a[j]=$t\n            fi\n        done\n\
    \    done\n    local m i=$((${#a[@]} / 2))\n    ((${#a[@]} % 2)) && printf '%d\\\
    n' ${a[i]} || printf '%.1f\\n' $(((${a[i]} + ${a[i-1]})/2.0))\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpuzw7y1p6.sh: line 22: (10 + 6)/2.0: syntax error: invalid arithmetic
    operator (error token is ".0")

    '
  stdout: ''
  timestamp: 1660020326
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    input=($1)\n    mid=$(( ${#input[@]}\
    \ / 2 ))\n    if (( ${#input[@]} % 2 == 0 )); then\n        median=`echo \"${input[$mid\
    \ - 1]} + ${input[$mid]}\" | bc -l`\n        median=`echo \"$median / 2\" | bc\
    \ -l`\n    else\n        median=${input[$mid]}\n    fi\n    echo $median\n}\n\n\
    candidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020326
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l m=$(echo \"$@\" | sed 's/\\\
    s\\+/\\n/g' | sort -n | sed 's/\\s\\+/\\n/g')\n    while [ $(wc -w <<< \"$m\"\
    ) -gt 2 ]; do\n        l=$m\n        m=$(echo \"$m\" | sed '1d;$d' | sed 's/\\\
    s\\+/\\n/g')\n    done\n    if [ $(wc -w <<< \"$m\") -eq 1 ]; then\n        echo\
    \ \"$m\"\n    else\n        echo \"$(($(echo \"$m\" | sed 's/\\s\\+/\\n/g' | head\
    \ -n 1) + $(echo \"$m\" | sed 's/\\s\\+/\\n/g' | tail -n 1)))/2\" | bc -l\n  \
    \  fi\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10\
    \ 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020326
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    l=($1)\n    m=${#l[@]}\n    i=$((m/2))\n\
    \    if (( $m % 2 == 1 )); then\n        echo \"${l[$i]}\"\n    else\n       \
    \ echo $((( ${l[$i-1]} + ${l[$i]} ) / 2))\n    fi\n}\n\ncandidate() {\n    median\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020326
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l=($@)\n    l.sort --inplace\
    \ \"${l[@]}\"\n    echo \"${l[*]}\"\n    echo \"${l[*]}\"\n    if (( ${#l[@]}\
    \ % 2 == 1 )); then\n        echo ${l[((${#l[@]} + 1) / 2)]}\n    else\n     \
    \   echo $(((${l[(${#l[@]} / 2)]} + ${l[((${#l[@]} / 2) - 1)]}) / 2))\n    fi\n\
    }\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmplhnmi_gc.sh: line 11: l.sort: command not found

    '
  stdout: ''
  timestamp: 1660020326
