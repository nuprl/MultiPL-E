name: HumanEval_120_maximum
language: sh
prompt: "#!/bin/bash\n# Given an array arr of integers and a positive integer k, return\
  \ a sorted list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n\
  # Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input:\
  \ arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
  \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
  \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
  \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated\
  \ list\n# $2 is an integer\nmaximum() {\n"
tests: "}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
  \ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\"\
  \ \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n\
  \    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
  \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13\
  \ -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
  \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[\
  \ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\"\
  ) = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n\
  }\n\nrun_test"
completions: ["\tarr=(\"$@\")\n\tk=$2\n\ti=0\n\tdeclare -a temp\n\twhile [ $i -lt\
    \ $k ]; do\n\t\tj=0\n\t\tmax=$((-1000-1))\n\t\twhile [ $j -lt ${#arr[@]} ]; do\n\
    \t\t\tif [ ${arr[$j]} -gt $max ]; then\n\t\t\t\tmax=${arr[$j]}\n\t\t\t\tmaxIndex=$j\n\
    \t\t\tfi\n\t\t\tj=$((j+1))\n\t\tdone\n\t\tunset arr[$maxIndex]\n\t\ttemp[$i]=$max\n\
    \t\ti=$((i+1))\n\tdone\n\techo ${temp[@]}", "    declare -a A\n    k=${2}\n  \
    \  IFS=' ' read -r -a A <<< \"${1}\"\n    echo \"arr = ${A[*]}\"\n    echo \"\
    k = ${k}\"\n    for (( i=0; i<${#A[@]}; i++ )); do\n        for (( j=i+1; j<${#A[@]};\
    \ j++ )); do\n            if [[ ${A[i]} -lt ${A[j]} ]]; then\n               \
    \ tmp=${A[i]}\n                A[i]=${A[j]}\n                A[j]=${tmp}\n   \
    \         fi\n        done\n    done\n    for (( i=0; i<${k}; i++ )); do\n   \
    \     echo -n \"${A[i]} \"\n    done\n    echo \"\"", "    local -n __x=$1\n \
    \   local -r __k=$2\n    if [[ ${#__x[@]} -lt ${__k} ]]; then\n        echo \"\
    Invalid k\" >&2\n        return 1\n    fi\n    local __i\n    for ((__i=0; __i<$__k;\
    \ __i++)); do\n        local __j\n        for ((__j=$__i+1; __j<${#__x[@]}; __j++));\
    \ do\n            if [[ ${__x[$__i]} -lt ${__x[$__j]} ]]; then\n             \
    \   local __swap=${__x[$__i]}\n                __x[$__i]=${__x[$__j]}\n      \
    \          __x[$__j]=$__swap\n            fi\n        done\n    done\n    local\
    \ __maxes=(\"${__x[@]:0:$__k}\")\n    echo \"${__maxes[@]}\"", "    local result=()\n\
    \    local i=0\n    local j=0\n    local k=0\n    local nums\n    IFS=' ' read\
    \ -ra nums <<< \"$1\"\n    local len=${#nums[@]}\n    local k=${2}\n    for ((i=0;\
    \ i<$len; i++)); do\n        for ((j=i+1; j<$len; j++)); do\n            if [[\
    \ ${nums[i]} -gt ${nums[j]} ]]; then\n                ((k=nums[i]))\n        \
    \        ((nums[i]=nums[j]))\n                ((nums[j]=k))\n            fi\n\
    \        done\n    done\n    for ((i=0; i<$k; i++)); do\n        result+=(${nums[$i]})\n\
    \    done\n    echo ${result[@]}", "    # TODO fix the case where $2 is zero\n\
    \    local arr=`echo $1 | tr ' ' '\\n' | sort -nr | head -n $2`\n    echo $arr",
  "    local arr=\"$1\"\n    local k=\"$2\"\n    local sorted arr=($(sort -rn <<<\
    \ \"${arr[*]}\"))\n    local len=${#arr[@]}\n    local result=\"\"\n    for ((i=0;\
    \ i<k; i++)); do\n        result=\"$result ${arr[$i]}\"\n    done\n    echo \"\
    $result\"", "    # make an array from the list of integers\n    declare -a arr=($1)\n\
    \    n=${#arr[@]}\n    k=$2\n    if [ $k -gt $n ]; then\n        echo \"Error:\
    \ k must be less than or equal to the length of the array\" >&2\n        return\
    \ 1\n    fi\n    if [ $k -eq $n ]; then\n        printf \"= %s\\n\" \"${arr[@]}\"\
    \n        return 0\n    fi\n    if [ $k -eq 1 ]; then\n        printf \"= %d\\\
    n\" \"${arr[@]}\"\n        return 0\n    fi\n    # get the k maximum integers\
    \ using an external program\n    max=$(printf \"%s\\n\" \"${arr[@]}\" | sort -nr\
    \ | head -n $k)\n    printf \"= %s\\n\" $max", "    local arr=$1\n    local k=$2\n\
    \    local count=1\n    local buf=''\n    local ret=''\n    for n in $arr; do\n\
    \        buf=\"$buf $n\"\n        if [ $count -ge $k ]; then\n            buf=$(echo\
    \ \"$buf\" | tr ' ' '\\n' | sort -nr | tr '\\n' ' ')\n            buf=$(echo \"\
    $buf\" | cut -d ' ' -f 1-$k)\n            count=$k\n        else\n           \
    \ count=$((count+1))\n        fi\n    done\n    if [ -n \"$buf\" ]; then\n   \
    \     ret=$(echo \"$buf\" | tr ' ' '\\n' | sort -nr | tr '\\n' ' ')\n    fi\n\
    \    echo \"$ret\"", "    local -n arr=$1\n    local k=$2\n    local -a max_array\n\
    \    local max_array_size=0\n    for i in ${arr[@]}; do\n        if [ ${#max_array[@]}\
    \ -lt $k ]; then\n            max_array+=($i)\n            max_array_size=$(($max_array_size\
    \ + 1))\n        else\n            for j in ${!max_array[@]}; do\n           \
    \     if [ $i -gt ${max_array[$j]} ]; then\n                    max_array[$j]=$i\n\
    \                    break\n                fi\n            done\n        fi\n\
    \    done\n    echo \"${max_array[@]}\"", "\t# Calculate length of $1\n\tlen=\"\
    $(echo \"$1\" | wc -w)\"\n\t# Check the length of $1\n\tif [ \"$len\" -le \"$2\"\
    \ ]; then\n\t\t# If it is smaller or equal to $2, just sort it\n\t\tres=\"$(echo\
    \ \"$1\" | sort -nr)\"\n\telse\n\t\t# Otherwise, sort it and retrieve the first\
    \ $2 elements\n\t\tres=\"$(echo \"$1\" | sort -nr | head -n $2)\"\n\tfi\n\techo\
    \ \"$res\"", "    arr=(\"$@\")\n    echo ${arr[@]} | tr ' ' '\\n' | sort -nr |\
    \ head -n $2 | tr '\\n' ' '", '    echo "$(printf "%s\n" $1 | tr " " "\n" | sort
    -nr | head -n $2 | tr "\n" " ")"', "    output=\"\"\n    for i in $1; do\n   \
    \     if [ -z \"$output\" ]; then\n            output=\"$i\"\n        elif [ $i\
    \ -gt $output ]; then\n            output=\"$i\"\n        fi\n    done\n    echo\
    \ $output", "  local array=(\"$@\")\n  local i=0\n  local j=0\n  local len=${#array[@]}\n\
    \  for ((i=0; i<len; i++)); do\n    for ((j=i+1; j<len; j++)); do\n      if ((\
    \ ${array[i]} < ${array[j]} )); then\n        tmp=${array[i]}\n        array[i]=${array[j]}\n\
    \        array[j]=$tmp\n      fi\n    done\n  done\n  for ((i=0; i<$2; i++));\
    \ do\n    echo ${array[i]}\n  done", "    local arr=$1\n    local k=$2\n    local\
    \ max\n    for n in $arr; do\n        if [ -z \"$max\" ]; then\n            max=$n\n\
    \        elif [ $n -gt $max ]; then\n            max=$n\n        fi\n    done\n\
    \    echo $max", "  local __arr=$1\n  local __k=$2\n  local __resultvar=$3\n \
    \ local array=()\n  local i\n  for i in $__arr; do\n    array+=($i)\n  done\n\
    \  if [[ \"${#array[@]}\" -gt \"$__k\" ]]; then\n    array=(\"${array[@]:0:$__k}\"\
    )\n  fi\n  while [[ \"${#array[@]}\" -ne \"$__k\" ]]; do\n    array+=($((-2**31)))\n\
    \  done\n  for ((i=1; i<${#array[@]}; i++)); do\n    local tmp=${array[$i]}\n\
    \    local j=$((i-1))\n    while [[ \"$j\" -ge 0 && \"${array[$j]}\" -lt \"$tmp\"\
    \ ]]; do\n      array[$((j+1))]=${array[$j]}\n      j=$((j-1))\n    done\n   \
    \ array[$((j+1))]=$tmp\n  done\n  array=(\"${array[@]:0:$__k}\")\n  local result=''\n\
    \  for i in \"${array[@]}\"; do\n    result+=\"$i \"\n  done\n  echo \"$result\"",
  "  local A=()\n  while read value; do\n    A+=($value)\n  done <<< $1\n  local MAX_VAL=${A[0]}\n\
    \  local MAX_INDEX=0\n  for ((i=1; i<${#A[@]}; i++)); do\n    if [[ ${A[$i]} -gt\
    \ $MAX_VAL ]]; then\n      MAX_VAL=${A[$i]}\n      MAX_INDEX=$i\n    fi\n  done\n\
    \  echo -e \"$MAX_VAL $MAX_INDEX\"", "    local IFS=$' ' arr=($1) k=$2\n    local\
    \ i j\n\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]};\
    \ j++)); do\n            if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n            \
    \    tmp=${arr[i]}\n                arr[i]=${arr[j]}\n                arr[j]=$tmp\n\
    \            fi\n        done\n    done\n\n    echo ${arr[@]:0:$k}", "    local\
    \ -n arr=$1\n    echo \"${arr[@]}\" | tr ' ' '\\n' | sort -r | head -n $2 | sort\
    \ -n", "\tlocal in=$1\n\tlocal k=$2\n\tlocal max=()\n\tlocal min=()\n\tlocal mid=()\n\
    \tlocal e\n\tlocal i\n\n\t(( k <= 0 )) && return\n\n\twhile (( ${#in} > 0 ));\
    \ do\n\t\te=${in%% *}\n\t\tin=${in#* }\n\t\tif (( ${#max} < k )); then\n\t\t\t\
    max+=($e)\n\t\t\tcontinue\n\t\tfi\n\t\tif (( ${#min} < k )); then\n\t\t\tmin+=($e)\n\
    \t\t\tcontinue\n\t\tfi\n\t\tif (( ${#mid} < k )); then\n\t\t\tmid+=($e)\n\t\t\t\
    continue\n\t\tfi\n\t\tfor (( i = 0; i < k; i++ )); do\n\t\t\tif (( e >= max[i]\
    \ )); then\n\t\t\t\tmid+=(${max[i]})\n\t\t\t\tmax[i]=$e\n\t\t\t\tbreak\n\t\t\t\
    elif (( e <= min[i] )); then\n\t\t\t\tmid+=(${min[i]})\n\t\t\t\tmin[i]=$e\n\t\t\
    \t\tbreak\n\t\t\tfi\n\t\tdone\n\t\tif (( i == k )); then\n\t\t\tfor (( i = 0;\
    \ i < k; i++ )); do\n\t\t\t\tif (( e <= max[i] )); then\n\t\t\t\t\tmid+=(${max[i]})\n\
    \t\t\t\t\tmax[i]=$e\n\t\t\t\t\tbreak\n\t\t\t\telif (( e >= min[i] )); then\n\t\
    \t\t\t\tmid+=(${min[i]})\n\t\t\t\t\tmin[i]=$e\n\t\t\t\t\tbreak\n\t\t\t\tfi\n\t\
    \t\tdone\n\t\tfi\n\tdone\n\n\tmid+=(${max[@]})\n\tmid+=(${min[@]})\n\techo ${mid[@]}\
    \ | tr ' ' '\\n' | sort -r -n | head -n$k"]
stop_tokens:
- "\n}"
