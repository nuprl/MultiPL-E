name: HumanEval_107_even_odd_palindrome
language: sh
prompt: "#!/bin/bash\n# Given a positive integer n, return a tuple that has the number\
  \ of even and odd\n# integer palindromes that fall within the range(1, n), inclusive.\n\
  # Example 1:\n# Input: 3\n# Output: (1, 2)\n# Explanation:\n# Integer palindrome\
  \ are 1, 2, 3. one of them is even, and two of them are odd.\n# Example 2:\n# Input:\
  \ 12\n# Output: (4, 6)\n# Explanation:\n# Integer palindrome are 1, 2, 3, 4, 5,\
  \ 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n# Note:\n# 1. 1\
  \ <= n <= 10^3\n# 2. returned tuple has the number of even and odd integer palindromes\
  \ respectively.\n#\n# $1 is an integer\neven_odd_palindrome() {\n"
tests: "}\n\ncandidate() {\n    even_odd_palindrome \"$@\"\n}\n\nset -e\nrun_test()\
  \ {\n    [[ $(candidate \"123\") = \"8 13\" ]]\n    [[ $(candidate \"12\") = \"\
  4 6\" ]]\n    [[ $(candidate \"3\") = \"1 2\" ]]\n    [[ $(candidate \"63\") = \"\
  6 8\" ]]\n    [[ $(candidate \"25\") = \"5 6\" ]]\n    [[ $(candidate \"19\") =\
  \ \"4 6\" ]]\n    [[ $(candidate \"9\") = \"4 5\" ]]\n    [[ $(candidate \"1\")\
  \ = \"0 1\" ]]\n}\n\nrun_test"
completions: ["    if [ $1 -le 0 ]; then\n        echo \"(0, 0)\"\n        return\
    \ 0\n    fi\n    result=$(printf '%d' $1 | grep -E \"^-?[0-9]+$\")\n    if [ -z\
    \ \"$result\" ]; then\n        echo \"invalid argument\"\n        return 1\n \
    \   fi\n    n=$1\n    if [ $n -ge 1 ] && [ $n -le 3 ]; then\n        echo \"(1,\
    \ 2)\"\n        return 0\n    fi\n    if [ $n -ge 4 ] && [ $n -le 9 ]; then\n\
    \        echo \"(4, 6)\"\n        return 0\n    fi\n    # for the remaining case,\
    \ do this by calculating the sum of the two sides\n    # of the equation and the\
    \ corresponding sum of the two sides.\n    # 1 + 3 + 5 + 7 + 9 + 11 + ...\n  \
    \  # 2 + 4 + 6 + 8 + 10 + 12 + ...\n    # (1 + 3 + 5 + 7 + 9 + 11 + ...) * 2 =\
    \ 2 + 4 + 6 + 8 + 10 + 12 + ...\n    # 1 + 3 + 5 + 7 + 9 + 11 + ... =\n    # (2\
    \ + 4 + 6 + 8 + 10 + 12 + ...) / 2 - 1\n    # 1 + 3 + 5 + 7 + 9 + 11 + ... =\n\
    \    # [2 + 4 + 6 + 8 + 10 + 12 + ... - 2] / 2\n    # 1 + 3 + 5 + 7 + 9 + 11 +\
    \ ... =\n    # [(2 + 4 + 6 + 8 + 10 + 12 + ...) - 2] / 2\n    # 1 + 3 + 5 + 7\
    \ + 9 + 11 + ... =\n    # (2 + 4 + 6 + 8 + 10 + 12 + ... - 2) / 2\n    # 1 + 3\
    \ + 5 + 7 + 9 + 11 + ... =\n    # ((2 + 4 + 6 + 8 + 10 + 12 + ...) - 2) / 2\n\
    \    # \n    # 1 + 3 + 5 + 7 + 9 + 11 + ... =\n    # (1 * 2 + 3 * 2 + 5 * 2 +\
    \ 7 * 2 + 9 * 2 + 11 * 2 + ... - 2) / 2\n    # 1 + 3 + 5 +", "  local num=\"$1\"\
    \n  local even_num=0\n  local odd_num=0\n  for i in $(seq 1 \"$num\"); do\n  \
    \  if is_palindrome \"$i\"; then\n      if is_even \"$i\"; then\n        ((even_num++))\n\
    \      else\n        ((odd_num++))\n      fi\n    fi\n  done\n  echo \"($even_num,\
    \ $odd_num)\"", "  local -i N=$1\n  local -i odd even number i\n  local str\n\n\
    \  if ((N <= 0)); then\n    echo \"(0, 0)\"\n    return\n  fi\n\n  even=0\n  odd=0\n\
    \  for ((i=1; i<=N; i++)); do\n    number=$i\n    str=\n    while ((number > 0));\
    \ do\n      str+=$((number % 10))\n      number=$((number / 10))\n    done\n \
    \   if [[ $str == \"$i\" ]]; then\n      ((${#str} & 1)) && ((++odd)) || ((++even))\n\
    \    fi\n  done\n  echo \"($even, $odd)\"", "  local n=$1\n\n  local even_count=0\n\
    \  local odd_count=0\n\n  for (( i=1; i<=$n; i++ )); do\n    local num=\"$i\"\n\
    \    local reversed=\"\"\n    while [[ -n $num ]]; do\n      reversed=\"${num:\
    \ -1}$reversed\"\n      num=\"${num:0:-1}\"\n    done\n    if [[ $i -eq $reversed\
    \ ]]; then\n      [[ $((i%2)) -eq 0 ]] && ((even_count++)) || ((odd_count++))\n\
    \    fi\n  done\n\n  echo \"even count: $even_count, odd count: $odd_count\"",
  "  local in=$1\n  local -i i even odd\n  for ((i=1; i<=in; i++)); do\n    [[ $(palindrome_num\
    \ $i) == \"true\" ]] && even=$(( even + 1 ))\n  done\n  odd=$(( in - even ))\n\
    \  echo \"$even $odd\"", "    local count_odd=0\n    local count_even=0\n    for\
    \ (( i=1; i<=$1; i++ )); do\n        if [[ $i -eq $(reverse $i) ]]; then\n   \
    \         if [[ $((i%2)) -eq 0 ]]; then\n                count_even=$((count_even+1))\n\
    \            else\n                count_odd=$((count_odd+1))\n            fi\n\
    \        fi\n    done\n    echo \"($count_even, $count_odd)\"", "    local n=$1;\n\
    \    local ans=$(( n+1 ));\n    local num_even=0;\n    local num_odd=0;\n    local\
    \ i=1;\n    while [ $i -lt $ans ]; do\n        if is_palindrome $i; then\n   \
    \         if is_even $i; then\n                (( num_even++ ));\n           \
    \ else\n                (( num_odd++ ));\n            fi\n        fi\n       \
    \ (( i++ ));\n    done\n    echo $num_even, $num_odd;", "    local n=$1\n    local\
    \ evencnt=0 oddcnt=0\n    for ((i=1; i<=n; i++)); do\n        palindrome $i &&\
    \ ((evencnt+=$(is_even $i))) || ((oddcnt+=$(is_odd $i)))\n    done\n    echo -e\
    \ \"($evencnt, $oddcnt)\"", "    local -i n=\"$1\"\n    local -i even_count=0\
    \ odd_count=0\n    for ((i=1; i<=n; i++)); do\n        local num=`printf \"%d\"\
    \ \"$i\"`\n        if [[ \"$num\" == $(rev <<< \"$num\") ]]; then\n          \
    \  # num is a palindrome\n            [[ \"$((num % 2))\" -eq 0 ]] && even_count=$((even_count\
    \ + 1)) || odd_count=$((odd_count + 1))\n        fi\n    done\n    echo \"$even_count,\
    \ $odd_count\"", "    local odd=0\n    local even=0\n    local n=\"$1\"\n    while\
    \ [[ \"$n\" -ge 1 ]]; do\n        if [[ \"$((n%10))\" -eq 0 ]]; then\n       \
    \     let odd++\n        elif [[ \"$((n%10))\" -eq 1 ]]; then\n            let\
    \ even++\n        fi\n        let n/=10\n    done\n    echo \"($even, $odd)\"",
  "  local _even=0\n  local _odd=0\n  local _upper=$1\n  local _middle=0\n  local\
    \ _lower=0\n  local _s\n  local _e\n  local _p\n  # all integers are palindromes\n\
    \  ((_odd=_upper))\n  # 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19, 20\n  # are all odd-digit palindromes\n  if ((_upper>=20)); then\n\
    \    ((_odd-=20))\n    ((_middle=_upper-10))\n    for _n in $(seq 10); do\n  \
    \    ((_lower=_n))\n      for _m in $(seq $_middle); do\n        _s=$(echo $_lower$_m$_lower|sed\
    \ -e \"s/^0\\+//\")\n        _e=$(echo $_s|rev)\n        _p=$(echo $_s$_e|sed\
    \ -e \"s/^0\\+//\")\n        if ((_p<=_upper)); then\n          echo -n \"$_p\
    \ \"\n          ((_odd++))\n        fi\n      done\n    done\n  fi\n  # 1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 101, 111, 121, 131, 141, 151, 161, 171, 181, 191, 1001\n\
    \  # are all even-digit palindromes\n  if ((_upper>=1001)); then\n    ((_even=_upper-1001))\n\
    \    for _n in $(seq 0); do\n      for _m in $(seq 9); do\n        ((_lower=_n))\n\
    \        _s=$(echo $_lower$_m$_lower|sed -e \"s/^0\\+//\")\n        _e=$(echo\
    \ $_s|rev)\n        _p=$(echo $_s$_e|sed -e \"s/^0\\+//\")\n        if ((_p<=_upper));\
    \ then\n          echo -n \"$_p \"\n          ((_even++))\n        fi\n      done\n\
    \    done\n  fi\n  echo \"($_even,", "    local -i n=\"$1\"\n    local -i even=0\n\
    \    local -i odd=0\n    local -i i=1\n    while (( i <= n )); do\n        local\
    \ -i num=$i\n        local -i rev=0\n        while (( num > 0 )); do\n       \
    \     local -i rem=$(( num % 10 ))\n            num=$(( num / 10 ))\n        \
    \    rev=$(( rev * 10 + rem ))\n        done\n        if (( rev == i )); then\n\
    \            (( rev % 2 == 0 )) && (( even++ ))\n            (( rev % 2 == 1 ))\
    \ && (( odd++ ))\n        fi\n        (( i++ ))\n    done\n    echo \"($even,\
    \ $odd)\"", "    local n=$1; shift\n    local even=0\n    local odd=0\n    for\
    \ ((i=1; i<=n; i++)); do\n        if [ $((i%10)) -ne 0 ]; then\n            reverse=$(echo\
    \ \"$i\" | rev)\n            if [ $i -eq $reverse ]; then\n                [ $((i%2))\
    \ -eq 0 ] && even=$((even+1)) || odd=$((odd+1))\n            fi\n        fi\n\
    \    done\n    echo \"($even, $odd)\"", "    local even=0\n    local odd=0\n \
    \   for i in $(seq 1 $1); do\n        if [[ $i -eq $(reverse_int $i) ]]; then\n\
    \            if [[ $((i % 2)) -eq 0 ]]; then\n                (( even++ ))\n \
    \           else\n                (( odd++ ))\n            fi\n        fi\n  \
    \  done\n    echo \"($even, $odd)\"", "    n=$1; even=0; odd=0\n    while [ $n\
    \ -gt 0 ]; do\n        let n--\n        val=$n; rev=$(rev <<<$n)\n        if [\
    \ $val -eq $rev ]; then\n            if [ $((n % 2)) -eq 0 ]; then\n         \
    \       let even++\n            else\n                let odd++\n            fi\n\
    \        fi\n    done\n    printf \"(%d, %d)\\n\" $even $odd", "    local reverse=0\n\
    \    local number=$1\n    local even_count=0\n    local odd_count=0\n    while\
    \ [ $number -gt 0 ]; do\n        reverse=$((reverse * 10 + number % 10))\n   \
    \     number=$((number / 10))\n    done\n    while [ $reverse -gt 0 ]; do\n  \
    \      if [ $((reverse % 2)) -eq 0 ]; then\n            even_count=$((even_count\
    \ + 1))\n        else\n            odd_count=$((odd_count + 1))\n        fi\n\
    \        reverse=$((reverse / 10))\n    done\n    echo $even_count $odd_count",
  "    local a=0\n    local b=0\n    if [[ $1 -eq 1 ]]; then\n        a=1\n      \
    \  b=0\n    elif [[ $1 -eq 2 ]]; then\n        a=1\n        b=1\n    elif [[ $1\
    \ -eq 3 ]]; then\n        a=1\n        b=2\n    elif [[ $1 -eq 4 ]]; then\n  \
    \      a=2\n        b=2\n    elif [[ $1 -eq 5 ]]; then\n        a=2\n        b=3\n\
    \    elif [[ $1 -eq 6 ]]; then\n        a=3\n        b=3\n    elif [[ $1 -eq 7\
    \ ]]; then\n        a=3\n        b=4\n    elif [[ $1 -eq 8 ]]; then\n        a=4\n\
    \        b=4\n    elif [[ $1 -eq 9 ]]; then\n        a=4\n        b=5\n    elif\
    \ [[ $1 -eq 10 ]]; then\n        a=5\n        b=5\n    else\n        a=$(((($1-1)/2)+5))\n\
    \        b=$(((($1-1)/2)+4))\n    fi\n    printf \"(%d, %d)\" $a $b", "  local\
    \ even=0\n  local odd=0\n  for ((i=1; i<=$1; i++)); do\n    if [[ $i -eq $i ]];\
    \ then\n      if [[ $(($i % 2)) -eq 0 ]]; then\n        ((even++))\n      else\n\
    \        ((odd++))\n      fi\n    fi\n  done\n  echo \"$even, $odd\"", "    [\
    \ $# -ne 1 ] && return 1\n    [ $1 -lt 1 ] && return 1\n    [ $1 -gt 1000 ] &&\
    \ return 1\n    even=0\n    odd=0\n    while (( $1 > 0 )); do\n        if [ $1\
    \ -eq 11 ] || [ $1 -eq 22 ] || [ $1 -eq 33 ] || [ $1 -eq 44 ] || \\\n        \
    \    [ $1 -eq 55 ] || [ $1 -eq 66 ] || [ $1 -eq 77 ] || [ $1 -eq 88 ] || \\\n\
    \            [ $1 -eq 99 ] || [ $1 -eq 101 ] || [ $1 -eq 111 ] || [ $1 -eq 121\
    \ ] || \\\n            [ $1 -eq 131 ] || [ $1 -eq 141 ] || [ $1 -eq 151 ] || [\
    \ $1 -eq 161 ] || \\\n            [ $1 -eq 171 ] || [ $1 -eq 181 ] || [ $1 -eq\
    \ 191 ] || [ $1 -eq 202 ] || \\\n            [ $1 -eq 212 ] || [ $1 -eq 222 ]\
    \ || [ $1 -eq 232 ] || [ $1 -eq 242 ] || \\\n            [ $1 -eq 252 ] || [ $1\
    \ -eq 262 ] || [ $1 -eq 272 ] || [ $1 -eq 282 ] || \\\n            [ $1 -eq 292\
    \ ] || [ $1 -eq 303 ] || [ $1 -eq 313 ] || [ $1 -eq 323 ] || \\\n            [\
    \ $1 -eq 333 ] || [ $1 -eq 343 ] || [ $1 -eq 353 ] || [ $1 -eq 363 ] || \\\n \
    \           [ $1 -eq 373 ] || [ $1 -eq 383 ] || [ $1 -eq 393 ] || [ $1 -eq 404\
    \ ] || \\\n            [ $1 -eq 414 ] || [ $1 -eq 424 ] || [ $1 -eq 434 ] || [\
    \ $1 -eq 444 ] || \\\n            [ $1 -eq 454 ] || [ $1 -eq 464 ] || [ $1 -eq\
    \ 474 ] || [ $1 -eq 484 ] || \\\n            [ $1 -eq 494 ] || [ $1 -eq 505 ]\
    \ || [ $1 -eq 515 ] || [", "  if [ -z \"$1\" ]; then\n    echo \"Usage: $0 <integer>\"\
    \n    return 1\n  fi\n  if ! [[ \"$1\" =~ ^[0-9]+$ ]]; then\n    echo \"Error:\
    \ Input must be a non-negative integer\"\n    return 1\n  fi\n  if (( $1 < 1 ||\
    \ $1 > 1000 )); then\n    echo \"Error: Input must be between 1 and 1000\"\n \
    \   return 1\n  fi\n  local n=$1\n  local even=0\n  local odd=0\n  for (( i=1;\
    \ i<=n; i++ )); do\n    local str=$(echo \"$i\" | rev)\n    if [ \"$i\" == \"\
    $str\" ]; then\n      if (( i % 2 == 0 )); then\n        (( even++ ))\n      else\n\
    \        (( odd++ ))\n      fi\n    fi\n  done\n  echo \"($even, $odd)\""]
stop_tokens:
- "\n}"
