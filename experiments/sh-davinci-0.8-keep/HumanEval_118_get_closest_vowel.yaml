name: HumanEval_118_get_closest_vowel
language: sh
prompt: "#!/bin/bash\n# You are given a word. Your task is to find the closest vowel\
  \ that stands between \n# two consonants from the right side of the word (case sensitive).\n\
  # Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n\
  # find any vowel met the above condition. \n# You may assume that the given string\
  \ contains English letter only.\n# Example:\n# get_closest_vowel(\"yogurt\") ==>\
  \ \"u\"\n# get_closest_vowel(\"FULL\") ==> \"U\"\n# get_closest_vowel(\"quick\"\
  ) ==> \"\"\n# get_closest_vowel(\"ab\") ==> \"\"\n#\n# $1 is a string\nget_closest_vowel()\
  \ {\n"
tests: "}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test()\
  \ {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"\
  u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") = \"\
  \" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\") = \"a\"\
  \ ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\") = \"\"\
  \ ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\") = \"\"\
  \ ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\
  \" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
completions: ["    # your code here\n    # add a space at the end of the string, to\
    \ simplify the loop\n    local -r word=\"$1 \"\n    # the current letter\n   \
    \ local current\n    # the current vowel\n    local vowel\n    # the next letter\n\
    \    local next\n    # a flag that is set to true if the current letter is a vowel\n\
    \    local vowel_flag\n    # a flag that is set to true if the next letter is\
    \ a vowel\n    local next_vowel_flag\n    # a flag that is set to true if the\
    \ current letter is a consonant\n    local consonant_flag\n    # a flag that is\
    \ set to true if the next letter is a consonant\n    local next_consonant_flag\n\
    \    # a flag that is set to true if the closest vowel has been found\n    local\
    \ found\n    # go through all the letters\n    for (( i=0; i<${#word}; i++ ));\
    \ do\n        # get the current letter and the next letter\n        current=\"\
    ${word:$i:1}\"\n        next=\"${word:$(( i+1 )):1}\"\n        # check if the\
    \ current letter is a vowel\n        if [[ \"$current\" =~ [aeiou] ]]; then\n\
    \            vowel_flag=1\n        else\n            vowel_flag=0\n        fi\n\
    \        # check if the next letter is a vowel\n        if [[ \"$next\" =~ [aeiou]\
    \ ]]; then\n            next_vowel_flag=1\n        else\n            next_vowel_flag=0\n\
    \        fi\n        # check if the current letter is a consonant\n        if\
    \ [[ \"$current\" =~ [bcdfghjklmnpqrstvwxyz] ]]; then\n            consonant_flag=1\n\
    \        else\n            consonant_flag=0\n        fi\n        # check if the\
    \ next letter is a consonant\n        if [[ \"$next\" =~ [bcdfghjklmnpqrstvwxyz]\
    \ ]]; then\n            next_consonant_flag=1\n        else\n            next_consonant_flag=0\n\
    \        fi\n        # if the next letter is a vowel, set the current letter as\
    \ the current vowel\n        if [[ $next_", '   :', "  # String representation\
    \ of a list of consonants\n  local -r consonants=\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n  # String representation of a list of vowels\n  local -r vowels=\"aeiouAEIOU\"\
    \n  # Starting index for search\n  local -i i=${#1}-1\n  # Length of the string\n\
    \  local -i length=\"${#1}\"\n  # Index of the current character\n  local -i j=0\n\
    \  # Character under consideration\n  local ch=\"\"\n  # Search for the rightmost\
    \ vowel\n  while [ \"$i\" -ge \"$j\" ]; do\n    ch=\"${1:$i:1}\"\n    if [[ \"\
    $vowels\" =~ \"$ch\" ]]; then\n      # Is the next character a consonant?\n  \
    \    if [[ \"$consonants\" =~ \"${1:$((i-1)):1}\" ]]; then\n        # Is the previous\
    \ character a consonant?\n        if [[ \"$consonants\" =~ \"${1:$((i+1)):1}\"\
    \ ]]; then\n          echo \"$ch\"\n          return\n        fi\n      fi\n \
    \   fi\n    ((i--))\n  done\n  echo \"\"", "  echo \"$1\" | sed 's/[^aeiou]*\\\
    ([aeiou]\\).*/\\1/'", "    local len=${#1}\n    local str=${1//[^aeiouAEIOU]}\n\
    \    local i=`expr $len - 1`\n    while [ $i -ge 0 ]; do\n        if [[ $str =~\
    \ ${1:$i:1} ]]; then\n            if [ $i -eq 0 ]; then\n                echo\
    \ \"\"\n            elif [ $i -eq `expr $len - 1` ]; then\n                echo\
    \ ${1:$i:1}\n            else\n                echo ${1:$i:1}\n            fi\n\
    \            break\n        fi\n        let i--\n    done", "    local reversed=$(echo\
    \ $1 | rev)\n    local previous=\"\"\n    local current=\"\"\n    local result=\"\
    \"\n    for ((i=0; i<${#reversed}; i++)); do\n        current=${reversed:$i:1}\n\
    \        if [ \"$previous\" == \"1\" ]; then\n            if [ \"$current\" !=\
    \ \"a\" ] && \\\n               [ \"$current\" != \"e\" ] && \\\n            \
    \   [ \"$current\" != \"i\" ] && \\\n               [ \"$current\" != \"o\" ]\
    \ && \\\n               [ \"$current\" != \"u\" ]; then\n                result=$current\n\
    \                break\n            fi\n        elif [ \"$current\" == \"a\" ]\
    \ || \\\n             [ \"$current\" == \"e\" ] || \\\n             [ \"$current\"\
    \ == \"i\" ] || \\\n             [ \"$current\" == \"o\" ] || \\\n           \
    \  [ \"$current\" == \"u\" ]; then\n            previous=\"1\"\n        else\n\
    \            previous=\"0\"\n        fi\n    done\n    echo $result", "  local\
    \ vowels=\"aAeEiIoOuU\"\n  local word=\"$1\"\n  local res=\"\"\n  local char_counter=${#word}\n\
    \  local char_pos=0\n  local last_char_was_vowel=0\n  local last_char_was_consonant=0\n\
    \  while [ $char_counter -gt 0 ]; do\n    char_pos=$(($char_counter - 1))\n  \
    \  local char=\"${word:$char_pos:1}\"\n    [[ \"$vowels\" =~ \"$char\" ]] && last_char_was_vowel=1\
    \ || last_char_was_consonant=1\n    if [ $last_char_was_vowel -eq 1 ] && [ $last_char_was_consonant\
    \ -eq 1 ]; then\n      res=\"$char\"\n      break\n    fi\n    char_counter=$(($char_counter\
    \ - 1))\n  done\n  printf \"%s\" \"$res\"", "    # Fill in this function.\n  \
    \  #echo \"Not Implemented\"\n    local word=\"$1\"\n    local chars=\"${word//[aeiou]/}\"\
    \n    local prev_cons=\n    local prev_char=\n    local prev_vowel=\n    local\
    \ found=\n    local char=\n    local vowel=\n    local cons=\n    local count=0\n\
    \    local vowels=\"a e i o u\"\n    local vowels_list=($vowels)\n    local num_vowels=${#vowels_list[@]}\n\
    \    for char in $(echo $chars | sed 's/./& /g')\n    do\n        # Check if it\
    \ is a consonant\n        if [[ $char =~ [$chars] ]]; then\n            # if the\
    \ prev character is a vowel, keep it in prev_vowel\n            # else, clear\
    \ the prev_vowel\n            if [[ $prev_char =~ [aeiou] ]]; then\n         \
    \       prev_vowel=$prev_char\n            else\n                prev_vowel=\n\
    \            fi\n            # If prev_cons is empty, assign it to char\n    \
    \        # else, compare the distance of the current char and the prev_cons\n\
    \            # and assign the closer consonant to prev_cons\n            if [[\
    \ -z $prev_cons ]]; then\n                prev_cons=$char\n            else\n\
    \                # Compare the distance of the current char and the prev_cons\n\
    \                # and assign the closer consonant to prev_cons\n            \
    \    cons=${chars%$char*}\n                local found=\n                local\
    \ count=0\n                while [[ -z $found ]] && (( $count < $num_vowels ));\
    \ do\n                    vowel=${vowels_list[$count]}\n                    cons=\"\
    ${cons%%$vowel*}\"\n                    if [[ ${#cons} -gt ${#prev_cons} ]]; then\n\
    \                        found=1\n                    else\n                 \
    \       (( count += 1 ))\n                    fi\n                done\n     \
    \           if [[ -z $found ]]; then\n                    prev_cons=$char\n  \
    \              fi\n            fi\n        fi\n        prev_char=$char\n    done\n\
    \    if [[ -z $prev_v", "\tword=$1\n\tindex=${#word}\n\twhile [ $index -gt 0 ];\
    \ do\n\t\tlast_char=${word:$index-1:1}\n\t\tif [[ \"$last_char\" =~ [aeiouAEIOU]\
    \ ]]; then\n\t\t\twhile [ $index -gt 0 ]; do\n\t\t\t\tlast_char=${word:$index-1:1}\n\
    \t\t\t\tif [[ \"$last_char\" =~ [^aeiouAEIOU] ]]; then\n\t\t\t\t\techo ${word:$index:1}\n\
    \t\t\t\t\treturn 0\n\t\t\t\tfi\n\t\t\t\tindex=$((index-1))\n\t\t\tdone\n\t\tfi\n\
    \t\tindex=$((index-1))\n\tdone\n\techo \"\"", "  local str=${1//[^aeiou]/} # Remove\
    \ all non-vowels\n\n  for ((i=${#str}-1; i>=0; i--)); do\n    # Found vowel between\
    \ two consonants\n    if [[ ${1:$i-1:1} && ! ${1:$i-2:1} && ${1:$i+1:1} && ! ${1:$i+2:1}\
    \ ]]; then\n      echo \"${str:$i:1}\"\n      return\n    fi\n  done\n\n  echo\
    \ \"\"", "    echo \"$1\" | awk 'BEGIN { FS = \"\" } \n    { \n        for (i\
    \ = length($0); i >= 0; i--) {\n            cur = substr($0, i, 1)\n         \
    \   if (match(cur, /[aeiou]/)) {\n                if (i == length($0)) {\n   \
    \                 next\n                }\n                if (match(substr($0,\
    \ i - 1, 1), /[bcdfghjklmnpqrstvwxyz]/)) {\n                    print cur\n  \
    \                  exit\n                }\n            }\n        }\n    }'",
  "  # Write your code here\n  echo $(echo $1 | rev | sed -e \"s/[aeiou]/& /g\" |\
    \ tr -s \" \" | cut -d \" \" -f 1 | rev)", '    # TODO: implement this function',
  "    local i\n    local input=$1\n    local ucase_input=$(echo \"$input\" | tr '[:lower:]'\
    \ '[:upper:]')\n    local output=\"\"\n    local vowel_indices=()\n    local vowel_first=\"\
    \"\n    local vowel_second=\"\"\n    local vowel_last=\"\"\n    local min_dist=${#input}\n\
    \    local dist=0\n    local next_vowel=\"\"\n    local cur_vowel=\"\"\n    local\
    \ closest_vowel=\"\"\n    local prev_vowel=\"\"\n    local prev_dist=0\n    local\
    \ prev_vowel_indices=()\n    local prev_vowel_first=\"\"\n    local prev_vowel_second=\"\
    \"\n    local prev_vowel_last=\"\"\n    local new_letter=\"\"\n    local letter_pos=0\n\
    \    local last_letter_pos=0\n    local start_pos=0\n    local end_pos=0\n   \
    \ local last_letter=\"\"\n    local first_letter=\"\"\n    local next_vowel_indices=()\n\
    \    local next_vowel_first=\"\"\n    local next_vowel_second=\"\"\n    local\
    \ next_vowel_last=\"\"\n    local vowel_list=\"A E I O U\"\n    local j\n    local\
    \ is_vowel\n    local cur_vowel_pos=0\n    local is_first_letter_vowel=0\n   \
    \ local is_last_letter_vowel=0\n    local test_vowel_indices=()\n    local test_vowel_first=\"\
    \"\n    local test_vowel_second=\"\"\n    local test_vowel_last=\"\"\n    local\
    \ test_dist=0\n    local test_min_dist=0\n    local test_vowel=\"\"\n    local\
    \ test_letter_pos=0\n    local test_start_pos=0\n    local test_end_pos=0\n  \
    \  local test_last_letter=\"\"\n    local test_next_vowel=\"\"\n    local test_next_vowel_indices=()\n\
    \    local test_next_vowel_first=\"\"\n    local test_next_vowel_second=\"\"\n\
    \    local test_", "    local len=${#1}\n    local i=0\n    local l=0\n    local\
    \ r=0\n    local lc=0\n    local rc=0\n    local v=0\n    local c=0\n    local\
    \ index=-1\n    local vowel=0\n    local constant=0\n    local str=\"\"\n    local\
    \ cs=\"$1\"\n    for ((i=0; i<$len; i++)); do\n        c=${cs:$i:1}\n        if\
    \ [[ $c =~ [AEIOUaeiou] ]]; then\n            vowel=1\n            if [[ $rc -gt\
    \ 0 ]]; then\n                str=${cs:$l:$len}\n                break\n     \
    \       fi\n        else\n            constant=1\n            if [[ $vowel -eq\
    \ 1 ]]; then\n                l=$i\n                lc=$c\n                vowel=0\n\
    \            fi\n            if [[ $vowel -eq 0 ]]; then\n                r=$i\n\
    \                rc=$c\n            fi\n        fi\n    done\n    if [[ $vowel\
    \ -eq 1 ]]; then\n        str=${cs:$l:$len}\n    fi\n    if [[ $r -eq 0 ]]; then\n\
    \        str=\"\"\n    fi\n    for ((i=0; i<${#str}; i++)); do\n        c=${str:$i:1}\n\
    \        if [[ $c =~ [AEIOUaeiou] ]]; then\n            index=$i\n           \
    \ break\n        fi\n    done\n    if [[ $index -eq -1 ]]; then\n        echo\
    \ \"\"\n    else\n        echo ${str:$index:1}\n    fi", "   [[ \"${1}\" =~ [AEIOU]\
    \ ]] && echo \"\" && return\n\n   for letter in $(rev <<< \"${1}\"); do\n    \
    \  if [[ \"${letter}\" =~ [AEIOU] ]]; then\n         echo \"${letter}\"\n    \
    \     return\n      fi\n   done", "  rev=$(echo \"$1\" | rev)\n  found=0\n  for\
    \ i in $(seq 0 $((${#rev} - 1))); do\n    char=${rev:$i:1}\n    if [ \"$char\"\
    \ = \"a\" -o \"$char\" = \"e\" -o \"$char\" = \"i\" -o \"$char\" = \"o\" -o \"\
    $char\" = \"u\" -o \"$char\" = \"A\" -o \"$char\" = \"E\" -o \"$char\" = \"I\"\
    \ -o \"$char\" = \"O\" -o \"$char\" = \"U\" ]; then\n      if [ $found -eq 1 ];\
    \ then\n        echo \"$char\"\n        break\n      fi\n    else\n      found=1\n\
    \    fi\n  done", "  input=$1\n\n  # use `rev` to get the string reversely and\n\
    \  # replace `.*` with `& `, then find the closest vowel\n  echo $input | rev\
    \ | sed 's/.*/& /' | grep -o '[aeiouAEIOU]\\{1\\}' | head -n 1 | rev", "    local\
    \ word=$1\n    local word_len=${#word}\n    local consonants=bcdfghjklmnpqrstvwxyz\n\
    \    local -i index\n    local -i i\n    local consonant\n    local -i j\n   \
    \ local -i k\n    local -i len\n    local -i max_len\n    local -i max_i\n   \
    \ local -i max_j\n    local -i max_k\n    local closest_vowel\n\n    if [ $word_len\
    \ -lt 3 ]; then\n        echo \"\"\n        return\n    fi\n\n    for (( i=0;\
    \ i<word_len; i++ )); do\n        consonant=${word:$i:1}\n        if [[ $consonants\
    \ =~ $consonant ]]; then\n            for (( j=i+1; j<word_len; j++ )); do\n \
    \               consonant=${word:$j:1}\n                if [[ $consonants =~ $consonant\
    \ ]]; then\n                    for (( k=j+1; k<word_len; k++ )); do\n       \
    \                 consonant=${word:$k:1}\n                        if [[ ! $consonants\
    \ =~ $consonant ]]; then\n                            len=$k-$j\n            \
    \                if [ $len -gt $max_len ]; then\n                            \
    \    max_len=$len\n                                max_i=$i\n                \
    \                max_j=$j\n                                max_k=$k\n        \
    \                    fi\n                        fi\n                    done\n\
    \                fi\n            done\n        fi\n    done\n\n    if [ $max_len\
    \ -gt 0 ]; then\n        closest_vowel=${word:$max_j:1}\n    else\n        closest_vowel=\"\
    \"\n    fi\n\n    echo $closest_vowel", "    echo \"$1\" | rev | sed -n 's/\\\
    (.\\)\\(.\\)\\([^aeiou]\\+\\([aeiou]\\)\\)\\+/\\4/p' | rev"]
stop_tokens:
- "\n}"
