name: HumanEval_85_add
language: sh
prompt: "#!/bin/bash\n# Given a non-empty list of integers lst. add the even elements\
  \ that are at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\n#\n# $1 is\
  \ a space-separated list\nadd() {\n"
tests: "}\n\ncandidate() {\n    add \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
  \ \"4 88\") = \"88\" ]]\n    [[ $(candidate \"4 5 6 7 2 122\") = \"122\" ]]\n  \
  \  [[ $(candidate \"4 0 6 7\") = \"0\" ]]\n    [[ $(candidate \"4 4 6 8\") = \"\
  12\" ]]\n}\n\nrun_test"
completions: ["  local tot=0\n  for i in $1; do\n    if [ $(($i % 2)) -eq 0 ] && [\
    \ $(($i % 4)) -ne 0 ]; then\n      let tot+=$i\n    fi\n  done\n  echo $tot",
  "    lst=\"$1\"\n    sum=0\n    for i in $lst; do\n        if [[ $((i % 2)) == 0\
    \ ]]; then\n            sum=$((sum + i))\n        fi\n    done\n    echo $sum",
  "  # your code here\n  # hint: for loop is your friend\n  echo $1", "    for i in\
    \ ${1}; do\n        [[ $(( $i % 2 )) -eq 0 ]] && echo \"$i\"\n    done | awk '{a+=$1}\
    \ END {print a}'", "  local sum=0\n  for ((i=1; i < \"$#\"; i+=2)); do\n    if\
    \ [[ $((i % 2)) -eq 1 ]]; then\n      ((sum+=${!i}))\n    fi\n  done\n  echo \"\
    $sum\"", "  sum=0\n  for ((i=1; i < ${#@}; i+=2)); do\n    [ $(( $i % 2 )) -eq\
    \ 0 ] && (( sum+=${@:$i:1} ))\n  done\n  echo $sum", "  local sum=0\n  for i in\
    \ $1; do\n    if [ $((i % 2)) -eq 0 ] && [ $((i % 4)) -ne 0 ]; then\n      sum=$((sum\
    \ + i))\n    fi\n  done\n  echo $sum", "  sum=0\n  for i in $1; do\n    if [ $((i\
    \ % 2)) -eq 0 ] && [ $((index % 2)) -ne 0 ]; then\n      sum=$((sum + i))\n  \
    \  fi\n    index=$((index + 1))\n  done\n  echo $sum", "\tlocal total=0\n\tfor\
    \ item in ${1}; do\n\t\tif [[ $((${item} % 2)) -eq 0 ]] && [[ $((${item} % 2))\
    \ -eq 0 ]]; then\n\t\t\ttotal=$((${total} + ${item}))\n\t\tfi\n\tdone\n\techo\
    \ ${total}", "  local list=( $1 )\n  local sum=0\n  for i in \"${!list[@]}\";\
    \ do\n    if [[ $((i%2)) == 1 && $((list[i]%2)) == 0 ]]; then\n      ((sum+=list[i]))\n\
    \    fi\n  done\n  echo $sum", "    IFS=\" \"; declare -a array=($1); unset IFS;\n\
    \    local res=0\n    for ((i=1; i<${#array[@]}; i+=2)); do\n        if [[ $((array[i]\
    \ % 2)) -eq 0 ]]; then\n            res=$((res + array[i]))\n        fi\n    done\n\
    \    echo $res", "  local input=\"$1\"\n  local result=0\n  local tmp=0\n  local\
    \ i=0\n  for num in $input; do\n    tmp=$(($i % 2))\n    if [ $tmp -eq 1 ] &&\
    \ [ $(($num % 2)) -eq 0 ]; then\n      result=$(($result + $num))\n    fi\n  \
    \  i=$(($i + 1))\n  done\n  echo $result", "\teval \"lst=($1)\"\n\tlocal sum=0\n\
    \tfor (( i=1; i<${#lst[@]}; i+=2 )); do\n\t\tif (( lst[i] % 2 == 0 )); then\n\t\
    \t\t(( sum += lst[i] ))\n\t\tfi\n\tdone\n\techo $sum", "  local params=($1)\n\
    \  local sum=0\n  local cnt=1\n  local len=${#params[@]}\n  for ((i=0; i<len;\
    \ i++)); do\n    if [ \"$((cnt % 2))\" -eq 0 ] && [ \"$((params[i] % 2))\" -eq\
    \ 0 ]; then\n      sum=$((sum + params[i]))\n    fi\n    cnt=$((cnt + 1))\n  done\n\
    \  echo \"$sum\"", "  local -n lst=\"$1\"\n  printf '%s\\n' \"${lst[@]}\" | grep\
    \ -Eo '^[02468]+$' | paste -sd+ - | bc", "  echo \"$1\" | tr \" \" \"\\n\" |\n\
    \    awk 'BEGIN { sum = 0 }\n         { if(NR % 2 != 0 && $1 % 2 == 0) sum +=\
    \ $1 }\n         END { print sum }'", "  local lst=(\"$@\")\n  local res=0\n \
    \ local i=0\n  while [ $i -lt ${#lst[@]} ]; do\n    if [ $(( i % 2 )) -eq 1 ]\
    \ && [ $(( lst[i] % 2 )) -eq 0 ]; then\n      (( res += lst[i] ))\n    fi\n  \
    \  (( i++ ))\n  done\n  echo $res", "  for i in $1\n  do\n    if [ $(($i % 2))\
    \ -eq 0 ] && [ $(($i % 4)) -ne 0 ]\n    then\n      sum=$(($sum + $i))\n    fi\n\
    \  done\n  echo \"$sum\"", "    echo $@\n    IFS=' ' read -r -a array <<< $@\n\
    \    sum=0\n    for i in \"${!array[@]}\"; do\n        if [ $((i % 2)) -ne 0 ]\
    \ && [ $((array[i] % 2)) -eq 0 ]; then\n            sum=$((sum + array[i]))\n\
    \        fi\n    done\n    echo $sum", "    local sum=0\n    local lst=($1)\n\
    \    local i\n    for ((i=1; i<${#lst[@]}; i+=2)); do\n        (( lst[i] % 2 ==\
    \ 0 )) && (( sum += lst[i] ))\n    done\n    echo $sum"]
stop_tokens:
- "\n}"
