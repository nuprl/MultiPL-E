name: HumanEval_146_specialFilter
language: sh
prompt: "#!/bin/bash\n# Write a function that takes an array of numbers as input and\
  \ returns \n# the number of elements in the array that are greater than 10 and both\
  \ \n# first and last digits of a number are odd (1, 3, 5, 7, 9).\n# For example:\n\
  # specialFilter([15, -73, 14, -15]) => 1 \n# specialFilter([33, -2, -3, 45, 21,\
  \ 109]) => 2\n#\n# $1 is a space-separated list\nspecialFilter() {\n"
tests: "}\n\ncandidate() {\n    specialFilter \"$@\"\n}\n\nset -e\nrun_test() {\n\
  \    [[ $(candidate \"5 -2 1 -5\") = \"0\" ]]\n    [[ $(candidate \"15 -73 14 -15\"\
  ) = \"1\" ]]\n    [[ $(candidate \"33 -2 -3 45 21 109\") = \"2\" ]]\n    [[ $(candidate\
  \ \"43 -12 93 125 121 109\") = \"4\" ]]\n    [[ $(candidate \"71 -2 -33 75 21 19\"\
  ) = \"3\" ]]\n    [[ $(candidate \"1\") = \"0\" ]]\n    [[ $(candidate \"\") = \"\
  0\" ]]\n}\n\nrun_test"
completions: ["    # your code\n    #return number", "    echo $1 | tr ' ' '\\n' |\
    \ grep '[1-9][^0-9]*[1-9]$' | grep -E '^.*[13579]$' | wc -l", "    numbers=($1)\n\
    \    let result=0\n    for number in ${numbers[@]}; do\n        if [ ${number}\
    \ -gt 10 ]; then\n            first_digit=${number:0:1}\n            last_digit=${number:\
    \ -1}\n            if [ $((first_digit%2)) -ne 0 ] && [ $((last_digit%2)) -ne\
    \ 0 ]; then\n                let result+=1\n            fi\n        fi\n    done\n\
    \    echo ${result}", "    nums=($1)\n    echo ${nums[@]}\n    echo \"Input list\
    \ contains ${#nums[@]} elements\"\n    echo ${nums[@]} | tr ' ' '\\n' | grep '[13579][0-9]*[13579]'",
  "    local i r=0\n    for i in $1; do\n        i=${i#-}\n        [ ${i:0:1} -gt\
    \ 1 -a ${i: -1} -gt 1 -a $i -gt 10 ] && ((r++))\n    done\n    echo $r", "   \
    \ count=0\n    for i in $1; do\n        if [ ${i:0:1} -gt 1 -a ${i:0:1} -lt 9\
    \ -a \\\n             ${i: -1} -gt 1 -a ${i: -1} -lt 9 ]; then\n            ((count++))\n\
    \        fi\n    done\n    echo $count", "\tcnt=0\n\tfor n in $1\n\tdo\n\t\tif\
    \ [ $n -gt 10 ]\n\t\tthen\n\t\t\tif [ `expr ${n:0:1} % 2` -ne 0 ]\n\t\t\tthen\n\
    \t\t\t\tif [ `expr ${n:(-1)} % 2` -ne 0 ]\n\t\t\t\tthen\n\t\t\t\t\tcnt=`expr $cnt\
    \ + 1`\n\t\t\t\tfi\n\t\t\tfi\n\t\tfi\n\tdone\n\techo $cnt", "    local total=0;\n\
    \n    for i in $1; do\n        # get first digit\n        local d1=$(echo $i |\
    \ sed -e 's/^\\([0-9]\\).*/\\1/');\n        local d2=$(echo $i | sed -e 's/^.*\\\
    ([0-9]\\)$/\\1/');\n\n        if [ $d1 -gt 10 -a $d2 -gt 10 ]; then\n        \
    \    if [ $((d1 % 2)) -eq 1 -a $((d2 % 2)) -eq 1 ]; then\n                total=$((total\
    \ + 1));\n            fi\n        fi\n    done\n\n    echo $total;", "\t(( $#\
    \ == 0 )) && return 0\n\n\tlocal odd_elems=0\n\n\tfor i in $*; do\n\t\t# casting\
    \ a number to string\n\t\tif [[ $i -gt 10 && \"$i\" =~ ^[13579][0-9]*[13579]$\
    \ ]]; then\n\t\t\t(( odd_elems++ ))\n\t\tfi\n\tdone\n\n\techo $odd_elems", " \
    \   local numbers=\"$1\"\n    local array=( $numbers )\n    local count=0\n  \
    \  local i=0\n    while [[ \"$i\" -lt \"${#array[@]}\" ]]; do\n        local number=${array[$i]}\n\
    \        if [[ $number -gt 10 ]]; then\n            local firstDigit=${number:0:1}\n\
    \            local lastDigit=${number: -1}\n            if [[ $firstDigit -gt\
    \ 1 && $firstDigit -lt 9 && $lastDigit -gt 1 && $lastDigit -lt 9 ]]; then\n  \
    \              (( count++ ))\n            fi\n        fi\n        (( i++ ))\n\
    \    done\n    echo $count", "    local -i num=0\n    local s=\"\"\n    local\
    \ n=\"\"\n    local a=\"\"\n    local b=\"\"\n    for i in $1\n    do\n      \
    \  s=${i#-}\n        a=${s:0:1}\n        b=${s: -1}\n        if [ $i -gt 10 ]\
    \ && [ $a -gt 1 ] && [ $b -gt 1 ] && \\\n           [ $(( $a % 2 )) != 0 ] &&\
    \ [ $(( $b % 2 )) != 0 ]\n        then\n            num+=1\n        fi\n    done\n\
    \    echo $num", "    IFS=' ' read -r -a arr <<< \"$1\"\n    special=0\n    for\
    \ i in \"${arr[@]}\"; do\n        if [ $i -gt 10 ]; then\n            if [ $(($i/10))\
    \ -eq $(($i%10)) ]; then\n                special=$(($special+1))\n          \
    \  fi\n        fi\n    done\n    echo $special", "    # Add code here\n    echo\
    \ $1 | tr ' ' '\\n' | grep -P \"^[13579]|[13579]$\" | grep -P \".+[13579]\" |\
    \ wc -l", "\tlocal arg\n\tlocal count=0\n\tfor arg in $1; do\n\t\tif [ $arg -ge\
    \ 10 ]; then\n\t\t\tlocal lastDigit=$(($arg % 10))\n\t\t\tif [ $(($arg / 10))\
    \ -ne 0 ]; then\n\t\t\t\tlocal firstDigit=$(($arg / $(($arg / 10)) % 10))\n\t\t\
    \telse\n\t\t\t\tlocal firstDigit=$(($arg % 10))\n\t\t\tfi\n\t\t\tif [ $((firstDigit\
    \ % 2)) -ne 0 ] && [ $((lastDigit % 2)) -ne 0 ]; then\n\t\t\t\tcount=$((count\
    \ + 1))\n\t\t\tfi\n\t\tfi\n\tdone\n\techo $count", "\tlocal count=0\n\tfor num\
    \ in $1\n\tdo\n\t\tif [[ $num -gt 10 ]] && [[ $(( $(echo $num | sed -r \"s/^(.)(.*)(.)$/\\\
    1/\") % 2 )) -ne 0 ]] && [[ $(( $(echo $num | sed -r \"s/^(.)(.*)(.)$/\\3/\")\
    \ % 2 )) -ne 0 ]]\n\t\tthen\n\t\t\tcount=$(( count + 1 ))\n\t\tfi\n\tdone\n\t\
    echo $count", "    local array=\"$1\"\n    local count=0\n    local elements=\"\
    ${array// /\\|}\"\n    for i in $(eval echo \"$elements\"); do\n        if ((i\
    \ > 10)); then\n            local first=$(($i/10))\n            local last=$(($i%10))\n\
    \            if (($first%2!=0 && $last%2!=0)); then\n                count=$(($count+1))\n\
    \            fi\n        fi\n    done\n    echo $count", "    echo $1 | tr ' '\
    \ '\\n' | \\\n    awk -F- '{ print $0 }\n            { if ( $1 > 10 && \\\n  \
    \                $1 ~ /^[13579]/ && \\\n                  substr($1, length($1),\
    \ 1) ~ /[13579]/ )\n                print;\n            }' | wc -l", "    if [\
    \ $# -eq 0 ]; then\n        echo \"Must pass at least one number\"\n        return\
    \ 1\n    fi\n\n    for num in $@; do\n        if [[ \"$num\" =~ ^-?[0-9]+$ ]];\
    \ then\n            # continue\n            :\n        else\n            echo\
    \ \"Bad input: $num\"\n            return 1\n        fi\n    done\n\n    special_filter_impl\
    \ \"$@\"", "    [ $# -eq 0 ] && echo 0 && return\n    nums=($1)\n    count=0\n\
    \    for num in ${nums[@]}; do\n        [ ${num:0:1} -gt 1 ] && [ ${num:${#num}-1:1}\
    \ -gt 1 ] && [ $num -gt 10 ] && count=$((count+1))\n    done\n    echo $count",
  "    counter=0\n\n    for i in $1\n    do\n        if [ $i -gt 10 ] && [ $(( $i\
    \ % 2 )) -ne 0 ] && [ $(( $i / 10 )) -ne 0 ] && [ $(( $i % 10 )) -ne 0 ]\n   \
    \     then\n            counter=$(( $counter + 1 ))\n        fi\n    done\n\n\
    \    echo $counter"]
stop_tokens:
- "\n}"
