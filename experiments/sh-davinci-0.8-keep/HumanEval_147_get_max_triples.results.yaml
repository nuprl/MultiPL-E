language: sh
name: HumanEval_147_get_max_triples
results:
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local count=0\n    n=$1\n    while [ $n -gt 0 ]; do\n        local a=($(seq\
    \ 1 $n))\n        local b=($(seq 1 $n))\n        local c=($(seq 1 $n))\n     \
    \   len=${#a[@]}\n        for (( i=0; i<len; i++ )); do\n            a[$i]=$((a[$i]*a[$i]-a[$i]+1))\n\
    \        done\n        len=${#b[@]}\n        for (( i=0; i<len; i++ )); do\n \
    \           b[$i]=$((b[$i]*b[$i]-b[$i]+1))\n        done\n        len=${#c[@]}\n\
    \        for (( i=0; i<len; i++ )); do\n            c[$i]=$((c[$i]*c[$i]-c[$i]+1))\n\
    \        done\n        len=${#a[@]}\n        for (( i=0; i<len; i++ )); do\n \
    \           for (( j=i+1; j<len; j++ )); do\n                for (( k=j+1; k<len;\
    \ k++ )); do\n                    if [ $((a[$i]+b[$j]+c[$k])) -eq 0 ]; then\n\
    \                        echo \"(${a[$i]}, ${b[$j]}, ${c[$k]})\"\n           \
    \             count=$((count+1))\n                    fi\n                done\n\
    \            done\n        done\n        n=$((n-1))\n    done\n    echo \"Count:\
    \ $count\"\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n\
    \    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020445
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=\"$1\"\n    let n--\n\n    local p1=0\n    local p2=0\n    local\
    \ i=0\n    local a=()\n    local sum=0\n    local total=0\n\n    for i in $(seq\
    \ 1 $n); do\n        local tmp=$((i * i - i + 1))\n        a[i]=$tmp\n    done\n\
    \n    for ((i=1; i<=n-2; i++)); do\n        for ((p1=i+1; p1<=n-1; p1++)); do\n\
    \            for ((p2=p1+1; p2<=n; p2++)); do\n                sum=$((a[i] + a[p1]\
    \ + a[p2]))\n                if (( sum % 3 == 0 )); then\n                   \
    \ let total++\n                fi\n            done\n        done\n    done\n\n\
    \    echo $total\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\")\
    \ = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\"\
    ) = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020445
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    seq $1 | awk 'BEGIN{\n        RS=\"\";\n        FS=\"\\n\";\n       \
    \ OFS=\" \";\n        max_count=0;\n    }{\n        for(i=1;i<NF;i++){\n     \
    \       for(j=i+1;j<NF;j++){\n                for(k=j+1;k<NF;k++){\n         \
    \           if((($i+$j+$k)%3)==0){\n                        max_count++;\n   \
    \                 }\n                }\n            }\n        }\n    }END{\n\
    \        print max_count;\n    }'\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020445
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    n=$1\n    for (( i=1; i<n; i++ )) do\n        for (( j=i+1; j<n; j++\
    \ )) do\n            for (( k=j+1; k<n; k++ )) do\n                if (( (i*i-i+1+j*j-j+1+k*k-k+1)%3\
    \ == 0 ))\n                then\n                    echo \"( $i, $j, $k )\"\n\
    \                fi\n            done\n        done\n    done\n}\n\ncandidate()\
    \ {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate\
    \ \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020445
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n\t#create array, fill it with results and then count the number of triples\n\
    \tfor ((i=1; i<=$1; i++)); do\n\t\ta[$i]=$(( i * i - i + 1 ))\n\tdone\n\tlocal\
    \ count=0\n\t#check if index is valid and sum of three numbers is divisible by\
    \ 3\n\tfor ((i=1; i<$1-1; i++)); do\n\t\tfor ((j=i+1; j<$1; j++)); do\n\t\t\t\
    for ((k=j+1; k<=$1; k++)); do\n\t\t\t\tif [[ $(( a[$i] + a[$j] + a[$k] )) -eq\
    \ 0 ]]; then\n\t\t\t\t\tcount=$(( count + 1 ))\n\t\t\t\tfi\n\t\t\tdone\n\t\tdone\n\
    \tdone\n\techo \"$count\"\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020445
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n  (( $1 < 3 )) && echo 0 && return\n  if (( $1 > 3 )); then\n    n=$(( $1\
    \ - 1 ))\n    (( $n > 3 )) && (( n * $n - $n - 4 )) && echo $(( n * $n - $n -\
    \ 4 )) && return\n  fi\n  echo 0\n}\n\ncandidate() {\n    get_max_triples \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020445
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    n=$1\n    # the number of elements of a is n\n    # the maximum value\
    \ of a[i] + a[j] + a[k] is 3 * (n - 1) + 1 = 3n - 2\n    # the minimum value of\
    \ a[i] + a[j] + a[k] is 3\n    # The possible values of a[i] + a[j] + a[k] are\
    \ 3, 6, 9, ..., 3n - 5, 3n - 2\n    # The count of valid triples (a[i], a[j],\
    \ a[k]) of a where i < j < k \n    # and a[i] + a[j] + a[k] is a multiple of 3\
    \ is:\n    #      [3n - 2] + [3n - 5] + ... + 6 + 3 = [3n - 2] + [3n - 5] + ...\
    \ + [3 + 3] + [0 + 3]\n    #      = 2 * (3n - 2) + 2 * (3n - 5) + ... + 2 * (3\
    \ + 3) + 2 * (0 + 3)\n    #      = 2 * (3n - 2) + 2 * (3n - 5) + ... + 2 * (3\
    \ + 3) + 2 * 3\n    #      = 2 * (3n - 2) + 2 * (3n - 5) + ... + 2 * (3 + 3) +\
    \ 6\n    #      = 2 * (3n - 2) + 2 * (3n - 5) + ... + 6 + 6\n    #      = 2 *\
    \ (3n - 2) + 2 * (3n - 5) + ... + 2 * (3 + 3)\n    #      = 2 * (3n - 2) + 2 *\
    \ (3n - 5) + ... + 2 * 6\n    #      = 2 * (3n - 2) + 2 * (3n - 5) + ... + 2 *\
    \ 3\n    #      = 2 * (3n - 2) + 2 * (3n - 5) + 6\n    #      = 2 * (3n - 2) +\
    \ 2 * (3n - 5) + 2 * 3\n    #      = 2 * (3n - 2) + 2\n}\n\ncandidate() {\n  \
    \  get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020445
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local p=0\n    local c=0\n    local q=0\n    local sum=0\n\
    \    local a=()\n    local i=0\n    local j=0\n    local k=0\n    let \"p = n\
    \ * (n + 1) / 2\"\n    let \"c = p * (p + 1) / 2\"\n    let \"q = c * (c + 1)\
    \ / 2\"\n    for ((i=1; i<=n; i++)); do\n        let \"sum = i * i - i + 1\"\n\
    \        a+=($sum)\n    done\n    for ((i=0; i<$n; i++)); do\n        for ((j=i+1;\
    \ j<$n; j++)); do\n            for ((k=j+1; k<$n; k++)); do\n                let\
    \ \"sum = a[i] + a[j] + a[k]\"\n                [[ $((sum % 3)) -eq 0 ]] && ((p++))\n\
    \            done\n        done\n    done\n    echo $p\n}\n\ncandidate() {\n \
    \   get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020445
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    n=$1\n    max_i=$(( n - 2 ))\n    max_j=$(( n - 1 ))\n    max_k=$n\n\
    \    # return the max number of triples\n    echo $(( max_i * max_j * max_k ))\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020445
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    let n=$1\n    i=0\n    a=($(seq 1 $n | xargs -n1 | awk '{print $1*$1-$1+1}'))\n\
    \    for (( i=0; i<n-2; i++ )); do\n        for (( j=i+1; j<n-1; j++ )); do\n\
    \            for (( k=j+1; k<n; k++ )); do\n                if [[ $((a[i]+a[j]+a[k]))\
    \ -eq 0 ]]; then\n                    let count=count+1\n                fi\n\
    \            done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n\
    \    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020445
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local triple_count=0\n    for ((i=1; i<n; i++)); do\n\
    \        for ((j=i+1; j<n; j++)); do\n            for ((k=j+1; k<n; k++)); do\n\
    \                if [[ $((i*i-i+1+j*j-j+1+k*k-k+1)) -eq 0 ]]; then\n         \
    \           triple_count=$((triple_count+1))\n                fi\n           \
    \ done\n        done\n    done\n    echo $triple_count\n}\n\ncandidate() {\n \
    \   get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020445
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=\"$1\"\n    local c=0\n    local a=()\n    local j=0\n    local\
    \ k=0\n    let n--\n    for i in $(seq 0 $n); do\n        let a[i]=i*i-i+1\n \
    \   done\n    for i in $(seq 0 $n); do\n        for j in $(seq $((i+1)) $n); do\n\
    \            for k in $(seq $((j+1)) $n); do\n                if (( (a[i]+a[j]+a[k])%3\
    \ == 0 )); then\n                    ((c++))\n                fi\n           \
    \ done\n        done\n    done\n    echo $c\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020445
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local array_length=$1\n    local triple_array=\"\"\n    local triple_len=0\n\
    \    local triple_value=0\n    local max_triple_value=0\n    local max_triple_num=0\n\
    \    local is_multiple_of_3=false\n    local i=0\n    local j=0\n    local k=0\n\
    \    local array_i=0\n    local array_j=0\n    local array_k=0\n    for ((i=1;\
    \ i<array_length; i++)); do\n        for ((j=i+1; j<array_length; j++)); do\n\
    \            for ((k=j+1; k<array_length; k++)); do\n                triple_array[0]=$((i*i-i+1))\n\
    \                triple_array[1]=$((j*j-j+1))\n                triple_array[2]=$((k*k-k+1))\n\
    \                triple_len=${#triple_array[@]}\n                is_multiple_of_3=false\n\
    \                triple_value=0\n                for ((l=0; l<triple_len; l++));\
    \ do\n                    triple_value=$((triple_value+triple_array[l]))\n   \
    \             done\n                if [[ $((triple_value%3)) -eq 0 ]]; then\n\
    \                    is_multiple_of_3=true\n                fi\n             \
    \   if $is_multiple_of_3; then\n                    # echo \"${triple_array[0]}\
    \ ${triple_array[1]} ${triple_array[2]}\"\n                    if [[ $triple_value\
    \ -gt $max_triple_value ]]; then\n                        max_triple_value=$triple_value\n\
    \                        max_triple_num=1\n                    elif [[ $triple_value\
    \ -eq $max_triple_value ]]; then\n                        max_triple_num=$((max_triple_num+1))\n\
    \                    fi\n                fi\n            done\n        done\n\
    \    done\n    echo $max_triple_num\n}\n\ncandidate() {\n    get_max_triples \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[\
    \ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[\
    \ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020445
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local i j k n=1\n    local -a a; declare -p a > /dev/null 2>&1 || local\
    \ -a a\n    for ((i=0; i<$1; i++)); do a[i]=$(( i*i - i + 1 )); done\n    for\
    \ ((i=0; i<$1-2; i++)); do\n        for ((j=i+1; j<$1-1; j++)); do\n         \
    \   for ((k=j+1; k<$1; k++)); do\n                (( a[i] + a[j] + a[k] % 3 ==\
    \ 0 )) && (( n++ ))\n            done\n        done\n    done\n    echo $n\n}\n\
    \ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[\
    \ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020445
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n  local n=$1\n  local count=0\n  local i=0\n  local j=0\n  local k=0\n  local\
    \ sum=0\n  local a=()\n  #\n  if [ \"$n\" -ge \"3\" ]; then\n    # Generate an\
    \ array with the first n elements of sequence 1, 3, 7, 13, 21...\n    while [\
    \ \"$i\" -lt \"$n\" ]; do\n      let a[i]=i*i-i+1\n      let i=i+1\n    done\n\
    \    # now that we have the array, we can go through all possible combinations\
    \ of triples \n    # that satisfy the condition\n    for ((i=0; i<n-2; i++));\
    \ do\n      for ((j=i+1; j<n-1; j++)); do\n        for ((k=j+1; k<n; k++)); do\n\
    \          let sum=a[i]+a[j]+a[k]\n          if [ $((sum%3)) -eq 0 ]; then\n \
    \           let count=count+1\n          fi\n        done\n      done\n    done\n\
    \  fi\n  echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"\
    6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"\
    100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020445
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n  local n=$1\n  local a=\n  local i=0\n  local j=0\n  local k=0\n  local\
    \ sum=0\n  local valid_triples=0\n  for ((i=1; i<=n; i++)); do\n    a+=($(( i\
    \ * i - i + 1 )))\n  done\n  for ((i=0; i<n-2; i++)); do\n    for ((j=i+1; j<n-1;\
    \ j++)); do\n      for ((k=j+1; k<n; k++)); do\n        (( sum = a[i] + a[j] +\
    \ a[k] ))\n        if (( sum % 3 == 0 )); then\n          (( valid_triples++ ))\n\
    \        fi\n      done\n    done\n  done\n  echo $valid_triples\n}\n\ncandidate()\
    \ {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate\
    \ \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020445
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local IFS=$'\\n'\n    local -n __array=$2\n    local -i n=$1\n    local\
    \ -i i=0 j=0 k=0 counter=0\n    local -i temp=0\n    for ((i=1; i<n; i++)); do\n\
    \        __array[i]=$((i*i-i+1))\n    done\n    echo \"${__array[@]}\"\n    for\
    \ ((i=0; i<n-2; i++)); do\n        for ((j=i+1; j<n-1; j++)); do\n           \
    \ for ((k=j+1; k<n; k++)); do\n                let temp=__array[i]+__array[j]+__array[k]\n\
    \                if ((temp%3==0)); then\n                    ((counter++))\n \
    \               fi\n            done\n        done\n    done\n    echo \"The number\
    \ of triples is $counter\"\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp7azm2oak.sh: line 16: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660020445
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a\n    local ans=0\n    local j\n    local k\n\
    \    for ((i=1; i<n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n    for ((i=1;\
    \ i<n-1; i++)); do\n        ((j=i+1))\n        while ((j<n)); do\n           \
    \ ((k=j+1))\n            while ((k<n)); do\n                ((a[i]+a[j]+a[k]%3==0))\
    \ && ((ans++))\n                ((k++))\n            done\n            ((j++))\n\
    \        done\n    done\n    echo $ans\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020445
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    # Check that the number is valid\n    if [ $1 -lt 3 ]; then\n       \
    \ echo 0\n        return\n    fi\n    # Init the array with its elements\n   \
    \ declare -a array\n    for i in $(seq $1); do\n        j=$((i-1))\n        array[$j]=$((j*j-j+1))\n\
    \    done\n    # Get the number of triples\n    count=0\n    for i in $(seq 0\
    \ $((1+$1-3))); do\n        for j in $(seq $((i+1)) $((1+$1-2))); do\n       \
    \     for k in $(seq $((j+1)) $((1+$1-1))); do\n                if [ $((array[$i]+array[$j]+array[$k]))\
    \ -eq 0 ]; then\n                    ((count++))\n                fi\n       \
    \     done\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020445
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local sum=0;\n    local m=$1;\n    local count=0;\n    local i=0;\n \
    \   local j=0;\n    local k=0;\n    while [[ $i -lt $m ]]; do\n        while [[\
    \ $j -lt $m ]]; do\n            while [[ $k -lt $m ]]; do\n                if\
    \ [[ $i -lt $j && $j -lt $k ]]; then\n                    sum=$(( i*i - i + 1\
    \ + j*j - j + 1 + k*k - k + 1 ));\n                    if [[ $(( $sum % 3 )) -eq\
    \ 0 ]]; then\n                        count=$(( $count + 1 ));\n             \
    \       fi\n                fi\n                k=$(( $k + 1 ));\n           \
    \ done\n            j=$(( $j + 1 ));\n        done\n        i=$(( $i + 1 ));\n\
    \    done\n    echo $count;\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020445
