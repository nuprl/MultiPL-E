language: sh
name: HumanEval_105_by_length
results:
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n# -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\
    \ \n# -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n# return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n# If the array is\
    \ empty, return an empty array:\n# arr = []\n# return []\n# If the array has any\
    \ strange number ignore it:\n# arr = [1, -1 , 55] \n# -> sort arr -> [-1, 1, 55]\n\
    # -> reverse arr -> [55, 1, -1]\n# return = ['One']\n#\n# $1 is a space-separated\
    \ list\nby_length() {\n    for i in $1; do\n        echo \"$i\" | awk '{ printf(\"\
    %03d%s\\n\", length($0), $0); }'\n    done | sort -n | cut -c4-\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020427
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n# -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\
    \ \n# -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n# return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n# If the array is\
    \ empty, return an empty array:\n# arr = []\n# return []\n# If the array has any\
    \ strange number ignore it:\n# arr = [1, -1 , 55] \n# -> sort arr -> [-1, 1, 55]\n\
    # -> reverse arr -> [55, 1, -1]\n# return = ['One']\n#\n# $1 is a space-separated\
    \ list\nby_length() {\n    echo \"$*\" | awk '{\n        n = split($0, words,\
    \ \" \")\n        for (i = 1; i <= n; i++)\n            lengths[i] = length(words[i])\n\
    \        asort(lengths)\n        for (i = 1; i <= n; i++)\n            print words[lengths[i]]\n\
    \    }'\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One\
    \ One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\"\
    ) = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[\
    \ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020427
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n# -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\
    \ \n# -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n# return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n# If the array is\
    \ empty, return an empty array:\n# arr = []\n# return []\n# If the array has any\
    \ strange number ignore it:\n# arr = [1, -1 , 55] \n# -> sort arr -> [-1, 1, 55]\n\
    # -> reverse arr -> [55, 1, -1]\n# return = ['One']\n#\n# $1 is a space-separated\
    \ list\nby_length() {\n  # sorts lines with first word of length $1\n  grep \"\
    ^.\\{$1\\} \" | sort -r\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three\
    \ Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'grep: Invalid content of \{\}

    '
  stdout: ''
  timestamp: 1660020427
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n# -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\
    \ \n# -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n# return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n# If the array is\
    \ empty, return an empty array:\n# arr = []\n# return []\n# If the array has any\
    \ strange number ignore it:\n# arr = [1, -1 , 55] \n# -> sort arr -> [-1, 1, 55]\n\
    # -> reverse arr -> [55, 1, -1]\n# return = ['One']\n#\n# $1 is a space-separated\
    \ list\nby_length() {\n\t# using while loop\n\t#echo \"$1\" | while read -r line\n\
    \t#do\n\t#\techo \"$line\"\n\t#done\n\t# using for loop\n\tfor word in $1\n\t\
    do\n\t\techo \"$word\"\n\tdone\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020427
- exit_code: -1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n# -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\
    \ \n# -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n# return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n# If the array is\
    \ empty, return an empty array:\n# arr = []\n# return []\n# If the array has any\
    \ strange number ignore it:\n# arr = [1, -1 , 55] \n# -> sort arr -> [-1, 1, 55]\n\
    # -> reverse arr -> [55, 1, -1]\n# return = ['One']\n#\n# $1 is a space-separated\
    \ list\nby_length() {\n  awk '{ printf(\"%02d %s\\n\", length($0), $0); }' |\n\
    \  sort -n |\n  cut -d\" \" -f2-\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=23 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=17 encoding='utf-8'>
  timestamp: 1660020432
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n# -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\
    \ \n# -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n# return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n# If the array is\
    \ empty, return an empty array:\n# arr = []\n# return []\n# If the array has any\
    \ strange number ignore it:\n# arr = [1, -1 , 55] \n# -> sort arr -> [-1, 1, 55]\n\
    # -> reverse arr -> [55, 1, -1]\n# return = ['One']\n#\n# $1 is a space-separated\
    \ list\nby_length() {\n    local -n array=${1}\n    echo ${array[@]} | tr ' '\
    \ '\\n' | awk '{\n        if ($1 ~ /^[0-9]+$/) {\n            if ($1 >= 1 && $1\
    \ <= 9) {\n                print $1\n            }\n        }\n    }' | sort -n\
    \ | awk '{\n        for (i = 1; i <= NF; i++) {\n            print $i\n      \
    \  }\n    }' | tac | awk '{\n        if ($1 == 1) {\n            print \"One\"\
    \n        } else if ($1 == 2) {\n            print \"Two\"\n        } else if\
    \ ($1 == 3) {\n            print \"Three\"\n        } else if ($1 == 4) {\n  \
    \          print \"Four\"\n        } else if ($1 == 5) {\n            print \"\
    Five\"\n        } else if ($1 == 6) {\n            print \"Six\"\n        } else\
    \ if ($1 == 7) {\n            print \"Seven\"\n        } else if ($1 == 8) {\n\
    \            print \"Eight\"\n        } else if ($1 == 9) {\n            print\
    \ \"Nine\"\n        }\n    }'\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphu58smub.sh: line 21: local: `2 1 1 4 5 8 2 3'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660020427
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n# -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\
    \ \n# -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n# return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n# If the array is\
    \ empty, return an empty array:\n# arr = []\n# return []\n# If the array has any\
    \ strange number ignore it:\n# arr = [1, -1 , 55] \n# -> sort arr -> [-1, 1, 55]\n\
    # -> reverse arr -> [55, 1, -1]\n# return = ['One']\n#\n# $1 is a space-separated\
    \ list\nby_length() {\n  echo \"$1\" | awk '{\n      for (i=1; i<=NF; i++) {\n\
    \        lengths[length($i)] = lengths[length($i)] \" \" $i\n      }\n    }\n\
    \    END {\n      for (len in lengths) {\n        print lengths[len]\n      }\n\
    \    }'\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One\
    \ One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\"\
    ) = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[\
    \ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020427
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n# -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\
    \ \n# -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n# return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n# If the array is\
    \ empty, return an empty array:\n# arr = []\n# return []\n# If the array has any\
    \ strange number ignore it:\n# arr = [1, -1 , 55] \n# -> sort arr -> [-1, 1, 55]\n\
    # -> reverse arr -> [55, 1, -1]\n# return = ['One']\n#\n# $1 is a space-separated\
    \ list\nby_length() {\n    for e in \"$@\"; do printf \"%s\\0\" \"$e\"; done |\n\
    \    sort -nz |\n    tr \"\\0\" \"\\n\"\n}\n\ncandidate() {\n    by_length \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"\
    Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020427
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n# -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\
    \ \n# -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n# return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n# If the array is\
    \ empty, return an empty array:\n# arr = []\n# return []\n# If the array has any\
    \ strange number ignore it:\n# arr = [1, -1 , 55] \n# -> sort arr -> [-1, 1, 55]\n\
    # -> reverse arr -> [55, 1, -1]\n# return = ['One']\n#\n# $1 is a space-separated\
    \ list\nby_length() {\n    echo \"$1\" | sort -nr -t ' ' -k1,1\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020427
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n# -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\
    \ \n# -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n# return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n# If the array is\
    \ empty, return an empty array:\n# arr = []\n# return []\n# If the array has any\
    \ strange number ignore it:\n# arr = [1, -1 , 55] \n# -> sort arr -> [-1, 1, 55]\n\
    # -> reverse arr -> [55, 1, -1]\n# return = ['One']\n#\n# $1 is a space-separated\
    \ list\nby_length() {\n  echo \"$1\" | awk '{\n    if (min == \"\") {\n      min\
    \ = length($1)\n    }\n    for (i = 1; i <= NF; i++) {\n      if (length($i) <\
    \ min) {\n        min = length($i)\n      }\n    }\n    for (i = 1; i <= NF; i++)\
    \ {\n      if (length($i) == min) {\n        print $i\n      }\n    }\n  }'\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020427
- exit_code: -1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n# -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\
    \ \n# -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n# return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n# If the array is\
    \ empty, return an empty array:\n# arr = []\n# return []\n# If the array has any\
    \ strange number ignore it:\n# arr = [1, -1 , 55] \n# -> sort arr -> [-1, 1, 55]\n\
    # -> reverse arr -> [55, 1, -1]\n# return = ['One']\n#\n# $1 is a space-separated\
    \ list\nby_length() {\n  awk '\n  {\n    len[NR] = length($0)\n  }\n  END {\n\
    \    for (i=1; i<=NR; i++) {\n      pos = i\n      for (j=i+1; j<=NR; j++) {\n\
    \        if (len[j] < len[pos]) {\n          pos = j\n        }\n      }\n   \
    \   if (pos != i) {\n        temp = $pos\n        $pos = $i\n        $i = temp\n\
    \        temp = len[pos]\n        len[pos] = len[i]\n        len[i] = temp\n \
    \     }\n    }\n    for (i=1; i<=NR; i++) {\n      print $i\n    }\n  }\n  '\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=14 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=3 encoding='utf-8'>
  timestamp: 1660020432
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n# -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\
    \ \n# -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n# return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n# If the array is\
    \ empty, return an empty array:\n# arr = []\n# return []\n# If the array has any\
    \ strange number ignore it:\n# arr = [1, -1 , 55] \n# -> sort arr -> [-1, 1, 55]\n\
    # -> reverse arr -> [55, 1, -1]\n# return = ['One']\n#\n# $1 is a space-separated\
    \ list\nby_length() {\n    local IFS=$'\\n'\n    echo \"$*\" | sort -rn -t' '\
    \ -k2\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One\
    \ One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\"\
    ) = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[\
    \ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020427
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n# -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\
    \ \n# -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n# return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n# If the array is\
    \ empty, return an empty array:\n# arr = []\n# return []\n# If the array has any\
    \ strange number ignore it:\n# arr = [1, -1 , 55] \n# -> sort arr -> [-1, 1, 55]\n\
    # -> reverse arr -> [55, 1, -1]\n# return = ['One']\n#\n# $1 is a space-separated\
    \ list\nby_length() {\n    [ \"$1\" = '-r' ] && {\n        REVERSE=true\n    \
    \    shift\n    }\n\n    local IFS=' '\n\n    for i in $*; do\n        printf\
    \ '%s\\n' \"${#i} $i\"\n    done | sort $([ \"$REVERSE\" ] && echo '-r') | {\n\
    \        while read -r length str; do\n            [ \"$length\" = -1 ] && break\n\
    \            printf '%s\\n' \"$str\"\n        done\n    }\n}\n\ncandidate() {\n\
    \    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020427
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n# -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\
    \ \n# -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n# return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n# If the array is\
    \ empty, return an empty array:\n# arr = []\n# return []\n# If the array has any\
    \ strange number ignore it:\n# arr = [1, -1 , 55] \n# -> sort arr -> [-1, 1, 55]\n\
    # -> reverse arr -> [55, 1, -1]\n# return = ['One']\n#\n# $1 is a space-separated\
    \ list\nby_length() {\n  local a res oIFS=\"$IFS\"\n  IFS=' '\n  set -- $1\n \
    \ IFS=\"$oIFS\"\n  res=()\n  while (( $# )); do\n    a=\n    while (( $# )); do\n\
    \      if [[ -z \"$a\" || ${#a} -eq ${#1} ]]; then\n        a=\"$a $1\"\n    \
    \    shift\n      else\n        break\n      fi\n    done\n    res+=(\"$a\")\n\
    \  done\n  echo \"${res[@]}\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020427
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n# -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\
    \ \n# -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n# return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n# If the array is\
    \ empty, return an empty array:\n# arr = []\n# return []\n# If the array has any\
    \ strange number ignore it:\n# arr = [1, -1 , 55] \n# -> sort arr -> [-1, 1, 55]\n\
    # -> reverse arr -> [55, 1, -1]\n# return = ['One']\n#\n# $1 is a space-separated\
    \ list\nby_length() {\n    local delim=\"$1\"\n    shift\n    local IFS=\"$delim\"\
    \n    echo \"$*\" | sort -n -t\"$delim\" -k1\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: "sort: multi-character tab \u20182 1 1 4 5 8 2 3\u2019\n"
  stdout: ''
  timestamp: 1660020427
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n# -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\
    \ \n# -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n# return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n# If the array is\
    \ empty, return an empty array:\n# arr = []\n# return []\n# If the array has any\
    \ strange number ignore it:\n# arr = [1, -1 , 55] \n# -> sort arr -> [-1, 1, 55]\n\
    # -> reverse arr -> [55, 1, -1]\n# return = ['One']\n#\n# $1 is a space-separated\
    \ list\nby_length() {\n    [[ \"$#\" -le 0 ]] && echo \"no arguments given\" &&\
    \ return 1\n    echo \"$@\" | awk '\n    {\n      print length, $0\n    }\n  \
    \  ' | sort -n | cut -d\" \" -f2-\n}\n\ncandidate() {\n    by_length \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020427
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n# -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\
    \ \n# -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n# return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n# If the array is\
    \ empty, return an empty array:\n# arr = []\n# return []\n# If the array has any\
    \ strange number ignore it:\n# arr = [1, -1 , 55] \n# -> sort arr -> [-1, 1, 55]\n\
    # -> reverse arr -> [55, 1, -1]\n# return = ['One']\n#\n# $1 is a space-separated\
    \ list\nby_length() {\n  local _LENGTHS=\"$1\" _ARRAY=()\n  for _LEN in $_LENGTHS;\
    \ do\n    for i in \"${!_LENGTHS[@]}\"; do\n      if [ \"${#_LENGTHS[$i]}\" -eq\
    \ \"$_LEN\" ]; then\n        _ARRAY+=(${_LENGTHS[$i]})\n      fi\n    done\n \
    \ done\n  echo \"${_ARRAY[@]}\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020427
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n# -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\
    \ \n# -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n# return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n# If the array is\
    \ empty, return an empty array:\n# arr = []\n# return []\n# If the array has any\
    \ strange number ignore it:\n# arr = [1, -1 , 55] \n# -> sort arr -> [-1, 1, 55]\n\
    # -> reverse arr -> [55, 1, -1]\n# return = ['One']\n#\n# $1 is a space-separated\
    \ list\nby_length() {\n    local IFS=$'\\n'\n    local -a array=( $( echo \"$*\"\
    \ | sed -e 's/  */\\n/g' | sort -r -n) )\n    echo \"${array[*]}\"\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020427
- exit_code: -1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n# -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\
    \ \n# -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n# return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n# If the array is\
    \ empty, return an empty array:\n# arr = []\n# return []\n# If the array has any\
    \ strange number ignore it:\n# arr = [1, -1 , 55] \n# -> sort arr -> [-1, 1, 55]\n\
    # -> reverse arr -> [55, 1, -1]\n# return = ['One']\n#\n# $1 is a space-separated\
    \ list\nby_length() {\n  awk '\n  {\n    printf \"%s%0*d\\n\", $0, length($1),\
    \ length($1)\n  }\n  ' |\n  sort -n |\n  cut -d' ' -f2-\n}\n\ncandidate() {\n\
    \    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=25 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=6 encoding='utf-8'>
  timestamp: 1660020432
- exit_code: -1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n# -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\
    \ \n# -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n# return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n# If the array is\
    \ empty, return an empty array:\n# arr = []\n# return []\n# If the array has any\
    \ strange number ignore it:\n# arr = [1, -1 , 55] \n# -> sort arr -> [-1, 1, 55]\n\
    # -> reverse arr -> [55, 1, -1]\n# return = ['One']\n#\n# $1 is a space-separated\
    \ list\nby_length() {\n    sort -n -k 1.5,1.5\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=11 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=4 encoding='utf-8'>
  timestamp: 1660020432
