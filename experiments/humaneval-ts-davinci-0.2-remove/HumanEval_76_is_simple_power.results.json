{
  "language": "ts",
  "name": "HumanEval_76_is_simple_power",
  "results": [
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n    return result % 1 === 0;\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(64, 4));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(216, 6));\nconsole.log(is_simple_power(343, 7));\nconsole.log(is_simple_power(512, 8));\nconsole.log(is_simple_power(729, 9));\nconsole.log(is_simple_power(1000, 10));\nconsole.log(is_simple_power(1331, 11));\nconsole.log(is_simple_power(1728, 12));\nconsole.log(is_simple_power(2197, 13));\nconsole.log(is_simple_power(2744, 14));\nconsole.log(is_simple_power(3375, 15));\nconsole.log(is_simple_power(4096, 16));\nconsole.log(is_simple_power(4913, 17));\nconsole.log(is_simple_power(5832, 18));\nconsole.log(is_simple_power(6859, 19));\nconsole.log(is_simple_power(8000, 20));\nconsole.log(is_simple_power(9261, 21));\nconsole.log(is_simple_power(10648, 22));\nconsole.log(is_simple_power(12167, 23));\nconsole.log(is_simple_power(13824, 24));\nconsole.log(is_simple_power(15625, 25));\nconsole.log(is_simple_power(17576, 26));\nconsole.log(is_simple_power(19683, 27));\nconsole.log(is_simple_power(21952, 28));\nconsole.log(is_simple_power(24389, 29));\nconsole.log(is_simple_power(27000, 30));\nconsole.log(is_simple_power(29791, 31));\nconsole.log(is_simple_power(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7jl_4xqz.ts(41,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334928
    },
    {
      "exit_code": 0,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result = false;\n  if (x === 1) {\n    result = true;\n  } else {\n    let i = 2;\n    while (i < x) {\n      if (Math.pow(n, i) === x) {\n        result = true;\n        break;\n      }\n      i++;\n    }\n  }\n  return result;\n}\n\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(5, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(28, 3));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(126, 5));\nconsole.log(is_simple_power(625, 5));\nconsole.log(is_simple_power(624, 5));\nconsole.log(is_simple_power(625, 5));\nconsole.log(is_simple_power(626, 5));\nconsole.log(is_simple_power(625, 5));\nconsole.log(is_simple_power(626, 5));\nconsole.log(is_simple_power(625, 5));\nconsole.log(is_simple_power(626, 5));\nconsole.log(is_simple_power(625, 5));\nconsole.log(is_simple_power(626, 5));\nconsole.log(is_simple_power(625, 5));\nconsole.log(is_simple_power(626, 5));\nconsole.log(is_simple_power(625, 5));\nconsole.log(is_simple_power(626, 5));\nconsole.log(is_simple_power(625, 5));\nconsole.log(is_simple_power(626, 5));\nconsole.log(is_simple_power(625, 5));\nconsole.log(is_simple_power(626, 5));\nconsole.log(is_simple_power(625, 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\nfalse\ntrue\ntrue\ntrue\nfalse\ntrue\nfalse\ntrue\nfalse\ntrue\nfalse\ntrue\nfalse\ntrue\nfalse\ntrue\nfalse\ntrue\nfalse\ntrue\nfalse\ntrue\nfalse\ntrue\nfalse\ntrue\n",
      "timestamp": 1660334928
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n    return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(1, 3));\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(1, 5));\nconsole.log(is_simple_power(1, 6));\nconsole.log(is_simple_power(1, 7));\nconsole.log(is_simple_power(1, 8));\nconsole.log(is_simple_power(1, 9));\nconsole.log(is_simple_power(1, 10));\nconsole.log(is_simple_power(1, 11));\nconsole.log(is_simple_power(1, 12));\nconsole.log(is_simple_power(1, 13));\nconsole.log(is_simple_power(1, 14));\nconsole.log(is_simple_power(1, 15));\nconsole.log(is_simple_power(1, 16));\nconsole.log(is_simple_power(1, 17));\nconsole.log(is_simple_power(1, 18));\nconsole.log(is_simple_power(1, 19));\nconsole.log(is_simple_power(1, 20));\nconsole.log(is_simple_power(1, 21));\nconsole.log(is_simple_power(1, 22));\nconsole.log(is_simple_power(1, 23));\nconsole.log(is_simple_power(1, 24));\nconsole.log(is_simple_power(1, 25));\nconsole.log(is_simple_power(1, 26));\nconsole.log(is_simple_power(1, 27));\nconsole.log(is_simple_power(1, 28));\nconsole.log(is_simple_power(1, 29));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpn5ld_ed9.js:47:12)\n    at Object.<anonymous> (/tmp/tmpn5ld_ed9.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334928
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result = Math.log(x) / Math.log(n);\n  return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(1, 3));\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(1, 5));\nconsole.log(is_simple_power(1, 6));\nconsole.log(is_simple_power(1, 7));\nconsole.log(is_simple_power(1, 8));\nconsole.log(is_simple_power(1, 9));\nconsole.log(is_simple_power(1, 10));\nconsole.log(is_simple_power(1, 11));\nconsole.log(is_simple_power(1, 12));\nconsole.log(is_simple_power(1, 13));\nconsole.log(is_simple_power(1, 14));\nconsole.log(is_simple_power(1, 15));\nconsole.log(is_simple_power(1, 16));\nconsole.log(is_simple_power(1, 17));\nconsole.log(is_simple_power(1, 18));\nconsole.log(is_simple_power(1, 19));\nconsole.log(is_simple_power(1, 20));\nconsole.log(is_simple_power(1, 21));\nconsole.log(is_simple_power(1, 22));\nconsole.log(is_simple_power(1, 23));\nconsole.log(is_simple_power(1, 24));\nconsole.log(is_simple_power(1, 25));\nconsole.log(is_simple_power(1, 26));\nconsole.log(is_simple_power(1, 27));\nconsole.log(is_simple_power(1, 28));\nconsole.log(is_simple_power(1, 29));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpmdzzbs_q.js:47:12)\n    at Object.<anonymous> (/tmp/tmpmdzzbs_q.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334928
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result = false;\n  let i = 0;\n  while (Math.pow(n, i) <= x) {\n    if (Math.pow(n, i) === x) {\n      result = true;\n    }\n    i++;\n  }\n  return result;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(5, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(216, 6));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(1, 3));\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(1, 5));\nconsole.log(is_simple_power(1, 6));\nconsole.log(is_simple_power(1, 7));\nconsole.log(is_simple_power(1, 8));\nconsole.log(is_simple_power(1, 9));\nconsole.log(is_simple_power(1, 10));\nconsole.log(is_simple_power(1, 11));\nconsole.log(is_simple_power(1, 12));\nconsole.log(is_simple_power(1, 13));\nconsole.log(is_simple_power(1, 14));\nconsole.log(is_simple_power(1, 15));\nconsole.log(is_simple_power(1, 16));\nconsole.log(is_simple_power(1, 17));\nconsole.log(is_simple_power(1, 18));\nconsole.log(is_simple_power(1, 19));\nconsole.log(is_simple_power(1, 20));\nconsole.log(is_simple_power(1, 21));\nconsole.log(is_simple_power(1, 22));\nconsole.log(is_simple_power(1, 23));\nconsole.log(is_simple_power(1, 24));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpludjwgzl.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334928
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n    return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(28, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpvm16i4wm.js:19:12)\n    at Object.<anonymous> (/tmp/tmpvm16i4wm.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334929
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result = Math.log(x) / Math.log(n);\n  return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(28, 3));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(126, 5));\nconsole.log(is_simple_power(625, 5));\nconsole.log(is_simple_power(626, 5));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(1, 3));\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(1, 5));\nconsole.log(is_simple_power(1, 6));\nconsole.log(is_simple_power(1, 7));\nconsole.log(is_simple_power(1, 8));\nconsole.log(is_simple_power(1, 9));\nconsole.log(is_simple_power(1, 10));\nconsole.log(is_simple_power(1, 11));\nconsole.log(is_simple_power(1, 12));\nconsole.log(is_simple_power(1, 13));\nconsole.log(is_simple_power(1, 14));\nconsole.log(is_simple_power(1, 15));\nconsole.log(is_simple_power(1, 16));\nconsole.log(is_simple_power(1, 17));\nconsole.log(is_simple_power(1, 18));\nconsole.log(is_simple_power(1, 19));\nconsole.log(is_simple_power(1, 20));\nconsole.log(is_simple_power(1, 21));\nconsole.log(is_simple_power(1, 22));\nconsole.log(is_simple_power(1, 23));\nconsole.log(is_simple_power(1, 24));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp2aukyq7m.js:47:12)\n    at Object.<anonymous> (/tmp/tmp2aukyq7m.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\nfalse\nfalse\ntrue\nfalse\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334929
    },
    {
      "exit_code": -1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result = false;\n  let power = 1;\n  while (power <= x) {\n    if (power === x) {\n      result = true;\n    }\n    power *= n;\n  }\n  return result;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(625, 5));\nconsole.log(is_simple_power(1, 5));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(0, 0));\nconsole.log(is_simple_power(1, 0));\nconsole.log(is_simple_power(0, 1));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(9, 2));\nconsole.log(is_simple_power(16, 2));\nconsole.log(is_simple_power(25, 2));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(32, 2));\nconsole.log(is_simple_power(64, 2));\nconsole.log(is_simple_power(81, 3));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(243, 3));\nconsole.log(is_simple_power(256, 2));\nconsole.log(is_simple_power(625, 5));\nconsole.log(is_simple_power(729, 3));\nconsole.log(is_simple_power(1000, 10));\nconsole.log(is_simple_power(1024, 2));\nconsole.log(is_simple_power(3125, 5));\nconsole.log(is_simple_power(7776, 6));\nconsole.log(is_simple_power(16807, 7));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "Timeout",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334943
    },
    {
      "exit_code": 0,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result: number = 1;\n    let i: number = 0;\n    while (result <= x) {\n        result = Math.pow(n, i);\n        if (result === x) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(9, 2));\nconsole.log(is_simple_power(64, 4));\nconsole.log(is_simple_power(65, 4));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(257, 4));\nconsole.log(is_simple_power(1024, 4));\nconsole.log(is_simple_power(1025, 4));\nconsole.log(is_simple_power(1024, 5));\nconsole.log(is_simple_power(1025, 5));\nconsole.log(is_simple_power(1024, 10));\nconsole.log(is_simple_power(1025, 10));\nconsole.log(is_simple_power(1024, 20));\nconsole.log(is_simple_power(1025, 20));\nconsole.log(is_simple_power(1024, 100));\nconsole.log(is_simple_power(1025, 100));\nconsole.log(is_simple_power(1024, 1000));\nconsole.log(is_simple_power(1025, 1000));\nconsole.log(is_simple_power(1024, 10000));\nconsole.log(is_simple_power(1025, 10000));\nconsole.log(is_simple_power(1024, 100000));\nconsole.log(is_simple_power(1025, 100000));\nconsole.log(is_simple_power(1024, 1000000));\nconsole.log(is_simple_power(1025, 1000000));\nconsole.log(is_simple_power(1024, 10000000));\nconsole.log(is_simple_power(1025, 10000000));\nconsole.log(is_simple_power(1024, 100000000));\nconsole.log(is_simple_power(1025, 100000000));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\nfalse\ntrue\nfalse\ntrue\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334928
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result = false;\n  for (let i = 1; i <= x; i++) {\n    if (Math.pow(n, i) === x) {\n      result = true;\n    }\n  }\n  return result;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(216, 6));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(1, 3));\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(1, 5));\nconsole.log(is_simple_power(1, 6));\nconsole.log(is_simple_power(1, 7));\nconsole.log(is_simple_power(1, 8));\nconsole.log(is_simple_power(1, 9));\nconsole.log(is_simple_power(1, 10));\nconsole.log(is_simple_power(1, 11));\nconsole.log(is_simple_power(1, 12));\nconsole.log(is_simple_power(1, 13));\nconsole.log(is_simple_power(1, 14));\nconsole.log(is_simple_power(1, 15));\nconsole.log(is_simple_power(1, 16));\nconsole.log(is_simple_power(1, 17));\nconsole.log(is_simple_power(1, 18));\nconsole.log(is_simple_power(1, 19));\nconsole.log(is_simple_power(1, 20));\nconsole.log(is_simple_power(1, 21));\nconsole.log(is_simple_power(1, 22));\nconsole.log(is_simple_power(1, 23));\nconsole.log(is_simple_power(1, 24));\nconsole.log(is_simple_power(1, 25));\nconsole.log(is_simple_power(1, 26));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpvmbrzeqn.js:57:12)\n    at Object.<anonymous> (/tmp/tmpvmbrzeqn.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334929
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let power = Math.log(x) / Math.log(n);\n  return Number.isInteger(power);\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(28, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpxh843tq8.js:19:12)\n    at Object.<anonymous> (/tmp/tmpxh843tq8.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334928
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n    return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(16, 2));\nconsole.log(is_simple_power(32, 2));\nconsole.log(is_simple_power(64, 2));\nconsole.log(is_simple_power(128, 2));\nconsole.log(is_simple_power(256, 2));\nconsole.log(is_simple_power(512, 2));\nconsole.log(is_simple_power(1024, 2));\nconsole.log(is_simple_power(2048, 2));\nconsole.log(is_simple_power(4096, 2));\nconsole.log(is_simple_power(8192, 2));\nconsole.log(is_simple_power(16384, 2));\nconsole.log(is_simple_power(32768, 2));\nconsole.log(is_simple_power(65536, 2));\nconsole.log(is_simple_power(131072, 2));\nconsole.log(is_simple_power(262144, 2));\nconsole.log(is_simple_power(524288, 2));\nconsole.log(is_simple_power(1048576, 2));\nconsole.log(is_simple_power(2097152, 2));\nconsole.log(is_simple_power(4194304, 2));\nconsole.log(is_simple_power(8388608, 2));\nconsole.log(is_simple_power(16777216, 2));\nconsole.log(is_simple_power(33554432, 2));\nconsole.log(is_simple_power(67108864, 2));\nconsole.log(is_simple_power(134217728, 2));\nconsole.log(is_simple_power(268435456, 2));\nconsole.log(is_simple_power(5368\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpkfevaso8.ts(40,1): error TS1005: ',' expected.\n../../../../tmp/tmpkfevaso8.ts(40,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334928
    },
    {
      "exit_code": -1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = false;\n    let i = 1;\n    while (n ** i <= x) {\n        if (n ** i === x) {\n            result = true;\n        }\n        i++;\n    }\n    return result;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(1, 3));\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(1, 5));\nconsole.log(is_simple_power(1, 6));\nconsole.log(is_simple_power(1, 7));\nconsole.log(is_simple_power(1, 8));\nconsole.log(is_simple_power(1, 9));\nconsole.log(is_simple_power(1, 10));\nconsole.log(is_simple_power(1, 11));\nconsole.log(is_simple_power(1, 12));\nconsole.log(is_simple_power(1, 13));\nconsole.log(is_simple_power(1, 14));\nconsole.log(is_simple_power(1, 15));\nconsole.log(is_simple_power(1, 16));\nconsole.log(is_simple_power(1, 17));\nconsole.log(is_simple_power(1, 18));\nconsole.log(is_simple_power(1, 19));\nconsole.log(is_simple_power(1, 20));\nconsole.log(is_simple_power(1, 21));\nconsole.log(is_simple_power(1, 22));\nconsole.log(is_simple_power(1, 23));\nconsole.log(is_simple_power(1, 24));\nconsole.log(is_simple_power(1, 25));\nconsole.log(is_simple_power(1, 26));\nconsole.log(is_simple_power(1, 27));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "Timeout",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\n",
      "timestamp": 1660334943
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let power = Math.log(x) / Math.log(n);\n    return Number.isInteger(power);\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(28, 3));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(256, 2));\nconsole.log(is_simple_power(256, 1));\nconsole.log(is_simple_power(1, 256));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 0));\nconsole.log(is_simple_power(0, 0));\nconsole.log(is_simple_power(0, 1));\nconsole.log(is_simple_power(0, 2));\nconsole.log(is_simple_power(0, 3));\nconsole.log(is_simple_power(0, 4));\nconsole.log(is_simple_power(0, 5));\nconsole.log(is_simple_power(0, 6));\nconsole.log(is_simple_power(0, 7));\nconsole.log(is_simple_power(0, 8));\nconsole.log(is_simple_power(0, 9));\nconsole.log(is_simple_power(0, 10));\nconsole.log(is_simple_power(0, 11));\nconsole.log(is_simple_power(0, 12));\nconsole.log(is_simple_power(0, 13));\nconsole.log(is_simple_power(0, 14));\nconsole.log(is_simple_power(0, 15));\nconsole.log(is_simple_power(0, 16));\nconsole.log(is_simple_power(0, 17));\nconsole.log(is_simple_power(0, 18));\nconsole.log(is_simple_power(0, 19));\nconsole.log(is_simple_power(0, 20));\nconsole.log(is_simple_power(0, 21));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpqipbjk2r.js:47:12)\n    at Object.<anonymous> (/tmp/tmpqipbjk2r.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\ntrue\ntrue\nfalse\ntrue\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334929
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result = Math.log(x) / Math.log(n);\n  return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(5, 125));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(4, 256));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(2, 1));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(2, 3));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 3));\nconsole.log(is_simple_power(3, 4));\nconsole.log(is_simple_power(4, 3));\nconsole.log(is_simple_power(4, 4));\nconsole.log(is_simple_power(4, 5));\nconsole.log(is_simple_power(5, 4));\nconsole.log(is_simple_power(5, 5));\nconsole.log(is_simple_power(5, 6));\nconsole.log(is_simple_power(6, 5));\nconsole.log(is_simple_power(6, 6));\nconsole.log(is_simple_power(6, 7));\nconsole.log(is_simple_power(7, 6));\nconsole.log(is_simple_power(7, 7));\nconsole.log(is_simple_power(7, 8));\nconsole.log(is_simple_power(8, 7));\nconsole.log(is_simple_power(8, 8));\nconsole.log(is_simple_power(8, 9));\nconsole.log(is_simple_power(9, 8));\nconsole.log(is_simple_power(9, 9));\nconsole.log(is_simple_power(9, 10));\nconsole.log(is_simple_power(10, 9));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp391jh97v.js:47:12)\n    at Object.<anonymous> (/tmp/tmp391jh97v.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\ntrue\nfalse\nfalse\ntrue\nfalse\ntrue\nfalse\nfalse\ntrue\nfalse\nfalse\ntrue\nfalse\nfalse\ntrue\nfalse\nfalse\ntrue\nfalse\nfalse\ntrue\nfalse\nfalse\ntrue\nfalse\nfalse\ntrue\nfalse\nfalse\n",
      "timestamp": 1660334929
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result = false;\n  if (x === 1) {\n    result = true;\n  } else {\n    let i = 2;\n    while (i < x) {\n      if (Math.pow(n, i) === x) {\n        result = true;\n        break;\n      }\n      i++;\n    }\n  }\n  return result;\n}\n\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(5, 1));\nconsole.log(is_simple_power(25, 5));\nconsole.log(is_simple_power(24, 4));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(30, 5));\nconsole.log(is_simple_power(64, 4));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(216, 6));\nconsole.log(is_simple_power(343, 7));\nconsole.log(is_simple_power(512, 8));\nconsole.log(is_simple_power(729, 9));\nconsole.log(is_simple_power(1000, 10));\nconsole.log(is_simple_power(1331, 11));\nconsole.log(is_simple_power(1728, 12));\nconsole.log(is_simple_power(2197, 13));\nconsole.log(is_simple_power(2744, 14));\nconsole.log(is_simple_power(3375, 15));\nconsole.log(is_simple_power(4096, 16));\nconsole.log(is_simple_power(4913, 17));\nconsole.log(is_simple_power(5832, 18));\nconsole.log(is_simple_power(6859, 19));\nconsole.log(is_simple_power(8000, 20));\nconsole.log(is_simple_power(9261, 21));\nconsole.log(is\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmppcefifni.ts(50,1): error TS1005: ',' expected.\n../../../../tmp/tmppcefifni.ts(50,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334928
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n    return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(1, 3));\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(1, 5));\nconsole.log(is_simple_power(1, 6));\nconsole.log(is_simple_power(1, 7));\nconsole.log(is_simple_power(1, 8));\nconsole.log(is_simple_power(1, 9));\nconsole.log(is_simple_power(1, 10));\nconsole.log(is_simple_power(1, 11));\nconsole.log(is_simple_power(1, 12));\nconsole.log(is_simple_power(1, 13));\nconsole.log(is_simple_power(1, 14));\nconsole.log(is_simple_power(1, 15));\nconsole.log(is_simple_power(1, 16));\nconsole.log(is_simple_power(1, 17));\nconsole.log(is_simple_power(1, 18));\nconsole.log(is_simple_power(1, 19));\nconsole.log(is_simple_power(1, 20));\nconsole.log(is_simple_power(1, 21));\nconsole.log(is_simple_power(1, 22));\nconsole.log(is_simple_power(1, 23));\nconsole.log(is_simple_power(1, 24));\nconsole.log(is_simple_power(1, 25));\nconsole.log(is_simple_power(1, 26));\nconsole.log(is_simple_power(1, 27));\nconsole.log(is_simple_power(1, 28));\nconsole.log(is_simple_power(1, 29));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpn5ld_ed9.js:47:12)\n    at Object.<anonymous> (/tmp/tmpn5ld_ed9.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334928
    },
    {
      "exit_code": 0,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result = false;\n  let power = 1;\n  while (power < x) {\n    power *= n;\n  }\n  if (power === x) {\n    result = true;\n  }\n  return result;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(72, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\nfalse\n",
      "timestamp": 1660334929
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result: number = Math.log(x) / Math.log(n);\n  return Number.isInteger(result);\n}\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(28, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpz_tykds8.js:19:12)\n    at Object.<anonymous> (/tmp/tmpz_tykds8.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334929
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result = Math.log(x) / Math.log(n);\n  return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(5, 5));\nconsole.log(is_simple_power(121, 11));\nconsole.log(is_simple_power(100, 10));\nconsole.log(is_simple_power(36, 6));\nconsole.log(is_simple_power(72, 8));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(216, 6));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(343, 7));\nconsole.log(is_simple_power(1331, 11));\nconsole.log(is_simple_power(1728, 12));\nconsole.log(is_simple_power(2401, 13));\nconsole.log(is_simple_power(4096, 16));\nconsole.log(is_simple_power(6561, 17));\nconsole.log(is_simple_power(10000, 10));\nconsole.log(is_simple_power(14641, 11));\nconsole.log(is_simple_power(20736, 12));\nconsole.log(is_simple_power(28561, 13));\nconsole.log(is_simple_power(38416, 14));\nconsole.log(is_simple_power(50625, 15));\nconsole.log(is_simple_power(65536, 16));\nconsole.log(is_simple_power(83521, 17));\nconsole.log(is_simple_power(104976, 18));\nconsole.log(is_simple_power(130321, 19));\nconsole.log(is_simple_power(160000, 20));\nconsole.log(is_simple_power(194481, 21));\nconsole.log(is_simple_power(234256, 22));\nconsole.log(is_simple_power(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpiyrow1z2.ts(41,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334928
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n    return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(1024, 5));\nconsole.log(is_simple_power(2401, 7));\nconsole.log(is_simple_power(4096, 16));\nconsole.log(is_simple_power(50625, 5));\nconsole.log(is_simple_power(10000000000, 10));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 10));\nconsole.log(is_simple_power(1, 100));\nconsole.log(is_simple_power(1, 1000));\nconsole.log(is_simple_power(1, 10000));\nconsole.log(is_simple_power(1, 100000));\nconsole.log(is_simple_power(1, 1000000));\nconsole.log(is_simple_power(1, 10000000));\nconsole.log(is_simple_power(1, 100000000));\nconsole.log(is_simple_power(1, 1000000000));\nconsole.log(is_simple_power(1, 10000000000));\nconsole.log(is_simple_power(1, 100000000000));\nconsole.log(is_simple_power(1, 1000000000000));\nconsole.log(is_simple_power(1, 10000000000000));\nconsole.log(is_simple_power(1, 100000000000000));\nconsole.log(is_simple_power(1, 1000000000000000));\nconsole.log(is_simple_power(1, 10000000000000000));\nconsole.log(is_simple_power(1, 100000000000000000));\nconsole.log(is_simple_power(1, 1000000000000000000));\nconsole.log(is_simple_power(1, 10000000000000000000));\nconsole.log(is_simple_power(1, 100000000000000000000));\nconsole.log(is_simple_power(1, 1000000000000000000\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwubeqqk9.ts(40,1): error TS1005: ',' expected.\n../../../../tmp/tmpwubeqqk9.ts(40,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334928
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result: number = Math.log(x) / Math.log(n);\n    return result % 1 === 0;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(1024, 2));\nconsole.log(is_simple_power(1024, 3));\nconsole.log(is_simple_power(1024, 10));\nconsole.log(is_simple_power(1024, 1));\nconsole.log(is_simple_power(1, 1024));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(2, 1));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(2, 3));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 3));\nconsole.log(is_simple_power(3, 4));\nconsole.log(is_simple_power(4, 3));\nconsole.log(is_simple_power(4, 4));\nconsole.log(is_simple_power(4, 5));\nconsole.log(is_simple_power(5, 4));\nconsole.log(is_simple_power(5, 5));\nconsole.log(is_simple_power(5, 6));\nconsole.log(is_simple_power(6, 5));\nconsole.log(is_simple_power(6, 6));\nconsole.log(is_simple_power(6, 7));\nconsole.log(is_simple_power(7, 6));\nconsole.log(is_simple_power(7, 7));\nconsole.log(is_simple_power(7, 8));\nconsole.log(is_simple_power(8, 7));\nconsole.log(is_simple_power(8, 8));\nconsole.log(is_simple_power(8, 9));\nconsole.log(is_simple_power(9, 8));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmprqie8mmm.js:47:12)\n    at Object.<anonymous> (/tmp/tmprqie8mmm.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\nfalse\nfalse\nfalse\ntrue\nfalse\ntrue\nfalse\ntrue\nfalse\nfalse\ntrue\nfalse\nfalse\ntrue\nfalse\nfalse\ntrue\nfalse\nfalse\ntrue\nfalse\nfalse\ntrue\nfalse\nfalse\ntrue\nfalse\nfalse\n",
      "timestamp": 1660334929
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let i = 0;\n  while (Math.pow(n, i) < x) {\n    i++;\n  }\n  if (Math.pow(n, i) === x) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(216, 6));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(0, 0));\nconsole.log(is_simple_power(1, 0));\nconsole.log(is_simple_power(0, 1));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(1, 3));\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(1, 5));\nconsole.log(is_simple_power(1, 6));\nconsole.log(is_simple_power(1, 7));\nconsole.log(is_simple_power(1, 8));\nconsole.log(is_simple_power(1, 9));\nconsole.log(is_simple_power(1, 10));\nconsole.log(is_simple_power(1, 11));\nconsole.log(is_simple_power(1, 12));\nconsole.log(is_simple_power(1, 13));\nconsole.log(is_simple_power(1, 14));\nconsole.log(is_simple_power(1, 15));\nconsole.log(is_simple_power(1, 16));\nconsole.log(is_simple_power(1, 17));\nconsole.log(is_simple_power(1, 18));\nconsole.log(is_simple_power(1, 19));\nconsole.log(is_simple_power(1, 20));\nconsole.log(is_simple_power(1, 21));\nconsole.log(is_simple_power(1, 22));\nconsole.log(is_simple\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnshaqmcm.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmpnshaqmcm.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334928
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result = Math.log(x) / Math.log(n);\n  return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(5, 5));\nconsole.log(is_simple_power(121, 11));\nconsole.log(is_simple_power(100, 10));\nconsole.log(is_simple_power(256, 2));\nconsole.log(is_simple_power(48, 4));\nconsole.log(is_simple_power(10, 5));\nconsole.log(is_simple_power(625, 5));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(1, 3));\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(1, 5));\nconsole.log(is_simple_power(1, 6));\nconsole.log(is_simple_power(1, 7));\nconsole.log(is_simple_power(1, 8));\nconsole.log(is_simple_power(1, 9));\nconsole.log(is_simple_power(1, 10));\nconsole.log(is_simple_power(1, 11));\nconsole.log(is_simple_power(1, 12));\nconsole.log(is_simple_power(1, 13));\nconsole.log(is_simple_power(1, 14));\nconsole.log(is_simple_power(1, 15));\nconsole.log(is_simple_power(1, 16));\nconsole.log(is_simple_power(1, 17));\nconsole.log(is_simple_power(1, 18));\nconsole.log(is_simple_power(1, 19));\nconsole.log(is_simple_power(1, 20));\nconsole.log(is_simple_power(1, 21));\nconsole.log(is_simple_power(1, 22));\nconsole.log(is_simple_power(1, 23));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpkxu9z4ra.js:47:12)\n    at Object.<anonymous> (/tmp/tmpkxu9z4ra.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\ntrue\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334929
    },
    {
      "exit_code": 0,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result = false;\n  for (let i = 0; i < x; i++) {\n    if (Math.pow(n, i) === x) {\n      result = true;\n    }\n  }\n  return result;\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(9, 2));\nconsole.log(is_simple_power(16, 2));\nconsole.log(is_simple_power(16, 4));\nconsole.log(is_simple_power(16, 3));\nconsole.log(is_simple_power(81, 3));\nconsole.log(is_simple_power(81, 4));\nconsole.log(is_simple_power(81, 9));\nconsole.log(is_simple_power(64, 4));\nconsole.log(is_simple_power(64, 8));\nconsole.log(is_simple_power(64, 2));\nconsole.log(is_simple_power(64, 3));\nconsole.log(is_simple_power(64, 1));\nconsole.log(is_simple_power(64, 0));\nconsole.log(is_simple_power(64, -1));\nconsole.log(is_simple_power(64, -2));\nconsole.log(is_simple_power(64, -3));\nconsole.log(is_simple_power(64, -4));\nconsole.log(is_simple_power(64, -5));\nconsole.log(is_simple_power(64, -6));\nconsole.log(is_simple_power(64, -7));\nconsole.log(is_simple_power(64, -8));\nconsole.log(is_simple_power(64, -9));\nconsole.log(is_simple_power(64, -10));\nconsole.log(is_simple_power(64, -11));\nconsole.log(is_simple_power(64, -12));\nconsole.log(is_simple_power(64, -13));\nconsole.log(is_simple_power(64, -14));\nconsole.log(is_simple_power(64, -15));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\nfalse\ntrue\ntrue\nfalse\ntrue\nfalse\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334931
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let power = Math.log(x) / Math.log(n);\n  return power % 1 === 0;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(5, 5));\nconsole.log(is_simple_power(10, 2));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(24, 2));\nconsole.log(is_simple_power(256, 2));\nconsole.log(is_simple_power(625, 5));\nconsole.log(is_simple_power(243, 3));\nconsole.log(is_simple_power(16, 4));\nconsole.log(is_simple_power(81, 3));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(64, 2));\nconsole.log(is_simple_power(216, 6));\nconsole.log(is_simple_power(343, 7));\nconsole.log(is_simple_power(512, 2));\nconsole.log(is_simple_power(729, 3));\nconsole.log(is_simple_power(1000, 10));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(0, 0));\nconsole.log(is_simple_power(1, 0));\nconsole.log(is_simple_power(0, 1));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(1, 3));\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(1, 5));\nconsole.log(is_simple_power(1, 6));\nconsole.log(is_simple_power(1, 7));\nconsole.log(is_simple_power(1, 8));\nconsole.log(is_simple_power(1, 9));\nconsole.log(is_simple_power(1, 10));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp_zeecaja.js:48:12)\n    at Object.<anonymous> (/tmp/tmp_zeecaja.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\nfalse\nfalse\nfalse\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\ntrue\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\ntrue\nfalse\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334932
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result = Math.log(x) / Math.log(n);\n  return result % 1 === 0;\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(16, 4));\nconsole.log(is_simple_power(81, 3));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(1024, 2));\nconsole.log(is_simple_power(10, 10));\nconsole.log(is_simple_power(100, 10));\nconsole.log(is_simple_power(1000, 10));\nconsole.log(is_simple_power(10000, 10));\nconsole.log(is_simple_power(100000, 10));\nconsole.log(is_simple_power(1000000, 10));\nconsole.log(is_simple_power(10000000, 10));\nconsole.log(is_simple_power(100000000, 10));\nconsole.log(is_simple_power(1000000000, 10));\nconsole.log(is_simple_power(10000000000, 10));\nconsole.log(is_simple_power(100000000000, 10));\nconsole.log(is_simple_power(1000000000000, 10));\nconsole.log(is_simple_power(10000000000000, 10));\nconsole.log(is_simple_power(100000000000000, 10));\nconsole.log(is_simple_power(1000000000000000, 10));\nconsole.log(is_simple_power(10000000000000000, 10));\nconsole.log(is_simple_power(100000000000000000, 10));\nconsole.log(is_simple_power(1000000000000000000, 10));\nconsole.log(is_simple_power(10000000000000000000, 10));\nconsole.log(is_simple_power(100000000000000000000, 10));\nconsole.log(is_simple_power(1000000000000000000000, 10));\nconsole.log(is_simple_power(10000000000000000000000, 10));\nconsole.log(is_simple_power(100000000000000000000000, 10));\nconsole.log(is_simple_power(10000000000000000\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpfvbxvcq5.ts(40,1): error TS1005: ',' expected.\n../../../../tmp/tmpfvbxvcq5.ts(40,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334932
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = 0;\n    for (let i = 1; i < x; i++) {\n        result = Math.pow(n, i);\n        if (result === x) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(9, 2));\nconsole.log(is_simple_power(16, 2));\nconsole.log(is_simple_power(16, 4));\nconsole.log(is_simple_power(16, 5));\nconsole.log(is_simple_power(25, 5));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(27, 4));\nconsole.log(is_simple_power(27, 5));\nconsole.log(is_simple_power(27, 6));\nconsole.log(is_simple_power(27, 7));\nconsole.log(is_simple_power(27, 8));\nconsole.log(is_simple_power(27, 9));\nconsole.log(is_simple_power(27, 10));\nconsole.log(is_simple_power(27, 11));\nconsole.log(is_simple_power(27, 12));\nconsole.log(is_simple_power(27, 13));\nconsole.log(is_simple_power(27, 14));\nconsole.log(is_simple_power(27, 15));\nconsole.log(is_simple_power(27, 16));\nconsole.log(is_simple_power(27, 17));\nconsole.log(is_simple_power(27, 18));\nconsole.log(is_simple_power(27, 19));\nconsole.log(is_simple_power(27, 20));\nconsole.log(is_simple_power(27, 21));\nconsole.log(is_simple_power(27, 22));\nconsole.log(is_simple_power(27, 23));\nconsole.log(is_simple_power(27, 24));\nconsole.log(is_simple_power(27, 25));\nconsole.log(is_simple_power(27,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpua84t3xx.ts(46,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334932
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n    return result % 1 === 0;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(81, 3));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(8, 3));\nconsole.log(is_simple_power(8, 4));\nconsole.log(is_simple_power(8, 5));\nconsole.log(is_simple_power(8, 6));\nconsole.log(is_simple_power(8, 7));\nconsole.log(is_simple_power(8, 8));\nconsole.log(is_simple_power(8, 9));\nconsole.log(is_simple_power(8, 10));\nconsole.log(is_simple_power(8, 11));\nconsole.log(is_simple_power(8, 12));\nconsole.log(is_simple_power(8, 13));\nconsole.log(is_simple_power(8, 14));\nconsole.log(is_simple_power(8, 15));\nconsole.log(is_simple_power(8, 16));\nconsole.log(is_simple_power(8, 17));\nconsole.log(is_simple_power(8, 18));\nconsole.log(is_simple_power(8, 19));\nconsole.log(is_simple_power(8, 20));\nconsole.log(is_simple_power(8, 21));\nconsole.log(is_simple_power(8, 22));\nconsole.log(is_simple_power(8, 23));\nconsole.log(is_simple_power(8, 24));\nconsole.log(is_simple_power(8, 25));\nconsole.log(is_simple_power(8, 26));\nconsole.log(is_simple_power(8, 27));\nconsole.log(is_simple_power(8, 28));\nconsole.log(is_simple_power(8, 29));\nconsole.log(is_simple_power(8, 30));\nconsole.log(is_simple_power(8, 31));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp_ta2x1nk.js:48:12)\n    at Object.<anonymous> (/tmp/tmp_ta2x1nk.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334932
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n    return result % 1 === 0;\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(24, 4));\nconsole.log(is_simple_power(48, 4));\nconsole.log(is_simple_power(121, 11));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(1, 3));\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(1, 5));\nconsole.log(is_simple_power(1, 6));\nconsole.log(is_simple_power(1, 7));\nconsole.log(is_simple_power(1, 8));\nconsole.log(is_simple_power(1, 9));\nconsole.log(is_simple_power(1, 10));\nconsole.log(is_simple_power(1, 11));\nconsole.log(is_simple_power(1, 12));\nconsole.log(is_simple_power(1, 13));\nconsole.log(is_simple_power(1, 14));\nconsole.log(is_simple_power(1, 15));\nconsole.log(is_simple_power(1, 16));\nconsole.log(is_simple_power(1, 17));\nconsole.log(is_simple_power(1, 18));\nconsole.log(is_simple_power(1, 19));\nconsole.log(is_simple_power(1, 20));\nconsole.log(is_simple_power(1, 21));\nconsole.log(is_simple_power(1, 22));\nconsole.log(is_simple_power(1, 23));\nconsole.log(is_simple_power(1, 24));\nconsole.log(is_simple_power(1, 25));\nconsole.log(is_simple_power(1, 26));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpv7whq05i.js:48:12)\n    at Object.<anonymous> (/tmp/tmpv7whq05i.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\nfalse\nfalse\ntrue\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334932
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n    return result % 1 === 0;\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(9, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpimkeh7qr.js:17:12)\n    at Object.<anonymous> (/tmp/tmpimkeh7qr.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\n",
      "timestamp": 1660334932
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n    return result % 1 === 0;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(10, 10));\nconsole.log(is_simple_power(10, 9));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(8, 1));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(1, 3));\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(1, 5));\nconsole.log(is_simple_power(1, 6));\nconsole.log(is_simple_power(1, 7));\nconsole.log(is_simple_power(1, 8));\nconsole.log(is_simple_power(1, 9));\nconsole.log(is_simple_power(1, 10));\nconsole.log(is_simple_power(1, 11));\nconsole.log(is_simple_power(1, 12));\nconsole.log(is_simple_power(1, 13));\nconsole.log(is_simple_power(1, 14));\nconsole.log(is_simple_power(1, 15));\nconsole.log(is_simple_power(1, 16));\nconsole.log(is_simple_power(1, 17));\nconsole.log(is_simple_power(1, 18));\nconsole.log(is_simple_power(1, 19));\nconsole.log(is_simple_power(1, 20));\nconsole.log(is_simple_power(1, 21));\nconsole.log(is_simple_power(1, 22));\nconsole.log(is_simple_power(1, 23));\nconsole.log(is_simple_power(1, 24));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpcfzjr7el.js:48:12)\n    at Object.<anonymous> (/tmp/tmpcfzjr7el.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\nfalse\nfalse\ntrue\nfalse\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334932
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let power = n;\n    while (power < x) {\n        power *= n;\n    }\n    return power === x;\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(24, 4));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpk1ei6eqx.js:28:12)\n    at Object.<anonymous> (/tmp/tmpk1ei6eqx.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\nfalse\n",
      "timestamp": 1660334932
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result = Math.log(x) / Math.log(n);\n  return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(24, 4));\nconsole.log(is_simple_power(48, 4));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpa34mw5pp.js:20:12)\n    at Object.<anonymous> (/tmp/tmpa34mw5pp.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\nfalse\nfalse\n",
      "timestamp": 1660334932
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n    return result % 1 === 0;\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(16, 2));\nconsole.log(is_simple_power(25, 5));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(81, 3));\nconsole.log(is_simple_power(64, 4));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(243, 3));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(27, 4));\nconsole.log(is_simple_power(27, 5));\nconsole.log(is_simple_power(27, 6));\nconsole.log(is_simple_power(27, 7));\nconsole.log(is_simple_power(27, 8));\nconsole.log(is_simple_power(27, 9));\nconsole.log(is_simple_power(27, 10));\nconsole.log(is_simple_power(27, 11));\nconsole.log(is_simple_power(27, 12));\nconsole.log(is_simple_power(27, 13));\nconsole.log(is_simple_power(27, 14));\nconsole.log(is_simple_power(27, 15));\nconsole.log(is_simple_power(27, 16));\nconsole.log(is_simple_power(27, 17));\nconsole.log(is_simple_power(27, 18));\nconsole.log(is_simple_power(27, 19));\nconsole.log(is_simple_power(27, 20));\nconsole.log(is_simple_power(27, 21));\nconsole.log(is_simple_power(27, 22));\nconsole.log(is_simple_power(27, 23));\nconsole.log(is_simple_power(27, 24));\nconsole.log(is_simple_power(27, 25));\nconsole.log(is_simple_power(27, 26));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpa4emsalz.js:48:12)\n    at Object.<anonymous> (/tmp/tmpa4emsalz.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\nfalse\nfalse\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334932
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result = false;\n  for (let i = 1; i <= x; i++) {\n    if (Math.pow(n, i) === x) {\n      result = true;\n    }\n  }\n  return result;\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(9, 2));\nconsole.log(is_simple_power(16, 2));\nconsole.log(is_simple_power(16, 4));\nconsole.log(is_simple_power(16, 5));\nconsole.log(is_simple_power(25, 5));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(27, 4));\nconsole.log(is_simple_power(27, 5));\nconsole.log(is_simple_power(27, 6));\nconsole.log(is_simple_power(27, 7));\nconsole.log(is_simple_power(27, 8));\nconsole.log(is_simple_power(27, 9));\nconsole.log(is_simple_power(27, 10));\nconsole.log(is_simple_power(27, 11));\nconsole.log(is_simple_power(27, 12));\nconsole.log(is_simple_power(27, 13));\nconsole.log(is_simple_power(27, 14));\nconsole.log(is_simple_power(27, 15));\nconsole.log(is_simple_power(27, 16));\nconsole.log(is_simple_power(27, 17));\nconsole.log(is_simple_power(27, 18));\nconsole.log(is_simple_power(27, 19));\nconsole.log(is_simple_power(27, 20));\nconsole.log(is_simple_power(27, 21));\nconsole.log(is_simple_power(27, 22));\nconsole.log(is_simple_power(27, 23));\nconsole.log(is_simple_power(27, 24));\nconsole.log(is_simple_power(27, 25));\nconsole.log(is_simple_power(27, 26));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpio04xcb6.js:57:12)\n    at Object.<anonymous> (/tmp/tmpio04xcb6.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\nfalse\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334932
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n    return result % 1 === 0;\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(28, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpe0ykx5wk.js:19:12)\n    at Object.<anonymous> (/tmp/tmpe0ykx5wk.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334932
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result = Math.log(x) / Math.log(n);\n  return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(81, 3));\nconsole.log(is_simple_power(8, 3));\nconsole.log(is_simple_power(81, 2));\nconsole.log(is_simple_power(8, 4));\nconsole.log(is_simple_power(81, 4));\nconsole.log(is_simple_power(8, 5));\nconsole.log(is_simple_power(81, 5));\nconsole.log(is_simple_power(8, 6));\nconsole.log(is_simple_power(81, 6));\nconsole.log(is_simple_power(8, 7));\nconsole.log(is_simple_power(81, 7));\nconsole.log(is_simple_power(8, 8));\nconsole.log(is_simple_power(81, 8));\nconsole.log(is_simple_power(8, 9));\nconsole.log(is_simple_power(81, 9));\nconsole.log(is_simple_power(8, 10));\nconsole.log(is_simple_power(81, 10));\nconsole.log(is_simple_power(8, 11));\nconsole.log(is_simple_power(81, 11));\nconsole.log(is_simple_power(8, 12));\nconsole.log(is_simple_power(81, 12));\nconsole.log(is_simple_power(8, 13));\nconsole.log(is_simple_power(81, 13));\nconsole.log(is_simple_power(8, 14));\nconsole.log(is_simple_power(81, 14));\nconsole.log(is_simple_power(8, 15));\nconsole.log(is_simple_power(81, 15));\nconsole.log(is_simple_power(8, 16));\nconsole.log(is_simple_power(81, 16));\nconsole.log(is_simple_power(8, 17));\nconsole.log(is_simple_power(81, 17));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp92c9kk75.js:47:12)\n    at Object.<anonymous> (/tmp/tmp92c9kk75.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\ntrue\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334932
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n    return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(16, 4));\nconsole.log(is_simple_power(81, 3));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(625, 5));\nconsole.log(is_simple_power(2401, 7));\nconsole.log(is_simple_power(24, 5));\nconsole.log(is_simple_power(25, 5));\nconsole.log(is_simple_power(26, 5));\nconsole.log(is_simple_power(27, 5));\nconsole.log(is_simple_power(28, 5));\nconsole.log(is_simple_power(29, 5));\nconsole.log(is_simple_power(30, 5));\nconsole.log(is_simple_power(31, 5));\nconsole.log(is_simple_power(32, 5));\nconsole.log(is_simple_power(33, 5));\nconsole.log(is_simple_power(34, 5));\nconsole.log(is_simple_power(35, 5));\nconsole.log(is_simple_power(36, 5));\nconsole.log(is_simple_power(37, 5));\nconsole.log(is_simple_power(38, 5));\nconsole.log(is_simple_power(39, 5));\nconsole.log(is_simple_power(40, 5));\nconsole.log(is_simple_power(41, 5));\nconsole.log(is_simple_power(42, 5));\nconsole.log(is_simple_power(43, 5));\nconsole.log(is_simple_power(44, 5));\nconsole.log(is_simple_power(45, 5));\nconsole.log(is_simple_power(46, 5));\nconsole.log(is_simple_power(47, 5));\nconsole.log(is_simple_power(48, 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp82n82cer.js:47:12)\n    at Object.<anonymous> (/tmp/tmp82n82cer.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\nfalse\ntrue\ntrue\ntrue\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334932
    },
    {
      "exit_code": 0,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result = false;\n  for (let i = 0; i < x; i++) {\n    if (Math.pow(n, i) === x) {\n      result = true;\n    }\n  }\n  return result;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(1024, 5));\nconsole.log(is_simple_power(1024, 2));\nconsole.log(is_simple_power(1024, 10));\nconsole.log(is_simple_power(1024, 1));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 10));\nconsole.log(is_simple_power(1, 0));\nconsole.log(is_simple_power(0, 0));\nconsole.log(is_simple_power(0, 1));\nconsole.log(is_simple_power(0, 10));\nconsole.log(is_simple_power(10, 0));\nconsole.log(is_simple_power(10, 1));\nconsole.log(is_simple_power(10, 10));\nconsole.log(is_simple_power(10, 2));\nconsole.log(is_simple_power(10, 3));\nconsole.log(is_simple_power(10, 4));\nconsole.log(is_simple_power(10, 5));\nconsole.log(is_simple_power(10, 6));\nconsole.log(is_simple_power(10, 7));\nconsole.log(is_simple_power(10, 8));\nconsole.log(is_simple_power(10, 9));\nconsole.log(is_simple_power(10, 10));\nconsole.log(is_simple_power(10, 11));\nconsole.log(is_simple_power(10, 12));\nconsole.log(is_simple_power(10, 13));\nconsole.log(is_simple_power(10, 14));\nconsole.log(is_simple_power(10, 15));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\nfalse\ntrue\nfalse\nfalse\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334932
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result: number = Math.log(x) / Math.log(n);\n    return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(64, 4));\nconsole.log(is_simple_power(70, 10));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpdee2dt7l.js:18:12)\n    at Object.<anonymous> (/tmp/tmpdee2dt7l.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\nfalse\n",
      "timestamp": 1660334932
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result = false;\n  for (let i = 1; i <= x; i++) {\n    if (Math.pow(n, i) === x) {\n      result = true;\n    }\n  }\n  return result;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(5, 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpj4j0kx_r.js:30:12)\n    at Object.<anonymous> (/tmp/tmpj4j0kx_r.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334932
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  const log = Math.log(x) / Math.log(n);\n  return log % 1 === 0;\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(28, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpy64efw33.js:19:12)\n    at Object.<anonymous> (/tmp/tmpy64efw33.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334932
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n    return Number.isInteger(result);\n}\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(1, 3));\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(1, 5));\nconsole.log(is_simple_power(1, 6));\nconsole.log(is_simple_power(1, 7));\nconsole.log(is_simple_power(1, 8));\nconsole.log(is_simple_power(1, 9));\nconsole.log(is_simple_power(1, 10));\nconsole.log(is_simple_power(1, 11));\nconsole.log(is_simple_power(1, 12));\nconsole.log(is_simple_power(1, 13));\nconsole.log(is_simple_power(1, 14));\nconsole.log(is_simple_power(1, 15));\nconsole.log(is_simple_power(1, 16));\nconsole.log(is_simple_power(1, 17));\nconsole.log(is_simple_power(1, 18));\nconsole.log(is_simple_power(1, 19));\nconsole.log(is_simple_power(1, 20));\nconsole.log(is_simple_power(1, 21));\nconsole.log(is_simple_power(1, 22));\nconsole.log(is_simple_power(1, 23));\nconsole.log(is_simple_power(1, 24));\nconsole.log(is_simple_power(1, 25));\nconsole.log(is_simple_power(1, 26));\nconsole.log(is_simple_power(1, 27));\nconsole.log(is_simple_power(1, 28));\nconsole.log(is_simple_power(1, 29));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmprxx20n0v.js:48:12)\n    at Object.<anonymous> (/tmp/tmprxx20n0v.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334932
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result = Math.log(x) / Math.log(n);\n  return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(28, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmprzp2b4cu.js:19:12)\n    at Object.<anonymous> (/tmp/tmprzp2b4cu.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334932
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n    return result % 1 === 0;\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(24, 4));\nconsole.log(is_simple_power(48, 4));\nconsole.log(is_simple_power(256, 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8bj54lpb.js:21:12)\n    at Object.<anonymous> (/tmp/tmp8bj54lpb.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\nfalse\nfalse\ntrue\n",
      "timestamp": 1660334935
    },
    {
      "exit_code": 0,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let power = 1;\n    while (power < x) {\n        power *= n;\n    }\n    return power === x;\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(9, 2));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(28, 3));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(126, 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\nfalse\ntrue\nfalse\ntrue\nfalse\n",
      "timestamp": 1660334935
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n    return result % 1 === 0;\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(16, 2));\nconsole.log(is_simple_power(25, 5));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(81, 3));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(27, 4));\nconsole.log(is_simple_power(27, 5));\nconsole.log(is_simple_power(27, 6));\nconsole.log(is_simple_power(27, 7));\nconsole.log(is_simple_power(27, 8));\nconsole.log(is_simple_power(27, 9));\nconsole.log(is_simple_power(27, 10));\nconsole.log(is_simple_power(27, 11));\nconsole.log(is_simple_power(27, 12));\nconsole.log(is_simple_power(27, 13));\nconsole.log(is_simple_power(27, 14));\nconsole.log(is_simple_power(27, 15));\nconsole.log(is_simple_power(27, 16));\nconsole.log(is_simple_power(27, 17));\nconsole.log(is_simple_power(27, 18));\nconsole.log(is_simple_power(27, 19));\nconsole.log(is_simple_power(27, 20));\nconsole.log(is_simple_power(27, 21));\nconsole.log(is_simple_power(27, 22));\nconsole.log(is_simple_power(27, 23));\nconsole.log(is_simple_power(27, 24));\nconsole.log(is_simple_power(27, 25));\nconsole.log(is_simple_power(27, 26));\nconsole.log(is_simple_power(27, 27));\nconsole.log(is_simple_power(27, 28));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp26qk8xg8.js:48:12)\n    at Object.<anonymous> (/tmp/tmp26qk8xg8.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\ntrue\nfalse\n",
      "timestamp": 1660334935
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = false;\n    let i = 1;\n    while (n ** i <= x) {\n        if (n ** i === x) {\n            result = true;\n        }\n        i++;\n    }\n    return result;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(256, 2));\nconsole.log(is_simple_power(1024, 10));\nconsole.log(is_simple_power(1024, 2));\nconsole.log(is_simple_power(1024, 5));\nconsole.log(is_simple_power(1024, 8));\nconsole.log(is_simple_power(1024, 16));\nconsole.log(is_simple_power(1024, 32));\nconsole.log(is_simple_power(1024, 64));\nconsole.log(is_simple_power(1024, 128));\nconsole.log(is_simple_power(1024, 256));\nconsole.log(is_simple_power(1024, 512));\nconsole.log(is_simple_power(1024, 1024));\nconsole.log(is_simple_power(1024, 2048));\nconsole.log(is_simple_power(1024, 4096));\nconsole.log(is_simple_power(1024, 8192));\nconsole.log(is_simple_power(1024, 16384));\nconsole.log(is_simple_power(1024, 32768));\nconsole.log(is_simple_power(1024, 65536));\nconsole.log(is_simple_power(1024, 131072));\nconsole.log(is_simple_power(1024, 262144));\nconsole.log(is_simple_power(1024, 524288));\nconsole.log(is_simple_power(1024, 1048576));\nconsole.log(is_simple_power(1024, 2097152));\nconsole.log(is_simple_power(1024, 4194304));\nconsole.log(is_simple_power(1024, 8388608));\nconsole.log(is_simple_power(1024, 1677\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmppylzw5vi.ts(46,1): error TS1005: ',' expected.\n../../../../tmp/tmppylzw5vi.ts(46,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334935
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n    return result % 1 === 0;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(5, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(216, 6));\nconsole.log(is_simple_power(1024, 2));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(1, 3));\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(1, 5));\nconsole.log(is_simple_power(1, 6));\nconsole.log(is_simple_power(1, 7));\nconsole.log(is_simple_power(1, 8));\nconsole.log(is_simple_power(1, 9));\nconsole.log(is_simple_power(1, 10));\nconsole.log(is_simple_power(1, 11));\nconsole.log(is_simple_power(1, 12));\nconsole.log(is_simple_power(1, 13));\nconsole.log(is_simple_power(1, 14));\nconsole.log(is_simple_power(1, 15));\nconsole.log(is_simple_power(1, 16));\nconsole.log(is_simple_power(1, 17));\nconsole.log(is_simple_power(1, 18));\nconsole.log(is_simple_power(1, 19));\nconsole.log(is_simple_power(1, 20));\nconsole.log(is_simple_power(1, 21));\nconsole.log(is_simple_power(1, 22));\nconsole.log(is_simple_power(1, 23));\nconsole.log(is_simple_power(1, 24));\nconsole.log(is_simple_power(1, 25));\nconsole.log(is_simple_power(1, 26));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpjp6qipeo.js:48:12)\n    at Object.<anonymous> (/tmp/tmpjp6qipeo.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\nfalse\nfalse\ntrue\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334935
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n    return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(28, 3));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(1, 3));\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(1, 5));\nconsole.log(is_simple_power(1, 6));\nconsole.log(is_simple_power(1, 7));\nconsole.log(is_simple_power(1, 8));\nconsole.log(is_simple_power(1, 9));\nconsole.log(is_simple_power(1, 10));\nconsole.log(is_simple_power(1, 11));\nconsole.log(is_simple_power(1, 12));\nconsole.log(is_simple_power(1, 13));\nconsole.log(is_simple_power(1, 14));\nconsole.log(is_simple_power(1, 15));\nconsole.log(is_simple_power(1, 16));\nconsole.log(is_simple_power(1, 17));\nconsole.log(is_simple_power(1, 18));\nconsole.log(is_simple_power(1, 19));\nconsole.log(is_simple_power(1, 20));\nconsole.log(is_simple_power(1, 21));\nconsole.log(is_simple_power(1, 22));\nconsole.log(is_simple_power(1, 23));\nconsole.log(is_simple_power(1, 24));\nconsole.log(is_simple_power(1, 25));\nconsole.log(is_simple_power(1, 26));\nconsole.log(is_simple_power(1, 27));\nconsole.log(is_simple_power(1, 28));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp68m1y9nl.js:47:12)\n    at Object.<anonymous> (/tmp/tmp68m1y9nl.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334935
    },
    {
      "exit_code": 0,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = false;\n    for (let i = 0; i < x; i++) {\n        if (Math.pow(n, i) === x) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(16, 2));\nconsole.log(is_simple_power(25, 5));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(625, 5));\nconsole.log(is_simple_power(24, 4));\nconsole.log(is_simple_power(64, 4));\nconsole.log(is_simple_power(216, 6));\nconsole.log(is_simple_power(512, 8));\nconsole.log(is_simple_power(729, 9));\nconsole.log(is_simple_power(1000, 10));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(1, 3));\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(1, 5));\nconsole.log(is_simple_power(1, 6));\nconsole.log(is_simple_power(1, 7));\nconsole.log(is_simple_power(1, 8));\nconsole.log(is_simple_power(1, 9));\nconsole.log(is_simple_power(1, 10));\nconsole.log(is_simple_power(1, 11));\nconsole.log(is_simple_power(1, 12));\nconsole.log(is_simple_power(1, 13));\nconsole.log(is_simple_power(1, 14));\nconsole.log(is_simple_power(1, 15));\nconsole.log(is_simple_power(1, 16));\nconsole.log(is_simple_power(1, 17));\nconsole.log(is_simple_power(1, 18));\nconsole.log(is_simple_power(1, 19));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334935
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let i = 1;\n    while (Math.pow(n, i) <= x) {\n        if (Math.pow(n, i) === x) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(1, 3));\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(1, 5));\nconsole.log(is_simple_power(1, 6));\nconsole.log(is_simple_power(1, 7));\nconsole.log(is_simple_power(1, 8));\nconsole.log(is_simple_power(1, 9));\nconsole.log(is_simple_power(1, 10));\nconsole.log(is_simple_power(1, 11));\nconsole.log(is_simple_power(1, 12));\nconsole.log(is_simple_power(1, 13));\nconsole.log(is_simple_power(1, 14));\nconsole.log(is_simple_power(1, 15));\nconsole.log(is_simple_power(1, 16));\nconsole.log(is_simple_power(1, 17));\nconsole.log(is_simple_power(1, 18));\nconsole.log(is_simple_power(1, 19));\nconsole.log(is_simple_power(1, 20));\nconsole.log(is_simple_power(1, 21));\nconsole.log(is_simple_power(1, 22));\nconsole.log(is_simple_power(1, 23));\nconsole.log(is_simple_power(1, 24));\nconsole.log(is_simple_power(1, 25));\nconsole.log(is_simple_power(1, 26));\nconsole.log(is_simple_power(1,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpzycg4dwc.ts(46,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334935
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result = false;\n  let i = 0;\n  while (i < x) {\n    if (Math.pow(n, i) === x) {\n      result = true;\n    }\n    i++;\n  }\n  return result;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(5, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(216, 6));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(0, 0));\nconsole.log(is_simple_power(1, 0));\nconsole.log(is_simple_power(0, 1));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(1, 3));\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(1, 5));\nconsole.log(is_simple_power(1, 6));\nconsole.log(is_simple_power(1, 7));\nconsole.log(is_simple_power(1, 8));\nconsole.log(is_simple_power(1, 9));\nconsole.log(is_simple_power(1, 10));\nconsole.log(is_simple_power(1, 11));\nconsole.log(is_simple_power(1, 12));\nconsole.log(is_simple_power(1, 13));\nconsole.log(is_simple_power(1, 14));\nconsole.log(is_simple_power(1, 15));\nconsole.log(is_simple_power(1, 16));\nconsole.log(is_simple_power(1, 17));\nconsole.log(is_simple_power(1, 18));\nconsole.log(is_simple_power(1, 19));\nconsole.log(is_simple_power(1, 20));\nconsole.log(is_simple_power(1,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmq4tw6ms.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334935
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result = false;\n  let i = 1;\n  while (Math.pow(n, i) <= x) {\n    if (Math.pow(n, i) === x) {\n      result = true;\n    }\n    i++;\n  }\n  return result;\n}\n\nconsole.log(is_simple_power(8, 2)); // true\nconsole.log(is_simple_power(9, 2)); // false\nconsole.log(is_simple_power(27, 3)); // true\nconsole.log(is_simple_power(28, 3)); // false\nconsole.log(is_simple_power(125, 5)); // true\nconsole.log(is_simple_power(126, 5)); // false\nconsole.log(is_simple_power(243, 3)); // true\nconsole.log(is_simple_power(244, 3)); // false\nconsole.log(is_simple_power(256, 4)); // true\nconsole.log(is_simple_power(257, 4)); // false\nconsole.log(is_simple_power(1024, 2)); // true\nconsole.log(is_simple_power(1025, 2)); // false\nconsole.log(is_simple_power(1030, 2)); // false\nconsole.log(is_simple_power(1000000, 10)); // true\nconsole.log(is_simple_power(1000001, 10)); // false\nconsole.log(is_simple_power(10000000000, 10)); // true\nconsole.log(is_simple_power(10000000001, 10)); // false\nconsole.log(is_simple_power(100000000000, 10)); // false\nconsole.log(is_simple_power(1000000000000, 10)); // true\nconsole.log(is_simple_power(1000000000001, 10)); // false\nconsole.log(is_simple_power(10000000000000, 10)); // false\nconsole.log(is_simple_power(100000000000000, 10)); // true\nconsole.log(is_simple_power(100000000000001, 10)); // false\nconsole.log(is_simple_power(1000000000000000, 10)); // false\nconsole.log(is_simple_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3o2b2k2n.ts(42,1): error TS1005: ',' expected.\n../../../../tmp/tmp3o2b2k2n.ts(42,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334935
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n    return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(16, 4));\nconsole.log(is_simple_power(24, 4));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(256, 2));\nconsole.log(is_simple_power(256, 1));\nconsole.log(is_simple_power(256, 0));\nconsole.log(is_simple_power(256, -1));\nconsole.log(is_simple_power(256, -2));\nconsole.log(is_simple_power(256, -4));\nconsole.log(is_simple_power(256, -8));\nconsole.log(is_simple_power(256, -16));\nconsole.log(is_simple_power(256, -32));\nconsole.log(is_simple_power(256, -64));\nconsole.log(is_simple_power(256, -128));\nconsole.log(is_simple_power(256, -256));\nconsole.log(is_simple_power(256, -512));\nconsole.log(is_simple_power(256, -1024));\nconsole.log(is_simple_power(256, -2048));\nconsole.log(is_simple_power(256, -4096));\nconsole.log(is_simple_power(256, -8192));\nconsole.log(is_simple_power(256, -16384));\nconsole.log(is_simple_power(256, -32768));\nconsole.log(is_simple_power(256, -65536));\nconsole.log(is_simple_power(256, -131072));\nconsole.log(is_simple_power(256, -262144));\nconsole.log(is_simple_power(256, -524288));\nconsole.log(is_simple_power(256, -1048576));\nconsole.log(is_simple_power(256,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp69wqrwcv.ts(40,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334935
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let power = Math.log(x) / Math.log(n);\n    return power % 1 === 0;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(1024, 5));\nconsole.log(is_simple_power(1024, 2));\nconsole.log(is_simple_power(1024, 10));\nconsole.log(is_simple_power(1024, 1));\nconsole.log(is_simple_power(1024, 0));\nconsole.log(is_simple_power(1, 1024));\nconsole.log(is_simple_power(0, 1024));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 0));\nconsole.log(is_simple_power(0, 0));\nconsole.log(is_simple_power(0, 1));\nconsole.log(is_simple_power(1, -1));\nconsole.log(is_simple_power(1, -1024));\nconsole.log(is_simple_power(0, -1024));\nconsole.log(is_simple_power(-1, -1024));\nconsole.log(is_simple_power(-1, -1));\nconsole.log(is_simple_power(-1, 0));\nconsole.log(is_simple_power(-1, 1));\nconsole.log(is_simple_power(-1, 1024));\nconsole.log(is_simple_power(-0, 1024));\nconsole.log(is_simple_power(-0, 0));\nconsole.log(is_simple_power(-0, 1));\nconsole.log(is_simple_power(-0, -1));\nconsole.log(is_simple_power(-0, -1024));\nconsole.log(is_simple_power(-1024, -1));\nconsole.log(is_simple_power(-1024, 0));\nconsole.log(is_simple_power(-1024, 1));\nconsole.log(is_simple_power(-1024, 1024));\nconsole.log(is_simple_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvgplcnev.ts(42,1): error TS1005: ',' expected.\n../../../../tmp/tmpvgplcnev.ts(42,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334935
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let power = Math.log(x) / Math.log(n);\n    return power % 1 === 0;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(28, 3));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(8, 3));\nconsole.log(is_simple_power(8, 4));\nconsole.log(is_simple_power(8, 5));\nconsole.log(is_simple_power(8, 6));\nconsole.log(is_simple_power(8, 7));\nconsole.log(is_simple_power(8, 8));\nconsole.log(is_simple_power(8, 9));\nconsole.log(is_simple_power(8, 10));\nconsole.log(is_simple_power(8, 11));\nconsole.log(is_simple_power(8, 12));\nconsole.log(is_simple_power(8, 13));\nconsole.log(is_simple_power(8, 14));\nconsole.log(is_simple_power(8, 15));\nconsole.log(is_simple_power(8, 16));\nconsole.log(is_simple_power(8, 17));\nconsole.log(is_simple_power(8, 18));\nconsole.log(is_simple_power(8, 19));\nconsole.log(is_simple_power(8, 20));\nconsole.log(is_simple_power(8, 21));\nconsole.log(is_simple_power(8, 22));\nconsole.log(is_simple_power(8, 23));\nconsole.log(is_simple_power(8, 24));\nconsole.log(is_simple_power(8, 25));\nconsole.log(is_simple_power(8, 26));\nconsole.log(is_simple_power(8, 27));\nconsole.log(is_simple_power(8, 28));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpr6uo8i92.js:48:12)\n    at Object.<anonymous> (/tmp/tmpr6uo8i92.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334936
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result = Math.log(x) / Math.log(n);\n  return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(24, 4));\nconsole.log(is_simple_power(48, 4));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpa34mw5pp.js:20:12)\n    at Object.<anonymous> (/tmp/tmpa34mw5pp.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\nfalse\nfalse\n",
      "timestamp": 1660334932
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  return Math.log(x) / Math.log(n) % 1 === 0;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(64, 2));\nconsole.log(is_simple_power(256, 2));\nconsole.log(is_simple_power(1024, 2));\nconsole.log(is_simple_power(10, 2));\nconsole.log(is_simple_power(100, 2));\nconsole.log(is_simple_power(1000, 2));\nconsole.log(is_simple_power(10000, 2));\nconsole.log(is_simple_power(100000, 2));\nconsole.log(is_simple_power(1000000, 2));\nconsole.log(is_simple_power(10000000, 2));\nconsole.log(is_simple_power(100000000, 2));\nconsole.log(is_simple_power(1000000000, 2));\nconsole.log(is_simple_power(10000000000, 2));\nconsole.log(is_simple_power(100000000000, 2));\nconsole.log(is_simple_power(1000000000000, 2));\nconsole.log(is_simple_power(10000000000000, 2));\nconsole.log(is_simple_power(100000000000000, 2));\nconsole.log(is_simple_power(1000000000000000, 2));\nconsole.log(is_simple_power(10000000000000000, 2));\nconsole.log(is_simple_power(100000000000000000, 2));\nconsole.log(is_simple_power(1000000000000000000, 2));\nconsole.log(is_simple_power(10000000000000000000, 2));\nconsole.log(is_simple_power(100000000000000000000, 2));\nconsole.log(is_simple_power(1000000000000000000000, 2));\nconsole.log(is_simple_power(10000000000000000000000, 2));\nconsole.log(is\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpovv1fbc8.ts(40,1): error TS1005: ',' expected.\n../../../../tmp/tmpovv1fbc8.ts(40,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334935
    },
    {
      "exit_code": -1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result = false;\n  let i = 0;\n  while (Math.pow(n, i) <= x) {\n    if (Math.pow(n, i) === x) {\n      result = true;\n    }\n    i++;\n  }\n  return result;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(5, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(216, 6));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(0, 0));\nconsole.log(is_simple_power(1, 0));\nconsole.log(is_simple_power(0, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "Timeout",
      "stderr": "",
      "stdout": "true\nfalse\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334951
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let power = Math.log(x) / Math.log(n);\n  return power % 1 === 0;\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(28, 3));\nconsole.log(is_simple_power(81, 3));\nconsole.log(is_simple_power(82, 3));\nconsole.log(is_simple_power(243, 3));\nconsole.log(is_simple_power(244, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp3dzagr1v.js:23:12)\n    at Object.<anonymous> (/tmp/tmp3dzagr1v.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\nfalse\nfalse\ntrue\nfalse\n",
      "timestamp": 1660334936
    },
    {
      "exit_code": -1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result = false;\n  let i = 1;\n  while (Math.pow(n, i) <= x) {\n    if (Math.pow(n, i) === x) {\n      result = true;\n    }\n    i++;\n  }\n  return result;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(1024000000, 10));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "Timeout",
      "stderr": "",
      "stdout": "true\ntrue\nfalse\n",
      "timestamp": 1660334951
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  const root = Math.pow(x, 1 / n);\n  return root % 1 === 0;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(625, 4));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 100));\nconsole.log(is_simple_power(1, 1000000000000));\nconsole.log(is_simple_power(1, 100000000000000));\nconsole.log(is_simple_power(1, 10000000000000000));\nconsole.log(is_simple_power(1, 100000000000000000));\nconsole.log(is_simple_power(1, 1000000000000000000));\nconsole.log(is_simple_power(1, 1000000000000000000000));\nconsole.log(is_simple_power(1, 1000000000000000000000000));\nconsole.log(is_simple_power(1, 1000000000000000000000000000));\nconsole.log(is_simple_power(1, 1000000000000000000000000000000));\nconsole.log(is_simple_power(1, 1000000000000000000000000000000000));\nconsole.log(is_simple_power(1, 1000000000000000000000000000000000000));\nconsole.log(is_simple_power(1, 1000000000000000000000000000000000000000));\nconsole.log(is_simple_power(1, 1000000000000000000000000000000000000000000));\nconsole.log(is_simple_power(1, 1000000000000000000000000000000000000000000000));\nconsole.log(is_simple_power(1, 1000000000000000000000000000000000000000000000000));\nconsole.log(is_simple_power(1, 1000000000000000000000000000000000000000000000000000));\nconsole.log(is_simple_power(1, 1000000000000000000000000000000000000000000000000000000));\nconsole.log(is_simple_power(1, 1000000000000000000000000000000000000000000000000000000000));\nconsole.log(is_simple_power(1, 1000000000000000000000000000000000000000000000000000000000000));\nconsole.log(is_simple_power(1, 1000000000000000000000000000000000000000000000000000000000000000));\nconsole.log(is_simple_power(1, 1000000000000000000000000000000000000000000000000000000000000000000));\nconsole.log(is_simple_power(1, 1000000000000000000000000000000000000000000000000000000000000000000000));\nconsole.log(is_simple\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmphpv4iwro.ts(38,1): error TS1005: ',' expected.\n../../../../tmp/tmphpv4iwro.ts(38,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334936
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n    return result % 1 === 0;\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(28, 3));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(1024, 2));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(1, 3));\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(1, 5));\nconsole.log(is_simple_power(1, 6));\nconsole.log(is_simple_power(1, 7));\nconsole.log(is_simple_power(1, 8));\nconsole.log(is_simple_power(1, 9));\nconsole.log(is_simple_power(1, 10));\nconsole.log(is_simple_power(1, 11));\nconsole.log(is_simple_power(1, 12));\nconsole.log(is_simple_power(1, 13));\nconsole.log(is_simple_power(1, 14));\nconsole.log(is_simple_power(1, 15));\nconsole.log(is_simple_power(1, 16));\nconsole.log(is_simple_power(1, 17));\nconsole.log(is_simple_power(1, 18));\nconsole.log(is_simple_power(1, 19));\nconsole.log(is_simple_power(1, 20));\nconsole.log(is_simple_power(1, 21));\nconsole.log(is_simple_power(1, 22));\nconsole.log(is_simple_power(1, 23));\nconsole.log(is_simple_power(1, 24));\nconsole.log(is_simple_power(1, 25));\nconsole.log(is_simple_power(1, 26));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp7zv522zr.js:48:12)\n    at Object.<anonymous> (/tmp/tmp7zv522zr.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\nfalse\ntrue\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334936
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n    return result % 1 === 0;\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(16, 4));\nconsole.log(is_simple_power(81, 3));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(1024, 2));\nconsole.log(is_simple_power(1024, 10));\nconsole.log(is_simple_power(1024, 1));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(1, 3));\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(1, 5));\nconsole.log(is_simple_power(1, 6));\nconsole.log(is_simple_power(1, 7));\nconsole.log(is_simple_power(1, 8));\nconsole.log(is_simple_power(1, 9));\nconsole.log(is_simple_power(1, 10));\nconsole.log(is_simple_power(1, 11));\nconsole.log(is_simple_power(1, 12));\nconsole.log(is_simple_power(1, 13));\nconsole.log(is_simple_power(1, 14));\nconsole.log(is_simple_power(1, 15));\nconsole.log(is_simple_power(1, 16));\nconsole.log(is_simple_power(1, 17));\nconsole.log(is_simple_power(1, 18));\nconsole.log(is_simple_power(1, 19));\nconsole.log(is_simple_power(1, 20));\nconsole.log(is_simple_power(1, 21));\nconsole.log(is_simple_power(1, 22));\nconsole.log(is_simple_power(1, 23));\nconsole.log(is_simple_power(1, 24));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpn6lbb7v8.js:48:12)\n    at Object.<anonymous> (/tmp/tmpn6lbb7v8.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\nfalse\ntrue\ntrue\nfalse\nfalse\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334935
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let power = Math.log(x) / Math.log(n);\n    return power % 1 === 0;\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(28, 3));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(126, 5));\nconsole.log(is_simple_power(125, 3));\nconsole.log(is_simple_power(126, 3));\nconsole.log(is_simple_power(125, 6));\nconsole.log(is_simple_power(126, 6));\nconsole.log(is_simple_power(125, 125));\nconsole.log(is_simple_power(126, 126));\nconsole.log(is_simple_power(125, 1));\nconsole.log(is_simple_power(126, 1));\nconsole.log(is_simple_power(1, 125));\nconsole.log(is_simple_power(1, 126));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(0, 0));\nconsole.log(is_simple_power(0, 1));\nconsole.log(is_simple_power(1, 0));\nconsole.log(is_simple_power(0, 0));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(0, 1));\nconsole.log(is_simple_power(1, 0));\nconsole.log(is_simple_power(0, 0));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(0, 1));\nconsole.log(is_simple_power(1, 0));\nconsole.log(is_simple_power(0, 0));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(0, 1));\nconsole.log(is_simple_power(1, 0));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpxewiz63u.js:48:12)\n    at Object.<anonymous> (/tmp/tmpxewiz63u.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\ntrue\ntrue\nfalse\nfalse\ntrue\ntrue\nfalse\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\ntrue\n",
      "timestamp": 1660334936
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result = x;\n  let count = 0;\n  while (result % n === 0) {\n    result /= n;\n    count++;\n  }\n  return result === 1;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(1024, 2));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 3));\nconsole.log(is_simple_power(81, 3));\nconsole.log(is_simple_power(81, 4));\nconsole.log(is_simple_power(81, 5));\nconsole.log(is_simple_power(243, 3));\nconsole.log(is_simple_power(243, 5));\nconsole.log(is_simple_power(243, 1));\nconsole.log(is_simple_power(3, 3));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(3, 4));\nconsole.log(is_simple_power(3, 5));\nconsole.log(is_simple_power(3, 6));\nconsole.log(is_simple_power(3, 7));\nconsole.log(is_simple_power(3, 8));\nconsole.log(is_simple_power(3, 9));\nconsole.log(is_simple_power(3, 10));\nconsole.log(is_simple_power(3, 11));\nconsole.log(is_simple_power(3, 12));\nconsole.log(is_simple_power(3, 13));\nconsole.log(is_simple_power(3, 14));\nconsole.log(is_simple_power(3, 15));\nconsole.log(is_simple_power(3, 16));\nconsole.log(is_simple_power(3, 17));\nconsole.log(is_simple_power(3, 18));\nconsole.log(is_simple_power(3,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmple8magbr.ts(46,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334938
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = false;\n    let i = 0;\n    while (Math.pow(n, i) <= x) {\n        if (Math.pow(n, i) === x) {\n            result = true;\n        }\n        i++;\n    }\n    return result;\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(9, 2));\nconsole.log(is_simple_power(16, 2));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(27, 4));\nconsole.log(is_simple_power(256, 2));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(256, 8));\nconsole.log(is_simple_power(256, 16));\nconsole.log(is_simple_power(256, 32));\nconsole.log(is_simple_power(256, 64));\nconsole.log(is_simple_power(256, 128));\nconsole.log(is_simple_power(256, 256));\nconsole.log(is_simple_power(256, 512));\nconsole.log(is_simple_power(256, 1024));\nconsole.log(is_simple_power(256, 2048));\nconsole.log(is_simple_power(256, 4096));\nconsole.log(is_simple_power(256, 8192));\nconsole.log(is_simple_power(256, 16384));\nconsole.log(is_simple_power(256, 32768));\nconsole.log(is_simple_power(256, 65536));\nconsole.log(is_simple_power(256, 131072));\nconsole.log(is_simple_power(256, 262144));\nconsole.log(is_simple_power(256, 524288));\nconsole.log(is_simple_power(256, 1048576));\nconsole.log(is_simple_power(256, 2097152));\nconsole.log(is_simple_power(256, 4194304));\nconsole.log(is_simple_power(256, 8388608));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7jkng4rh.ts(45,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334938
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let power = Math.log(x) / Math.log(n);\n    return power % 1 === 0;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(5, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(216, 6));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(1, 3));\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(1, 5));\nconsole.log(is_simple_power(1, 6));\nconsole.log(is_simple_power(1, 7));\nconsole.log(is_simple_power(1, 8));\nconsole.log(is_simple_power(1, 9));\nconsole.log(is_simple_power(1, 10));\nconsole.log(is_simple_power(1, 11));\nconsole.log(is_simple_power(1, 12));\nconsole.log(is_simple_power(1, 13));\nconsole.log(is_simple_power(1, 14));\nconsole.log(is_simple_power(1, 15));\nconsole.log(is_simple_power(1, 16));\nconsole.log(is_simple_power(1, 17));\nconsole.log(is_simple_power(1, 18));\nconsole.log(is_simple_power(1, 19));\nconsole.log(is_simple_power(1, 20));\nconsole.log(is_simple_power(1, 21));\nconsole.log(is_simple_power(1, 22));\nconsole.log(is_simple_power(1, 23));\nconsole.log(is_simple_power(1, 24));\nconsole.log(is_simple_power(1, 25));\nconsole.log(is_simple_power(1, 26));\nconsole.log(is_simple_power(1, 27));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpnox6y1oo.js:48:12)\n    at Object.<anonymous> (/tmp/tmpnox6y1oo.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\nfalse\nfalse\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334938
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result = false;\n  let i = 0;\n  while (i < x) {\n    if (Math.pow(n, i) === x) {\n      result = true;\n    }\n    i++;\n  }\n  return result;\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(256, 8));\nconsole.log(is_simple_power(25, 5));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(125, 3));\nconsole.log(is_simple_power(243, 3));\nconsole.log(is_simple_power(243, 5));\nconsole.log(is_simple_power(1024, 10));\nconsole.log(is_simple_power(1024, 5));\nconsole.log(is_simple_power(1024, 2));\nconsole.log(is_simple_power(1024, 1));\nconsole.log(is_simple_power(1024, 0));\nconsole.log(is_simple_power(1024, -1));\nconsole.log(is_simple_power(1024, -2));\nconsole.log(is_simple_power(1024, -5));\nconsole.log(is_simple_power(1024, -10));\nconsole.log(is_simple_power(1024, -20));\nconsole.log(is_simple_power(1024, -100));\nconsole.log(is_simple_power(1024, -1000));\nconsole.log(is_simple_power(1024, -10000));\nconsole.log(is_simple_power(1024, -100000));\nconsole.log(is_simple_power(1024, -1000000));\nconsole.log(is_simple_power(1024, -10000000));\nconsole.log(is_simple_power(1024, -100000000));\nconsole.log(is_simple_power(1024, -1000000000));\nconsole.log(is_simple_power(1024, -10000000000));\nconsole.log(is\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpcm4f77b3.ts(46,1): error TS1005: ',' expected.\n../../../../tmp/tmpcm4f77b3.ts(46,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334938
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let power = Math.log(x) / Math.log(n);\n    return Number.isInteger(power);\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(1024, 2));\nconsole.log(is_simple_power(1024, 10));\nconsole.log(is_simple_power(1024, 1));\nconsole.log(is_simple_power(1, 1024));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 0));\nconsole.log(is_simple_power(0, 1));\nconsole.log(is_simple_power(0, 0));\nconsole.log(is_simple_power(1, -1));\nconsole.log(is_simple_power(1, -1024));\nconsole.log(is_simple_power(-1, 1));\nconsole.log(is_simple_power(-1, -1));\nconsole.log(is_simple_power(-1, -1024));\nconsole.log(is_simple_power(-1024, -1));\nconsole.log(is_simple_power(-1024, 1));\nconsole.log(is_simple_power(-1024, -1024));\nconsole.log(is_simple_power(-1024, 1024));\nconsole.log(is_simple_power(1024, -1024));\nconsole.log(is_simple_power(1024, 1024));\nconsole.log(is_simple_power(0, -1024));\nconsole.log(is_simple_power(0, 1024));\nconsole.log(is_simple_power(-1024, 0));\nconsole.log(is_simple_power(1024, 0));\nconsole.log(is_simple_power(0, 0));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(1, 3));\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(1, 5));\nconsole.log(is_simple\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9cebh6tf.ts(42,1): error TS1005: ',' expected.\n../../../../tmp/tmp9cebh6tf.ts(42,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334938
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result = false;\n  let i = 0;\n  while (Math.pow(n, i) <= x) {\n    if (Math.pow(n, i) === x) {\n      result = true;\n    }\n    i++;\n  }\n  return result;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(5, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(216, 6));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(1, 3));\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(1, 5));\nconsole.log(is_simple_power(1, 6));\nconsole.log(is_simple_power(1, 7));\nconsole.log(is_simple_power(1, 8));\nconsole.log(is_simple_power(1, 9));\nconsole.log(is_simple_power(1, 10));\nconsole.log(is_simple_power(1, 11));\nconsole.log(is_simple_power(1, 12));\nconsole.log(is_simple_power(1, 13));\nconsole.log(is_simple_power(1, 14));\nconsole.log(is_simple_power(1, 15));\nconsole.log(is_simple_power(1, 16));\nconsole.log(is_simple_power(1, 17));\nconsole.log(is_simple_power(1, 18));\nconsole.log(is_simple_power(1, 19));\nconsole.log(is_simple_power(1, 20));\nconsole.log(is_simple_power(1, 21));\nconsole.log(is_simple_power(1, 22));\nconsole.log(is_simple_power(1, 23));\nconsole.log(is_simple_power(1, 24));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpludjwgzl.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334928
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let power = Math.log(x) / Math.log(n);\n    return power % 1 === 0;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(5, 125));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(4, 256));\nconsole.log(is_simple_power(4, 3));\nconsole.log(is_simple_power(64, 4));\nconsole.log(is_simple_power(5, 27));\nconsole.log(is_simple_power(27, 5));\nconsole.log(is_simple_power(27, 27));\nconsole.log(is_simple_power(27, 28));\nconsole.log(is_simple_power(27, 29));\nconsole.log(is_simple_power(27, 30));\nconsole.log(is_simple_power(27, 31));\nconsole.log(is_simple_power(27, 32));\nconsole.log(is_simple_power(27, 33));\nconsole.log(is_simple_power(27, 34));\nconsole.log(is_simple_power(27, 35));\nconsole.log(is_simple_power(27, 36));\nconsole.log(is_simple_power(27, 37));\nconsole.log(is_simple_power(27, 38));\nconsole.log(is_simple_power(27, 39));\nconsole.log(is_simple_power(27, 40));\nconsole.log(is_simple_power(27, 41));\nconsole.log(is_simple_power(27, 42));\nconsole.log(is_simple_power(27, 43));\nconsole.log(is_simple_power(27, 44));\nconsole.log(is_simple_power(27, 45));\nconsole.log(is_simple_power(27, 46));\nconsole.log(is_simple_power(27, 47));\nconsole.log(is_simple_power(27, 48));\nconsole.log(is_simple_power(27, 49));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp74jqbwsf.js:48:12)\n    at Object.<anonymous> (/tmp/tmp74jqbwsf.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\ntrue\nfalse\nfalse\ntrue\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334939
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = false;\n    let i = 0;\n    while (Math.pow(n, i) <= x) {\n        if (Math.pow(n, i) === x) {\n            result = true;\n        }\n        i++;\n    }\n    return result;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(216, 6));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(0, 0));\nconsole.log(is_simple_power(1, 0));\nconsole.log(is_simple_power(0, 1));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(1, 3));\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(1, 5));\nconsole.log(is_simple_power(1, 6));\nconsole.log(is_simple_power(1, 7));\nconsole.log(is_simple_power(1, 8));\nconsole.log(is_simple_power(1, 9));\nconsole.log(is_simple_power(1, 10));\nconsole.log(is_simple_power(1, 11));\nconsole.log(is_simple_power(1, 12));\nconsole.log(is_simple_power(1, 13));\nconsole.log(is_simple_power(1, 14));\nconsole.log(is_simple_power(1, 15));\nconsole.log(is_simple_power(1, 16));\nconsole.log(is_simple_power(1, 17));\nconsole.log(is_simple_power(1, 18));\nconsole.log(is_simple_power(1, 19));\nconsole.log(is_simple_power(1, 20));\nconsole.log(is_simple_power(1, 21));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpujzhhdm4.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334939
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n    return result % 1 === 0;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(72, 3));\nconsole.log(is_simple_power(100, 10));\nconsole.log(is_simple_power(100, 1));\nconsole.log(is_simple_power(100, 2));\nconsole.log(is_simple_power(100, 3));\nconsole.log(is_simple_power(100, 4));\nconsole.log(is_simple_power(100, 5));\nconsole.log(is_simple_power(100, 6));\nconsole.log(is_simple_power(100, 7));\nconsole.log(is_simple_power(100, 8));\nconsole.log(is_simple_power(100, 9));\nconsole.log(is_simple_power(100, 10));\nconsole.log(is_simple_power(100, 11));\nconsole.log(is_simple_power(100, 12));\nconsole.log(is_simple_power(100, 13));\nconsole.log(is_simple_power(100, 14));\nconsole.log(is_simple_power(100, 15));\nconsole.log(is_simple_power(100, 16));\nconsole.log(is_simple_power(100, 17));\nconsole.log(is_simple_power(100, 18));\nconsole.log(is_simple_power(100, 19));\nconsole.log(is_simple_power(100, 20));\nconsole.log(is_simple_power(100, 21));\nconsole.log(is_simple_power(100, 22));\nconsole.log(is_simple_power(100, 23));\nconsole.log(is_simple_power(100, 24));\nconsole.log(is_simple_power(100, 25));\nconsole.log(is_simple_power(100, 26));\nconsole.log(is_simple_power(100, 27));\nconsole.log(is_simple_power(100, 28));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpeetxwieq.js:48:12)\n    at Object.<anonymous> (/tmp/tmpeetxwieq.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334939
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let power = Math.log(x) / Math.log(n);\n  return Number.isInteger(power);\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(28, 3));\nconsole.log(is_simple_power(81, 3));\nconsole.log(is_simple_power(82, 3));\nconsole.log(is_simple_power(243, 3));\nconsole.log(is_simple_power(244, 3));\nconsole.log(is_simple_power(256, 2));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(256, 8));\nconsole.log(is_simple_power(256, 16));\nconsole.log(is_simple_power(256, 32));\nconsole.log(is_simple_power(256, 64));\nconsole.log(is_simple_power(256, 128));\nconsole.log(is_simple_power(256, 256));\nconsole.log(is_simple_power(256, 512));\nconsole.log(is_simple_power(256, 1024));\nconsole.log(is_simple_power(256, 2048));\nconsole.log(is_simple_power(256, 4096));\nconsole.log(is_simple_power(256, 8192));\nconsole.log(is_simple_power(256, 16384));\nconsole.log(is_simple_power(256, 32768));\nconsole.log(is_simple_power(256, 65536));\nconsole.log(is_simple_power(256, 131072));\nconsole.log(is_simple_power(256, 262144));\nconsole.log(is_simple_power(256, 524288));\nconsole.log(is_simple_power(256, 1048576));\nconsole.log(is_simple_power(256, 2097152));\nconsole.log(is_simple_power(256, 4194304));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp88k6mvt8.js:46:12)\n    at Object.<anonymous> (/tmp/tmp88k6mvt8.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\ntrue\nfalse\ntrue\ntrue\nfalse\ntrue\nfalse\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334939
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = false;\n    let i = 0;\n    while (Math.pow(n, i) <= x) {\n        if (Math.pow(n, i) === x) {\n            result = true;\n        }\n        i++;\n    }\n    return result;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(28, 3));\nconsole.log(is_simple_power(25, 5));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(126, 5));\nconsole.log(is_simple_power(625, 5));\nconsole.log(is_simple_power(626, 5));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(1, 3));\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(1, 5));\nconsole.log(is_simple_power(1, 6));\nconsole.log(is_simple_power(1, 7));\nconsole.log(is_simple_power(1, 8));\nconsole.log(is_simple_power(1, 9));\nconsole.log(is_simple_power(1, 10));\nconsole.log(is_simple_power(1, 11));\nconsole.log(is_simple_power(1, 12));\nconsole.log(is_simple_power(1, 13));\nconsole.log(is_simple_power(1, 14));\nconsole.log(is_simple_power(1, 15));\nconsole.log(is_simple_power(1, 16));\nconsole.log(is_simple_power(1, 17));\nconsole.log(is_simple_power(1, 18));\nconsole.log(is_simple_power(1, 19));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp734s5ex4.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334939
    },
    {
      "exit_code": -1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = false;\n    let i = 0;\n    while (Math.pow(n, i) <= x) {\n        if (Math.pow(n, i) === x) {\n            result = true;\n        }\n        i++;\n    }\n    return result;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(125, 3));\nconsole.log(is_simple_power(243, 3));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(256, 2));\nconsole.log(is_simple_power(78125, 5));\nconsole.log(is_simple_power(78125, 3));\nconsole.log(is_simple_power(78125, 2));\nconsole.log(is_simple_power(78125, 1));\nconsole.log(is_simple_power(78125, 0));\nconsole.log(is_simple_power(78125, -1));\nconsole.log(is_simple_power(78125, -2));\nconsole.log(is_simple_power(78125, -3));\nconsole.log(is_simple_power(78125, -4));\nconsole.log(is_simple_power(78125, -5));\nconsole.log(is_simple_power(78125, -6));\nconsole.log(is_simple_power(78125, -7));\nconsole.log(is_simple_power(78125, -8));\nconsole.log(is_simple_power(78125, -9));\nconsole.log(is_simple_power(78125, -10));\nconsole.log(is_simple_power(78125, -11));\nconsole.log(is_simple_power(78125, -12));\nconsole.log(is_simple_power(78125, -13));\nconsole.log(is_simple_power(78125, -14));\nconsole.log(is_simple_power(78125, -15));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "Timeout",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\nfalse\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\n",
      "timestamp": 1660334955
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result: number = 1;\n    let i: number = 1;\n    while (result <= x) {\n        result = Math.pow(n, i);\n        if (result === x) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(16, 2));\nconsole.log(is_simple_power(256, 2));\nconsole.log(is_simple_power(1024, 2));\nconsole.log(is_simple_power(10, 10));\nconsole.log(is_simple_power(100, 10));\nconsole.log(is_simple_power(1000, 10));\nconsole.log(is_simple_power(10000, 10));\nconsole.log(is_simple_power(100000, 10));\nconsole.log(is_simple_power(1000000, 10));\nconsole.log(is_simple_power(10000000, 10));\nconsole.log(is_simple_power(100000000, 10));\nconsole.log(is_simple_power(1000000000, 10));\nconsole.log(is_simple_power(10000000000, 10));\nconsole.log(is_simple_power(100000000000, 10));\nconsole.log(is_simple_power(1000000000000, 10));\nconsole.log(is_simple_power(10000000000000, 10));\nconsole.log(is_simple_power(100000000000000, 10));\nconsole.log(is_simple_power(1000000000000000, 10));\nconsole.log(is_simple_power(10000000000000000, 10));\nconsole.log(is_simple_power(100000000000000000, 10));\nconsole.log(is_simple_power(1000000000000000000, 10));\nconsole.log(is_simple_power(10000000000000000000, 10));\nconsole.log(is_simple_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp5nnktl_x.ts(46,1): error TS1005: ',' expected.\n../../../../tmp/tmp5nnktl_x.ts(46,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334939
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result: number = Math.log(x) / Math.log(n);\n    return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(1024, 10));\nconsole.log(is_simple_power(1024, 5));\nconsole.log(is_simple_power(1024, 2));\nconsole.log(is_simple_power(1024, 1));\nconsole.log(is_simple_power(1024, 0));\nconsole.log(is_simple_power(1024, -1));\nconsole.log(is_simple_power(1024, -2));\nconsole.log(is_simple_power(1024, -3));\nconsole.log(is_simple_power(1024, -4));\nconsole.log(is_simple_power(1024, -5));\nconsole.log(is_simple_power(1024, -6));\nconsole.log(is_simple_power(1024, -7));\nconsole.log(is_simple_power(1024, -8));\nconsole.log(is_simple_power(1024, -9));\nconsole.log(is_simple_power(1024, -10));\nconsole.log(is_simple_power(1024, -11));\nconsole.log(is_simple_power(1024, -12));\nconsole.log(is_simple_power(1024, -13));\nconsole.log(is_simple_power(1024, -14));\nconsole.log(is_simple_power(1024, -15));\nconsole.log(is_simple_power(1024, -16));\nconsole.log(is_simple_power(1024, -17));\nconsole.log(is_simple_power(1024, -18));\nconsole.log(is_simple_power(1024, -19));\nconsole.log(is_simple_power(1024, -20));\nconsole.log(is_simple_power(1024, -21));\nconsole.log(is_simple_power(1024, -22));\nconsole.log(is_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6qjndx1p.ts(41,1): error TS1005: ',' expected.\n../../../../tmp/tmp6qjndx1p.ts(41,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334939
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n    return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(28, 3));\nconsole.log(is_simple_power(81, 3));\nconsole.log(is_simple_power(82, 3));\nconsole.log(is_simple_power(243, 3));\nconsole.log(is_simple_power(244, 3));\nconsole.log(is_simple_power(729, 3));\nconsole.log(is_simple_power(730, 3));\nconsole.log(is_simple_power(2187, 3));\nconsole.log(is_simple_power(2188, 3));\nconsole.log(is_simple_power(6561, 3));\nconsole.log(is_simple_power(6562, 3));\nconsole.log(is_simple_power(19683, 3));\nconsole.log(is_simple_power(19684, 3));\nconsole.log(is_simple_power(59049, 3));\nconsole.log(is_simple_power(59050, 3));\nconsole.log(is_simple_power(177147, 3));\nconsole.log(is_simple_power(177148, 3));\nconsole.log(is_simple_power(531441, 3));\nconsole.log(is_simple_power(531442, 3));\nconsole.log(is_simple_power(1594323, 3));\nconsole.log(is_simple_power(1594324, 3));\nconsole.log(is_simple_power(4782969, 3));\nconsole.log(is_simple_power(4782970, 3));\nconsole.log(is_simple_power(14348907, 3));\nconsole.log(is_simple_power(14348908, 3));\nconsole.log(is_simple_power(43046721, 3));\nconsole.log(is_simple_power(43046722\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp59hijite.ts(40,1): error TS1005: ',' expected.\n../../../../tmp/tmp59hijite.ts(40,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334939
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result: boolean = false;\n    let power: number = 1;\n    while (power < x) {\n        power *= n;\n    }\n    if (power === x) {\n        result = true;\n    }\n    return result;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(625, 5));\nconsole.log(is_simple_power(625, 6));\nconsole.log(is_simple_power(1024, 2));\nconsole.log(is_simple_power(1024, 10));\nconsole.log(is_simple_power(1024, 5));\nconsole.log(is_simple_power(3125, 5));\nconsole.log(is_simple_power(243, 3));\nconsole.log(is_simple_power(243, 5));\nconsole.log(is_simple_power(243, 15));\nconsole.log(is_simple_power(16807, 7));\nconsole.log(is_simple_power(16807, 5));\nconsole.log(is_simple_power(16807, 25));\nconsole.log(is_simple_power(16807, 15));\nconsole.log(is_simple_power(16807, 17));\nconsole.log(is_simple_power(16807, 19));\nconsole.log(is_simple_power(16807, 21));\nconsole.log(is_simple_power(16807, 23));\nconsole.log(is_simple_power(16807, 27));\nconsole.log(is_simple_power(16807, 29));\nconsole.log(is_simple_power(16807, 31));\nconsole.log(is_simple_power(16807, 33));\nconsole.log(is_simple_power(16807, 35));\nconsole.log(is_simple_power(16807, 37));\nconsole.log(is_simple_power(16807, 39));\nconsole.log(is_simple_power(16807, 41));\nconsole.log(is_simple_power(16807, 43));\nconsole.log(is_simple_power(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_vifi3iu.ts(46,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334939
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n    return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(25, 5));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(625, 5));\nconsole.log(is_simple_power(1, 5));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(0, 0));\nconsole.log(is_simple_power(1, 0));\nconsole.log(is_simple_power(0, 1));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(1, 3));\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(1, 5));\nconsole.log(is_simple_power(1, 6));\nconsole.log(is_simple_power(1, 7));\nconsole.log(is_simple_power(1, 8));\nconsole.log(is_simple_power(1, 9));\nconsole.log(is_simple_power(1, 10));\nconsole.log(is_simple_power(1, 11));\nconsole.log(is_simple_power(1, 12));\nconsole.log(is_simple_power(1, 13));\nconsole.log(is_simple_power(1, 14));\nconsole.log(is_simple_power(1, 15));\nconsole.log(is_simple_power(1, 16));\nconsole.log(is_simple_power(1, 17));\nconsole.log(is_simple_power(1, 18));\nconsole.log(is_simple_power(1, 19));\nconsole.log(is_simple_power(1, 20));\nconsole.log(is_simple_power(1, 21));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpqcjofwh7.js:47:12)\n    at Object.<anonymous> (/tmp/tmpqcjofwh7.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\nfalse\ntrue\ntrue\nfalse\nfalse\ntrue\nfalse\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334939
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n    return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(28, 3));\nconsole.log(is_simple_power(81, 3));\nconsole.log(is_simple_power(82, 3));\nconsole.log(is_simple_power(243, 3));\nconsole.log(is_simple_power(244, 3));\nconsole.log(is_simple_power(729, 3));\nconsole.log(is_simple_power(730, 3));\nconsole.log(is_simple_power(2187, 3));\nconsole.log(is_simple_power(2188, 3));\nconsole.log(is_simple_power(6561, 3));\nconsole.log(is_simple_power(6562, 3));\nconsole.log(is_simple_power(19683, 3));\nconsole.log(is_simple_power(19684, 3));\nconsole.log(is_simple_power(59049, 3));\nconsole.log(is_simple_power(59050, 3));\nconsole.log(is_simple_power(177147, 3));\nconsole.log(is_simple_power(177148, 3));\nconsole.log(is_simple_power(531441, 3));\nconsole.log(is_simple_power(531442, 3));\nconsole.log(is_simple_power(1594323, 3));\nconsole.log(is_simple_power(1594324, 3));\nconsole.log(is_simple_power(4782969, 3));\nconsole.log(is_simple_power(4782970, 3));\nconsole.log(is_simple_power(14348907, 3));\nconsole.log(is_simple_power(14348908, 3));\nconsole.log(is_simple_power(43046721, 3));\nconsole.log(is_simple_power(43046722\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp59hijite.ts(40,1): error TS1005: ',' expected.\n../../../../tmp/tmp59hijite.ts(40,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334939
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result = Math.log(x) / Math.log(n);\n  return result % 1 === 0;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(1, 3));\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(1, 5));\nconsole.log(is_simple_power(1, 6));\nconsole.log(is_simple_power(1, 7));\nconsole.log(is_simple_power(1, 8));\nconsole.log(is_simple_power(1, 9));\nconsole.log(is_simple_power(1, 10));\nconsole.log(is_simple_power(1, 11));\nconsole.log(is_simple_power(1, 12));\nconsole.log(is_simple_power(1, 13));\nconsole.log(is_simple_power(1, 14));\nconsole.log(is_simple_power(1, 15));\nconsole.log(is_simple_power(1, 16));\nconsole.log(is_simple_power(1, 17));\nconsole.log(is_simple_power(1, 18));\nconsole.log(is_simple_power(1, 19));\nconsole.log(is_simple_power(1, 20));\nconsole.log(is_simple_power(1, 21));\nconsole.log(is_simple_power(1, 22));\nconsole.log(is_simple_power(1, 23));\nconsole.log(is_simple_power(1, 24));\nconsole.log(is_simple_power(1, 25));\nconsole.log(is_simple_power(1, 26));\nconsole.log(is_simple_power(1, 27));\nconsole.log(is_simple_power(1, 28));\nconsole.log(is_simple_power(1, 29));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpa42rlycg.js:48:12)\n    at Object.<anonymous> (/tmp/tmpa42rlycg.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334939
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let power = Math.log(x) / Math.log(n);\n    return power % 1 === 0;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(5, 5));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(121, 11));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 10));\nconsole.log(is_simple_power(1, 100));\nconsole.log(is_simple_power(1, 1000));\nconsole.log(is_simple_power(1, 10000));\nconsole.log(is_simple_power(1, 100000));\nconsole.log(is_simple_power(1, 1000000));\nconsole.log(is_simple_power(1, 10000000));\nconsole.log(is_simple_power(1, 100000000));\nconsole.log(is_simple_power(1, 1000000000));\nconsole.log(is_simple_power(1, 10000000000));\nconsole.log(is_simple_power(1, 100000000000));\nconsole.log(is_simple_power(1, 1000000000000));\nconsole.log(is_simple_power(1, 10000000000000));\nconsole.log(is_simple_power(1, 100000000000000));\nconsole.log(is_simple_power(1, 1000000000000000));\nconsole.log(is_simple_power(1, 10000000000000000));\nconsole.log(is_simple_power(1, 100000000000000000));\nconsole.log(is_simple_power(1, 1000000000000000000));\nconsole.log(is_simple_power(1, 10000000000000000000));\nconsole.log(is_simple_power(1, 100000000000000000000));\nconsole.log(is_simple_power(1, 1000000000000000000000));\nconsole.log(is_simple_power(1, 10000000000000000000000));\nconsole.log(is_simple_power(1, 100000000000000000000000));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpslyvdn8j.js:45:12)\n    at Object.<anonymous> (/tmp/tmpslyvdn8j.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\ntrue\nfalse\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334939
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  return Math.log(x) / Math.log(n) % 1 === 0;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(1024, 2));\nconsole.log(is_simple_power(1024, 10));\nconsole.log(is_simple_power(1024, 5));\nconsole.log(is_simple_power(1024, 3));\nconsole.log(is_simple_power(1024, 1));\nconsole.log(is_simple_power(1024, 0));\nconsole.log(is_simple_power(1024, -1));\nconsole.log(is_simple_power(1024, -2));\nconsole.log(is_simple_power(1024, -3));\nconsole.log(is_simple_power(1024, -4));\nconsole.log(is_simple_power(1024, -5));\nconsole.log(is_simple_power(1024, -6));\nconsole.log(is_simple_power(1024, -7));\nconsole.log(is_simple_power(1024, -8));\nconsole.log(is_simple_power(1024, -9));\nconsole.log(is_simple_power(1024, -10));\nconsole.log(is_simple_power(1024, -11));\nconsole.log(is_simple_power(1024, -12));\nconsole.log(is_simple_power(1024, -13));\nconsole.log(is_simple_power(1024, -14));\nconsole.log(is_simple_power(1024, -15));\nconsole.log(is_simple_power(1024, -16));\nconsole.log(is_simple_power(1024, -17));\nconsole.log(is_simple_power(1024, -18));\nconsole.log(is_simple_power(1024, -19));\nconsole.log(is_simple_power(1024, -20));\nconsole.log(is_simple_power(1024, -21));\nconsole.log(is_simple_power(1024, -22));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpgeom7klt.js:45:12)\n    at Object.<anonymous> (/tmp/tmpgeom7klt.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334939
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result = Math.log(x) / Math.log(n);\n  return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(81, 3));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(16, 2));\nconsole.log(is_simple_power(32, 2));\nconsole.log(is_simple_power(64, 2));\nconsole.log(is_simple_power(128, 2));\nconsole.log(is_simple_power(256, 2));\nconsole.log(is_simple_power(512, 2));\nconsole.log(is_simple_power(1024, 2));\nconsole.log(is_simple_power(2048, 2));\nconsole.log(is_simple_power(4096, 2));\nconsole.log(is_simple_power(8192, 2));\nconsole.log(is_simple_power(16384, 2));\nconsole.log(is_simple_power(32768, 2));\nconsole.log(is_simple_power(65536, 2));\nconsole.log(is_simple_power(131072, 2));\nconsole.log(is_simple_power(262144, 2));\nconsole.log(is_simple_power(524288, 2));\nconsole.log(is_simple_power(1048576, 2));\nconsole.log(is_simple_power(2097152, 2));\nconsole.log(is_simple_power(4194304, 2));\nconsole.log(is_simple_power(8388608, 2));\nconsole.log(is_simple_power(16777216, 2));\nconsole.log(is_simple_power(33554432, 2));\nconsole.log(is_simple_power(67108864, 2));\nconsole.log(is_simple_power(134217728, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpbqebtvr8.js:45:12)\n    at Object.<anonymous> (/tmp/tmpbqebtvr8.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\nfalse\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334941
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let power = n;\n  while (power < x) {\n    power *= n;\n  }\n  return power === x;\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(81, 3));\nconsole.log(is_simple_power(81, 4));\nconsole.log(is_simple_power(64, 4));\nconsole.log(is_simple_power(64, 5));\nconsole.log(is_simple_power(64, 6));\nconsole.log(is_simple_power(64, 7));\nconsole.log(is_simple_power(64, 8));\nconsole.log(is_simple_power(64, 9));\nconsole.log(is_simple_power(64, 10));\nconsole.log(is_simple_power(64, 11));\nconsole.log(is_simple_power(64, 12));\nconsole.log(is_simple_power(64, 13));\nconsole.log(is_simple_power(64, 14));\nconsole.log(is_simple_power(64, 15));\nconsole.log(is_simple_power(64, 16));\nconsole.log(is_simple_power(64, 17));\nconsole.log(is_simple_power(64, 18));\nconsole.log(is_simple_power(64, 19));\nconsole.log(is_simple_power(64, 20));\nconsole.log(is_simple_power(64, 21));\nconsole.log(is_simple_power(64, 22));\nconsole.log(is_simple_power(64, 23));\nconsole.log(is_simple_power(64, 24));\nconsole.log(is_simple_power(64, 25));\nconsole.log(is_simple_power(64, 26));\nconsole.log(is_simple_power(64, 27));\nconsole.log(is_simple_power(64, 28));\nconsole.log(is_simple_power(64, 29));\nconsole.log(is_simple_power(64, 30));\nconsole.log(is_simple_power(64, 31));\nconsole.log(is_simple_power(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjadz2ubz.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334941
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = false;\n    let i = 0;\n    while (Math.pow(n, i) <= x) {\n        if (Math.pow(n, i) === x) {\n            result = true;\n        }\n        i++;\n    }\n    return result;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(5, 5));\nconsole.log(is_simple_power(25, 5));\nconsole.log(is_simple_power(24, 5));\nconsole.log(is_simple_power(24, 6));\nconsole.log(is_simple_power(25, 6));\nconsole.log(is_simple_power(26, 6));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(28, 3));\nconsole.log(is_simple_power(29, 3));\nconsole.log(is_simple_power(30, 3));\nconsole.log(is_simple_power(31, 3));\nconsole.log(is_simple_power(32, 2));\nconsole.log(is_simple_power(33, 3));\nconsole.log(is_simple_power(34, 3));\nconsole.log(is_simple_power(35, 5));\nconsole.log(is_simple_power(36, 6));\nconsole.log(is_simple_power(37, 37));\nconsole.log(is_simple_power(38, 38));\nconsole.log(is_simple_power(39, 39));\nconsole.log(is_simple_power(40, 40));\nconsole.log(is_simple_power(41, 41));\nconsole.log(is_simple_power(42, 42));\nconsole.log(is_simple_power(43, 43));\nconsole.log(is_simple_power(44, 44));\nconsole.log(is_simple_power(45, 45));\nconsole.log(is_simple_power(46, 46));\nconsole.log(is_simple_power(47, 47));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpz9eulq79.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334941
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result = Math.log(x) / Math.log(n);\n  return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(64, 4));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(256, 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpxqhk3tsx.js:47:12)\n    at Object.<anonymous> (/tmp/tmpxqhk3tsx.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334942
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let power = Math.log(x) / Math.log(n);\n    return Number.isInteger(power);\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(24, 4));\nconsole.log(is_simple_power(81, 3));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(0, 1));\nconsole.log(is_simple_power(1, 0));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(2, 1));\nconsole.log(is_simple_power(0, 0));\nconsole.log(is_simple_power(0, 2));\nconsole.log(is_simple_power(2, 0));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(2, 3));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(5, 2));\nconsole.log(is_simple_power(6, 2));\nconsole.log(is_simple_power(7, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(9, 2));\nconsole.log(is_simple_power(10, 2));\nconsole.log(is_simple_power(11, 2));\nconsole.log(is_simple_power(12, 2));\nconsole.log(is_simple_power(13, 2));\nconsole.log(is_simple_power(14, 2));\nconsole.log(is_simple_power(15, 2));\nconsole.log(is_simple_power(16, 2));\nconsole.log(is_simple_power(17, 2));\nconsole.log(is_simple_power(18, 2));\nconsole.log(is_simple_power(19, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpq8f_5r4t.js:47:12)\n    at Object.<anonymous> (/tmp/tmpq8f_5r4t.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\ntrue\ntrue\nfalse\nfalse\nfalse\ntrue\ntrue\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334942
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n    return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(256, 2));\nconsole.log(is_simple_power(25, 5));\nconsole.log(is_simple_power(24, 4));\nconsole.log(is_simple_power(24, 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmphbzn6_r9.js:22:12)\n    at Object.<anonymous> (/tmp/tmphbzn6_r9.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\ntrue\nfalse\nfalse\n",
      "timestamp": 1660334942
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let power = Math.log(x) / Math.log(n);\n  return Math.round(power) === power;\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(28, 3));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(125, 6));\nconsole.log(is_simple_power(125, 7));\nconsole.log(is_simple_power(125, 8));\nconsole.log(is_simple_power(125, 9));\nconsole.log(is_simple_power(125, 10));\nconsole.log(is_simple_power(125, 11));\nconsole.log(is_simple_power(125, 12));\nconsole.log(is_simple_power(125, 13));\nconsole.log(is_simple_power(125, 14));\nconsole.log(is_simple_power(125, 15));\nconsole.log(is_simple_power(125, 16));\nconsole.log(is_simple_power(125, 17));\nconsole.log(is_simple_power(125, 18));\nconsole.log(is_simple_power(125, 19));\nconsole.log(is_simple_power(125, 20));\nconsole.log(is_simple_power(125, 21));\nconsole.log(is_simple_power(125, 22));\nconsole.log(is_simple_power(125, 23));\nconsole.log(is_simple_power(125, 24));\nconsole.log(is_simple_power(125, 25));\nconsole.log(is_simple_power(125, 26));\nconsole.log(is_simple_power(125, 27));\nconsole.log(is_simple_power(125, 28));\nconsole.log(is_simple_power(125, 29));\nconsole.log(is_simple_power(125, 30));\nconsole.log(is_simple_power(125, 31));\nconsole.log(is_simple_power(125, 32\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwd8003qq.ts(42,1): error TS1005: ',' expected.\n../../../../tmp/tmpwd8003qq.ts(42,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334942
    },
    {
      "exit_code": 0,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = false;\n    for (let i = 0; i < x; i++) {\n        if (Math.pow(n, i) === x) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(1024, 2));\nconsole.log(is_simple_power(1024, 10));\nconsole.log(is_simple_power(1024, 1));\nconsole.log(is_simple_power(1, 1024));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 0));\nconsole.log(is_simple_power(0, 0));\nconsole.log(is_simple_power(0, 1));\nconsole.log(is_simple_power(0, 10));\nconsole.log(is_simple_power(0, 1024));\nconsole.log(is_simple_power(2, 1024));\nconsole.log(is_simple_power(10, 1024));\nconsole.log(is_simple_power(1024, 1024));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\nfalse\nfalse\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\ntrue\n",
      "timestamp": 1660334942
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = false;\n    let power = Math.log(x) / Math.log(n);\n    if (power % 1 === 0) {\n        result = true;\n    }\n    return result;\n}\n\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(256, 2));\nconsole.log(is_simple_power(256, 1));\nconsole.log(is_simple_power(256, 8));\nconsole.log(is_simple_power(256, 16));\nconsole.log(is_simple_power(256, 32));\nconsole.log(is_simple_power(256, 64));\nconsole.log(is_simple_power(256, 128));\nconsole.log(is_simple_power(256, 256));\nconsole.log(is_simple_power(256, 512));\nconsole.log(is_simple_power(256, 1024));\nconsole.log(is_simple_power(256, 2048));\nconsole.log(is_simple_power(256, 4096));\nconsole.log(is_simple_power(256, 8192));\nconsole.log(is_simple_power(256, 16384));\nconsole.log(is_simple_power(256, 32768));\nconsole.log(is_simple_power(256, 65536));\nconsole.log(is_simple_power(256, 131072));\nconsole.log(is_simple_power(256, 262144));\nconsole.log(is_simple_power(256, 524288));\nconsole.log(is_simple_power(256, 1048576));\nconsole.log(is_simple_power(256, 2097152));\nconsole.log(is_simple_power(256, 4194304));\nconsole.log(is_simple_power(256, 8388608));\nconsole.log(is_simple_power(256, 16777216));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp41fbareq.js:49:12)\n    at Object.<anonymous> (/tmp/tmp41fbareq.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "false\nfalse\ntrue\nfalse\ntrue\ntrue\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334942
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let i = 0;\n  let result = n;\n  while (result <= x) {\n    if (result === x) {\n      return true;\n    }\n    result *= n;\n  }\n  return false;\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(9, 2));\nconsole.log(is_simple_power(16, 2));\nconsole.log(is_simple_power(16, 4));\nconsole.log(is_simple_power(16, 5));\nconsole.log(is_simple_power(32, 2));\nconsole.log(is_simple_power(32, 4));\nconsole.log(is_simple_power(32, 5));\nconsole.log(is_simple_power(32, 8));\nconsole.log(is_simple_power(32, 9));\nconsole.log(is_simple_power(64, 2));\nconsole.log(is_simple_power(64, 4));\nconsole.log(is_simple_power(64, 5));\nconsole.log(is_simple_power(64, 8));\nconsole.log(is_simple_power(64, 9));\nconsole.log(is_simple_power(64, 16));\nconsole.log(is_simple_power(64, 17));\nconsole.log(is_simple_power(64, 32));\nconsole.log(is_simple_power(64, 33));\nconsole.log(is_simple_power(64, 64));\nconsole.log(is_simple_power(64, 65));\nconsole.log(is_simple_power(128, 2));\nconsole.log(is_simple_power(128, 4));\nconsole.log(is_simple_power(128, 5));\nconsole.log(is_simple_power(128, 8));\nconsole.log(is_simple_power(128, 9));\nconsole.log(is_simple_power(128, 16));\nconsole.log(is_simple_power(128, 17));\nconsole.log(is_simple_power(128, 32));\nconsole.log(is_simple_power(128, 33));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpaesru8a3.js:59:12)\n    at Object.<anonymous> (/tmp/tmpaesru8a3.js:61:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\ntrue\ntrue\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\ntrue\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334942
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let power = Math.log(x) / Math.log(n);\n  return Number.isInteger(power);\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(5, 5));\nconsole.log(is_simple_power(25, 5));\nconsole.log(is_simple_power(24, 4));\nconsole.log(is_simple_power(24, 5));\nconsole.log(is_simple_power(24, 6));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(256, 2));\nconsole.log(is_simple_power(256, 8));\nconsole.log(is_simple_power(256, 16));\nconsole.log(is_simple_power(256, 32));\nconsole.log(is_simple_power(256, 64));\nconsole.log(is_simple_power(256, 128));\nconsole.log(is_simple_power(256, 256));\nconsole.log(is_simple_power(256, 512));\nconsole.log(is_simple_power(256, 1024));\nconsole.log(is_simple_power(256, 2048));\nconsole.log(is_simple_power(256, 4096));\nconsole.log(is_simple_power(256, 8192));\nconsole.log(is_simple_power(256, 16384));\nconsole.log(is_simple_power(256, 32768));\nconsole.log(is_simple_power(256, 65536));\nconsole.log(is_simple_power(256, 131072));\nconsole.log(is_simple_power(256, 262144));\nconsole.log(is_simple_power(256, 524288));\nconsole.log(is_simple_power(256, 1048576));\nconsole.log(is_simple_power(256, 2097152));\nconsole.log(is_simple_power(256, 4194304));\nconsole.log(is_simple_power(256, 8388608\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpehhg9xhc.ts(41,1): error TS1005: ',' expected.\n../../../../tmp/tmpehhg9xhc.ts(41,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334942
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  return Math.log(x) / Math.log(n) % 1 === 0;\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(28, 3));\nconsole.log(is_simple_power(8, 4));\nconsole.log(is_simple_power(16, 4));\nconsole.log(is_simple_power(32, 4));\nconsole.log(is_simple_power(64, 4));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(1024, 4));\nconsole.log(is_simple_power(4096, 4));\nconsole.log(is_simple_power(16384, 4));\nconsole.log(is_simple_power(65536, 4));\nconsole.log(is_simple_power(262144, 4));\nconsole.log(is_simple_power(1048576, 4));\nconsole.log(is_simple_power(4194304, 4));\nconsole.log(is_simple_power(16777216, 4));\nconsole.log(is_simple_power(67108864, 4));\nconsole.log(is_simple_power(268435456, 4));\nconsole.log(is_simple_power(1073741824, 4));\nconsole.log(is_simple_power(4294967296, 4));\nconsole.log(is_simple_power(17179869184, 4));\nconsole.log(is_simple_power(68719476736, 4));\nconsole.log(is_simple_power(274877906944, 4));\nconsole.log(is_simple_power(1099511627776, 4));\nconsole.log(is_simple_power(4398046511104, 4));\nconsole.log(is_simple_power(17592186044416, 4));\nconsole.log(is_simple_power(70368744177664, 4));\nconsole.log(is_simple_power(28147\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpna1frrf3.ts(38,1): error TS1005: ',' expected.\n../../../../tmp/tmpna1frrf3.ts(38,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334942
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n    return result % 1 === 0;\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(28, 3));\nconsole.log(is_simple_power(81, 3));\nconsole.log(is_simple_power(82, 3));\nconsole.log(is_simple_power(243, 3));\nconsole.log(is_simple_power(244, 3));\nconsole.log(is_simple_power(729, 3));\nconsole.log(is_simple_power(730, 3));\nconsole.log(is_simple_power(2187, 3));\nconsole.log(is_simple_power(2188, 3));\nconsole.log(is_simple_power(6561, 3));\nconsole.log(is_simple_power(6562, 3));\nconsole.log(is_simple_power(19683, 3));\nconsole.log(is_simple_power(19684, 3));\nconsole.log(is_simple_power(59049, 3));\nconsole.log(is_simple_power(59050, 3));\nconsole.log(is_simple_power(177147, 3));\nconsole.log(is_simple_power(177148, 3));\nconsole.log(is_simple_power(531441, 3));\nconsole.log(is_simple_power(531442, 3));\nconsole.log(is_simple_power(1594323, 3));\nconsole.log(is_simple_power(1594324, 3));\nconsole.log(is_simple_power(4782969, 3));\nconsole.log(is_simple_power(4782970, 3));\nconsole.log(is_simple_power(14348907, 3));\nconsole.log(is_simple_power(14348908, 3));\nconsole.log(is_simple_power(43046721, 3));\nconsole.log(is_simple_power(43046722,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_r9w7fv1.ts(40,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334942
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let power = 1;\n  while (power < x) {\n    power *= n;\n  }\n  return power === x;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(72, 3));\nconsole.log(is_simple_power(100, 10));\nconsole.log(is_simple_power(100, 2));\nconsole.log(is_simple_power(144, 12));\nconsole.log(is_simple_power(625, 5));\nconsole.log(is_simple_power(216, 6));\nconsole.log(is_simple_power(1000, 10));\nconsole.log(is_simple_power(1000, 2));\nconsole.log(is_simple_power(10000, 10));\nconsole.log(is_simple_power(10000, 2));\nconsole.log(is_simple_power(1000000, 10));\nconsole.log(is_simple_power(1000000, 2));\nconsole.log(is_simple_power(1000000000, 10));\nconsole.log(is_simple_power(1000000000, 2));\nconsole.log(is_simple_power(10000000000, 10));\nconsole.log(is_simple_power(10000000000, 2));\nconsole.log(is_simple_power(100000000000, 10));\nconsole.log(is_simple_power(100000000000, 2));\nconsole.log(is_simple_power(1000000000000, 10));\nconsole.log(is_simple_power(1000000000000, 2));\nconsole.log(is_simple_power(10000000000000, 10));\nconsole.log(is_simple_power(10000000000000, 2));\nconsole.log(is_simple_power(100000000000000, 10));\nconsole.log(is_simple_power(100000000000000, 2));\nconsole.log(is_simple_power(1000000000000000, 10));\nconsole.log(is_simple_power(1000000000000000, 2));\nconsole.log(is_simple_power(10000000000000000, 10));\nconsole.log(is_simple_power\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9y8_u61u.ts(43,1): error TS1005: ',' expected.\n../../../../tmp/tmp9y8_u61u.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334942
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let power = Math.log(x) / Math.log(n);\n  return Number.isInteger(power);\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(10, 2));\nconsole.log(is_simple_power(10, 3));\nconsole.log(is_simple_power(9, 2));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(8, 3));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(27, 4));\nconsole.log(is_simple_power(27, 5));\nconsole.log(is_simple_power(27, 6));\nconsole.log(is_simple_power(27, 7));\nconsole.log(is_simple_power(27, 8));\nconsole.log(is_simple_power(27, 9));\nconsole.log(is_simple_power(27, 10));\nconsole.log(is_simple_power(27, 11));\nconsole.log(is_simple_power(27, 12));\nconsole.log(is_simple_power(27, 13));\nconsole.log(is_simple_power(27, 14));\nconsole.log(is_simple_power(27, 15));\nconsole.log(is_simple_power(27, 16));\nconsole.log(is_simple_power(27, 17));\nconsole.log(is_simple_power(27, 18));\nconsole.log(is_simple_power(27, 19));\nconsole.log(is_simple_power(27, 20));\nconsole.log(is_simple_power(27, 21));\nconsole.log(is_simple_power(27, 22));\nconsole.log(is_simple_power(27, 23));\nconsole.log(is_simple_power(27, 24));\nconsole.log(is_simple_power(27, 25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp9mpk6yli.js:47:12)\n    at Object.<anonymous> (/tmp/tmp9mpk6yli.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334942
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n    return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(243, 3));\nconsole.log(is_simple_power(16, 4));\nconsole.log(is_simple_power(16777216, 65536));\nconsole.log(is_simple_power(16777216, 65535));\nconsole.log(is_simple_power(16777216, 65537));\nconsole.log(is_simple_power(16777216, 65538));\nconsole.log(is_simple_power(16777216, 65539));\nconsole.log(is_simple_power(16777216, 65540));\nconsole.log(is_simple_power(16777216, 65541));\nconsole.log(is_simple_power(16777216, 65542));\nconsole.log(is_simple_power(16777216, 65543));\nconsole.log(is_simple_power(16777216, 65544));\nconsole.log(is_simple_power(16777216, 65545));\nconsole.log(is_simple_power(16777216, 65546));\nconsole.log(is_simple_power(16777216, 65547));\nconsole.log(is_simple_power(16777216, 65548));\nconsole.log(is_simple_power(16777216, 65549));\nconsole.log(is_simple_power(16777216, 65550));\nconsole.log(is_simple_power(16777216, 65551));\nconsole.log(is_simple_power(16777216, 65552));\nconsole.log(is_simple_power(16777216, 65553));\nconsole.log(is_simple_power(16777216, 65554));\nconsole.log(is_simple_power(16777216, 65555));\nconsole.log(is_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpyeenvqys.ts(37,1): error TS1005: ',' expected.\n../../../../tmp/tmpyeenvqys.ts(37,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334942
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let power = Math.log(x) / Math.log(n);\n    return Math.pow(n, Math.round(power)) === x;\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(28, 3));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(126, 5));\nconsole.log(is_simple_power(625, 5));\nconsole.log(is_simple_power(626, 5));\nconsole.log(is_simple_power(625, 5));\nconsole.log(is_simple_power(626, 5));\nconsole.log(is_simple_power(625, 5));\nconsole.log(is_simple_power(626, 5));\nconsole.log(is_simple_power(625, 5));\nconsole.log(is_simple_power(626, 5));\nconsole.log(is_simple_power(625, 5));\nconsole.log(is_simple_power(626, 5));\nconsole.log(is_simple_power(625, 5));\nconsole.log(is_simple_power(626, 5));\nconsole.log(is_simple_power(625, 5));\nconsole.log(is_simple_power(626, 5));\nconsole.log(is_simple_power(625, 5));\nconsole.log(is_simple_power(626, 5));\nconsole.log(is_simple_power(625, 5));\nconsole.log(is_simple_power(626, 5));\nconsole.log(is_simple_power(625, 5));\nconsole.log(is_simple_power(626, 5));\nconsole.log(is_simple_power(625, 5));\nconsole.log(is_simple_power(626, 5));\nconsole.log(is_simple_power(625, 5));\nconsole.log(is_simple_power(626, 5));\nconsole.log(is_simple_power(625, 5));\nconsole.log(is_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwavfma28.ts(42,1): error TS1005: ',' expected.\n../../../../tmp/tmpwavfma28.ts(42,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334942
    },
    {
      "exit_code": -1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result = false;\n  let i = 0;\n  while (n ** i <= x) {\n    if (n ** i === x) {\n      result = true;\n    }\n    i++;\n  }\n  return result;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(28, 3));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(126, 5));\nconsole.log(is_simple_power(625, 5));\nconsole.log(is_simple_power(626, 5));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(1, 3));\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(1, 5));\nconsole.log(is_simple_power(1, 6));\nconsole.log(is_simple_power(1, 7));\nconsole.log(is_simple_power(1, 8));\nconsole.log(is_simple_power(1, 9));\nconsole.log(is_simple_power(1, 10));\nconsole.log(is_simple_power(1, 11));\nconsole.log(is_simple_power(1, 12));\nconsole.log(is_simple_power(1, 13));\nconsole.log(is_simple_power(1, 14));\nconsole.log(is_simple_power(1, 15));\nconsole.log(is_simple_power(1, 16));\nconsole.log(is_simple_power(1, 17));\nconsole.log(is_simple_power(1, 18));\nconsole.log(is_simple_power(1, 19));\nconsole.log(is_simple_power(1, 20));\nconsole.log(is_simple_power(1, 21));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "Timeout",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\nfalse\ntrue\nfalse\ntrue\nfalse\n",
      "timestamp": 1660334959
    },
    {
      "exit_code": -1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result = false;\n  let i = 1;\n  while (Math.pow(n, i) <= x) {\n    if (Math.pow(n, i) === x) {\n      result = true;\n    }\n    i++;\n  }\n  return result;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(72, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "Timeout",
      "stderr": "",
      "stdout": "true\ntrue\nfalse\n",
      "timestamp": 1660334961
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let i = 1;\n    while (Math.pow(n, i) <= x) {\n        if (Math.pow(n, i) === x) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(81, 3));\nconsole.log(is_simple_power(100, 2));\nconsole.log(is_simple_power(100, 10));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(256, 2));\nconsole.log(is_simple_power(256, 3));\nconsole.log(is_simple_power(256, 1));\nconsole.log(is_simple_power(256, 0));\nconsole.log(is_simple_power(0, 0));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(1, 3));\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(1, 5));\nconsole.log(is_simple_power(1, 6));\nconsole.log(is_simple_power(1, 7));\nconsole.log(is_simple_power(1, 8));\nconsole.log(is_simple_power(1, 9));\nconsole.log(is_simple_power(1, 10));\nconsole.log(is_simple_power(1, 11));\nconsole.log(is_simple_power(1, 12));\nconsole.log(is_simple_power(1, 13));\nconsole.log(is_simple_power(1, 14));\nconsole.log(is_simple_power(1, 15));\nconsole.log(is_simple_power(1, 16));\nconsole.log(is_simple_power(1, 17));\nconsole.log(is_simple_power(1, 18));\nconsole.log(is_simple_power(1, 19));\nconsole.log(is_simple_power(1,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_s8d80mj.ts(46,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334944
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n    return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(8, 3));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(28, 3));\nconsole.log(is_simple_power(27, 4));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(256, 2));\nconsole.log(is_simple_power(256, 1));\nconsole.log(is_simple_power(1, 256));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(1, 3));\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(1, 5));\nconsole.log(is_simple_power(1, 6));\nconsole.log(is_simple_power(1, 7));\nconsole.log(is_simple_power(1, 8));\nconsole.log(is_simple_power(1, 9));\nconsole.log(is_simple_power(1, 10));\nconsole.log(is_simple_power(1, 11));\nconsole.log(is_simple_power(1, 12));\nconsole.log(is_simple_power(1, 13));\nconsole.log(is_simple_power(1, 14));\nconsole.log(is_simple_power(1, 15));\nconsole.log(is_simple_power(1, 16));\nconsole.log(is_simple_power(1, 17));\nconsole.log(is_simple_power(1, 18));\nconsole.log(is_simple_power(1, 19));\nconsole.log(is_simple_power(1, 20));\nconsole.log(is_simple_power(1, 21));\nconsole.log(is_simple_power(1, 22));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpxj5t8jub.js:47:12)\n    at Object.<anonymous> (/tmp/tmpxj5t8jub.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\nfalse\nfalse\ntrue\ntrue\nfalse\ntrue\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334944
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result = Math.log(x) / Math.log(n);\n  return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(72, 9));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmppkhpu9m9.js:18:12)\n    at Object.<anonymous> (/tmp/tmppkhpu9m9.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\n",
      "timestamp": 1660334945
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result = Math.log(x) / Math.log(n);\n  return result % 1 === 0;\n}\n\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(28, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpozthpb6z.js:17:12)\n    at Object.<anonymous> (/tmp/tmpozthpb6z.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "false\nfalse\n",
      "timestamp": 1660334945
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = false;\n    let i = 0;\n    while (Math.pow(n, i) <= x) {\n        if (Math.pow(n, i) === x) {\n            result = true;\n        }\n        i++;\n    }\n    return result;\n}\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(16, 2));\nconsole.log(is_simple_power(8, 3));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(1, 3));\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(1, 5));\nconsole.log(is_simple_power(1, 6));\nconsole.log(is_simple_power(1, 7));\nconsole.log(is_simple_power(1, 8));\nconsole.log(is_simple_power(1, 9));\nconsole.log(is_simple_power(1, 10));\nconsole.log(is_simple_power(1, 11));\nconsole.log(is_simple_power(1, 12));\nconsole.log(is_simple_power(1, 13));\nconsole.log(is_simple_power(1, 14));\nconsole.log(is_simple_power(1, 15));\nconsole.log(is_simple_power(1, 16));\nconsole.log(is_simple_power(1, 17));\nconsole.log(is_simple_power(1, 18));\nconsole.log(is_simple_power(1, 19));\nconsole.log(is_simple_power(1, 20));\nconsole.log(is_simple_power(1, 21));\nconsole.log(is_simple_power(1, 22));\nconsole.log(is_simple_power(1, 23));\nconsole.log(is_simple_power(1, 24));\nconsole.log(is_simple_power(1, 25));\nconsole.log(is\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0ep_s0cp.ts(46,1): error TS1005: ',' expected.\n../../../../tmp/tmp0ep_s0cp.ts(46,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334945
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result = Math.log(x) / Math.log(n);\n  return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(24, 4));\nconsole.log(is_simple_power(48, 4));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpa34mw5pp.js:20:12)\n    at Object.<anonymous> (/tmp/tmpa34mw5pp.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\nfalse\nfalse\n",
      "timestamp": 1660334932
    },
    {
      "exit_code": 0,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = false;\n    for (let i = 0; i < x; i++) {\n        if (Math.pow(n, i) === x) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(16, 2));\nconsole.log(is_simple_power(25, 5));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(81, 3));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(16, 4));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(243, 3));\nconsole.log(is_simple_power(16807, 5));\nconsole.log(is_simple_power(16, 10));\nconsole.log(is_simple_power(25, 2));\nconsole.log(is_simple_power(125, 3));\nconsole.log(is_simple_power(81, 4));\nconsole.log(is_simple_power(27, 5));\nconsole.log(is_simple_power(256, 6));\nconsole.log(is_simple_power(243, 7));\nconsole.log(is_simple_power(16807, 8));\nconsole.log(is_simple_power(16, 9));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334945
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result = Math.log(x) / Math.log(n);\n  return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(16, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(243, 3));\nconsole.log(is_simple_power(16807, 7));\nconsole.log(is_simple_power(26, 2));\nconsole.log(is_simple_power(126, 3));\nconsole.log(is_simple_power(16, 4));\nconsole.log(is_simple_power(26, 5));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(0, 0));\nconsole.log(is_simple_power(1, 0));\nconsole.log(is_simple_power(0, 1));\nconsole.log(is_simple_power(1, -1));\nconsole.log(is_simple_power(-1, 1));\nconsole.log(is_simple_power(-1, -1));\nconsole.log(is_simple_power(0, -1));\nconsole.log(is_simple_power(-1, 0));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(2, 1));\nconsole.log(is_simple_power(1, 3));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(4, 1));\nconsole.log(is_simple_power(1, 5));\nconsole.log(is_simple_power(5, 1));\nconsole.log(is_simple_power(1, 6));\nconsole.log(is_simple_power(6, 1));\nconsole.log(is_simple_power(1, 7));\nconsole.log(is_simple_power(7, 1));\nconsole.log(is_simple_power(1, 8));\nconsole.log(is_simple_power(8\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpju6ij0lm.ts(42,1): error TS1005: ',' expected.\n../../../../tmp/tmpju6ij0lm.ts(42,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334945
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = false;\n    let i = 0;\n    while (Math.pow(n, i) <= x) {\n        if (Math.pow(n, i) === x) {\n            result = true;\n        }\n        i++;\n    }\n    return result;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(28, 3));\nconsole.log(is_simple_power(81, 3));\nconsole.log(is_simple_power(82, 3));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(126, 5));\nconsole.log(is_simple_power(625, 5));\nconsole.log(is_simple_power(626, 5));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(1, 3));\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(1, 5));\nconsole.log(is_simple_power(1, 6));\nconsole.log(is_simple_power(1, 7));\nconsole.log(is_simple_power(1, 8));\nconsole.log(is_simple_power(1, 9));\nconsole.log(is_simple_power(1, 10));\nconsole.log(is_simple_power(1, 11));\nconsole.log(is_simple_power(1, 12));\nconsole.log(is_simple_power(1, 13));\nconsole.log(is_simple_power(1, 14));\nconsole.log(is_simple_power(1, 15));\nconsole.log(is_simple_power(1, 16));\nconsole.log(is_simple_power(1, 17));\nconsole.log(is_simple_power(1, 18));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpag9lprrh.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334945
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n    return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(28, 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpa_2kj81g.js:19:12)\n    at Object.<anonymous> (/tmp/tmpa_2kj81g.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334946
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let i = 0;\n  let power = 1;\n  while (power < x) {\n    power *= n;\n    i++;\n  }\n  return power === x;\n}\n\nconsole.log(is_simple_power(8, 2)); //true\nconsole.log(is_simple_power(9, 2)); //false\nconsole.log(is_simple_power(16, 2)); //true\nconsole.log(is_simple_power(16, 4)); //true\nconsole.log(is_simple_power(16, 5)); //false\nconsole.log(is_simple_power(25, 5)); //true\nconsole.log(is_simple_power(25, 6)); //false\nconsole.log(is_simple_power(27, 3)); //true\nconsole.log(is_simple_power(27, 4)); //false\nconsole.log(is_simple_power(64, 4)); //true\nconsole.log(is_simple_power(64, 5)); //false\nconsole.log(is_simple_power(64, 8)); //true\nconsole.log(is_simple_power(64, 9)); //false\nconsole.log(is_simple_power(81, 3)); //true\nconsole.log(is_simple_power(81, 4)); //false\nconsole.log(is_simple_power(81, 9)); //true\nconsole.log(is_simple_power(81, 10)); //false\nconsole.log(is_simple_power(125, 5)); //true\nconsole.log(is_simple_power(125, 6)); //false\nconsole.log(is_simple_power(125, 25)); //true\nconsole.log(is_simple_power(125, 26)); //false\nconsole.log(is_simple_power(243, 3)); //true\nconsole.log(is_simple_power(243, 4)); //false\nconsole.log(is_simple_power(243, 9)); //true\nconsole.log(is_simple_power(243, 10)); //false\nconsole.log(is_simple_power(243, 27)); //true\nconsole.log(is_simple_power(243, 28)); //false\nconsole.log(is\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpt6c4v0o_.ts(43,1): error TS1005: ',' expected.\n../../../../tmp/tmpt6c4v0o_.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334945
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = false;\n    let i = 1;\n    while (Math.pow(n, i) <= x) {\n        if (Math.pow(n, i) === x) {\n            result = true;\n        }\n        i++;\n    }\n    return result;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(1024, 2));\nconsole.log(is_simple_power(1023, 2));\nconsole.log(is_simple_power(1025, 2));\nconsole.log(is_simple_power(1025, 10));\nconsole.log(is_simple_power(1025, 1));\nconsole.log(is_simple_power(1025, 0));\nconsole.log(is_simple_power(1025, -1));\nconsole.log(is_simple_power(1025, -2));\nconsole.log(is_simple_power(1025, -10));\nconsole.log(is_simple_power(1025, -100));\nconsole.log(is_simple_power(1025, -1000));\nconsole.log(is_simple_power(1025, -10000));\nconsole.log(is_simple_power(1025, -100000));\nconsole.log(is_simple_power(1025, -1000000));\nconsole.log(is_simple_power(1025, -10000000));\nconsole.log(is_simple_power(1025, -100000000));\nconsole.log(is_simple_power(1025, -1000000000));\nconsole.log(is_simple_power(1025, -10000000000));\nconsole.log(is_simple_power(1025, -100000000000));\nconsole.log(is_simple_power(1025, -1000000000000));\nconsole.log(is_simple_power(1025, -10000000000000));\nconsole.log(is_simple_power(1025, -100000000000000));\nconsole.log(is_simple_power(10\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmphkj7sbfc.ts(43,1): error TS1005: ',' expected.\n../../../../tmp/tmphkj7sbfc.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334945
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = false;\n    let i = 1;\n    while (Math.pow(n, i) <= x) {\n        if (Math.pow(n, i) === x) {\n            result = true;\n        }\n        i++;\n    }\n    return result;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(28, 3));\nconsole.log(is_simple_power(25, 5));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(126, 5));\nconsole.log(is_simple_power(625, 5));\nconsole.log(is_simple_power(626, 5));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(1, 3));\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(1, 5));\nconsole.log(is_simple_power(1, 6));\nconsole.log(is_simple_power(1, 7));\nconsole.log(is_simple_power(1, 8));\nconsole.log(is_simple_power(1, 9));\nconsole.log(is_simple_power(1, 10));\nconsole.log(is_simple_power(1, 11));\nconsole.log(is_simple_power(1, 12));\nconsole.log(is_simple_power(1, 13));\nconsole.log(is_simple_power(1, 14));\nconsole.log(is_simple_power(1, 15));\nconsole.log(is_simple_power(1, 16));\nconsole.log(is_simple_power(1, 17));\nconsole.log(is_simple_power(1, 18));\nconsole.log(is_simple_power(1, 19));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6fvp1ovv.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334946
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n    return result % 1 === 0;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(72, 9));\nconsole.log(is_simple_power(100, 10));\nconsole.log(is_simple_power(100, 1));\nconsole.log(is_simple_power(100, 2));\nconsole.log(is_simple_power(100, 3));\nconsole.log(is_simple_power(100, 4));\nconsole.log(is_simple_power(100, 5));\nconsole.log(is_simple_power(100, 6));\nconsole.log(is_simple_power(100, 7));\nconsole.log(is_simple_power(100, 8));\nconsole.log(is_simple_power(100, 9));\nconsole.log(is_simple_power(100, 10));\nconsole.log(is_simple_power(100, 11));\nconsole.log(is_simple_power(100, 12));\nconsole.log(is_simple_power(100, 13));\nconsole.log(is_simple_power(100, 14));\nconsole.log(is_simple_power(100, 15));\nconsole.log(is_simple_power(100, 16));\nconsole.log(is_simple_power(100, 17));\nconsole.log(is_simple_power(100, 18));\nconsole.log(is_simple_power(100, 19));\nconsole.log(is_simple_power(100, 20));\nconsole.log(is_simple_power(100, 21));\nconsole.log(is_simple_power(100, 22));\nconsole.log(is_simple_power(100, 23));\nconsole.log(is_simple_power(100, 24));\nconsole.log(is_simple_power(100, 25));\nconsole.log(is_simple_power(100, 26));\nconsole.log(is_simple_power(100, 27));\nconsole.log(is_simple_power(100, 28));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp6bsj512b.js:48:12)\n    at Object.<anonymous> (/tmp/tmp6bsj512b.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334946
    },
    {
      "exit_code": -1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = false;\n    let i = 1;\n    while (n ** i <= x) {\n        if (n ** i === x) {\n            result = true;\n        }\n        i++;\n    }\n    return result;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(256, 2));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(1024, 2));\nconsole.log(is_simple_power(1024, 10));\nconsole.log(is_simple_power(1024, 5));\nconsole.log(is_simple_power(1024, 1));\nconsole.log(is_simple_power(1, 1024));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "Timeout",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\n",
      "timestamp": 1660334962
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  return Math.log(x) / Math.log(n) % 1 === 0;\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(16, 4));\nconsole.log(is_simple_power(81, 3));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(1024, 2));\nconsole.log(is_simple_power(1024, 10));\nconsole.log(is_simple_power(1024, 5));\nconsole.log(is_simple_power(1024, 1));\nconsole.log(is_simple_power(1024, 0));\nconsole.log(is_simple_power(1024, -2));\nconsole.log(is_simple_power(1024, -1));\nconsole.log(is_simple_power(1024, -10));\nconsole.log(is_simple_power(1024, -5));\nconsole.log(is_simple_power(1024, -1));\nconsole.log(is_simple_power(1024, -0));\nconsole.log(is_simple_power(1024, -2));\nconsole.log(is_simple_power(1024, -1));\nconsole.log(is_simple_power(1024, -10));\nconsole.log(is_simple_power(1024, -5));\nconsole.log(is_simple_power(1024, -1));\nconsole.log(is_simple_power(1024, -0));\nconsole.log(is_simple_power(1024, -2));\nconsole.log(is_simple_power(1024, -1));\nconsole.log(is_simple_power(1024, -10));\nconsole.log(is_simple_power(1024, -5));\nconsole.log(is_simple_power(1024, -1));\nconsole.log(is_simple_power(1024, -0));\nconsole.log(is_simple_power(1024, -2));\nconsole.log(is_simple_power(1024, -1));\nconsole.log(is_simple_power(1024, -10));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp825j1r0b.js:46:12)\n    at Object.<anonymous> (/tmp/tmp825j1r0b.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\nfalse\ntrue\ntrue\nfalse\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334946
    },
    {
      "exit_code": 0,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result = false;\n  for (let i = 0; i < x; i++) {\n    if (Math.pow(n, i) === x) {\n      result = true;\n    }\n  }\n  return result;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(256, 2));\nconsole.log(is_simple_power(256, 3));\nconsole.log(is_simple_power(256, 1));\nconsole.log(is_simple_power(256, 0));\nconsole.log(is_simple_power(0, 0));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(1, 0));\nconsole.log(is_simple_power(0, 1));\nconsole.log(is_simple_power(0, 2));\nconsole.log(is_simple_power(0, 3));\nconsole.log(is_simple_power(0, 4));\nconsole.log(is_simple_power(0, 5));\nconsole.log(is_simple_power(0, 6));\nconsole.log(is_simple_power(0, 7));\nconsole.log(is_simple_power(0, 8));\nconsole.log(is_simple_power(0, 9));\nconsole.log(is_simple_power(0, 10));\nconsole.log(is_simple_power(0, 11));\nconsole.log(is_simple_power(0, 12));\nconsole.log(is_simple_power(0, 13));\nconsole.log(is_simple_power(0, 14));\nconsole.log(is_simple_power(0, 15));\nconsole.log(is_simple_power(0, 16));\nconsole.log(is_simple_power(0, 17));\nconsole.log(is_simple_power(0, 18));\nconsole.log(is_simple_power(0, 19));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334946
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n    return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(28, 3));\nconsole.log(is_simple_power(81, 3));\nconsole.log(is_simple_power(82, 3));\nconsole.log(is_simple_power(243, 3));\nconsole.log(is_simple_power(244, 3));\nconsole.log(is_simple_power(729, 3));\nconsole.log(is_simple_power(730, 3));\nconsole.log(is_simple_power(2187, 3));\nconsole.log(is_simple_power(2188, 3));\nconsole.log(is_simple_power(6561, 3));\nconsole.log(is_simple_power(6562, 3));\nconsole.log(is_simple_power(19683, 3));\nconsole.log(is_simple_power(19684, 3));\nconsole.log(is_simple_power(59049, 3));\nconsole.log(is_simple_power(59050, 3));\nconsole.log(is_simple_power(177147, 3));\nconsole.log(is_simple_power(177148, 3));\nconsole.log(is_simple_power(531441, 3));\nconsole.log(is_simple_power(531442, 3));\nconsole.log(is_simple_power(1594323, 3));\nconsole.log(is_simple_power(1594324, 3));\nconsole.log(is_simple_power(4782969, 3));\nconsole.log(is_simple_power(4782970, 3));\nconsole.log(is_simple_power(14348907, 3));\nconsole.log(is_simple_power(14348908, 3));\nconsole.log(is_simple_power(43046721, 3));\nconsole.log(is_simple_power(43046722\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp59hijite.ts(40,1): error TS1005: ',' expected.\n../../../../tmp/tmp59hijite.ts(40,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334939
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n    return result % 1 === 0;\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(16, 2));\nconsole.log(is_simple_power(25, 5));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(81, 3));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(1, 3));\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(1, 5));\nconsole.log(is_simple_power(1, 6));\nconsole.log(is_simple_power(1, 7));\nconsole.log(is_simple_power(1, 8));\nconsole.log(is_simple_power(1, 9));\nconsole.log(is_simple_power(1, 10));\nconsole.log(is_simple_power(1, 11));\nconsole.log(is_simple_power(1, 12));\nconsole.log(is_simple_power(1, 13));\nconsole.log(is_simple_power(1, 14));\nconsole.log(is_simple_power(1, 15));\nconsole.log(is_simple_power(1, 16));\nconsole.log(is_simple_power(1, 17));\nconsole.log(is_simple_power(1, 18));\nconsole.log(is_simple_power(1, 19));\nconsole.log(is_simple_power(1, 20));\nconsole.log(is_simple_power(1, 21));\nconsole.log(is_simple_power(1, 22));\nconsole.log(is_simple_power(1, 23));\nconsole.log(is_simple_power(1, 24));\nconsole.log(is_simple_power(1, 25));\nconsole.log(is_simple_power(1, 26));\nconsole.log(is_simple_power(1, 27));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp9phz8lxt.js:48:12)\n    at Object.<anonymous> (/tmp/tmp9phz8lxt.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\nfalse\nfalse\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334947
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result = Math.log(x) / Math.log(n);\n  return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(5, 125));\nconsole.log(is_simple_power(3, 9));\nconsole.log(is_simple_power(16807, 7));\nconsole.log(is_simple_power(16807, 5));\nconsole.log(is_simple_power(243, 3));\nconsole.log(is_simple_power(243, 5));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(256, 2));\nconsole.log(is_simple_power(78125, 5));\nconsole.log(is_simple_power(78125, 3));\nconsole.log(is_simple_power(78125, 9));\nconsole.log(is_simple_power(78125, 15));\nconsole.log(is_simple_power(78125, 17));\nconsole.log(is_simple_power(78125, 51));\nconsole.log(is_simple_power(78125, 85));\nconsole.log(is_simple_power(78125, 255));\nconsole.log(is_simple_power(78125, 257));\nconsole.log(is_simple_power(78125, 785));\nconsole.log(is_simple_power(78125, 1285));\nconsole.log(is_simple_power(78125, 5751));\nconsole.log(is_simple_power(78125, 7751));\nconsole.log(is_simple_power(78125, 78125));\nconsole.log(is_simple_power(78125, 78126));\nconsole.log(is_simple_power(78125, 78127));\nconsole.log(is_simple_power(78125, 78128));\nconsole.log(is_simple_power(78125, 78129));\nconsole.log(is_simple_power(78125, 78130));\nconsole.log(is_simple_power(78125,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpp1zodnqo.ts(40,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334947
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result = false;\n  let i = 1;\n  while (n ** i <= x) {\n    if (n ** i === x) {\n      result = true;\n    }\n    i++;\n  }\n  return result;\n}\n\nconsole.log(is_simple_power(16, 2));\nconsole.log(is_simple_power(16, 4));\nconsole.log(is_simple_power(16, 8));\nconsole.log(is_simple_power(16, 3));\nconsole.log(is_simple_power(16, 1));\nconsole.log(is_simple_power(16, 16));\nconsole.log(is_simple_power(16, 17));\nconsole.log(is_simple_power(16, 32));\nconsole.log(is_simple_power(16, 0));\nconsole.log(is_simple_power(16, -1));\nconsole.log(is_simple_power(16, -2));\nconsole.log(is_simple_power(16, -4));\nconsole.log(is_simple_power(16, -8));\nconsole.log(is_simple_power(16, -16));\nconsole.log(is_simple_power(16, -17));\nconsole.log(is_simple_power(16, -32));\nconsole.log(is_simple_power(16, -0));\nconsole.log(is_simple_power(0, 0));\nconsole.log(is_simple_power(0, 1));\nconsole.log(is_simple_power(0, 2));\nconsole.log(is_simple_power(0, 4));\nconsole.log(is_simple_power(0, 8));\nconsole.log(is_simple_power(0, 16));\nconsole.log(is_simple_power(0, 17));\nconsole.log(is_simple_power(0, 32));\nconsole.log(is_simple_power(0, 0));\nconsole.log(is_simple_power(0, -1));\nconsole.log(is_simple_power(0, -2));\nconsole.log(is_simple_power(0, -4));\nconsole.log(is\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3g44_zgr.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmp3g44_zgr.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334948
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let i = 0;\n    while (Math.pow(n, i) < x) {\n        i++;\n    }\n    return Math.pow(n, i) === x;\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(25, 5));\nconsole.log(is_simple_power(24, 6));\nconsole.log(is_simple_power(23, 7));\nconsole.log(is_simple_power(22, 8));\nconsole.log(is_simple_power(21, 9));\nconsole.log(is_simple_power(20, 10));\nconsole.log(is_simple_power(19, 11));\nconsole.log(is_simple_power(18, 12));\nconsole.log(is_simple_power(17, 13));\nconsole.log(is_simple_power(16, 14));\nconsole.log(is_simple_power(15, 15));\nconsole.log(is_simple_power(14, 16));\nconsole.log(is_simple_power(13, 17));\nconsole.log(is_simple_power(12, 18));\nconsole.log(is_simple_power(11, 19));\nconsole.log(is_simple_power(10, 20));\nconsole.log(is_simple_power(9, 21));\nconsole.log(is_simple_power(8, 22));\nconsole.log(is_simple_power(7, 23));\nconsole.log(is_simple_power(6, 24));\nconsole.log(is_simple_power(5, 25));\nconsole.log(is_simple_power(4, 26));\nconsole.log(is_simple_power(3, 27));\nconsole.log(is_simple_power(2, 28));\nconsole.log(is_simple_power(1, 29));\nconsole.log(is_simple_power(0, 30));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(0,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpfs95p05t.ts(44,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334947
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n    return result % 1 === 0;\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(28, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpe0ykx5wk.js:19:12)\n    at Object.<anonymous> (/tmp/tmpe0ykx5wk.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334932
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n    return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(16, 4));\nconsole.log(is_simple_power(81, 3));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(1024, 5));\nconsole.log(is_simple_power(243, 5));\nconsole.log(is_simple_power(32, 4));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(1024, 5));\nconsole.log(is_simple_power(243, 5));\nconsole.log(is_simple_power(32, 4));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(1024, 5));\nconsole.log(is_simple_power(243, 5));\nconsole.log(is_simple_power(32, 4));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(1024, 5));\nconsole.log(is_simple_power(243, 5));\nconsole.log(is_simple_power(32, 4));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(1024, 5));\nconsole.log(is_simple_power(243, 5));\nconsole.log(is_simple_power(32, 4));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(1024, 5));\nconsole.log(is_simple_power(243, 5));\nconsole.log(is_simple_power(32, 4));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(1024, 5));\nconsole.log(is_simple_power(243, 5));\nconsole.log(is_simple_power(32, 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpl8713zrd.js:47:12)\n    at Object.<anonymous> (/tmp/tmpl8713zrd.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\nfalse\ntrue\nfalse\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334949
    },
    {
      "exit_code": 0,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = false;\n    for (let i = 0; i < x; i++) {\n        if (Math.pow(n, i) === x) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(1, 3));\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(1, 5));\nconsole.log(is_simple_power(1, 6));\nconsole.log(is_simple_power(1, 7));\nconsole.log(is_simple_power(1, 8));\nconsole.log(is_simple_power(1, 9));\nconsole.log(is_simple_power(1, 10));\nconsole.log(is_simple_power(1, 11));\nconsole.log(is_simple_power(1, 12));\nconsole.log(is_simple_power(1, 13));\nconsole.log(is_simple_power(1, 14));\nconsole.log(is_simple_power(1, 15));\nconsole.log(is_simple_power(1, 16));\nconsole.log(is_simple_power(1, 17));\nconsole.log(is_simple_power(1, 18));\nconsole.log(is_simple_power(1, 19));\nconsole.log(is_simple_power(1, 20));\nconsole.log(is_simple_power(1, 21));\nconsole.log(is_simple_power(1, 22));\nconsole.log(is_simple_power(1, 23));\nconsole.log(is_simple_power(1, 24));\nconsole.log(is_simple_power(1, 25));\nconsole.log(is_simple_power(1, 26));\nconsole.log(is_simple_power(1, 27));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334949
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let power = 0;\n  let result = 0;\n  while (result < x) {\n    result = n ** power;\n    if (result === x) {\n      return true;\n    }\n    power++;\n  }\n  return false;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(81, 3));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(8, 3));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(27, 4));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(256, 2));\nconsole.log(is_simple_power(256, 1));\nconsole.log(is_simple_power(256, 0));\nconsole.log(is_simple_power(256, -1));\nconsole.log(is_simple_power(256, -2));\nconsole.log(is_simple_power(256, -3));\nconsole.log(is_simple_power(256, -4));\nconsole.log(is_simple_power(256, -5));\nconsole.log(is_simple_power(256, -6));\nconsole.log(is_simple_power(256, -7));\nconsole.log(is_simple_power(256, -8));\nconsole.log(is_simple_power(256, -9));\nconsole.log(is_simple_power(256, -10));\nconsole.log(is_simple_power(256, -11));\nconsole.log(is_simple_power(256, -12));\nconsole.log(is_simple_power(256, -13));\nconsole.log(is_simple_power(256, -14));\nconsole.log(is_simple_power(256, -15));\nconsole.log(is_simple_power(256, -16));\nconsole.log(is_simple_power(256, -17));\nconsole.log(is_simple_power(256, -18));\nconsole.log(is_simple_power(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvxk04u08.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334949
    },
    {
      "exit_code": 0,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result = false;\n  for (let i = 0; i < x; i++) {\n    if (Math.pow(n, i) === x) {\n      result = true;\n    }\n  }\n  return result;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(1024, 2));\nconsole.log(is_simple_power(1024, 3));\nconsole.log(is_simple_power(1024, 10));\nconsole.log(is_simple_power(1024, 1));\nconsole.log(is_simple_power(1, 1024));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 0));\nconsole.log(is_simple_power(0, 0));\nconsole.log(is_simple_power(0, 1));\nconsole.log(is_simple_power(0, 2));\nconsole.log(is_simple_power(0, 3));\nconsole.log(is_simple_power(0, 4));\nconsole.log(is_simple_power(0, 5));\nconsole.log(is_simple_power(0, 6));\nconsole.log(is_simple_power(0, 7));\nconsole.log(is_simple_power(0, 8));\nconsole.log(is_simple_power(0, 9));\nconsole.log(is_simple_power(0, 10));\nconsole.log(is_simple_power(0, 11));\nconsole.log(is_simple_power(0, 12));\nconsole.log(is_simple_power(0, 13));\nconsole.log(is_simple_power(0, 14));\nconsole.log(is_simple_power(0, 15));\nconsole.log(is_simple_power(0, 16));\nconsole.log(is_simple_power(0, 17));\nconsole.log(is_simple_power(0, 18));\nconsole.log(is_simple_power(0, 19));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334949
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result = Math.log(x) / Math.log(n);\n  return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(121, 11));\nconsole.log(is_simple_power(1024, 10));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 10));\nconsole.log(is_simple_power(10, 1));\nconsole.log(is_simple_power(3, 3));\nconsole.log(is_simple_power(10, 2));\nconsole.log(is_simple_power(16, 2));\nconsole.log(is_simple_power(256, 2));\nconsole.log(is_simple_power(100, 2));\nconsole.log(is_simple_power(100, 10));\nconsole.log(is_simple_power(100, 1));\nconsole.log(is_simple_power(100, 5));\nconsole.log(is_simple_power(100, 7));\nconsole.log(is_simple_power(100, 9));\nconsole.log(is_simple_power(100, 11));\nconsole.log(is_simple_power(100, 13));\nconsole.log(is_simple_power(100, 15));\nconsole.log(is_simple_power(100, 17));\nconsole.log(is_simple_power(100, 19));\nconsole.log(is_simple_power(100, 21));\nconsole.log(is_simple_power(100, 23));\nconsole.log(is_simple_power(100, 25));\nconsole.log(is_simple_power(100, 27));\nconsole.log(is_simple_power(100, 29));\nconsole.log(is_simple_power(100, 31));\nconsole.log(is_simple_power(100, 33));\nconsole.log(is_simple_power(100, 35));\nconsole.log(is_simple_power(100, 37));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmps3rxuv0h.js:47:12)\n    at Object.<anonymous> (/tmp/tmps3rxuv0h.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\nfalse\nfalse\ntrue\nfalse\ntrue\nfalse\ntrue\ntrue\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334949
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result = false;\n  let i = 1;\n  while (n ** i <= x) {\n    if (n ** i === x) {\n      result = true;\n    }\n    i++;\n  }\n  return result;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(5, 5));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(1, 3));\nconsole.log(is_simple_power(81, 3));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(64, 4));\nconsole.log(is_simple_power(216, 6));\nconsole.log(is_simple_power(343, 7));\nconsole.log(is_simple_power(512, 8));\nconsole.log(is_simple_power(729, 9));\nconsole.log(is_simple_power(1000, 10));\nconsole.log(is_simple_power(1331, 11));\nconsole.log(is_simple_power(1728, 12));\nconsole.log(is_simple_power(2197, 13));\nconsole.log(is_simple_power(2744, 14));\nconsole.log(is_simple_power(3375, 15));\nconsole.log(is_simple_power(4096, 16));\nconsole.log(is_simple_power(4913, 17));\nconsole.log(is_simple_power(5832, 18));\nconsole.log(is_simple_power(6859, 19));\nconsole.log(is_simple_power(8000, 20));\nconsole.log(is_simple_power(9261, 21));\nconsole.log(is_simple_power(10648, 22));\nconsole.log(is_simple_power(12167, 23));\nconsole.log(is_simple_power(13824, 24));\nconsole.log(is_simple_power(15625, 25));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpn_9isdhu.ts(46,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334949
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result = Math.log(x) / Math.log(n);\n  return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(64, 4));\nconsole.log(is_simple_power(70, 10));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp1fx_jljw.js:18:12)\n    at Object.<anonymous> (/tmp/tmp1fx_jljw.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\nfalse\n",
      "timestamp": 1660334949
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n    return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(72, 3));\nconsole.log(is_simple_power(100, 10));\nconsole.log(is_simple_power(100, 1));\nconsole.log(is_simple_power(144, 12));\nconsole.log(is_simple_power(1728, 12));\nconsole.log(is_simple_power(1728, 8));\nconsole.log(is_simple_power(1728, 9));\nconsole.log(is_simple_power(1728, 1));\nconsole.log(is_simple_power(1728, 0));\nconsole.log(is_simple_power(1728, -1));\nconsole.log(is_simple_power(1728, 1.5));\nconsole.log(is_simple_power(1728, 1.1));\nconsole.log(is_simple_power(1728, 1.01));\nconsole.log(is_simple_power(1728, 1.001));\nconsole.log(is_simple_power(1728, 1.0001));\nconsole.log(is_simple_power(1728, 1.00001));\nconsole.log(is_simple_power(1728, 1.000001));\nconsole.log(is_simple_power(1728, 1.0000001));\nconsole.log(is_simple_power(1728, 1.00000001));\nconsole.log(is_simple_power(1728, 1.000000001));\nconsole.log(is_simple_power(1728, 1.0000000001));\nconsole.log(is_simple_power(1728, 1.00000000001));\nconsole.log(is_simple_power(1728, 1.000000000001));\nconsole.log(is_simple_power(1728, 1.0000000000001));\nconsole.log(is_simple_power(1728, 1.00000000000001));\nconsole.log(is_simple_power(17\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpy0xslepm.ts(38,1): error TS1005: ',' expected.\n../../../../tmp/tmpy0xslepm.ts(38,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334949
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result = Math.log(x) / Math.log(n);\n  return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(16, 4));\nconsole.log(is_simple_power(64, 4));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(81, 3));\nconsole.log(is_simple_power(243, 3));\nconsole.log(is_simple_power(16, 2));\nconsole.log(is_simple_power(256, 2));\nconsole.log(is_simple_power(81, 4));\nconsole.log(is_simple_power(27, 4));\nconsole.log(is_simple_power(16, 5));\nconsole.log(is_simple_power(32, 5));\nconsole.log(is_simple_power(64, 5));\nconsole.log(is_simple_power(128, 5));\nconsole.log(is_simple_power(256, 5));\nconsole.log(is_simple_power(512, 5));\nconsole.log(is_simple_power(1024, 5));\nconsole.log(is_simple_power(2048, 5));\nconsole.log(is_simple_power(4096, 5));\nconsole.log(is_simple_power(8192, 5));\nconsole.log(is_simple_power(16384, 5));\nconsole.log(is_simple_power(32768, 5));\nconsole.log(is_simple_power(65536, 5));\nconsole.log(is_simple_power(131072, 5));\nconsole.log(is_simple_power(262144, 5));\nconsole.log(is_simple_power(524288, 5));\nconsole.log(is_simple_power(1048576, 5));\nconsole.log(is_simple_power(2097152, 5));\nconsole.log(is_simple_power(4194304, 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpoyxfnfzs.js:46:12)\n    at Object.<anonymous> (/tmp/tmpoyxfnfzs.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334949
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n    return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(24, 4));\nconsole.log(is_simple_power(81, 3));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(1, 3));\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(1, 5));\nconsole.log(is_simple_power(1, 6));\nconsole.log(is_simple_power(1, 7));\nconsole.log(is_simple_power(1, 8));\nconsole.log(is_simple_power(1, 9));\nconsole.log(is_simple_power(1, 10));\nconsole.log(is_simple_power(1, 11));\nconsole.log(is_simple_power(1, 12));\nconsole.log(is_simple_power(1, 13));\nconsole.log(is_simple_power(1, 14));\nconsole.log(is_simple_power(1, 15));\nconsole.log(is_simple_power(1, 16));\nconsole.log(is_simple_power(1, 17));\nconsole.log(is_simple_power(1, 18));\nconsole.log(is_simple_power(1, 19));\nconsole.log(is_simple_power(1, 20));\nconsole.log(is_simple_power(1, 21));\nconsole.log(is_simple_power(1, 22));\nconsole.log(is_simple_power(1, 23));\nconsole.log(is_simple_power(1, 24));\nconsole.log(is_simple_power(1, 25));\nconsole.log(is_simple_power(1, 26));\nconsole.log(is_simple_power(1, 27));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpvlng4_y2.js:47:12)\n    at Object.<anonymous> (/tmp/tmpvlng4_y2.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\nfalse\nfalse\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334949
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n    return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(16, 4));\nconsole.log(is_simple_power(81, 3));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(1024, 2));\nconsole.log(is_simple_power(1023, 2));\nconsole.log(is_simple_power(1025, 2));\nconsole.log(is_simple_power(1026, 2));\nconsole.log(is_simple_power(1028, 2));\nconsole.log(is_simple_power(1030, 2));\nconsole.log(is_simple_power(1032, 2));\nconsole.log(is_simple_power(1034, 2));\nconsole.log(is_simple_power(1036, 2));\nconsole.log(is_simple_power(1038, 2));\nconsole.log(is_simple_power(1040, 2));\nconsole.log(is_simple_power(1042, 2));\nconsole.log(is_simple_power(1044, 2));\nconsole.log(is_simple_power(1046, 2));\nconsole.log(is_simple_power(1048, 2));\nconsole.log(is_simple_power(1050, 2));\nconsole.log(is_simple_power(1052, 2));\nconsole.log(is_simple_power(1054, 2));\nconsole.log(is_simple_power(1056, 2));\nconsole.log(is_simple_power(1058, 2));\nconsole.log(is_simple_power(1060, 2));\nconsole.log(is_simple_power(1062, 2));\nconsole.log(is_simple_power(1064, 2));\nconsole.log(is_simple_power(1066, 2));\nconsole.log(is_simple_power(1068, 2));\nconsole.log(is_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp314v7ob7.ts(41,1): error TS1005: ',' expected.\n../../../../tmp/tmp314v7ob7.ts(41,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334949
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n    return result % 1 === 0;\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(28, 3));\nconsole.log(is_simple_power(81, 3));\nconsole.log(is_simple_power(82, 3));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(1, 3));\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(1, 5));\nconsole.log(is_simple_power(1, 6));\nconsole.log(is_simple_power(1, 7));\nconsole.log(is_simple_power(1, 8));\nconsole.log(is_simple_power(1, 9));\nconsole.log(is_simple_power(1, 10));\nconsole.log(is_simple_power(1, 11));\nconsole.log(is_simple_power(1, 12));\nconsole.log(is_simple_power(1, 13));\nconsole.log(is_simple_power(1, 14));\nconsole.log(is_simple_power(1, 15));\nconsole.log(is_simple_power(1, 16));\nconsole.log(is_simple_power(1, 17));\nconsole.log(is_simple_power(1, 18));\nconsole.log(is_simple_power(1, 19));\nconsole.log(is_simple_power(1, 20));\nconsole.log(is_simple_power(1, 21));\nconsole.log(is_simple_power(1, 22));\nconsole.log(is_simple_power(1, 23));\nconsole.log(is_simple_power(1, 24));\nconsole.log(is_simple_power(1, 25));\nconsole.log(is_simple_power(1, 26));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpc5vorm5m.js:48:12)\n    at Object.<anonymous> (/tmp/tmpc5vorm5m.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334949
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let power = Math.log(x) / Math.log(n);\n    return power === Math.floor(power);\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(16, 4));\nconsole.log(is_simple_power(81, 3));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(625, 5));\nconsole.log(is_simple_power(2401, 7));\nconsole.log(is_simple_power(2401, 5));\nconsole.log(is_simple_power(1024, 10));\nconsole.log(is_simple_power(1024, 5));\nconsole.log(is_simple_power(1024, 2));\nconsole.log(is_simple_power(1024, 1));\nconsole.log(is_simple_power(1024, 0));\nconsole.log(is_simple_power(1, 1024));\nconsole.log(is_simple_power(0, 1024));\nconsole.log(is_simple_power(0, 0));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 0));\nconsole.log(is_simple_power(0, 1));\nconsole.log(is_simple_power(1, -1));\nconsole.log(is_simple_power(1, -1024));\nconsole.log(is_simple_power(-1, 1));\nconsole.log(is_simple_power(-1, -1));\nconsole.log(is_simple_power(-1, -1024));\nconsole.log(is_simple_power(-1, 1024));\nconsole.log(is_simple_power(-1024, 1));\nconsole.log(is_simple_power(-1024, -1));\nconsole.log(is_simple_power(-1024, -1024));\nconsole.log(is_simple_power(-1024, 1024));\nconsole.log(is_simple_power(-8, 2));\nconsole.log(is_simple_power(-27, 3));\nconsole.log(is_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprh9_vw0l.ts(42,1): error TS1005: ',' expected.\n../../../../tmp/tmprh9_vw0l.ts(42,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334949
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result = Math.log(x) / Math.log(n);\n  return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(28, 3));\nconsole.log(is_simple_power(81, 3));\nconsole.log(is_simple_power(82, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp2o_pejsj.js:21:12)\n    at Object.<anonymous> (/tmp/tmp2o_pejsj.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334950
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n    return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(1024, 10));\nconsole.log(is_simple_power(1024, 2));\nconsole.log(is_simple_power(1024, 1));\nconsole.log(is_simple_power(1024, 0));\nconsole.log(is_simple_power(1024, -1));\nconsole.log(is_simple_power(1024, -2));\nconsole.log(is_simple_power(1024, -3));\nconsole.log(is_simple_power(1024, -4));\nconsole.log(is_simple_power(1024, -5));\nconsole.log(is_simple_power(1024, -6));\nconsole.log(is_simple_power(1024, -7));\nconsole.log(is_simple_power(1024, -8));\nconsole.log(is_simple_power(1024, -9));\nconsole.log(is_simple_power(1024, -10));\nconsole.log(is_simple_power(1024, -11));\nconsole.log(is_simple_power(1024, -12));\nconsole.log(is_simple_power(1024, -13));\nconsole.log(is_simple_power(1024, -14));\nconsole.log(is_simple_power(1024, -15));\nconsole.log(is_simple_power(1024, -16));\nconsole.log(is_simple_power(1024, -17));\nconsole.log(is_simple_power(1024, -18));\nconsole.log(is_simple_power(1024, -19));\nconsole.log(is_simple_power(1024, -20));\nconsole.log(is_simple_power(1024, -21));\nconsole.log(is_simple_power(1024, -22));\nconsole.log(is_simple_power(1024, -23));\nconsole.log(is_simple\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmptlrrw99m.ts(41,1): error TS1005: ',' expected.\n../../../../tmp/tmptlrrw99m.ts(41,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334950
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n    return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(1024, 2));\nconsole.log(is_simple_power(1024, 10));\nconsole.log(is_simple_power(1024, 3));\nconsole.log(is_simple_power(1024, 1));\nconsole.log(is_simple_power(1, 1024));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(1, 3));\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(1, 5));\nconsole.log(is_simple_power(1, 6));\nconsole.log(is_simple_power(1, 7));\nconsole.log(is_simple_power(1, 8));\nconsole.log(is_simple_power(1, 9));\nconsole.log(is_simple_power(1, 10));\nconsole.log(is_simple_power(1, 11));\nconsole.log(is_simple_power(1, 12));\nconsole.log(is_simple_power(1, 13));\nconsole.log(is_simple_power(1, 14));\nconsole.log(is_simple_power(1, 15));\nconsole.log(is_simple_power(1, 16));\nconsole.log(is_simple_power(1, 17));\nconsole.log(is_simple_power(1, 18));\nconsole.log(is_simple_power(1, 19));\nconsole.log(is_simple_power(1, 20));\nconsole.log(is_simple_power(1, 21));\nconsole.log(is_simple_power(1, 22));\nconsole.log(is_simple_power(1, 23));\nconsole.log(is_simple_power(1, 24));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpcouaqiph.js:47:12)\n    at Object.<anonymous> (/tmp/tmpcouaqiph.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\nfalse\nfalse\nfalse\ntrue\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334951
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n    return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(24, 4));\nconsole.log(is_simple_power(81, 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp93txqrx2.js:20:12)\n    at Object.<anonymous> (/tmp/tmp93txqrx2.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\nfalse\nfalse\n",
      "timestamp": 1660334951
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let power = Math.log(x) / Math.log(n);\n    return power % 1 === 0;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(1024, 2));\nconsole.log(is_simple_power(1024, 3));\nconsole.log(is_simple_power(1024, 10));\nconsole.log(is_simple_power(1024, 1));\nconsole.log(is_simple_power(1, 1024));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(0, 0));\nconsole.log(is_simple_power(0, 1));\nconsole.log(is_simple_power(1, 0));\nconsole.log(is_simple_power(1, -1));\nconsole.log(is_simple_power(-1, 1));\nconsole.log(is_simple_power(-1, -1));\nconsole.log(is_simple_power(-1, 2));\nconsole.log(is_simple_power(2, -1));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(2, 3));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 3));\nconsole.log(is_simple_power(3, 4));\nconsole.log(is_simple_power(4, 3));\nconsole.log(is_simple_power(4, 4));\nconsole.log(is_simple_power(4, 5));\nconsole.log(is_simple_power(5, 4));\nconsole.log(is_simple_power(5, 5));\nconsole.log(is_simple_power(5, 6));\nconsole.log(is_simple_power(6, 5));\nconsole.log(is_simple_power(6, 6));\nconsole.log(is_simple_power(6, 7));\nconsole.log(is_simple_power(7, 6\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpleworvh_.ts(42,1): error TS1005: ',' expected.\n../../../../tmp/tmpleworvh_.ts(42,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334952
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  return Math.log(x) / Math.log(n) % 1 === 0;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(256, 2));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(1, 3));\nconsole.log(is_simple_power(81, 3));\nconsole.log(is_simple_power(81, 4));\nconsole.log(is_simple_power(81, 9));\nconsole.log(is_simple_power(81, 7));\nconsole.log(is_simple_power(81, 5));\nconsole.log(is_simple_power(81, 6));\nconsole.log(is_simple_power(81, 8));\nconsole.log(is_simple_power(81, 10));\nconsole.log(is_simple_power(81, 11));\nconsole.log(is_simple_power(81, 12));\nconsole.log(is_simple_power(81, 13));\nconsole.log(is_simple_power(81, 14));\nconsole.log(is_simple_power(81, 15));\nconsole.log(is_simple_power(81, 16));\nconsole.log(is_simple_power(81, 17));\nconsole.log(is_simple_power(81, 18));\nconsole.log(is_simple_power(81, 19));\nconsole.log(is_simple_power(81, 20));\nconsole.log(is_simple_power(81, 21));\nconsole.log(is_simple_power(81, 22));\nconsole.log(is_simple_power(81, 23));\nconsole.log(is_simple_power(81, 24));\nconsole.log(is_simple_power(81, 25));\nconsole.log(is_simple_power(81, 26));\nconsole.log(is_simple_power(81, 27));\nconsole.log(is_simple_power(81, 28));\nconsole.log(is_simple\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvbdlbcbl.ts(42,1): error TS1005: ',' expected.\n../../../../tmp/tmpvbdlbcbl.ts(42,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334952
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let power = n;\n  while (power < x) {\n    power *= n;\n  }\n  return power === x;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(1024000000, 2));\nconsole.log(is_simple_power(6561, 3));\nconsole.log(is_simple_power(2401, 7));\nconsole.log(is_simple_power(24, 5));\nconsole.log(is_simple_power(25, 2));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(253, 3));\nconsole.log(is_simple_power(24001, 3));\nconsole.log(is_simple_power(240001, 3));\nconsole.log(is_simple_power(2400001, 3));\nconsole.log(is_simple_power(24000001, 3));\nconsole.log(is_simple_power(240000001, 3));\nconsole.log(is_simple_power(2400000001, 3));\nconsole.log(is_simple_power(24000000001, 3));\nconsole.log(is_simple_power(240000000001, 3));\nconsole.log(is_simple_power(2400000000001, 3));\nconsole.log(is_simple_power(24000000000001, 3));\nconsole.log(is_simple_power(240000000000001, 3));\nconsole.log(is_simple_power(2400000000000001, 3));\nconsole.log(is_simple_power(24000000000000001, 3));\nconsole.log(is_simple_power(2400000000000000001, 3));\nconsole.log(is_simple_power(24000000000000000001, 3));\nconsole.log(is_simple_power(240000000000000000001, 3));\nconsole.log(is_simple_power(2400000000000000000001, 3));\nconsole.log(is_simple_power(24000000000000000000001, 3));\nconsole.log(is_simple_power(240000000000000000000001, 3));\nconsole.log(is_simple_power(24\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplph4qzr1.ts(42,1): error TS1005: ',' expected.\n../../../../tmp/tmplph4qzr1.ts(42,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334952
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result = Math.log(x) / Math.log(n);\n  return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(256, 8));\nconsole.log(is_simple_power(256, 16));\nconsole.log(is_simple_power(256, 32));\nconsole.log(is_simple_power(256, 64));\nconsole.log(is_simple_power(256, 128));\nconsole.log(is_simple_power(256, 256));\nconsole.log(is_simple_power(256, 512));\nconsole.log(is_simple_power(256, 1024));\nconsole.log(is_simple_power(256, 2048));\nconsole.log(is_simple_power(256, 4096));\nconsole.log(is_simple_power(256, 8192));\nconsole.log(is_simple_power(256, 16384));\nconsole.log(is_simple_power(256, 32768));\nconsole.log(is_simple_power(256, 65536));\nconsole.log(is_simple_power(256, 131072));\nconsole.log(is_simple_power(256, 262144));\nconsole.log(is_simple_power(256, 524288));\nconsole.log(is_simple_power(256, 1048576));\nconsole.log(is_simple_power(256, 2097152));\nconsole.log(is_simple_power(256, 4194304));\nconsole.log(is_simple_power(256, 8388608));\nconsole.log(is_simple_power(256, 16777216));\nconsole.log(is_simple_power(256, 33554432));\nconsole.log(is_simple_power(256, 67108864));\nconsole.log(is_simple_power(256, 134217728));\nconsole.log(is_simple_power(256, 268435456));\nconsole.log(is_simple_power(256, 5\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqkx_xyur.ts(40,1): error TS1005: ',' expected.\n../../../../tmp/tmpqkx_xyur.ts(40,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334952
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let i = 1;\n  let result = n;\n  while (result < x) {\n    result *= n;\n    i++;\n  }\n  if (result === x) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(16, 4));\nconsole.log(is_simple_power(81, 3));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(1024, 2));\nconsole.log(is_simple_power(1024, 10));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 10));\nconsole.log(is_simple_power(1, 100));\nconsole.log(is_simple_power(1, 1000));\nconsole.log(is_simple_power(1, 10000));\nconsole.log(is_simple_power(1, 100000));\nconsole.log(is_simple_power(1, 1000000));\nconsole.log(is_simple_power(1, 10000000));\nconsole.log(is_simple_power(1, 100000000));\nconsole.log(is_simple_power(1, 1000000000));\nconsole.log(is_simple_power(1, 10000000000));\nconsole.log(is_simple_power(1, 100000000000));\nconsole.log(is_simple_power(1, 1000000000000));\nconsole.log(is_simple_power(1, 10000000000000));\nconsole.log(is_simple_power(1, 100000000000000));\nconsole.log(is_simple_power(1, 1000000000000000));\nconsole.log(is_simple_power(1, 10000000000000000));\nconsole.log(is_simple_power(1, 100000000000000000));\nconsole.log(is_simple_power(1, 1000000000000000000));\nconsole.log(is_simple_power(1, 10000000000000000000));\nconsole.log(is_simple_power(1, 100000000000000000000\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdz1ltmu0.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmpdz1ltmu0.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334952
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n    return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(5, 5));\nconsole.log(is_simple_power(5, 3));\nconsole.log(is_simple_power(5, 2));\nconsole.log(is_simple_power(5, 1));\nconsole.log(is_simple_power(5, 0));\nconsole.log(is_simple_power(0, 0));\nconsole.log(is_simple_power(0, 1));\nconsole.log(is_simple_power(0, 2));\nconsole.log(is_simple_power(0, 3));\nconsole.log(is_simple_power(0, 4));\nconsole.log(is_simple_power(0, 5));\nconsole.log(is_simple_power(0, 6));\nconsole.log(is_simple_power(0, 7));\nconsole.log(is_simple_power(0, 8));\nconsole.log(is_simple_power(0, 9));\nconsole.log(is_simple_power(0, 10));\nconsole.log(is_simple_power(0, 11));\nconsole.log(is_simple_power(0, 12));\nconsole.log(is_simple_power(0, 13));\nconsole.log(is_simple_power(0, 14));\nconsole.log(is_simple_power(0, 15));\nconsole.log(is_simple_power(0, 16));\nconsole.log(is_simple_power(0, 17));\nconsole.log(is_simple_power(0, 18));\nconsole.log(is_simple_power(0, 19));\nconsole.log(is_simple_power(0, 20));\nconsole.log(is_simple_power(0, 21));\nconsole.log(is_simple_power(0, 22));\nconsole.log(is_simple_power(0, 23));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmproid850w.js:47:12)\n    at Object.<anonymous> (/tmp/tmproid850w.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\nfalse\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334952
    },
    {
      "exit_code": -1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = false;\n    let i = 0;\n    while (Math.pow(n, i) <= x) {\n        if (Math.pow(n, i) === x) {\n            result = true;\n        }\n        i++;\n    }\n    return result;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(28, 3));\nconsole.log(is_simple_power(81, 3));\nconsole.log(is_simple_power(82, 3));\nconsole.log(is_simple_power(256, 2));\nconsole.log(is_simple_power(257, 2));\nconsole.log(is_simple_power(1024, 2));\nconsole.log(is_simple_power(1025, 2));\nconsole.log(is_simple_power(1026, 2));\nconsole.log(is_simple_power(1028, 2));\nconsole.log(is_simple_power(1029, 2));\nconsole.log(is_simple_power(1030, 2));\nconsole.log(is_simple_power(1031, 2));\nconsole.log(is_simple_power(1032, 2));\nconsole.log(is_simple_power(1033, 2));\nconsole.log(is_simple_power(1034, 2));\nconsole.log(is_simple_power(1035, 2));\nconsole.log(is_simple_power(1036, 2));\nconsole.log(is_simple_power(1037, 2));\nconsole.log(is_simple_power(1038, 2));\nconsole.log(is_simple_power(1039, 2));\nconsole.log(is_simple_power(1040, 2));\nconsole.log(is_simple_power(1041, 2));\nconsole.log(is_simple_power(1042, 2));\nconsole.log(is_simple_power(1043, 2));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "Timeout",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\nfalse\ntrue\nfalse\ntrue\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334968
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n    return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(28, 3));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(126, 5));\nconsole.log(is_simple_power(625, 5));\nconsole.log(is_simple_power(626, 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpmybmr32m.js:23:12)\n    at Object.<anonymous> (/tmp/tmpmybmr32m.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\nfalse\nfalse\ntrue\nfalse\n",
      "timestamp": 1660334952
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n    return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(24, 4));\nconsole.log(is_simple_power(48, 4));\nconsole.log(is_simple_power(121, 11));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 10));\nconsole.log(is_simple_power(32, 4));\nconsole.log(is_simple_power(100, 10));\nconsole.log(is_simple_power(100, 5));\nconsole.log(is_simple_power(625, 5));\nconsole.log(is_simple_power(625, 25));\nconsole.log(is_simple_power(625, 6));\nconsole.log(is_simple_power(625, 2));\nconsole.log(is_simple_power(625, 1));\nconsole.log(is_simple_power(625, 0));\nconsole.log(is_simple_power(0, 0));\nconsole.log(is_simple_power(0, 1));\nconsole.log(is_simple_power(0, 2));\nconsole.log(is_simple_power(0, 3));\nconsole.log(is_simple_power(0, 4));\nconsole.log(is_simple_power(0, 5));\nconsole.log(is_simple_power(0, 6));\nconsole.log(is_simple_power(0, 7));\nconsole.log(is_simple_power(0, 8));\nconsole.log(is_simple_power(0, 9));\nconsole.log(is_simple_power(0, 10));\nconsole.log(is_simple_power(0, 11));\nconsole.log(is_simple_power(0, 12));\nconsole.log(is_simple_power(0, 13));\nconsole.log(is_simple_power(0, 14));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpqtgk_ae1.js:47:12)\n    at Object.<anonymous> (/tmp/tmpqtgk_ae1.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\nfalse\nfalse\ntrue\nfalse\ntrue\nfalse\ntrue\nfalse\ntrue\ntrue\nfalse\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334952
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result = Math.log(x) / Math.log(n);\n  return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(16, 4));\nconsole.log(is_simple_power(81, 3));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(1024, 2));\nconsole.log(is_simple_power(10, 10));\nconsole.log(is_simple_power(100, 10));\nconsole.log(is_simple_power(1000, 10));\nconsole.log(is_simple_power(10000, 10));\nconsole.log(is_simple_power(100000, 10));\nconsole.log(is_simple_power(1000000, 10));\nconsole.log(is_simple_power(10000000, 10));\nconsole.log(is_simple_power(100000000, 10));\nconsole.log(is_simple_power(1000000000, 10));\nconsole.log(is_simple_power(10000000000, 10));\nconsole.log(is_simple_power(100000000000, 10));\nconsole.log(is_simple_power(1000000000000, 10));\nconsole.log(is_simple_power(10000000000000, 10));\nconsole.log(is_simple_power(100000000000000, 10));\nconsole.log(is_simple_power(1000000000000000, 10));\nconsole.log(is_simple_power(10000000000000000, 10));\nconsole.log(is_simple_power(100000000000000000, 10));\nconsole.log(is_simple_power(1000000000000000000, 10));\nconsole.log(is_simple_power(10000000000000000000, 10));\nconsole.log(is_simple_power(100000000000000000000, 10));\nconsole.log(is_simple_power(1000000000000000000000, 10));\nconsole.log(is_simple_power(10000000000000000000000, 10));\nconsole.log(is_simple_power(100000000000000000000000, 10));\nconsole.log(is_simple_power(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpc07_x71u.ts(40,1): error TS1005: ',' expected.\n../../../../tmp/tmpc07_x71u.ts(40,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334952
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let power = Math.log(x) / Math.log(n);\n    return Number.isInteger(power);\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(16, 4));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(32, 4));\nconsole.log(is_simple_power(81, 3));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(243, 3));\nconsole.log(is_simple_power(1024, 4));\nconsole.log(is_simple_power(1030, 10));\nconsole.log(is_simple_power(1030, 11));\nconsole.log(is_simple_power(1030, 12));\nconsole.log(is_simple_power(1030, 13));\nconsole.log(is_simple_power(1030, 14));\nconsole.log(is_simple_power(1030, 15));\nconsole.log(is_simple_power(1030, 16));\nconsole.log(is_simple_power(1030, 17));\nconsole.log(is_simple_power(1030, 18));\nconsole.log(is_simple_power(1030, 19));\nconsole.log(is_simple_power(1030, 20));\nconsole.log(is_simple_power(1030, 21));\nconsole.log(is_simple_power(1030, 22));\nconsole.log(is_simple_power(1030, 23));\nconsole.log(is_simple_power(1030, 24));\nconsole.log(is_simple_power(1030, 25));\nconsole.log(is_simple_power(1030, 26));\nconsole.log(is_simple_power(1030, 27));\nconsole.log(is_simple_power(1030, 28));\nconsole.log(is_simple_power(1030, 29));\nconsole.log(is_simple_power(1030, 30));\nconsole.log(is_simple_power\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpe2c7jmwf.ts(41,1): error TS1005: ',' expected.\n../../../../tmp/tmpe2c7jmwf.ts(41,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334952
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result = Math.log(x) / Math.log(n);\n  return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(28, 3));\nconsole.log(is_simple_power(81, 3));\nconsole.log(is_simple_power(82, 3));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(126, 5));\nconsole.log(is_simple_power(243, 3));\nconsole.log(is_simple_power(244, 3));\nconsole.log(is_simple_power(256, 2));\nconsole.log(is_simple_power(257, 2));\nconsole.log(is_simple_power(1024, 2));\nconsole.log(is_simple_power(1025, 2));\nconsole.log(is_simple_power(1026, 2));\nconsole.log(is_simple_power(1030, 2));\nconsole.log(is_simple_power(1031, 2));\nconsole.log(is_simple_power(1032, 2));\nconsole.log(is_simple_power(1033, 2));\nconsole.log(is_simple_power(1034, 2));\nconsole.log(is_simple_power(1035, 2));\nconsole.log(is_simple_power(1036, 2));\nconsole.log(is_simple_power(1037, 2));\nconsole.log(is_simple_power(1038, 2));\nconsole.log(is_simple_power(1039, 2));\nconsole.log(is_simple_power(1040, 2));\nconsole.log(is_simple_power(1041, 2));\nconsole.log(is_simple_power(1042, 2));\nconsole.log(is_simple_power(1043, 2));\nconsole.log(is_simple_power(1044, 2));\nconsole.log(is_simple_power(1045,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp8cjfju14.ts(41,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334953
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result = Math.log(x) / Math.log(n);\n  return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(5, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(216, 6));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(1, 3));\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(1, 5));\nconsole.log(is_simple_power(1, 6));\nconsole.log(is_simple_power(1, 7));\nconsole.log(is_simple_power(1, 8));\nconsole.log(is_simple_power(1, 9));\nconsole.log(is_simple_power(1, 10));\nconsole.log(is_simple_power(1, 11));\nconsole.log(is_simple_power(1, 12));\nconsole.log(is_simple_power(1, 13));\nconsole.log(is_simple_power(1, 14));\nconsole.log(is_simple_power(1, 15));\nconsole.log(is_simple_power(1, 16));\nconsole.log(is_simple_power(1, 17));\nconsole.log(is_simple_power(1, 18));\nconsole.log(is_simple_power(1, 19));\nconsole.log(is_simple_power(1, 20));\nconsole.log(is_simple_power(1, 21));\nconsole.log(is_simple_power(1, 22));\nconsole.log(is_simple_power(1, 23));\nconsole.log(is_simple_power(1, 24));\nconsole.log(is_simple_power(1, 25));\nconsole.log(is_simple_power(1, 26));\nconsole.log(is_simple_power(1, 27));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpsbn7ojjw.js:47:12)\n    at Object.<anonymous> (/tmp/tmpsbn7ojjw.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\nfalse\nfalse\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334953
    },
    {
      "exit_code": -1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = false;\n    let i = 0;\n    while (Math.pow(n, i) <= x) {\n        if (Math.pow(n, i) === x) {\n            result = true;\n        }\n        i++;\n    }\n    return result;\n}\n\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(9, 2));\nconsole.log(is_simple_power(16, 2));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(32, 2));\nconsole.log(is_simple_power(256, 2));\nconsole.log(is_simple_power(1024, 2));\nconsole.log(is_simple_power(1025, 2));\nconsole.log(is_simple_power(1026, 2));\nconsole.log(is_simple_power(1028, 2));\nconsole.log(is_simple_power(1030, 2));\nconsole.log(is_simple_power(1031, 2));\nconsole.log(is_simple_power(1032, 2));\nconsole.log(is_simple_power(1033, 2));\nconsole.log(is_simple_power(1034, 2));\nconsole.log(is_simple_power(1035, 2));\nconsole.log(is_simple_power(1036, 2));\nconsole.log(is_simple_power(1037, 2));\nconsole.log(is_simple_power(1038, 2));\nconsole.log(is_simple_power(1039, 2));\nconsole.log(is_simple_power(1040, 2));\nconsole.log(is_simple_power(1041, 2));\nconsole.log(is_simple_power(1042, 2));\nconsole.log(is_simple_power(1043, 2));\nconsole.log(is_simple_power(1044, 2));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "Timeout",
      "stderr": "",
      "stdout": "true\ntrue\ntrue\ntrue\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334970
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result = Math.log(x) / Math.log(n);\n  return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(12, 2));\nconsole.log(is_simple_power(12, 3));\nconsole.log(is_simple_power(12, 4));\nconsole.log(is_simple_power(12, 5));\nconsole.log(is_simple_power(12, 6));\nconsole.log(is_simple_power(12, 7));\nconsole.log(is_simple_power(12, 8));\nconsole.log(is_simple_power(12, 9));\nconsole.log(is_simple_power(12, 10));\nconsole.log(is_simple_power(12, 11));\nconsole.log(is_simple_power(12, 12));\nconsole.log(is_simple_power(12, 13));\nconsole.log(is_simple_power(12, 14));\nconsole.log(is_simple_power(12, 15));\nconsole.log(is_simple_power(12, 16));\nconsole.log(is_simple_power(12, 17));\nconsole.log(is_simple_power(12, 18));\nconsole.log(is_simple_power(12, 19));\nconsole.log(is_simple_power(12, 20));\nconsole.log(is_simple_power(12, 21));\nconsole.log(is_simple_power(12, 22));\nconsole.log(is_simple_power(12, 23));\nconsole.log(is_simple_power(12, 24));\nconsole.log(is_simple_power(12, 25));\nconsole.log(is_simple_power(12, 26));\nconsole.log(is_simple_power(12, 27));\nconsole.log(is_simple_power(12, 28));\nconsole.log(is_simple_power(12, 29));\nconsole.log(is_simple_power(12, 30));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpy1ym02bi.js:47:12)\n    at Object.<anonymous> (/tmp/tmpy1ym02bi.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334954
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let power = Math.log(x) / Math.log(n);\n    return power % 1 === 0;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(100, 10));\nconsole.log(is_simple_power(100, 2));\nconsole.log(is_simple_power(100, 1));\nconsole.log(is_simple_power(100, 100));\nconsole.log(is_simple_power(100, 0));\nconsole.log(is_simple_power(0, 100));\nconsole.log(is_simple_power(0, 0));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 0));\nconsole.log(is_simple_power(0, 1));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(2, 1));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(2, 3));\nconsole.log(is_simple_power(2, 4));\nconsole.log(is_simple_power(2, 5));\nconsole.log(is_simple_power(2, 6));\nconsole.log(is_simple_power(2, 7));\nconsole.log(is_simple_power(2, 8));\nconsole.log(is_simple_power(2, 9));\nconsole.log(is_simple_power(2, 10));\nconsole.log(is_simple_power(2, 11));\nconsole.log(is_simple_power(2, 12));\nconsole.log(is_simple_power(2, 13));\nconsole.log(is_simple_power(2, 14));\nconsole.log(is_simple_power(2, 15));\nconsole.log(is_simple_power(2, 16));\nconsole.log(is_simple_power(2, 17));\nconsole.log(is_simple_power(2, 18));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmprsjm4x5g.js:48:12)\n    at Object.<anonymous> (/tmp/tmprsjm4x5g.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\nfalse\nfalse\ntrue\ntrue\nfalse\nfalse\nfalse\ntrue\nfalse\ntrue\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334954
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result = Math.log(x) / Math.log(n);\n  return result % 1 === 0;\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(16, 4));\nconsole.log(is_simple_power(81, 3));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(1024, 2));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(1, 3));\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(1, 5));\nconsole.log(is_simple_power(1, 6));\nconsole.log(is_simple_power(1, 7));\nconsole.log(is_simple_power(1, 8));\nconsole.log(is_simple_power(1, 9));\nconsole.log(is_simple_power(1, 10));\nconsole.log(is_simple_power(1, 11));\nconsole.log(is_simple_power(1, 12));\nconsole.log(is_simple_power(1, 13));\nconsole.log(is_simple_power(1, 14));\nconsole.log(is_simple_power(1, 15));\nconsole.log(is_simple_power(1, 16));\nconsole.log(is_simple_power(1, 17));\nconsole.log(is_simple_power(1, 18));\nconsole.log(is_simple_power(1, 19));\nconsole.log(is_simple_power(1, 20));\nconsole.log(is_simple_power(1, 21));\nconsole.log(is_simple_power(1, 22));\nconsole.log(is_simple_power(1, 23));\nconsole.log(is_simple_power(1, 24));\nconsole.log(is_simple_power(1, 25));\nconsole.log(is_simple_power(1, 26));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp_nua2avw.js:48:12)\n    at Object.<anonymous> (/tmp/tmp_nua2avw.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\nfalse\ntrue\ntrue\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334955
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result: number = 1;\n    let count: number = 0;\n    while (result < x) {\n        result *= n;\n        count++;\n    }\n    return result === x;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(28, 3));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(126, 5));\nconsole.log(is_simple_power(625, 5));\nconsole.log(is_simple_power(626, 5));\nconsole.log(is_simple_power(625, 5));\nconsole.log(is_simple_power(626, 5));\nconsole.log(is_simple_power(625, 5));\nconsole.log(is_simple_power(626, 5));\nconsole.log(is_simple_power(625, 5));\nconsole.log(is_simple_power(626, 5));\nconsole.log(is_simple_power(625, 5));\nconsole.log(is_simple_power(626, 5));\nconsole.log(is_simple_power(625, 5));\nconsole.log(is_simple_power(626, 5));\nconsole.log(is_simple_power(625, 5));\nconsole.log(is_simple_power(626, 5));\nconsole.log(is_simple_power(625, 5));\nconsole.log(is_simple_power(626, 5));\nconsole.log(is_simple_power(625, 5));\nconsole.log(is_simple_power(626, 5));\nconsole.log(is_simple_power(625, 5));\nconsole.log(is_simple_power(626, 5));\nconsole.log(is_simple_power(625, 5));\nconsole.log(is_simple_power(626, 5));\nconsole.log(is_simple_power(625, 5));\nconsole.log(is_simple_power(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpd9rlcovh.ts(46,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334954
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n    return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(81, 3));\nconsole.log(is_simple_power(16, 4));\nconsole.log(is_simple_power(32, 4));\nconsole.log(is_simple_power(64, 4));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(1024, 4));\nconsole.log(is_simple_power(1025, 4));\nconsole.log(is_simple_power(1026, 4));\nconsole.log(is_simple_power(1028, 4));\nconsole.log(is_simple_power(1029, 4));\nconsole.log(is_simple_power(1030, 4));\nconsole.log(is_simple_power(1031, 4));\nconsole.log(is_simple_power(1032, 4));\nconsole.log(is_simple_power(1033, 4));\nconsole.log(is_simple_power(1034, 4));\nconsole.log(is_simple_power(1035, 4));\nconsole.log(is_simple_power(1036, 4));\nconsole.log(is_simple_power(1037, 4));\nconsole.log(is_simple_power(1038, 4));\nconsole.log(is_simple_power(1039, 4));\nconsole.log(is_simple_power(1040, 4));\nconsole.log(is_simple_power(1041, 4));\nconsole.log(is_simple_power(1042, 4));\nconsole.log(is_simple_power(1043, 4));\nconsole.log(is_simple_power(1044\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpppsofh3v.ts(41,1): error TS1005: ',' expected.\n../../../../tmp/tmpppsofh3v.ts(41,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334955
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n    return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(24, 4));\nconsole.log(is_simple_power(81, 3));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(1, 3));\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(1, 5));\nconsole.log(is_simple_power(1, 6));\nconsole.log(is_simple_power(1, 7));\nconsole.log(is_simple_power(1, 8));\nconsole.log(is_simple_power(1, 9));\nconsole.log(is_simple_power(1, 10));\nconsole.log(is_simple_power(1, 11));\nconsole.log(is_simple_power(1, 12));\nconsole.log(is_simple_power(1, 13));\nconsole.log(is_simple_power(1, 14));\nconsole.log(is_simple_power(1, 15));\nconsole.log(is_simple_power(1, 16));\nconsole.log(is_simple_power(1, 17));\nconsole.log(is_simple_power(1, 18));\nconsole.log(is_simple_power(1, 19));\nconsole.log(is_simple_power(1, 20));\nconsole.log(is_simple_power(1, 21));\nconsole.log(is_simple_power(1, 22));\nconsole.log(is_simple_power(1, 23));\nconsole.log(is_simple_power(1, 24));\nconsole.log(is_simple_power(1, 25));\nconsole.log(is_simple_power(1, 26));\nconsole.log(is_simple_power(1, 27));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpvlng4_y2.js:47:12)\n    at Object.<anonymous> (/tmp/tmpvlng4_y2.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\nfalse\nfalse\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334949
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result: boolean = false;\n    let power: number = 1;\n    while (power < x) {\n        power *= n;\n    }\n    if (power === x) {\n        result = true;\n    }\n    return result;\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(1024, 10));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(1, 3));\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(1, 5));\nconsole.log(is_simple_power(1, 6));\nconsole.log(is_simple_power(1, 7));\nconsole.log(is_simple_power(1, 8));\nconsole.log(is_simple_power(1, 9));\nconsole.log(is_simple_power(1, 10));\nconsole.log(is_simple_power(1, 11));\nconsole.log(is_simple_power(1, 12));\nconsole.log(is_simple_power(1, 13));\nconsole.log(is_simple_power(1, 14));\nconsole.log(is_simple_power(1, 15));\nconsole.log(is_simple_power(1, 16));\nconsole.log(is_simple_power(1, 17));\nconsole.log(is_simple_power(1, 18));\nconsole.log(is_simple_power(1, 19));\nconsole.log(is_simple_power(1, 20));\nconsole.log(is_simple_power(1, 21));\nconsole.log(is_simple_power(1, 22));\nconsole.log(is_simple_power(1, 23));\nconsole.log(is_simple_power(1, 24));\nconsole.log(is_simple_power(1, 25));\nconsole.log(is_simple_power(1, 26\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxymayk2c.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmpxymayk2c.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334955
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let power = Math.log(x) / Math.log(n);\n    return power % 1 === 0;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(625, 5));\nconsole.log(is_simple_power(216, 6));\nconsole.log(is_simple_power(1000, 10));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 10));\nconsole.log(is_simple_power(1, 100));\nconsole.log(is_simple_power(1, 1000));\nconsole.log(is_simple_power(10, 1));\nconsole.log(is_simple_power(100, 1));\nconsole.log(is_simple_power(1000, 1));\nconsole.log(is_simple_power(10, 2));\nconsole.log(is_simple_power(100, 2));\nconsole.log(is_simple_power(1000, 2));\nconsole.log(is_simple_power(10, 3));\nconsole.log(is_simple_power(100, 3));\nconsole.log(is_simple_power(1000, 3));\nconsole.log(is_simple_power(10, 4));\nconsole.log(is_simple_power(100, 4));\nconsole.log(is_simple_power(1000, 4));\nconsole.log(is_simple_power(10, 5));\nconsole.log(is_simple_power(100, 5));\nconsole.log(is_simple_power(1000, 5));\nconsole.log(is_simple_power(10, 6));\nconsole.log(is_simple_power(100, 6));\nconsole.log(is_simple_power(1000, 6));\nconsole.log(is_simple_power(10, 7));\nconsole.log(is_simple_power(100, 7));\nconsole.log(is_simple_power(1000, 7));\nconsole.log(is_simple_power(10, 8));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpnprjdccr.js:48:12)\n    at Object.<anonymous> (/tmp/tmpnprjdccr.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\nfalse\nfalse\nfalse\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334955
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let power = Math.log(x) / Math.log(n);\n    return power % 1 === 0;\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(28, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpho_sl2qf.js:19:12)\n    at Object.<anonymous> (/tmp/tmpho_sl2qf.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334955
    },
    {
      "exit_code": -1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = false;\n    let i = 0;\n    while (Math.pow(n, i) <= x) {\n        if (Math.pow(n, i) === x) {\n            result = true;\n        }\n        i++;\n    }\n    return result;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(5, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(625, 5));\nconsole.log(is_simple_power(24389, 3));\nconsole.log(is_simple_power(7860, 3));\nconsole.log(is_simple_power(14348907, 3));\nconsole.log(is_simple_power(43046721, 3));\nconsole.log(is_simple_power(43046722, 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "Timeout",
      "stderr": "",
      "stdout": "true\nfalse\ntrue\ntrue\ntrue\nfalse\nfalse\ntrue\ntrue\nfalse\n",
      "timestamp": 1660334971
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = false;\n    let power = 1;\n    while (power < x) {\n        power *= n;\n    }\n    if (power === x) {\n        result = true;\n    }\n    return result;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(625, 5));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(1, 3));\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(1, 5));\nconsole.log(is_simple_power(1, 6));\nconsole.log(is_simple_power(1, 7));\nconsole.log(is_simple_power(1, 8));\nconsole.log(is_simple_power(1, 9));\nconsole.log(is_simple_power(1, 10));\nconsole.log(is_simple_power(1, 11));\nconsole.log(is_simple_power(1, 12));\nconsole.log(is_simple_power(1, 13));\nconsole.log(is_simple_power(1, 14));\nconsole.log(is_simple_power(1, 15));\nconsole.log(is_simple_power(1, 16));\nconsole.log(is_simple_power(1, 17));\nconsole.log(is_simple_power(1, 18));\nconsole.log(is_simple_power(1, 19));\nconsole.log(is_simple_power(1, 20));\nconsole.log(is_simple_power(1, 21));\nconsole.log(is_simple_power(1, 22));\nconsole.log(is_simple_power(1, 23));\nconsole.log(is_simple_power(1, 24));\nconsole.log(is_simple_power(1, 25));\nconsole.log(is_simple_power(1, 26));\nconsole.log(is_simple_power(1, 27));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmptfxlkvg7.ts(47,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334956
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result = Math.log(x) / Math.log(n);\n  return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(5, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(1, 3));\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(1, 5));\nconsole.log(is_simple_power(1, 6));\nconsole.log(is_simple_power(1, 7));\nconsole.log(is_simple_power(1, 8));\nconsole.log(is_simple_power(1, 9));\nconsole.log(is_simple_power(1, 10));\nconsole.log(is_simple_power(1, 11));\nconsole.log(is_simple_power(1, 12));\nconsole.log(is_simple_power(1, 13));\nconsole.log(is_simple_power(1, 14));\nconsole.log(is_simple_power(1, 15));\nconsole.log(is_simple_power(1, 16));\nconsole.log(is_simple_power(1, 17));\nconsole.log(is_simple_power(1, 18));\nconsole.log(is_simple_power(1, 19));\nconsole.log(is_simple_power(1, 20));\nconsole.log(is_simple_power(1, 21));\nconsole.log(is_simple_power(1, 22));\nconsole.log(is_simple_power(1, 23));\nconsole.log(is_simple_power(1, 24));\nconsole.log(is_simple_power(1, 25));\nconsole.log(is_simple_power(1, 26));\nconsole.log(is_simple_power(1, 27));\nconsole.log(is_simple_power(1, 28));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpvi_m6rul.js:47:12)\n    at Object.<anonymous> (/tmp/tmpvi_m6rul.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\ntrue\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334955
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n    return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(16, 4));\nconsole.log(is_simple_power(81, 3));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(1024, 10));\nconsole.log(is_simple_power(1024, 2));\nconsole.log(is_simple_power(1024, 5));\nconsole.log(is_simple_power(1024, 8));\nconsole.log(is_simple_power(1024, 16));\nconsole.log(is_simple_power(1024, 32));\nconsole.log(is_simple_power(1024, 64));\nconsole.log(is_simple_power(1024, 128));\nconsole.log(is_simple_power(1024, 256));\nconsole.log(is_simple_power(1024, 512));\nconsole.log(is_simple_power(1024, 1024));\nconsole.log(is_simple_power(1024, 2048));\nconsole.log(is_simple_power(1024, 4096));\nconsole.log(is_simple_power(1024, 8192));\nconsole.log(is_simple_power(1024, 16384));\nconsole.log(is_simple_power(1024, 32768));\nconsole.log(is_simple_power(1024, 65536));\nconsole.log(is_simple_power(1024, 131072));\nconsole.log(is_simple_power(1024, 262144));\nconsole.log(is_simple_power(1024, 524288));\nconsole.log(is_simple_power(1024, 1048576));\nconsole.log(is_simple_power(1024, 2097152));\nconsole.log(is_simple_power(1024, 4194304));\nconsole.log(is_simple_power(1024, 8388608));\nconsole.log(is_simple_power(1024, 16777216));\nconsole.log(is_simple_power(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpn5qcovc6.ts(41,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334955
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result = Math.log(x) / Math.log(n);\n  return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(72, 9));\nconsole.log(is_simple_power(100, 10));\nconsole.log(is_simple_power(100, 1));\nconsole.log(is_simple_power(1, 100));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(0, 0));\nconsole.log(is_simple_power(0, 1));\nconsole.log(is_simple_power(1, 0));\nconsole.log(is_simple_power(1, -1));\nconsole.log(is_simple_power(-1, 1));\nconsole.log(is_simple_power(-1, -1));\nconsole.log(is_simple_power(-1, 2));\nconsole.log(is_simple_power(2, -1));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(2, 3));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 3));\nconsole.log(is_simple_power(4, 3));\nconsole.log(is_simple_power(5, 3));\nconsole.log(is_simple_power(6, 3));\nconsole.log(is_simple_power(8, 3));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(27, 2));\nconsole.log(is_simple_power(27, 1));\nconsole.log(is_simple_power(27, 0));\nconsole.log(is_simple_power(0, 27));\nconsole.log(is_simple_power(1, 27));\nconsole.log(is_simple_power(2, 27));\nconsole.log(is_simple_power(3,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpygk3tudf.ts(42,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334955
    },
    {
      "exit_code": -1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = false;\n    let i = 0;\n    while (Math.pow(n, i) <= x) {\n        if (Math.pow(n, i) === x) {\n            result = true;\n        }\n        i++;\n    }\n    return result;\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(9, 2));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(28, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "Timeout",
      "stderr": "",
      "stdout": "true\nfalse\ntrue\nfalse\n",
      "timestamp": 1660334972
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let power = Math.log(x) / Math.log(n);\n  return power % 1 === 0;\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(25, 5));\nconsole.log(is_simple_power(24, 6));\nconsole.log(is_simple_power(81, 9));\nconsole.log(is_simple_power(1024, 10));\nconsole.log(is_simple_power(729, 9));\nconsole.log(is_simple_power(27, 4));\nconsole.log(is_simple_power(256, 3));\nconsole.log(is_simple_power(25, 6));\nconsole.log(is_simple_power(24, 5));\nconsole.log(is_simple_power(81, 4));\nconsole.log(is_simple_power(1024, 2));\nconsole.log(is_simple_power(729, 3));\nconsole.log(is_simple_power(27, 2));\nconsole.log(is_simple_power(256, 8));\nconsole.log(is_simple_power(25, 2));\nconsole.log(is_simple_power(24, 4));\nconsole.log(is_simple_power(81, 3));\nconsole.log(is_simple_power(1024, 4));\nconsole.log(is_simple_power(729, 2));\nconsole.log(is_simple_power(27, 5));\nconsole.log(is_simple_power(256, 2));\nconsole.log(is_simple_power(25, 3));\nconsole.log(is_simple_power(24, 2));\nconsole.log(is_simple_power(81, 2));\nconsole.log(is_simple_power(1024, 8));\nconsole.log(is_simple_power(729, 4));\nconsole.log(is_simple_power(27, 8));\nconsole.log(is_simple_power(256, 16));\nconsole.log(is_simple_power(25, 4));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp6wgfdpxl.js:48:12)\n    at Object.<anonymous> (/tmp/tmp6wgfdpxl.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\nfalse\ntrue\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\ntrue\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\ntrue\nfalse\n",
      "timestamp": 1660334956
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    return Math.log(x) / Math.log(n) % 1 === 0;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(28, 3));\nconsole.log(is_simple_power(27, 4));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(256, 2));\nconsole.log(is_simple_power(256, 1));\nconsole.log(is_simple_power(256, 0));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpju9ubg7e.js:24:12)\n    at Object.<anonymous> (/tmp/tmpju9ubg7e.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\nfalse\nfalse\ntrue\ntrue\nfalse\ntrue\n",
      "timestamp": 1660334956
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let power = Math.log(x) / Math.log(n);\n    return power % 1 === 0;\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(1024, 5));\nconsole.log(is_simple_power(10000, 10));\nconsole.log(is_simple_power(1024, 2));\nconsole.log(is_simple_power(1024, 3));\nconsole.log(is_simple_power(1024, 4));\nconsole.log(is_simple_power(1024, 5));\nconsole.log(is_simple_power(1024, 10));\nconsole.log(is_simple_power(1024, 11));\nconsole.log(is_simple_power(1024, 12));\nconsole.log(is_simple_power(1024, 13));\nconsole.log(is_simple_power(1024, 14));\nconsole.log(is_simple_power(1024, 15));\nconsole.log(is_simple_power(1024, 16));\nconsole.log(is_simple_power(1024, 17));\nconsole.log(is_simple_power(1024, 18));\nconsole.log(is_simple_power(1024, 19));\nconsole.log(is_simple_power(1024, 20));\nconsole.log(is_simple_power(1024, 21));\nconsole.log(is_simple_power(1024, 22));\nconsole.log(is_simple_power(1024, 23));\nconsole.log(is_simple_power(1024, 24));\nconsole.log(is_simple_power(1024, 25));\nconsole.log(is_simple_power(1024, 26));\nconsole.log(is_simple_power(1024, 27));\nconsole.log(is_simple_power(1024, 28));\nconsole.log(is_simple_power(1024, 29));\nconsole.log(is_simple_power(1024, 30));\nconsole.log(is_simple_power(1024, 31));\nconsole.log(is_simple_power(1024, 32));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpdgogai_5.js:48:12)\n    at Object.<anonymous> (/tmp/tmpdgogai_5.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\nfalse\ntrue\ntrue\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\ntrue\n",
      "timestamp": 1660334956
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  return Math.log(x) / Math.log(n) % 1 === 0;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(256, 2));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(256, 8));\nconsole.log(is_simple_power(256, 16));\nconsole.log(is_simple_power(256, 32));\nconsole.log(is_simple_power(256, 64));\nconsole.log(is_simple_power(256, 128));\nconsole.log(is_simple_power(256, 256));\nconsole.log(is_simple_power(256, 512));\nconsole.log(is_simple_power(256, 1024));\nconsole.log(is_simple_power(256, 2048));\nconsole.log(is_simple_power(256, 4096));\nconsole.log(is_simple_power(256, 8192));\nconsole.log(is_simple_power(256, 16384));\nconsole.log(is_simple_power(256, 32768));\nconsole.log(is_simple_power(256, 65536));\nconsole.log(is_simple_power(256, 131072));\nconsole.log(is_simple_power(256, 262144));\nconsole.log(is_simple_power(256, 524288));\nconsole.log(is_simple_power(256, 1048576));\nconsole.log(is_simple_power(256, 2097152));\nconsole.log(is_simple_power(256, 4194304));\nconsole.log(is_simple_power(256, 8388608));\nconsole.log(is_simple_power(256, 16777216));\nconsole.log(is_simple_power(256, 33554432));\nconsole.log(is_simple_power(256, 67108864));\nconsole.log(is_simple_power(256, 134217728));\nconsole.log(is_simple_power(256, 268435456));\nconsole.log(is\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwlfm5ixz.ts(40,1): error TS1005: ',' expected.\n../../../../tmp/tmpwlfm5ixz.ts(40,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334957
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = 0;\n    let i = 1;\n    while (result < x) {\n        result = Math.pow(n, i);\n        if (result === x) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(5, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(625, 5));\nconsole.log(is_simple_power(1, 5));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(0, 0));\nconsole.log(is_simple_power(0, 1));\nconsole.log(is_simple_power(1, 0));\nconsole.log(is_simple_power(1, -1));\nconsole.log(is_simple_power(1, -2));\nconsole.log(is_simple_power(1, -3));\nconsole.log(is_simple_power(1, -4));\nconsole.log(is_simple_power(1, -5));\nconsole.log(is_simple_power(1, -6));\nconsole.log(is_simple_power(1, -7));\nconsole.log(is_simple_power(1, -8));\nconsole.log(is_simple_power(1, -9));\nconsole.log(is_simple_power(1, -10));\nconsole.log(is_simple_power(1, -11));\nconsole.log(is_simple_power(1, -12));\nconsole.log(is_simple_power(1, -13));\nconsole.log(is_simple_power(1, -14));\nconsole.log(is_simple_power(1, -15));\nconsole.log(is_simple_power(1, -16));\nconsole.log(is_simple_power(1, -17));\nconsole.log(is_simple_power(1, -18));\nconsole.log(is_simple_power(1, -19));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0m6j0715.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334957
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result = false;\n  let i = 0;\n  while (Math.pow(n, i) <= x) {\n    if (Math.pow(n, i) === x) {\n      result = true;\n    }\n    i++;\n  }\n  return result;\n}\n\nconsole.log(is_simple_power(4, 2)); // true\nconsole.log(is_simple_power(125, 5)); // true\nconsole.log(is_simple_power(256, 4)); // true\nconsole.log(is_simple_power(243, 3)); // true\nconsole.log(is_simple_power(16807, 7)); // true\nconsole.log(is_simple_power(16, 4)); // false\nconsole.log(is_simple_power(15, 3)); // false\nconsole.log(is_simple_power(17, 4)); // false\nconsole.log(is_simple_power(256, 3)); // false\nconsole.log(is_simple_power(81, 4)); // false\nconsole.log(is_simple_power(81, 2)); // false\nconsole.log(is_simple_power(1, 1)); // true\nconsole.log(is_simple_power(1, 2)); // false\nconsole.log(is_simple_power(1, 3)); // false\nconsole.log(is_simple_power(1, 4)); // false\nconsole.log(is_simple_power(1, 5)); // false\nconsole.log(is_simple_power(1, 6)); // false\nconsole.log(is_simple_power(1, 7)); // false\nconsole.log(is_simple_power(1, 8)); // false\nconsole.log(is_simple_power(1, 9)); // false\nconsole.log(is_simple_power(1, 10)); // false\nconsole.log(is_simple_power(1, 11)); // false\nconsole.log(is_simple_power(1, 12)); // false\nconsole.log(is_simple_power(1, 13)); // false\nconsole.log(is_simple_power(1, 14)); // false\nconsole.log(is_simple_power(1, 15\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp4zle62zb.ts(43,1): error TS1005: ',' expected.\n../../../../tmp/tmp4zle62zb.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334958
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let power = Math.log(x) / Math.log(n);\n    return Number.isInteger(power);\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(24, 4));\nconsole.log(is_simple_power(81, 3));\nconsole.log(is_simple_power(1024, 10));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 10));\nconsole.log(is_simple_power(1, 100));\nconsole.log(is_simple_power(1, 1000));\nconsole.log(is_simple_power(1, 10000));\nconsole.log(is_simple_power(1, 100000));\nconsole.log(is_simple_power(1, 1000000));\nconsole.log(is_simple_power(1, 10000000));\nconsole.log(is_simple_power(1, 100000000));\nconsole.log(is_simple_power(1, 1000000000));\nconsole.log(is_simple_power(1, 10000000000));\nconsole.log(is_simple_power(1, 100000000000));\nconsole.log(is_simple_power(1, 1000000000000));\nconsole.log(is_simple_power(1, 10000000000000));\nconsole.log(is_simple_power(1, 100000000000000));\nconsole.log(is_simple_power(1, 1000000000000000));\nconsole.log(is_simple_power(1, 10000000000000000));\nconsole.log(is_simple_power(1, 100000000000000000));\nconsole.log(is_simple_power(1, 1000000000000000000));\nconsole.log(is_simple_power(1, 10000000000000000000));\nconsole.log(is_simple_power(1, 100000000000000000000));\nconsole.log(is_simple_power(1, 1000000000000000000000));\nconsole.log(is_simple_power(1, 10000000000000000000000));\nconsole.log(is_simple_power(1, 100000000000000000000000\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpd46pyxji.ts(40,1): error TS1005: ',' expected.\n../../../../tmp/tmpd46pyxji.ts(40,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334958
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let num = Math.log(x) / Math.log(n);\n  return Math.floor(num) === num;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(1, 3));\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(1, 5));\nconsole.log(is_simple_power(1, 6));\nconsole.log(is_simple_power(1, 7));\nconsole.log(is_simple_power(1, 8));\nconsole.log(is_simple_power(1, 9));\nconsole.log(is_simple_power(1, 10));\nconsole.log(is_simple_power(1, 11));\nconsole.log(is_simple_power(1, 12));\nconsole.log(is_simple_power(1, 13));\nconsole.log(is_simple_power(1, 14));\nconsole.log(is_simple_power(1, 15));\nconsole.log(is_simple_power(1, 16));\nconsole.log(is_simple_power(1, 17));\nconsole.log(is_simple_power(1, 18));\nconsole.log(is_simple_power(1, 19));\nconsole.log(is_simple_power(1, 20));\nconsole.log(is_simple_power(1, 21));\nconsole.log(is_simple_power(1, 22));\nconsole.log(is_simple_power(1, 23));\nconsole.log(is_simple_power(1, 24));\nconsole.log(is_simple_power(1, 25));\nconsole.log(is_simple_power(1, 26));\nconsole.log(is_simple_power(1, 27));\nconsole.log(is_simple_power(1, 28));\nconsole.log(is_simple_power(1, 29\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvknvu5bq.ts(42,1): error TS1005: ',' expected.\n../../../../tmp/tmpvknvu5bq.ts(42,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334958
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result = Math.log(x) / Math.log(n);\n  return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(16, 4));\nconsole.log(is_simple_power(81, 3));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(1024, 2));\nconsole.log(is_simple_power(1728, 12));\nconsole.log(is_simple_power(3375, 15));\nconsole.log(is_simple_power(32768, 16));\nconsole.log(is_simple_power(65536, 16));\nconsole.log(is_simple_power(262144, 16));\nconsole.log(is_simple_power(7776, 12));\nconsole.log(is_simple_power(46656, 12));\nconsole.log(is_simple_power(117649, 13));\nconsole.log(is_simple_power(823543, 13));\nconsole.log(is_simple_power(2097152, 13));\nconsole.log(is_simple_power(78125, 5));\nconsole.log(is_simple_power(1679616, 12));\nconsole.log(is_simple_power(279936, 12));\nconsole.log(is_simple_power(16777216, 16));\nconsole.log(is_simple_power(474552, 12));\nconsole.log(is_simple_power(85766121, 11));\nconsole.log(is_simple_power(16777216, 16));\nconsole.log(is_simple_power(2821109907456, 14));\nconsole.log(is_simple_power(35831808, 12));\nconsole.log(is_simple_power(387420489, 14));\nconsole.log(is_simple_power(614656, 12));\nconsole.log(is_simple_power(205891132094649, 15));\nconsole.log(is_simple_power(612220032, 12\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmph_illwyp.ts(39,1): error TS1005: ',' expected.\n../../../../tmp/tmph_illwyp.ts(39,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334958
    },
    {
      "exit_code": -1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = false;\n    let i = 1;\n    while (n ** i <= x) {\n        if (n ** i === x) {\n            result = true;\n        }\n        i++;\n    }\n    return result;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(72, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "Timeout",
      "stderr": "",
      "stdout": "true\ntrue\nfalse\n",
      "timestamp": 1660334975
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let power = Math.log(x) / Math.log(n);\n    return Math.pow(n, Math.round(power)) === x;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(625, 5));\nconsole.log(is_simple_power(625, 6));\nconsole.log(is_simple_power(1024, 2));\nconsole.log(is_simple_power(1024, 10));\nconsole.log(is_simple_power(1024, 5));\nconsole.log(is_simple_power(3125, 5));\nconsole.log(is_simple_power(243, 3));\nconsole.log(is_simple_power(243, 5));\nconsole.log(is_simple_power(243, 6));\nconsole.log(is_simple_power(243, 7));\nconsole.log(is_simple_power(243, 8));\nconsole.log(is_simple_power(243, 9));\nconsole.log(is_simple_power(243, 10));\nconsole.log(is_simple_power(243, 11));\nconsole.log(is_simple_power(243, 12));\nconsole.log(is_simple_power(243, 13));\nconsole.log(is_simple_power(243, 14));\nconsole.log(is_simple_power(243, 15));\nconsole.log(is_simple_power(243, 16));\nconsole.log(is_simple_power(243, 17));\nconsole.log(is_simple_power(243, 18));\nconsole.log(is_simple_power(243, 19));\nconsole.log(is_simple_power(243, 20));\nconsole.log(is_simple_power(243, 21));\nconsole.log(is_simple_power(243, 22));\nconsole.log(is_simple_power(243, 23));\nconsole.log(is_simple_power(243, 24));\nconsole.log(is_simple_power(243, 25));\nconsole.log(is_simple_power(243, 26));\nconsole.log(is\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3q_9h2mv.ts(42,1): error TS1005: ',' expected.\n../../../../tmp/tmp3q_9h2mv.ts(42,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334958
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let power = Math.log(x) / Math.log(n);\n    return power % 1 === 0;\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(28, 3));\nconsole.log(is_simple_power(81, 3));\nconsole.log(is_simple_power(82, 3));\nconsole.log(is_simple_power(243, 3));\nconsole.log(is_simple_power(244, 3));\nconsole.log(is_simple_power(729, 3));\nconsole.log(is_simple_power(730, 3));\nconsole.log(is_simple_power(2187, 3));\nconsole.log(is_simple_power(2188, 3));\nconsole.log(is_simple_power(6561, 3));\nconsole.log(is_simple_power(6562, 3));\nconsole.log(is_simple_power(19683, 3));\nconsole.log(is_simple_power(19684, 3));\nconsole.log(is_simple_power(59049, 3));\nconsole.log(is_simple_power(59050, 3));\nconsole.log(is_simple_power(177147, 3));\nconsole.log(is_simple_power(177148, 3));\nconsole.log(is_simple_power(531441, 3));\nconsole.log(is_simple_power(531442, 3));\nconsole.log(is_simple_power(1594323, 3));\nconsole.log(is_simple_power(1594324, 3));\nconsole.log(is_simple_power(4782969, 3));\nconsole.log(is_simple_power(4782970, 3));\nconsole.log(is_simple_power(14348907, 3));\nconsole.log(is_simple_power(14348908, 3));\nconsole.log(is_simple_power(43046721, 3));\nconsole.log(is_simple_power(43046722,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp5t00o3zs.ts(40,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334958
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n    return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(28, 3));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(126, 5));\nconsole.log(is_simple_power(125, 3));\nconsole.log(is_simple_power(126, 3));\nconsole.log(is_simple_power(125, 125));\nconsole.log(is_simple_power(125, 126));\nconsole.log(is_simple_power(125, 127));\nconsole.log(is_simple_power(125, 128));\nconsole.log(is_simple_power(125, 129));\nconsole.log(is_simple_power(125, 130));\nconsole.log(is_simple_power(125, 131));\nconsole.log(is_simple_power(125, 132));\nconsole.log(is_simple_power(125, 133));\nconsole.log(is_simple_power(125, 134));\nconsole.log(is_simple_power(125, 135));\nconsole.log(is_simple_power(125, 136));\nconsole.log(is_simple_power(125, 137));\nconsole.log(is_simple_power(125, 138));\nconsole.log(is_simple_power(125, 139));\nconsole.log(is_simple_power(125, 140));\nconsole.log(is_simple_power(125, 141));\nconsole.log(is_simple_power(125, 142));\nconsole.log(is_simple_power(125, 143));\nconsole.log(is_simple_power(125, 144));\nconsole.log(is_simple_power(125, 145));\nconsole.log(is_simple_power(125, 146));\nconsole.log(is_simple_power(125, 147));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpakda6rl4.js:47:12)\n    at Object.<anonymous> (/tmp/tmpakda6rl4.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334959
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n    return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(28, 3));\nconsole.log(is_simple_power(81, 3));\nconsole.log(is_simple_power(82, 3));\nconsole.log(is_simple_power(243, 3));\nconsole.log(is_simple_power(244, 3));\nconsole.log(is_simple_power(245, 3));\nconsole.log(is_simple_power(246, 3));\nconsole.log(is_simple_power(247, 3));\nconsole.log(is_simple_power(248, 3));\nconsole.log(is_simple_power(249, 3));\nconsole.log(is_simple_power(250, 3));\nconsole.log(is_simple_power(251, 3));\nconsole.log(is_simple_power(252, 3));\nconsole.log(is_simple_power(253, 3));\nconsole.log(is_simple_power(254, 3));\nconsole.log(is_simple_power(255, 3));\nconsole.log(is_simple_power(256, 3));\nconsole.log(is_simple_power(257, 3));\nconsole.log(is_simple_power(258, 3));\nconsole.log(is_simple_power(259, 3));\nconsole.log(is_simple_power(260, 3));\nconsole.log(is_simple_power(261, 3));\nconsole.log(is_simple_power(262, 3));\nconsole.log(is_simple_power(263, 3));\nconsole.log(is_simple_power(264, 3));\nconsole.log(is_simple_power(265, 3));\nconsole.log(is_simple_power(266, 3));\nconsole.log(is_simple_power(267, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp9cr8nsio.js:47:12)\n    at Object.<anonymous> (/tmp/tmp9cr8nsio.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334959
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  const root = Math.sqrt(x);\n  if (root % 1 === 0) {\n    return root === n;\n  } else {\n    return false;\n  }\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(256, 2));\nconsole.log(is_simple_power(25, 2));\nconsole.log(is_simple_power(24, 2));\nconsole.log(is_simple_power(576, 6));\nconsole.log(is_simple_power(10, 2));\nconsole.log(is_simple_power(10, -2));\nconsole.log(is_simple_power(0.25, -2));\nconsole.log(is_simple_power(0.25, 2));\nconsole.log(is_simple_power(0.125, -3));\nconsole.log(is_simple_power(0.125, 3));\nconsole.log(is_simple_power(0.03125, -5));\nconsole.log(is_simple_power(0.03125, 5));\nconsole.log(is_simple_power(0.0078125, -7));\nconsole.log(is_simple_power(0.0078125, 7));\nconsole.log(is_simple_power(0.0009765625, -9));\nconsole.log(is_simple_power(0.0009765625, 9));\nconsole.log(is_simple_power(0.0001220703125, -11));\nconsole.log(is_simple_power(0.0001220703125, 11));\nconsole.log(is_simple_power(0.0000152587890625, -13));\nconsole.log(is_simple_power(0.0000152587890625, 13));\nconsole.log(is_simple_power(0.0000019073486328125, -15));\nconsole.log(is_simple_power(0.0000019073486328125, 15));\nconsole.log(is_simple_power\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpc_y_05s6.ts(40,1): error TS1005: ',' expected.\n../../../../tmp/tmpc_y_05s6.ts(40,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334959
    },
    {
      "exit_code": 0,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = false;\n    for (let i = 0; i < x; i++) {\n        if (Math.pow(n, i) === x) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(81, 3));\nconsole.log(is_simple_power(81, 4));\nconsole.log(is_simple_power(64, 4));\nconsole.log(is_simple_power(64, 2));\nconsole.log(is_simple_power(64, 5));\nconsole.log(is_simple_power(64, 6));\nconsole.log(is_simple_power(64, 7));\nconsole.log(is_simple_power(64, 8));\nconsole.log(is_simple_power(64, 9));\nconsole.log(is_simple_power(64, 10));\nconsole.log(is_simple_power(64, 11));\nconsole.log(is_simple_power(64, 12));\nconsole.log(is_simple_power(64, 13));\nconsole.log(is_simple_power(64, 14));\nconsole.log(is_simple_power(64, 15));\nconsole.log(is_simple_power(64, 16));\nconsole.log(is_simple_power(64, 17));\nconsole.log(is_simple_power(64, 18));\nconsole.log(is_simple_power(64, 19));\nconsole.log(is_simple_power(64, 20));\nconsole.log(is_simple_power(64, 21));\nconsole.log(is_simple_power(64, 22));\nconsole.log(is_simple_power(64, 23));\nconsole.log(is_simple_power(64, 24));\nconsole.log(is_simple_power(64, 25));\nconsole.log(is_simple_power(64, 26));\nconsole.log(is_simple_power(64, 27));\nconsole.log(is_simple_power(64, 28));\nconsole.log(is_simple_power(64, 29));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "true\ntrue\nfalse\ntrue\ntrue\nfalse\nfalse\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334959
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n    return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(28, 3));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(125, 3));\nconsole.log(is_simple_power(125, 125));\nconsole.log(is_simple_power(125, 1));\nconsole.log(is_simple_power(125, 0));\nconsole.log(is_simple_power(1, 125));\nconsole.log(is_simple_power(0, 125));\nconsole.log(is_simple_power(0, 0));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 0));\nconsole.log(is_simple_power(0, 1));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp9rcig78s.js:30:12)\n    at Object.<anonymous> (/tmp/tmp9rcig78s.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\nfalse\nfalse\ntrue\nfalse\ntrue\ntrue\nfalse\nfalse\nfalse\ntrue\nfalse\n",
      "timestamp": 1660334959
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let i = 1;\n  while (Math.pow(n, i) <= x) {\n    if (Math.pow(n, i) === x) {\n      return true;\n    }\n    i++;\n  }\n  return false;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(5, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(216, 6));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(0, 0));\nconsole.log(is_simple_power(1, 0));\nconsole.log(is_simple_power(0, 1));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(1, 3));\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(1, 5));\nconsole.log(is_simple_power(1, 6));\nconsole.log(is_simple_power(1, 7));\nconsole.log(is_simple_power(1, 8));\nconsole.log(is_simple_power(1, 9));\nconsole.log(is_simple_power(1, 10));\nconsole.log(is_simple_power(1, 11));\nconsole.log(is_simple_power(1, 12));\nconsole.log(is_simple_power(1, 13));\nconsole.log(is_simple_power(1, 14));\nconsole.log(is_simple_power(1, 15));\nconsole.log(is_simple_power(1, 16));\nconsole.log(is_simple_power(1, 17));\nconsole.log(is_simple_power(1, 18));\nconsole.log(is_simple_power(1, 19));\nconsole.log(is_simple_power(1, 20));\nconsole.log(is_simple_power(1,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp34v7f4wm.ts(46,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334959
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n    return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(16, 4));\nconsole.log(is_simple_power(81, 3));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(1024, 2));\nconsole.log(is_simple_power(1024, 10));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(1, 3));\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(1, 5));\nconsole.log(is_simple_power(1, 6));\nconsole.log(is_simple_power(1, 7));\nconsole.log(is_simple_power(1, 8));\nconsole.log(is_simple_power(1, 9));\nconsole.log(is_simple_power(1, 10));\nconsole.log(is_simple_power(1, 11));\nconsole.log(is_simple_power(1, 12));\nconsole.log(is_simple_power(1, 13));\nconsole.log(is_simple_power(1, 14));\nconsole.log(is_simple_power(1, 15));\nconsole.log(is_simple_power(1, 16));\nconsole.log(is_simple_power(1, 17));\nconsole.log(is_simple_power(1, 18));\nconsole.log(is_simple_power(1, 19));\nconsole.log(is_simple_power(1, 20));\nconsole.log(is_simple_power(1, 21));\nconsole.log(is_simple_power(1, 22));\nconsole.log(is_simple_power(1, 23));\nconsole.log(is_simple_power(1, 24));\nconsole.log(is_simple_power(1, 25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp2oxi5_k4.js:47:12)\n    at Object.<anonymous> (/tmp/tmp2oxi5_k4.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\nfalse\ntrue\ntrue\nfalse\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334960
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result = Math.log(x) / Math.log(n);\n  return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(1024, 2));\nconsole.log(is_simple_power(1024, 10));\nconsole.log(is_simple_power(1024, 3));\nconsole.log(is_simple_power(1024, 1));\nconsole.log(is_simple_power(1, 1024));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 0));\nconsole.log(is_simple_power(0, 0));\nconsole.log(is_simple_power(0, 1));\nconsole.log(is_simple_power(0, 2));\nconsole.log(is_simple_power(0, 3));\nconsole.log(is_simple_power(0, 4));\nconsole.log(is_simple_power(0, 5));\nconsole.log(is_simple_power(0, 6));\nconsole.log(is_simple_power(0, 7));\nconsole.log(is_simple_power(0, 8));\nconsole.log(is_simple_power(0, 9));\nconsole.log(is_simple_power(0, 10));\nconsole.log(is_simple_power(0, 11));\nconsole.log(is_simple_power(0, 12));\nconsole.log(is_simple_power(0, 13));\nconsole.log(is_simple_power(0, 14));\nconsole.log(is_simple_power(0, 15));\nconsole.log(is_simple_power(0, 16));\nconsole.log(is_simple_power(0, 17));\nconsole.log(is_simple_power(0, 18));\nconsole.log(is_simple_power(0, 19));\nconsole.log(is_simple_power(0, 20));\nconsole.log(is_simple_power(0, 21));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpune2vc1_.js:47:12)\n    at Object.<anonymous> (/tmp/tmpune2vc1_.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\nfalse\nfalse\nfalse\ntrue\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334960
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n    return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(28, 3));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(126, 5));\nconsole.log(is_simple_power(125, 3));\nconsole.log(is_simple_power(126, 3));\nconsole.log(is_simple_power(125, 6));\nconsole.log(is_simple_power(126, 6));\nconsole.log(is_simple_power(125, 125));\nconsole.log(is_simple_power(126, 126));\nconsole.log(is_simple_power(125, 1));\nconsole.log(is_simple_power(126, 1));\nconsole.log(is_simple_power(125, 0));\nconsole.log(is_simple_power(126, 0));\nconsole.log(is_simple_power(0, 0));\nconsole.log(is_simple_power(0, 1));\nconsole.log(is_simple_power(0, 125));\nconsole.log(is_simple_power(0, 126));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 125));\nconsole.log(is_simple_power(1, 126));\nconsole.log(is_simple_power(1, 0));\nconsole.log(is_simple_power(125, 125));\nconsole.log(is_simple_power(126, 126));\nconsole.log(is_simple_power(125, 126));\nconsole.log(is_simple_power(126, 125));\nconsole.log(is_simple_power(125, -125));\nconsole.log(is_simple_power(126, -126));\nconsole.log(is_simple_power(125, -126));\nconsole.log(is_simple_power(126,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0bmsxdvs.ts(42,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334960
    },
    {
      "exit_code": 1,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n    return result % 1 === 0;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(1024, 2));\nconsole.log(is_simple_power(1024, 10));\nconsole.log(is_simple_power(1024, 3));\nconsole.log(is_simple_power(1024, 1));\nconsole.log(is_simple_power(1, 1024));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(1, 3));\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(1, 5));\nconsole.log(is_simple_power(1, 6));\nconsole.log(is_simple_power(1, 7));\nconsole.log(is_simple_power(1, 8));\nconsole.log(is_simple_power(1, 9));\nconsole.log(is_simple_power(1, 10));\nconsole.log(is_simple_power(1, 11));\nconsole.log(is_simple_power(1, 12));\nconsole.log(is_simple_power(1, 13));\nconsole.log(is_simple_power(1, 14));\nconsole.log(is_simple_power(1, 15));\nconsole.log(is_simple_power(1, 16));\nconsole.log(is_simple_power(1, 17));\nconsole.log(is_simple_power(1, 18));\nconsole.log(is_simple_power(1, 19));\nconsole.log(is_simple_power(1, 20));\nconsole.log(is_simple_power(1, 21));\nconsole.log(is_simple_power(1, 22));\nconsole.log(is_simple_power(1, 23));\nconsole.log(is_simple_power(1, 24));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpmee3zmof.js:48:12)\n    at Object.<anonymous> (/tmp/tmpmee3zmof.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\ntrue\nfalse\nfalse\nfalse\ntrue\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n",
      "timestamp": 1660334960
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n    let result = false;\n    let i = 0;\n    while (Math.pow(n, i) <= x) {\n        if (Math.pow(n, i) === x) {\n            result = true;\n        }\n        i++;\n    }\n    return result;\n}\n\nconsole.log(is_simple_power(16, 2));\nconsole.log(is_simple_power(81, 3));\nconsole.log(is_simple_power(256, 4));\nconsole.log(is_simple_power(1024, 5));\nconsole.log(is_simple_power(243, 3));\nconsole.log(is_simple_power(32, 4));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(1, 3));\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(1, 5));\nconsole.log(is_simple_power(1, 6));\nconsole.log(is_simple_power(1, 7));\nconsole.log(is_simple_power(1, 8));\nconsole.log(is_simple_power(1, 9));\nconsole.log(is_simple_power(1, 10));\nconsole.log(is_simple_power(1, 11));\nconsole.log(is_simple_power(1, 12));\nconsole.log(is_simple_power(1, 13));\nconsole.log(is_simple_power(1, 14));\nconsole.log(is_simple_power(1, 15));\nconsole.log(is_simple_power(1, 16));\nconsole.log(is_simple_power(1, 17));\nconsole.log(is_simple_power(1, 18));\nconsole.log(is_simple_power(1, 19));\nconsole.log(is_simple_power(1, 20));\nconsole.log(is_simple_power(1, 21));\nconsole.log(is_simple_power(1, 22));\nconsole.log(is_simple_power(1, 23));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9g58spxe.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334960
    },
    {
      "exit_code": 2,
      "program": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\nfunction is_simple_power(x: number, n: number): boolean {\n  let result = false;\n  let i = 1;\n  while (Math.pow(n, i) <= x) {\n    if (Math.pow(n, i) === x) {\n      result = true;\n    }\n    i++;\n  }\n  return result;\n}\n\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(125, 5));\nconsole.log(is_simple_power(625, 5));\nconsole.log(is_simple_power(1, 5));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(0, 0));\nconsole.log(is_simple_power(1, 0));\nconsole.log(is_simple_power(0, 1));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(1, 2));\nconsole.log(is_simple_power(1, 3));\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(1, 5));\nconsole.log(is_simple_power(1, 6));\nconsole.log(is_simple_power(1, 7));\nconsole.log(is_simple_power(1, 8));\nconsole.log(is_simple_power(1, 9));\nconsole.log(is_simple_power(1, 10));\nconsole.log(is_simple_power(1, 11));\nconsole.log(is_simple_power(1, 12));\nconsole.log(is_simple_power(1, 13));\nconsole.log(is_simple_power(1, 14));\nconsole.log(is_simple_power(1, 15));\nconsole.log(is_simple_power(1, 16));\nconsole.log(is_simple_power(1, 17));\nconsole.log(is_simple_power(1, 18));\nconsole.log(is_simple_power(1, 19));\nconsole.log(is_simple_power(1, 20));\nconsole.log(is_simple_power(1, 21));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpf7cs7o6d.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334960
    }
  ]
}