{
  "language": "ts",
  "name": "HumanEval_93_encode",
  "results": [
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        const char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmple8f5kv6.js:25:12)\n    at Object.<anonymous> (/tmp/tmple8f5kv6.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhELLO wORLD\n",
      "timestamp": 1660333689
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (char === 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e') {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n            encodedMessage += 'k';\n        } else if (char === 'o') {\n            encodedMessage += 'q';\n        } else if (char === 'u') {\n            encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqmtkxcrt.ts(48,1): error TS1005: ',' expected.\n../../../../tmp/tmpqmtkxcrt.ts(48,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333689
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    for (let i = 0; i < message.length; i++) {\n        const char = message[i];\n        if (vowels.includes(char.toLowerCase())) {\n            const index = vowels.indexOf(char.toLowerCase());\n            encodedMessage += vowels[(index + 2) % vowels.length];\n        } else if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('Hello World!')); // 'Hlll Wrdl!'\nconsole.log(encode('I am a student')); // 'I cn a yvccn!'\nconsole.log(encode('I am a student')); // 'I cn a yvccn!'\nconsole.log(encode('I am a student')); // 'I cn a yvccn!'\nconsole.log(encode('I am a student')); // 'I cn a yvccn!'\nconsole.log(encode('I am a student')); // 'I cn a yvccn!'\nconsole.log(encode('I am a student')); // 'I cn a yvccn!'\nconsole.log(encode('I am a student')); // 'I cn a yvccn!'\nconsole.log(encode('I am a student')); // 'I cn a yvccn!'\nconsole.log(encode('I am a student')); // 'I cn a yvccn!'\nconsole.log(encode('I am a student')); // 'I cn a yvccn!'\nconsole.log(encode('I am a student')); // 'I cn a yvccn!'\nconsole.log(encode('I am a student')); // 'I cn a yvccn!'\nconsole.log(encode('I am a student')); // 'I cn a\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tost'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp__egg37_.js:42:12)\n    at Object.<anonymous> (/tmp/tmp__egg37_.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tost',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hoLLa waRLD!\nu iM i STeDoNT\nu iM i STeDoNT\nu iM i STeDoNT\nu iM i STeDoNT\nu iM i STeDoNT\nu iM i STeDoNT\nu iM i STeDoNT\nu iM i STeDoNT\nu iM i STeDoNT\nu iM i STeDoNT\nu iM i STeDoNT\nu iM i STeDoNT\nu iM i STeDoNT\n",
      "timestamp": 1660333689
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let encodedMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (vowels.includes(letter)) {\n      let index = alphabet.indexOf(letter);\n      encodedMessage += alphabet[index + 2];\n    } else if (letter === letter.toUpperCase()) {\n      encodedMessage += letter.toLowerCase();\n    } else {\n      encodedMessage += letter.toUpperCase();\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode('hello')); // 'jgnnq'\nconsole.log(encode('HELLO')); // 'jgnnq'\nconsole.log(encode('Hello World')); // 'Jgnnq Yqtnf'\nconsole.log(encode('Hello World!')); // 'Jgnnq Yqtnf!'\nconsole.log(encode('Hello World!?')); // 'Jgnnq Yqtnf!?'\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpleczrwnb.js:34:12)\n    at Object.<anonymous> (/tmp/tmpleczrwnb.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "HgLLq\nhello\nhgLLq wqRLD\nhgLLq wqRLD!\nhgLLq wqRLD!?\n",
      "timestamp": 1660333689
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        const char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('Hello')); // hELLO\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World!')); // hELLO wORLD!\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp6yj5s6ag.js:26:12)\n    at Object.<anonymous> (/tmp/tmp6yj5s6ag.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO\nhELLO wORLD\nhELLO wORLD!\n",
      "timestamp": 1660333689
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let encoded: string = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let char: string = message[i];\n    if (char === char.toUpperCase()) {\n      char = char.toLowerCase();\n    } else {\n      char = char.toUpperCase();\n    }\n    if (char === \"a\") {\n      char = \"c\";\n    } else if (char === \"e\") {\n      char = \"g\";\n    } else if (char === \"i\") {\n      char = \"k\";\n    } else if (char === \"o\") {\n      char = \"q\";\n    } else if (char === \"u\") {\n      char = \"y\";\n    }\n    encoded += char;\n  }\n  return encoded;\n}\n\nconsole.log(encode(\"Hello World\")); // \"hELLO wORLD\"\nconsole.log(encode(\"Hello World!\")); // \"hELLO wORLD!\"\nconsole.log(encode(\"Hello World!\")); // \"hELLO wORLD!\"\nconsole.log(encode(\"Hello World!\")); // \"hELLO wORLD!\"\nconsole.log(encode(\"Hello World!\")); // \"hELLO wORLD!\"\nconsole.log(encode(\"Hello World!\")); // \"hELLO wORLD!\"\nconsole.log(encode(\"Hello World!\")); // \"hELLO wORLD!\"\nconsole.log(encode(\"Hello World!\")); // \"hELLO wORLD!\"\nconsole.log(encode(\"Hello World!\")); // \"hELLO wORLD!\"\nconsole.log(encode(\"Hello World!\")); // \"hELLO wORLD!\"\nconsole.log(encode(\"Hello World!\")); // \"hELLO wORLD!\"\nconsole.log(encode(\"Hello World!\")); // \"hELLO wORLD!\"\nconsole.log(encode(\"Hello World!\")); // \"hELLO wORLD!\"\nconsole.log(encode(\"Hello World!\")); // \"hELLO wORLD!\"\nconsole.log(encode(\"Hello World!\")); // \"hELLO wORLD!\"\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmphmkgz8ql.ts(47,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333689
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let encodedMessage = \"\";\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n    if (vowels.includes(char.toLowerCase())) {\n      let index = vowels.indexOf(char.toLowerCase());\n      if (index === 4) {\n        index = -1;\n      }\n      char = vowels[index + 2];\n    }\n    if (char === char.toUpperCase()) {\n      char = char.toLowerCase();\n    } else {\n      char = char.toUpperCase();\n    }\n    encodedMessage += char;\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode(\"Hello World\")); // \"HllE Wrdl\"\nconsole.log(encode(\"Hello World!\")); // \"HllE Wrdl!\"\nconsole.log(encode(\"Hello World! How are you?\")); // \"HllE Wrdl! Hw arE yu?\"\nconsole.log(encode(\"Hello World! How are you? I am fine.\")); // \"HllE Wrdl! Hw arE yu? I am fnI.\"\nconsole.log(encode(\"Hello World! How are you? I am fine. What about you?\")); // \"HllE Wrdl! Hw arE yu? I am fnI. Wht bt yu?\"\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpgcr342sg.js:19\n        if (char === char.toUpperCase()) {\n                          ^\n\nTypeError: Cannot read properties of undefined (reading 'toUpperCase')\n    at encode (/tmp/tmpgcr342sg.js:19:27)\n    at Object.<anonymous> (/tmp/tmpgcr342sg.js:29:13)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333689
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let result: string = '';\n    let vowels: string = 'aeiou';\n    let alphabet: string = 'abcdefghijklmnopqrstuvwxyz';\n    for (let i: number = 0; i < message.length; i++) {\n        let currentChar: string = message[i];\n        let currentCharIndex: number = alphabet.indexOf(currentChar.toLowerCase());\n        if (currentCharIndex === -1) {\n            result += currentChar;\n        } else if (currentChar === currentChar.toUpperCase()) {\n            result += alphabet[currentCharIndex].toUpperCase();\n        } else if (vowels.indexOf(currentChar) !== -1) {\n            result += alphabet[currentCharIndex + 2];\n        } else {\n            result += alphabet[currentCharIndex];\n        }\n    }\n    return result;\n}\n\nconsole.log(encode('Hello World')); // Jgnnq Yqtnf\nconsole.log(encode('abcdefghijklmnopqrstuvwxyz')); // cdefghijklmnopqrstuvwxyzab\nconsole.log(encode('ABCDEFGHIJKLMNOPQRSTUVWXYZ')); // CDEFGHIJKLMNOPQRSTUVWXYZAB\nconsole.log(encode('The quick brown fox jumps over the lazy dog')); // Qeb nrfzh yoltk clu grjmp lsbo qeb ixwv ald\nconsole.log(encode('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')); // cdefghijklmnopqrstuvwxyzabCDEFGHIJKLMNOPQRSTUVWXYZAB\nconsole.log(encode('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz')); // CDEFGHIJKLMNOPQRSTUVWXYZABCdefghijklmnopqrstuvwxyzab\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp_nq8zssa.js:38:12)\n    at Object.<anonymous> (/tmp/tmp_nq8zssa.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "Hgllq Wqrld\ncbcdgfghkjklmnqpqrstwvwxyz\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nThg qwkck brqwn fqx jwmps qvgr thg lczy dqg\ncbcdgfghkjklmnqpqrstwvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZcbcdgfghkjklmnqpqrstwvwxyz\n",
      "timestamp": 1660333689
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n      encodedMessage += char.toLowerCase();\n    } else {\n      encodedMessage += char.toUpperCase();\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode(\"Hello\")); // hELLO\nconsole.log(encode(\"Hi There\")); // hI tHERE\nconsole.log(encode(\"Hello World\")); // hELLO wORLD\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmppocjzuwh.js:26:12)\n    at Object.<anonymous> (/tmp/tmppocjzuwh.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO\nhI tHERE\nhELLO wORLD\n",
      "timestamp": 1660333689
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let result: string = '';\n    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            result += char.toLowerCase();\n        } else {\n            result += char.toUpperCase();\n        }\n        if (char === 'a') {\n            result = result.slice(0, -1) + 'c';\n        } else if (char === 'e') {\n            result = result.slice(0, -1) + 'g';\n        } else if (char === 'i') {\n            result = result.slice(0, -1) + 'k';\n        } else if (char === 'o') {\n            result = result.slice(0, -1) + 'q';\n        } else if (char === 'u') {\n            result = result.slice(0, -1) + 's';\n        }\n    }\n    return result;\n}\n\nconsole.log(encode('Hello World!')); // Hlll Ccckkq!\nconsole.log(encode('Hello World!') === 'Hlll Ccckkq!');\nconsole.log(encode('abcdefghijklmnopqrstuvwxyz')); // cdefghijklmnopqrstuvwxyzb\nconsole.log(encode('abcdefghijklmnopqrstuvwxyz') === 'cdefghijklmnopqrstuvwxyzb');\nconsole.log(encode('ABCDEFGHIJKLMNOPQRSTUVWXYZ')); // CDEFGHIJKLMNOPQRSTUVWXYZB\nconsole.log(encode('ABCDEFGHIJKLMNOPQRSTUVWXYZ') === 'CDEFGHIJKLMNOPQRSTUVWXYZB');\nconsole.log(encode('The quick brown fox jumps over the lazy dog.')); // Qeb nrfzh yoltk clu grjmp lsbo qeb ixwv ald.\nconsole.log(encode('The quick brown fox jumps over the lazy dog.') === '\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0548ggo9.ts(38,73): error TS1002: Unterminated string literal.\n../../../../tmp/tmp0548ggo9.ts(39,1): error TS1005: ',' expected.\n../../../../tmp/tmp0548ggo9.ts(39,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333689
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n    if (char.match(/[a-z]/i)) {\n      if (char.match(/[a-z]/)) {\n        char = char.toUpperCase();\n      } else {\n        char = char.toLowerCase();\n      }\n      if (char.match(/[aeiou]/i)) {\n        char = char.charCodeAt(0) + 2;\n        char = String.fromCharCode(char);\n      }\n    }\n    encodedMessage += char;\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World! I am a string.\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmptvvtzayl.ts(18,9): error TS2322: Type 'number' is not assignable to type 'string'.\n../../../../tmp/tmptvvtzayl.ts(19,36): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "timestamp": 1660333689
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let encodedMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    if (message[i] === message[i].toUpperCase()) {\n      encodedMessage += message[i].toLowerCase();\n    } else {\n      encodedMessage += message[i].toUpperCase();\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpiclx18lc.js:45:12)\n    at Object.<anonymous> (/tmp/tmpiclx18lc.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\n",
      "timestamp": 1660333689
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (char === 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e') {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n            encodedMessage += 'k';\n        } else if (char === 'o') {\n            encodedMessage += 'q';\n        } else if (char === 'u') {\n            encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjdzkjayh.ts(48,1): error TS1005: ',' expected.\n../../../../tmp/tmpjdzkjayh.ts(48,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333689
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encoded: string = \"\";\n    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i: number = 0; i < message.length; i++) {\n        let currentChar: string = message[i];\n        if (currentChar === currentChar.toUpperCase()) {\n            encoded += currentChar.toLowerCase();\n        } else {\n            encoded += currentChar.toUpperCase();\n        }\n        if (vowels.includes(currentChar)) {\n            let index: number = alphabet.indexOf(currentChar);\n            encoded += alphabet[index + 2];\n        }\n    }\n    return encoded;\n}\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World! How are you?\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp8s8063tg.js:32:12)\n    at Object.<anonymous> (/tmp/tmp8s8063tg.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hEgLLOq wOqRLD\nhEgLLOq wOqRLD!\nhEgLLOq wOqRLD! hOqW AcREg YOqUw?\n",
      "timestamp": 1660333689
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n      encodedMessage += char.toLowerCase();\n    } else {\n      encodedMessage += char.toUpperCase();\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode(\"Hello\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World! How are you?\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmppwugh3am.js:27:12)\n    at Object.<anonymous> (/tmp/tmppwugh3am.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO\nhELLO wORLD\nhELLO wORLD!\nhELLO wORLD! hOW ARE YOU?\n",
      "timestamp": 1660333689
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (char === 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e') {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n            encodedMessage += 'k';\n        } else if (char === 'o') {\n            encodedMessage += 'q';\n        } else if (char === 'u') {\n            encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('hello'));\nconsole.log(encode('HELLO'));\nconsole.log(encode('Hello'));\nconsole.log(encode('hElLo'));\nconsole.log(encode('h3ll0'));\nconsole.log(encode('h3ll0'));\nconsole.log(encode('h3ll0'));\nconsole.log(encode('h3ll0'));\nconsole.log(encode('h3ll0'));\nconsole.log(encode('h3ll0'));\nconsole.log(encode('h3ll0'));\nconsole.log(encode('h3ll0'));\nconsole.log(encode('h3ll0'));\nconsole.log(encode('h3ll0'));\nconsole.log(encode('h3ll0'));\nconsole.log(encode('h3ll0'));\nconsole.log(encode('h3ll0'));\nconsole.log(encode('h3ll0'));\nconsole.log(encode('h3ll0'));\nconsole.log(encode('h3ll0'));\nconsole.log(encode('h3ll0'));\nconsole.log(encode('h3ll0'));\nconsole.log(encode('h3ll0'));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpemhy09pd.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333689
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let encoded = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n      encoded += char.toLowerCase();\n    } else {\n      encoded += char.toUpperCase();\n    }\n  }\n  return encoded;\n}\n\nconsole.log(encode(\"Hello\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World! How are you?\"));\nconsole.log(encode(\"Hello World! How are you? I am fine, thank you!\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpvtls3m37.js:28:12)\n    at Object.<anonymous> (/tmp/tmpvtls3m37.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO\nhELLO wORLD\nhELLO wORLD!\nhELLO wORLD! hOW ARE YOU?\nhELLO wORLD! hOW ARE YOU? i AM FINE, THANK YOU!\n",
      "timestamp": 1660333690
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (char === 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e') {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n            encodedMessage += 'k';\n        } else if (char === 'o') {\n            encodedMessage += 'q';\n        } else if (char === 'u') {\n            encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqmtkxcrt.ts(48,1): error TS1005: ',' expected.\n../../../../tmp/tmpqmtkxcrt.ts(48,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333689
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        const char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpcc156m2h.js:23:12)\n    at Object.<anonymous> (/tmp/tmpcc156m2h.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333689
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let encodedMessage = '';\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  for (let i = 0; i < message.length; i++) {\n    const char = message[i];\n    if (vowels.includes(char.toLowerCase())) {\n      const index = vowels.indexOf(char.toLowerCase());\n      const newIndex = (index + 2) % vowels.length;\n      encodedMessage += vowels[newIndex].toUpperCase();\n    } else {\n      encodedMessage += char.toUpperCase();\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode('hello')); // HLLL\nconsole.log(encode('HELLO')); // HLLL\nconsole.log(encode('hello world')); // HLLL WRRLD\nconsole.log(encode('HELLO WORLD')); // HLLL WRRLD\nconsole.log(encode('hello world!')); // HLLL WRRLD!\nconsole.log(encode('HELLO WORLD!')); // HLLL WRRLD!\nconsole.log(encode('hello world!')); // HLLL WRRLD!\nconsole.log(encode('HELLO WORLD!')); // HLLL WRRLD!\nconsole.log(encode('hello world!')); // HLLL WRRLD!\nconsole.log(encode('HELLO WORLD!')); // HLLL WRRLD!\nconsole.log(encode('hello world!')); // HLLL WRRLD!\nconsole.log(encode('HELLO WORLD!')); // HLLL WRRLD!\nconsole.log(encode('hello world!')); // HLLL WRRLD!\nconsole.log(encode('HELLO WORLD!')); // HLLL WRRLD!\nconsole.log(encode('hello world!')); // HLLL WRRLD!\nconsole.log(encode('HELLO WORLD!')); // HLLL WRRLD!\nconsole.log(encode('hello world!')); // HLLL WRRL\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TOST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpjsiwzaz4.js:43:12)\n    at Object.<anonymous> (/tmp/tmpjsiwzaz4.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TOST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "HOLLA\nHOLLA\nHOLLA WARLD\nHOLLA WARLD\nHOLLA WARLD!\nHOLLA WARLD!\nHOLLA WARLD!\nHOLLA WARLD!\nHOLLA WARLD!\nHOLLA WARLD!\nHOLLA WARLD!\nHOLLA WARLD!\nHOLLA WARLD!\nHOLLA WARLD!\nHOLLA WARLD!\nHOLLA WARLD!\nHOLLA WARLD!\n",
      "timestamp": 1660333690
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    for (let i = 0; i < message.length; i++) {\n        const letter = message[i];\n        if (vowels.includes(letter)) {\n            const index = vowels.indexOf(letter);\n            const newIndex = (index + 2) % vowels.length;\n            encodedMessage += vowels[newIndex];\n        } else {\n            encodedMessage += letter;\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp3huivawv.js:26:12)\n    at Object.<anonymous> (/tmp/tmp3huivawv.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333689
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (char === 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e') {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n            encodedMessage += 'k';\n        } else if (char === 'o') {\n            encodedMessage += 'q';\n        } else if (char === 'u') {\n            encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('hello')); // hEllO\nconsole.log(encode('HELLO')); // hEllO\nconsole.log(encode('hello world')); // hEllO wOrld\nconsole.log(encode('HELLO WORLD')); // hEllO wOrld\nconsole.log(encode('hello, world!')); // hEllO, wOrld!\nconsole.log(encode('HELLO, WORLD!')); // hEllO, wOrld!\nconsole.log(encode('hello, world!')); // hEllO, wOrld!\nconsole.log(encode('HELLO, WORLD!')); // hEllO, wOrld!\nconsole.log(encode('hello, world!')); // hEllO, wOrld!\nconsole.log(encode('HELLO, WORLD!')); // hEllO, wOrld!\nconsole.log(encode('hello, world!')); // hEllO, wOrld!\nconsole.log(encode('HELLO, WORLD!')); // hEllO, wOrld!\nconsole.log(encode('hello, world!')); // hEllO, wOrld!\nconsole.log(encode('HELLO, WORLD!')); // hEllO, wOrld!\nconsole.log(encode\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnwppiokf.ts(46,1): error TS1005: ',' expected.\n../../../../tmp/tmpnwppiokf.ts(46,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333689
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let result: string = \"\";\n  let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n  for (let i: number = 0; i < message.length; i++) {\n    let index: number = alphabet.indexOf(message[i].toLowerCase());\n    if (index === -1) {\n      result += message[i];\n    } else if (index < 23) {\n      if (message[i] === message[i].toUpperCase()) {\n        result += alphabet[index + 2].toUpperCase();\n      } else {\n        result += alphabet[index + 2];\n      }\n    } else {\n      if (message[i] === message[i].toUpperCase()) {\n        result += alphabet[index - 24].toUpperCase();\n      } else {\n        result += alphabet[index - 24];\n      }\n    }\n  }\n  return result;\n}\n\nconsole.log(encode(\"Hello World\")); // \"Jgnnq Yqtnf\"\nconsole.log(encode(\"abcdefghijklmnopqrstuvwxyz\")); // \"cdefghijklmnopqrstuvwxyzab\"\nconsole.log(encode(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")); // \"CDEFGHIJKLMNOPQRSTUVWXYZAB\"\nconsole.log(encode(\"The Quick Brown Fox\")); // \"Wkh Txxbq Nyrk Fqu\"\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpcmq08dfh.js:25\n                result += alphabet[index - 24].toUpperCase();\n                                               ^\n\nTypeError: Cannot read properties of undefined (reading 'toUpperCase')\n    at encode (/tmp/tmpcmq08dfh.js:25:48)\n    at Object.<anonymous> (/tmp/tmpcmq08dfh.js:36:13)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "stdout": "Jgnnq Yqtnf\ncdefghijklmnopqrstuvwxyundefinedab\n",
      "timestamp": 1660333689
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    for (let i = 0; i < message.length; i++) {\n        let currentLetter = message[i];\n        if (currentLetter === currentLetter.toUpperCase()) {\n            encodedMessage += currentLetter.toLowerCase();\n        } else {\n            encodedMessage += currentLetter.toUpperCase();\n        }\n        if (currentLetter === 'a' || currentLetter === 'e' || currentLetter === 'i' || currentLetter === 'o' || currentLetter === 'u') {\n            let index = alphabet.indexOf(currentLetter);\n            encodedMessage += alphabet[index + 2];\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // h\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmprdqiqhax.js:44:12)\n    at Object.<anonymous> (/tmp/tmprdqiqhax.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hEgLLOq wOqRLD\nhEgLLOq wOqRLD!\nhEgLLOq wOqRLD!\nhEgLLOq wOqRLD!\nhEgLLOq wOqRLD!\nhEgLLOq wOqRLD!\nhEgLLOq wOqRLD!\nhEgLLOq wOqRLD!\nhEgLLOq wOqRLD!\nhEgLLOq wOqRLD!\nhEgLLOq wOqRLD!\nhEgLLOq wOqRLD!\nhEgLLOq wOqRLD!\nhEgLLOq wOqRLD!\nhEgLLOq wOqRLD!\nhEgLLOq wOqRLD!\n",
      "timestamp": 1660333689
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n    if (char.match(/[a-z]/i)) {\n      if (char === char.toUpperCase()) {\n        char = char.toLowerCase();\n      } else {\n        char = char.toUpperCase();\n      }\n      if (char === \"a\") {\n        char = \"c\";\n      } else if (char === \"e\") {\n        char = \"g\";\n      } else if (char === \"i\") {\n        char = \"k\";\n      } else if (char === \"o\") {\n        char = \"q\";\n      } else if (char === \"u\") {\n        char = \"y\";\n      }\n    }\n    encodedMessage += char;\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode(\"hello\")); // \"HLLL\"\nconsole.log(encode(\"HELLO\")); // \"hlll\"\nconsole.log(encode(\"HELLO WORLD\")); // \"hlll wlrld\"\nconsole.log(encode(\"hello world\")); // \"HLLL WLRLD\"\nconsole.log(encode(\"hello world!\")); // \"HLLL WLRLD!\"\nconsole.log(encode(\"hello world! 123\")); // \"HLLL WLRLD! 123\"\nconsole.log(encode(\"hello world! 123\")); // \"HLLL WLRLD! 123\"\nconsole.log(encode(\"abcdefghijklmnopqrstuvwxyz\")); // \"CDFGJKLMNPQRSTVWXYB\"\nconsole.log(encode(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")); // \"cdfgjklmnpqrstvwxyb\"\nconsole.log(encode(\"abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ\")); // \"CDFGJKLMNPQRSTVWXYB CDFGJKLMNPQ\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\nshould loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmp5nw8rcrq.js:52:12)\n    at Object.<anonymous> (/tmp/tmp5nw8rcrq.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "HELLO\nhgllq\nhgllq wqrld\nHELLO WORLD\nHELLO WORLD!\nHELLO WORLD! 123\nHELLO WORLD! 123\nABCDEFGHIJKLMNOPQRSTUVWXYZ\ncbcdgfghkjklmnqpqrstyvwxyz\nABCDEFGHIJKLMNOPQRSTUVWXYZ cbcdgfghkjklmnqpqrstyvwxyz\n",
      "timestamp": 1660333692
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i = 0; i < message.length; i++) {\n        let currentLetter = message[i];\n        if (currentLetter === currentLetter.toUpperCase()) {\n            currentLetter = currentLetter.toLowerCase();\n            encodedMessage += currentLetter;\n        } else if (currentLetter === currentLetter.toLowerCase()) {\n            currentLetter = currentLetter.toUpperCase();\n            encodedMessage += currentLetter;\n        }\n        if (currentLetter === \"a\") {\n            encodedMessage = encodedMessage.replace(\"a\", \"c\");\n        } else if (currentLetter === \"e\") {\n            encodedMessage = encodedMessage.replace(\"e\", \"g\");\n        } else if (currentLetter === \"i\") {\n            encodedMessage = encodedMessage.replace(\"i\", \"k\");\n        } else if (currentLetter === \"o\") {\n            encodedMessage = encodedMessage.replace(\"o\", \"q\");\n        } else if (currentLetter === \"u\") {\n            encodedMessage = encodedMessage.replace(\"u\", \"w\");\n        }\n    }\n    return encodedMessage;\n}\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World! I am a newbie.\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\nshould loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmp8o7pi0b6.js:45:12)\n    at Object.<anonymous> (/tmp/tmp8o7pi0b6.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhELLO wORLD!\nhELLO wORLD! k AM A NEWBIE.\n",
      "timestamp": 1660333693
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let encodedMessage = \"\";\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  for (let i = 0; i < message.length; i++) {\n    let currentLetter = message[i];\n    if (currentLetter === currentLetter.toUpperCase()) {\n      encodedMessage += currentLetter.toLowerCase();\n    } else {\n      encodedMessage += currentLetter.toUpperCase();\n    }\n    if (vowels.includes(currentLetter)) {\n      encodedMessage += vowels[(vowels.indexOf(currentLetter) + 2) % 5];\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode(\"Hello World\")); // hEllO wOrld\nconsole.log(encode(\"Hello World!\")); // hEllO wOrld!\nconsole.log(encode(\"Hello World! How are you?\")); // hEllO wOrld! hOw arE yOu?\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpygs0b8e9.js:30:12)\n    at Object.<anonymous> (/tmp/tmpygs0b8e9.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hEoLLOa wOaRLD\nhEoLLOa wOaRLD!\nhEoLLOa wOaRLD! hOaW AiREo YOaUe?\n",
      "timestamp": 1660333693
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let result: string = '';\n    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            result += char.toLowerCase();\n        } else {\n            result += char.toUpperCase();\n        }\n        if (char === 'a') {\n            result = result.slice(0, -1) + 'c';\n        } else if (char === 'e') {\n            result = result.slice(0, -1) + 'g';\n        } else if (char === 'i') {\n            result = result.slice(0, -1) + 'k';\n        } else if (char === 'o') {\n            result = result.slice(0, -1) + 'q';\n        } else if (char === 'u') {\n            result = result.slice(0, -1) + 's';\n        }\n    }\n    return result;\n}\n\nconsole.log(encode('hello')); // 'HELLO'\nconsole.log(encode('HELLO')); // 'hello'\nconsole.log(encode('hello world')); // 'HELLO WORLD'\nconsole.log(encode('HELLO WORLD')); // 'hello world'\nconsole.log(encode('hello world!')); // 'HELLO WORLD!'\nconsole.log(encode('HELLO WORLD!')); // 'hello world!'\nconsole.log(encode('hello world!')); // 'HELLO WORLD!'\nconsole.log(encode('HELLO WORLD!')); // 'hello world!'\nconsole.log(encode('hello world!')); // 'HELLO WORLD!'\nconsole.log(encode('HELLO WORLD!')); // 'hello world!'\nconsole.log(encode('hello world!')); // 'HELLO WORLD!'\nconsole.log(encode('HELLO WORLD!')); // 'hello world!'\nconsole.log(encode('hello world!')); // 'HELLO WORLD!'\nconsole.log(encode('HELLO WORLD!')); // 'hello world!'\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp4otxcesl.js:53:12)\n    at Object.<anonymous> (/tmp/tmp4otxcesl.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "HgLLq\nhello\nHgLLq WqRLD\nhello world\nHgLLq WqRLD!\nhello world!\nHgLLq WqRLD!\nhello world!\nHgLLq WqRLD!\nhello world!\nHgLLq WqRLD!\nhello world!\nHgLLq WqRLD!\nhello world!\n",
      "timestamp": 1660333693
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        const char = message[i];\n        const charCode = char.charCodeAt(0);\n        if (charCode >= 65 && charCode <= 90) {\n            encodedMessage += String.fromCharCode(charCode + 32);\n        } else if (charCode >= 97 && charCode <= 122) {\n            encodedMessage += String.fromCharCode(charCode - 32);\n        } else {\n            encodedMessage += char;\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!@#$%^&*()_+'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpiiehpany.js:30:12)\n    at Object.<anonymous> (/tmp/tmpiiehpany.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhELLO wORLD!\nhELLO wORLD!@#$%^&*()_+\n",
      "timestamp": 1660333693
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let currentChar = message[i];\n    if (currentChar === currentChar.toUpperCase()) {\n      encodedMessage += currentChar.toLowerCase();\n    } else {\n      encodedMessage += currentChar.toUpperCase();\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpz7_fce__.js:26:12)\n    at Object.<anonymous> (/tmp/tmpz7_fce__.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhELLO wORLD\nhELLO wORLD\n",
      "timestamp": 1660333693
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        let currentLetter = message[i];\n        if (currentLetter === currentLetter.toUpperCase()) {\n            encodedMessage += currentLetter.toLowerCase();\n        } else {\n            encodedMessage += currentLetter.toUpperCase();\n        }\n        if (currentLetter === 'a') {\n            encodedMessage += 'c';\n        } else if (currentLetter === 'e') {\n            encodedMessage += 'g';\n        } else if (currentLetter === 'i') {\n            encodedMessage += 'k';\n        } else if (currentLetter === 'o') {\n            encodedMessage += 'q';\n        } else if (currentLetter === 'u') {\n            encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('hello'));\nconsole.log(encode('goodbye'));\nconsole.log(encode('apple'));\nconsole.log(encode('banana'));\nconsole.log(encode('orange'));\nconsole.log(encode('pizza'));\nconsole.log(encode('taco'));\nconsole.log(encode('burrito'));\nconsole.log(encode('chicken'));\nconsole.log(encode('beef'));\nconsole.log(encode('pork'));\nconsole.log(encode('fish'));\nconsole.log(encode('shrimp'));\nconsole.log(encode('crab'));\nconsole.log(encode('lobster'));\nconsole.log(encode('steak'));\nconsole.log(encode('hamburger'));\nconsole.log(encode('hotdog'));\nconsole.log(encode('fries'));\nconsole.log(encode('onion rings'));\nconsole.log(encode('ice cream'));\nconsole.log(encode('cake'));\nconsole.log(encode('pie'));\nconsole.log(encode('cookie'));\nconsole.log(encode('brownie'));\nconsole.log(encode('donut'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp1wpfss9m.js:64:12)\n    at Object.<anonymous> (/tmp/tmp1wpfss9m.js:70:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "HEgLLOq\nGOqOqDBYEg\nAcPPLEg\nBAcNAcNAc\nOqRAcNGEg\nPIkZZAc\nTAcCOq\nBUwRRIkTOq\nCHIkCKEgN\nBEgEgF\nPOqRK\nFIkSH\nSHRIkMP\nCRAcB\nLOqBSTEgR\nSTEgAcK\nHAcMBUwRGEgR\nHOqTDOqG\nFRIkEgS\nOqNIkOqN RIkNGS\nIkCEg CREgAcM\nCAcKEg\nPIkEg\nCOqOqKIkEg\nBROqWNIkEg\nDOqNUwT\n",
      "timestamp": 1660333693
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    for (let i = 0; i < message.length; i++) {\n        let currentLetter = message[i];\n        if (vowels.includes(currentLetter)) {\n            let index = vowels.indexOf(currentLetter);\n            let newIndex = index + 2;\n            if (newIndex > 4) {\n                newIndex = newIndex - 5;\n            }\n            encodedMessage += vowels[newIndex];\n        } else {\n            encodedMessage += currentLetter;\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"hello world\"));\nconsole.log(encode(\"hello world!\"));\nconsole.log(encode(\"hello world! how are you?\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp8obhigd1.js:33:12)\n    at Object.<anonymous> (/tmp/tmp8obhigd1.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "holla\nholla warld\nholla warld!\nholla warld! haw iro yae?\n",
      "timestamp": 1660333693
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n        } else {\n            char = char.toUpperCase();\n        }\n        if (char === \"a\") {\n            char = \"c\";\n        } else if (char === \"e\") {\n            char = \"g\";\n        } else if (char === \"i\") {\n            char = \"k\";\n        } else if (char === \"o\") {\n            char = \"q\";\n        } else if (char === \"u\") {\n            char = \"y\";\n        }\n        encodedMessage += char;\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\nshould loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpgdkr5pu_.js:40:12)\n    at Object.<anonymous> (/tmp/tmpgdkr5pu_.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333693
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        switch (char) {\n            case 'a':\n                encodedMessage += 'c';\n                break;\n            case 'e':\n                encodedMessage += 'g';\n                break;\n            case 'i':\n                encodedMessage += 'k';\n                break;\n            case 'o':\n                encodedMessage += 'q';\n                break;\n            case 'u':\n                encodedMessage += 'y';\n                break;\n            default:\n                encodedMessage += char;\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('hello')); // hlllC\nconsole.log(encode('HELLO')); // hlllC\nconsole.log(encode('Hello')); // hlllC\nconsole.log(encode('HELLO WORLD')); // hlllC wlrldC\nconsole.log(encode('hello world')); // hlllC wlrldC\nconsole.log(encode('hello world!')); // hlllC wlrldC!\nconsole.log(encode('HELLO WORLD!')); // hlllC wlrldC!\nconsole.log(encode('Hello World!')); // hlllC wlrldC!\nconsole.log(encode('Hello World!')); // hlllC wlrldC!\nconsole.log(encode('Hello World!')); // hlllC wlrldC!\nconsole.log(encode('Hello World!')); // hlllC wlrldC!\nconsole.log(encode('Hello World!')); // hlllC wlrldC!\nconsole.log(encode('Hello World!')); // hlllC wlrldC!\nconsole.log(encode('Hello World!')); // hlllC wlrldC!\nconsole.log(en\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpzfxm_xey.ts(54,1): error TS1005: ',' expected.\n../../../../tmp/tmpzfxm_xey.ts(54,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333693
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let result: string = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            result += char.toLowerCase();\n        } else {\n            result += char.toUpperCase();\n        }\n    }\n    return result;\n}\n\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpu3ii0461.js:59:12)\n    at Object.<anonymous> (/tmp/tmpu3ii0461.js:65:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\n",
      "timestamp": 1660333693
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let encodedMessage = '';\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  for (let i = 0; i < message.length; i++) {\n    if (vowels.includes(message[i])) {\n      let index = (alphabet.indexOf(message[i]) + 2) % 26;\n      encodedMessage += alphabet[index];\n    } else if (message[i] === message[i].toUpperCase()) {\n      encodedMessage += message[i].toLowerCase();\n    } else {\n      encodedMessage += message[i].toUpperCase();\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode('hello')); // 'jgnnq'\nconsole.log(encode('HELLO')); // 'jgnnq'\nconsole.log(encode('Hello World')); // 'Jgnnq Yqtnf'\nconsole.log(encode('Hello World!')); // 'Jgnnq Yqtnf!'\nconsole.log(encode('Hello World!?')); // 'Jgnnq Yqtnf!?'\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp2kdd5x59.js:33:12)\n    at Object.<anonymous> (/tmp/tmp2kdd5x59.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "HgLLq\nhello\nhgLLq wqRLD\nhgLLq wqRLD!\nhgLLq wqRLD!?\n",
      "timestamp": 1660333693
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let result: string = '';\n    let alphabet: string = 'abcdefghijklmnopqrstuvwxyz';\n    for (let i: number = 0; i < message.length; i++) {\n        let index: number = alphabet.indexOf(message[i].toLowerCase());\n        if (index === -1) {\n            result += message[i];\n        } else {\n            if (index < 23) {\n                result += alphabet[index + 2];\n            } else if (index === 23) {\n                result += alphabet[1];\n            } else if (index === 24) {\n                result += alphabet[0];\n            }\n        }\n    }\n    return result;\n}\n\nconsole.log(encode('hello')); // jgnnq\nconsole.log(encode('HELLO')); // JGNNQ\nconsole.log(encode('abcdefghijklmnopqrstuvwxyz')); // cdefghijklmnopqrstuvwxyzab\nconsole.log(encode('ABCDEFGHIJKLMNOPQRSTUVWXYZ')); // CDEFGHIJKLMNOPQRSTUVWXYZAB\nconsole.log(encode('Hello, World!')); // Jgnnq, Yqtnf!\nconsole.log(encode('Hello, World!')); // Jgnnq, Yqtnf!\nconsole.log(encode('Hello, World!')); // Jgnnq, Yqtnf!\nconsole.log(encode('Hello, World!')); // Jgnnq, Yqtnf!\nconsole.log(encode('Hello, World!')); // Jgnnq, Yqtnf!\nconsole.log(encode('Hello, World!')); // Jgnnq, Yqtnf!\nconsole.log(encode('Hello, World!')); // Jgnnq, Yqtnf!\nconsole.log(encode('Hello, World!')); // Jgnnq, Yqtnf!\nconsole.log(encode('Hello, World!')); // Jgnnq, Yqtnf!\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'vguv'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpuy10rcuf.js:46:12)\n    at Object.<anonymous> (/tmp/tmpuy10rcuf.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'vguv',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "jgnnq\njgnnq\ncdefghijklmnopqrstuvwxyba\ncdefghijklmnopqrstuvwxyba\njgnnq, yqtnf!\njgnnq, yqtnf!\njgnnq, yqtnf!\njgnnq, yqtnf!\njgnnq, yqtnf!\njgnnq, yqtnf!\njgnnq, yqtnf!\njgnnq, yqtnf!\njgnnq, yqtnf!\n",
      "timestamp": 1660333693
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let encodedMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    const currentLetter = message[i];\n    if (vowels.includes(currentLetter)) {\n      const index = alphabet.indexOf(currentLetter);\n      const newLetter = alphabet[index + 2];\n      encodedMessage += newLetter;\n    } else if (currentLetter === currentLetter.toUpperCase()) {\n      encodedMessage += currentLetter.toLowerCase();\n    } else {\n      encodedMessage += currentLetter.toUpperCase();\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode('hello')); // 'jgnnq'\nconsole.log(encode('HELLO')); // 'jgnnq'\nconsole.log(encode('Hello World')); // 'Jgnnq Yqtnf'\nconsole.log(encode('Hello World!')); // 'Jgnnq Yqtnf!'\nconsole.log(encode('Hello World!')); // 'Jgnnq Yqtnf!'\nconsole.log(encode('Hello World!')); // 'Jgnnq Yqtnf!'\nconsole.log(encode('Hello World!')); // 'Jgnnq Yqtnf!'\nconsole.log(encode('Hello World!')); // 'Jgnnq Yqtnf!'\nconsole.log(encode('Hello World!')); // 'Jgnnq Yqtnf!'\nconsole.log(encode('Hello World!')); // 'Jgnnq Yqtnf!'\nconsole.log(encode('Hello World!')); // 'Jgnnq Yqtnf!'\nconsole.log(encode('Hello World!')); // 'Jgnnq Yqtnf!'\nconsole.log(encode('Hello World!')); // 'Jgnnq Yqtnf!'\nconsole.log(encode('Hello World!')); // 'Jgnnq Yqtn\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmph_kcioz3.js:44:12)\n    at Object.<anonymous> (/tmp/tmph_kcioz3.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "HgLLq\nhello\nhgLLq wqRLD\nhgLLq wqRLD!\nhgLLq wqRLD!\nhgLLq wqRLD!\nhgLLq wqRLD!\nhgLLq wqRLD!\nhgLLq wqRLD!\nhgLLq wqRLD!\nhgLLq wqRLD!\nhgLLq wqRLD!\nhgLLq wqRLD!\nhgLLq wqRLD!\n",
      "timestamp": 1660333693
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (char === 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e') {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n            encodedMessage += 'k';\n        } else if (char === 'o') {\n            encodedMessage += 'q';\n        } else if (char === 'u') {\n            encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpn3euj2sj.js:54:12)\n    at Object.<anonymous> (/tmp/tmpn3euj2sj.js:60:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hEgLLOq wOqRLD\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660333693
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode(\"Hello\")); // hELLO\nconsole.log(encode(\"Hello World\")); // hELLO wORLD\nconsole.log(encode(\"Hello World!\")); // hELLO wORLD!\nconsole.log(encode(\"Hello World! How are you?\")); // hELLO wORLD! hOW ARE YOU?\nconsole.log(encode(\"Hello World! How are you? I am fine.\")); // hELLO wORLD! hOW ARE YOU? i AM fINE.\nconsole.log(encode(\"Hello World! How are you? I am fine. What about you?\")); // hELLO wORLD! hOW ARE YOU? i AM fINE. wHAT ABOUT YOU?\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp9_zs7ocy.js:29:12)\n    at Object.<anonymous> (/tmp/tmp9_zs7ocy.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO\nhELLO wORLD\nhELLO wORLD!\nhELLO wORLD! hOW ARE YOU?\nhELLO wORLD! hOW ARE YOU? i AM FINE.\nhELLO wORLD! hOW ARE YOU? i AM FINE. wHAT ABOUT YOU?\n",
      "timestamp": 1660333693
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (char === 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e') {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n            encodedMessage += 'k';\n        } else if (char === 'o') {\n            encodedMessage += 'q';\n        } else if (char === 'u') {\n            encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('Hello World'));\nconsole.log(encode('My name is John'));\nconsole.log(encode('I like to code'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpuncmsbgg.js:41:12)\n    at Object.<anonymous> (/tmp/tmpuncmsbgg.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hEgLLOq wOqRLD\nmY NAcMEg IkS jOqHN\ni LIkKEg TOq COqDEg\n",
      "timestamp": 1660333693
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp6elnzra1.js:58:12)\n    at Object.<anonymous> (/tmp/tmp6elnzra1.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\n",
      "timestamp": 1660333693
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let encodedMessage = '';\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  for (let i = 0; i < message.length; i++) {\n    const char = message[i];\n    if (char === char.toUpperCase()) {\n      encodedMessage += char.toLowerCase();\n    } else {\n      encodedMessage += char.toUpperCase();\n    }\n    if (vowels.includes(char)) {\n      const index = vowels.indexOf(char);\n      const nextIndex = index + 2;\n      if (nextIndex >= vowels.length) {\n        encodedMessage += vowels[nextIndex - vowels.length];\n      } else {\n        encodedMessage += vowels[nextIndex];\n      }\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode('hello')); // hEllO\nconsole.log(encode('HELLO')); // hEllO\nconsole.log(encode('hello world')); // hEllO wOrld\nconsole.log(encode('HELLO WORLD')); // hEllO wOrld\nconsole.log(encode('hello world!')); // hEllO wOrld!\nconsole.log(encode('HELLO WORLD!')); // hEllO wOrld!\nconsole.log(encode('hello world!')); // hEllO wOrld!\nconsole.log(encode('HELLO WORLD!')); // hEllO wOrld!\nconsole.log(encode('hello world!')); // hEllO wOrld!\nconsole.log(encode('HELLO WORLD!')); // hEllO wOrld!\nconsole.log(encode('hello world!')); // hEllO wOrld!\nconsole.log(encode('HELLO WORLD!')); // hEllO wOrld!\nconsole.log(encode('hello world!')); // hEllO wOrld!\nconsole.log(encode('HELLO WORLD!')); // hEllO wOrld!\nconsole.log(encode('hello world!')); // hEllO wOr\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmprierkvsc.js:49:12)\n    at Object.<anonymous> (/tmp/tmprierkvsc.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "HEoLLOa\nhello\nHEoLLOa WOaRLD\nhello world\nHEoLLOa WOaRLD!\nhello world!\nHEoLLOa WOaRLD!\nhello world!\nHEoLLOa WOaRLD!\nhello world!\nHEoLLOa WOaRLD!\nhello world!\nHEoLLOa WOaRLD!\nhello world!\nHEoLLOa WOaRLD!\n",
      "timestamp": 1660333693
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let encodedMessage = '';\n  const vowels = 'aeiou';\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  for (let i = 0; i < message.length; i++) {\n    const char = message[i];\n    if (vowels.includes(char)) {\n      const index = alphabet.indexOf(char);\n      encodedMessage += alphabet[index + 2];\n    } else if (alphabet.includes(char)) {\n      const index = alphabet.indexOf(char);\n      encodedMessage += alphabet[index + 2];\n    } else {\n      encodedMessage += char;\n    }\n  }\n  return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp5mge17y2.js:30:12)\n    at Object.<anonymous> (/tmp/tmp5mge17y2.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333693
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (isVowel(char)) {\n            encodedMessage = encodedMessage.slice(0, -1);\n            encodedMessage += getVowel(char);\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp8059rjzy.ts(16,13): error TS2304: Cannot find name 'isVowel'.\n../../../../tmp/tmp8059rjzy.ts(18,31): error TS2304: Cannot find name 'getVowel'.\n",
      "timestamp": 1660333693
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let encodedMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    const char = message[i];\n    const charCode = char.charCodeAt(0);\n    if (charCode >= 65 && charCode <= 90) {\n      encodedMessage += String.fromCharCode(charCode + 32);\n    } else if (charCode >= 97 && charCode <= 122) {\n      encodedMessage += String.fromCharCode(charCode - 32);\n    } else {\n      encodedMessage += char;\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp3yehgp__.js:30:12)\n    at Object.<anonymous> (/tmp/tmp3yehgp__.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhELLO wORLD!\nhELLO wORLD!?\n",
      "timestamp": 1660333693
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n      encodedMessage += char.toLowerCase();\n    } else {\n      encodedMessage += char.toUpperCase();\n    }\n  }\n  return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpyp3auiqm.js:23:12)\n    at Object.<anonymous> (/tmp/tmpyp3auiqm.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333693
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let result: string = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n        } else {\n            char = char.toUpperCase();\n        }\n        if (char === 'a') {\n            char = 'c';\n        } else if (char === 'e') {\n            char = 'g';\n        } else if (char === 'i') {\n            char = 'k';\n        } else if (char === 'o') {\n            char = 'q';\n        } else if (char === 'u') {\n            char = 'y';\n        }\n        result += char;\n    }\n    return result;\n}\n\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hi There')); // hI thERE\nconsole.log(encode('How are you?')); // hOW arE yOU?\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\nshould loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmp6el3m70a.js:43:12)\n    at Object.<anonymous> (/tmp/tmp6el3m70a.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhI tHERE\nhOW ARE YOU?\n",
      "timestamp": 1660333696
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (char === 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e') {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n            encodedMessage += 'k';\n        } else if (char === 'o') {\n            encodedMessage += 'q';\n        } else if (char === 'u') {\n            encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpn3euj2sj.js:54:12)\n    at Object.<anonymous> (/tmp/tmpn3euj2sj.js:60:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hEgLLOq wOqRLD\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660333693
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  const vowels = 'aeiou';\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let encoded = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const isUpper = letter === letter.toUpperCase();\n    const isVowel = vowels.includes(letter.toLowerCase());\n    const index = alphabet.indexOf(letter.toLowerCase());\n    if (isVowel) {\n      const newIndex = (index + 2) % alphabet.length;\n      const newLetter = alphabet[newIndex];\n      encoded += isUpper ? newLetter.toUpperCase() : newLetter;\n    } else {\n      encoded += isUpper ? letter.toLowerCase() : letter.toUpperCase();\n    }\n  }\n  return encoded;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tGst'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp1by94sce.js:30:12)\n    at Object.<anonymous> (/tmp/tmp1by94sce.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tGst',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333696
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let result: string = '';\n    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            result += char.toLowerCase();\n        } else {\n            result += char.toUpperCase();\n        }\n        if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n            result = result.slice(0, result.length - 1) + 'c';\n        }\n    }\n    return result;\n}\n\nconsole.log(encode('hello')); // hcllc\nconsole.log(encode('HELLO')); // hcllc\nconsole.log(encode('HELLO WORLD')); // hcllc wcrdlc\nconsole.log(encode('hello world')); // hcllc wcrdlc\nconsole.log(encode('hello world!')); // hcllc wcrdlc!\nconsole.log(encode('hello world! 123')); // hcllc wcrdlc! 123\nconsole.log(encode('hello world! 123')); // hcllc wcrdlc! 123\nconsole.log(encode('hello world! 123')); // hcllc wcrdlc! 123\nconsole.log(encode('hello world! 123')); // hcllc wcrdlc! 123\nconsole.log(encode('hello world! 123')); // hcllc wcrdlc! 123\nconsole.log(encode('hello world! 123')); // hcllc wcrdlc! 123\nconsole.log(encode('hello world! 123')); // hcllc wcrdlc! 123\nconsole.log(encode('hello world! 123')); // hcllc wcrdlc! 123\nconsole.log(encode('hello world! 123')); // hcllc wcrdlc! 123\nconsole.log(encode('hello world! 123')); // hcllc wcrdlc! 123\nconsole.log(encode('hello world! 123\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbxedjrzk.ts(38,37): error TS1002: Unterminated string literal.\n../../../../tmp/tmpbxedjrzk.ts(39,1): error TS1005: ',' expected.\n../../../../tmp/tmpbxedjrzk.ts(39,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333696
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n    const currentChar = message[i];\n    if (currentChar === currentChar.toUpperCase()) {\n      encodedMessage += currentChar.toLowerCase();\n    } else {\n      encodedMessage += currentChar.toUpperCase();\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwt7pn5cz.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmpwt7pn5cz.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333696
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let result: string = '';\n  for (let i = 0; i < message.length; i++) {\n    const char = message[i];\n    const isUpper = char === char.toUpperCase();\n    const isLower = char === char.toLowerCase();\n    if (isUpper) {\n      result += char.toLowerCase();\n    } else if (isLower) {\n      result += char.toUpperCase();\n    } else {\n      result += char;\n    }\n  }\n  return result;\n}\n\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpakljuxhz.ts(43,26): error TS1002: Unterminated string literal.\n../../../../tmp/tmpakljuxhz.ts(44,1): error TS1005: ',' expected.\n../../../../tmp/tmpakljuxhz.ts(44,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333696
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    const vowels = \"aeiou\";\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        const currentLetter = message[i];\n        if (vowels.includes(currentLetter)) {\n            const index = vowels.indexOf(currentLetter);\n            const newIndex = (index + 2) % vowels.length;\n            result += vowels[newIndex];\n        } else {\n            result += currentLetter;\n        }\n    }\n    return result;\n}\n\nconsole.log(encode(\"hello\")); // jgnnq\nconsole.log(encode(\"apples\")); // dsspht\nconsole.log(encode(\"bananas\")); // dccobqt\nconsole.log(encode(\"cheese\")); // gjjifi\nconsole.log(encode(\"hello world\")); // jgnnq yqtnf\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpw3bxvcz7.js:31:12)\n    at Object.<anonymous> (/tmp/tmpw3bxvcz7.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "holla\nipplos\nbininis\nchooso\nholla warld\n",
      "timestamp": 1660333696
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        const char = message[i];\n        if (isVowel(char)) {\n            encodedMessage += getNextVowel(char);\n        } else if (isUpperCase(char)) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpkerhpym3.ts(11,13): error TS2304: Cannot find name 'isVowel'.\n../../../../tmp/tmpkerhpym3.ts(12,31): error TS2304: Cannot find name 'getNextVowel'.\n../../../../tmp/tmpkerhpym3.ts(13,20): error TS2304: Cannot find name 'isUpperCase'.\n",
      "timestamp": 1660333696
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (char === 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e') {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n            encodedMessage += 'k';\n        } else if (char === 'o') {\n            encodedMessage += 'q';\n        } else if (char === 'u') {\n            encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnb00_8u6.ts(55,21): error TS1002: Unterminated string literal.\n../../../../tmp/tmpnb00_8u6.ts(56,1): error TS1005: ',' expected.\n../../../../tmp/tmpnb00_8u6.ts(56,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333696
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n        } else {\n            char = char.toUpperCase();\n        }\n        if (char === \"a\") {\n            char = \"c\";\n        } else if (char === \"e\") {\n            char = \"g\";\n        } else if (char === \"i\") {\n            char = \"k\";\n        } else if (char === \"o\") {\n            char = \"q\";\n        } else if (char === \"u\") {\n            char = \"y\";\n        }\n        encodedMessage += char;\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode(\"Hello World\")); // hELLO wORLD\nconsole.log(encode(\"Hello World!\")); // hELLO wORLD!\nconsole.log(encode(\"Hello World!\")); // hELLO wORLD!\nconsole.log(encode(\"Hello World! I am a computer\")); // hELLO wORLD! k cN cQMPUTER\nconsole.log(encode(\"Hello World! I am a computer!\")); // hELLO wORLD! k cN cQMPUTER!\nconsole.log(encode(\"Hello World! I am a computer!!\")); // hELLO wORLD! k cN cQMPUTER!!\nconsole.log(encode(\"Hello World! I am a computer!!!\")); // hELLO wORLD! k cN cQMPUTER!!!\nconsole.log(encode(\"Hello World! I am a computer!!!!\")); // hELLO wORLD! k cN cQMPUTER!!!!\nconsole.log(encode(\"Hello World! I am a computer!!!!!\")); // hELLO wORLD! k cN cQMPUTER!!!!!\nconsole.log(encode(\"Hello World! I am a computer!!!!!!!\")); // hELLO wORLD! k cN cQMPUTER!!!!!!!\nconsole.log(encode(\"Hello World! I am a computer!!!!!!!!!\"\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpswux22al.ts(43,1): error TS1005: ',' expected.\n../../../../tmp/tmpswux22al.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333696
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let encodedMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n    let index = alphabet.indexOf(char.toLowerCase());\n    if (index === -1) {\n      encodedMessage += char;\n    } else {\n      let newIndex = index + 2;\n      if (newIndex > 25) {\n        newIndex -= 26;\n      }\n      let newChar = alphabet[newIndex];\n      if (char === char.toUpperCase()) {\n        newChar = newChar.toUpperCase();\n      }\n      encodedMessage += newChar;\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode('Hello World')); // Jgnnq Yqtnf\nconsole.log(encode('abcdefghijklmnopqrstuvwxyz')); // cdefghijklmnopqrstuvwxyzab\nconsole.log(encode('ABCDEFGHIJKLMNOPQRSTUVWXYZ')); // CDEFGHIJKLMNOPQRSTUVWXYZAB\nconsole.log(encode('The quick brown fox jumps over the lazy dog.')); // Vjg swkem dtqyp hqz lworu pwkl zkdw vjg xyhq.\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpsdljrkqg.js:37:12)\n    at Object.<anonymous> (/tmp/tmpsdljrkqg.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "Jgnnq Yqtnf\ncdefghijklmnopqrstuvwxyzab\nCDEFGHIJKLMNOPQRSTUVWXYZAB\nVjg swkem dtqyp hqz lworu qxgt vjg ncba fqi.\n",
      "timestamp": 1660333697
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let encoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n      encoded += char.toLowerCase();\n    } else {\n      encoded += char.toUpperCase();\n    }\n    if (alphabet.indexOf(char) !== -1) {\n      let index = alphabet.indexOf(char);\n      if (index + 2 > alphabet.length - 1) {\n        encoded += alphabet[index + 2 - alphabet.length];\n      } else {\n        encoded += alphabet[index + 2];\n      }\n    }\n  }\n  return encoded;\n}\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!') === 'hELLO wORLD!');\nconsole.log(encode('abc') === 'cde');\nconsole.log(encode('xyz') === 'zab');\nconsole.log(encode('abcxyz') === 'cdezab');\nconsole.log(encode('abcxyzABCXYZ') === 'cdezabcdezab');\nconsole.log(encode('abcxyzABCXYZ'));\nconsole.log(encode('abcxyzABCXYZ') === 'cdezabCDEZAB');\nconsole.log(encode('abcxyzABCXYZ'));\nconsole.log(encode('abcxyzABCXYZ') === 'cdezabCDEZAB');\nconsole.log(encode('abcxyzABCXYZ'));\nconsole.log(encode('abcxyzABCXYZ') === 'cdezabCDEZAB');\nconsole.log(encode('abcxyzABCXYZ'));\nconsole.log(encode('abcxyzABCXYZ') === 'cdezabCDEZAB');\nconsole.log(encode('abcxyzABCXYZ'));\nconsole.log(encode('abcxyzABCXYZ') === 'cdezabCDEZAB');\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp495h2t_u.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333696
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (char === 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e') {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n            encodedMessage += 'k';\n        } else if (char === 'o') {\n            encodedMessage += 'q';\n        } else if (char === 'u') {\n            encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(en\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7eihzf_3.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmp7eihzf_3.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333697
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encoded: string = '';\n    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            encoded += char.toLowerCase();\n        } else {\n            encoded += char.toUpperCase();\n        }\n        if (char === 'a') {\n            encoded += 'c';\n        } else if (char === 'e') {\n            encoded += 'g';\n        } else if (char === 'i') {\n            encoded += 'k';\n        } else if (char === 'o') {\n            encoded += 'q';\n        } else if (char === 'u') {\n            encoded += 'w';\n        }\n    }\n    return encoded;\n}\n\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') ===\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp54y0rbrs.ts(48,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333697
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let encodedMessage = \"\";\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  for (let i = 0; i < message.length; i++) {\n    let currentLetter = message[i];\n    if (currentLetter === currentLetter.toUpperCase()) {\n      encodedMessage += currentLetter.toLowerCase();\n    } else {\n      encodedMessage += currentLetter.toUpperCase();\n    }\n    if (vowels.includes(currentLetter)) {\n      let indexOfVowel = vowels.indexOf(currentLetter);\n      let nextVowel = vowels[indexOfVowel + 2];\n      encodedMessage = encodedMessage.replace(currentLetter, nextVowel);\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode(\"Hello World\")); // \"Hlll Wrdl\"\nconsole.log(encode(\"Hello World!\")); // \"Hlll Wrdl!\"\nconsole.log(encode(\"Hello World! How are you?\")); // \"Hlll Wrdl! Hw dry yu?\"\nconsole.log(encode(\"Hello World! How are you? I am fine.\")); // \"Hlll Wrdl! Hw dry yu? I dm gni.\"\nconsole.log(encode(\"Hello World! How are you? I am fine. What about you?\")); // \"Hlll Wrdl! Hw dry yu? I dm gni. Wht bt yu?\"\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp9qiedh3k.js:34:12)\n    at Object.<anonymous> (/tmp/tmp9qiedh3k.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhELLO wORLD!\nhELLO wORLD! hOW ARE YOU?\nhELLO wORLD! hOW ARE YOU? u AM FINE.\nhELLO wORLD! hOW ARE YOU? undefinedndefined AM FINE. wHAT ABOUT YOU?\n",
      "timestamp": 1660333697
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let result: string = '';\n  for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n      result += char.toLowerCase();\n    } else {\n      result += char.toUpperCase();\n    }\n  }\n  return result;\n}\n\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpeiv4kdsv.js:59:12)\n    at Object.<anonymous> (/tmp/tmpeiv4kdsv.js:65:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\n",
      "timestamp": 1660333697
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (char === 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e') {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n            encodedMessage += 'k';\n        } else if (char === 'o') {\n            encodedMessage += 'q';\n        } else if (char === 'u') {\n            encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('abcdefghijklmnopqrstuvwxyz')); // ABCDEFGHIJKLMNOPQRSTUVWXYZ\nconsole.log(encode('abcdefghijklmnopqrstuvwxyz') === 'ABCDEFGHIJKLMNOPQRSTUVWXYZ');\nconsole.log(encode('abcdefghijklmnopqrstuvwxyz') === 'ABCDEFGHIJKLMNOPQRSTUVWXYZ');\nconsole.log(encode('abcdefghijklmnopqrstuvwxyz') === 'ABCDEFGHIJKLMNOPQRSTUVWXYZ');\nconsole.log(encode('abcdefghijklmnopqrstuvwxyz') === 'ABCDEFGHIJKLMNOPQRSTUVWXYZ');\nconsole.log(encode('abcdefghijklmnopqrstuvwxyz') === 'ABCDEFGHIJKLMNOPQRSTUVWXYZ');\nconsole.log(encode('abcdefghijklmnopqrstuvwxyz') === 'ABCDEFGHIJKLMNOPQR\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmmw7re3_.ts(39,73): error TS1002: Unterminated string literal.\n../../../../tmp/tmpmmw7re3_.ts(40,1): error TS1005: ',' expected.\n../../../../tmp/tmpmmw7re3_.ts(40,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333697
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let result: string = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let currentChar: string = message[i];\n    if (currentChar === currentChar.toUpperCase()) {\n      result += currentChar.toLowerCase();\n    } else {\n      result += currentChar.toUpperCase();\n    }\n  }\n  return result;\n}\n\nconsole.log(encode(\"Hello\")); // hELLO\nconsole.log(encode(\"Hi\")); // hI\nconsole.log(encode(\"Heey, how is your day?\")); // hEEE, HOW IS YOUR DAY?\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpoczyr_ng.js:26:12)\n    at Object.<anonymous> (/tmp/tmpoczyr_ng.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO\nhI\nhEEY, HOW IS YOUR DAY?\n",
      "timestamp": 1660333697
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let result: string = '';\n  for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n      result += char.toLowerCase();\n    } else {\n      result += char.toUpperCase();\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmps29wnxz3.js:23:12)\n    at Object.<anonymous> (/tmp/tmps29wnxz3.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333697
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let result: string = '';\n    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n        } else {\n            char = char.toUpperCase();\n        }\n        if (char === 'a') {\n            char = 'c';\n        } else if (char === 'e') {\n            char = 'g';\n        } else if (char === 'i') {\n            char = 'k';\n        } else if (char === 'o') {\n            char = 'q';\n        } else if (char === 'u') {\n            char = 'y';\n        }\n        result += char;\n    }\n    return result;\n}\n\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('This is a test')); // tHIS is a tEST\nconsole.log(encode('This is another test')); // tHIS is anOTHER tEST\nconsole.log(encode('This is the last test')); // tHIS is the lAST tEST\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\nshould loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpgw9tb7nt.js:44:12)\n    at Object.<anonymous> (/tmp/tmpgw9tb7nt.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD!\ntHIS IS A TEST\ntHIS IS ANOTHER TEST\ntHIS IS THE LAST TEST\n",
      "timestamp": 1660333697
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    const vowels = \"aeiou\";\n    let encoded = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (vowels.includes(letter)) {\n            let index = vowels.indexOf(letter);\n            let newIndex = (index + 2) % vowels.length;\n            encoded += vowels[newIndex];\n        } else {\n            encoded += letter;\n        }\n    }\n    return encoded;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmphhrtazzw.js:26:12)\n    at Object.<anonymous> (/tmp/tmphhrtazzw.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333697
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        let index = alphabet.indexOf(char.toLowerCase());\n        if (index === -1) {\n            encodedMessage += char;\n        } else {\n            let newIndex = index + 2;\n            if (newIndex > 25) {\n                newIndex -= 26;\n            }\n            let newChar = alphabet[newIndex];\n            if (char === char.toUpperCase()) {\n                newChar = newChar.toUpperCase();\n            }\n            encodedMessage += newChar;\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode(\"Hello\")); // Jgnnq\nconsole.log(encode(\"How are you?\")); // Jqb cqg oua?\nconsole.log(encode(\"This is fun!\")); // Vjku ku jgt!\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmplse18o6s.js:36:12)\n    at Object.<anonymous> (/tmp/tmplse18o6s.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "Jgnnq\nJqy ctg aqw?\nVjku ku hwp!\n",
      "timestamp": 1660333697
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let encodedMessage = '';\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  for (let i = 0; i < message.length; i++) {\n    const char = message[i];\n    if (vowels.includes(char.toLowerCase())) {\n      const index = vowels.indexOf(char.toLowerCase());\n      const nextIndex = (index + 2) % vowels.length;\n      encodedMessage += char.toUpperCase() === char ? vowels[nextIndex].toUpperCase() : vowels[nextIndex];\n    } else {\n      encodedMessage += char.toUpperCase() === char ? char.toLowerCase() : char.toUpperCase();\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode('Hello World')); // 'HllE Wrdl'\nconsole.log(encode('Hello World!')); // 'HllE Wrdl!'\nconsole.log(encode('Hello World!')); // 'HllE Wrdl!'\nconsole.log(encode('Hello World!')); // 'HllE Wrdl!'\nconsole.log(encode('Hello World!')); // 'HllE Wrdl!'\nconsole.log(encode('Hello World!')); // 'HllE Wrdl!'\nconsole.log(encode('Hello World!')); // 'HllE Wrdl!'\nconsole.log(encode('Hello World!')); // 'HllE Wrdl!'\nconsole.log(encode('Hello World!')); // 'HllE Wrdl!'\nconsole.log(encode('Hello World!')); // 'HllE Wrdl!'\nconsole.log(encode('Hello World!')); // 'HllE Wrdl!'\nconsole.log(encode('Hello World!')); // 'HllE Wrdl!'\nconsole.log(encode('Hello World!')); // 'HllE Wrdl!'\nconsole.log(encode('Hello World!')); // 'HllE Wrdl!'\nconsole.log(encode('Hello World!')); //\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tOst'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmppik3u_p4.js:41:12)\n    at Object.<anonymous> (/tmp/tmppik3u_p4.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tOst',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hoLLa waRLD\nhoLLa waRLD!\nhoLLa waRLD!\nhoLLa waRLD!\nhoLLa waRLD!\nhoLLa waRLD!\nhoLLa waRLD!\nhoLLa waRLD!\nhoLLa waRLD!\nhoLLa waRLD!\nhoLLa waRLD!\nhoLLa waRLD!\nhoLLa waRLD!\nhoLLa waRLD!\nhoLLa waRLD!\n",
      "timestamp": 1660333697
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (char === 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e') {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n            encodedMessage += 'k';\n        } else if (char === 'o') {\n            encodedMessage += 'q';\n        } else if (char === 'u') {\n            encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('hello')); // hlllC\nconsole.log(encode('HELLO')); // hlllC\nconsole.log(encode('hello world')); // hlllC wlrldC\nconsole.log(encode('HELLO WORLD')); // hlllC wlrldC\nconsole.log(encode('hello world, how are you?')); // hlllC wlrldC, hwC arC ywC?\nconsole.log(encode('HELLO WORLD, HOW ARE YOU?')); // hlllC wlrldC, hwC arC ywC?\nconsole.log(encode('hello world, how are you? I am fine, thank you. And you?')); // hlllC wlrldC, hwC arC ywC? IC am fnC, thnk ywC. And ywC?\nconsole.log(encode('HELLO WORLD, HOW ARE YOU? I AM FINE, THANK YOU. AND YOU?')); // hlllC wlrldC, hwC arC ywC? IC am fnC, thnk ywC. And ywC?\nconsole.log(encode('hello world, how are you? I am fine, thank you. And you? I am fine too, thank you.')); // hlllC wlrld\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp53zt5dmh.js:47:12)\n    at Object.<anonymous> (/tmp/tmp53zt5dmh.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "HEgLLOq\nhello\nHEgLLOq WOqRLD\nhello world\nHEgLLOq WOqRLD, HOqW AcREg YOqUw?\nhello world, how are you?\nHEgLLOq WOqRLD, HOqW AcREg YOqUw? i AcM FIkNEg, THAcNK YOqUw. aND YOqUw?\nhello world, how are you? i am fine, thank you. and you?\nHEgLLOq WOqRLD, HOqW AcREg YOqUw? i AcM FIkNEg, THAcNK YOqUw. aND YOqUw? i AcM FIkNEg TOqOq, THAcNK YOqUw.\n",
      "timestamp": 1660333697
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let result: string = '';\n    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            result += char.toLowerCase();\n        } else {\n            result += char.toUpperCase();\n        }\n        if (char === 'a') {\n            result = result.slice(0, -1) + 'c';\n        } else if (char === 'e') {\n            result = result.slice(0, -1) + 'g';\n        } else if (char === 'i') {\n            result = result.slice(0, -1) + 'k';\n        } else if (char === 'o') {\n            result = result.slice(0, -1) + 'q';\n        } else if (char === 'u') {\n            result = result.slice(0, -1) + 's';\n        }\n    }\n    return result;\n}\n\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpuknlmrwz.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333699
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (char === \"a\") {\n            encodedMessage += \"c\";\n        } else if (char === \"e\") {\n            encodedMessage += \"g\";\n        } else if (char === \"i\") {\n            encodedMessage += \"k\";\n        } else if (char === \"o\") {\n            encodedMessage += \"q\";\n        } else if (char === \"u\") {\n            encodedMessage += \"w\";\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp14r_w3l8.js:38:12)\n    at Object.<anonymous> (/tmp/tmp14r_w3l8.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333699
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (char === 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e') {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n            encodedMessage += 'k';\n        } else if (char === 'o') {\n            encodedMessage += 'q';\n        } else if (char === 'u') {\n            encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('abcdefghijklmnopqrstuvwxyz')); // cdefghijklmnopqrstuvwxyzab\nconsole.log(encode('abcdefghijklmnopqrstuvwxyz') === 'cdefghijklmnopqrstuvwxyzab');\nconsole.log(encode('ABCDEFGHIJKLMNOPQRSTUVWXYZ')); // CDEFGHIJKLMNOPQRSTUVWXYZAB\nconsole.log(encode('ABCDEFGHIJKLMNOPQRSTUVWXYZ') === 'CDEFGHIJKLMNOPQRSTUVWXYZAB');\nconsole.log(encode('The quick brown fox jumps over the lazy dog')); // qhe uickc bfowrn fox jmups oqer qhe lczy dog\nconsole.log(encode('The quick brown fox jumps over the lazy dog') === 'qhe uickc bfowrn fox jmups oqer qhe lczy dog');\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpwnt71cy1.js:46:12)\n    at Object.<anonymous> (/tmp/tmpwnt71cy1.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hEgLLOq wOqRLD\nfalse\nAcBCDEgFGHIkJKLMNOqPQRSTUwVWXYZ\nfalse\nabcdefghijklmnopqrstuvwxyz\nfalse\ntHEg QUwIkCK BROqWN FOqX JUwMPS OqVEgR THEg LAcZY DOqG\nfalse\n",
      "timestamp": 1660333700
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    for (let i = 0; i < message.length; i++) {\n        if (vowels.includes(message[i])) {\n            encodedMessage += String.fromCharCode(message[i].charCodeAt(0) + 2);\n        } else if (message[i] === 'z') {\n            encodedMessage += 'b';\n        } else if (message[i] === 'Z') {\n            encodedMessage += 'B';\n        } else if (message[i] === message[i].toUpperCase()) {\n            encodedMessage += String.fromCharCode(message[i].charCodeAt(0) + 32);\n        } else {\n            encodedMessage += String.fromCharCode(message[i].charCodeAt(0) - 32);\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('Hello World')); // 'Jgnnq Yqtnf'\nconsole.log(encode('Hello World!')); // 'Jgnnq Yqtnf!'\nconsole.log(encode('Hello, World!')); // 'Jgnnq, Yqtnf!'\nconsole.log(encode('Hello, World!')); // 'Jgnnq, Yqtnf!'\nconsole.log(encode('Hello, World!')); // 'Jgnnq, Yqtnf!'\nconsole.log(encode('Hello, World!')); // 'Jgnnq, Yqtnf!'\nconsole.log(encode('Hello, World!')); // 'Jgnnq, Yqtnf!'\nconsole.log(encode('Hello, World!')); // 'Jgnnq, Yqtnf!'\nconsole.log(encode('Hello, World!')); // 'Jgnnq, Yqtnf!'\nconsole.log(encode('Hello, World!')); // 'Jgnnq, Yqtnf!'\nconsole.log(encode('Hello, World!')); // 'Jgnnq, Yqtnf!'\nconsole.log(encode('\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpw6p2u9kl.ts(37,21): error TS1002: Unterminated string literal.\n../../../../tmp/tmpw6p2u9kl.ts(38,1): error TS1005: ',' expected.\n../../../../tmp/tmpw6p2u9kl.ts(38,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333699
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (alphabet.indexOf(char) !== -1) {\n            let index = alphabet.indexOf(char);\n            let newIndex = index + 2;\n            if (newIndex > 25) {\n                newIndex -= 26;\n            }\n            encodedMessage += alphabet[newIndex];\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('hello')); // hlloe\nconsole.log(encode('HELLO')); // hlloe\nconsole.log(encode('hello world')); // hlloe wlrld\nconsole.log(encode('Hello World')); // hlloe wlrld\nconsole.log(encode('Hello World!')); // hlloe wlrld!\nconsole.log(encode('Hello World!')); // hlloe wlrld!\nconsole.log(encode('Hello World!')); // hlloe wlrld!\nconsole.log(encode('Hello World!')); // hlloe wlrld!\nconsole.log(encode('Hello World!')); // hlloe wlrld!\nconsole.log(encode('Hello World!')); // hlloe wlrld!\nconsole.log(encode('Hello World!')); // hlloe wlrld!\nconsole.log(encode('Hello World!')); // hlloe wlrld!\nconsole.log(encode('Hello World!')); // hlloe wlrld!\nconsole.log(encode('Hello World!')); // hlloe wlrld!\nconsole.log(encode('Hello World!')); // hlloe wlrld!\nconsole.log(encode('Hello World!')); // hlloe wlrld!\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpzo4d5g67.js:49:12)\n    at Object.<anonymous> (/tmp/tmpzo4d5g67.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "HjEgLnLnOq\nhello\nHjEgLnLnOq WyOqRtLnDf\nhEgLnLnOq wOqRtLnDf\nhEgLnLnOq wOqRtLnDf!\nhEgLnLnOq wOqRtLnDf!\nhEgLnLnOq wOqRtLnDf!\nhEgLnLnOq wOqRtLnDf!\nhEgLnLnOq wOqRtLnDf!\nhEgLnLnOq wOqRtLnDf!\nhEgLnLnOq wOqRtLnDf!\nhEgLnLnOq wOqRtLnDf!\nhEgLnLnOq wOqRtLnDf!\nhEgLnLnOq wOqRtLnDf!\nhEgLnLnOq wOqRtLnDf!\nhEgLnLnOq wOqRtLnDf!\n",
      "timestamp": 1660333700
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (isVowel(char)) {\n            encodedMessage += getNextVowel(char);\n        } else if (isUpperCase(char)) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpkapuho2_.ts(11,13): error TS2304: Cannot find name 'isVowel'.\n../../../../tmp/tmpkapuho2_.ts(12,31): error TS2304: Cannot find name 'getNextVowel'.\n../../../../tmp/tmpkapuho2_.ts(13,20): error TS2304: Cannot find name 'isUpperCase'.\n",
      "timestamp": 1660333700
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let encoded = '';\n  for (let i = 0; i < message.length; i++) {\n    const char = message[i];\n    if (vowels.includes(char)) {\n      const index = vowels.indexOf(char);\n      encoded += vowels[(index + 2) % vowels.length];\n    } else if (char === char.toUpperCase()) {\n      encoded += char.toLowerCase();\n    } else {\n      encoded += char.toUpperCase();\n    }\n  }\n  return encoded;\n}\n\nconsole.log(encode('Hello World')); // 'HILLO WIRLD'\nconsole.log(encode('Hello World') === 'HILLO WIRLD');\nconsole.log(encode('Hello Earth')); // 'HILLO ERTH'\nconsole.log(encode('Hello Earth') === 'HILLO ERTH');\nconsole.log(encode('Hello Moon')); // 'HILLO MUNN'\nconsole.log(encode('Hello Moon') === 'HILLO MUNN');\nconsole.log(encode('Hello Sun')); // 'HILLO SUNN'\nconsole.log(encode('Hello Sun') === 'HILLO SUNN');\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpxitw5qbu.js:36:12)\n    at Object.<anonymous> (/tmp/tmpxitw5qbu.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hoLLa waRLD\nfalse\nhoLLa eiRTH\nfalse\nhoLLa maaN\nfalse\nhoLLa seN\nfalse\n",
      "timestamp": 1660333700
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        if (message[i] === message[i].toUpperCase()) {\n            encodedMessage += message[i].toLowerCase();\n        } else {\n            encodedMessage += message[i].toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpf451ygio.js:57:12)\n    at Object.<anonymous> (/tmp/tmpf451ygio.js:63:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\n",
      "timestamp": 1660333700
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (char === \"a\") {\n            encodedMessage += \"c\";\n        } else if (char === \"e\") {\n            encodedMessage += \"g\";\n        } else if (char === \"i\") {\n            encodedMessage += \"k\";\n        } else if (char === \"o\") {\n            encodedMessage += \"q\";\n        } else if (char === \"u\") {\n            encodedMessage += \"w\";\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!!!\"));\nconsole.log(encode(\"Hello World!!!!\"));\nconsole.log(encode(\"Hello World!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!!!!\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3g8wqg9v.ts(53,52): error TS1002: Unterminated string literal.\n../../../../tmp/tmp3g8wqg9v.ts(54,1): error TS1005: ',' expected.\n../../../../tmp/tmp3g8wqg9v.ts(54,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333700
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (vowels.includes(char)) {\n            let index = vowels.indexOf(char);\n            let newIndex = (index + 2) % vowels.length;\n            encodedMessage += vowels[newIndex];\n        } else if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmppl7gwmcf.ts(41,21): error TS1002: Unterminated string literal.\n../../../../tmp/tmppl7gwmcf.ts(42,1): error TS1005: ',' expected.\n../../../../tmp/tmppl7gwmcf.ts(42,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333700
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let encodedMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n      encodedMessage += char.toLowerCase();\n    } else {\n      encodedMessage += char.toUpperCase();\n    }\n    if (char === 'a') {\n      encodedMessage += 'c';\n    } else if (char === 'e') {\n      encodedMessage += 'g';\n    } else if (char === 'i') {\n      encodedMessage += 'k';\n    } else if (char === 'o') {\n      encodedMessage += 'q';\n    } else if (char === 'u') {\n      encodedMessage += 'w';\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpzlj8iqt6.ts(48,1): error TS1005: ',' expected.\n../../../../tmp/tmpzlj8iqt6.ts(48,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333700
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let encoded: string = \"\";\n  let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n  for (let i: number = 0; i < message.length; i++) {\n    let char: string = message[i];\n    let index: number = alphabet.indexOf(char.toLowerCase());\n    if (index === -1) {\n      encoded += char;\n    } else {\n      if (char === char.toUpperCase()) {\n        encoded += alphabet[(index + 2) % 26].toUpperCase();\n      } else {\n        encoded += alphabet[(index + 2) % 26];\n      }\n    }\n  }\n  return encoded;\n}\n\nconsole.log(encode(\"Hello World\")); // Jgnnq Yqtnf\nconsole.log(encode(\"abcdefghijklmnopqrstuvwxyz\")); // cdefghijklmnopqrstuvwxyzab\nconsole.log(encode(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")); // CDEFGHIJKLMNOPQRSTUVWXYZAB\nconsole.log(encode(\"The quick brown fox jumps over the lazy dog.\")); // Vjg swkem dtqyp hqz lworu jnmbx nx ymj qfed itl.\nconsole.log(encode(\"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.\")); // VJG SWKEM DTQYP HQZ LWORU JNMBX NX YMJ QFED ITL.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp73qwje6w.js:35:12)\n    at Object.<anonymous> (/tmp/tmp73qwje6w.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "Jgnnq Yqtnf\ncdefghijklmnopqrstuvwxyzab\nCDEFGHIJKLMNOPQRSTUVWXYZAB\nVjg swkem dtqyp hqz lworu qxgt vjg ncba fqi.\nVJG SWKEM DTQYP HQZ LWORU QXGT VJG NCBA FQI.\n",
      "timestamp": 1660333700
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n      encodedMessage += char.toLowerCase();\n    } else {\n      encodedMessage += char.toUpperCase();\n    }\n  }\n  return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpyp3auiqm.js:23:12)\n    at Object.<anonymous> (/tmp/tmpyp3auiqm.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333693
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    for (let i = 0; i < message.length; i++) {\n        const letter = message[i];\n        const isUpperCase = letter === letter.toUpperCase();\n        const lowerCaseLetter = letter.toLowerCase();\n        if (vowels.includes(lowerCaseLetter)) {\n            const index = alphabet.indexOf(lowerCaseLetter);\n            const encodedLetter = alphabet[index + 2];\n            encodedMessage += isUpperCase ? encodedLetter.toUpperCase() : encodedLetter;\n        } else {\n            encodedMessage += isUpperCase ? lowerCaseLetter.toUpperCase() : lowerCaseLetter;\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('hello')); // 'jgnnq'\nconsole.log(encode('HELLO')); // 'JGNNQ'\nconsole.log(encode('hello world')); // 'jgnnq yqtnf'\nconsole.log(encode('HELLO WORLD')); // 'JGNNQ YQTNF'\nconsole.log(encode('hello world!')); // 'jgnnq yqtnf!'\nconsole.log(encode('HELLO WORLD!')); // 'JGNNQ YQTNF!'\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TGST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpkgqcx6e0.js:35:12)\n    at Object.<anonymous> (/tmp/tmpkgqcx6e0.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TGST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hgllq\nHGLLQ\nhgllq wqrld\nHGLLQ WQRLD\nhgllq wqrld!\nHGLLQ WQRLD!\n",
      "timestamp": 1660333700
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n        } else {\n            char = char.toUpperCase();\n        }\n        if (char === 'a') {\n            char = 'c';\n        } else if (char === 'e') {\n            char = 'g';\n        } else if (char === 'i') {\n            char = 'k';\n        } else if (char === 'o') {\n            char = 'q';\n        } else if (char === 'u') {\n            char = 'y';\n        }\n        encodedMessage += char;\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World') === 'Hlll Cddd');\nconsole.log(encode('Hello World') === 'Hlll Cddd');\nconsole.log(encode('Hello World') === 'Hlll Cddd');\nconsole.log(encode('Hello World') === 'Hlll Cddd');\nconsole.log(encode('Hello World') === 'Hlll Cddd');\nconsole.log(encode('Hello World') === 'Hlll Cddd');\nconsole.log(encode('Hello World') === 'Hlll Cddd');\nconsole.log(encode('Hello World') === 'Hlll Cddd');\nconsole.log(encode('Hello World') === 'Hlll Cddd');\nconsole.log(encode('Hello World') === 'Hlll Cddd');\nconsole.log(encode('Hello World') === 'Hlll Cddd');\nconsole.log(encode('Hello World') === 'Hlll Cddd');\nconsole.log(encode('Hello World') === 'Hlll Cddd');\nconsole.log(encode('Hello World') === 'Hlll Cddd');\nconsole.log(encode('Hello World') === 'Hlll Cddd');\nconsole.log(encode\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpepmwy_rd.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpepmwy_rd.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333700
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (char === 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e') {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n            encodedMessage += 'k';\n        } else if (char === 'o') {\n            encodedMessage += 'q';\n        } else if (char === 'u') {\n            encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('hello'));\nconsole.log(encode('HELLO'));\nconsole.log(encode('Hello'));\nconsole.log(encode('HeLlO'));\nconsole.log(encode('HELLO WORLD'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp1_bh4q4y.ts(55,32): error TS1002: Unterminated string literal.\n../../../../tmp/tmp1_bh4q4y.ts(56,1): error TS1005: ',' expected.\n../../../../tmp/tmp1_bh4q4y.ts(56,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333700
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            result += char.toLowerCase();\n        } else {\n            result += char.toUpperCase();\n        }\n    }\n    return result;\n}\n\nconsole.log(encode(\"Hello\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World! How are you?\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpy82f0vfn.js:27:12)\n    at Object.<anonymous> (/tmp/tmpy82f0vfn.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO\nhELLO wORLD\nhELLO wORLD!\nhELLO wORLD! hOW ARE YOU?\n",
      "timestamp": 1660333701
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (isVowel(char)) {\n            encodedMessage += getNextVowel(char);\n        } else if (isUpperCase(char)) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpkapuho2_.ts(11,13): error TS2304: Cannot find name 'isVowel'.\n../../../../tmp/tmpkapuho2_.ts(12,31): error TS2304: Cannot find name 'getNextVowel'.\n../../../../tmp/tmpkapuho2_.ts(13,20): error TS2304: Cannot find name 'isUpperCase'.\n",
      "timestamp": 1660333700
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n      encodedMessage += char.toLowerCase();\n    } else {\n      encodedMessage += char.toUpperCase();\n    }\n  }\n  return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpyp3auiqm.js:23:12)\n    at Object.<anonymous> (/tmp/tmpyp3auiqm.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333693
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        const char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmphdbfg89n.js:58:12)\n    at Object.<anonymous> (/tmp/tmphdbfg89n.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\n",
      "timestamp": 1660333701
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let encoded = '';\n  for (let i = 0; i < message.length; i++) {\n    const char = message[i];\n    const charCode = char.charCodeAt(0);\n    if (charCode >= 65 && charCode <= 90) {\n      encoded += String.fromCharCode(charCode + 32);\n    } else if (charCode >= 97 && charCode <= 122) {\n      encoded += String.fromCharCode(charCode - 32);\n    } else {\n      encoded += char;\n    }\n  }\n  for (let i = 0; i < encoded.length; i++) {\n    const char = encoded[i];\n    if (vowels.includes(char)) {\n      const charCode = char.charCodeAt(0);\n      encoded = encoded.replace(char, String.fromCharCode(charCode + 2));\n    }\n  }\n  return encoded;\n}\n\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\nshould loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpipic443a.js:58:12)\n    at Object.<anonymous> (/tmp/tmpipic443a.js:63:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhELLO wORLD!\nhELLO wORLD!\nhELLO wORLD!\nhELLO wORLD!\nhELLO wORLD!\nhELLO wORLD!\nhELLO wORLD!\nhELLO wORLD!\nhELLO wORLD!\nhELLO wORLD!\nhELLO wORLD!\nhELLO wORLD!\nhELLO wORLD!\nhELLO wORLD!\nhELLO wORLD!\nhELLO wORLD!\nhELLO wORLD!\nhELLO wORLD!\nhELLO wORLD!\nhELLO wORLD!\n",
      "timestamp": 1660333701
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (char === 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e') {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n            encodedMessage += 'k';\n        } else if (char === 'o') {\n            encodedMessage += 'q';\n        } else if (char === 'u') {\n            encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!') === 'hEllO wOrld!');\nconsole.log(encode('Hello World!') === 'hEllO wOrld!');\nconsole.log(encode('Hello World!') === 'hEllO wOrld!');\nconsole.log(encode('Hello World!') === 'hEllO wOrld!');\nconsole.log(encode('Hello World!') === 'hEllO wOrld!');\nconsole.log(encode('Hello World!') === 'hEllO wOrld!');\nconsole.log(encode('Hello World!') === 'hEllO wOrld!');\nconsole.log(encode('Hello World!') === 'hEllO wOrld!');\nconsole.log(encode('Hello World!') === 'hEllO wOrld!');\nconsole.log(encode('Hello World!') === 'hEllO wOrld!');\nconsole.log(encode('Hello World!') === 'hEllO wOrld!');\nconsole.log(encode('Hello World!') === 'hEllO wOrld!');\nconsole.log(encode('Hello World!') === 'hEllO wOrld!');\nconsole.log(encode('Hello World!') === 'hEllO wOrld\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpj6fj5xsq.ts(45,52): error TS1002: Unterminated string literal.\n../../../../tmp/tmpj6fj5xsq.ts(46,1): error TS1005: ',' expected.\n../../../../tmp/tmpj6fj5xsq.ts(46,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333700
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp6elnzra1.js:58:12)\n    at Object.<anonymous> (/tmp/tmp6elnzra1.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\n",
      "timestamp": 1660333693
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode(\"Hello\"));\nconsole.log(encode(\"hello\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp88fvz3r5.js:25:12)\n    at Object.<anonymous> (/tmp/tmp88fvz3r5.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO\nHELLO\n",
      "timestamp": 1660333701
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === letter.toUpperCase()) {\n            encodedMessage += letter.toLowerCase();\n        } else {\n            encodedMessage += letter.toUpperCase();\n        }\n        if (letter === 'a') {\n            encodedMessage += 'c';\n        } else if (letter === 'e') {\n            encodedMessage += 'g';\n        } else if (letter === 'i') {\n            encodedMessage += 'k';\n        } else if (letter === 'o') {\n            encodedMessage += 'q';\n        } else if (letter === 'u') {\n            encodedMessage += 'y';\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World?'));\nconsole.log(encode('Hello World!?'));\nconsole.log(encode('Hello World!?'));\nconsole.log(encode('Hello World!?'));\nconsole.log(encode('Hello World!?'));\nconsole.log(encode('Hello World!?'));\nconsole.log(encode('Hello World!?'));\nconsole.log(encode('Hello World!?'));\nconsole.log(encode('Hello World!?'));\nconsole.log(encode('Hello World!?'));\nconsole.log(encode('Hello World!?'));\nconsole.log(encode('Hello World!?'));\nconsole.log(encode('Hello World!?'));\nconsole.log(encode('Hello World!?'));\nconsole.log(encode('Hello World!?'));\nconsole.log(encode('Hello World!?'));\nconsole.log(encode('Hello World!?'));\nconsole.log(encode('Hello World!?'));\nconsole.log(encode('Hello World!?'));\nconsole.log(encode('Hello World!?'));\nconsole.log(encode('Hello World!?'));\nconsole.log(encode('Hello World!?'));\nconsole.log(encode('Hello\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv4xm97e2.ts(55,26): error TS1002: Unterminated string literal.\n../../../../tmp/tmpv4xm97e2.ts(56,1): error TS1005: ',' expected.\n../../../../tmp/tmpv4xm97e2.ts(56,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333700
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let result: string = '';\n    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            result += char.toLowerCase();\n        } else {\n            result += char.toUpperCase();\n        }\n        if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n            result = result.slice(0, result.length - 1) + 'c';\n        }\n    }\n    return result;\n}\n\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3mb6pkzr.ts(40,21): error TS1002: Unterminated string literal.\n../../../../tmp/tmp3mb6pkzr.ts(41,1): error TS1005: ',' expected.\n../../../../tmp/tmp3mb6pkzr.ts(41,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333700
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (char === 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e') {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n            encodedMessage += 'k';\n        } else if (char === 'o') {\n            encodedMessage += 'q';\n        } else if (char === 'u') {\n            encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjdzkjayh.ts(48,1): error TS1005: ',' expected.\n../../../../tmp/tmpjdzkjayh.ts(48,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333689
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char.toLowerCase() === char) {\n            encodedMessage += char.toUpperCase();\n        } else {\n            encodedMessage += char.toLowerCase();\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode(\"Hello\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World! How are you?\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp9zc2oigh.js:27:12)\n    at Object.<anonymous> (/tmp/tmp9zc2oigh.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO\nhELLO wORLD\nhELLO wORLD!\nhELLO wORLD! hOW ARE YOU?\n",
      "timestamp": 1660333701
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        const char = message[i];\n        if (isVowel(char)) {\n            encodedMessage += getNextVowel(char);\n        } else if (isUpperCase(char)) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpkerhpym3.ts(11,13): error TS2304: Cannot find name 'isVowel'.\n../../../../tmp/tmpkerhpym3.ts(12,31): error TS2304: Cannot find name 'getNextVowel'.\n../../../../tmp/tmpkerhpym3.ts(13,20): error TS2304: Cannot find name 'isUpperCase'.\n",
      "timestamp": 1660333696
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let currentChar = message[i];\n        if (currentChar === currentChar.toUpperCase()) {\n            encodedMessage += currentChar.toLowerCase();\n        } else {\n            encodedMessage += currentChar.toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpw7nafoq1.js:23:12)\n    at Object.<anonymous> (/tmp/tmpw7nafoq1.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333703
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === letter.toUpperCase()) {\n            encodedMessage += letter.toLowerCase();\n        } else {\n            encodedMessage += letter.toUpperCase();\n        }\n        if (letter === 'a') {\n            encodedMessage += 'c';\n        } else if (letter === 'e') {\n            encodedMessage += 'g';\n        } else if (letter === 'i') {\n            encodedMessage += 'k';\n        } else if (letter === 'o') {\n            encodedMessage += 'q';\n        } else if (letter === 'u') {\n            encodedMessage += 'y';\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('Hello World'));\nconsole.log(encode('The quick brown fox jumps over the lazy dog'));\nconsole.log(encode('The quick brown fox jumps over the lazy dog'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpxk4wgp0b.js:41:12)\n    at Object.<anonymous> (/tmp/tmpxk4wgp0b.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hEgLLOq wOqRLD\ntHEg QUyIkCK BROqWN FOqX JUyMPS OqVEgR THEg LAcZY DOqG\ntHEg QUyIkCK BROqWN FOqX JUyMPS OqVEgR THEg LAcZY DOqG\n",
      "timestamp": 1660333703
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let encoded = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (vowels.includes(char)) {\n            let index = vowels.indexOf(char);\n            encoded += vowels[(index + 2) % 5];\n        } else if (char === char.toUpperCase()) {\n            encoded += char.toLowerCase();\n        } else {\n            encoded += char.toUpperCase();\n        }\n    }\n    return encoded;\n}\n\nconsole.log(encode('hello')); // hlll\nconsole.log(encode('HELLO')); // hlll\nconsole.log(encode('Hello World')); // hlll wlrl\nconsole.log(encode('Hello World!')); // hlll wlrl!\nconsole.log(encode('Hello World!!')); // hlll wlrl!!\nconsole.log(encode('Hello World!!!')); // hlll wlrl!!!\nconsole.log(encode('Hello World!!!!')); // hlll wlrl!!!!\nconsole.log(encode('Hello World!!!!!')); // hlll wlrl!!!!!\nconsole.log(encode('Hello World!!!!!!')); // hlll wlrl!!!!!!\nconsole.log(encode('Hello World!!!!!!!')); // hlll wlrl!!!!!!!\nconsole.log(encode('Hello World!!!!!!!!')); // hlll wlrl!!!!!!!!\nconsole.log(encode('Hello World!!!!!!!!!')); // hlll wlrl!!!!!!!!!\nconsole.log(encode('Hello World!!!!!!!!!!')); // hlll wlrl!!!!!!!!!!\nconsole.log(encode('Hello World!!!!!!!!!!!')); // hlll wlrl!!!!!!!!!!!\nconsole.log(encode('Hello World!!!!!!!!!!!!')); // hlll wlrl!!!!!!!!!!!!\nconsole.log(encode('Hello World!!!!!!!!!!!!!')); // hlll wlrl!!!!!!!!!!!!!\nconsole.log(encode('Hello World!!!!!!!!!!!!!!')); // hlll wlr\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpt0v45mia.js:45:12)\n    at Object.<anonymous> (/tmp/tmpt0v45mia.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "HoLLa\nhello\nhoLLa waRLD\nhoLLa waRLD!\nhoLLa waRLD!!\nhoLLa waRLD!!!\nhoLLa waRLD!!!!\nhoLLa waRLD!!!!!\nhoLLa waRLD!!!!!!\nhoLLa waRLD!!!!!!!\nhoLLa waRLD!!!!!!!!\nhoLLa waRLD!!!!!!!!!\nhoLLa waRLD!!!!!!!!!!\nhoLLa waRLD!!!!!!!!!!!\nhoLLa waRLD!!!!!!!!!!!!\nhoLLa waRLD!!!!!!!!!!!!!\nhoLLa waRLD!!!!!!!!!!!!!!\n",
      "timestamp": 1660333703
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n      encodedMessage += char.toLowerCase();\n    } else {\n      encodedMessage += char.toUpperCase();\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode(\"Hello\")); // hELLO\nconsole.log(encode(\"Hello World\")); // hELLO wORLD\nconsole.log(encode(\"Hello World!\")); // hELLO wORLD!\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp95daymhz.js:26:12)\n    at Object.<anonymous> (/tmp/tmp95daymhz.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO\nhELLO wORLD\nhELLO wORLD!\n",
      "timestamp": 1660333703
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let result: string = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            result += char.toLowerCase();\n        } else {\n            result += char.toUpperCase();\n        }\n    }\n    return result;\n}\n\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpu3ii0461.js:59:12)\n    at Object.<anonymous> (/tmp/tmpu3ii0461.js:65:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\n",
      "timestamp": 1660333693
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let result = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (vowels.includes(char)) {\n            let index = vowels.indexOf(char);\n            result += vowels[(index + 2) % 5];\n        } else if (char === char.toUpperCase()) {\n            result += char.toLowerCase();\n        } else {\n            result += char.toUpperCase();\n        }\n    }\n    return result;\n}\n\nconsole.log(encode('Hello World')); // HllE Wrdl\nconsole.log(encode('Hello World!')); // HllE Wrdl!\nconsole.log(encode('Hello World!?')); // HllE Wrdl!?\nconsole.log(encode('Hello World!?')); // HllE Wrdl!?\nconsole.log(encode('Hello World!?')); // HllE Wrdl!?\nconsole.log(encode('Hello World!?')); // HllE Wrdl!?\nconsole.log(encode('Hello World!?')); // HllE Wrdl!?\nconsole.log(encode('Hello World!?')); // HllE Wrdl!?\nconsole.log(encode('Hello World!?')); // HllE Wrdl!?\nconsole.log(encode('Hello World!?')); // HllE Wrdl!?\nconsole.log(encode('Hello World!?')); // HllE Wrdl!?\nconsole.log(encode('Hello World!?')); // HllE Wrdl!?\nconsole.log(encode('Hello World!?')); // HllE Wrdl!?\nconsole.log(encode('Hello World!?')); // HllE Wrdl!?\nconsole.log(encode('Hello World!?')); // HllE Wrdl!?\nconsole.log(encode('Hello World!?')); // HllE Wrdl!?\nconsole.log(encode('Hello World!?')); // HllE Wrdl!?\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmptlkrshc3.js:46:12)\n    at Object.<anonymous> (/tmp/tmptlkrshc3.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hoLLa waRLD\nhoLLa waRLD!\nhoLLa waRLD!?\nhoLLa waRLD!?\nhoLLa waRLD!?\nhoLLa waRLD!?\nhoLLa waRLD!?\nhoLLa waRLD!?\nhoLLa waRLD!?\nhoLLa waRLD!?\nhoLLa waRLD!?\nhoLLa waRLD!?\nhoLLa waRLD!?\nhoLLa waRLD!?\nhoLLa waRLD!?\nhoLLa waRLD!?\nhoLLa waRLD!?\n",
      "timestamp": 1660333703
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (char === 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e') {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n            encodedMessage += 'k';\n        } else if (char === 'o') {\n            encodedMessage += 'q';\n        } else if (char === 'u') {\n            encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjdzkjayh.ts(48,1): error TS1005: ',' expected.\n../../../../tmp/tmpjdzkjayh.ts(48,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333689
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let result: string = \"\";\n  for (let i = 0; i < message.length; i++) {\n    if (isVowel(message[i])) {\n      result += getNextVowel(message[i]);\n    } else if (isUpperCase(message[i])) {\n      result += message[i].toLowerCase();\n    } else {\n      result += message[i].toUpperCase();\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmptob2tcyg.ts(10,9): error TS2304: Cannot find name 'isVowel'.\n../../../../tmp/tmptob2tcyg.ts(11,17): error TS2304: Cannot find name 'getNextVowel'.\n../../../../tmp/tmptob2tcyg.ts(12,16): error TS2304: Cannot find name 'isUpperCase'.\n",
      "timestamp": 1660333703
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n      encodedMessage += char.toLowerCase();\n    } else {\n      encodedMessage += char.toUpperCase();\n    }\n  }\n  return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpyp3auiqm.js:23:12)\n    at Object.<anonymous> (/tmp/tmpyp3auiqm.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333693
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (char === 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e') {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n            encodedMessage += 'k';\n        } else if (char === 'o') {\n            encodedMessage += 'q';\n        } else if (char === 'u') {\n            encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('Hello World'));\nconsole.log(encode('This is a test'));\nconsole.log(encode('This is a longer test'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpc4upzaki.js:41:12)\n    at Object.<anonymous> (/tmp/tmpc4upzaki.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hEgLLOq wOqRLD\ntHIkS IkS Ac TEgST\ntHIkS IkS Ac LOqNGEgR TEgST\n",
      "timestamp": 1660333703
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        const char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('Hello')); // hELLO\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpgqarmly_.js:27:12)\n    at Object.<anonymous> (/tmp/tmpgqarmly_.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO\nhELLO wORLD\nhELLO wORLD!\nhELLO wORLD!?\n",
      "timestamp": 1660333704
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (char === 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e') {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n            encodedMessage += 'k';\n        } else if (char === 'o') {\n            encodedMessage += 'q';\n        } else if (char === 'u') {\n            encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('hello')); // hlllC\nconsole.log(encode('HELLO')); // hlllC\nconsole.log(encode('hello world')); // hlllC wlrldC\nconsole.log(encode('HELLO WORLD')); // hlllC wlrldC\nconsole.log(encode('hello world!')); // hlllC wlrldC!\nconsole.log(encode('HELLO WORLD!')); // hlllC wlrldC!\nconsole.log(encode('hello world!')); // hlllC wlrldC!\nconsole.log(encode('HELLO WORLD!')); // hlllC wlrldC!\nconsole.log(encode('hello world!')); // hlllC wlrldC!\nconsole.log(encode('HELLO WORLD!')); // hlllC wlrldC!\nconsole.log(encode('hello world!')); // hlllC wlrldC!\nconsole.log(encode('HELLO WORLD!')); // hlllC wlrldC!\nconsole.log(encode('hello world!')); // hlllC wlrldC!\nconsole.log(encode('HELLO WORLD!')); // hlllC wlrldC!\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp9yfkpxv7.js:52:12)\n    at Object.<anonymous> (/tmp/tmp9yfkpxv7.js:58:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "HEgLLOq\nhello\nHEgLLOq WOqRLD\nhello world\nHEgLLOq WOqRLD!\nhello world!\nHEgLLOq WOqRLD!\nhello world!\nHEgLLOq WOqRLD!\nhello world!\nHEgLLOq WOqRLD!\nhello world!\nHEgLLOq WOqRLD!\nhello world!\n",
      "timestamp": 1660333704
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let result: string = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let char: string = message[i];\n    if (char === char.toUpperCase()) {\n      result += char.toLowerCase();\n    } else {\n      result += char.toUpperCase();\n    }\n    if (char === \"a\") {\n      result = result.slice(0, -1) + \"c\";\n    } else if (char === \"e\") {\n      result = result.slice(0, -1) + \"g\";\n    } else if (char === \"i\") {\n      result = result.slice(0, -1) + \"k\";\n    } else if (char === \"o\") {\n      result = result.slice(0, -1) + \"q\";\n    } else if (char === \"u\") {\n      result = result.slice(0, -1) + \"y\";\n    }\n  }\n  return result;\n}\n\nconsole.log(encode(\"Hello World\")); // \"hELLO wORLD\"\nconsole.log(encode(\"Hello World!\")); // \"hELLO wORLD!\"\nconsole.log(encode(\"Hello World!\")); // \"hELLO wORLD!\"\nconsole.log(encode(\"Hello World!\")); // \"hELLO wORLD!\"\nconsole.log(encode(\"Hello World!\")); // \"hELLO wORLD!\"\nconsole.log(encode(\"Hello World!\")); // \"hELLO wORLD!\"\nconsole.log(encode(\"Hello World!\")); // \"hELLO wORLD!\"\nconsole.log(encode(\"Hello World!\")); // \"hELLO wORLD!\"\nconsole.log(encode(\"Hello World!\")); // \"hELLO wORLD!\"\nconsole.log(encode(\"Hello World!\")); // \"hELLO wORLD!\"\nconsole.log(encode(\"Hello World!\")); // \"hELLO wORLD!\"\nconsole.log(encode(\"Hello World!\")); // \"hELLO wORLD!\"\nconsole.log(encode(\"Hello World!\")); // \"hELLO wORLD!\"\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpdpicxedc.js:51:12)\n    at Object.<anonymous> (/tmp/tmpdpicxedc.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hgLLq wqRLD\nhgLLq wqRLD!\nhgLLq wqRLD!\nhgLLq wqRLD!\nhgLLq wqRLD!\nhgLLq wqRLD!\nhgLLq wqRLD!\nhgLLq wqRLD!\nhgLLq wqRLD!\nhgLLq wqRLD!\nhgLLq wqRLD!\nhgLLq wqRLD!\nhgLLq wqRLD!\n",
      "timestamp": 1660333704
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let result: string = '';\n    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n        } else {\n            char = char.toUpperCase();\n        }\n        switch (char) {\n            case 'a':\n                char = 'c';\n                break;\n            case 'e':\n                char = 'g';\n                break;\n            case 'i':\n                char = 'k';\n                break;\n            case 'o':\n                char = 'q';\n                break;\n            case 'u':\n                char = 'y';\n                break;\n        }\n        result += char;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\nshould loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmp_s6t675t.js:42:12)\n    at Object.<anonymous> (/tmp/tmp_s6t675t.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333704
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    for (let i = 0; i < message.length; i++) {\n        const char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (vowels.includes(char)) {\n            const index = vowels.indexOf(char);\n            encodedMessage += vowels[(index + 2) % vowels.length];\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('hello'));\nconsole.log(encode('HELLO'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!'));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp5h8d38v6.js:56:12)\n    at Object.<anonymous> (/tmp/tmp5h8d38v6.js:62:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "HEoLLOa\nhello\nhEoLLOa wOaRLD\nhEoLLOa wOaRLD!\nhEoLLOa wOaRLD!\nhEoLLOa wOaRLD!\nhEoLLOa wOaRLD!\nhEoLLOa wOaRLD!\nhEoLLOa wOaRLD!\nhEoLLOa wOaRLD!\nhEoLLOa wOaRLD!\nhEoLLOa wOaRLD!\nhEoLLOa wOaRLD!\nhEoLLOa wOaRLD!\nhEoLLOa wOaRLD!\nhEoLLOa wOaRLD!\nhEoLLOa wOaRLD!\nhEoLLOa wOaRLD!\nhEoLLOa wOaRLD!\nhEoLLOa wOaRLD!\nhEoLLOa wOaRLD!\nhEoLLOa wOaRLD!\nhEoLLOa wOaRLD!\nhEoLLOa wOaRLD!\nhEoLLOa wOaRLD!\nhEoLLOa wOaRLD!\nhEoLLOa wOaRLD!\n",
      "timestamp": 1660333704
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let result: string = '';\n    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            result += char.toLowerCase();\n        } else {\n            result += char.toUpperCase();\n        }\n        if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n            result = result.slice(0, result.length - 1) + String.fromCharCode(char.charCodeAt(0) + 2);\n        }\n    }\n    return result;\n}\n\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // h\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpdqjqfq4q.js:43:12)\n    at Object.<anonymous> (/tmp/tmpdqjqfq4q.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hgLLq wqRLD\nhgLLq wqRLD!\nhgLLq wqRLD!\nhgLLq wqRLD!\nhgLLq wqRLD!\nhgLLq wqRLD!\nhgLLq wqRLD!\nhgLLq wqRLD!\nhgLLq wqRLD!\nhgLLq wqRLD!\nhgLLq wqRLD!\nhgLLq wqRLD!\nhgLLq wqRLD!\nhgLLq wqRLD!\nhgLLq wqRLD!\nhgLLq wqRLD!\nhgLLq wqRLD!\n",
      "timestamp": 1660333704
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (char === 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e') {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n            encodedMessage += 'k';\n        } else if (char === 'o') {\n            encodedMessage += 'q';\n        } else if (char === 'u') {\n            encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjdzkjayh.ts(48,1): error TS1005: ',' expected.\n../../../../tmp/tmpjdzkjayh.ts(48,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333689
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let encodedMessage = '';\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let letterIndex = alphabet.indexOf(letter.toLowerCase());\n    if (letterIndex === -1) {\n      encodedMessage += letter;\n    } else {\n      let newLetterIndex = letterIndex + 2;\n      if (newLetterIndex > 25) {\n        newLetterIndex -= 26;\n      }\n      let newLetter = alphabet[newLetterIndex];\n      if (letter === letter.toUpperCase()) {\n        newLetter = newLetter.toUpperCase();\n      }\n      encodedMessage += newLetter;\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode('Hello World')); // Jgnnq Yqtnf\nconsole.log(encode('abcdefghijklmnopqrstuvwxyz')); // cdefghijklmnopqrstuvwxyzab\nconsole.log(encode('ABCDEFGHIJKLMNOPQRSTUVWXYZ')); // CDEFGHIJKLMNOPQRSTUVWXYZAB\nconsole.log(encode('The quick brown fox jumps over the lazy dog.')); // Vjg swkem dtqyp hqz lworu pwkl zkdw vjg xyb.\nconsole.log(encode('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.')); // VJG SWKEM DTQYP HQZ LWORU PWKL ZKDW VJG XYB.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpz5z6p_hi.js:38:12)\n    at Object.<anonymous> (/tmp/tmpz5z6p_hi.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "Jgnnq Yqtnf\ncdefghijklmnopqrstuvwxyzab\nCDEFGHIJKLMNOPQRSTUVWXYZAB\nVjg swkem dtqyp hqz lworu qxgt vjg ncba fqi.\nVJG SWKEM DTQYP HQZ LWORU QXGT VJG NCBA FQI.\n",
      "timestamp": 1660333704
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (alphabet.indexOf(char) !== -1) {\n            encodedMessage += alphabet[(alphabet.indexOf(char) + 2) % 26];\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode(\"hello\")); // hlloe\nconsole.log(encode(\"HELLO\")); // hlloe\nconsole.log(encode(\"hello world\")); // hlloe wlrld\nconsole.log(encode(\"HELLO WORLD\")); // hlloe wlrld\nconsole.log(encode(\"hello world!\")); // hlloe wlrld!\nconsole.log(encode(\"HELLO WORLD!\")); // hlloe wlrld!\nconsole.log(encode(\"abcdefghijklmnopqrstuvwxyz\")); // cdefghijklmnopqrstuvwxyzab\nconsole.log(encode(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")); // cdefghijklmnopqrstuvwxyzab\nconsole.log(encode(\"abcdefghijklmnopqrstuvwxyz!\")); // cdefghijklmnopqrstuvwxyzab!\nconsole.log(encode(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ!\")); // cdefghijklmnopqrstuvwxyzab!\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp01qjo1qy.js:37:12)\n    at Object.<anonymous> (/tmp/tmp01qjo1qy.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "HjEgLnLnOq\nhello\nHjEgLnLnOq WyOqRtLnDf\nhello world\nHjEgLnLnOq WyOqRtLnDf!\nhello world!\nAcBdCeDfEgFhGiHjIkJlKmLnMoNpOqPrQsRtSuTvUwVxWyXzYaZb\nabcdefghijklmnopqrstuvwxyz\nAcBdCeDfEgFhGiHjIkJlKmLnMoNpOqPrQsRtSuTvUwVxWyXzYaZb!\nabcdefghijklmnopqrstuvwxyz!\n",
      "timestamp": 1660333704
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n      encodedMessage += char.toLowerCase();\n    } else {\n      encodedMessage += char.toUpperCase();\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode(\"Hello\")); // hELLO\nconsole.log(encode(\"Hello World\")); // hELLO wORLD\nconsole.log(encode(\"Hello World!\")); // hELLO wORLD!\nconsole.log(encode(\"Hello World! How are you?\")); // hELLO wORLD! hOW ARE YOU?\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmplc7hfdmg.js:27:12)\n    at Object.<anonymous> (/tmp/tmplc7hfdmg.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO\nhELLO wORLD\nhELLO wORLD!\nhELLO wORLD! hOW ARE YOU?\n",
      "timestamp": 1660333704
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (char === 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e') {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n            encodedMessage += 'k';\n        } else if (char === 'o') {\n            encodedMessage += 'q';\n        } else if (char === 'u') {\n            encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjdzkjayh.ts(48,1): error TS1005: ',' expected.\n../../../../tmp/tmpjdzkjayh.ts(48,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333689
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (char === 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e') {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n            encodedMessage += 'k';\n        } else if (char === 'o') {\n            encodedMessage += 'q';\n        } else if (char === 'u') {\n            encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjdzkjayh.ts(48,1): error TS1005: ',' expected.\n../../../../tmp/tmpjdzkjayh.ts(48,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333689
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let encodedMessage = '';\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n    let index = alphabet.indexOf(char.toLowerCase());\n    if (index === -1) {\n      encodedMessage += char;\n    } else {\n      let newIndex = index + 2;\n      if (newIndex > 25) {\n        newIndex -= 26;\n      }\n      if (char === char.toUpperCase()) {\n        encodedMessage += alphabet[newIndex].toUpperCase();\n      } else {\n        encodedMessage += alphabet[newIndex];\n      }\n    }\n  }\n  return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp2qzin9l4.js:34:12)\n    at Object.<anonymous> (/tmp/tmp2qzin9l4.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333704
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpt2w5jyxz.js:23:12)\n    at Object.<anonymous> (/tmp/tmpt2w5jyxz.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333704
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (char === 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e') {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n            encodedMessage += 'k';\n        } else if (char === 'o') {\n            encodedMessage += 'q';\n        } else if (char === 'u') {\n            encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjdzkjayh.ts(48,1): error TS1005: ',' expected.\n../../../../tmp/tmpjdzkjayh.ts(48,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333689
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    for (let i = 0; i < message.length; i++) {\n        let currentLetter = message[i];\n        if (currentLetter === currentLetter.toUpperCase()) {\n            currentLetter = currentLetter.toLowerCase();\n        } else {\n            currentLetter = currentLetter.toUpperCase();\n        }\n        if (vowels.includes(currentLetter)) {\n            let index = vowels.indexOf(currentLetter);\n            if (index === 4) {\n                index = -1;\n            }\n            currentLetter = vowels[index + 2];\n        }\n        encodedMessage += currentLetter;\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('Hello World')); // HllE Wrdl\nconsole.log(encode('Hello World') === 'HllE Wrdl');\nconsole.log(encode('abcdefghijklmnopqrstuvwxyz')); // cdefghijklmnopqrstuvwxyzab\nconsole.log(encode('abcdefghijklmnopqrstuvwxyz') === 'cdefghijklmnopqrstuvwxyzab');\nconsole.log(encode('ABCDEFGHIJKLMNOPQRSTUVWXYZ')); // CDEFGHIJKLMNOPQRSTUVWXYZAB\nconsole.log(encode('ABCDEFGHIJKLMNOPQRSTUVWXYZ') === 'CDEFGHIJKLMNOPQRSTUVWXYZAB');\nconsole.log(encode('The Quick Brown Fox Jumps Over The Lazy Dog')); // ThE QckBrwn Fx Jmps vr ThE Lzy Dg\nconsole.log(encode('The Quick Brown Fox Jumps Over The Lazy Dog') === 'ThE QckBrwn Fx Jmps vr ThE Lzy Dg');\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tost'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp0s5r3pns.js:40:12)\n    at Object.<anonymous> (/tmp/tmp0s5r3pns.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tost',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nfalse\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nfalse\nibcdofghujklmnundefinedpqrstevwxyz\nfalse\ntHE qUICK bROWN fOX jUMPS undefinedVER tHE lAZY dOG\nfalse\n",
      "timestamp": 1660333704
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let result: string = '';\n    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n        } else {\n            char = char.toUpperCase();\n        }\n        switch (char) {\n            case 'a':\n                char = 'c';\n                break;\n            case 'e':\n                char = 'g';\n                break;\n            case 'i':\n                char = 'k';\n                break;\n            case 'o':\n                char = 'q';\n                break;\n            case 'u':\n                char = 'y';\n                break;\n        }\n        result += char;\n    }\n    return result;\n}\n\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World') === 'Hlll Wgrld');\nconsole.log(encode('Hello World') === 'Hlll Wgrld');\nconsole.log(encode('Hello World') === 'Hlll Wgrld');\nconsole.log(encode('Hello World') === 'Hlll Wgrld');\nconsole.log(encode('Hello World') === 'Hlll Wgrld');\nconsole.log(encode('Hello World') === 'Hlll Wgrld');\nconsole.log(encode('Hello World') === 'Hlll Wgrld');\nconsole.log(encode('Hello World') === 'Hlll Wgrld');\nconsole.log(encode('Hello World') === 'Hlll Wgrld');\nconsole.log(encode('Hello World') === 'Hlll Wgrld');\nconsole.log(encode('Hello World') === 'Hlll Wgrld');\nconsole.log(encode('Hello World') === 'Hlll Wgrld');\nconsole.log(encode('Hello World') === 'Hlll Wgrld');\nconsole.log(encode('Hello World') === 'Hlll Wgrld');\nconsole.log(encode('Hello World') === 'Hlll Wgrld');\nconsole.log(encode\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6pp5z9vz.ts(55,1): error TS1005: ',' expected.\n../../../../tmp/tmp6pp5z9vz.ts(55,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333704
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i = 0; i < message.length; i++) {\n        let currentLetter = message[i];\n        if (currentLetter === currentLetter.toUpperCase()) {\n            encodedMessage += currentLetter.toLowerCase();\n        } else {\n            encodedMessage += currentLetter.toUpperCase();\n        }\n        if (alphabet.indexOf(currentLetter) !== -1) {\n            let indexOfLetter = alphabet.indexOf(currentLetter);\n            let newIndex = indexOfLetter + 2;\n            if (newIndex > 25) {\n                newIndex = newIndex - 26;\n            }\n            encodedMessage += alphabet[newIndex];\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp9c4n1qzl.js:32:12)\n    at Object.<anonymous> (/tmp/tmp9c4n1qzl.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333704
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let result: string = '';\n  const vowels: string[] = ['a', 'e', 'i', 'o', 'u'];\n  for (let i = 0; i < message.length; i++) {\n    const currentLetter: string = message[i];\n    const isUpperCase: boolean = currentLetter === currentLetter.toUpperCase();\n    const isVowel: boolean = vowels.includes(currentLetter.toLowerCase());\n    if (isVowel) {\n      let nextVowel: string = currentLetter;\n      let j: number = 0;\n      while (j < 2) {\n        nextVowel = nextLetter(nextVowel);\n        if (vowels.includes(nextVowel)) {\n          j++;\n        }\n      }\n      result += isUpperCase ? nextVowel.toUpperCase() : nextVowel;\n    } else {\n      result += isUpperCase ? currentLetter.toLowerCase() : currentLetter.toUpperCase();\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3a_s2agi.ts(18,21): error TS2304: Cannot find name 'nextLetter'.\n",
      "timestamp": 1660333704
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (char === 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e') {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n            encodedMessage += 'k';\n        } else if (char === 'o') {\n            encodedMessage += 'q';\n        } else if (char === 'u') {\n            encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('abcdefghijklmnopqrstuvwxyz') === 'bcdfghjklmnpqrstvwxyzab');\nconsole.log(encode('ABCDEFGHIJKLMNOPQRSTUVWXYZ') === 'bcdfghjklmnpqrstvwxyzab');\nconsole.log(encode('The quick brown fox jumps over the lazy dog') === 'thE qUick brOwn fOx jUmpS OvEr thE lAzy dOg');\nconsole.log(encode('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG') === 'thE qUick brOwn fOx jUmpS OvEr thE lAzy dOg');\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpllf97b1d.js:44:12)\n    at Object.<anonymous> (/tmp/tmpllf97b1d.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hEgLLOq wOqRLD\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660333704
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let result: string = '';\n    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            result += char.toLowerCase();\n        } else {\n            result += char.toUpperCase();\n        }\n        if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n            result = result.slice(0, result.length - 1) + String.fromCharCode(char.charCodeAt(0) + 2);\n        }\n    }\n    return result;\n}\n\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp3e2ox8dw.js:29:12)\n    at Object.<anonymous> (/tmp/tmp3e2ox8dw.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hgLLq wqRLD\nhgLLq wqRLD!\nhgLLq wqRLD!?\n",
      "timestamp": 1660333706
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  const vowels = 'aeiou';\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let encodedMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    const char = message[i];\n    if (vowels.includes(char)) {\n      const index = alphabet.indexOf(char);\n      encodedMessage += alphabet[index + 2];\n    } else if (alphabet.includes(char)) {\n      const index = alphabet.indexOf(char);\n      encodedMessage += alphabet[index + 2];\n    } else {\n      encodedMessage += char;\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode('hello')); // jgnnq\nconsole.log(encode('world')); // btwqi\nconsole.log(encode('hello world')); // jgnnq btwqi\nconsole.log(encode('HELLO WORLD')); // JGNNQ BTWQI\nconsole.log(encode('hello world!')); // jgnnq btwqi!\nconsole.log(encode('hello world!')); // jgnnq btwqi!\nconsole.log(encode('hello world!')); // jgnnq btwqi!\nconsole.log(encode('hello world!')); // jgnnq btwqi!\nconsole.log(encode('hello world!')); // jgnnq btwqi!\nconsole.log(encode('hello world!')); // jgnnq btwqi!\nconsole.log(encode('hello world!')); // jgnnq btwqi!\nconsole.log(encode('hello world!')); // jgnnq btwqi!\nconsole.log(encode('hello world!')); // jgnnq btwqi!\nconsole.log(encode('hello world!')); // jgnnq btwqi!\nconsole.log(encode('hello world!')); // jgnnq btwqi!\nconsole.log(encode('hello world!')); // jgnnq btwqi!\nconsole.log(encode\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdjsjgjvv.ts(43,1): error TS1005: ',' expected.\n../../../../tmp/tmpdjsjgjvv.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333706
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let encodedMessage = '';\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  for (let i = 0; i < message.length; i++) {\n    if (message[i] === message[i].toUpperCase()) {\n      encodedMessage += message[i].toLowerCase();\n    } else {\n      encodedMessage += message[i].toUpperCase();\n    }\n    if (vowels.includes(encodedMessage[i])) {\n      encodedMessage = encodedMessage.slice(0, i) + vowels[(vowels.indexOf(encodedMessage[i]) + 2) % 5] + encodedMessage.slice(i + 1);\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode('Hello World')); // 'HllE wlrlD'\nconsole.log(encode('Hello World') === 'HllE wlrlD');\nconsole.log(encode('abcdefghijklmnopqrstuvwxyz')); // 'cdefghijklmnopqrstuvwxyzab'\nconsole.log(encode('abcdefghijklmnopqrstuvwxyz') === 'cdefghijklmnopqrstuvwxyzab');\nconsole.log(encode('ABCDEFGHIJKLMNOPQRSTUVWXYZ')); // 'CDEFGHIJKLMNOPQRSTUVWXYZAB'\nconsole.log(encode('ABCDEFGHIJKLMNOPQRSTUVWXYZ') === 'CDEFGHIJKLMNOPQRSTUVWXYZAB');\nconsole.log(encode('The quick brown fox jumps over the lazy dog.')); // 'ThE qck brwn fx jmps vr thE lzy dg.'\nconsole.log(encode('The quick brown fox jumps over the lazy dog.') === 'ThE qck brwn fx jmps vr thE lzy dg.');\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tost'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp9_v226s_.js:34:12)\n    at Object.<anonymous> (/tmp/tmp9_v226s_.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tost',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nfalse\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nfalse\nibcdofghujklmnapqrstevwxyz\nfalse\ntHE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.\nfalse\n",
      "timestamp": 1660333707
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n      encodedMessage += char.toLowerCase();\n    } else {\n      encodedMessage += char.toUpperCase();\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode(\"Hello\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World! How are you?\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpej6nt2ys.js:28:12)\n    at Object.<anonymous> (/tmp/tmpej6nt2ys.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO\nHELLO\nhELLO wORLD\nhELLO wORLD!\nhELLO wORLD! hOW ARE YOU?\n",
      "timestamp": 1660333707
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let encodedMessage = \"\";\n  let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n  let vowels = \"aeiou\";\n  for (let i = 0; i < message.length; i++) {\n    let currentLetter = message[i];\n    if (vowels.includes(currentLetter)) {\n      let currentVowelIndex = vowels.indexOf(currentLetter);\n      let encodedVowel = vowels[currentVowelIndex + 2];\n      encodedMessage += encodedVowel;\n    } else if (alphabet.includes(currentLetter)) {\n      let currentLetterIndex = alphabet.indexOf(currentLetter);\n      let encodedLetter = alphabet[currentLetterIndex + 2];\n      encodedMessage += encodedLetter;\n    } else {\n      encodedMessage += currentLetter;\n    }\n  }\n  return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpo0syzoi8.js:32:12)\n    at Object.<anonymous> (/tmp/tmpo0syzoi8.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333707
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i = 0; i < message.length; i++) {\n        let currentLetter = message[i];\n        if (currentLetter === currentLetter.toUpperCase()) {\n            currentLetter = currentLetter.toLowerCase();\n            let index = alphabet.indexOf(currentLetter);\n            if (index === -1) {\n                encodedMessage += currentLetter;\n            } else {\n                let newIndex = index + 2;\n                if (newIndex > 25) {\n                    newIndex -= 26;\n                }\n                encodedMessage += alphabet[newIndex].toUpperCase();\n            }\n        } else {\n            let index = alphabet.indexOf(currentLetter);\n            if (index === -1) {\n                encodedMessage += currentLetter;\n            } else {\n                let newIndex = index + 2;\n                if (newIndex > 25) {\n                    newIndex -= 26;\n                }\n                encodedMessage += alphabet[newIndex];\n            }\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!@#$%^&*()\"));\nconsole.log(encode(\"Hello World!@#$%^&*()1234567890\"));\nconsole.log(encode(\"Hello World!@#$%^&*()1234567890-=[]\\\\;',./\"));\nconsole.log(encode(\"Hello World!@#$%^&*()1234567890-=[]\\\\;',./~`\"));\nconsole.log(encode(\"Hello World!@#$%^&*()1234567890-=[]\\\\;',./~`{}|:\\\"<>?\"));\nconsole.log(encode(\"Hello World!@#$%^&*()1234567890-=[]\\\\;',./~`{}|:\\\"<>?qwertyuiopasdfghjklzxcvbnm\"));\nconsole.log(encode(\"Hello World!@#$%^&\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsdn3brcp.ts(48,39): error TS1002: Unterminated string literal.\n../../../../tmp/tmpsdn3brcp.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpsdn3brcp.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333707
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n        } else {\n            char = char.toUpperCase();\n        }\n        if (char === \"a\") {\n            char = \"c\";\n        } else if (char === \"e\") {\n            char = \"g\";\n        } else if (char === \"i\") {\n            char = \"k\";\n        } else if (char === \"o\") {\n            char = \"q\";\n        } else if (char === \"u\") {\n            char = \"y\";\n        }\n        encodedMessage += char;\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\nshould loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpgdkr5pu_.js:40:12)\n    at Object.<anonymous> (/tmp/tmpgdkr5pu_.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333693
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    let encoded = '';\n    for (let i = 0; i < message.length; i++) {\n        const char = message[i];\n        if (vowels.includes(char)) {\n            const index = alphabet.indexOf(char);\n            encoded += alphabet[index + 2];\n        } else if (char === char.toUpperCase()) {\n            encoded += char.toLowerCase();\n        } else {\n            encoded += char.toUpperCase();\n        }\n    }\n    return encoded;\n}\n\nconsole.log(encode('Hello World!')); // hllE wldr!\nconsole.log(encode('The quick brown fox jumps over the lazy dog.')); // thE qck brwn fx jmps vr thE lzy dg.\nconsole.log(encode('The quick brown fox jumps over the lazy dog.')); // thE qck brwn fx jmps vr thE lzy dg.\nconsole.log(encode('The quick brown fox jumps over the lazy dog.')); // thE qck brwn fx jmps vr thE lzy dg.\nconsole.log(encode('The quick brown fox jumps over the lazy dog.')); // thE qck brwn fx jmps vr thE lzy dg.\nconsole.log(encode('The quick brown fox jumps over the lazy dog.')); // thE qck brwn fx jmps vr thE lzy dg.\nconsole.log(encode('The quick brown fox jumps over the lazy dog.')); // thE qck brwn fx jmps vr thE lzy dg.\nconsole.log(encode('The quick brown fox jumps over the lazy dog.')); // thE qck brwn fx jmps vr thE lzy dg.\nconsole.log(encode('The quick brown fox jumps over the lazy dog.')); // thE qck brwn fx jmps vr thE lzy dg.\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprfu9l_s3.ts(34,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333707
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let result: string = \"\";\n  let vowels: string = \"aeiou\";\n  for (let i: number = 0; i < message.length; i++) {\n    if (vowels.indexOf(message[i]) !== -1) {\n      result += String.fromCharCode(message[i].charCodeAt(0) + 2);\n    } else if (message[i] === message[i].toUpperCase()) {\n      result += message[i].toLowerCase();\n    } else {\n      result += message[i].toUpperCase();\n    }\n  }\n  return result;\n}\n\nconsole.log(encode(\"Hello World\")); // \"HllE Wrdl\"\nconsole.log(encode(\"Hello World!\")); // \"HllE Wrdl!\"\nconsole.log(encode(\"Hello World!\")); // \"HllE Wrdl!\"\nconsole.log(encode(\"Hello World! How are you?\")); // \"HllE Wrdl! Hw dyu cmn?\"\nconsole.log(encode(\"Hello World! How are you? I'm fine, thank you.\")); // \"HllE Wrdl! Hw dyu cmn? I'm fnE, thnk yu.\"\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpryrd2ax0.js:31:12)\n    at Object.<anonymous> (/tmp/tmpryrd2ax0.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hgLLq wqRLD\nhgLLq wqRLD!\nhgLLq wqRLD!\nhgLLq wqRLD! hqW cRg Yqw?\nhgLLq wqRLD! hqW cRg Yqw? i'M FkNg, THcNK Yqw.\n",
      "timestamp": 1660333707
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let result: string = '';\n    for (let i = 0; i < message.length; i++) {\n        const char = message[i];\n        if (char === char.toUpperCase()) {\n            result += char.toLowerCase();\n        } else {\n            result += char.toUpperCase();\n        }\n    }\n    return result;\n}\n\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp59ggrty5.js:46:12)\n    at Object.<anonymous> (/tmp/tmp59ggrty5.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\n",
      "timestamp": 1660333707
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let currentChar = message[i];\n        if (currentChar === currentChar.toUpperCase()) {\n            encodedMessage += currentChar.toLowerCase();\n        } else {\n            encodedMessage += currentChar.toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode(\"Hello\"));\nconsole.log(encode(\"HELLO\"));\nconsole.log(encode(\"hello\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpowlx5kgu.js:28:12)\n    at Object.<anonymous> (/tmp/tmpowlx5kgu.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO\nhello\nHELLO\nhELLO wORLD\nhELLO wORLD!\n",
      "timestamp": 1660333708
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let encodedMessage = '';\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  for (let i = 0; i < message.length; i++) {\n    const currentLetter = message[i];\n    if (vowels.includes(currentLetter)) {\n      const index = vowels.indexOf(currentLetter);\n      encodedMessage += vowels[index + 2];\n    } else if (currentLetter === currentLetter.toUpperCase()) {\n      encodedMessage += currentLetter.toLowerCase();\n    } else {\n      encodedMessage += currentLetter.toUpperCase();\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode('Hello World')); // HllE Wrdl\nconsole.log(encode('Hello World') === 'HllE Wrdl');\nconsole.log(encode('Hello World') !== 'HllE Wrdl');\nconsole.log(encode('Hello World') !== 'hllE wrdl');\nconsole.log(encode('Hello World') === 'hllE wrdl');\nconsole.log(encode('Hello World') !== 'hllE wrdl');\nconsole.log(encode('Hello World') !== 'HllE Wrdl');\nconsole.log(encode('Hello World') === 'HllE Wrdl');\nconsole.log(encode('Hello World') !== 'HllE Wrdl');\nconsole.log(encode('Hello World') !== 'hllE wrdl');\nconsole.log(encode('Hello World') === 'hllE wrdl');\nconsole.log(encode('Hello World') !== 'hllE wrdl');\nconsole.log(encode('Hello World') !== 'HllE Wrdl');\nconsole.log(encode('Hello World') === 'HllE Wrdl');\nconsole.log(encode('Hello World') !== 'HllE Wrdl');\nconsole.log(encode('Hello World') !== 'hllE wrdl');\nconsole.log(encode('Hello World') === 'hllE wrdl');\nconsole.log(encode('Hello World\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp1esfea93.ts(41,32): error TS1002: Unterminated string literal.\n../../../../tmp/tmp1esfea93.ts(42,1): error TS1005: ',' expected.\n../../../../tmp/tmp1esfea93.ts(42,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333707
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (char === 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e') {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n            encodedMessage += 'k';\n        } else if (char === 'o') {\n            encodedMessage += 'q';\n        } else if (char === 'u') {\n            encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('Hello, World!'));\nconsole.log(encode('Hello, World!') === 'hELLO, wORLD!');\nconsole.log(encode('Hello, World!') === 'hELLO, wORLD!');\nconsole.log(encode('Hello, World!') === 'hELLO, wORLD!');\nconsole.log(encode('Hello, World!') === 'hELLO, wORLD!');\nconsole.log(encode('Hello, World!') === 'hELLO, wORLD!');\nconsole.log(encode('Hello, World!') === 'hELLO, wORLD!');\nconsole.log(encode('Hello, World!') === 'hELLO, wORLD!');\nconsole.log(encode('Hello, World!') === 'hELLO, wORLD!');\nconsole.log(encode('Hello, World!') === 'hELLO, wORLD!');\nconsole.log(encode('Hello, World!') === 'hELLO, wORLD!');\nconsole.log(encode('Hello, World!') === 'hELLO, wORLD!');\nconsole.log(encode('Hello, World!') === 'hELLO, wORLD!');\nconsole.log(encode('Hello, World!') === 'hELL\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpd8rj5zjf.ts(44,46): error TS1002: Unterminated string literal.\n../../../../tmp/tmpd8rj5zjf.ts(45,1): error TS1005: ',' expected.\n../../../../tmp/tmpd8rj5zjf.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333707
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let result: string = '';\n  for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n      char = char.toLowerCase();\n    } else {\n      char = char.toUpperCase();\n    }\n    if (char === 'a') {\n      char = 'c';\n    } else if (char === 'e') {\n      char = 'g';\n    } else if (char === 'i') {\n      char = 'k';\n    } else if (char === 'o') {\n      char = 'q';\n    } else if (char === 'u') {\n      char = 'y';\n    }\n    result += char;\n  }\n  return result;\n}\n\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode('Hello World!?')); // hELLO wORLD!?\nconsole.log(encode\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpb9sphmaj.ts(48,1): error TS1005: ',' expected.\n../../../../tmp/tmpb9sphmaj.ts(48,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333707
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n      encodedMessage += char.toLowerCase();\n    } else {\n      encodedMessage += char.toUpperCase();\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode(\"Hello\")); // hELLO\nconsole.log(encode(\"Hello World\")); // hELLO wORLD\nconsole.log(encode(\"Hello World!\")); // hELLO wORLD!\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp95daymhz.js:26:12)\n    at Object.<anonymous> (/tmp/tmp95daymhz.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO\nhELLO wORLD\nhELLO wORLD!\n",
      "timestamp": 1660333703
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let encodedMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n      encodedMessage += char.toLowerCase();\n    } else {\n      encodedMessage += char.toUpperCase();\n    }\n    if (char === 'a') {\n      encodedMessage += 'c';\n    } else if (char === 'e') {\n      encodedMessage += 'g';\n    } else if (char === 'i') {\n      encodedMessage += 'k';\n    } else if (char === 'o') {\n      encodedMessage += 'q';\n    } else if (char === 'u') {\n      encodedMessage += 'w';\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpzlj8iqt6.ts(48,1): error TS1005: ',' expected.\n../../../../tmp/tmpzlj8iqt6.ts(48,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333700
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    let vowels = \"aeiou\";\n    for (let i = 0; i < message.length; i++) {\n        let currentLetter = message[i];\n        let currentLetterIndex = alphabet.indexOf(currentLetter.toLowerCase());\n        if (currentLetterIndex === -1) {\n            encodedMessage += currentLetter;\n        } else {\n            let isUpperCase = currentLetter === currentLetter.toUpperCase();\n            if (vowels.indexOf(currentLetter.toLowerCase()) !== -1) {\n                let newLetterIndex = currentLetterIndex + 2;\n                if (newLetterIndex > 25) {\n                    newLetterIndex -= 26;\n                }\n                encodedMessage += isUpperCase ? alphabet[newLetterIndex].toUpperCase() : alphabet[newLetterIndex];\n            } else {\n                encodedMessage += isUpperCase ? alphabet[currentLetterIndex].toUpperCase() : alphabet[currentLetterIndex];\n            }\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TGST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmptskoj8kt.js:36:12)\n    at Object.<anonymous> (/tmp/tmptskoj8kt.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TGST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333708
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    const vowels = 'aeiou';\n    const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    for (let i = 0; i < message.length; i++) {\n        const letter = message[i];\n        if (vowels.includes(letter)) {\n            const index = alphabet.indexOf(letter);\n            encodedMessage += alphabet[index + 2];\n        } else if (letter === letter.toUpperCase()) {\n            encodedMessage += letter.toLowerCase();\n        } else {\n            encodedMessage += letter.toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('hello')); // 'jgnnq'\nconsole.log(encode('HELLO')); // 'jgnnq'\nconsole.log(encode('Hello World')); // 'Jgnnq Yqtnf'\nconsole.log(encode('Hello World!')); // 'Jgnnq Yqtnf!'\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpya7iqmcm.js:33:12)\n    at Object.<anonymous> (/tmp/tmpya7iqmcm.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "HgLLq\nhello\nhgLLq wqRLD\nhgLLq wqRLD!\n",
      "timestamp": 1660333708
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (letter === letter.toUpperCase()) {\n            encodedMessage += letter.toLowerCase();\n        } else {\n            encodedMessage += letter.toUpperCase();\n        }\n        if (letter === \"a\") {\n            encodedMessage += \"c\";\n        } else if (letter === \"e\") {\n            encodedMessage += \"g\";\n        } else if (letter === \"i\") {\n            encodedMessage += \"k\";\n        } else if (letter === \"o\") {\n            encodedMessage += \"q\";\n        } else if (letter === \"u\") {\n            encodedMessage += \"w\";\n        }\n    }\n    return encodedMessage;\n}\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!!!\"));\nconsole.log(encode(\"Hello World!!!!\"));\nconsole.log(encode(\"Hello World!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!!!!!!\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0kv_8ty2.ts(52,54): error TS1002: Unterminated string literal.\n../../../../tmp/tmp0kv_8ty2.ts(53,1): error TS1005: ',' expected.\n../../../../tmp/tmp0kv_8ty2.ts(53,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333708
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpt2w5jyxz.js:23:12)\n    at Object.<anonymous> (/tmp/tmpt2w5jyxz.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333704
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (char === 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e') {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n            encodedMessage += 'k';\n        } else if (char === 'o') {\n            encodedMessage += 'q';\n        } else if (char === 'u') {\n            encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjdzkjayh.ts(48,1): error TS1005: ',' expected.\n../../../../tmp/tmpjdzkjayh.ts(48,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333689
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (char === 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e') {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n            encodedMessage += 'k';\n        } else if (char === 'o') {\n            encodedMessage += 'q';\n        } else if (char === 'u') {\n            encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjdzkjayh.ts(48,1): error TS1005: ',' expected.\n../../../../tmp/tmpjdzkjayh.ts(48,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333689
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n        } else {\n            char = char.toUpperCase();\n        }\n        if (isVowel(char)) {\n            char = getNextVowel(char);\n        }\n        encodedMessage += char;\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpgsop3pdx.ts(16,13): error TS2304: Cannot find name 'isVowel'.\n../../../../tmp/tmpgsop3pdx.ts(17,20): error TS2304: Cannot find name 'getNextVowel'.\n",
      "timestamp": 1660333708
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let encodedMessage = '';\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  for (let i = 0; i < message.length; i++) {\n    if (vowels.includes(message[i])) {\n      encodedMessage += String.fromCharCode(message[i].charCodeAt(0) + 2);\n    } else if (message[i] === message[i].toUpperCase()) {\n      encodedMessage += message[i].toLowerCase();\n    } else {\n      encodedMessage += message[i].toUpperCase();\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode('Hello')); // 'Hlll'\nconsole.log(encode('Hello World')); // 'Hlll Wrdl'\nconsole.log(encode('Hello World!')); // 'Hlll Wrdl!'\nconsole.log(encode('Hello World!')); // 'Hlll Wrdl!'\nconsole.log(encode('Hello World!')); // 'Hlll Wrdl!'\nconsole.log(encode('Hello World!')); // 'Hlll Wrdl!'\nconsole.log(encode('Hello World!')); // 'Hlll Wrdl!'\nconsole.log(encode('Hello World!')); // 'Hlll Wrdl!'\nconsole.log(encode('Hello World!')); // 'Hlll Wrdl!'\nconsole.log(encode('Hello World!')); // 'Hlll Wrdl!'\nconsole.log(encode('Hello World!')); // 'Hlll Wrdl!'\nconsole.log(encode('Hello World!')); // 'Hlll Wrdl!'\nconsole.log(encode('Hello World!')); // 'Hlll Wrdl!'\nconsole.log(encode('Hello World!')); // 'Hlll Wrdl!'\nconsole.log(encode('Hello World!')); // 'Hlll Wrdl!'\nconsole.log(encode('Hello World!')); // 'Hlll Wrdl!'\nconsole.log(encode('Hello World\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpk9ukno4t.ts(38,32): error TS1002: Unterminated string literal.\n../../../../tmp/tmpk9ukno4t.ts(39,1): error TS1005: ',' expected.\n../../../../tmp/tmpk9ukno4t.ts(39,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333708
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let result: string = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n      result += char.toLowerCase();\n    } else {\n      result += char.toUpperCase();\n    }\n  }\n  return result;\n}\n\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp_joestzz.js:59:12)\n    at Object.<anonymous> (/tmp/tmp_joestzz.js:65:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\n",
      "timestamp": 1660333708
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let encodedMessage = '';\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const isUpperCase = letter === letter.toUpperCase();\n    const letterLowerCase = letter.toLowerCase();\n    if (vowels.includes(letterLowerCase)) {\n      const index = alphabet.indexOf(letterLowerCase);\n      const newLetter = alphabet[index + 2];\n      encodedMessage += isUpperCase ? newLetter.toUpperCase() : newLetter;\n    } else {\n      encodedMessage += isUpperCase ? letter.toLowerCase() : letter.toUpperCase();\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode('hello')); // 'jgnnq'\nconsole.log(encode('HELLO')); // 'jgnnq'\nconsole.log(encode('HELLO WORLD')); // 'jgnnq yqtnf'\nconsole.log(encode('hello world')); // 'jgnnq yqtnf'\nconsole.log(encode('Hello World')); // 'Jgnnq Yqtnf'\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tGst'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpcknn56z1.js:34:12)\n    at Object.<anonymous> (/tmp/tmpcknn56z1.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tGst',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "HgLLq\nhGllQ\nhGllQ wQrld\nHgLLq WqRLD\nhgLLq wqRLD\n",
      "timestamp": 1660333708
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        if (message[i] === message[i].toUpperCase()) {\n            encodedMessage += message[i].toLowerCase();\n        } else {\n            encodedMessage += message[i].toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpr1qqzoer.js:45:12)\n    at Object.<anonymous> (/tmp/tmpr1qqzoer.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\n",
      "timestamp": 1660333708
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let result: string = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            result += char.toLowerCase();\n        } else {\n            result += char.toUpperCase();\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp0t5ic1dn.js:23:12)\n    at Object.<anonymous> (/tmp/tmp0t5ic1dn.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333708
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        const char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmphdbfg89n.js:58:12)\n    at Object.<anonymous> (/tmp/tmphdbfg89n.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\n",
      "timestamp": 1660333701
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let encodedMessage = '';\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  for (let i = 0; i < message.length; i++) {\n    const char = message[i];\n    if (vowels.includes(char.toLowerCase())) {\n      const index = vowels.indexOf(char.toLowerCase());\n      const newIndex = (index + 2) % vowels.length;\n      encodedMessage += vowels[newIndex];\n    } else if (char === char.toUpperCase()) {\n      encodedMessage += char.toLowerCase();\n    } else {\n      encodedMessage += char.toUpperCase();\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode('Hello World')); // HllE Wrdl\nconsole.log(encode('Hello World') === 'HllE Wrdl');\nconsole.log(encode('Hello World') === 'HllE Wrdl');\nconsole.log(encode('Hello World') === 'HllE Wrdl');\nconsole.log(encode('Hello World') === 'HllE Wrdl');\nconsole.log(encode('Hello World') === 'HllE Wrdl');\nconsole.log(encode('Hello World') === 'HllE Wrdl');\nconsole.log(encode('Hello World') === 'HllE Wrdl');\nconsole.log(encode('Hello World') === 'HllE Wrdl');\nconsole.log(encode('Hello World') === 'HllE Wrdl');\nconsole.log(encode('Hello World') === 'HllE Wrdl');\nconsole.log(encode('Hello World') === 'HllE Wrdl');\nconsole.log(encode('Hello World') === 'HllE Wrdl');\nconsole.log(encode('Hello World') === 'HllE Wrdl');\nconsole.log(encode('Hello World') === 'HllE Wrdl');\nconsole.log(encode('Hello World') === 'HllE Wrdl');\nconsole.log(encode('Hello World') === 'H\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpowjx9nak.ts(41,41): error TS1002: Unterminated string literal.\n../../../../tmp/tmpowjx9nak.ts(42,1): error TS1005: ',' expected.\n../../../../tmp/tmpowjx9nak.ts(42,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333708
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        let currentLetter = message[i];\n        if (currentLetter === currentLetter.toUpperCase()) {\n            encodedMessage += currentLetter.toLowerCase();\n        } else {\n            encodedMessage += currentLetter.toUpperCase();\n        }\n        if (currentLetter === 'a') {\n            encodedMessage += 'c';\n        } else if (currentLetter === 'e') {\n            encodedMessage += 'g';\n        } else if (currentLetter === 'i') {\n            encodedMessage += 'k';\n        } else if (currentLetter === 'o') {\n            encodedMessage += 'q';\n        } else if (currentLetter === 'u') {\n            encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpsmsejn9t.js:38:12)\n    at Object.<anonymous> (/tmp/tmpsmsejn9t.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333710
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp6elnzra1.js:58:12)\n    at Object.<anonymous> (/tmp/tmp6elnzra1.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\n",
      "timestamp": 1660333693
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (alphabet.indexOf(char) !== -1) {\n            let index = alphabet.indexOf(char);\n            let newIndex = index + 2;\n            if (newIndex > 25) {\n                newIndex -= 26;\n            }\n            encodedMessage += alphabet[newIndex];\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode(\"hello\")); // hlleo\nconsole.log(encode(\"HELLO\")); // hlleo\nconsole.log(encode(\"Hello\")); // hlleo\nconsole.log(encode(\"Hello World\")); // hlleo wlrld\nconsole.log(encode(\"Hello World!\")); // hlleo wlrld!\nconsole.log(encode(\"Hello World! How are you?\")); // hlleo wlrld! hw ar yu?\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpccdpysn6.js:38:12)\n    at Object.<anonymous> (/tmp/tmpccdpysn6.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "HjEgLnLnOq\nhello\nhEgLnLnOq\nhEgLnLnOq wOqRtLnDf\nhEgLnLnOq wOqRtLnDf!\nhEgLnLnOq wOqRtLnDf! hOqWy AcRtEg YaOqUw?\n",
      "timestamp": 1660333710
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        const char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpp_aom01m.js:23:12)\n    at Object.<anonymous> (/tmp/tmpp_aom01m.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333710
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let encodedMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n      encodedMessage += char.toLowerCase();\n    } else {\n      encodedMessage += char.toUpperCase();\n    }\n    if (char === 'a') {\n      encodedMessage += 'c';\n    } else if (char === 'e') {\n      encodedMessage += 'g';\n    } else if (char === 'i') {\n      encodedMessage += 'k';\n    } else if (char === 'o') {\n      encodedMessage += 'q';\n    } else if (char === 'u') {\n      encodedMessage += 'w';\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpzlj8iqt6.ts(48,1): error TS1005: ',' expected.\n../../../../tmp/tmpzlj8iqt6.ts(48,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333700
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (char === 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e') {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n            encodedMessage += 'k';\n        } else if (char === 'o') {\n            encodedMessage += 'q';\n        } else if (char === 'u') {\n            encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjdzkjayh.ts(48,1): error TS1005: ',' expected.\n../../../../tmp/tmpjdzkjayh.ts(48,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333689
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (char === 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e') {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n            encodedMessage += 'k';\n        } else if (char === 'o') {\n            encodedMessage += 'q';\n        } else if (char === 'u') {\n            encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqmtkxcrt.ts(48,1): error TS1005: ',' expected.\n../../../../tmp/tmpqmtkxcrt.ts(48,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333689
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let result: string = \"\";\n  let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n  for (let i: number = 0; i < message.length; i++) {\n    let letter: string = message[i];\n    let index: number = alphabet.indexOf(letter.toLowerCase());\n    if (index === -1) {\n      result += letter;\n    } else {\n      let newIndex: number = index + 2;\n      if (newIndex > 25) {\n        newIndex -= 26;\n      }\n      let newLetter: string = alphabet[newIndex];\n      if (letter === letter.toUpperCase()) {\n        newLetter = newLetter.toUpperCase();\n      }\n      result += newLetter;\n    }\n  }\n  return result;\n}\n\nconsole.log(encode(\"Hello\")); // Jgnnq\nconsole.log(encode(\"My name is Bond, James Bond\")); // Oq pcog oc Dqfg, Kcigd Kcigd\nconsole.log(encode(\"abcdefghijklmnopqrstuvwxyz\")); // cdefghijklmnopqrstuvwxyzab\nconsole.log(encode(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")); // CDEFGHIJKLMNOPQRSTUVWXYZAB\nconsole.log(encode(\"The quick brown fox jumps over the lazy dog\")); // Vjg swkem dtqyp hqz lworu jnmbx nx vjg mbzy eph\nconsole.log(encode(\"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\")); // VJG SWKEM DTQYP HQZ LWORU JNMBX NX VJG MBZY EPH\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpvdgt86el.js:39:12)\n    at Object.<anonymous> (/tmp/tmpvdgt86el.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "Jgnnq\nOa pcog ku Dqpf, Lcogu Dqpf\ncdefghijklmnopqrstuvwxyzab\nCDEFGHIJKLMNOPQRSTUVWXYZAB\nVjg swkem dtqyp hqz lworu qxgt vjg ncba fqi\nVJG SWKEM DTQYP HQZ LWORU QXGT VJG NCBA FQI\n",
      "timestamp": 1660333710
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let encodedMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    const char = message[i];\n    if (vowels.includes(char)) {\n      const index = vowels.indexOf(char);\n      encodedMessage += vowels[(index + 2) % vowels.length];\n    } else if (char === char.toUpperCase()) {\n      encodedMessage += char.toLowerCase();\n    } else {\n      encodedMessage += char.toUpperCase();\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode('hello')); // 'hlll'\nconsole.log(encode('HELLO')); // 'hlll'\nconsole.log(encode('hello world')); // 'hlll wrld'\nconsole.log(encode('Hello World')); // 'hlll wrld'\nconsole.log(encode('Hello World!')); // 'hlll wrld!'\nconsole.log(encode('Hello World!')); // 'hlll wrld!'\nconsole.log(encode('Hello World!')); // 'hlll wrld!'\nconsole.log(encode('Hello World!')); // 'hlll wrld!'\nconsole.log(encode('Hello World!')); // 'hlll wrld!'\nconsole.log(encode('Hello World!')); // 'hlll wrld!'\nconsole.log(encode('Hello World!')); // 'hlll wrld!'\nconsole.log(encode('Hello World!')); // 'hlll wrld!'\nconsole.log(encode('Hello World!')); // 'hlll wrld!'\nconsole.log(encode('Hello World!')); // 'hlll wrld!'\nconsole.log(encode('Hello World!')); // 'hlll wrld!'\nconsole.log(encode('Hello World!')); // 'hlll wrld!'\nconsole.log(encode('Hello World!')); // 'hlll wrld!'\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpybi9bt6o.js:46:12)\n    at Object.<anonymous> (/tmp/tmpybi9bt6o.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "HoLLa\nhello\nHoLLa WaRLD\nhoLLa waRLD\nhoLLa waRLD!\nhoLLa waRLD!\nhoLLa waRLD!\nhoLLa waRLD!\nhoLLa waRLD!\nhoLLa waRLD!\nhoLLa waRLD!\nhoLLa waRLD!\nhoLLa waRLD!\nhoLLa waRLD!\nhoLLa waRLD!\nhoLLa waRLD!\nhoLLa waRLD!\n",
      "timestamp": 1660333711
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let encodedMessage = \"\";\n  let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === letter.toUpperCase()) {\n      encodedMessage += letter.toLowerCase();\n    } else {\n      encodedMessage += letter.toUpperCase();\n    }\n    if (alphabet.includes(letter)) {\n      let index = alphabet.indexOf(letter);\n      let newIndex = index + 2;\n      if (newIndex > 25) {\n        newIndex -= 26;\n      }\n      encodedMessage += alphabet[newIndex];\n    }\n  }\n  return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpt89bzwdx.js:32:12)\n    at Object.<anonymous> (/tmp/tmpt89bzwdx.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333711
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n        } else {\n            char = char.toUpperCase();\n        }\n        encodedMessage += char;\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('Hello World'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpis19gman.js:25:12)\n    at Object.<anonymous> (/tmp/tmpis19gman.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\n",
      "timestamp": 1660333710
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let encodedMessage = '';\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  for (let i = 0; i < message.length; i++) {\n    const char = message[i];\n    if (vowels.includes(char.toLowerCase())) {\n      const index = vowels.indexOf(char.toLowerCase());\n      encodedMessage += vowels[(index + 2) % vowels.length];\n    } else if (char === char.toUpperCase()) {\n      encodedMessage += char.toLowerCase();\n    } else {\n      encodedMessage += char.toUpperCase();\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode('Hello World')); // hEllO wOrld\nconsole.log(encode('Hello World!')); // hEllO wOrld!\nconsole.log(encode('Hello World!')); // hEllO wOrld!\nconsole.log(encode('Hello World!')); // hEllO wOrld!\nconsole.log(encode('Hello World!')); // hEllO wOrld!\nconsole.log(encode('Hello World!')); // hEllO wOrld!\nconsole.log(encode('Hello World!')); // hEllO wOrld!\nconsole.log(encode('Hello World!')); // hEllO wOrld!\nconsole.log(encode('Hello World!')); // hEllO wOrld!\nconsole.log(encode('Hello World!')); // hEllO wOrld!\nconsole.log(encode('Hello World!')); // hEllO wOrld!\nconsole.log(encode('Hello World!')); // hEllO wOrld!\nconsole.log(encode('Hello World!')); // hEllO wOrld!\nconsole.log(encode('Hello World!')); // hEllO wOrld!\nconsole.log(encode('Hello World!')); // hEllO wOrld!\nconsole.log(encode('Hello World!')); // hEllO wOrld!\nconsole.log(encode('\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpofw8uhns.ts(40,21): error TS1002: Unterminated string literal.\n../../../../tmp/tmpofw8uhns.ts(41,1): error TS1005: ',' expected.\n../../../../tmp/tmpofw8uhns.ts(41,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333711
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n      encodedMessage += char.toLowerCase();\n    } else {\n      encodedMessage += char.toUpperCase();\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode(\"Hello\")); // hELLO\nconsole.log(encode(\"Hello World\")); // hELLO wORLD\nconsole.log(encode(\"Hello World!\")); // hELLO wORLD!\nconsole.log(encode(\"Hello World!!!\")); // hELLO wORLD!!!\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpcy2nnz3j.js:27:12)\n    at Object.<anonymous> (/tmp/tmpcy2nnz3j.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO\nhELLO wORLD\nhELLO wORLD!\nhELLO wORLD!!!\n",
      "timestamp": 1660333711
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let result: string = \"\";\n  for (let i = 0; i < message.length; i++) {\n    if (message[i] === message[i].toUpperCase()) {\n      result += message[i].toLowerCase();\n    } else {\n      result += message[i].toUpperCase();\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp__p72ghq.js:22:12)\n    at Object.<anonymous> (/tmp/tmp__p72ghq.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333711
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        const currentLetter = message[i];\n        if (currentLetter === currentLetter.toUpperCase()) {\n            encodedMessage += currentLetter.toLowerCase();\n        } else {\n            encodedMessage += currentLetter.toUpperCase();\n        }\n        if (currentLetter === 'a') {\n            encodedMessage += 'c';\n        } else if (currentLetter === 'e') {\n            encodedMessage += 'g';\n        } else if (currentLetter === 'i') {\n            encodedMessage += 'k';\n        } else if (currentLetter === 'o') {\n            encodedMessage += 'q';\n        } else if (currentLetter === 'u') {\n            encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpnfx9m4wz.js:38:12)\n    at Object.<anonymous> (/tmp/tmpnfx9m4wz.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333711
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let encodedMessage = '';\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const vowels = 'aeiou';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const isUpperCase = letter === letter.toUpperCase();\n    const lowerCaseLetter = letter.toLowerCase();\n    if (vowels.includes(lowerCaseLetter)) {\n      const index = alphabet.indexOf(lowerCaseLetter);\n      const newLetter = alphabet[index + 2];\n      encodedMessage += isUpperCase ? newLetter.toUpperCase() : newLetter;\n    } else {\n      encodedMessage += isUpperCase ? lowerCaseLetter.toUpperCase() : lowerCaseLetter;\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode('Hello World')); // 'Jgnnq Yqtnf'\nconsole.log(encode('abcdefghijklmnopqrstuvwxyz')); // 'cdefghijklmnopqrstuvwxyzab'\nconsole.log(encode('ABCDEFGHIJKLMNOPQRSTUVWXYZ')); // 'CDEFGHIJKLMNOPQRSTUVWXYZAB'\nconsole.log(encode('The quick brown fox jumps over the lazy dog.')); // 'Wkh txlfn eurzq ira mxpsv ryhu wkh odcb grj.'\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TGST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpaqd20lt_.js:33:12)\n    at Object.<anonymous> (/tmp/tmpaqd20lt_.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TGST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "Hgllq Wqrld\ncbcdgfghkjklmnqpqrstwvwxyz\nCBCDGFGHKJKLMNQPQRSTWVWXYZ\nThg qwkck brqwn fqx jwmps qvgr thg lczy dqg.\n",
      "timestamp": 1660333711
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (char === 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e') {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n            encodedMessage += 'k';\n        } else if (char === 'o') {\n            encodedMessage += 'q';\n        } else if (char === 'u') {\n            encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('Hello World!'));\nconsole.log(encode('I am a student at Holberton'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpml0tbyep.js:40:12)\n    at Object.<anonymous> (/tmp/tmpml0tbyep.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hEgLLOq wOqRLD!\ni AcM Ac STUwDEgNT AcT hOqLBEgRTOqN\n",
      "timestamp": 1660333711
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let result: string = '';\n    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            result += char.toLowerCase();\n        } else {\n            result += char.toUpperCase();\n        }\n        if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n            result = result.slice(0, result.length - 1) + 'c';\n        }\n    }\n    return result;\n}\n\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('abcdefghijklmnopqrstuvwxyz') === 'BCDcFGHJKLMNOPQRSTUVWXYZa');\nconsole.log(encode('ABCDEFGHIJKLMNOPQRSTUVWXYZ') === 'bcdCFGHJKLMNOPQRSTUVWXYZa');\nconsole.log(encode('The quick brown fox jumps over the lazy dog') === 'tHE qCICK bROWN fOX jUMPS oVER tHE lAZY dOG');\nconsole.log(encode('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG') === 'tHE qCICK bROWN fOX jUMPS oVER tHE lAZY dOG');\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpve7lk5ml.js:32:12)\n    at Object.<anonymous> (/tmp/tmpve7lk5ml.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hcLLc wcRLD\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660333711
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let result: string = '';\n    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            result += char.toLowerCase();\n        } else {\n            result += char.toUpperCase();\n        }\n        if (char === 'a') {\n            result = result.slice(0, result.length - 1) + 'c';\n        } else if (char === 'e') {\n            result = result.slice(0, result.length - 1) + 'g';\n        } else if (char === 'i') {\n            result = result.slice(0, result.length - 1) + 'k';\n        } else if (char === 'o') {\n            result = result.slice(0, result.length - 1) + 'm';\n        } else if (char === 'u') {\n            result = result.slice(0, result.length - 1) + 'o';\n        }\n    }\n    return result;\n}\n\nconsole.log(encode('Hello World!')); // Hlll Ccckq!\nconsole.log(encode('Hello World!') === 'Hlll Ccckq!');\nconsole.log(encode('abcdefghijklmnopqrstuvwxyz')); // cdefghijklmnopqrstuvwxyzb\nconsole.log(encode('abcdefghijklmnopqrstuvwxyz') === 'cdefghijklmnopqrstuvwxyzb');\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp78hokgb_.js:42:12)\n    at Object.<anonymous> (/tmp/tmp78hokgb_.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hgLLm wmRLD!\nfalse\ncBCDgFGHkJKLMNmPQRSToVWXYZ\nfalse\n",
      "timestamp": 1660333711
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n        } else {\n            char = char.toUpperCase();\n        }\n        if (char === 'a') {\n            char = 'c';\n        } else if (char === 'e') {\n            char = 'g';\n        } else if (char === 'i') {\n            char = 'k';\n        } else if (char === 'o') {\n            char = 'q';\n        } else if (char === 'u') {\n            char = 'y';\n        }\n        encodedMessage += char;\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(en\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0bhxwaau.ts(48,1): error TS1005: ',' expected.\n../../../../tmp/tmp0bhxwaau.ts(48,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333711
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    for (let i = 0; i < message.length; i++) {\n        const letter = message[i];\n        if (letter === letter.toUpperCase()) {\n            encodedMessage += letter.toLowerCase();\n        } else {\n            encodedMessage += letter.toUpperCase();\n        }\n        if (vowels.includes(letter)) {\n            const index = vowels.indexOf(letter);\n            encodedMessage += vowels[(index + 2) % vowels.length];\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOr\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpx4habdg7.ts(42,49): error TS1002: Unterminated string literal.\n../../../../tmp/tmpx4habdg7.ts(43,1): error TS1005: ',' expected.\n../../../../tmp/tmpx4habdg7.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333711
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n      encodedMessage += char.toLowerCase();\n    } else {\n      encodedMessage += char.toUpperCase();\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!!\"));\nconsole.log(encode(\"Hello World!!!\"));\nconsole.log(encode(\"Hello World!!!!\"));\nconsole.log(encode(\"Hello World!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(encode(\"Hello World!!!!!!!!!!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(encode\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmptvzu9zcs.ts(50,1): error TS1005: ',' expected.\n../../../../tmp/tmptvzu9zcs.ts(50,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333711
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        let currentChar = message[i];\n        if (currentChar === currentChar.toUpperCase()) {\n            encodedMessage += currentChar.toLowerCase();\n        } else {\n            encodedMessage += currentChar.toUpperCase();\n        }\n        if (currentChar === 'a') {\n            encodedMessage += 'c';\n        } else if (currentChar === 'e') {\n            encodedMessage += 'g';\n        } else if (currentChar === 'i') {\n            encodedMessage += 'k';\n        } else if (currentChar === 'o') {\n            encodedMessage += 'q';\n        } else if (currentChar === 'u') {\n            encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO w\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplmg508ze.ts(46,47): error TS1002: Unterminated string literal.\n../../../../tmp/tmplmg508ze.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmplmg508ze.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333711
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let result: string = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            result += char.toLowerCase();\n        } else {\n            result += char.toUpperCase();\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp0t5ic1dn.js:23:12)\n    at Object.<anonymous> (/tmp/tmp0t5ic1dn.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333708
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    let encoded = '';\n    for (let i = 0; i < message.length; i++) {\n        const letter = message[i];\n        const index = alphabet.indexOf(letter.toLowerCase());\n        if (index === -1) {\n            encoded += letter;\n        } else if (vowels.includes(letter.toLowerCase())) {\n            encoded += alphabet[(index + 2) % 26];\n        } else {\n            encoded += alphabet[index].toUpperCase();\n        }\n    }\n    return encoded;\n}\n\nconsole.log(encode('hello')); // jgnnq\nconsole.log(encode('HELLO')); // JGNNQ\nconsole.log(encode('Hello World')); // Jgnnq Yqtnf\nconsole.log(encode('Hello World!')); // Jgnnq Yqtnf!\nconsole.log(encode('Hello World!')); // Jgnnq Yqtnf!\nconsole.log(encode('Hello World!')); // Jgnnq Yqtnf!\nconsole.log(encode('Hello World!')); // Jgnnq Yqtnf!\nconsole.log(encode('Hello World!')); // Jgnnq Yqtnf!\nconsole.log(encode('Hello World!')); // Jgnnq Yqtnf!\nconsole.log(encode('Hello World!')); // Jgnnq Yqtnf!\nconsole.log(encode('Hello World!')); // Jgnnq Yqtnf!\nconsole.log(encode('Hello World!')); // Jgnnq Yqtnf!\nconsole.log(encode('Hello World!')); // Jgnnq Yqtnf!\nconsole.log(encode('Hello World!')); // Jgnnq Yqtnf!\nconsole.log(encode('Hello World!')); // Jgnnq Yqtnf!\nconsole.log(en\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9ljbd_24.ts(41,1): error TS1005: ',' expected.\n../../../../tmp/tmp9ljbd_24.ts(41,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333711
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let currentChar = message[i];\n        if (currentChar === currentChar.toUpperCase()) {\n            encodedMessage += currentChar.toLowerCase();\n        } else {\n            encodedMessage += currentChar.toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode(\"Hello\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp6dv74a6d.js:26:12)\n    at Object.<anonymous> (/tmp/tmp6dv74a6d.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO\nhELLO wORLD\nhELLO wORLD!\n",
      "timestamp": 1660333711
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let encodedMessage = '';\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  for (let i = 0; i < message.length; i++) {\n    let currentChar = message[i];\n    if (vowels.includes(currentChar)) {\n      let index = vowels.indexOf(currentChar);\n      let newIndex = index + 2;\n      if (newIndex > 4) {\n        newIndex = newIndex - 5;\n      }\n      encodedMessage += vowels[newIndex];\n    } else if (currentChar === currentChar.toUpperCase()) {\n      encodedMessage += currentChar.toLowerCase();\n    } else {\n      encodedMessage += currentChar.toUpperCase();\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode('hello')); // 'jgnnq'\nconsole.log(encode('HELLO')); // 'jgnnq'\nconsole.log(encode('hello world')); // 'jgnnq yqtnf'\nconsole.log(encode('HELLO WORLD')); // 'jgnnq yqtnf'\nconsole.log(encode('abcdefghijklmnopqrstuvwxyz')); // 'cdefghijklmnopqrstuvwxyzab'\nconsole.log(encode('ABCDEFGHIJKLMNOPQRSTUVWXYZ')); // 'cdefghijklmnopqrstuvwxyzab'\nconsole.log(encode('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')); // 'cdefghijklmnopqrstuvwxyzabCDEFGHIJKLMNOPQRSTUVWXYZ'\nconsole.log(encode('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789')); // 'cdefghijklmnopqrstuvwxyzabCDEFGHIJKLMNOPQRSTUVWXYZ\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpjj73vidf.js:40:12)\n    at Object.<anonymous> (/tmp/tmpjj73vidf.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "HoLLa\nhello\nHoLLa WaRLD\nhello world\niBCDoFGHuJKLMNaPQRSTeVWXYZ\nabcdefghijklmnopqrstuvwxyz\niBCDoFGHuJKLMNaPQRSTeVWXYZabcdefghijklmnopqrstuvwxyz\niBCDoFGHuJKLMNaPQRSTeVWXYZabcdefghijklmnopqrstuvwxyz0123456789\n",
      "timestamp": 1660333711
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (char === 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e') {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n            encodedMessage += 'k';\n        } else if (char === 'o') {\n            encodedMessage += 'q';\n        } else if (char === 'u') {\n            encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode('Hello World') === 'hEllO wOrld');\nconsole.log(encode\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqmtkxcrt.ts(48,1): error TS1005: ',' expected.\n../../../../tmp/tmpqmtkxcrt.ts(48,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333689
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp6elnzra1.js:58:12)\n    at Object.<anonymous> (/tmp/tmp6elnzra1.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\n",
      "timestamp": 1660333693
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        let isUpperCase = letter === letter.toUpperCase();\n        let isLowerCase = letter === letter.toLowerCase();\n        if (isUpperCase) {\n            let index = alphabet.indexOf(letter.toLowerCase());\n            encodedMessage += alphabet[index + 2].toUpperCase();\n        } else if (isLowerCase) {\n            let index = alphabet.indexOf(letter);\n            encodedMessage += alphabet[index + 2];\n        } else {\n            encodedMessage += letter;\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('Hello World')); // Jgnnq Yqtnf\nconsole.log(encode('Hello World!')); // Jgnnq Yqtnf!\nconsole.log(encode('Hello World!?')); // Jgnnq Yqtnf!?\nconsole.log(encode('Hello World!?')); // Jgnnq Yqtnf!?\nconsole.log(encode('Hello World!?')); // Jgnnq Yqtnf!?\nconsole.log(encode('Hello World!?')); // Jgnnq Yqtnf!?\nconsole.log(encode('Hello World!?')); // Jgnnq Yqtnf!?\nconsole.log(encode('Hello World!?')); // Jgnnq Yqtnf!?\nconsole.log(encode('Hello World!?')); // Jgnnq Yqtnf!?\nconsole.log(encode('Hello World!?')); // Jgnnq Yqtnf!?\nconsole.log(encode('Hello World!?')); // Jgnnq Yqtnf!?\nconsole.log(encode('Hello World!?')); // Jgnnq Yqtnf!?\nconsole.log(encode('Hello World!?')); // Jgnnq Yqtnf!?\nconsole.log(encode('Hello World!?')); // Jgnnq Yqtnf!?\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp_vaj4xa4.js:45:12)\n    at Object.<anonymous> (/tmp/tmp_vaj4xa4.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "JgnnqBYqtnf\nJgnnqBYqtnfB\nJgnnqBYqtnfBB\nJgnnqBYqtnfBB\nJgnnqBYqtnfBB\nJgnnqBYqtnfBB\nJgnnqBYqtnfBB\nJgnnqBYqtnfBB\nJgnnqBYqtnfBB\nJgnnqBYqtnfBB\nJgnnqBYqtnfBB\nJgnnqBYqtnfBB\nJgnnqBYqtnfBB\nJgnnqBYqtnfBB\n",
      "timestamp": 1660333712
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encoded = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            encoded += char.toLowerCase();\n        } else {\n            encoded += char.toUpperCase();\n        }\n        if (char === 'a') {\n            encoded += 'c';\n        } else if (char === 'e') {\n            encoded += 'g';\n        } else if (char === 'i') {\n            encoded += 'k';\n        } else if (char === 'o') {\n            encoded += 'q';\n        } else if (char === 'u') {\n            encoded += 'w';\n        }\n    }\n    return encoded;\n}\n\nconsole.log(encode('Hello World'));\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('Hello World') === 'hELLO\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3jq9hw3u.ts(47,45): error TS1002: Unterminated string literal.\n../../../../tmp/tmp3jq9hw3u.ts(48,1): error TS1005: ',' expected.\n../../../../tmp/tmp3jq9hw3u.ts(48,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333712
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (char === 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e') {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n            encodedMessage += 'k';\n        } else if (char === 'o') {\n            encodedMessage += 'q';\n        } else if (char === 'u') {\n            encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!') === 'hELLO wORLD!cgkkqkc');\nconsole.log(encode('This is a test') === 'tHIS IS A TESTcgkkqkc');\nconsole.log(encode('This is a test'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpijn0sohi.js:42:12)\n    at Object.<anonymous> (/tmp/tmpijn0sohi.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hEgLLOq wOqRLD!\nfalse\nfalse\ntHIkS IkS Ac TEgST\n",
      "timestamp": 1660333713
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (char === 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e') {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n            encodedMessage += 'k';\n        } else if (char === 'o') {\n            encodedMessage += 'q';\n        } else if (char === 'u') {\n            encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('Hello World!'));\nconsole.log(encode('Hello World!') === 'hELLO wORLD!cgkqw');\nconsole.log(encode('Hello World!') === 'hELLO wORLD!cgkqw');\nconsole.log(encode('Hello World!') === 'hELLO wORLD!cgkqw');\nconsole.log(encode('Hello World!') === 'hELLO wORLD!cgkqw');\nconsole.log(encode('Hello World!') === 'hELLO wORLD!cgkqw');\nconsole.log(encode('Hello World!') === 'hELLO wORLD!cgkqw');\nconsole.log(encode('Hello World!') === 'hELLO wORLD!cgkqw');\nconsole.log(encode('Hello World!') === 'hELLO wORLD!cgkqw');\nconsole.log(encode('Hello World!') === 'hELLO wORLD!cgkqw');\nconsole.log(encode('Hello World!') === 'hELLO wORLD!cgkqw');\nconsole.log(encode('Hello World!') === 'hELLO wORLD!cgkqw');\nconsole.log(encode('Hello\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpfc0szmor.ts(43,26): error TS1002: Unterminated string literal.\n../../../../tmp/tmpfc0szmor.ts(44,1): error TS1005: ',' expected.\n../../../../tmp/tmpfc0szmor.ts(44,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333712
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let result: string = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            result += char.toLowerCase();\n        } else {\n            result += char.toUpperCase();\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp0t5ic1dn.js:23:12)\n    at Object.<anonymous> (/tmp/tmp0t5ic1dn.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333708
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (char === 'a') {\n            encodedMessage += 'c';\n        } else if (char === 'e') {\n            encodedMessage += 'g';\n        } else if (char === 'i') {\n            encodedMessage += 'k';\n        } else if (char === 'o') {\n            encodedMessage += 'q';\n        } else if (char === 'u') {\n            encodedMessage += 'w';\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World!')); // hELLO wORLD!\nconsole.log(encode('Hello World!?!')); // hELLO wORLD!?!\nconsole.log(encode('Hello World!?!?')); // hELLO wORLD!?!?\nconsole.log(encode('Hello World!?!?!')); // hELLO wORLD!?!?!\nconsole.log(encode('Hello World!?!?!?')); // hELLO wORLD!?!?!?\nconsole.log(encode('Hello World!?!?!?!')); // hELLO wORLD!?!?!?!\nconsole.log(encode('Hello World!?!?!?!?')); // hELLO wORLD!?!?!?!?\nconsole.log(encode('Hello World!?!?!?!?!')); // hELLO wORLD!?!?!?!?!\nconsole.log(encode('Hello World!?!?!?!?!?')); // hELLO wORLD!?!?!?!?!?\nconsole.log(encode('Hello World!?!?!?!?!?!')); // hELLO wORLD!?!?!?!?!?!\nconsole.log(encode('Hello World!?!?!?!?!?!?')); // hELLO wORLD!?!?!?!?!?!?\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpe2gz8s4b.js:51:12)\n    at Object.<anonymous> (/tmp/tmpe2gz8s4b.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hEgLLOq wOqRLD\nhEgLLOq wOqRLD!\nhEgLLOq wOqRLD!?!\nhEgLLOq wOqRLD!?!?\nhEgLLOq wOqRLD!?!?!\nhEgLLOq wOqRLD!?!?!?\nhEgLLOq wOqRLD!?!?!?!\nhEgLLOq wOqRLD!?!?!?!?\nhEgLLOq wOqRLD!?!?!?!?!\nhEgLLOq wOqRLD!?!?!?!?!?\nhEgLLOq wOqRLD!?!?!?!?!?!\nhEgLLOq wOqRLD!?!?!?!?!?!?\n",
      "timestamp": 1660333713
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i = 0; i < message.length; i++) {\n        let currentLetter = message[i];\n        let currentLetterIndex = alphabet.indexOf(currentLetter.toLowerCase());\n        if (currentLetterIndex === -1) {\n            encodedMessage += currentLetter;\n        } else {\n            let newLetterIndex = currentLetterIndex + 2;\n            if (newLetterIndex >= alphabet.length) {\n                newLetterIndex -= alphabet.length;\n            }\n            let newLetter = alphabet[newLetterIndex];\n            if (currentLetter === currentLetter.toUpperCase()) {\n                newLetter = newLetter.toUpperCase();\n            }\n            encodedMessage += newLetter;\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode(\"Hello\")); // Jgnnq\nconsole.log(encode(\"abcdefghijklmnopqrstuvwxyz\")); // cdefghijklmnopqrstuvwxyzab\nconsole.log(encode(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")); // CDEFGHIJKLMNOPQRSTUVWXYZAB\nconsole.log(encode(\"The quick brown fox jumps over the lazy dog.\")); // Vjg swkem dtqyp hqz lworu vjg ncba fqi.\nconsole.log(encode(\"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.\")); // VJG SWKEM DTQYP HQZ LWORU VJG NCBA FQI.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp8f889iu1.js:38:12)\n    at Object.<anonymous> (/tmp/tmp8f889iu1.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "Jgnnq\ncdefghijklmnopqrstuvwxyzab\nCDEFGHIJKLMNOPQRSTUVWXYZAB\nVjg swkem dtqyp hqz lworu qxgt vjg ncba fqi.\nVJG SWKEM DTQYP HQZ LWORU QXGT VJG NCBA FQI.\n",
      "timestamp": 1660333713
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode(\"Hello\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World! How are you?\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmprhyjmdwy.js:27:12)\n    at Object.<anonymous> (/tmp/tmprhyjmdwy.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO\nhELLO wORLD\nhELLO wORLD!\nhELLO wORLD! hOW ARE YOU?\n",
      "timestamp": 1660333713
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        const char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode(\"Hello\"));\nconsole.log(encode(\"Hello World\"));\nconsole.log(encode(\"Hello World!\"));\nconsole.log(encode(\"Hello World!!!\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpldsihb_y.js:27:12)\n    at Object.<anonymous> (/tmp/tmpldsihb_y.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO\nhELLO wORLD\nhELLO wORLD!\nhELLO wORLD!!!\n",
      "timestamp": 1660333713
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n  let encodedMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    const char = message[i];\n    const isUpperCase = char === char.toUpperCase();\n    const isLowerCase = char === char.toLowerCase();\n    const isLetter = isUpperCase || isLowerCase;\n    if (isLetter) {\n      const charCode = char.charCodeAt(0);\n      const isVowel = 'aeiou'.includes(char.toLowerCase());\n      if (isVowel) {\n        const newCharCode = charCode + 2;\n        const newChar = String.fromCharCode(newCharCode);\n        encodedMessage += newChar;\n      } else {\n        const newCharCode = charCode + 1;\n        const newChar = String.fromCharCode(newCharCode);\n        encodedMessage += newChar;\n      }\n    } else {\n      encodedMessage += char;\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode('Hello World')); // 'Ifmmp Xpsme'\nconsole.log(encode('Hello World!')); // 'Ifmmp Xpsme!'\nconsole.log(encode('Hello World!?')); // 'Ifmmp Xpsme!?'\nconsole.log(encode('Hello World!?!')); // 'Ifmmp Xpsme!?!'\nconsole.log(encode('Hello World!?!?')); // 'Ifmmp Xpsme!?!?'\nconsole.log(encode('Hello World!?!?!')); // 'Ifmmp Xpsme!?!?!'\nconsole.log(encode('Hello World!?!?!?')); // 'Ifmmp Xpsme!?!?!?'\nconsole.log(encode('Hello World!?!?!?!')); // 'Ifmmp Xpsme!?!?!?!'\nconsole.log(encode('Hello World!?!?!?!?')); // 'Ifmmp Xpsme!?!?!?!?'\nconsole.log(encode('Hello World!?!?!?!?!')); // 'Ifmmp Xpsme!?!?!?!?!'\nconsole.log(encode('Hello World!\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpig81ifr9.ts(43,33): error TS1002: Unterminated string literal.\n../../../../tmp/tmpig81ifr9.ts(44,1): error TS1005: ',' expected.\n../../../../tmp/tmpig81ifr9.ts(44,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333713
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\nfunction encode(message: string): string {\n    let encodedMessage = '';\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    for (let i = 0; i < message.length; i++) {\n        const currentLetter = message[i];\n        if (vowels.includes(currentLetter)) {\n            const index = vowels.indexOf(currentLetter);\n            encodedMessage += vowels[(index + 2) % vowels.length];\n        } else if (currentLetter === currentLetter.toUpperCase()) {\n            encodedMessage += currentLetter.toLowerCase();\n        } else {\n            encodedMessage += currentLetter.toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('Hello World')); // hELLO wORLD\nconsole.log(encode('Hello World') === 'hELLO wORLD');\nconsole.log(encode('abcdefghijklmnopqrstuvwxyz')); // cdefghijklmnopqrstuvwxyzab\nconsole.log(encode('abcdefghijklmnopqrstuvwxyz') === 'cdefghijklmnopqrstuvwxyzab');\nconsole.log(encode('ABCDEFGHIJKLMNOPQRSTUVWXYZ')); // CDEFGHIJKLMNOPQRSTUVWXYZAB\nconsole.log(encode('ABCDEFGHIJKLMNOPQRSTUVWXYZ') === 'CDEFGHIJKLMNOPQRSTUVWXYZAB');\nconsole.log(encode('The Quick Brown Fox Jumps Over The Lazy Dog')); // vJNX fXOWM eBPXJ vJNX rNFSH rJ DYB\nconsole.log(encode('The Quick Brown Fox Jumps Over The Lazy Dog') === 'vJNX fXOWM eBPXJ vJNX rNFSH rJ DYB');\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp8e1v8uj2.js:36:12)\n    at Object.<anonymous> (/tmp/tmp8e1v8uj2.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hoLLa waRLD\nfalse\niBCDoFGHuJKLMNaPQRSTeVWXYZ\nfalse\nabcdefghijklmnopqrstuvwxyz\nfalse\ntHo qeuCK bRaWN faX jeMPS oVoR tHo liZY daG\nfalse\n",
      "timestamp": 1660333713
    }
  ]
}