{
  "language": "ts",
  "name": "HumanEval_111_histogram",
  "results": [
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxKeys: string[] = [];\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxKeys = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxKeys.push(test[i]);\n        }\n    }\n    return {[maxKeys.join('')]: max};\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpd0fc8bvm.js:29:12)\n    at Object.<anonymous> (/tmp/tmpd0fc8bvm.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334922
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\n\nconsole.log(histogram('hello'));\nconsole.log(histogram('world'));\nconsole.log(histogram('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpglt0cxwo.ts(27,1216): error TS1002: Unterminated string literal.\n../../../../tmp/tmpglt0cxwo.ts(28,1): error TS1005: ',' expected.\n../../../../tmp/tmpglt0cxwo.ts(28,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334922
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetter: string = '';\n    for (let i: number = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetter = test[i];\n        }\n    }\n    for (let key in result) {\n        if (result[key] !== max) {\n            delete result[key];\n        }\n    }\n    return result;\n}\nconsole.log(histogram('aabbbcccc')); // {a: 2, b: 3, c: 4}\nconsole.log(histogram('aabbbccccdddd')); // {d: 4}\nconsole.log(histogram('aabbbccccddddeeeee')); // {e: 5}\nconsole.log(histogram('aabbbccccddddeeeeeffffff')); // {f: 6}\nconsole.log(histogram('aabbbccccddddeeeeeffffffgggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpp6iklxow.ts(31,470): error TS1002: Unterminated string literal.\n../../../../tmp/tmpp6iklxow.ts(32,1): error TS1005: ',' expected.\n../../../../tmp/tmpp6iklxow.ts(32,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334922
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let dict: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxKey: string = '';\n    let maxKeys: string[] = [];\n    for (let i = 0; i < test.length; i++) {\n        if (dict[test[i]]) {\n            dict[test[i]]++;\n        } else {\n            dict[test[i]] = 1;\n        }\n        if (dict[test[i]] > max) {\n            max = dict[test[i]];\n            maxKey = test[i];\n            maxKeys = [maxKey];\n        } else if (dict[test[i]] === max) {\n            maxKeys.push(test[i]);\n        }\n    }\n    return {[maxKey]: max};\n}\n\nconsole.log(histogram('aabbcc')); // {a: 2, b: 2, c: 2}\nconsole.log(histogram('abbccc')); // {c: 3}\nconsole.log(histogram('abbcccdddd')); // {d: 4}\nconsole.log(histogram('abbcccddddeeee')); // {e: 4}\nconsole.log(histogram('abbcccddddeeeeeeeeee')); // {e: 10}\nconsole.log(histogram('abbcccddddeeeeeeeeeeffffff')); // {f: 6}\nconsole.log(histogram('abbcccddddeeeeeeeeeeffffffgggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpde9au_lf.ts(33,376): error TS1002: Unterminated string literal.\n../../../../tmp/tmpde9au_lf.ts(34,1): error TS1005: ',' expected.\n../../../../tmp/tmpde9au_lf.ts(34,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334922
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i: number = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\n\nconsole.log(histogram('aabbbcccc')); // {c: 4}\nconsole.log(histogram('aabbbccccdddd')); // {d: 4}\nconsole.log(histogram('aabbbccccddddeeeeeeeeeeee')); // {e: 12}\nconsole.log(histogram('aabbbccccddddeeeeeeeeeeeeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwfbdmkdc.ts(28,1001): error TS1002: Unterminated string literal.\n../../../../tmp/tmpwfbdmkdc.ts(29,1): error TS1005: ',' expected.\n../../../../tmp/tmpwfbdmkdc.ts(29,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334922
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    for (let i: number = 0; i < test.length; i++) {\n        if (result[test[i]] === undefined) {\n            result[test[i]] = 1;\n        } else {\n            result[test[i]]++;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n        }\n    }\n    for (let key in result) {\n        if (result[key] < max) {\n            delete result[key];\n        }\n    }\n    return result;\n}\nconsole.log(histogram(\"aabbbccc\"));\nconsole.log(histogram(\"aabbbcccdddd\"));\nconsole.log(histogram(\"aabbbcccddddeeee\"));\nconsole.log(histogram(\"aabbbcccddddeeeeffff\"));\nconsole.log(histogram(\"aabbbcccddddeeeeffffgggg\"));\nconsole.log(histogram(\"aabbbcccddddeeeeffffgggghhhhh\"));\nconsole.log(histogram(\"aabbbcccddddeeeeffffgggghhhhhiiii\"));\nconsole.log(histogram(\"aabbbcccddddeeeeffffgggghhhhhiiiiiiii\"));\nconsole.log(histogram(\"aabbbcccddddeeeeffffgggghhhhhiiiiiiiijjjj\"));\nconsole.log(histogram(\"aabbbcccddddeeeeffffgggghhhhhiiiiiiiijjjjkkkk\"));\nconsole.log(histogram(\"aabbbcccddddeeeeffffgggghhhhhiiiiiiiijjjjkkkkllll\"));\nconsole.log(histogram(\"aabbbcccddddeeeeffffgggghhhhhiiiiiiiijjjjkkkkllllmmmm\"));\nconsole.log(histogram(\"aabbbcccddddeeeeffffgggghhhhhiiiiiiiijjjjkkkkllllmmmmnnnn\"));\nconsole.log(histogram(\"aabbbcccddddeeeeffffgggghhhhhiiiiii\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpm3jvfzcq.ts(38,59): error TS1002: Unterminated string literal.\n../../../../tmp/tmpm3jvfzcq.ts(39,1): error TS1005: ',' expected.\n../../../../tmp/tmpm3jvfzcq.ts(39,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334922
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n  let result: {[key: string]: number} = {};\n  let max: number = 0;\n  let maxLetters: string[] = [];\n  for (let i = 0; i < test.length; i++) {\n    if (result[test[i]]) {\n      result[test[i]]++;\n    } else {\n      result[test[i]] = 1;\n    }\n    if (result[test[i]] > max) {\n      max = result[test[i]];\n      maxLetters = [test[i]];\n    } else if (result[test[i]] === max) {\n      maxLetters.push(test[i]);\n    }\n  }\n  return {[maxLetters.join('')]: max};\n}\nconsole.log(histogram('aabbbcc')); // {a: 2, b: 3, c: 2}\nconsole.log(histogram('abbccc')); // {a: 1, b: 2, c: 3}\nconsole.log(histogram('abc')); // {a: 1, b: 1, c: 1}\nconsole.log(histogram('aabbccdd')); // {a: 2, b: 2, c: 2, d: 2}\nconsole.log(histogram('aabbccdde')); // {a: 2, b: 2, c: 2, d: 2, e: 1}\nconsole.log(histogram('aabbccddee')); // {a: 2, b: 2, c: 2, d: 2, e: 2}\nconsole.log(histogram('aabbccddeeff')); // {a: 2, b: 2, c: 2, d: 2, e: 2, f: 2}\nconsole.log(histogram('aabbccddeeffgg')); // {a: 2, b: 2, c: 2, d: 2, e: 2, f: 2, g: 2}\nconsole.log(histogram('aabbccddeeffgghh')); // {a: 2, b: 2, c: 2, d: 2, e: 2, f: 2, g: 2, h: 2}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmp_90f_qaw.js:38:12)\n    at Object.<anonymous> (/tmp/tmp_90f_qaw.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "{ b: 3 }\n{ c: 3 }\n{ abc: 1 }\n{ abcd: 2 }\n{ abcd: 2 }\n{ abcde: 2 }\n{ abcdef: 2 }\n{ abcdefg: 2 }\n{ abcdefgh: 2 }\n",
      "timestamp": 1660334922
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\n\nconsole.log(histogram('aabbbccc'));\nconsole.log(histogram('aabbbcccdddd'));\nconsole.log(histogram('aabbbcccddddeeeee'));\nconsole.log(histogram('aabbbcccddddeeeeeffffff'));\nconsole.log(histogram('aabbbcccddddeeeeeffffffgggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpu_7ljw17.ts(29,521): error TS1002: Unterminated string literal.\n../../../../tmp/tmpu_7ljw17.ts(30,1): error TS1005: ',' expected.\n../../../../tmp/tmpu_7ljw17.ts(30,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334922
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\n\nconsole.log(histogram('aabbccdddd')); // {d: 4}\nconsole.log(histogram('aabbccddddeeee')); // {e: 4}\nconsole.log(histogram('aabbccddddeeeefffff')); // {f: 5}\nconsole.log(histogram('aabbccddddeeeefffffgggg')); // {g: 5}\nconsole.log(histogram('aabbccddddeeeefffffgggggggg')); // {g: 7}\nconsole.log(histogram('aabbccddddeeeefffffgggggggghhhhh')); // {h: 8}\nconsole.log(histogram('aabbccddddeeeefffffgggggggghhhhhiiii')); // {i: 9}\nconsole.log(histogram('aabbccddddeeeefffffgggggggghhhhhiiiiiiii')); // {i: 10}\nconsole.log(histogram('aabbccddddeeeefffffgggggggghhhhhiiiiiiiijjjjjjjj')); // {j: 10}\nconsole.log(histogram('aabbccddddeeeefffffgggggggghhhhhiiiiiiiijjjjjjjjkkkkkkkk')); // {k: 12}\nconsole.log(histogram('aabbccddddeeeefffffgggggggghhhhhiiiiiiiijjjjjjjjkk\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpc81y43uk.ts(35,74): error TS1002: Unterminated string literal.\n../../../../tmp/tmpc81y43uk.ts(36,1): error TS1005: ',' expected.\n../../../../tmp/tmpc81y43uk.ts(36,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334922
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result = {};\n    let max = 0;\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n        }\n    }\n    for (let key in result) {\n        if (result[key] < max) {\n            delete result[key];\n        }\n    }\n    return result;\n}\n\nconsole.log(histogram(\"abccccccc\")); // {c: 8}\nconsole.log(histogram(\"aabbbccc\")); // {a: 2, b: 3, c: 3}\nconsole.log(histogram(\"aaabbbccc\")); // {a: 3, b: 3, c: 3}\nconsole.log(histogram(\"aaabbbcccdddd\")); // {d: 4}\nconsole.log(histogram(\"aaabbbcccddddeeeeeeee\")); // {e: 9}\nconsole.log(histogram(\"aaabbbcccddddeeeeeeeeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpi4iacjy6.ts(31,933): error TS1002: Unterminated string literal.\n../../../../tmp/tmpi4iacjy6.ts(32,1): error TS1005: ',' expected.\n../../../../tmp/tmpi4iacjy6.ts(32,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334922
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxKeys: string[] = [];\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]] === undefined) {\n            result[test[i]] = 1;\n        } else {\n            result[test[i]]++;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxKeys = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxKeys.push(test[i]);\n        }\n    }\n    return {[maxKeys.join(\"\")]: max};\n}\n\nconsole.log(histogram(\"aabbbcccc\")); // {c: 4}\nconsole.log(histogram(\"aabbbccccdddd\")); // {d: 4}\nconsole.log(histogram(\"aabbbccccddddeeeeeeeeee\")); // {e: 10}\nconsole.log(histogram(\"aabbbccccddddeeeeeeeeeeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2jswe2bz.ts(28,1019): error TS1002: Unterminated string literal.\n../../../../tmp/tmp2jswe2bz.ts(29,1): error TS1005: ',' expected.\n../../../../tmp/tmp2jswe2bz.ts(29,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334922
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetter: string = '';\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetter = test[i];\n        }\n    }\n    let maxDict: {[key: string]: number} = {};\n    for (let key in result) {\n        if (result[key] === max) {\n            maxDict[key] = result[key];\n        }\n    }\n    return maxDict;\n}\n\nconsole.log(histogram('abccccc'));\nconsole.log(histogram('aabbb'));\nconsole.log(histogram('abc'));\nconsole.log(histogram('aabbccdddd'));\nconsole.log(histogram('aabbccddddeeeee'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpxgf2e367.js:37:12)\n    at Object.<anonymous> (/tmp/tmpxgf2e367.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "{ c: 5 }\n{ b: 3 }\n{ a: 1, b: 1, c: 1 }\n{ d: 4 }\n{ e: 5 }\n",
      "timestamp": 1660334922
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetter: string = '';\n    for (let i: number = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetter = test[i];\n        }\n    }\n    for (let key in result) {\n        if (result[key] !== max) {\n            delete result[key];\n        }\n    }\n    return result;\n}\n\nconsole.log(histogram('aaabbc')); // {a: 3, b: 2}\nconsole.log(histogram('aabbcc')); // {a: 2, b: 2, c: 2}\nconsole.log(histogram('aabbccddeeffgghh')); // {a: 2, b: 2, c: 2, d: 2, e: 2, f: 2, g: 2, h: 2}\nconsole.log(histogram('abcdefghijklmnopqrstuvwxyz')); // {a: 1, b: 1, c: 1, d: 1, e: 1, f: 1, g: 1, h: 1, i: 1, j: 1, k: 1, l: 1, m: 1, n: 1, o: 1, p: 1, q: 1, r: 1, s: 1, t: 1, u: 1, v: 1, w: 1, x: 1, y: 1, z: 1}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpirnu4wxs.js:35:12)\n    at Object.<anonymous> (/tmp/tmpirnu4wxs.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "{ a: 3 }\n{ a: 2, b: 2, c: 2 }\n{ a: 2, b: 2, c: 2, d: 2, e: 2, f: 2, g: 2, h: 2 }\n{\n  a: 1,\n  b: 1,\n  c: 1,\n  d: 1,\n  e: 1,\n  f: 1,\n  g: 1,\n  h: 1,\n  i: 1,\n  j: 1,\n  k: 1,\n  l: 1,\n  m: 1,\n  n: 1,\n  o: 1,\n  p: 1,\n  q: 1,\n  r: 1,\n  s: 1,\n  t: 1,\n  u: 1,\n  v: 1,\n  w: 1,\n  x: 1,\n  y: 1,\n  z: 1\n}\n",
      "timestamp": 1660334922
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\n\nconsole.log(histogram('aabbccdddd')); // {d: 4}\nconsole.log(histogram('aabbccddddee')); // {d: 4}\nconsole.log(histogram('aabbccddddeeee')); // {de: 4}\nconsole.log(histogram('aabbccddddeeeeff')); // {e: 4}\nconsole.log(histogram('aabbccddddeeeeffff')); // {e: 4}\nconsole.log(histogram('aabbccddddeeeeffffgg')); // {e: 4}\nconsole.log(histogram('aabbccddddeeeeffffgggg')); // {e: 4}\nconsole.log(histogram('aabbccddddeeeeffffgggggg')); // {e: 4}\nconsole.log(histogram('aabbccddddeeeeffffgggggggg')); // {e: 4}\nconsole.log(histogram('aabbccddddeeeeffffgggggggggg')); // {e: 4}\nconsole.log(histogram('aabbccddddeeeeffffgggggggggggg')); // {e: 4}\nconsole.log(histogram('aabbccddddeeeeffffgggggggggggggg')); // {e: 4}\nconsole.log(histogram('aabbccddddeeeeffffgggggggggggggggg')); // {e\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmp5qktgzhr.js:42:12)\n    at Object.<anonymous> (/tmp/tmp5qktgzhr.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "{ d: 4 }\n{ d: 4 }\n{ de: 4 }\n{ de: 4 }\n{ def: 4 }\n{ def: 4 }\n{ defg: 4 }\n{ g: 6 }\n{ g: 8 }\n{ g: 10 }\n{ g: 12 }\n{ g: 14 }\n{ g: 16 }\n",
      "timestamp": 1660334922
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    let letters: string[] = test.split(' ');\n    for (let i: number = 0; i < letters.length; i++) {\n        if (result[letters[i]] === undefined) {\n            result[letters[i]] = 1;\n        } else {\n            result[letters[i]]++;\n        }\n        if (result[letters[i]] > max) {\n            max = result[letters[i]];\n            maxLetters = [];\n            maxLetters.push(letters[i]);\n        } else if (result[letters[i]] === max) {\n            maxLetters.push(letters[i]);\n        }\n    }\n    return {[maxLetters.join(', ')]: max};\n}\nconsole.log(histogram('a b c d e f'));\nconsole.log(histogram('a b c d e f a b c d e f a b c d e f'));\nconsole.log(histogram('a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpz8j1rfac.ts(28,525): error TS1002: Unterminated string literal.\n../../../../tmp/tmpz8j1rfac.ts(29,1): error TS1005: ',' expected.\n../../../../tmp/tmpz8j1rfac.ts(29,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334922
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i: number = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\n\nconsole.log(histogram('aabbbcccc'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmppad5cte8.js:30:12)\n    at Object.<anonymous> (/tmp/tmppad5cte8.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "{ c: 4 }\n",
      "timestamp": 1660334922
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxKeys: string[] = [];\n    for (let i: number = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxKeys = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxKeys.push(test[i]);\n        }\n    }\n    return {[maxKeys.join('')]: max};\n}\n\nconsole.log(histogram('aabbbcccc'));\nconsole.log(histogram('aabbcc'));\nconsole.log(histogram('aabbccdddd'));\nconsole.log(histogram('aabbccddddeeeee'));\nconsole.log(histogram('aabbccddddeeeeeffffff'));\nconsole.log(histogram('aabbccddddeeeeeffffffggggggg'));\nconsole.log(histogram('aabbccddddeeeeeffffffgggggggiiiiiiii'));\nconsole.log(histogram('aabbccddddeeeeeffffffgggggggiiiiiiiihhhhhhhh'));\nconsole.log(histogram('aabbccddddeeeeeffffffgggggggiiiiiiiihhhhhhhhjjjjjjjjjj'));\nconsole.log(histogram('aabbccddddeeeeeffffffgggggggiiiiiiiihhhhhhhhjjjjjjjjjjkkkkkkkkkkkk'));\nconsole.log(histogram('aabbccddddeeeeeffffffgggggggiiiiiiiihhhhhhhhjjjjjjjjjjkkkkkkkkkkkkllllllllllllll'));\nconsole.log(histogram('aabbccddddeeeeeffffffgggggggiiiiiiiihhhhhhhhjjjjjjjjjjkkkkkkkkkkkkllllllllllllllmmmmmmmmmmmmmmmmmm')\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9higbius.ts(37,1): error TS1005: ',' expected.\n../../../../tmp/tmp9higbius.ts(37,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334922
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let hist: {[key: string]: number} = {};\n    for (let i = 0; i < test.length; i++) {\n        if (hist[test[i]]) {\n            hist[test[i]]++;\n        } else {\n            hist[test[i]] = 1;\n        }\n    }\n    return hist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpd9g8slnb.js:20:12)\n    at Object.<anonymous> (/tmp/tmpd9g8slnb.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334922
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let dict: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i = 0; i < test.length; i++) {\n        if (dict[test[i]]) {\n            dict[test[i]] += 1;\n        } else {\n            dict[test[i]] = 1;\n        }\n        if (dict[test[i]] > max) {\n            max = dict[test[i]];\n            maxLetters = [test[i]];\n        } else if (dict[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\n\nconsole.log(histogram('aabbbccdddd'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpdn5fn_ow.js:30:12)\n    at Object.<anonymous> (/tmp/tmpdn5fn_ow.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "{ d: 4 }\n",
      "timestamp": 1660334922
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i: number = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\n\nconsole.log(histogram('aabbbccccdddd'));\nconsole.log(histogram('aabbbccccddddeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpb8gztw1w.ts(26,1213): error TS1002: Unterminated string literal.\n../../../../tmp/tmpb8gztw1w.ts(27,1): error TS1005: ',' expected.\n../../../../tmp/tmpb8gztw1w.ts(27,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334922
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let hist: {[key: string]: number} = {};\n    for (let i = 0; i < test.length; i++) {\n        hist[test[i]] = (hist[test[i]] || 0) + 1;\n    }\n    return hist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpdm9ydqf3.js:15:12)\n    at Object.<anonymous> (/tmp/tmpdm9ydqf3.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334922
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetter: string[] = [];\n    for (let i: number = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetter = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetter.push(test[i]);\n        }\n    }\n    return {[maxLetter.join('')]: max};\n}\n\nconsole.log(histogram('aabbbccccdddd'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpihh29n2f.js:30:12)\n    at Object.<anonymous> (/tmp/tmpihh29n2f.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "{ cd: 4 }\n",
      "timestamp": 1660334922
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\n\nconsole.log(histogram('aabbbccc')); // {a: 2, b: 3, c: 3}\nconsole.log(histogram('aabbccdddd')); // {d: 4}\nconsole.log(histogram('aabbccddee')); // {a: 2, b: 2, c: 2, d: 2, e: 2}\nconsole.log(histogram('aabbccddeef')); // {f: 1}\nconsole.log(histogram('aabbccddeeff')); // {f: 2}\nconsole.log(histogram('aabbccddeeffg')); // {f: 2, g: 1}\nconsole.log(histogram('aabbccddeeffgg')); // {f: 2, g: 2}\nconsole.log(histogram('aabbccddeeffggh')); // {f: 2, g: 2, h: 1}\nconsole.log(histogram('aabbccddeeffgghh')); // {f: 2, g: 2, h: 2}\nconsole.log(histogram('aabbccddeeffgghhi')); // {f: 2, g: 2, h: 2, i: 1}\nconsole.log(histogram('aabbccddeeffgghhii')); // {f: 2, g: 2, h: 2, i: 2}\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdvzh5dwp.ts(36,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334922
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\n\nconsole.log(histogram('aabbccdddd'));\nconsole.log(histogram('aabbccddddeeeee'));\nconsole.log(histogram('aabbccddddeeeeefffff'));\nconsole.log(histogram('aabbccddddeeeeefffffgggggg'));\nconsole.log(histogram('aabbccddddeeeeefffffgggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpzmggtvq9.ts(29,520): error TS1002: Unterminated string literal.\n../../../../tmp/tmpzmggtvq9.ts(30,1): error TS1005: ',' expected.\n../../../../tmp/tmpzmggtvq9.ts(30,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334925
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let hist: {[key: string]: number} = {};\n    for (let i = 0; i < test.length; i++) {\n        if (hist[test[i]]) {\n            hist[test[i]] += 1;\n        } else {\n            hist[test[i]] = 1;\n        }\n    }\n    return hist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmp0fladn6v.js:20:12)\n    at Object.<anonymous> (/tmp/tmp0fladn6v.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334926
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetter: string = \"\";\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetter = test[i];\n        }\n    }\n    for (let key in result) {\n        if (result[key] !== max) {\n            delete result[key];\n        }\n    }\n    return result;\n}\nconsole.log(histogram(\"aabbbccccc\"));\nconsole.log(histogram(\"aabbbcccccdddd\"));\nconsole.log(histogram(\"aabbbcccccddddeeeee\"));\nconsole.log(histogram(\"aabbbcccccddddeeeeeffffff\"));\nconsole.log(histogram(\"aabbbcccccddddeeeeeffffffgggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpd43jnc_2.ts(31,529): error TS1002: Unterminated string literal.\n../../../../tmp/tmpd43jnc_2.ts(32,1): error TS1005: ',' expected.\n../../../../tmp/tmpd43jnc_2.ts(32,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334925
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i: number = 0; i < test.length; i++) {\n        if (result[test[i]] === undefined) {\n            result[test[i]] = 1;\n        } else {\n            result[test[i]]++;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\n\nconsole.log(histogram('aabbccdd'));\nconsole.log(histogram('aabbccddee'));\nconsole.log(histogram('aabbccddeeff'));\nconsole.log(histogram('aabbccddeeffgg'));\nconsole.log(histogram('aabbccddeeffgghh'));\nconsole.log(histogram('aabbccddeeffgghhii'));\nconsole.log(histogram('aabbccddeeffgghhiijj'));\nconsole.log(histogram('aabbccddeeffgghhiijjkk'));\nconsole.log(histogram('aabbccddeeffgghhiijjkkll'));\nconsole.log(histogram('aabbccddeeffgghhiijjkkllmm'));\nconsole.log(histogram('aabbccddeeffgghhiijjkkllmmnn'));\nconsole.log(histogram('aabbccddeeffgghhiijjkkllmmnnoo'));\nconsole.log(histogram('aabbccddeeffgghhiijjkkllmmnnoopp'));\nconsole.log(histogram('aabbccddeeffgghhiijjkkllmmnnooppqq'));\nconsole.log(histogram('aabbccddeeffgghhiijjkkllmmnnooppqqrr\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpu2euks9l.ts(39,60): error TS1002: Unterminated string literal.\n../../../../tmp/tmpu2euks9l.ts(40,1): error TS1005: ',' expected.\n../../../../tmp/tmpu2euks9l.ts(40,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334925
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let maxCount: number = 0;\n    let maxLetters: string[] = [];\n    for (let i: number = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > maxCount) {\n            maxCount = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === maxCount) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: maxCount};\n}\nconsole.log(histogram('aabbbccccdddd'));\nconsole.log(histogram('aabbbccccddddeee'));\nconsole.log(histogram('aabbbccccddddeeefff'));\nconsole.log(histogram('aabbbccccddddeeefffgggg'));\nconsole.log(histogram('aabbbccccddddeeefffgggghhhh'));\nconsole.log(histogram('aabbbccccddddeeefffgggghhhhiiii'));\nconsole.log(histogram('aabbbccccddddeeefffgggghhhhiiiijjjj'));\nconsole.log(histogram('aabbbccccddddeeefffgggghhhhiiiijjjjkkkk'));\nconsole.log(histogram('aabbbccccddddeeefffgggghhhhiiiijjjjkkkkllll'));\nconsole.log(histogram('aabbbccccddddeeefffgggghhhhiiiijjjjkkkkllllmmmm'));\nconsole.log(histogram('aabbbccccddddeeefffgggghhhhiiiijjjjkkkkllllmmmmnnnn'));\nconsole.log(histogram('aabbbccccddddeeefffgggghhhhiiiijjjjkkkkllllmmmmnnnnoooo'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpht6cwih4.js:41:12)\n    at Object.<anonymous> (/tmp/tmpht6cwih4.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "{ cd: 4 }\n{ cd: 4 }\n{ cd: 4 }\n{ cdg: 4 }\n{ cdgh: 4 }\n{ cdghi: 4 }\n{ cdghij: 4 }\n{ cdghijk: 4 }\n{ cdghijkl: 4 }\n{ cdghijklm: 4 }\n{ cdghijklmn: 4 }\n{ cdghijklmno: 4 }\n",
      "timestamp": 1660334926
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let histogram: {[key: string]: number} = {};\n    for (let i = 0; i < test.length; i++) {\n        let letter = test[i];\n        if (histogram[letter]) {\n            histogram[letter]++;\n        } else {\n            histogram[letter] = 1;\n        }\n    }\n    return histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmppsmf241j.js:21:12)\n    at Object.<anonymous> (/tmp/tmppsmf241j.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334926
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let hist: {[key: string]: number} = {};\n    for (let i = 0; i < test.length; i++) {\n        if (hist[test[i]]) {\n            hist[test[i]]++;\n        } else {\n            hist[test[i]] = 1;\n        }\n    }\n    return hist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpd9g8slnb.js:20:12)\n    at Object.<anonymous> (/tmp/tmpd9g8slnb.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334922
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i = 0; i < test.length; i++) {\n        if (!result[test[i]]) {\n            result[test[i]] = 1;\n        } else {\n            result[test[i]]++;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\n\nconsole.log(histogram('aabbbccdddd'));\nconsole.log(histogram('aabbbccddddeee'));\nconsole.log(histogram('aabbbccddddeeefff'));\nconsole.log(histogram('aabbbccddddeeefffggg'));\nconsole.log(histogram('aabbbccddddeeefffggghhh'));\nconsole.log(histogram('aabbbccddddeeefffggghhhiii'));\nconsole.log(histogram('aabbbccddddeeefffggghhhiiijjj'));\nconsole.log(histogram('aabbbccddddeeefffggghhhiiijjjkkk'));\nconsole.log(histogram('aabbbccddddeeefffggghhhiiijjjkkklll'));\nconsole.log(histogram('aabbbccddddeeefffggghhhiiijjjkkklllmmm'));\nconsole.log(histogram('aabbbccddddeeefffggghhhiiijjjkkklllmmmnnn'));\nconsole.log(histogram('aabbbccddddeeefffggghhhiiijjjkkklllmmmnnnooo'));\nconsole.log(histogram('aabbbccddddeeefffggghhhiiijjjkkklllmmmnnnoooppp\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnri1mxho.ts(37,71): error TS1002: Unterminated string literal.\n../../../../tmp/tmpnri1mxho.ts(38,1): error TS1005: ',' expected.\n../../../../tmp/tmpnri1mxho.ts(38,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334925
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n  let result: {[key: string]: number} = {};\n  let max: number = 0;\n  let maxLetter: string = '';\n  for (let i: number = 0; i < test.length; i++) {\n    if (result[test[i]] === undefined) {\n      result[test[i]] = 1;\n    } else {\n      result[test[i]]++;\n    }\n    if (result[test[i]] > max) {\n      max = result[test[i]];\n      maxLetter = test[i];\n    }\n  }\n  for (let key in result) {\n    if (result[key] !== max) {\n      delete result[key];\n    }\n  }\n  return result;\n}\n\nconsole.log(histogram('aabbbcccc')); // {a: 2, b: 3, c: 4}\nconsole.log(histogram('aabbbccccdddd')); // {d: 4}\nconsole.log(histogram('aabbbccccddddeeeee')); // {e: 5}\nconsole.log(histogram('aabbbccccddddeeeeeffffff')); // {f: 6}\nconsole.log(histogram('aabbbccccddddeeeeeffffffggggggg')); // {g: 7}\nconsole.log(histogram('aabbbccccddddeeeeeffffffggggggghhhhhhhh')); // {h: 8}\nconsole.log(histogram('aabbbccccddddeeeeeffffffggggggghhhhhhhhiiiiiiii')); // {i: 9}\nconsole.log(histogram('aabbbccccddddeeeeeffffffggggggghhhhhhhhiiiiiiiijjjjjjjjj')); // {j: 10}\nconsole.log(histogram('aabbbccccddddeeeeeffffffggggggghhhhhhhhiiiiiiiijjjjjjjjjkkkkkkkkkk')); // {k: 11}\nconsole.log(histogram('aabbbccccddddeeeeeffffffggggggghhhhhhhhiiiiiiiijjjjjjjjjkkkkkk\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9g5idys9.ts(37,86): error TS1002: Unterminated string literal.\n../../../../tmp/tmp9g5idys9.ts(38,1): error TS1005: ',' expected.\n../../../../tmp/tmp9g5idys9.ts(38,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334925
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i: number = 0; i < test.length; i++) {\n        if (result[test[i]] === undefined) {\n            result[test[i]] = 1;\n        } else {\n            result[test[i]]++;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\nconsole.log(histogram('aabbccdddd'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpqff0_wld.js:30:12)\n    at Object.<anonymous> (/tmp/tmpqff0_wld.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "{ d: 4 }\n",
      "timestamp": 1660334926
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\n\nconsole.log(histogram('aabbcc')); // {a: 2, b: 2, c: 2}\nconsole.log(histogram('aabbccdddd')); // {d: 4}\nconsole.log(histogram('aabbccddddeee')); // {e: 3}\nconsole.log(histogram('aabbccddddeeeefffff')); // {f: 5}\nconsole.log(histogram('aabbccddddeeeefffffgggg')); // {g: 6}\nconsole.log(histogram('aabbccddddeeeefffffgggggggg')); // {g: 8}\nconsole.log(histogram('aabbccddddeeeefffffgggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpcogvdu28.ts(31,369): error TS1002: Unterminated string literal.\n../../../../tmp/tmpcogvdu28.ts(32,1): error TS1005: ',' expected.\n../../../../tmp/tmpcogvdu28.ts(32,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334925
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let histogram: {[key: string]: number} = {};\n    for (let i = 0; i < test.length; i++) {\n        if (histogram[test[i]]) {\n            histogram[test[i]]++;\n        } else {\n            histogram[test[i]] = 1;\n        }\n    }\n    return histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmp5db9apsw.js:20:12)\n    at Object.<anonymous> (/tmp/tmp5db9apsw.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334926
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i: number = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\n\nconsole.log(histogram('aabbbccdddd')); // {a: 2, b: 3, c: 2, d: 4}\nconsole.log(histogram('aabbccdddd')); // {a: 2, b: 2, c: 2, d: 4}\nconsole.log(histogram('aabbccddddeee')); // {a: 2, b: 2, c: 2, d: 4, e: 3}\nconsole.log(histogram('aabbccddddeeee')); // {a: 2, b: 2, c: 2, d: 4, e: 4}\nconsole.log(histogram('aabbccddddeeeeff')); // {a: 2, b: 2, c: 2, d: 4, e: 4, f: 2}\nconsole.log(histogram('aabbccddddeeeeffff')); // {a: 2, b: 2, c: 2, d: 4, e: 4, f: 4}\nconsole.log(histogram('aabbccddddeeeeffffgg')); // {a: 2, b: 2, c: 2, d: 4, e: 4, f: 4, g: 2}\nconsole.log(histogram('aabbccddddeeeeffffgggg')); // {a: 2, b: 2, c: 2, d: 4, e: 4, f: 4, g: 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmppj9yhs5e.js:37:12)\n    at Object.<anonymous> (/tmp/tmppj9yhs5e.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "{ d: 4 }\n{ d: 4 }\n{ d: 4 }\n{ de: 4 }\n{ de: 4 }\n{ def: 4 }\n{ def: 4 }\n{ defg: 4 }\n",
      "timestamp": 1660334926
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let hist: {[key: string]: number} = {};\n    for (let i = 0; i < test.length; i++) {\n        if (hist[test[i]]) {\n            hist[test[i]]++;\n        } else {\n            hist[test[i]] = 1;\n        }\n    }\n    return hist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpd9g8slnb.js:20:12)\n    at Object.<anonymous> (/tmp/tmpd9g8slnb.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334922
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    const dict: {[key: string]: number} = {};\n    test.split('').forEach(letter => {\n        if (dict[letter]) {\n            dict[letter]++;\n        } else {\n            dict[letter] = 1;\n        }\n    });\n    return dict;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpaifdyaoo.js:20:12)\n    at Object.<anonymous> (/tmp/tmpaifdyaoo.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334926
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let dict: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxKeys: string[] = [];\n    for (let i = 0; i < test.length; i++) {\n        if (dict[test[i]]) {\n            dict[test[i]]++;\n        } else {\n            dict[test[i]] = 1;\n        }\n        if (dict[test[i]] > max) {\n            max = dict[test[i]];\n            maxKeys = [test[i]];\n        } else if (dict[test[i]] === max) {\n            maxKeys.push(test[i]);\n        }\n    }\n    return {[maxKeys.join('')]: max};\n}\n\nconsole.log(histogram('aabbccdddd'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpa6iulvha.js:30:12)\n    at Object.<anonymous> (/tmp/tmpa6iulvha.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "{ d: 4 }\n",
      "timestamp": 1660334926
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    const dict: {[key: string]: number} = {};\n    for (let i = 0; i < test.length; i++) {\n        const letter = test[i];\n        if (dict[letter]) {\n            dict[letter]++;\n        } else {\n            dict[letter] = 1;\n        }\n    }\n    return dict;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpwbd6z0ya.js:21:12)\n    at Object.<anonymous> (/tmp/tmpwbd6z0ya.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334926
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetter: string = '';\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetter = test[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(histogram('aabbccdddd'));\nconsole.log(histogram('aabbccddddeeeee'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpmriycbhs.js:28:12)\n    at Object.<anonymous> (/tmp/tmpmriycbhs.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "{ a: 2, b: 2, c: 2, d: 4 }\n{ a: 2, b: 2, c: 2, d: 4, e: 5 }\n",
      "timestamp": 1660334926
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxKeys: string[] = [];\n    for (let i: number = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxKeys = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxKeys.push(test[i]);\n        }\n    }\n    let result2: {[key: string]: number} = {};\n    for (let i: number = 0; i < maxKeys.length; i++) {\n        result2[maxKeys[i]] = max;\n    }\n    return result2;\n}\nconsole.log(histogram(\"aabbbccc\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpbnlz42fs.js:34:12)\n    at Object.<anonymous> (/tmp/tmpbnlz42fs.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "{ b: 3, c: 3 }\n",
      "timestamp": 1660334926
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetter: string = '';\n    for (let i: number = 0; i < test.length; i++) {\n        if (result[test[i]] === undefined) {\n            result[test[i]] = 1;\n        } else {\n            result[test[i]]++;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetter = test[i];\n        }\n    }\n    for (let key in result) {\n        if (result[key] !== max) {\n            delete result[key];\n        }\n    }\n    return result;\n}\n\nconsole.log(histogram('hello'));\nconsole.log(histogram('abbccc'));\nconsole.log(histogram('abbcccddddeeeee'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmp9kuz0iei.js:34:12)\n    at Object.<anonymous> (/tmp/tmp9kuz0iei.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "{ l: 2 }\n{ c: 3 }\n{ e: 5 }\n",
      "timestamp": 1660334926
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let hist: {[key: string]: number} = {};\n    for (let i = 0; i < test.length; i++) {\n        if (hist[test[i]]) {\n            hist[test[i]] += 1;\n        } else {\n            hist[test[i]] = 1;\n        }\n    }\n    return hist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmp0fladn6v.js:20:12)\n    at Object.<anonymous> (/tmp/tmp0fladn6v.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334926
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let hist: {[key: string]: number} = {};\n    for (let i = 0; i < test.length; i++) {\n        if (hist[test[i]]) {\n            hist[test[i]]++;\n        } else {\n            hist[test[i]] = 1;\n        }\n    }\n    return hist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpd9g8slnb.js:20:12)\n    at Object.<anonymous> (/tmp/tmpd9g8slnb.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334922
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let dict: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i = 0; i < test.length; i++) {\n        if (dict[test[i]]) {\n            dict[test[i]]++;\n        } else {\n            dict[test[i]] = 1;\n        }\n        if (dict[test[i]] > max) {\n            max = dict[test[i]];\n            maxLetters = [test[i]];\n        } else if (dict[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmp664l3b9p.js:29:12)\n    at Object.<anonymous> (/tmp/tmp664l3b9p.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334926
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let hist: {[key: string]: number} = {};\n    for (let i = 0; i < test.length; i++) {\n        if (hist[test[i]]) {\n            hist[test[i]]++;\n        } else {\n            hist[test[i]] = 1;\n        }\n    }\n    return hist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpd9g8slnb.js:20:12)\n    at Object.<anonymous> (/tmp/tmpd9g8slnb.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334922
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let hist: {[key: string]: number} = {};\n    for (let i = 0; i < test.length; i++) {\n        if (hist[test[i]]) {\n            hist[test[i]]++;\n        } else {\n            hist[test[i]] = 1;\n        }\n    }\n    return hist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpd9g8slnb.js:20:12)\n    at Object.<anonymous> (/tmp/tmpd9g8slnb.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334922
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxKeys: string[] = [];\n    for (let i: number = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxKeys = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxKeys.push(test[i]);\n        }\n    }\n    return {[maxKeys.join('')]: max};\n}\n\nconsole.log(histogram('aabbbcccdddd')); // {'a': 2, 'b': 3, 'c': 3, 'd': 4}\nconsole.log(histogram('aabbbcccddddd')); // {'a': 2, 'b': 3, 'c': 3, 'd': 5}\nconsole.log(histogram('aabbbcccdddddd')); // {'a': 2, 'b': 3, 'c': 3, 'd': 6}\nconsole.log(histogram('aabbbcccddddddd')); // {'a': 2, 'b': 3, 'c': 3, 'd': 7}\nconsole.log(histogram('aabbbcccdddddddd')); // {'a': 2, 'b': 3, 'c': 3, 'd': 8}\nconsole.log(histogram('aabbbcccddddddddd')); // {'a': 2, 'b': 3, 'c': 3, 'd': 9}\nconsole.log(histogram('aabbbcccdddddddddd')); // {'a': 2, 'b': 3, 'c': 3, 'd': 10}\nconsole.log(histogram('aabbbcccddddddddddd')); // {'a': 2, 'b': 3, 'c': 3, 'd': 11}\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpw4e3gu6i.js:38:12)\n    at Object.<anonymous> (/tmp/tmpw4e3gu6i.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "{ d: 4 }\n{ d: 5 }\n{ d: 6 }\n{ d: 7 }\n{ d: 8 }\n{ d: 9 }\n{ d: 10 }\n{ d: 11 }\n",
      "timestamp": 1660334926
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\n\nconsole.log(histogram('aabbbbcccccdddddd'));\nconsole.log(histogram('aabbbbcccccddddddeeeeee'));\nconsole.log(histogram('aabbbbcccccddddddeeeeeefffff'));\nconsole.log(histogram('aabbbbcccccddddddeeeeeefffffgggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmppy1ynegm.ts(28,540): error TS1002: Unterminated string literal.\n../../../../tmp/tmppy1ynegm.ts(29,1): error TS1005: ',' expected.\n../../../../tmp/tmppy1ynegm.ts(29,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334926
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\n\nconsole.log(histogram('aabbccdddd')); // {d: 4}\nconsole.log(histogram('aabbccddddee')); // {d: 4}\nconsole.log(histogram('aabbccddddeeee')); // {de: 4}\nconsole.log(histogram('aabbccddddeeeeff')); // {e: 4}\nconsole.log(histogram('aabbccddddeeeeffff')); // {e: 4}\nconsole.log(histogram('aabbccddddeeeeffffgg')); // {e: 4}\nconsole.log(histogram('aabbccddddeeeeffffggg')); // {e: 4}\nconsole.log(histogram('aabbccddddeeeeffffgggg')); // {e: 4}\nconsole.log(histogram('aabbccddddeeeeffffggggg')); // {e: 4}\nconsole.log(histogram('aabbccddddeeeeffffgggggg')); // {e: 4}\nconsole.log(histogram('aabbccddddeeeeffffggggggg')); // {e: 4}\nconsole.log(histogram('aabbccddddeeeeffffgggggggg')); // {e: 4}\nconsole.log(histogram('aabbccddddeeeeffffggggggggg')); // {e: 4}\nconsole.log(histogram('a\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpy3fs6hjj.ts(38,25): error TS1002: Unterminated string literal.\n../../../../tmp/tmpy3fs6hjj.ts(39,1): error TS1005: ',' expected.\n../../../../tmp/tmpy3fs6hjj.ts(39,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334926
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxKeys: string[] = [];\n    for (let i: number = 0; i < test.length; i++) {\n        if (result[test[i]] === undefined) {\n            result[test[i]] = 1;\n        } else {\n            result[test[i]]++;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxKeys = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxKeys.push(test[i]);\n        }\n    }\n    return {[maxKeys.join('')]: max};\n}\n\nconsole.log(histogram('aabbbccc'));\nconsole.log(histogram('aabbbccca'));\nconsole.log(histogram('aabbbcccaa'));\nconsole.log(histogram('aabbbcccaaa'));\nconsole.log(histogram('aabbbcccaaaa'));\nconsole.log(histogram('aabbbcccaaaaa'));\nconsole.log(histogram('aabbbcccaaaaaa'));\nconsole.log(histogram('aabbbcccaaaaaaa'));\nconsole.log(histogram('aabbbcccaaaaaaaa'));\nconsole.log(histogram('aabbbcccaaaaaaaaa'));\nconsole.log(histogram('aabbbcccaaaaaaaaaa'));\nconsole.log(histogram('aabbbcccaaaaaaaaaaa'));\nconsole.log(histogram('aabbbcccaaaaaaaaaaaa'));\nconsole.log(histogram('aabbbcccaaaaaaaaaaaaa'));\nconsole.log(histogram('aabbbcccaaaaaaaaaaaaaa'));\nconsole.log(histogram('aabbbcccaaaaaaaaaaaaaaa'));\nconsole.log(histogram('aabbbcccaaaaaaaaaaaaaaaa'));\nconsole.log(histogram('aabbbcccaaaaaaaaaaaaaaaaa'));\nconsole.log(histogram('aabbbcccaaaaaaaaaaaaaaaaaa\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpgb1gelbq.ts(43,50): error TS1002: Unterminated string literal.\n../../../../tmp/tmpgb1gelbq.ts(44,1): error TS1005: ',' expected.\n../../../../tmp/tmpgb1gelbq.ts(44,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334926
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    const hist: {[key: string]: number} = {};\n    for (const char of test) {\n        if (hist[char]) {\n            hist[char]++;\n        } else {\n            hist[char] = 1;\n        }\n    }\n    return hist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpzucv9_0m.js:20:12)\n    at Object.<anonymous> (/tmp/tmpzucv9_0m.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334928
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\n\nconsole.log(histogram('aabbccdddd')); // {d: 4}\nconsole.log(histogram('aabbccddddee')); // {d: 4}\nconsole.log(histogram('aabbccddddeeff')); // {d: 4}\nconsole.log(histogram('aabbccddddeeffgg')); // {d: 4}\nconsole.log(histogram('aabbccddddeeffgghh')); // {d: 4}\nconsole.log(histogram('aabbccddddeeffgghhii')); // {d: 4}\nconsole.log(histogram('aabbccddddeeffgghhiijj')); // {d: 4}\nconsole.log(histogram('aabbccddddeeffgghhiijjkk')); // {d: 4}\nconsole.log(histogram('aabbccddddeeffgghhiijjkkll')); // {d: 4}\nconsole.log(histogram('aabbccddddeeffgghhiijjkkllmm')); // {d: 4}\nconsole.log(histogram('aabbccddddeeffgghhiijjkkllmmnn')); // {d: 4}\nconsole.log(histogram('aabbccddddeeffgghhiijjkkllmmnnoo')); // {d: 4}\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmp161xt35d.js:42:12)\n    at Object.<anonymous> (/tmp/tmp161xt35d.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "{ d: 4 }\n{ d: 4 }\n{ d: 4 }\n{ d: 4 }\n{ d: 4 }\n{ d: 4 }\n{ d: 4 }\n{ d: 4 }\n{ d: 4 }\n{ d: 4 }\n{ d: 4 }\n{ d: 4 }\n",
      "timestamp": 1660334929
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]] += 1;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n        }\n    }\n    let maxLetters: string[] = [];\n    for (let key in result) {\n        if (result[key] === max) {\n            maxLetters.push(key);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\nconsole.log(histogram('hello'));\nconsole.log(histogram('aabbbcccc'));\nconsole.log(histogram('abbbcccc'));\nconsole.log(histogram('abbcccc'));\nconsole.log(histogram('abbccccdddd'));\nconsole.log(histogram('abbccccddddeeeee'));\nconsole.log(histogram('abbccccddddeeeeeffffff'));\nconsole.log(histogram('abbccccddddeeeeeffffffgggggggg'));\nconsole.log(histogram('abbccccddddeeeeeffffffgggggggghhhhhhhhh'));\nconsole.log(histogram('abbccccddddeeeeeffffffgggggggghhhhhhhhhiiiiiiiiii'));\nconsole.log(histogram('abbccccddddeeeeeffffffgggggggghhhhhhhhhiiiiiiiiiijjjjjjjjjjjj'));\nconsole.log(histogram('abbccccddddeeeeeffffffgggggggghhhhhhhhhiiiiiiiiiijjjjjjjjjjjjkkkkkkkkkkkkkk'));\nconsole.log(histogram('abbccccddddeeeeeffffffgggggggghhhhhhhhhiiiiiiiiiijjjjjjjjjjjjkkkkkkkkkkkkkkllllllllllllllllll'));\nconsole.log(histogram('abbcccc\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_p8b7mgb.ts(39,31): error TS1002: Unterminated string literal.\n../../../../tmp/tmp_p8b7mgb.ts(40,1): error TS1005: ',' expected.\n../../../../tmp/tmp_p8b7mgb.ts(40,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334929
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetter: string = '';\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetter = test[i];\n        }\n    }\n    return {[maxLetter]: max};\n}\n\nconsole.log(histogram('abbccc')); // {c: 3}\nconsole.log(histogram('aabbcc')); // {a: 2, b: 2, c: 2}\nconsole.log(histogram('abbcccddddeeeeeffffff')); // {f: 6}\nconsole.log(histogram('abbcccddddeeeeeffffffggggggghhhhhhhhiiiiiiiiijjjjjjjjjjkkkkkkkkkkkllllllllllllmmmmmmmmmmmmmnnnnnnnnnnnnnnoooooooooooooooppppppppppppppppqqqqqqqqqqqqqqqqqqrrrrrrrrrrrrrrrrrrrsssssssssssssssssssttttttttttttttttttttttuuuuuuuuuuuuuuuuuuuuuuuvvvvvvvvvvvvvvvvvvvvvvvvwwwwwwwwwwwwwwwwwwwwwwwwwwxxxxxxxxxxxxxxxxxxxxxxxxyyyyyyyyyyyyyyyyyyyyyyyyyyyyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplwy4ts_v.ts(26,633): error TS1002: Unterminated string literal.\n../../../../tmp/tmplwy4ts_v.ts(27,1): error TS1005: ',' expected.\n../../../../tmp/tmplwy4ts_v.ts(27,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334929
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let hist: {[key: string]: number} = {};\n    for (let i = 0; i < test.length; i++) {\n        if (hist[test[i]]) {\n            hist[test[i]]++;\n        } else {\n            hist[test[i]] = 1;\n        }\n    }\n    return hist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpd9g8slnb.js:20:12)\n    at Object.<anonymous> (/tmp/tmpd9g8slnb.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334922
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let hist: {[key: string]: number} = {};\n    for (let i = 0; i < test.length; i++) {\n        if (hist[test[i]]) {\n            hist[test[i]]++;\n        } else {\n            hist[test[i]] = 1;\n        }\n    }\n    return hist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpd9g8slnb.js:20:12)\n    at Object.<anonymous> (/tmp/tmpd9g8slnb.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334922
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let letters = test.split(\" \");\n    let result: {[key: string]: number} = {};\n    let max = 0;\n    for (let i = 0; i < letters.length; i++) {\n        let letter = letters[i];\n        if (result[letter] === undefined) {\n            result[letter] = 1;\n        } else {\n            result[letter]++;\n        }\n        if (result[letter] > max) {\n            max = result[letter];\n        }\n    }\n    let maxLetters: string[] = [];\n    for (let key in result) {\n        if (result[key] === max) {\n            maxLetters.push(key);\n        }\n    }\n    return {[maxLetters.join(\" \")]: max};\n}\n\nconsole.log(histogram(\"a b c d e f\")); // {a: 1, b: 1, c: 1, d: 1, e: 1, f: 1}\nconsole.log(histogram(\"a b c d e f aa bb cc dd ee ff\")); // {a: 2, b: 2, c: 2, d: 2, e: 2, f: 2}\nconsole.log(histogram(\"aa bb cc dd ee ff\")); // {aa: 2, bb: 2, cc: 2, dd: 2, ee: 2, ff: 2}\nconsole.log(histogram(\"aa bb cc dd ee ff aa bb cc dd ee ff aa bb cc dd ee ff\")); // {aa: 6, bb: 6, cc: 6, dd: 6, ee: 6, ff: 6}\nconsole.log(histogram(\"aa bb cc dd ee ff aa bb cc dd ee ff aa bb cc dd ee ff aa bb cc dd ee ff aa bb cc dd ee ff aa bb cc dd ee ff aa bb cc dd ee ff aa bb cc dd ee ff aa bb cc dd ee ff aa bb cc dd ee ff aa bb cc dd ee ff aa bb cc dd ee ff aa b\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpeal6ox03.ts(33,244): error TS1002: Unterminated string literal.\n../../../../tmp/tmpeal6ox03.ts(34,1): error TS1005: ',' expected.\n../../../../tmp/tmpeal6ox03.ts(34,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334929
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\n\nconsole.log(histogram('aabbbcccddd'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpftlk989p.js:30:12)\n    at Object.<anonymous> (/tmp/tmpftlk989p.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "{ bcd: 3 }\n",
      "timestamp": 1660334929
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    for (let i = 0; i < test.length; i++) {\n        if (!result[test[i]]) {\n            result[test[i]] = 1;\n        } else {\n            result[test[i]]++;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n        }\n    }\n    let finalResult: {[key: string]: number} = {};\n    for (let key in result) {\n        if (result[key] === max) {\n            finalResult[key] = result[key];\n        }\n    }\n    return finalResult;\n}\nconsole.log(histogram(\"aabbbccccdddd\"));\nconsole.log(histogram(\"aabbbccccdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp1ht9_jlf.ts(27,639): error TS1002: Unterminated string literal.\n../../../../tmp/tmp1ht9_jlf.ts(28,1): error TS1005: ',' expected.\n../../../../tmp/tmp1ht9_jlf.ts(28,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334929
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n        }\n    }\n    let maxKeys: string[] = [];\n    for (let key in result) {\n        if (result[key] === max) {\n            maxKeys.push(key);\n        }\n    }\n    return {[maxKeys.join('')]: max};\n}\n\nconsole.log(histogram('aabbccc')); // {c: 3}\nconsole.log(histogram('aabbcc')); // {a: 2, b: 2, c: 2}\nconsole.log(histogram('abc')); // {a: 1, b: 1, c: 1}\nconsole.log(histogram('aabbccdddd')); // {d: 4}\nconsole.log(histogram('aabbccddddeee')); // {e: 3}\nconsole.log(histogram('aabbccddddeeefff')); // {f: 3}\nconsole.log(histogram('aabbccddddeeefffggg')); // {g: 3}\nconsole.log(histogram('aabbccddddeeefffggghhh')); // {h: 3}\nconsole.log(histogram('aabbccddddeeefffggghhhiii')); // {i: 3}\nconsole.log(histogram('aabbccddddeeefffggghhhiiijjj')); // {j: 3}\nconsole.log(histogram('aabbccddddeeefffggghhhiiijjjkkk')); // {k: 3}\nconsole.log(histogram('aabbccddddeeefffggghhhiiijjjkkklll')); // {l: 3}\nconsole.log(histogram('aabbccddddeeefff\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpf_x44_fh.ts(39,40): error TS1002: Unterminated string literal.\n../../../../tmp/tmpf_x44_fh.ts(40,1): error TS1005: ',' expected.\n../../../../tmp/tmpf_x44_fh.ts(40,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334929
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\n\nconsole.log(histogram('aabbbcccdddd'));\nconsole.log(histogram('aabbbcccddddd'));\nconsole.log(histogram('aabbbcccdddddd'));\nconsole.log(histogram('aabbbcccddddddd'));\nconsole.log(histogram('aabbbcccdddddddd'));\nconsole.log(histogram('aabbbcccddddddddd'));\nconsole.log(histogram('aabbbcccdddddddddd'));\nconsole.log(histogram('aabbbcccddddddddddd'));\nconsole.log(histogram('aabbbcccdddddddddddd'));\nconsole.log(histogram('aabbbcccddddddddddddd'));\nconsole.log(histogram('aabbbcccdddddddddddddd'));\nconsole.log(histogram('aabbbcccddddddddddddddd'));\nconsole.log(histogram('aabbbcccdddddddddddddddd'));\nconsole.log(histogram('aabbbcccddddddddddddddddd'));\nconsole.log(histogram('aabbbcccdddddddddddddddddd'));\nconsole.log(histogram('aabbbcccdddddddd\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpba7bq9jg.ts(40,40): error TS1002: Unterminated string literal.\n../../../../tmp/tmpba7bq9jg.ts(41,1): error TS1005: ',' expected.\n../../../../tmp/tmpba7bq9jg.ts(41,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334929
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetter: string = \"\";\n    for (let i: number = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetter = test[i];\n        }\n    }\n    return {[maxLetter]: max};\n}\n\nconsole.log(histogram(\"aaabbc\")); // {a: 3}\nconsole.log(histogram(\"abcd\")); // {a: 1}\nconsole.log(histogram(\"aabbb\")); // {a: 2, b: 3}\nconsole.log(histogram(\"aabbccdd\")); // {a: 2, b: 2, c: 2, d: 2}\nconsole.log(histogram(\"aabbccdde\")); // {a: 2, b: 2, c: 2, d: 2, e: 1}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmph0xofxwm.js:31:12)\n    at Object.<anonymous> (/tmp/tmph0xofxwm.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "{ a: 3 }\n{ a: 1 }\n{ b: 3 }\n{ a: 2 }\n{ a: 2 }\n",
      "timestamp": 1660334929
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetter: string = '';\n    for (let i: number = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetter = test[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(histogram('aabbbccc'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpqpnllccy.js:27:12)\n    at Object.<anonymous> (/tmp/tmpqpnllccy.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "{ a: 2, b: 3, c: 3 }\n",
      "timestamp": 1660334930
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i: number = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\n\nconsole.log(histogram('aabbcc')); // {a: 2, b: 2, c: 2}\nconsole.log(histogram('abbba')); // {a: 3, b: 2}\nconsole.log(histogram('abcd')); // {a: 1, b: 1, c: 1, d: 1}\nconsole.log(histogram('aabbccdd')); // {a: 2, b: 2, c: 2, d: 2}\nconsole.log(histogram('aabbccdde')); // {a: 2, b: 2, c: 2, d: 2, e: 1}\nconsole.log(histogram('abbcccddddeeeee')); // {a: 1, b: 2, c: 3, d: 4, e: 5}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpbm840onk.js:35:12)\n    at Object.<anonymous> (/tmp/tmpbm840onk.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "{ abc: 2 }\n{ b: 3 }\n{ abcd: 1 }\n{ abcd: 2 }\n{ abcd: 2 }\n{ e: 5 }\n",
      "timestamp": 1660334930
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxKey: string = '';\n    let maxKeys: string[] = [];\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxKey = test[i];\n            maxKeys = [maxKey];\n        } else if (result[test[i]] === max) {\n            maxKeys.push(test[i]);\n        }\n    }\n    return {[maxKey]: max};\n}\n\nconsole.log(histogram('aabbcc'));\nconsole.log(histogram('aabbccddd'));\nconsole.log(histogram('aabbccdddeee'));\nconsole.log(histogram('aabbccdddeeefff'));\nconsole.log(histogram('aabbccdddeeefffggg'));\nconsole.log(histogram('aabbccdddeeefffggghhh'));\nconsole.log(histogram('aabbccdddeeefffggghhhiiii'));\nconsole.log(histogram('aabbccdddeeefffggghhhiiiijjjj'));\nconsole.log(histogram('aabbccdddeeefffggghhhiiiijjjjkkkk'));\nconsole.log(histogram('aabbccdddeeefffggghhhiiiijjjjkkkkllll'));\nconsole.log(histogram('aabbccdddeeefffggghhhiiiijjjjkkkkllllmmmm'));\nconsole.log(histogram('aabbccdddeeefffggghhhiiiijjjjkkkkllllmmmmnnnn'));\nconsole.log(histogram('aabbccdddeeefffggghhhiiiijjjjkkkkllllmmmmnnnnoooo'));\nconsole.log(histogram('aabbccdddeeefffgg\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplpxktdqd.ts(40,41): error TS1002: Unterminated string literal.\n../../../../tmp/tmplpxktdqd.ts(41,1): error TS1005: ',' expected.\n../../../../tmp/tmplpxktdqd.ts(41,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334929
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetter: string = \"\";\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetter = test[i];\n        }\n    }\n    for (let key in result) {\n        if (result[key] !== max) {\n            delete result[key];\n        }\n    }\n    return result;\n}\n\nconsole.log(histogram(\"aabbbcccc\"));\nconsole.log(histogram(\"aabbccdddd\"));\nconsole.log(histogram(\"aabbccddddeeeee\"));\nconsole.log(histogram(\"aabbccddddeeeeeffffffffff\"));\nconsole.log(histogram(\"aabbccddddeeeeeffffffffffgggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjeh7j_in.ts(32,549): error TS1002: Unterminated string literal.\n../../../../tmp/tmpjeh7j_in.ts(33,1): error TS1005: ',' expected.\n../../../../tmp/tmpjeh7j_in.ts(33,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334930
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let hist: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i = 0; i < test.length; i++) {\n        if (hist[test[i]]) {\n            hist[test[i]]++;\n        } else {\n            hist[test[i]] = 1;\n        }\n        if (hist[test[i]] > max) {\n            max = hist[test[i]];\n            maxLetters = [test[i]];\n        } else if (hist[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\n\nconsole.log(histogram('aabbccddddeee')); // {d: 4}\nconsole.log(histogram('aabbccddddeeefff')); // {f: 3}\nconsole.log(histogram('aabbccddddeeefffggg')); // {f: 3}\nconsole.log(histogram('aabbccddddeeefffggghhh')); // {h: 3}\nconsole.log(histogram('aabbccddddeeefffggghhhiii')); // {i: 3}\nconsole.log(histogram('aabbccddddeeefffggghhhiiijjj')); // {i: 3}\nconsole.log(histogram('aabbccddddeeefffggghhhiiijjjkkk')); // {i: 3}\nconsole.log(histogram('aabbccddddeeefffggghhhiiijjjkkklll')); // {i: 3}\nconsole.log(histogram('aabbccddddeeefffggghhhiiijjjkkklllmmm')); // {i: 3}\nconsole.log(histogram('aabbccddddeeefffggghhhiiijjjkkklllmmm')); // {i: 3}\nconsole.log(histogram('aabbccddddeeefffggghhhiiijjjkkklllmmm')); // {i: 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpdq_p43z_.js:40:12)\n    at Object.<anonymous> (/tmp/tmpdq_p43z_.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "{ d: 4 }\n{ d: 4 }\n{ d: 4 }\n{ d: 4 }\n{ d: 4 }\n{ d: 4 }\n{ d: 4 }\n{ d: 4 }\n{ d: 4 }\n{ d: 4 }\n{ d: 4 }\n",
      "timestamp": 1660334930
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let dict: {[key: string]: number} = {};\n    for (let i = 0; i < test.length; i++) {\n        if (dict[test[i]]) {\n            dict[test[i]]++;\n        } else {\n            dict[test[i]] = 1;\n        }\n    }\n    return dict;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpe08bc1bh.js:20:12)\n    at Object.<anonymous> (/tmp/tmpe08bc1bh.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334930
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    test.split('').forEach(letter => {\n        if(result[letter]) {\n            result[letter]++;\n        } else {\n            result[letter] = 1;\n        }\n        if(result[letter] > max) {\n            max = result[letter];\n            maxLetters = [letter];\n        } else if(result[letter] === max) {\n            maxLetters.push(letter);\n        }\n    });\n    return {[maxLetters.join('')]: max};\n}\n\nconsole.log(histogram('aabbccdd'));\nconsole.log(histogram('aabbccddeeff'));\nconsole.log(histogram('aabbccddeeffgg'));\nconsole.log(histogram('aabbccddeeffgghh'));\nconsole.log(histogram('aabbccddeeffgghhii'));\nconsole.log(histogram('aabbccddeeffgghhiijj'));\nconsole.log(histogram('aabbccddeeffgghhiijjkk'));\nconsole.log(histogram('aabbccddeeffgghhiijjkkll'));\nconsole.log(histogram('aabbccddeeffgghhiijjkkllmm'));\nconsole.log(histogram('aabbccddeeffgghhiijjkkllmmnn'));\nconsole.log(histogram('aabbccddeeffgghhiijjkkllmmnnoo'));\nconsole.log(histogram('aabbccddeeffgghhiijjkkllmmnnoopp'));\nconsole.log(histogram('aabbccddeeffgghhiijjkkllmmnnooppqq'));\nconsole.log(histogram('aabbccddeeffgghhiijjkkllmmnnooppqqrr'));\nconsole.log(histogram('aabbccddeeffgghhiijjkkllmmnnooppqqrrsstt'));\nconsole.log(histogram('\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmkue2ohb.ts(40,24): error TS1002: Unterminated string literal.\n../../../../tmp/tmpmkue2ohb.ts(41,1): error TS1005: ',' expected.\n../../../../tmp/tmpmkue2ohb.ts(41,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334929
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let histogram: {[key: string]: number} = {};\n    for (let i = 0; i < test.length; i++) {\n        if (histogram[test[i]]) {\n            histogram[test[i]]++;\n        } else {\n            histogram[test[i]] = 1;\n        }\n    }\n    return histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmp5db9apsw.js:20:12)\n    at Object.<anonymous> (/tmp/tmp5db9apsw.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334926
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let dict: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i = 0; i < test.length; i++) {\n        if (dict[test[i]]) {\n            dict[test[i]]++;\n        } else {\n            dict[test[i]] = 1;\n        }\n        if (dict[test[i]] > max) {\n            max = dict[test[i]];\n            maxLetters = [test[i]];\n        } else if (dict[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\n\nconsole.log(histogram('aabbbccdddd'));\nconsole.log(histogram('aabbbccddddeeeee'));\nconsole.log(histogram('aabbbccddddeeeeefffff'));\nconsole.log(histogram('aabbbccddddeeeeefffffgggggg'));\nconsole.log(histogram('aabbbccddddeeeeefffffgggggghhhhhhh'));\nconsole.log(histogram('aabbbccddddeeeeefffffgggggghhhhhhhiiiiiiii'));\nconsole.log(histogram('aabbbccddddeeeeefffffgggggghhhhhhhiiiiiiiijjjjjjjjjj'));\nconsole.log(histogram('aabbbccddddeeeeefffffgggggghhhhhhhiiiiiiiijjjjjjjjjjkkkkkkkkkkk'));\nconsole.log(histogram('aabbbccddddeeeeefffffgggggghhhhhhhiiiiiiiijjjjjjjjjjkkkkkkkkkkkllllllllllll'));\nconsole.log(histogram('aabbbccddddeeeeefffffgggggghhhhhhhiiiiiiiijjjjjjjjjjkkkkkkkkkkkllllllllllllmmmmmmmmmmmmmm'));\nconsole.log(histogram('aabbbccddddeeeeefffffgggggghhhhhhhiiiiiiii\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqfioxaw6.ts(35,66): error TS1002: Unterminated string literal.\n../../../../tmp/tmpqfioxaw6.ts(36,1): error TS1005: ',' expected.\n../../../../tmp/tmpqfioxaw6.ts(36,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334930
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let hist: {[key: string]: number} = {};\n    for (let i = 0; i < test.length; i++) {\n        let letter = test[i];\n        if (hist[letter]) {\n            hist[letter]++;\n        } else {\n            hist[letter] = 1;\n        }\n    }\n    return hist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpq1k21mc4.js:21:12)\n    at Object.<anonymous> (/tmp/tmpq1k21mc4.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334930
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\n\nconsole.log(histogram('aabbbcccc')); // {c: 4}\nconsole.log(histogram('aabbbccccdddd')); // {d: 4}\nconsole.log(histogram('aabbbccccddddeeeefffff')); // {e: 5}\nconsole.log(histogram('aabbbccccddddeeeefffffgggggg')); // {g: 7}\nconsole.log(histogram('aabbbccccddddeeeefffffgggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpyn8ob84x.ts(29,468): error TS1002: Unterminated string literal.\n../../../../tmp/tmpyn8ob84x.ts(30,1): error TS1005: ',' expected.\n../../../../tmp/tmpyn8ob84x.ts(30,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334930
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    test.split(\"\").forEach(function(letter) {\n        if (result[letter] === undefined) {\n            result[letter] = 1;\n        } else {\n            result[letter]++;\n        }\n        if (result[letter] > max) {\n            max = result[letter];\n        }\n    });\n    for (let key in result) {\n        if (result[key] !== max) {\n            delete result[key];\n        }\n    }\n    return result;\n}\n\nconsole.log(histogram(\"hello\")); // {l: 2}\nconsole.log(histogram(\"aabbcc\")); // {a: 2, b: 2, c: 2}\nconsole.log(histogram(\"abbba\")); // {a: 1, b: 3}\nconsole.log(histogram(\"\")); // {}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpcpqdsfob.js:33:12)\n    at Object.<anonymous> (/tmp/tmpcpqdsfob.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "{ l: 2 }\n{ a: 2, b: 2, c: 2 }\n{ b: 3 }\n{}\n",
      "timestamp": 1660334930
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let histogram: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i = 0; i < test.length; i++) {\n        if (histogram[test[i]]) {\n            histogram[test[i]] += 1;\n        } else {\n            histogram[test[i]] = 1;\n        }\n        if (histogram[test[i]] > max) {\n            max = histogram[test[i]];\n            maxLetters = [test[i]];\n        } else if (histogram[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\nconsole.log(histogram('aabbbccc')); // {a: 2, b: 3, c: 3}\nconsole.log(histogram('aabbbcccdddd')); // {d: 4}\nconsole.log(histogram('aabbbcccddddeeee')); // {e: 4}\nconsole.log(histogram('aabbbcccddddeeeeffff')); // {f: 4}\nconsole.log(histogram('aabbbcccddddeeeeffffgggg')); // {g: 4}\nconsole.log(histogram('aabbbcccddddeeeeffffgggghhhh')); // {h: 4}\nconsole.log(histogram('aabbbcccddddeeeeffffgggghhhhiiii')); // {i: 4}\nconsole.log(histogram('aabbbcccddddeeeeffffgggghhhhiiiijjjj')); // {j: 4}\nconsole.log(histogram('aabbbcccddddeeeeffffgggghhhhiiiijjjjkkkk')); // {k: 4}\nconsole.log(histogram('aabbbcccddddeeeeffffgggghhhhiiiijjjjkkkkllll')); // {l: 4}\nconsole.log(histogram('aabbbcccddddeeeeffffgggghhhhiiiijjjjkkkk\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjtbot8vz.ts(34,64): error TS1002: Unterminated string literal.\n../../../../tmp/tmpjtbot8vz.ts(35,1): error TS1005: ',' expected.\n../../../../tmp/tmpjtbot8vz.ts(35,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334930
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let histogram: {[key: string]: number} = {};\n    for (let i = 0; i < test.length; i++) {\n        if (histogram[test[i]]) {\n            histogram[test[i]]++;\n        } else {\n            histogram[test[i]] = 1;\n        }\n    }\n    return histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmp5db9apsw.js:20:12)\n    at Object.<anonymous> (/tmp/tmp5db9apsw.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334926
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i: number = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\n\nconsole.log(histogram('aabbbcccc'));\nconsole.log(histogram('abcdefghijklmnopqrstuvwxyz'));\nconsole.log(histogram('aabbbccccddddeeeeffffgggghhhh'));\nconsole.log(histogram('aabbbccccddddeeeeffffgggghhhhiiiiiiiiijjjjjjjjjjkkkkkkkkkkllllllllllmmmmmmmmmmnnnnnnnnnnooooooooooppppppppppqqqqqqqqqqrrrrrrrrrrssssssssssttttttttttuuuuuuuuuuvvvvvvvvvvwwwwwwwwwwxxxxxxxxxxyyyyyyyyyyzzzzzzzzzz'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmp647btxa1.js:33:12)\n    at Object.<anonymous> (/tmp/tmp647btxa1.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "{ c: 4 }\n{ abcdefghijklmnopqrstuvwxyz: 1 }\n{ cdefgh: 4 }\n{ jklmnopqrstuvwxyz: 10 }\n",
      "timestamp": 1660334930
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let dict: {[key: string]: number} = {};\n    let max: number = 0;\n    for (let i = 0; i < test.length; i++) {\n        if (dict[test[i]]) {\n            dict[test[i]]++;\n        } else {\n            dict[test[i]] = 1;\n        }\n        if (dict[test[i]] > max) {\n            max = dict[test[i]];\n        }\n    }\n    let result: {[key: string]: number} = {};\n    for (let key in dict) {\n        if (dict[key] === max) {\n            result[key] = dict[key];\n        }\n    }\n    return result;\n}\n\nconsole.log(histogram(\"hello\"));\nconsole.log(histogram(\"world\"));\nconsole.log(histogram(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpy30u2wqx.ts(29,1244): error TS1002: Unterminated string literal.\n../../../../tmp/tmpy30u2wqx.ts(30,1): error TS1005: ',' expected.\n../../../../tmp/tmpy30u2wqx.ts(30,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334932
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetter: string = '';\n    for (let i: number = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetter = test[i];\n        }\n    }\n    let maxDict: {[key: string]: number} = {};\n    for (let i: number = 0; i < test.length; i++) {\n        if (result[test[i]] === max) {\n            maxDict[test[i]] = max;\n        }\n    }\n    return maxDict;\n}\n\nconsole.log(histogram('aabbccdddd'));\nconsole.log(histogram('aabbccddddeee'));\nconsole.log(histogram('aabbccddddeeeee'));\nconsole.log(histogram('aabbccddddeeeeefffff'));\nconsole.log(histogram('aabbccddddeeeeefffffgggggg'));\nconsole.log(histogram('aabbccddddeeeeefffffgggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpyc29fx_4.ts(34,422): error TS1002: Unterminated string literal.\n../../../../tmp/tmpyc29fx_4.ts(35,1): error TS1005: ',' expected.\n../../../../tmp/tmpyc29fx_4.ts(35,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334932
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let hist: {[key: string]: number} = {};\n    for (let i = 0; i < test.length; i++) {\n        if (hist[test[i]]) {\n            hist[test[i]]++;\n        } else {\n            hist[test[i]] = 1;\n        }\n    }\n    return hist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpd9g8slnb.js:20:12)\n    at Object.<anonymous> (/tmp/tmpd9g8slnb.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334922
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let histogram: {[key: string]: number} = {};\n    for (let i = 0; i < test.length; i++) {\n        if (histogram[test[i]]) {\n            histogram[test[i]]++;\n        } else {\n            histogram[test[i]] = 1;\n        }\n    }\n    return histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmp5db9apsw.js:20:12)\n    at Object.<anonymous> (/tmp/tmp5db9apsw.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334926
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let hist: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i = 0; i < test.length; i++) {\n        if (hist[test[i]]) {\n            hist[test[i]]++;\n        } else {\n            hist[test[i]] = 1;\n        }\n        if (hist[test[i]] > max) {\n            max = hist[test[i]];\n            maxLetters = [test[i]];\n        } else if (hist[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join(\"\")]: max};\n}\n\nconsole.log(histogram(\"aabbccdddd\"));\nconsole.log(histogram(\"aabbccddddeeee\"));\nconsole.log(histogram(\"aabbccddddeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3omr_3zx.ts(27,1174): error TS1002: Unterminated string literal.\n../../../../tmp/tmp3omr_3zx.ts(28,1): error TS1005: ',' expected.\n../../../../tmp/tmp3omr_3zx.ts(28,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334932
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    let letters: string[] = test.split(\" \");\n    for (let i = 0; i < letters.length; i++) {\n        if (result[letters[i]]) {\n            result[letters[i]]++;\n        } else {\n            result[letters[i]] = 1;\n        }\n        if (result[letters[i]] > max) {\n            max = result[letters[i]];\n            maxLetters = [letters[i]];\n        } else if (result[letters[i]] === max) {\n            maxLetters.push(letters[i]);\n        }\n    }\n    return {[maxLetters.join(\" \")]: max};\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  'b a': 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmptk_w_koz.js:30:12)\n    at Object.<anonymous> (/tmp/tmptk_w_koz.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { 'b a': 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334932
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let hist: {[key: string]: number} = {};\n    for (let i = 0; i < test.length; i++) {\n        if (hist[test[i]] === undefined) {\n            hist[test[i]] = 1;\n        } else {\n            hist[test[i]] += 1;\n        }\n    }\n    return hist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmp4b0ppa5g.js:20:12)\n    at Object.<anonymous> (/tmp/tmp4b0ppa5g.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334932
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let hist: {[key: string]: number} = {};\n    for (let i = 0; i < test.length; i++) {\n        if (hist[test[i]]) {\n            hist[test[i]] += 1;\n        } else {\n            hist[test[i]] = 1;\n        }\n    }\n    return hist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmp0fladn6v.js:20:12)\n    at Object.<anonymous> (/tmp/tmp0fladn6v.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334926
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    test.split(\"\").forEach(letter => {\n        if (result[letter]) {\n            result[letter]++;\n        } else {\n            result[letter] = 1;\n        }\n        if (result[letter] > max) {\n            max = result[letter];\n            maxLetters = [letter];\n        } else if (result[letter] === max) {\n            maxLetters.push(letter);\n        }\n    });\n    return {[maxLetters.join(\"\")]: max};\n}\n\nconsole.log(histogram(\"abbccc\")); // {c: 3}\nconsole.log(histogram(\"abbcccddddeeeee\")); // {e: 5}\nconsole.log(histogram(\"abbcccddddeeeeeffffff\")); // {f: 6}\nconsole.log(histogram(\"abbcccddddeeeeeffffffgggggg\")); // {g: 7}\nconsole.log(histogram(\"abbcccddddeeeeeffffffggggggaaaaaaa\")); // {a: 8}\nconsole.log(histogram(\"abbcccddddeeeeeffffffggggggaaaaaaaabbbbbbbbbb\")); // {b: 11}\nconsole.log(histogram(\"abbcccddddeeeeeffffffggggggaaaaaaaabbbbbbbbbbcccccccccc\")); // {c: 12}\nconsole.log(histogram(\"abbcccddddeeeeeffffffggggggaaaaaaaabbbbbbbbbbccccccccccddddddddddd\")); // {d: 13}\nconsole.log(histogram(\"abbcccddddeeeeeffffffggggggaaaaaaaabbbbbbbbbbccccccccccdddddddddddeeeeeeeeeee\")); // {e: 14}\nconsole.log(histogram(\"abbcccddddeeeeeffffffggggggaaaaaaaabbbbbbbbbbccccccccccdddddddddddeeeeeeeeeeefffffffffff\")); // {f: 15}\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpc1dewdmc.js:40:12)\n    at Object.<anonymous> (/tmp/tmpc1dewdmc.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "{ c: 3 }\n{ e: 5 }\n{ f: 6 }\n{ fg: 6 }\n{ a: 8 }\n{ b: 12 }\n{ c: 13 }\n{ d: 15 }\n{ e: 16 }\n{ f: 17 }\n",
      "timestamp": 1660334932
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxKeys: string[] = [];\n    for (let i: number = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxKeys = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxKeys.push(test[i]);\n        }\n    }\n    return {[maxKeys.join('')]: max};\n}\n\nconsole.log(histogram('aabbbcccc'));\nconsole.log(histogram('aabbbccccdddd'));\nconsole.log(histogram('aabbbccccddddeeeee'));\nconsole.log(histogram('aabbbccccddddeeeeeffffff'));\nconsole.log(histogram('aabbbccccddddeeeeeffffffggggggg'));\nconsole.log(histogram('aabbbccccddddeeeeeffffffggggggghhhhhhhh'));\nconsole.log(histogram('aabbbccccddddeeeeeffffffggggggghhhhhhhhiiiiiiii'));\nconsole.log(histogram('aabbbccccddddeeeeeffffffggggggghhhhhhhhiiiiiiiijjjjjjjjj'));\nconsole.log(histogram('aabbbccccddddeeeeeffffffggggggghhhhhhhhiiiiiiiijjjjjjjjjkkkkkkkkkk'));\nconsole.log(histogram('aabbbccccddddeeeeeffffffggggggghhhhhhhhiiiiiiiijjjjjjjjjkkkkkkkkkklllllllllll'));\nconsole.log(histogram('aabbbccccddddeeeeeffffffggggggghhhhhhhhiiiiiiiijjjjjjjjjkkkkkkkkkklllllllllllmmmmmmmmmmmmmm'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpls72g6uf.js:40:12)\n    at Object.<anonymous> (/tmp/tmpls72g6uf.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "{ c: 4 }\n{ cd: 4 }\n{ e: 5 }\n{ f: 6 }\n{ g: 7 }\n{ h: 8 }\n{ hi: 8 }\n{ j: 9 }\n{ k: 10 }\n{ l: 11 }\n{ m: 14 }\n",
      "timestamp": 1660334933
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\n\nconsole.log(histogram('aabbbccc')); // {a: 2, b: 3, c: 3}\nconsole.log(histogram('aabbcc')); // {a: 2, b: 2, c: 2}\nconsole.log(histogram('abbbcc')); // {b: 3, c: 2}\nconsole.log(histogram('abbcc')); // {b: 2, c: 2}\nconsole.log(histogram('abcc')); // {a: 1, b: 1, c: 2}\nconsole.log(histogram('a')); // {a: 1}\nconsole.log(histogram('')); // {}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmp9p94bub1.js:36:12)\n    at Object.<anonymous> (/tmp/tmp9p94bub1.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "{ bc: 3 }\n{ abc: 2 }\n{ b: 3 }\n{ bc: 2 }\n{ c: 2 }\n{ a: 1 }\n{ '': 0 }\n",
      "timestamp": 1660334933
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmps_xubo_y.js:20:12)\n    at Object.<anonymous> (/tmp/tmps_xubo_y.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334933
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    let letters: string[] = test.split(\" \");\n    for (let letter of letters) {\n        if (result[letter] === undefined) {\n            result[letter] = 1;\n        } else {\n            result[letter]++;\n        }\n        if (result[letter] > max) {\n            max = result[letter];\n            maxLetters = [letter];\n        } else if (result[letter] === max) {\n            maxLetters.push(letter);\n        }\n    }\n    return {[maxLetters.join(\" \")]: max};\n}\n\nconsole.log(histogram(\"a b c d e f\")); // {a: 1, b: 1, c: 1, d: 1, e: 1, f: 1}\nconsole.log(histogram(\"a b c d e f aa bb cc dd ee ff\")); // {aa: 2, bb: 2, cc: 2, dd: 2, ee: 2, ff: 2}\nconsole.log(histogram(\"a b c d e f aa bb cc dd ee ff aaa\")); // {aaa: 1}\nconsole.log(histogram(\"a b c d e f aa bb cc dd ee ff aaa aa\")); // {aa: 3}\nconsole.log(histogram(\"a b c d e f aa bb cc dd ee ff aaa aa bb\")); // {aa: 3, bb: 3}\nconsole.log(histogram(\"a b c d e f aa bb cc dd ee ff aaa aa bb aaa\")); // {aaa: 3}\nconsole.log(histogram(\"a b c d e f aa bb cc dd ee ff aaa aa bb aaa bb\")); // {bb: 4}\nconsole.log(histogram(\"a b c d e f aa bb cc dd ee ff aaa aa bb aaa bb cc\")); // {bb: 4, cc: 4}\nconsole.log(histogram\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp08tpkxwj.ts(35,1): error TS1005: ',' expected.\n../../../../tmp/tmp08tpkxwj.ts(35,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334933
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let histogram: {[key: string]: number} = {};\n    for (let i = 0; i < test.length; i++) {\n        if (histogram[test[i]]) {\n            histogram[test[i]]++;\n        } else {\n            histogram[test[i]] = 1;\n        }\n    }\n    return histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmp5db9apsw.js:20:12)\n    at Object.<anonymous> (/tmp/tmp5db9apsw.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334926
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let hist: {[key: string]: number} = {};\n    for (let i = 0; i < test.length; i++) {\n        if (hist[test[i]]) {\n            hist[test[i]] += 1;\n        } else {\n            hist[test[i]] = 1;\n        }\n    }\n    return hist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmp0fladn6v.js:20:12)\n    at Object.<anonymous> (/tmp/tmp0fladn6v.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334926
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let maxCount: number = 0;\n    let maxLetter: string = '';\n    for (let i: number = 0; i < test.length; i++) {\n        if (result[test[i]] === undefined) {\n            result[test[i]] = 1;\n        } else {\n            result[test[i]]++;\n        }\n        if (result[test[i]] > maxCount) {\n            maxCount = result[test[i]];\n            maxLetter = test[i];\n        }\n    }\n    for (let key in result) {\n        if (result[key] !== maxCount) {\n            delete result[key];\n        }\n    }\n    return result;\n}\nconsole.log(histogram('abbccc')); // {c: 3}\nconsole.log(histogram('abbcccc')); // {c: 4}\nconsole.log(histogram('abbccccc')); // {c: 5}\nconsole.log(histogram('abbcccccc')); // {c: 6}\nconsole.log(histogram('abbccccccc')); // {c: 7}\nconsole.log(histogram('abbcccccccc')); // {c: 8}\nconsole.log(histogram('abbccccccccc')); // {c: 9}\nconsole.log(histogram('abbcccccccccc')); // {c: 10}\nconsole.log(histogram('abbccccccccccc')); // {c: 11}\nconsole.log(histogram('abbcccccccccccc')); // {c: 12}\nconsole.log(histogram('abbccccccccccccc')); // {c: 13}\nconsole.log(histogram('abbcccccccccccccc')); // {c: 14}\nconsole.log(histogram('abbccccccccccccccc')); // {c: 15}\nconsole.log(histogram('abbcccccccccccccccc')); // {c: 16}\nconsole.log(histogram('abbccccccccccccccccc'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmp5wg4kfrk.js:46:12)\n    at Object.<anonymous> (/tmp/tmp5wg4kfrk.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "{ c: 3 }\n{ c: 4 }\n{ c: 5 }\n{ c: 6 }\n{ c: 7 }\n{ c: 8 }\n{ c: 9 }\n{ c: 10 }\n{ c: 11 }\n{ c: 12 }\n{ c: 13 }\n{ c: 14 }\n{ c: 15 }\n{ c: 16 }\n{ c: 17 }\n",
      "timestamp": 1660334933
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetter: string = \"\";\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetter = test[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmp7iw20plq.js:26:12)\n    at Object.<anonymous> (/tmp/tmp7iw20plq.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334933
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i: number = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\n\nconsole.log(histogram('aabbbccccdddd')); // {c: 4}\nconsole.log(histogram('aabbccdddd')); // {d: 4}\nconsole.log(histogram('aabbccddddeee')); // {d: 4}\nconsole.log(histogram('aabbccddddeeeeff')); // {e: 5}\nconsole.log(histogram('aabbccddddeeeeffff')); // {e: 5}\nconsole.log(histogram('aabbccddddeeeeffffgg')); // {e: 5}\nconsole.log(histogram('aabbccddddeeeeffffgggg')); // {e: 5}\nconsole.log(histogram('aabbccddddeeeeffffgggggg')); // {e: 5}\nconsole.log(histogram('aabbccddddeeeeffffgggggggg')); // {e: 5}\nconsole.log(histogram('aabbccddddeeeeffffgggggggggg')); // {e: 5}\nconsole.log(histogram('aabbccddddeeeeffffgggggggggggg')); // {e: 5}\nconsole.log(histogram('aabbccddddeeeeffffgggggggggggggg')); // {e: 5}\nconsole.log(histogram('aabbccddddeeeeffffgggggggggggggggg')\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpl_0so4tp.ts(38,1): error TS1005: ',' expected.\n../../../../tmp/tmpl_0so4tp.ts(38,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334933
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    test.split(\"\").forEach(letter => {\n        if (result[letter]) {\n            result[letter]++;\n        } else {\n            result[letter] = 1;\n        }\n        if (result[letter] > max) {\n            max = result[letter];\n            maxLetters = [letter];\n        } else if (result[letter] === max) {\n            maxLetters.push(letter);\n        }\n    });\n    return {[maxLetters.join(\"\")]: max};\n}\n\nconsole.log(histogram(\"aabbbccc\"));\nconsole.log(histogram(\"aabbbcccdddd\"));\nconsole.log(histogram(\"aabbbcccddddeeee\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpoq67blyv.js:32:12)\n    at Object.<anonymous> (/tmp/tmpoq67blyv.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "{ bc: 3 }\n{ d: 4 }\n{ de: 4 }\n",
      "timestamp": 1660334933
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i: number = 0; i < test.length; i++) {\n        if (result[test[i]] === undefined) {\n            result[test[i]] = 1;\n        } else {\n            result[test[i]]++;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join(\"\")]: max};\n}\n\nconsole.log(histogram(\"aabbbccc\")); // {a: 2, b: 3, c: 3}\nconsole.log(histogram(\"aabbccdddd\")); // {d: 4}\nconsole.log(histogram(\"aabbccddddeeee\")); // {e: 4}\nconsole.log(histogram(\"aabbccddddeeeeffffff\")); // {f: 6}\nconsole.log(histogram(\"aabbccddddeeeeffffffgggggg\")); // {g: 7}\nconsole.log(histogram(\"aabbccddddeeeeffffffggggggaaaaaaaaa\")); // {a: 9}\nconsole.log(histogram(\"aabbccddddeeeeffffffggggggaaaaaaaaabbbbbbbbbb\")); // {b: 11}\nconsole.log(histogram(\"aabbccddddeeeeffffffggggggaaaaaaaaabbbbbbbbbbcccccccccc\")); // {c: 12}\nconsole.log(histogram(\"aabbccddddeeeeffffffggggggaaaaaaaaabbbbbbbbbbccccccccccdddddddddd\")); // {d: 13}\nconsole.log(histogram(\"aabbccddddeeeeffffffggggggaaaaaaaaabbbbbbbbbbccccccccccddddddddddeeeeeeeeeeee\")); // {e: 16}\nconsole.log(histogram(\"\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpfgdmlpcn.ts(35,24): error TS1002: Unterminated string literal.\n../../../../tmp/tmpfgdmlpcn.ts(36,1): error TS1005: ',' expected.\n../../../../tmp/tmpfgdmlpcn.ts(36,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334933
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let histogram: {[key: string]: number} = {};\n    for (let i = 0; i < test.length; i++) {\n        if (histogram[test[i]]) {\n            histogram[test[i]]++;\n        } else {\n            histogram[test[i]] = 1;\n        }\n    }\n    return histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmp5db9apsw.js:20:12)\n    at Object.<anonymous> (/tmp/tmp5db9apsw.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334926
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let histogram: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i: number = 0; i < test.length; i++) {\n        if (histogram[test[i]]) {\n            histogram[test[i]]++;\n        } else {\n            histogram[test[i]] = 1;\n        }\n        if (histogram[test[i]] > max) {\n            max = histogram[test[i]];\n            maxLetters = [test[i]];\n        } else if (histogram[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\n\nconsole.log(histogram('aabbbccdddd'));\nconsole.log(histogram('aabbbccddddee'));\nconsole.log(histogram('aabbbccddddeeff'));\nconsole.log(histogram('aabbbccddddeeffgg'));\nconsole.log(histogram('aabbbccddddeeffgggg'));\nconsole.log(histogram('aabbbccddddeeffgggggg'));\nconsole.log(histogram('aabbbccddddeeffgggggggg'));\nconsole.log(histogram('aabbbccddddeeffgggggggggg'));\nconsole.log(histogram('aabbbccddddeeffgggggggggggg'));\nconsole.log(histogram('aabbbccddddeeffgggggggggggggg'));\nconsole.log(histogram('aabbbccddddeeffgggggggggggggggg'));\nconsole.log(histogram('aabbbccddddeeffgggggggggggggggggg'));\nconsole.log(histogram('aabbbccddddeeffgggggggggggggggggggg'));\nconsole.log(histogram('aabbbccddddeeffgggggggggggggggggggggg'));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmph9u2g8rh.js:44:12)\n    at Object.<anonymous> (/tmp/tmph9u2g8rh.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "{ d: 4 }\n{ d: 4 }\n{ d: 4 }\n{ d: 4 }\n{ dg: 4 }\n{ g: 6 }\n{ g: 8 }\n{ g: 10 }\n{ g: 12 }\n{ g: 14 }\n{ g: 16 }\n{ g: 18 }\n{ g: 20 }\n{ g: 22 }\n",
      "timestamp": 1660334933
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let histogram: {[key: string]: number} = {};\n    for (let i = 0; i < test.length; i++) {\n        if (histogram[test[i]]) {\n            histogram[test[i]]++;\n        } else {\n            histogram[test[i]] = 1;\n        }\n    }\n    return histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmp5db9apsw.js:20:12)\n    at Object.<anonymous> (/tmp/tmp5db9apsw.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334926
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let histogram: {[key: string]: number} = {};\n    for (let i = 0; i < test.length; i++) {\n        if (histogram[test[i]]) {\n            histogram[test[i]] += 1;\n        } else {\n            histogram[test[i]] = 1;\n        }\n    }\n    return histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmp8zbsyi8o.js:20:12)\n    at Object.<anonymous> (/tmp/tmp8zbsyi8o.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334933
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let dict: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i = 0; i < test.length; i++) {\n        if (dict[test[i]]) {\n            dict[test[i]]++;\n        } else {\n            dict[test[i]] = 1;\n        }\n        if (dict[test[i]] > max) {\n            max = dict[test[i]];\n            maxLetters = [test[i]];\n        } else if (dict[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\n\nconsole.log(histogram('aabbccdddd'));\nconsole.log(histogram('aabbccddddeee'));\nconsole.log(histogram('aabbccddddeeeee'));\nconsole.log(histogram('aabbccddddeeeeefffff'));\nconsole.log(histogram('aabbccddddeeeeefffffgggggg'));\nconsole.log(histogram('aabbccddddeeeeefffffgggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpj8il9d5g.ts(30,486): error TS1002: Unterminated string literal.\n../../../../tmp/tmpj8il9d5g.ts(31,1): error TS1005: ',' expected.\n../../../../tmp/tmpj8il9d5g.ts(31,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334933
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let hist: {[key: string]: number} = {};\n    for (let i = 0; i < test.length; i++) {\n        if (hist[test[i]]) {\n            hist[test[i]] += 1;\n        } else {\n            hist[test[i]] = 1;\n        }\n    }\n    return hist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmp0fladn6v.js:20:12)\n    at Object.<anonymous> (/tmp/tmp0fladn6v.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334926
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]] += 1;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\nconsole.log(histogram('abcccccddddeeeeeffffff'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmp8t1h3v08.js:30:12)\n    at Object.<anonymous> (/tmp/tmp8t1h3v08.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "{ f: 6 }\n",
      "timestamp": 1660334933
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max = 0;\n    let maxLetter = '';\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetter = test[i];\n        }\n    }\n    return {[maxLetter]: max};\n}\nconsole.log(histogram('abracadabra'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpmwxu_26y.js:27:12)\n    at Object.<anonymous> (/tmp/tmpmwxu_26y.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "{ a: 5 }\n",
      "timestamp": 1660334933
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let dict: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i = 0; i < test.length; i++) {\n        if (dict[test[i]]) {\n            dict[test[i]]++;\n        } else {\n            dict[test[i]] = 1;\n        }\n        if (dict[test[i]] > max) {\n            max = dict[test[i]];\n            maxLetters = [test[i]];\n        } else if (dict[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\n\nconsole.log(histogram('aabbbccdddd'));\nconsole.log(histogram('aabbbccddddeeeeeeee'));\nconsole.log(histogram('aabbbccddddeeeeeeeeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpd67666n6.ts(27,1155): error TS1002: Unterminated string literal.\n../../../../tmp/tmpd67666n6.ts(28,1): error TS1005: ',' expected.\n../../../../tmp/tmpd67666n6.ts(28,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334933
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    const letters = test.split(\" \");\n    const letterCounts: {[key: string]: number} = {};\n    let maxCount = 0;\n    for (const letter of letters) {\n        if (letterCounts[letter]) {\n            letterCounts[letter]++;\n        } else {\n            letterCounts[letter] = 1;\n        }\n        if (letterCounts[letter] > maxCount) {\n            maxCount = letterCounts[letter];\n        }\n    }\n    const result: {[key: string]: number} = {};\n    for (const letter in letterCounts) {\n        if (letterCounts[letter] === maxCount) {\n            result[letter] = letterCounts[letter];\n        }\n    }\n    return result;\n}\n\nconsole.log(histogram(\"a b c d e f\")); // {a: 1, b: 1, c: 1, d: 1, e: 1, f: 1}\nconsole.log(histogram(\"a b c d e f aa bb cc dd ee\")); // {a: 2, b: 2, c: 2, d: 2, e: 2}\nconsole.log(histogram(\"a b c d e f aa bb cc dd ee aaa\")); // {a: 3}\nconsole.log(histogram(\"a b c d e f aa bb cc dd ee aaa bbb\")); // {a: 3, b: 3}\nconsole.log(histogram(\"a b c d e f aa bb cc dd ee aaa bbb ccc\")); // {a: 3, b: 3, c: 3}\nconsole.log(histogram(\"a b c d e f aa bb cc dd ee aaa bbb ccc ddd\")); // {a: 3, b: 3, c: 3, d: 3}\nconsole.log(histogram(\"a b c d e f aa bb cc dd ee aaa bbb ccc ddd eee\")); // {a: 3, b: 3, c: 3, d: 3, e: 3}\nconsole.log(histogram(\"a b c d e f aa\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjdas7nl7.ts(35,38): error TS1002: Unterminated string literal.\n../../../../tmp/tmpjdas7nl7.ts(36,1): error TS1005: ',' expected.\n../../../../tmp/tmpjdas7nl7.ts(36,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334933
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let hist: {[key: string]: number} = {};\n    for (let i = 0; i < test.length; i++) {\n        if (hist[test[i]]) {\n            hist[test[i]]++;\n        } else {\n            hist[test[i]] = 1;\n        }\n    }\n    return hist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpd9g8slnb.js:20:12)\n    at Object.<anonymous> (/tmp/tmpd9g8slnb.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334922
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetter: string = '';\n    for (let i: number = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetter = test[i];\n        }\n    }\n    for (let key in result) {\n        if (result[key] !== max) {\n            delete result[key];\n        }\n    }\n    return result;\n}\n\nconsole.log(histogram('aabbcc')); // {a: 2, b: 2, c: 2}\nconsole.log(histogram('aabbccdd')); // {a: 2, b: 2, c: 2, d: 2}\nconsole.log(histogram('abc')); // {a: 1, b: 1, c: 1}\nconsole.log(histogram('aabbccddeeff')); // {a: 2, b: 2, c: 2, d: 2, e: 2, f: 2}\nconsole.log(histogram('aabbccddeeffgg')); // {a: 2, b: 2, c: 2, d: 2, e: 2, f: 2, g: 2}\nconsole.log(histogram('aabbccddeeffgghh')); // {a: 2, b: 2, c: 2, d: 2, e: 2, f: 2, g: 2, h: 2}\nconsole.log(histogram('aabbccddeeffgghhiijj')); // {a: 2, b: 2, c: 2, d: 2, e: 2, f: 2, g: 2, h: 2, i: 2, j: 2}\nconsole.log(histogram('aabbccddeeffgghhiijjkkll')); // {a: 2, b: 2, c: 2, d: 2, e: 2\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpe9v3i4pe.js:39:12)\n    at Object.<anonymous> (/tmp/tmpe9v3i4pe.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "{ a: 2, b: 2, c: 2 }\n{ a: 2, b: 2, c: 2, d: 2 }\n{ a: 1, b: 1, c: 1 }\n{ a: 2, b: 2, c: 2, d: 2, e: 2, f: 2 }\n{ a: 2, b: 2, c: 2, d: 2, e: 2, f: 2, g: 2 }\n{ a: 2, b: 2, c: 2, d: 2, e: 2, f: 2, g: 2, h: 2 }\n{ a: 2, b: 2, c: 2, d: 2, e: 2, f: 2, g: 2, h: 2, i: 2, j: 2 }\n{\n  a: 2,\n  b: 2,\n  c: 2,\n  d: 2,\n  e: 2,\n  f: 2,\n  g: 2,\n  h: 2,\n  i: 2,\n  j: 2,\n  k: 2,\n  l: 2\n}\n",
      "timestamp": 1660334934
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    let letters: string[] = test.split(\" \");\n    for (let letter of letters) {\n        if (result[letter] === undefined) {\n            result[letter] = 1;\n        } else {\n            result[letter]++;\n        }\n        if (result[letter] > max) {\n            max = result[letter];\n            maxLetters = [letter];\n        } else if (result[letter] === max) {\n            maxLetters.push(letter);\n        }\n    }\n    return {[maxLetters.join(\" \")]: max};\n}\n\nconsole.log(histogram(\"a b c d e f\")); // {a: 1, b: 1, c: 1, d: 1, e: 1, f: 1}\nconsole.log(histogram(\"a b c d e f a b c d e f\")); // {a: 2, b: 2, c: 2, d: 2, e: 2, f: 2}\nconsole.log(histogram(\"a b c d e f a b c d e f a b c d e f\")); // {a: 3, b: 3, c: 3, d: 3, e: 3, f: 3}\nconsole.log(histogram(\"a b c d e f a b c d e f a b c d e f a b c d e f\")); // {a: 4, b: 4, c: 4, d: 4, e: 4, f: 4}\nconsole.log(histogram(\"a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f\")); // {a: 5, b: 5, c: 5, d: 5, e: 5, f: 5}\nconsole.log(histogram(\"a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f\")); // {a: 6, b: 6, c: 6, d: 6, e: 6,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  'b a': 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpukpbz6x5.js:36:12)\n    at Object.<anonymous> (/tmp/tmpukpbz6x5.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { 'b a': 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "{ 'a b c d e f': 1 }\n{ 'a b c d e f': 2 }\n{ 'a b c d e f': 3 }\n{ 'a b c d e f': 4 }\n{ 'a b c d e f': 5 }\n{ 'a b c d e f': 6 }\n",
      "timestamp": 1660334935
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result = {};\n    let max = 0;\n    let maxKeys = [];\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxKeys = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxKeys.push(test[i]);\n        }\n    }\n    return {[maxKeys.join('')]: max};\n}\n\nconsole.log(histogram('aabbbccddddd'));\nconsole.log(histogram('aabbbccdddddeeeee'));\nconsole.log(histogram('aabbbccdddddeeeeefffff'));\nconsole.log(histogram('aabbbccdddddeeeeefffffgggggg'));\nconsole.log(histogram('aabbbccdddddeeeeefffffgggggghhhhhhh'));\nconsole.log(histogram('aabbbccdddddeeeeefffffgggggghhhhhhhiiiiiiii'));\nconsole.log(histogram('aabbbccdddddeeeeefffffgggggghhhhhhhiiiiiiiijjjjjjjjjj'));\nconsole.log(histogram('aabbbccdddddeeeeefffffgggggghhhhhhhiiiiiiiijjjjjjjjjjkkkkkkkkkkk'));\nconsole.log(histogram('aabbbccdddddeeeeefffffgggggghhhhhhhiiiiiiiijjjjjjjjjjkkkkkkkkkkkllllllllllll'));\nconsole.log(histogram('aabbbccdddddeeeeefffffgggggghhhhhhhiiiiiiiijjjjjjjjjjkkkkkkkkkkkllllllllllllmmmmmmmmmmmmmm'));\nconsole.log(histogram('aabbbccdddddeeeeefffffgggggghhhhhhhiiiiiiiijjjjjjjjjjkkkk\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpoafnkb3v.ts(35,81): error TS1002: Unterminated string literal.\n../../../../tmp/tmpoafnkb3v.ts(36,1): error TS1005: ',' expected.\n../../../../tmp/tmpoafnkb3v.ts(36,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334935
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\n\nconsole.log(histogram('aabbccdddd')); // {d: 4}\nconsole.log(histogram('aabbccddddeee')); // {e: 3}\nconsole.log(histogram('aabbccddddeeeeee')); // {e: 6}\nconsole.log(histogram('aabbccddddeeeeeeff')); // {e: 6}\nconsole.log(histogram('aabbccddddeeeeeeffgg')); // {e: 6}\nconsole.log(histogram('aabbccddddeeeeeeffgggg')); // {g: 3}\nconsole.log(histogram('aabbccddddeeeeeeffgggggg')); // {g: 4}\nconsole.log(histogram('aabbccddddeeeeeeffgggggggg')); // {g: 5}\nconsole.log(histogram('aabbccddddeeeeeeffgggggggggg')); // {g: 6}\nconsole.log(histogram('aabbccddddeeeeeeffgggggggggggg')); // {g: 7}\nconsole.log(histogram('aabbccddddeeeeeeffgggggggggggggg')); // {g: 8}\nconsole.log(histogram('aabbccddddeeeeeeffgggggggggggggggg')); // {g: 9}\nconsole.log(histogram('a\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_gazdoi2.ts(37,25): error TS1002: Unterminated string literal.\n../../../../tmp/tmp_gazdoi2.ts(38,1): error TS1005: ',' expected.\n../../../../tmp/tmp_gazdoi2.ts(38,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334935
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\n\nconsole.log(histogram('aabbbcccc')); // {a: 2, b: 3, c: 4}\nconsole.log(histogram('abbccc')); // {a: 1, b: 2, c: 3}\nconsole.log(histogram('abc')); // {a: 1, b: 1, c: 1}\nconsole.log(histogram('aabbbcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp8mfj_052.ts(28,501): error TS1002: Unterminated string literal.\n../../../../tmp/tmp8mfj_052.ts(29,1): error TS1005: ',' expected.\n../../../../tmp/tmp8mfj_052.ts(29,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334935
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let histo: {[key: string]: number} = {};\n    for (let i = 0; i < test.length; i++) {\n        if (histo[test[i]]) {\n            histo[test[i]]++;\n        } else {\n            histo[test[i]] = 1;\n        }\n    }\n    return histo;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpgpm71k1o.js:20:12)\n    at Object.<anonymous> (/tmp/tmpgpm71k1o.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334936
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i: number = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\n\nconsole.log(histogram('aabbccdddd')); // {d: 4}\nconsole.log(histogram('aabbccddddeee')); // {e: 3}\nconsole.log(histogram('aabbccddddeeee')); // {e: 4}\nconsole.log(histogram('aabbccddddeeeeff')); // {e: 4}\nconsole.log(histogram('aabbccddddeeeeffgg')); // {e: 4}\nconsole.log(histogram('aabbccddddeeeeffgghh')); // {e: 4}\nconsole.log(histogram('aabbccddddeeeeffgghhii')); // {e: 4}\nconsole.log(histogram('aabbccddddeeeeffgghhiiii')); // {i: 4}\nconsole.log(histogram('aabbccddddeeeeffgghhiiiii')); // {i: 5}\nconsole.log(histogram('aabbccddddeeeeffgghhiiiiijj')); // {i: 5}\nconsole.log(histogram('aabbccddddeeeeffgghhiiiiijjkk')); // {i: 5}\nconsole.log(histogram('aabbccddddeeeeffgghhiiiiijjkkll')); // {i: 5}\nconsole.log(histogram('aabbcc\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpms12p4ma.ts(37,30): error TS1002: Unterminated string literal.\n../../../../tmp/tmpms12p4ma.ts(38,1): error TS1005: ',' expected.\n../../../../tmp/tmpms12p4ma.ts(38,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334936
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]] === undefined) {\n            result[test[i]] = 1;\n        } else {\n            result[test[i]]++;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\n\nconsole.log(histogram('aabbbccc'));\nconsole.log(histogram('aabbbcccdddd'));\nconsole.log(histogram('aabbbcccddddeeeee'));\nconsole.log(histogram('aabbbcccddddeeeeeffffff'));\nconsole.log(histogram('aabbbcccddddeeeeeffffffgggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp4webhbl4.ts(29,517): error TS1002: Unterminated string literal.\n../../../../tmp/tmp4webhbl4.ts(30,1): error TS1005: ',' expected.\n../../../../tmp/tmp4webhbl4.ts(30,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334936
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    for (let i: number = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n        }\n    }\n    for (let key in result) {\n        if (result[key] < max) {\n            delete result[key];\n        }\n    }\n    return result;\n}\n\nconsole.log(histogram(\"aabbbcccc\")); // {a: 2, b: 3, c: 4}\nconsole.log(histogram(\"aaabbbccc\")); // {a: 3, b: 3, c: 3}\nconsole.log(histogram(\"aaabbbcccdddd\")); // {d: 4}\nconsole.log(histogram(\"aaabbbcccddddeeeeeeee\")); // {e: 9}\nconsole.log(histogram(\"aaabbbcccddddeeeeeeeefffffff\")); // {f: 7}\nconsole.log(histogram(\"aaabbbcccddddeeeeeeeefffffffgggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp98q0m4vb.ts(31,454): error TS1002: Unterminated string literal.\n../../../../tmp/tmp98q0m4vb.ts(32,1): error TS1005: ',' expected.\n../../../../tmp/tmp98q0m4vb.ts(32,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334936
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i: number = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\n\nconsole.log(histogram('abbccc')); // {c: 3}\nconsole.log(histogram('abbcccdddd')); // {d: 4}\nconsole.log(histogram('abbcccddddeeeee')); // {e: 5}\nconsole.log(histogram('abbcccddddeeeeeffffff')); // {f: 6}\nconsole.log(histogram('abbcccddddeeeeeffffffggggggg')); // {g: 7}\nconsole.log(histogram('abbcccddddeeeeeffffffggggggghhhhhhhh')); // {h: 8}\nconsole.log(histogram('abbcccddddeeeeeffffffggggggghhhhhhhhiiiiiiii')); // {i: 9}\nconsole.log(histogram('abbcccddddeeeeeffffffggggggghhhhhhhhiiiiiiiijjjjjjjjjj')); // {j: 10}\nconsole.log(histogram('abbcccddddeeeeeffffffggggggghhhhhhhhiiiiiiiijjjjjjjjjjkkkkkkkkkkk')); // {k: 11}\nconsole.log(histogram('abbcccddddeeeeeffffffggggggghhhhhhhhiiiiiiiijjjjjjjjjjkkkkkkkkkkkllllllllllll')); // {l: 12}\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprdk9iye9.ts(36,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334936
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetter: string[] = [];\n    for (let i: number = 0; i < test.length; i++) {\n        if (result[test[i]] === undefined) {\n            result[test[i]] = 1;\n        } else {\n            result[test[i]]++;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetter = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetter.push(test[i]);\n        }\n    }\n    return {[maxLetter.join('')]: max};\n}\nconsole.log(histogram('aabbbcc'));\nconsole.log(histogram('aabbbcccc'));\nconsole.log(histogram('aabbbccccdddd'));\nconsole.log(histogram('aabbbccccddddeeeeeeeeee'));\nconsole.log(histogram('aabbbccccddddeeeeeeeeeeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpc7au7h59.ts(28,1027): error TS1002: Unterminated string literal.\n../../../../tmp/tmpc7au7h59.ts(29,1): error TS1005: ',' expected.\n../../../../tmp/tmpc7au7h59.ts(29,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334937
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i: number = 0; i < test.length; i++) {\n        if (result[test[i]] === undefined) {\n            result[test[i]] = 1;\n        } else {\n            result[test[i]]++;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\n\nconsole.log(histogram('aabbbcccc'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmps_y_mxh_.js:30:12)\n    at Object.<anonymous> (/tmp/tmps_y_mxh_.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "{ c: 4 }\n",
      "timestamp": 1660334937
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]] === undefined) {\n            result[test[i]] = 1;\n        } else {\n            result[test[i]]++;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\n\nconsole.log(histogram('aabbbcccdddd'));\nconsole.log(histogram('aabbbcccdddde'));\nconsole.log(histogram('aabbbbcccdddde'));\nconsole.log(histogram('aabbbbcccddddee'));\nconsole.log(histogram('aabbbbcccddddeee'));\nconsole.log(histogram('aabbbbcccddddeeee'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmp_kcpvqrg.js:35:12)\n    at Object.<anonymous> (/tmp/tmp_kcpvqrg.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "{ d: 4 }\n{ d: 4 }\n{ bd: 4 }\n{ bd: 4 }\n{ bd: 4 }\n{ bde: 4 }\n",
      "timestamp": 1660334937
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let histogram: {[key: string]: number} = {};\n    for (let i = 0; i < test.length; i++) {\n        if (histogram[test[i]]) {\n            histogram[test[i]]++;\n        } else {\n            histogram[test[i]] = 1;\n        }\n    }\n    return histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmp5db9apsw.js:20:12)\n    at Object.<anonymous> (/tmp/tmp5db9apsw.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334926
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxKey: string = '';\n    for (let i: number = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxKey = test[i];\n        }\n    }\n    for (let key in result) {\n        if (result[key] < max) {\n            delete result[key];\n        }\n    }\n    return result;\n}\nconsole.log(histogram('aaabbbccc'));\nconsole.log(histogram('aabbbccc'));\nconsole.log(histogram('aabbbcccdddd'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmp__rr1jwg.js:34:12)\n    at Object.<anonymous> (/tmp/tmp__rr1jwg.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "{ a: 3, b: 3, c: 3 }\n{ b: 3, c: 3 }\n{ d: 4 }\n",
      "timestamp": 1660334937
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\n\nconsole.log(histogram('aabbbccc'));\nconsole.log(histogram('aabbbcccdddd'));\nconsole.log(histogram('aabbbcccddddeeee'));\nconsole.log(histogram('aabbbcccddddeeeefffff'));\nconsole.log(histogram('aabbbcccddddeeeefffffgggggg'));\nconsole.log(histogram('aabbbcccddddeeeefffffgggggghhhhh'));\nconsole.log(histogram('aabbbcccddddeeeefffffgggggghhhhhiiiiii'));\nconsole.log(histogram('aabbbcccddddeeeefffffgggggghhhhhiiiiiijjjjjjjj'));\nconsole.log(histogram('aabbbcccddddeeeefffffgggggghhhhhiiiiiijjjjjjjjkkkkkkkkkk'));\nconsole.log(histogram('aabbbcccddddeeeefffffgggggghhhhhiiiiiijjjjjjjjkkkkkkkkkkllllllllllll'));\nconsole.log(histogram('aabbbcccddddeeeefffffgggggghhhhhiiiiiijjjjjjjjkkkkkkkkkkllllllllllllmmmmmmmmmmmmmmmm'));\nconsole.log(histogram('aabbbcccddddeeeefffffgggggghhhhh\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmptxuiaddo.ts(36,56): error TS1002: Unterminated string literal.\n../../../../tmp/tmptxuiaddo.ts(37,1): error TS1005: ',' expected.\n../../../../tmp/tmptxuiaddo.ts(37,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334936
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let dict: {[key: string]: number} = {};\n    for (let i = 0; i < test.length; i++) {\n        let letter = test[i];\n        if (dict[letter]) {\n            dict[letter]++;\n        } else {\n            dict[letter] = 1;\n        }\n    }\n    return dict;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpl5yarqxo.js:21:12)\n    at Object.<anonymous> (/tmp/tmpl5yarqxo.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334937
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxKeys: string[] = [];\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxKeys = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxKeys.push(test[i]);\n        }\n    }\n    let finalResult: {[key: string]: number} = {};\n    for (let i = 0; i < maxKeys.length; i++) {\n        finalResult[maxKeys[i]] = max;\n    }\n    return finalResult;\n}\n\nconsole.log(histogram(\"abracadabra\")); // {a: 5, b: 2, r: 2, c: 1, d: 1}\nconsole.log(histogram(\"aabbccdd\")); // {a: 2, b: 2, c: 2, d: 2}\nconsole.log(histogram(\"aabbccddee\")); // {a: 2, b: 2, c: 2, d: 2, e: 2}\nconsole.log(histogram(\"aabbccddeef\")); // {a: 2, b: 2, c: 2, d: 2, e: 2, f: 1}\nconsole.log(histogram(\"aabbccddeeff\")); // {a: 2, b: 2, c: 2, d: 2, e: 2, f: 2}\nconsole.log(histogram(\"aabbccddeeffg\")); // {a: 2, b: 2, c: 2, d: 2, e: 2, f: 2, g: 1}\nconsole.log(histogram(\"aabbccddeeffgg\")); // {a: 2, b: 2, c: 2, d: 2, e: 2, f: 2, g: 2}\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpkj31a4u5.ts(37,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334936
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let dict: {[key: string]: number} = {};\n    for (let i = 0; i < test.length; i++) {\n        if (dict[test[i]]) {\n            dict[test[i]] += 1;\n        } else {\n            dict[test[i]] = 1;\n        }\n    }\n    return dict;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpcqirnxr1.js:20:12)\n    at Object.<anonymous> (/tmp/tmpcqirnxr1.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334937
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\n\nconsole.log(histogram('aabbbccccdddd'));\nconsole.log(histogram('aabbbccccddddeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpu9fxm05r.ts(26,1221): error TS1002: Unterminated string literal.\n../../../../tmp/tmpu9fxm05r.ts(27,1): error TS1005: ',' expected.\n../../../../tmp/tmpu9fxm05r.ts(27,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334937
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxKey: string = '';\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]] === undefined) {\n            result[test[i]] = 1;\n        } else {\n            result[test[i]] += 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxKey = test[i];\n        }\n    }\n    for (let key in result) {\n        if (result[key] !== max) {\n            delete result[key];\n        }\n    }\n    return result;\n}\nconsole.log(histogram('aabbccdd'));\nconsole.log(histogram('aabbccdddd'));\nconsole.log(histogram('aabbccddddeeee'));\nconsole.log(histogram('aabbccddddeeeeffff'));\nconsole.log(histogram('aabbccddddeeeeffffgggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpyfyw5ysd.ts(31,552): error TS1002: Unterminated string literal.\n../../../../tmp/tmpyfyw5ysd.ts(32,1): error TS1005: ',' expected.\n../../../../tmp/tmpyfyw5ysd.ts(32,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334937
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n  let result: {[key: string]: number} = {};\n  let max: number = 0;\n  let maxLetters: string[] = [];\n  let letters: string[] = test.split(\" \");\n  for (let i: number = 0; i < letters.length; i++) {\n    if (result[letters[i]]) {\n      result[letters[i]]++;\n    } else {\n      result[letters[i]] = 1;\n    }\n    if (result[letters[i]] > max) {\n      max = result[letters[i]];\n      maxLetters = [];\n      maxLetters.push(letters[i]);\n    } else if (result[letters[i]] === max) {\n      maxLetters.push(letters[i]);\n    }\n  }\n  return {[maxLetters.join(\" \")]: max};\n}\n\nconsole.log(histogram(\"a b c d e f\")); // {a: 1, b: 1, c: 1, d: 1, e: 1, f: 1}\nconsole.log(histogram(\"a a b b c c d d e e f f\")); // {a: 2, b: 2, c: 2, d: 2, e: 2, f: 2}\nconsole.log(histogram(\"a a b b c c d d e e f f a a b b c c d d e e f f\")); // {a: 4, b: 4, c: 4, d: 4, e: 4, f: 4}\nconsole.log(histogram(\"a a b b c c d d e e f f a a b b c c d d e e f f a a b b c c d d e e f f\")); // {a: 6, b: 6, c: 6, d: 6, e: 6, f: 6}\nconsole.log(histogram(\"a a b b c c d d e e f f a a b b c c d d e e f f a a b b c c d d e e f f a a b b c c d d e e f f\")); // {a: 8, b: 8, c: 8, d: 8, e: 8, f: 8\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  'b a': 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpvxomwasf.js:36:12)\n    at Object.<anonymous> (/tmp/tmpvxomwasf.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { 'b a': 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "{ 'a b c d e f': 1 }\n{ 'a b c d e f': 2 }\n{ 'a b c d e f': 4 }\n{ 'a b c d e f': 6 }\n{ 'a b c d e f': 8 }\n",
      "timestamp": 1660334937
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let hist: {[key: string]: number} = {};\n    for (let i = 0; i < test.length; i++) {\n        if (hist[test[i]]) {\n            hist[test[i]]++;\n        } else {\n            hist[test[i]] = 1;\n        }\n    }\n    return hist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpd9g8slnb.js:20:12)\n    at Object.<anonymous> (/tmp/tmpd9g8slnb.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334922
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i: number = 0; i < test.length; i++) {\n        if (result[test[i]] === undefined) {\n            result[test[i]] = 1;\n        } else {\n            result[test[i]]++;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join(\"\")]: max};\n}\n\nconsole.log(histogram(\"aabbbccc\")); // {a: 2, b: 3, c: 3}\nconsole.log(histogram(\"aabbcc\")); // {a: 2, b: 2, c: 2}\nconsole.log(histogram(\"abc\")); // {a: 1, b: 1, c: 1}\nconsole.log(histogram(\"\")); // {}\nconsole.log(histogram(\"aabbbcccdddd\")); // {a: 2, b: 3, c: 3, d: 4}\nconsole.log(histogram(\"aabbbcccddddeeeefffff\")); // {a: 2, b: 3, c: 3, d: 4, e: 5, f: 6}\nconsole.log(histogram(\"aabbbcccddddeeeefffffgggggg\")); // {a: 2, b: 3, c: 3, d: 4, e: 5, f: 6, g: 7}\nconsole.log(histogram(\"aabbbcccddddeeeefffffggggggaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpow4olt2e.ts(32,359): error TS1002: Unterminated string literal.\n../../../../tmp/tmpow4olt2e.ts(33,1): error TS1005: ',' expected.\n../../../../tmp/tmpow4olt2e.ts(33,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334937
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max = 0;\n    let maxLetters: string[] = [];\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\n\nconsole.log(histogram('abcccccddddeeeeeffffff')); // {f: 6}\nconsole.log(histogram('abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_bs86yq5.ts(26,617): error TS1002: Unterminated string literal.\n../../../../tmp/tmp_bs86yq5.ts(27,1): error TS1005: ',' expected.\n../../../../tmp/tmp_bs86yq5.ts(27,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334937
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let hist: {[key: string]: number} = {};\n    for (let i = 0; i < test.length; i++) {\n        if (hist[test[i]]) {\n            hist[test[i]]++;\n        } else {\n            hist[test[i]] = 1;\n        }\n    }\n    return hist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpd9g8slnb.js:20:12)\n    at Object.<anonymous> (/tmp/tmpd9g8slnb.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334922
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n        }\n    }\n    for (let key in result) {\n        if (result[key] !== max) {\n            delete result[key];\n        }\n    }\n    return result;\n}\n\nconsole.log(histogram(\"aaabbc\")); // {a: 3, b: 2}\nconsole.log(histogram(\"aabbbcc\")); // {a: 2, b: 3, c: 2}\nconsole.log(histogram(\"abbba\")); // {a: 2, b: 3}\nconsole.log(histogram(\"\")); // {}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpn0dtssbc.js:33:12)\n    at Object.<anonymous> (/tmp/tmpn0dtssbc.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "{ a: 3 }\n{ b: 3 }\n{ b: 3 }\n{}\n",
      "timestamp": 1660334938
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i: number = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\n\nconsole.log(histogram('aabbbcccc')); // {c: 4}\nconsole.log(histogram('aabbbccc')); // {a: 2, b: 3, c: 3}\nconsole.log(histogram('aabbbccccc')); // {c: 5}\nconsole.log(histogram('aabbbcccccc')); // {c: 6}\nconsole.log(histogram('aabbbcccccccc')); // {c: 7}\nconsole.log(histogram('aabbbccccccccc')); // {c: 8}\nconsole.log(histogram('aabbbcccccccccc')); // {c: 9}\nconsole.log(histogram('aabbbccccccccccc')); // {c: 10}\nconsole.log(histogram('aabbbcccccccccccc')); // {c: 11}\nconsole.log(histogram('aabbbccccccccccccc')); // {c: 12}\nconsole.log(histogram('aabbbcccccccccccccc')); // {c: 13}\nconsole.log(histogram('aabbbccccccccccccccc')); // {c: 14}\nconsole.log(histogram('aabbbcccccccccccccccc')); // {c: 15}\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjz2d3355.ts(39,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334938
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\n\nconsole.log(histogram('aabbbcccdddd'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmps_qnfnuo.js:30:12)\n    at Object.<anonymous> (/tmp/tmps_qnfnuo.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "{ d: 4 }\n",
      "timestamp": 1660334939
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let hist: {[key: string]: number} = {};\n    for (let i = 0; i < test.length; i++) {\n        if (hist[test[i]]) {\n            hist[test[i]]++;\n        } else {\n            hist[test[i]] = 1;\n        }\n    }\n    return hist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpd9g8slnb.js:20:12)\n    at Object.<anonymous> (/tmp/tmpd9g8slnb.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334922
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let hist: {[key: string]: number} = {};\n    for (let i = 0; i < test.length; i++) {\n        if (hist[test[i]]) {\n            hist[test[i]]++;\n        } else {\n            hist[test[i]] = 1;\n        }\n    }\n    return hist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpd9g8slnb.js:20:12)\n    at Object.<anonymous> (/tmp/tmpd9g8slnb.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334922
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i: number = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\nconsole.log(histogram('aabbcc'));\nconsole.log(histogram('aabbccdddd'));\nconsole.log(histogram('aabbccddddeee'));\nconsole.log(histogram('aabbccddddeeefff'));\nconsole.log(histogram('aabbccddddeeefffgggg'));\nconsole.log(histogram('aabbccddddeeefffgggghhhhh'));\nconsole.log(histogram('aabbccddddeeefffgggghhhhhiiiiii'));\nconsole.log(histogram('aabbccddddeeefffgggghhhhhiiiiiijjjjjjjj'));\nconsole.log(histogram('aabbccddddeeefffgggghhhhhiiiiiijjjjjjjjkkkkkkkkk'));\nconsole.log(histogram('aabbccddddeeefffgggghhhhhiiiiiijjjjjjjjkkkkkkkkkllllllllll'));\nconsole.log(histogram('aabbccddddeeefffgggghhhhhiiiiiijjjjjjjjkkkkkkkkkllllllllllmmmmmmmmmm'));\nconsole.log(histogram('aabbccddddeeefffgggghhhhhiiiiiijjjjjjjjkkkkkkkkkllllllllllmmmmmmmmmmnnnnnnnnnnn'));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpo3pf2ztl.ts(37,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334939
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    const hist: {[key: string]: number} = {};\n    for (const char of test) {\n        if (hist[char]) {\n            hist[char]++;\n        } else {\n            hist[char] = 1;\n        }\n    }\n    return hist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpzucv9_0m.js:20:12)\n    at Object.<anonymous> (/tmp/tmpzucv9_0m.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334928
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i: number = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\nconsole.log(histogram('aabbbcccc')); // {c: 4}\nconsole.log(histogram('aabbccdddd')); // {d: 4}\nconsole.log(histogram('aabbccddddeeee')); // {de: 4}\nconsole.log(histogram('aabbccddddeeeefffff')); // {f: 5}\nconsole.log(histogram('aabbccddddeeeefffffgggggg')); // {g: 7}\nconsole.log(histogram('aabbccddddeeeefffffgggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnfy5zhxw.ts(29,435): error TS1002: Unterminated string literal.\n../../../../tmp/tmpnfy5zhxw.ts(30,1): error TS1005: ',' expected.\n../../../../tmp/tmpnfy5zhxw.ts(30,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334939
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    const hist: {[key: string]: number} = {};\n    for (const char of test) {\n        if (hist[char]) {\n            hist[char]++;\n        } else {\n            hist[char] = 1;\n        }\n    }\n    return hist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpzucv9_0m.js:20:12)\n    at Object.<anonymous> (/tmp/tmpzucv9_0m.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334928
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\n\nconsole.log(histogram('aabbcc')); // {a: 2, b: 2, c: 2}\nconsole.log(histogram('aabbccdddd')); // {d: 4}\nconsole.log(histogram('aabbccddddeeee')); // {e: 4}\nconsole.log(histogram('aabbccddddeeeeffffff')); // {f: 6}\nconsole.log(histogram('aabbccddddeeeeffffffgggggg')); // {g: 7}\nconsole.log(histogram('aabbccddddeeeeffffffgggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0hyz1cjn.ts(30,426): error TS1002: Unterminated string literal.\n../../../../tmp/tmp0hyz1cjn.ts(31,1): error TS1005: ',' expected.\n../../../../tmp/tmp0hyz1cjn.ts(31,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334939
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let dict: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i = 0; i < test.length; i++) {\n        if (dict[test[i]]) {\n            dict[test[i]]++;\n        } else {\n            dict[test[i]] = 1;\n        }\n        if (dict[test[i]] > max) {\n            max = dict[test[i]];\n            maxLetters = [test[i]];\n        } else if (dict[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\n\nconsole.log(histogram('aabbccddd')); // {a: 2, b: 2, c: 2, d: 3}\nconsole.log(histogram('aabbccddee')); // {a: 2, b: 2, c: 2, d: 2, e: 2}\nconsole.log(histogram('aabbccddeef')); // {a: 2, b: 2, c: 2, d: 2, e: 2, f: 1}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpyl4d2xot.js:32:12)\n    at Object.<anonymous> (/tmp/tmpyl4d2xot.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "{ d: 3 }\n{ abcde: 2 }\n{ abcde: 2 }\n",
      "timestamp": 1660334939
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmps_xubo_y.js:20:12)\n    at Object.<anonymous> (/tmp/tmps_xubo_y.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334933
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let dict: {[key: string]: number} = {};\n    for (let i = 0; i < test.length; i++) {\n        if (dict[test[i]]) {\n            dict[test[i]] += 1;\n        } else {\n            dict[test[i]] = 1;\n        }\n    }\n    return dict;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpcqirnxr1.js:20:12)\n    at Object.<anonymous> (/tmp/tmpcqirnxr1.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334937
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max = 0;\n    let maxLetters: string[] = [];\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\n\nconsole.log(histogram('aabbccdddd')); // {d: 4}\nconsole.log(histogram('aabbccddddeee')); // {e: 3}\nconsole.log(histogram('aabbccddddeeeeee')); // {e: 6}\nconsole.log(histogram('aabbccddddeeeeeeff')); // {e: 6}\nconsole.log(histogram('aabbccddddeeeeeeffgg')); // {e: 6}\nconsole.log(histogram('aabbccddddeeeeeeffgggg')); // {g: 2}\nconsole.log(histogram('aabbccddddeeeeeeffgggggg')); // {g: 3}\nconsole.log(histogram('aabbccddddeeeeeeffgggggggg')); // {g: 4}\nconsole.log(histogram('aabbccddddeeeeeeffgggggggggg')); // {g: 5}\nconsole.log(histogram('aabbccddddeeeeeeffgggggggggggg')); // {g: 6}\nconsole.log(histogram('aabbccddddeeeeeeffgggggggggggggg')); // {g: 7}\nconsole.log(histogram('aabbccddddeeeeeeffgggggggggggggggg')); // {g: 8}\nconsole.log(histogram('aabbcc\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp5i5t4w7f.ts(37,30): error TS1002: Unterminated string literal.\n../../../../tmp/tmp5i5t4w7f.ts(38,1): error TS1005: ',' expected.\n../../../../tmp/tmp5i5t4w7f.ts(38,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334939
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let histogram: {[key: string]: number} = {};\n    for (let i = 0; i < test.length; i++) {\n        let letter = test[i];\n        if (histogram[letter]) {\n            histogram[letter]++;\n        } else {\n            histogram[letter] = 1;\n        }\n    }\n    return histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmppsmf241j.js:21:12)\n    at Object.<anonymous> (/tmp/tmppsmf241j.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334926
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let dict: {[key: string]: number} = {};\n    for (let i = 0; i < test.length; i++) {\n        if (dict[test[i]]) {\n            dict[test[i]]++;\n        } else {\n            dict[test[i]] = 1;\n        }\n    }\n    return dict;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpe08bc1bh.js:20:12)\n    at Object.<anonymous> (/tmp/tmpe08bc1bh.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334930
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\n\nconsole.log(histogram('aabbbcccc')); // {c: 4}\nconsole.log(histogram('aabbbccccdddd')); // {d: 4}\nconsole.log(histogram('aabbbccccddddeeee')); // {e: 4}\nconsole.log(histogram('aabbbccccddddeeeefffff')); // {f: 5}\nconsole.log(histogram('aabbbccccddddeeeefffffgggggg')); // {g: 6}\nconsole.log(histogram('aabbbccccddddeeeefffffggggggaaaaaa')); // {a: 7}\nconsole.log(histogram('aabbbccccddddeeeefffffggggggaaaaaabbbbbb')); // {b: 8}\nconsole.log(histogram('aabbbccccddddeeeefffffggggggaaaaaabbbbbbcccccccc')); // {c: 9}\nconsole.log(histogram('aabbbccccddddeeeefffffggggggaaaaaabbbbbbccccccccddddddddd')); // {d: 10}\nconsole.log(histogram('aabbbccccddddeeeefffffggggggaaaaaabbbbbbccccccccdddddddddeeeeeeeeee')); // {e: 11}\nconsole.log(histogram('aabbbcccc\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmphxilsj25.ts(35,33): error TS1002: Unterminated string literal.\n../../../../tmp/tmphxilsj25.ts(36,1): error TS1005: ',' expected.\n../../../../tmp/tmphxilsj25.ts(36,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334940
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i: number = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\n\nconsole.log(histogram('aabbbcccc')); // {a: 2, b: 3, c: 4}\nconsole.log(histogram('aabbbccccdddd')); // {a: 2, b: 3, c: 4, d: 4}\nconsole.log(histogram('aabbbccccddddeeeee')); // {a: 2, b: 3, c: 4, d: 4, e: 5}\nconsole.log(histogram('aabbbccccddddeeeeeffffff')); // {a: 2, b: 3, c: 4, d: 4, e: 5, f: 6}\nconsole.log(histogram('aabbbccccddddeeeeeffffffgggggggg')); // {a: 2, b: 3, c: 4, d: 4, e: 5, f: 6, g: 8}\nconsole.log(histogram('aabbbccccddddeeeeeffffffgggggggghhhhhhhhh')); // {a: 2, b: 3, c: 4, d: 4, e: 5, f: 6, g: 8, h: 10}\nconsole.log(histogram('aabbbccccddddeeeeeffffffgggggggghhhhhhhhhiiiiiiiiii')); // {a: 2, b: 3, c: 4, d: 4, e: 5, f:\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpr_z4y_9o.js:36:12)\n    at Object.<anonymous> (/tmp/tmpr_z4y_9o.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "{ c: 4 }\n{ cd: 4 }\n{ e: 5 }\n{ f: 6 }\n{ g: 8 }\n{ h: 9 }\n{ i: 10 }\n",
      "timestamp": 1660334940
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\n\nconsole.log(histogram('hello'));\nconsole.log(histogram('aabbb'));\nconsole.log(histogram('abbba'));\nconsole.log(histogram('abbbb'));\nconsole.log(histogram('aabbbb'));\nconsole.log(histogram('abbbbb'));\nconsole.log(histogram('abbbbbb'));\nconsole.log(histogram('abbbbbbb'));\nconsole.log(histogram('abbbbbbbb'));\nconsole.log(histogram('abbbbbbbbb'));\nconsole.log(histogram('abbbbbbbbbb'));\nconsole.log(histogram('abbbbbbbbbbb'));\nconsole.log(histogram('abbbbbbbbbbbb'));\nconsole.log(histogram('abbbbbbbbbbbbb'));\nconsole.log(histogram('abbbbbbbbbbbbbb'));\nconsole.log(histogram('abbbbbbbbbbbbbbb'));\nconsole.log(histogram('abbbbbbbbbbbbbbbb'));\nconsole.log(histogram('abbbbbbbbbbbbbbbbb'));\nconsole.log(histogram('abbbbbbbbbbbbbbbbbb'));\nconsole.log(histogram('abbbbbbbbbbbbbbbbbbb'));\nconsole.log(histogram('abbbbbbbbbbbbbbbbbbbb'));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmph3c0c5aj.ts(46,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334940
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let dict: {[key: string]: number} = {};\n    for (let i = 0; i < test.length; i++) {\n        if (dict[test[i]]) {\n            dict[test[i]]++;\n        } else {\n            dict[test[i]] = 1;\n        }\n    }\n    return dict;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpe08bc1bh.js:20:12)\n    at Object.<anonymous> (/tmp/tmpe08bc1bh.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334930
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let histogram = {};\n    for (let i = 0; i < test.length; i++) {\n        if (histogram[test[i]]) {\n            histogram[test[i]]++;\n        } else {\n            histogram[test[i]] = 1;\n        }\n    }\n    return histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmprr0hxd6w.js:20:12)\n    at Object.<anonymous> (/tmp/tmprr0hxd6w.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334940
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxChars: string[] = [];\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxChars = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxChars.push(test[i]);\n        }\n    }\n    return {[maxChars.join('')]: max};\n}\n\nconsole.log(histogram('aabbccdddd'));\nconsole.log(histogram('aabbccddddeee'));\nconsole.log(histogram('aabbccddddeeeeee'));\nconsole.log(histogram('aabbccddddeeeeeeff'));\nconsole.log(histogram('aabbccddddeeeeeeffgg'));\nconsole.log(histogram('aabbccddddeeeeeeffgggg'));\nconsole.log(histogram('aabbccddddeeeeeeffgggggg'));\nconsole.log(histogram('aabbccddddeeeeeeffgggggggg'));\nconsole.log(histogram('aabbccddddeeeeeeffgggggggggg'));\nconsole.log(histogram('aabbccddddeeeeeeffgggggggggggg'));\nconsole.log(histogram('aabbccddddeeeeeeffgggggggggggggg'));\nconsole.log(histogram('aabbccddddeeeeeeffgggggggggggggggg'));\nconsole.log(histogram('aabbccddddeeeeeeffgggggggggggggggggg'));\nconsole.log(histogram('aabbccddddeeeeeeffgggggggggggggggggggg'));\nconsole.log(histogram('aabbccddddeeeeeeffgggggggggggggggggggg\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2j5uru7w.ts(39,62): error TS1002: Unterminated string literal.\n../../../../tmp/tmp2j5uru7w.ts(40,1): error TS1005: ',' expected.\n../../../../tmp/tmp2j5uru7w.ts(40,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334940
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i: number = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    let finalResult: {[key: string]: number} = {};\n    for (let i: number = 0; i < maxLetters.length; i++) {\n        finalResult[maxLetters[i]] = max;\n    }\n    return finalResult;\n}\nconsole.log(histogram(\"aabbccdddd\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpt7cswpj1.js:34:12)\n    at Object.<anonymous> (/tmp/tmpt7cswpj1.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "{ d: 4 }\n",
      "timestamp": 1660334940
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\nconsole.log(histogram('abcabcabc'));\nconsole.log(histogram('aaaaaaaaaa'));\nconsole.log(histogram('aabbccddee'));\nconsole.log(histogram('aabbccddeeffgghh'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpitmhn8wr.js:33:12)\n    at Object.<anonymous> (/tmp/tmpitmhn8wr.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "{ abc: 3 }\n{ a: 10 }\n{ abcde: 2 }\n{ abcdefgh: 2 }\n",
      "timestamp": 1660334941
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let histogram = {};\n    for (let i = 0; i < test.length; i++) {\n        if (histogram[test[i]]) {\n            histogram[test[i]]++;\n        } else {\n            histogram[test[i]] = 1;\n        }\n    }\n    return histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmprr0hxd6w.js:20:12)\n    at Object.<anonymous> (/tmp/tmprr0hxd6w.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334940
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]] += 1;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\n\nconsole.log(histogram('aabbccdd'));\nconsole.log(histogram('aabbccddee'));\nconsole.log(histogram('aabbccddeeff'));\nconsole.log(histogram('aabbccddeeffgg'));\nconsole.log(histogram('aabbccddeeffgghh'));\nconsole.log(histogram('aabbccddeeffgghhii'));\nconsole.log(histogram('aabbccddeeffgghhiijj'));\nconsole.log(histogram('aabbccddeeffgghhiijjkk'));\nconsole.log(histogram('aabbccddeeffgghhiijjkkll'));\nconsole.log(histogram('aabbccddeeffgghhiijjkkllmm'));\nconsole.log(histogram('aabbccddeeffgghhiijjkkllmmnn'));\nconsole.log(histogram('aabbccddeeffgghhiijjkkllmmnnoo'));\nconsole.log(histogram('aabbccddeeffgghhiijjkkllmmnnoopp'));\nconsole.log(histogram('aabbccddeeffgghhiijjkkllmmnnooppqq'));\nconsole.log(histogram('aabbccddeeffgghhiijjkkllmmnnooppqqrr'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpqy_mgv4m.js:44:12)\n    at Object.<anonymous> (/tmp/tmpqy_mgv4m.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "{ abcd: 2 }\n{ abcde: 2 }\n{ abcdef: 2 }\n{ abcdefg: 2 }\n{ abcdefgh: 2 }\n{ abcdefghi: 2 }\n{ abcdefghij: 2 }\n{ abcdefghijk: 2 }\n{ abcdefghijkl: 2 }\n{ abcdefghijklm: 2 }\n{ abcdefghijklmn: 2 }\n{ abcdefghijklmno: 2 }\n{ abcdefghijklmnop: 2 }\n{ abcdefghijklmnopq: 2 }\n{ abcdefghijklmnopqr: 2 }\n",
      "timestamp": 1660334941
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\nconsole.log(histogram('aabbbbcc')); // {a: 2, b: 4, c: 2}\nconsole.log(histogram('aabbbbcccc')); // {c: 4}\nconsole.log(histogram('aabbbbccccdddd')); // {d: 4}\nconsole.log(histogram('aabbbbccccddddeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpq3759ywz.ts(27,1006): error TS1002: Unterminated string literal.\n../../../../tmp/tmpq3759ywz.ts(28,1): error TS1005: ',' expected.\n../../../../tmp/tmpq3759ywz.ts(28,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334940
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let arr = test.split(\" \");\n    for (let i = 0; i < arr.length; i++) {\n        if (result[arr[i]]) {\n            result[arr[i]] += 1;\n        } else {\n            result[arr[i]] = 1;\n        }\n    }\n    let max = 0;\n    let maxKey = \"\";\n    for (let key in result) {\n        if (result[key] > max) {\n            max = result[key];\n            maxKey = key;\n        }\n    }\n    return {[maxKey]: max};\n}\nconsole.log(histogram(\"a b c d e f\"));\nconsole.log(histogram(\"a a b b b c c c\"));\nconsole.log(histogram(\"a a b b b c c c d d d d d d e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e e\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdda8asmr.ts(27,643): error TS1002: Unterminated string literal.\n../../../../tmp/tmpdda8asmr.ts(28,1): error TS1005: ',' expected.\n../../../../tmp/tmpdda8asmr.ts(28,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334940
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let hist: {[key: string]: number} = {};\n    for (let i = 0; i < test.length; i++) {\n        if (hist[test[i]]) {\n            hist[test[i]]++;\n        } else {\n            hist[test[i]] = 1;\n        }\n    }\n    return hist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpd9g8slnb.js:20:12)\n    at Object.<anonymous> (/tmp/tmpd9g8slnb.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334922
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let hist: {[key: string]: number} = {};\n    for (let i = 0; i < test.length; i++) {\n        if (hist[test[i]]) {\n            hist[test[i]]++;\n        } else {\n            hist[test[i]] = 1;\n        }\n    }\n    return hist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpd9g8slnb.js:20:12)\n    at Object.<anonymous> (/tmp/tmpd9g8slnb.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334922
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let hist: {[key: string]: number} = {};\n    for (let i = 0; i < test.length; i++) {\n        if (hist[test[i]]) {\n            hist[test[i]]++;\n        } else {\n            hist[test[i]] = 1;\n        }\n    }\n    return hist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpd9g8slnb.js:20:12)\n    at Object.<anonymous> (/tmp/tmpd9g8slnb.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334922
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result = {};\n    let max = 0;\n    let maxLetter = '';\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetter = test[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(histogram('aabbcc')); // {a: 2, b: 2, c: 2}\nconsole.log(histogram('abbba')); // {a: 1, b: 3}\nconsole.log(histogram('abcd')); // {a: 1, b: 1, c: 1, d: 1}\nconsole.log(histogram('aabbc')); // {a: 2, b: 2, c: 1}\nconsole.log(histogram('aaabbbccc')); // {a: 3, b: 3, c: 3}\nconsole.log(histogram('aaabbbcccdddd')); // {a: 3, b: 3, c: 3, d: 4}\nconsole.log(histogram('aaabbbcccddddeeeefffff')); // {a: 3, b: 3, c: 3, d: 4, e: 5, f: 5}\nconsole.log(histogram('aaabbbcccddddeeeefffffgggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvszdnnsm.ts(30,346): error TS1002: Unterminated string literal.\n../../../../tmp/tmpvszdnnsm.ts(31,1): error TS1005: ',' expected.\n../../../../tmp/tmpvszdnnsm.ts(31,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334940
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetter: string = '';\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetter = test[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpmjxt3hgn.js:26:12)\n    at Object.<anonymous> (/tmp/tmpmjxt3hgn.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334941
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    let letters: string[] = test.split(\" \");\n    for (let i: number = 0; i < letters.length; i++) {\n        if (result[letters[i]]) {\n            result[letters[i]]++;\n        } else {\n            result[letters[i]] = 1;\n        }\n        if (result[letters[i]] > max) {\n            max = result[letters[i]];\n            maxLetters = [];\n            maxLetters.push(letters[i]);\n        } else if (result[letters[i]] === max) {\n            maxLetters.push(letters[i]);\n        }\n    }\n    return {[maxLetters.join(\" \")]: max};\n}\n\nconsole.log(histogram(\"a b c d e f\"));\nconsole.log(histogram(\"a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdrtas7_x.ts(28,585): error TS1002: Unterminated string literal.\n../../../../tmp/tmpdrtas7_x.ts(29,1): error TS1005: ',' expected.\n../../../../tmp/tmpdrtas7_x.ts(29,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334941
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let hist: {[key: string]: number} = {};\n    for (let i = 0; i < test.length; i++) {\n        if (hist[test[i]]) {\n            hist[test[i]]++;\n        } else {\n            hist[test[i]] = 1;\n        }\n    }\n    return hist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpd9g8slnb.js:20:12)\n    at Object.<anonymous> (/tmp/tmpd9g8slnb.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334922
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join(\"\")]: max};\n}\n\nconsole.log(histogram(\"aabbbcccc\")); // {c: 4}\nconsole.log(histogram(\"aabbbccccdddd\")); // {d: 4}\nconsole.log(histogram(\"aabbbccccddddeeeee\")); // {e: 5}\nconsole.log(histogram(\"aabbbccccddddeeeeeffffff\")); // {f: 6}\nconsole.log(histogram(\"aabbbccccddddeeeeeffffffggggggg\")); // {g: 7}\nconsole.log(histogram(\"aabbbccccddddeeeeeffffffggggggghhhhhhhh\")); // {h: 8}\nconsole.log(histogram(\"aabbbccccddddeeeeeffffffggggggghhhhhhhhiiiiiiiii\")); // {i: 9}\nconsole.log(histogram(\"aabbbccccddddeeeeeffffffggggggghhhhhhhhiiiiiiiii\")); // {i: 9}\nconsole.log(histogram(\"aabbbccccddddeeeeeffffffggggggghhhhhhhhiiiiiiiii\")); // {i: 9}\nconsole.log(histogram(\"aabbbccccddddeeeeeffffffggggggghhhhhhhhiiiiiiiii\")); // {i: 9}\nconsole.log(histogram(\"aabbbccccddddeeeeeffffffgggg\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpo2n_aic0.ts(35,52): error TS1002: Unterminated string literal.\n../../../../tmp/tmpo2n_aic0.ts(36,1): error TS1005: ',' expected.\n../../../../tmp/tmpo2n_aic0.ts(36,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334941
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n  let hist: {[key: string]: number} = {};\n  for (let i = 0; i < test.length; i++) {\n    if (hist[test[i]]) {\n      hist[test[i]]++;\n    } else {\n      hist[test[i]] = 1;\n    }\n  }\n  return hist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpdak53fp2.js:20:12)\n    at Object.<anonymous> (/tmp/tmpdak53fp2.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334941
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let letters = test.split(' ');\n    let letterCount = {};\n    let maxCount = 0;\n    let maxLetter = '';\n    for (let letter of letters) {\n        if (letterCount[letter]) {\n            letterCount[letter] += 1;\n        } else {\n            letterCount[letter] = 1;\n        }\n        if (letterCount[letter] > maxCount) {\n            maxCount = letterCount[letter];\n            maxLetter = letter;\n        }\n    }\n    return letterCount;\n}\n\nconsole.log(histogram('a b c d e f'));\nconsole.log(histogram('a b c d e f a b c d e f'));\nconsole.log(histogram('a b c d e f a b c d e f a b c d e f'));\nconsole.log(histogram('a b c d e f a b c d e f a b c d e f a b c d e f'));\nconsole.log(histogram('a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f'));\nconsole.log(histogram('a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f'));\nconsole.log(histogram('a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f'));\nconsole.log(histogram('a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f'));\nconsole.log(histogram('a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f'));\nconsole.log(histogram('a b c d e f a b c d e f a b c\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprrxi4c93.ts(33,53): error TS1002: Unterminated string literal.\n../../../../tmp/tmprrxi4c93.ts(34,1): error TS1005: ',' expected.\n../../../../tmp/tmprrxi4c93.ts(34,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334941
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    test.split(\"\").forEach(letter => {\n        if (result[letter]) {\n            result[letter]++;\n        } else {\n            result[letter] = 1;\n        }\n        if (result[letter] > max) {\n            max = result[letter];\n            maxLetters = [letter];\n        } else if (result[letter] === max) {\n            maxLetters.push(letter);\n        }\n    });\n    return {[maxLetters.join(\"\")]: max};\n}\n\nconsole.log(histogram(\"aabbbcccdddd\")); // {a: 2, b: 3, c: 3, d: 4}\nconsole.log(histogram(\"aabbcccdddd\")); // {a: 2, b: 2, c: 3, d: 4}\nconsole.log(histogram(\"aabbccdddd\")); // {a: 2, b: 2, c: 2, d: 4}\nconsole.log(histogram(\"aabbccdd\")); // {a: 2, b: 2, c: 2, d: 2}\nconsole.log(histogram(\"aabbcc\")); // {a: 2, b: 2, c: 2}\nconsole.log(histogram(\"aabb\")); // {a: 2, b: 2}\nconsole.log(histogram(\"aa\")); // {a: 2}\nconsole.log(histogram(\"a\")); // {a: 1}\nconsole.log(histogram(\"\")); // {}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpj0ljizvz.js:38:12)\n    at Object.<anonymous> (/tmp/tmpj0ljizvz.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "{ d: 4 }\n{ d: 4 }\n{ d: 4 }\n{ abcd: 2 }\n{ abc: 2 }\n{ ab: 2 }\n{ a: 2 }\n{ a: 1 }\n{ '': 0 }\n",
      "timestamp": 1660334942
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    test.split(\"\").forEach(letter => {\n        if (result[letter]) {\n            result[letter]++;\n        } else {\n            result[letter] = 1;\n        }\n        if (result[letter] > max) {\n            max = result[letter];\n            maxLetters = [letter];\n        } else if (result[letter] === max) {\n            maxLetters.push(letter);\n        }\n    });\n    return {[maxLetters.join(\"\")]: max};\n}\n\nconsole.log(histogram(\"abracadabra\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmplslw5m64.js:30:12)\n    at Object.<anonymous> (/tmp/tmplslw5m64.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "{ a: 5 }\n",
      "timestamp": 1660334942
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetter: string = '';\n    for (let i: number = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]] += 1;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetter = test[i];\n        }\n    }\n    return {[maxLetter]: max};\n}\n\nconsole.log(histogram('aabbccdddd'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmp74zvsh44.js:27:12)\n    at Object.<anonymous> (/tmp/tmp74zvsh44.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "{ d: 4 }\n",
      "timestamp": 1660334942
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let hist: {[key: string]: number} = {};\n    for (let i = 0; i < test.length; i++) {\n        if (hist[test[i]]) {\n            hist[test[i]] += 1;\n        } else {\n            hist[test[i]] = 1;\n        }\n    }\n    return hist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmp0fladn6v.js:20:12)\n    at Object.<anonymous> (/tmp/tmp0fladn6v.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334926
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max = 0;\n    let maxKeys: string[] = [];\n    for (let i = 0; i < test.length; i++) {\n        let key = test[i];\n        if (result[key] === undefined) {\n            result[key] = 1;\n        } else {\n            result[key]++;\n        }\n        if (result[key] > max) {\n            max = result[key];\n            maxKeys = [key];\n        } else if (result[key] === max) {\n            maxKeys.push(key);\n        }\n    }\n    return {[maxKeys.join('')]: max};\n}\n\nconsole.log(histogram('hello'));\nconsole.log(histogram('abbccc'));\nconsole.log(histogram('abbcccddddeeeee'));\nconsole.log(histogram('abbcccddddeeeeeffffff'));\nconsole.log(histogram('abbcccddddeeeeeffffffggggggg'));\nconsole.log(histogram('abbcccddddeeeeeffffffggggggghhhhhhhh'));\nconsole.log(histogram('abbcccddddeeeeeffffffggggggghhhhhhhhiiiiiiii'));\nconsole.log(histogram('abbcccddddeeeeeffffffggggggghhhhhhhhiiiiiiiijjjjjjjjjj'));\nconsole.log(histogram('abbcccddddeeeeeffffffggggggghhhhhhhhiiiiiiiijjjjjjjjjjkkkkkkkkkkk'));\nconsole.log(histogram('abbcccddddeeeeeffffffggggggghhhhhhhhiiiiiiiijjjjjjjjjjkkkkkkkkkkkllllllllllll'));\nconsole.log(histogram('abbcccddddeeeeeffffffggggggghhhhhhhhiiiiiiiijjjjjjjjjjkkkkkkkkkkkllllllllllllmmmmmmmmmmmmmm'));\nconsole.log(histogram('abbcccddddeeeeeffffffggggggghhhhhhhhiiiiiiiijjjjjjjjjjkkkk\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqj2p_lr7.ts(37,82): error TS1002: Unterminated string literal.\n../../../../tmp/tmpqj2p_lr7.ts(38,1): error TS1005: ',' expected.\n../../../../tmp/tmpqj2p_lr7.ts(38,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334942
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\nconsole.log(histogram('aabbcc'));\nconsole.log(histogram('aabbccdddd'));\nconsole.log(histogram('aabbccddddeee'));\nconsole.log(histogram('aabbccddddeeefff'));\nconsole.log(histogram('aabbccddddeeefffgggg'));\nconsole.log(histogram('aabbccddddeeefffgggghhhhh'));\nconsole.log(histogram('aabbccddddeeefffgggghhhhhiiiiii'));\nconsole.log(histogram('aabbccddddeeefffgggghhhhhiiiiiijjjjjjjj'));\nconsole.log(histogram('aabbccddddeeefffgggghhhhhiiiiiijjjjjjjjkkkkkkkk'));\nconsole.log(histogram('aabbccddddeeefffgggghhhhhiiiiiijjjjjjjjkkkkkkkkllllllllll'));\nconsole.log(histogram('aabbccddddeeefffgggghhhhhiiiiiijjjjjjjjkkkkkkkkllllllllllmmmmmmmmmmmm'));\nconsole.log(histogram('aabbccddddeeefffgggghhhhhiiiiiijjjjjjjjkkkkkkkkllllllllllmmmmmmmmmmmmnnnnnnnnnnnnnnnn'));\nconsole.log(histogram('a\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6sp0jytw.ts(36,25): error TS1002: Unterminated string literal.\n../../../../tmp/tmp6sp0jytw.ts(37,1): error TS1005: ',' expected.\n../../../../tmp/tmp6sp0jytw.ts(37,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334942
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let hist: {[key: string]: number} = {};\n    for (let i = 0; i < test.length; i++) {\n        let letter = test[i];\n        if (hist[letter]) {\n            hist[letter]++;\n        } else {\n            hist[letter] = 1;\n        }\n    }\n    return hist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpq1k21mc4.js:21:12)\n    at Object.<anonymous> (/tmp/tmpq1k21mc4.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334930
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let hist: {[key: string]: number} = {};\n    for (let i = 0; i < test.length; i++) {\n        if (hist[test[i]]) {\n            hist[test[i]]++;\n        } else {\n            hist[test[i]] = 1;\n        }\n    }\n    return hist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpd9g8slnb.js:20:12)\n    at Object.<anonymous> (/tmp/tmpd9g8slnb.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334922
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    for (let i: number = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n        }\n    }\n    for (let key in result) {\n        if (result[key] < max) {\n            delete result[key];\n        }\n    }\n    return result;\n}\nconsole.log(histogram(\"aabbbcccc\"));\nconsole.log(histogram(\"aabbbccc\"));\nconsole.log(histogram(\"aabbbccccc\"));\nconsole.log(histogram(\"aabbbcccccc\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpr5pbai27.js:33:12)\n    at Object.<anonymous> (/tmp/tmpr5pbai27.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "{ c: 4 }\n{ b: 3, c: 3 }\n{ c: 5 }\n{ c: 6 }\n",
      "timestamp": 1660334943
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxKey: string = '';\n    for (let i: number = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxKey = test[i];\n        }\n    }\n    return {[maxKey]: max};\n}\n\nconsole.log(histogram('aabbbcccc')); // {c: 4}\nconsole.log(histogram('aabbbccccdddd')); // {d: 4}\nconsole.log(histogram('aabbbccccddddeeeeeeeeee')); // {e: 10}\nconsole.log(histogram('aabbbccccddddeeeeeeeeeeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmptyr8ld8s.ts(26,1151): error TS1002: Unterminated string literal.\n../../../../tmp/tmptyr8ld8s.ts(27,1): error TS1005: ',' expected.\n../../../../tmp/tmptyr8ld8s.ts(27,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334942
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let dict: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i: number = 0; i < test.length; i++) {\n        if (dict[test[i]]) {\n            dict[test[i]]++;\n        } else {\n            dict[test[i]] = 1;\n        }\n        if (dict[test[i]] > max) {\n            max = dict[test[i]];\n            maxLetters = [test[i]];\n        } else if (dict[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\n\nconsole.log(histogram('aabbbcccc')); // {c: 4}\nconsole.log(histogram('aabbbbcccc')); // {b: 5}\nconsole.log(histogram('aabbbbccccdddd')); // {d: 4}\nconsole.log(histogram('aabbbbccccddddeeeee')); // {e: 5}\nconsole.log(histogram('aabbbbccccddddeeeeeffffff')); // {f: 6}\nconsole.log(histogram('aabbbbccccddddeeeeeffffffggggggg')); // {g: 7}\nconsole.log(histogram('aabbbbccccddddeeeeeffffffggggggghhhhhhhh')); // {h: 8}\nconsole.log(histogram('aabbbbccccddddeeeeeffffffggggggghhhhhhhhiiiiiiii')); // {i: 9}\nconsole.log(histogram('aabbbbccccddddeeeeeffffffggggggghhhhhhhhiiiiiiiijjjjjjjjj')); // {j: 10}\nconsole.log(histogram('aabbbbccccddddeeeeeffffffggggggghhhhhhhhiiiiiiiijjjjjjjjjkkkkkkkkkk')); // {k: 11}\nconsole.log(histogram('aabbbbccccddddeeeeeffffff\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpa4e16kma.ts(35,49): error TS1002: Unterminated string literal.\n../../../../tmp/tmpa4e16kma.ts(36,1): error TS1005: ',' expected.\n../../../../tmp/tmpa4e16kma.ts(36,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334943
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    test.split(\"\").forEach(letter => {\n        if (result[letter]) {\n            result[letter]++;\n        } else {\n            result[letter] = 1;\n        }\n        if (result[letter] > max) {\n            max = result[letter];\n            maxLetters = [letter];\n        } else if (result[letter] === max) {\n            maxLetters.push(letter);\n        }\n    });\n    return {[maxLetters.join(\"\")]: max};\n}\n\nconsole.log(histogram(\"abbbccc\")); // {b: 3}\nconsole.log(histogram(\"abbbcccdddd\")); // {b: 3, d: 4}\nconsole.log(histogram(\"abbbcccddddeeee\")); // {b: 3, d: 4, e: 4}\nconsole.log(histogram(\"abbbcccddddeeeefffff\")); // {b: 3, d: 4, e: 4, f: 5}\nconsole.log(histogram(\"abbbcccddddeeeefffffgggggg\")); // {b: 3, d: 4, e: 4, f: 5, g: 6}\nconsole.log(histogram(\"abbbcccddddeeeefffffggggggaaaaa\")); // {a: 6, b: 3, d: 4, e: 4, f: 5, g: 6}\nconsole.log(histogram(\"abbbcccddddeeeefffffggggggaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpc_2awfop.ts(31,303): error TS1002: Unterminated string literal.\n../../../../tmp/tmpc_2awfop.ts(32,1): error TS1005: ',' expected.\n../../../../tmp/tmpc_2awfop.ts(32,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334943
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let hist: {[key: string]: number} = {};\n    for (let i = 0; i < test.length; i++) {\n        let letter = test[i];\n        if (hist[letter]) {\n            hist[letter]++;\n        } else {\n            hist[letter] = 1;\n        }\n    }\n    return hist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpq1k21mc4.js:21:12)\n    at Object.<anonymous> (/tmp/tmpq1k21mc4.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334930
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max = 0;\n    let maxLetter = '';\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetter = test[i];\n        }\n    }\n    for (let key in result) {\n        if (result[key] < max) {\n            delete result[key];\n        }\n    }\n    return result;\n}\n\nconsole.log(histogram('abccccc'));\nconsole.log(histogram('aabbcc'));\nconsole.log(histogram('aabbccdddd'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpb4i6_xre.js:34:12)\n    at Object.<anonymous> (/tmp/tmpb4i6_xre.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "{ c: 5 }\n{ a: 2, b: 2, c: 2 }\n{ d: 4 }\n",
      "timestamp": 1660334943
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i: number = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\n\nconsole.log(histogram('aabbccdddd'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmptv2x7h4j.js:30:12)\n    at Object.<anonymous> (/tmp/tmptv2x7h4j.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "{ d: 4 }\n",
      "timestamp": 1660334943
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i: number = 0; i < test.length; i++) {\n        if (result[test[i]] === undefined) {\n            result[test[i]] = 1;\n        } else {\n            result[test[i]]++;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\n\nconsole.log(histogram('aabbbccc')); // {a: 2, b: 3, c: 3}\nconsole.log(histogram('aabbbcccdddd')); // {d: 4}\nconsole.log(histogram('aabbbcccddddeeee')); // {e: 4}\nconsole.log(histogram('aabbbcccddddeeeeffff')); // {f: 4}\nconsole.log(histogram('aabbbcccddddeeeeffffgggg')); // {g: 4}\nconsole.log(histogram('aabbbcccddddeeeeffffgggghhhh')); // {h: 4}\nconsole.log(histogram('aabbbcccddddeeeeffffgggghhhhiiii')); // {i: 4}\nconsole.log(histogram('aabbbcccddddeeeeffffgggghhhhiiiijjjj')); // {j: 4}\nconsole.log(histogram('aabbbcccddddeeeeffffgggghhhhiiiijjjjkkkk')); // {k: 4}\nconsole.log(histogram('aabbbcccddddeeeeffffgggghhhhiiiijjjjkkkkllll')); // {l: 4}\nconsole.log(histogram('aabbbcccddddeeeeffffgggghhhhiiiijjjjkkkkllllmmmm')\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp8tsptnis.ts(36,1): error TS1005: ',' expected.\n../../../../tmp/tmp8tsptnis.ts(36,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334943
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetter: string = '';\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetter = test[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(histogram('aabbccdd'));\nconsole.log(histogram('aabbccddee'));\nconsole.log(histogram('aabbccddeeff'));\nconsole.log(histogram('aabbccddeeffgg'));\nconsole.log(histogram('aabbccddeeffgghh'));\nconsole.log(histogram('aabbccddeeffgghhii'));\nconsole.log(histogram('aabbccddeeffgghhiijj'));\nconsole.log(histogram('aabbccddeeffgghhiijjkk'));\nconsole.log(histogram('aabbccddeeffgghhiijjkkll'));\nconsole.log(histogram('aabbccddeeffgghhiijjkkllmm'));\nconsole.log(histogram('aabbccddeeffgghhiijjkkllmmnn'));\nconsole.log(histogram('aabbccddeeffgghhiijjkkllmmnnoo'));\nconsole.log(histogram('aabbccddeeffgghhiijjkkllmmnnoopp'));\nconsole.log(histogram('aabbccddeeffgghhiijjkkllmmnnooppqq'));\nconsole.log(histogram('aabbccddeeffgghhiijjkkllmmnnooppqqrr'));\nconsole.log(histogram('aabbccddeeffgghhiijjkkllmmnnooppqqrrsstt'));\nconsole.log(histogram('aabbccddee\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp66mej7kg.ts(39,34): error TS1002: Unterminated string literal.\n../../../../tmp/tmp66mej7kg.ts(40,1): error TS1005: ',' expected.\n../../../../tmp/tmp66mej7kg.ts(40,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334943
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i: number = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\n\nconsole.log(histogram('aabbccdddd')); // {d: 4}\nconsole.log(histogram('aabbccddddeeee')); // {e: 4}\nconsole.log(histogram('aabbccddddeeeeff')); // {e: 4}\nconsole.log(histogram('aabbccddddeeeeffgg')); // {e: 4}\nconsole.log(histogram('aabbccddddeeeeffgghh')); // {e: 4}\nconsole.log(histogram('aabbccddddeeeeffgghhii')); // {e: 4}\nconsole.log(histogram('aabbccddddeeeeffgghhiiijj')); // {e: 4}\nconsole.log(histogram('aabbccddddeeeeffgghhiiijjkk')); // {e: 4}\nconsole.log(histogram('aabbccddddeeeeffgghhiiijjkkll')); // {e: 4}\nconsole.log(histogram('aabbccddddeeeeffgghhiiijjkkllmm')); // {e: 4}\nconsole.log(histogram('aabbccddddeeeeffgghhiiijjkkllmmnn')); // {e: 4}\nconsole.log(histogram('aabbccddddeeeeffgghhiiijjkkllmmnnoo'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmp6zhhbx8a.js:41:12)\n    at Object.<anonymous> (/tmp/tmp6zhhbx8a.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "{ d: 4 }\n{ de: 4 }\n{ de: 4 }\n{ de: 4 }\n{ de: 4 }\n{ de: 4 }\n{ de: 4 }\n{ de: 4 }\n{ de: 4 }\n{ de: 4 }\n{ de: 4 }\n{ de: 4 }\n",
      "timestamp": 1660334943
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let hist: {[key: string]: number} = {};\n    for (let i = 0; i < test.length; i++) {\n        let letter = test[i];\n        if (hist[letter]) {\n            hist[letter]++;\n        } else {\n            hist[letter] = 1;\n        }\n    }\n    return hist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpq1k21mc4.js:21:12)\n    at Object.<anonymous> (/tmp/tmpq1k21mc4.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334930
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]] === undefined) {\n            result[test[i]] = 1;\n        } else {\n            result[test[i]]++;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\n\nconsole.log(histogram('aabbbccc'));\nconsole.log(histogram('aabbbcccdddd'));\nconsole.log(histogram('aabbbcccddddeeeeeeee'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpluvw1o8d.js:32:12)\n    at Object.<anonymous> (/tmp/tmpluvw1o8d.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "{ bc: 3 }\n{ d: 4 }\n{ e: 8 }\n",
      "timestamp": 1660334943
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let hist: {[key: string]: number} = {};\n    for (let i = 0; i < test.length; i++) {\n        if (hist[test[i]]) {\n            hist[test[i]]++;\n        } else {\n            hist[test[i]] = 1;\n        }\n    }\n    return hist;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpd9g8slnb.js:20:12)\n    at Object.<anonymous> (/tmp/tmpd9g8slnb.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334922
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\n\nconsole.log(histogram('aabbbcccc'));\nconsole.log(histogram('aabbbccccd'));\nconsole.log(histogram('aabbbccccdd'));\nconsole.log(histogram('aabbbccccddd'));\nconsole.log(histogram('aabbbccccdddd'));\nconsole.log(histogram('aabbbccccdddde'));\nconsole.log(histogram('aabbbccccddddee'));\nconsole.log(histogram('aabbbccccddddeee'));\nconsole.log(histogram('aabbbccccddddeeee'));\nconsole.log(histogram('aabbbccccddddeeeee'));\nconsole.log(histogram('aabbbccccddddeeeeee'));\nconsole.log(histogram('aabbbccccddddeeeeeee'));\nconsole.log(histogram('aabbbccccddddeeeeeeee'));\nconsole.log(histogram('aabbbccccddddeeeeeeeee'));\nconsole.log(histogram('aabbbccccddddeeeeeeeeee'));\nconsole.log(histogram('aabbbccccddddeeeeeeeeeee'));\nconsole.log(histogram('aabbbccccddddeeeeeeeeeeee'));\nconsole.log(histogram('aabbbccccddddeeee\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3ix39bcy.ts(42,41): error TS1002: Unterminated string literal.\n../../../../tmp/tmp3ix39bcy.ts(43,1): error TS1005: ',' expected.\n../../../../tmp/tmp3ix39bcy.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334943
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i: number = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\n\nconsole.log(histogram('aabbbcc')); // {a: 2, b: 3, c: 2}\nconsole.log(histogram('aabbccdddd')); // {d: 4}\nconsole.log(histogram('aabbccddddeeeeeeeeee')); // {e: 10}\nconsole.log(histogram('aabbccddddeeeeeeeeeeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmptr5v15lw.ts(28,992): error TS1002: Unterminated string literal.\n../../../../tmp/tmptr5v15lw.ts(29,1): error TS1005: ',' expected.\n../../../../tmp/tmptr5v15lw.ts(29,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334943
    },
    {
      "exit_code": 2,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n            maxLetters = [test[i]];\n        } else if (result[test[i]] === max) {\n            maxLetters.push(test[i]);\n        }\n    }\n    return {[maxLetters.join('')]: max};\n}\n\nconsole.log(histogram('aabbbccd'));\nconsole.log(histogram('aabbbccdddd'));\nconsole.log(histogram('aabbbccddddeeeee'));\nconsole.log(histogram('aabbbccddddeeeeeffffff'));\nconsole.log(histogram('aabbbccddddeeeeeffffffggggggg'));\nconsole.log(histogram('aabbbccddddeeeeeffffffgggggggiiiiiiii'));\nconsole.log(histogram('aabbbccddddeeeeeffffffgggggggiiiiiiiihhhhhhhh'));\nconsole.log(histogram('aabbbccddddeeeeeffffffgggggggiiiiiiiihhhhhhhhjjjjjjjjjj'));\nconsole.log(histogram('aabbbccddddeeeeeffffffgggggggiiiiiiiihhhhhhhhjjjjjjjjjjkkkkkkkkkkk'));\nconsole.log(histogram('aabbbccddddeeeeeffffffgggggggiiiiiiiihhhhhhhhjjjjjjjjjjkkkkkkkkkkkllllllllllll'));\nconsole.log(histogram('aabbbccddddeeeeeffffffgggggggiiiiiiiihhhhhhhhjjjjjjjjjjkkkkkkkkkkkllllllllllllmmmmmmmmmmmmmm'));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_6y2086f.ts(36,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334943
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let result: {[key: string]: number} = {};\n    let max: number = 0;\n    for (let i: number = 0; i < test.length; i++) {\n        if (result[test[i]]) {\n            result[test[i]]++;\n        } else {\n            result[test[i]] = 1;\n        }\n        if (result[test[i]] > max) {\n            max = result[test[i]];\n        }\n    }\n    let result2: {[key: string]: number} = {};\n    for (let i: number = 0; i < test.length; i++) {\n        if (result[test[i]] === max) {\n            result2[test[i]] = max;\n        }\n    }\n    return result2;\n}\nconsole.log(histogram(\"abbcccddddeeeee\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpw22pdawi.js:31:12)\n    at Object.<anonymous> (/tmp/tmpw22pdawi.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { ' ': 3 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "{ e: 5 }\n",
      "timestamp": 1660334944
    },
    {
      "exit_code": 1,
      "program": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\nfunction histogram(test: string): {[key: string]: number} {\n    let letters: {[key: string]: number} = {};\n    for (let i = 0; i < test.length; i++) {\n        if (letters[test[i]]) {\n            letters[test[i]]++;\n        } else {\n            letters[test[i]] = 1;\n        }\n    }\n    return letters;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmp7ehutjzd.js:20:12)\n    at Object.<anonymous> (/tmp/tmp7ehutjzd.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, ' ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334944
    }
  ]
}